import{S as $Ct,i as ICt,s as jCt,e as a,k as l,w as m,t as o,M as DCt,c as s,d as t,m as i,a as n,x as f,h as r,b as c,F as e,g as b,y as g,q as h,o as u,B as p}from"../../chunks/vendor-4833417e.js";import{T as iBr}from"../../chunks/Tip-fffd6df1.js";import{D as M}from"../../chunks/Docstring-4f315ed9.js";import{C as w}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as X}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function NCt(Ii){let J,Pe,de,he,io,me,Fe,Vo,ji,$m,ma,Di,Ni,Q5,Im,Le,co,qi,qs,H5,Os,Gs,U5,Oi,Xs,J5,Gi,jm,qa;return{c(){J=a("p"),Pe=o("If your "),de=a("code"),he=o("NewModelConfig"),io=o(" is a subclass of "),me=a("code"),Fe=o("PretrainedConfig"),Vo=o(`, make sure its
`),ji=a("code"),$m=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Ni=o('"new-model"'),Q5=o(")."),Im=l(),Le=a("p"),co=o("Likewise, if your "),qi=a("code"),qs=o("NewModel"),H5=o(" is a subclass of "),Os=a("a"),Gs=o("PreTrainedModel"),U5=o(`, make sure its
`),Oi=a("code"),Xs=o("config_class"),J5=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jm=o("NewModelConfig"),qa=o(")."),this.h()},l(mo){J=s(mo,"P",{});var ue=n(J);Pe=r(ue,"If your "),de=s(ue,"CODE",{});var q7=n(de);he=r(q7,"NewModelConfig"),q7.forEach(t),io=r(ue," is a subclass of "),me=s(ue,"CODE",{});var Xi=n(me);Fe=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(ue,`, make sure its
`),ji=s(ue,"CODE",{});var O7=n(ji);$m=r(O7,"model_type"),O7.forEach(t),ma=r(ue," attribute is set to the same key you use when registering the config (here "),Di=s(ue,"CODE",{});var G7=n(Di);Ni=r(G7,'"new-model"'),G7.forEach(t),Q5=r(ue,")."),ue.forEach(t),Im=i(mo),Le=s(mo,"P",{});var zo=n(Le);co=r(zo,"Likewise, if your "),qi=s(zo,"CODE",{});var Oa=n(qi);qs=r(Oa,"NewModel"),Oa.forEach(t),H5=r(zo," is a subclass of "),Os=s(zo,"A",{href:!0});var X7=n(Os);Gs=r(X7,"PreTrainedModel"),X7.forEach(t),U5=r(zo,`, make sure its
`),Oi=s(zo,"CODE",{});var Dm=n(Oi);Xs=r(Dm,"config_class"),Dm.forEach(t),J5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=s(zo,"CODE",{});var V7=n(Gi);jm=r(V7,"NewModelConfig"),V7.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){c(Os,"href","/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ue){b(mo,J,ue),e(J,Pe),e(J,de),e(de,he),e(J,io),e(J,me),e(me,Fe),e(J,Vo),e(J,ji),e(ji,$m),e(J,ma),e(J,Di),e(Di,Ni),e(J,Q5),b(mo,Im,ue),b(mo,Le,ue),e(Le,co),e(Le,qi),e(qi,qs),e(Le,H5),e(Le,Os),e(Os,Gs),e(Le,U5),e(Le,Oi),e(Oi,Xs),e(Le,J5),e(Le,Gi),e(Gi,jm),e(Le,qa)},d(mo){mo&&t(J),mo&&t(Im),mo&&t(Le)}}}function qCt(Ii){let J,Pe,de,he,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(me){J=s(me,"P",{});var Fe=n(J);Pe=r(Fe,"Passing "),de=s(Fe,"CODE",{});var Vo=n(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Fe," is required when you want to use a private model."),Fe.forEach(t)},m(me,Fe){b(me,J,Fe),e(J,Pe),e(J,de),e(de,he),e(J,io)},d(me){me&&t(J)}}}function OCt(Ii){let J,Pe,de,he,io;return{c(){J=a("p"),Pe=o("Passing "),de=a("code"),he=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(me){J=s(me,"P",{});var Fe=n(J);Pe=r(Fe,"Passing "),de=s(Fe,"CODE",{});var Vo=n(de);he=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Fe," is required when you want to use a private model."),Fe.forEach(t)},m(me,Fe){b(me,J,Fe),e(J,Pe),e(J,de),e(de,he),e(J,io)},d(me){me&&t(J)}}}function GCt(Ii){let J,Pe,de,he,io,me,Fe,Vo,ji,$m,ma,Di,Ni,Q5,Im,Le,co,qi,qs,H5,Os,Gs,U5,Oi,Xs,J5,Gi,jm,qa,mo,ue,q7,Xi,O7,G7,zo,Oa,X7,Dm,V7,TPe,nxe,Vi,Nm,hQ,Y5,FPe,uQ,CPe,lxe,Vs,MPe,pQ,EPe,yPe,_Q,wPe,APe,ixe,K5,dxe,z7,LPe,cxe,qm,mxe,zi,Om,bQ,Z5,BPe,vQ,xPe,fxe,Wo,ey,kPe,oy,RPe,W7,SPe,PPe,$Pe,ry,IPe,TQ,jPe,DPe,NPe,fo,ty,qPe,FQ,OPe,GPe,Wi,XPe,CQ,VPe,zPe,MQ,WPe,QPe,HPe,v,Gm,EQ,UPe,JPe,Q7,YPe,KPe,ZPe,Xm,yQ,e$e,o$e,H7,r$e,t$e,a$e,Vm,wQ,s$e,n$e,U7,l$e,i$e,d$e,zm,AQ,c$e,m$e,J7,f$e,g$e,h$e,Wm,LQ,u$e,p$e,Y7,_$e,b$e,v$e,Qm,BQ,T$e,F$e,K7,C$e,M$e,E$e,Hm,xQ,y$e,w$e,Z7,A$e,L$e,B$e,Um,kQ,x$e,k$e,e9,R$e,S$e,P$e,Jm,RQ,$$e,I$e,o9,j$e,D$e,N$e,Ym,SQ,q$e,O$e,r9,G$e,X$e,V$e,Km,PQ,z$e,W$e,t9,Q$e,H$e,U$e,Zm,$Q,J$e,Y$e,a9,K$e,Z$e,eIe,ef,IQ,oIe,rIe,s9,tIe,aIe,sIe,of,jQ,nIe,lIe,n9,iIe,dIe,cIe,rf,DQ,mIe,fIe,l9,gIe,hIe,uIe,tf,NQ,pIe,_Ie,i9,bIe,vIe,TIe,af,qQ,FIe,CIe,d9,MIe,EIe,yIe,sf,OQ,wIe,AIe,c9,LIe,BIe,xIe,nf,GQ,kIe,RIe,m9,SIe,PIe,$Ie,lf,XQ,IIe,jIe,f9,DIe,NIe,qIe,df,VQ,OIe,GIe,g9,XIe,VIe,zIe,cf,zQ,WIe,QIe,h9,HIe,UIe,JIe,mf,WQ,YIe,KIe,u9,ZIe,eje,oje,ff,QQ,rje,tje,p9,aje,sje,nje,gf,HQ,lje,ije,_9,dje,cje,mje,hf,UQ,fje,gje,b9,hje,uje,pje,uf,JQ,_je,bje,v9,vje,Tje,Fje,pf,YQ,Cje,Mje,T9,Eje,yje,wje,_f,KQ,Aje,Lje,F9,Bje,xje,kje,bf,ZQ,Rje,Sje,C9,Pje,$je,Ije,vf,eH,jje,Dje,M9,Nje,qje,Oje,Tf,oH,Gje,Xje,E9,Vje,zje,Wje,Ff,rH,Qje,Hje,y9,Uje,Jje,Yje,Cf,tH,Kje,Zje,w9,eDe,oDe,rDe,Mf,aH,tDe,aDe,A9,sDe,nDe,lDe,Ef,sH,iDe,dDe,L9,cDe,mDe,fDe,yf,nH,gDe,hDe,B9,uDe,pDe,_De,wf,lH,bDe,vDe,x9,TDe,FDe,CDe,Af,iH,MDe,EDe,k9,yDe,wDe,ADe,Lf,dH,LDe,BDe,R9,xDe,kDe,RDe,Bf,cH,SDe,PDe,S9,$De,IDe,jDe,xf,mH,DDe,NDe,P9,qDe,ODe,GDe,kf,fH,XDe,VDe,$9,zDe,WDe,QDe,Rf,gH,HDe,UDe,I9,JDe,YDe,KDe,Sf,hH,ZDe,eNe,j9,oNe,rNe,tNe,Pf,uH,aNe,sNe,D9,nNe,lNe,iNe,$f,pH,dNe,cNe,N9,mNe,fNe,gNe,If,_H,hNe,uNe,q9,pNe,_Ne,bNe,jf,bH,vNe,TNe,O9,FNe,CNe,MNe,Df,vH,ENe,yNe,G9,wNe,ANe,LNe,Nf,TH,BNe,xNe,X9,kNe,RNe,SNe,qf,FH,PNe,$Ne,V9,INe,jNe,DNe,Of,CH,NNe,qNe,z9,ONe,GNe,XNe,Gf,MH,VNe,zNe,W9,WNe,QNe,HNe,Xf,EH,UNe,JNe,Q9,YNe,KNe,ZNe,Vf,yH,eqe,oqe,H9,rqe,tqe,aqe,zf,wH,sqe,nqe,U9,lqe,iqe,dqe,Wf,AH,cqe,mqe,J9,fqe,gqe,hqe,Qf,LH,uqe,pqe,Y9,_qe,bqe,vqe,Hf,BH,Tqe,Fqe,K9,Cqe,Mqe,Eqe,Uf,xH,yqe,wqe,Z9,Aqe,Lqe,Bqe,Jf,kH,xqe,kqe,eB,Rqe,Sqe,Pqe,Yf,RH,$qe,Iqe,oB,jqe,Dqe,Nqe,Kf,SH,qqe,Oqe,rB,Gqe,Xqe,Vqe,Zf,PH,zqe,Wqe,tB,Qqe,Hqe,Uqe,eg,$H,Jqe,Yqe,aB,Kqe,Zqe,eOe,og,IH,oOe,rOe,sB,tOe,aOe,sOe,rg,jH,nOe,lOe,nB,iOe,dOe,cOe,tg,DH,mOe,fOe,lB,gOe,hOe,uOe,ag,NH,pOe,_Oe,iB,bOe,vOe,TOe,sg,qH,FOe,COe,dB,MOe,EOe,yOe,ng,OH,wOe,AOe,cB,LOe,BOe,xOe,lg,GH,kOe,ROe,mB,SOe,POe,$Oe,ig,XH,IOe,jOe,fB,DOe,NOe,qOe,dg,VH,OOe,GOe,gB,XOe,VOe,zOe,cg,zH,WOe,QOe,hB,HOe,UOe,JOe,mg,WH,YOe,KOe,uB,ZOe,eGe,oGe,fg,QH,rGe,tGe,pB,aGe,sGe,nGe,gg,HH,lGe,iGe,_B,dGe,cGe,mGe,hg,UH,fGe,gGe,bB,hGe,uGe,pGe,ug,JH,_Ge,bGe,vB,vGe,TGe,FGe,pg,YH,CGe,MGe,TB,EGe,yGe,wGe,_g,KH,AGe,LGe,FB,BGe,xGe,kGe,bg,ZH,RGe,SGe,CB,PGe,$Ge,IGe,vg,eU,jGe,DGe,MB,NGe,qGe,OGe,Tg,oU,GGe,XGe,EB,VGe,zGe,WGe,Fg,rU,QGe,HGe,yB,UGe,JGe,YGe,Cg,tU,KGe,ZGe,wB,eXe,oXe,rXe,Mg,aU,tXe,aXe,AB,sXe,nXe,lXe,Eg,sU,iXe,dXe,LB,cXe,mXe,fXe,yg,nU,gXe,hXe,BB,uXe,pXe,_Xe,wg,lU,bXe,vXe,xB,TXe,FXe,CXe,Ag,iU,MXe,EXe,kB,yXe,wXe,AXe,Lg,dU,LXe,BXe,RB,xXe,kXe,RXe,cU,SXe,PXe,ay,$Xe,Bg,sy,IXe,mU,jXe,gxe,Qi,xg,fU,ny,DXe,gU,NXe,hxe,Qo,ly,qXe,iy,OXe,SB,GXe,XXe,VXe,dy,zXe,hU,WXe,QXe,HXe,go,cy,UXe,uU,JXe,YXe,Ga,KXe,pU,ZXe,eVe,_U,oVe,rVe,bU,tVe,aVe,sVe,E,zs,vU,nVe,lVe,PB,iVe,dVe,$B,cVe,mVe,fVe,Ws,TU,gVe,hVe,IB,uVe,pVe,jB,_Ve,bVe,vVe,Qs,FU,TVe,FVe,DB,CVe,MVe,NB,EVe,yVe,wVe,kg,CU,AVe,LVe,qB,BVe,xVe,kVe,Hs,MU,RVe,SVe,OB,PVe,$Ve,GB,IVe,jVe,DVe,Rg,EU,NVe,qVe,XB,OVe,GVe,XVe,Sg,yU,VVe,zVe,VB,WVe,QVe,HVe,Pg,wU,UVe,JVe,zB,YVe,KVe,ZVe,Us,AU,eze,oze,WB,rze,tze,QB,aze,sze,nze,Js,LU,lze,ize,HB,dze,cze,UB,mze,fze,gze,Ys,BU,hze,uze,JB,pze,_ze,YB,bze,vze,Tze,$g,xU,Fze,Cze,KB,Mze,Eze,yze,Ig,kU,wze,Aze,ZB,Lze,Bze,xze,Ks,RU,kze,Rze,ex,Sze,Pze,ox,$ze,Ize,jze,jg,SU,Dze,Nze,rx,qze,Oze,Gze,Zs,PU,Xze,Vze,tx,zze,Wze,ax,Qze,Hze,Uze,en,$U,Jze,Yze,sx,Kze,Zze,nx,eWe,oWe,rWe,on,IU,tWe,aWe,lx,sWe,nWe,jU,lWe,iWe,dWe,Dg,DU,cWe,mWe,ix,fWe,gWe,hWe,rn,NU,uWe,pWe,dx,_We,bWe,cx,vWe,TWe,FWe,Ng,qU,CWe,MWe,mx,EWe,yWe,wWe,tn,OU,AWe,LWe,fx,BWe,xWe,gx,kWe,RWe,SWe,an,GU,PWe,$We,hx,IWe,jWe,ux,DWe,NWe,qWe,sn,XU,OWe,GWe,px,XWe,VWe,_x,zWe,WWe,QWe,qg,VU,HWe,UWe,bx,JWe,YWe,KWe,nn,zU,ZWe,eQe,vx,oQe,rQe,Tx,tQe,aQe,sQe,Og,WU,nQe,lQe,Fx,iQe,dQe,cQe,ln,QU,mQe,fQe,Cx,gQe,hQe,Mx,uQe,pQe,_Qe,dn,HU,bQe,vQe,Ex,TQe,FQe,yx,CQe,MQe,EQe,cn,UU,yQe,wQe,wx,AQe,LQe,Ax,BQe,xQe,kQe,mn,JU,RQe,SQe,Lx,PQe,$Qe,Bx,IQe,jQe,DQe,Gg,YU,NQe,qQe,xx,OQe,GQe,XQe,fn,KU,VQe,zQe,kx,WQe,QQe,Rx,HQe,UQe,JQe,gn,ZU,YQe,KQe,Sx,ZQe,eHe,Px,oHe,rHe,tHe,hn,eJ,aHe,sHe,$x,nHe,lHe,Ix,iHe,dHe,cHe,un,oJ,mHe,fHe,jx,gHe,hHe,Dx,uHe,pHe,_He,pn,rJ,bHe,vHe,Nx,THe,FHe,qx,CHe,MHe,EHe,_n,tJ,yHe,wHe,Ox,AHe,LHe,Gx,BHe,xHe,kHe,Xg,aJ,RHe,SHe,Xx,PHe,$He,IHe,bn,sJ,jHe,DHe,Vx,NHe,qHe,zx,OHe,GHe,XHe,Vg,nJ,VHe,zHe,Wx,WHe,QHe,HHe,zg,lJ,UHe,JHe,Qx,YHe,KHe,ZHe,vn,iJ,eUe,oUe,Hx,rUe,tUe,Ux,aUe,sUe,nUe,Tn,dJ,lUe,iUe,Jx,dUe,cUe,Yx,mUe,fUe,gUe,Wg,cJ,hUe,uUe,Kx,pUe,_Ue,bUe,Fn,mJ,vUe,TUe,Zx,FUe,CUe,ek,MUe,EUe,yUe,Cn,fJ,wUe,AUe,ok,LUe,BUe,rk,xUe,kUe,RUe,Mn,gJ,SUe,PUe,tk,$Ue,IUe,ak,jUe,DUe,NUe,En,hJ,qUe,OUe,sk,GUe,XUe,nk,VUe,zUe,WUe,yn,uJ,QUe,HUe,lk,UUe,JUe,ik,YUe,KUe,ZUe,Qg,pJ,eJe,oJe,dk,rJe,tJe,aJe,Hg,_J,sJe,nJe,ck,lJe,iJe,dJe,Ug,bJ,cJe,mJe,mk,fJe,gJe,hJe,Jg,vJ,uJe,pJe,fk,_Je,bJe,vJe,wn,TJ,TJe,FJe,gk,CJe,MJe,hk,EJe,yJe,wJe,Yg,FJ,AJe,LJe,uk,BJe,xJe,kJe,An,CJ,RJe,SJe,pk,PJe,$Je,_k,IJe,jJe,DJe,Ln,MJ,NJe,qJe,bk,OJe,GJe,vk,XJe,VJe,zJe,Bn,EJ,WJe,QJe,Tk,HJe,UJe,Fk,JJe,YJe,KJe,xn,yJ,ZJe,eYe,Ck,oYe,rYe,Mk,tYe,aYe,sYe,kn,wJ,nYe,lYe,Ek,iYe,dYe,yk,cYe,mYe,fYe,Rn,AJ,gYe,hYe,wk,uYe,pYe,Ak,_Ye,bYe,vYe,Kg,LJ,TYe,FYe,Lk,CYe,MYe,EYe,Zg,BJ,yYe,wYe,Bk,AYe,LYe,BYe,Sn,xJ,xYe,kYe,xk,RYe,SYe,kk,PYe,$Ye,IYe,Pn,kJ,jYe,DYe,Rk,NYe,qYe,Sk,OYe,GYe,XYe,$n,RJ,VYe,zYe,Pk,WYe,QYe,$k,HYe,UYe,JYe,eh,SJ,YYe,KYe,Ik,ZYe,eKe,oKe,oh,PJ,rKe,tKe,jk,aKe,sKe,nKe,rh,$J,lKe,iKe,Dk,dKe,cKe,mKe,th,IJ,fKe,gKe,Nk,hKe,uKe,pKe,In,jJ,_Ke,bKe,qk,vKe,TKe,Ok,FKe,CKe,MKe,ah,DJ,EKe,yKe,Gk,wKe,AKe,LKe,sh,NJ,BKe,xKe,Xk,kKe,RKe,SKe,jn,qJ,PKe,$Ke,Vk,IKe,jKe,zk,DKe,NKe,qKe,Dn,OJ,OKe,GKe,Wk,XKe,VKe,Qk,zKe,WKe,QKe,GJ,HKe,UKe,my,JKe,nh,fy,YKe,XJ,KKe,uxe,Hi,lh,VJ,gy,ZKe,zJ,eZe,pxe,Ho,hy,oZe,uy,rZe,Hk,tZe,aZe,sZe,py,nZe,WJ,lZe,iZe,dZe,$e,_y,cZe,QJ,mZe,fZe,Xa,gZe,HJ,hZe,uZe,UJ,pZe,_Ze,JJ,bZe,vZe,TZe,ae,ih,YJ,FZe,CZe,Uk,MZe,EZe,yZe,dh,KJ,wZe,AZe,Jk,LZe,BZe,xZe,ch,ZJ,kZe,RZe,Yk,SZe,PZe,$Ze,mh,eY,IZe,jZe,Kk,DZe,NZe,qZe,fh,oY,OZe,GZe,Zk,XZe,VZe,zZe,gh,rY,WZe,QZe,eR,HZe,UZe,JZe,hh,tY,YZe,KZe,oR,ZZe,eeo,oeo,uh,aY,reo,teo,rR,aeo,seo,neo,ph,sY,leo,ieo,tR,deo,ceo,meo,_h,nY,feo,geo,aR,heo,ueo,peo,bh,lY,_eo,beo,sR,veo,Teo,Feo,vh,iY,Ceo,Meo,nR,Eeo,yeo,weo,Th,dY,Aeo,Leo,lR,Beo,xeo,keo,Fh,cY,Reo,Seo,iR,Peo,$eo,Ieo,Ch,mY,jeo,Deo,dR,Neo,qeo,Oeo,Mh,fY,Geo,Xeo,cR,Veo,zeo,Weo,Eh,Qeo,gY,Heo,Ueo,by,Jeo,yh,vy,Yeo,hY,Keo,_xe,Ui,wh,uY,Ty,Zeo,pY,eoo,bxe,Uo,Fy,ooo,Cy,roo,mR,too,aoo,soo,My,noo,_Y,loo,ioo,doo,Ie,Ey,coo,bY,moo,foo,Ji,goo,vY,hoo,uoo,TY,poo,_oo,boo,Be,Ah,FY,voo,Too,fR,Foo,Coo,Moo,Lh,CY,Eoo,yoo,gR,woo,Aoo,Loo,Bh,MY,Boo,xoo,hR,koo,Roo,Soo,xh,EY,Poo,$oo,uR,Ioo,joo,Doo,kh,yY,Noo,qoo,pR,Ooo,Goo,Xoo,Rh,wY,Voo,zoo,_R,Woo,Qoo,Hoo,Sh,AY,Uoo,Joo,bR,Yoo,Koo,Zoo,Ph,LY,ero,oro,vR,rro,tro,aro,$h,sro,BY,nro,lro,yy,iro,Ih,wy,dro,xY,cro,vxe,Yi,jh,kY,Ay,mro,RY,fro,Txe,Jo,Ly,gro,Ki,hro,SY,uro,pro,PY,_ro,bro,vro,By,Tro,$Y,Fro,Cro,Mro,Vr,xy,Ero,IY,yro,wro,Zi,Aro,jY,Lro,Bro,DY,xro,kro,Rro,NY,Sro,Pro,ky,$ro,je,Ry,Iro,qY,jro,Dro,Va,Nro,OY,qro,Oro,GY,Gro,Xro,XY,Vro,zro,Wro,F,Dh,VY,Qro,Hro,TR,Uro,Jro,Yro,Nh,zY,Kro,Zro,FR,eto,oto,rto,qh,WY,tto,ato,CR,sto,nto,lto,Oh,QY,ito,dto,MR,cto,mto,fto,Gh,HY,gto,hto,ER,uto,pto,_to,Xh,UY,bto,vto,yR,Tto,Fto,Cto,Vh,JY,Mto,Eto,wR,yto,wto,Ato,zh,YY,Lto,Bto,AR,xto,kto,Rto,Wh,KY,Sto,Pto,LR,$to,Ito,jto,Qh,ZY,Dto,Nto,BR,qto,Oto,Gto,Hh,eK,Xto,Vto,xR,zto,Wto,Qto,Uh,oK,Hto,Uto,kR,Jto,Yto,Kto,Jh,rK,Zto,eao,RR,oao,rao,tao,Yh,tK,aao,sao,SR,nao,lao,iao,Kh,aK,dao,cao,PR,mao,fao,gao,Zh,sK,hao,uao,$R,pao,_ao,bao,eu,nK,vao,Tao,IR,Fao,Cao,Mao,ou,lK,Eao,yao,jR,wao,Aao,Lao,ru,iK,Bao,xao,DR,kao,Rao,Sao,tu,dK,Pao,$ao,NR,Iao,jao,Dao,au,cK,Nao,qao,qR,Oao,Gao,Xao,su,mK,Vao,zao,OR,Wao,Qao,Hao,nu,fK,Uao,Jao,GR,Yao,Kao,Zao,lu,gK,eso,oso,XR,rso,tso,aso,iu,hK,sso,nso,VR,lso,iso,dso,du,uK,cso,mso,zR,fso,gso,hso,cu,pK,uso,pso,WR,_so,bso,vso,Nn,_K,Tso,Fso,QR,Cso,Mso,HR,Eso,yso,wso,mu,bK,Aso,Lso,UR,Bso,xso,kso,fu,vK,Rso,Sso,JR,Pso,$so,Iso,gu,TK,jso,Dso,YR,Nso,qso,Oso,hu,FK,Gso,Xso,KR,Vso,zso,Wso,uu,CK,Qso,Hso,ZR,Uso,Jso,Yso,pu,MK,Kso,Zso,eS,eno,ono,rno,_u,EK,tno,ano,oS,sno,nno,lno,bu,yK,ino,dno,rS,cno,mno,fno,vu,wK,gno,hno,tS,uno,pno,_no,Tu,AK,bno,vno,aS,Tno,Fno,Cno,Fu,LK,Mno,Eno,sS,yno,wno,Ano,Cu,BK,Lno,Bno,nS,xno,kno,Rno,Mu,xK,Sno,Pno,lS,$no,Ino,jno,Eu,kK,Dno,Nno,iS,qno,Ono,Gno,yu,RK,Xno,Vno,dS,zno,Wno,Qno,wu,SK,Hno,Uno,cS,Jno,Yno,Kno,Au,PK,Zno,elo,mS,olo,rlo,tlo,Lu,$K,alo,slo,fS,nlo,llo,ilo,Bu,IK,dlo,clo,gS,mlo,flo,glo,xu,jK,hlo,ulo,hS,plo,_lo,blo,ku,DK,vlo,Tlo,uS,Flo,Clo,Mlo,Ru,NK,Elo,ylo,pS,wlo,Alo,Llo,Su,qK,Blo,xlo,_S,klo,Rlo,Slo,Pu,OK,Plo,$lo,bS,Ilo,jlo,Dlo,$u,GK,Nlo,qlo,vS,Olo,Glo,Xlo,Iu,XK,Vlo,zlo,TS,Wlo,Qlo,Hlo,ju,VK,Ulo,Jlo,FS,Ylo,Klo,Zlo,Du,zK,eio,oio,CS,rio,tio,aio,Nu,WK,sio,nio,MS,lio,iio,dio,qu,QK,cio,mio,ES,fio,gio,hio,Ou,HK,uio,pio,yS,_io,bio,vio,Gu,UK,Tio,Fio,wS,Cio,Mio,Eio,Xu,JK,yio,wio,AS,Aio,Lio,Bio,Vu,YK,xio,kio,LS,Rio,Sio,Pio,zu,KK,$io,Iio,BS,jio,Dio,Nio,Wu,ZK,qio,Oio,xS,Gio,Xio,Vio,Qu,eZ,zio,Wio,kS,Qio,Hio,Uio,Hu,oZ,Jio,Yio,RS,Kio,Zio,edo,Uu,rZ,odo,rdo,SS,tdo,ado,sdo,Ju,tZ,ndo,ldo,PS,ido,ddo,cdo,Yu,aZ,mdo,fdo,$S,gdo,hdo,udo,Ku,sZ,pdo,_do,IS,bdo,vdo,Tdo,Zu,nZ,Fdo,Cdo,jS,Mdo,Edo,ydo,ep,lZ,wdo,Ado,DS,Ldo,Bdo,xdo,op,iZ,kdo,Rdo,NS,Sdo,Pdo,$do,rp,dZ,Ido,jdo,qS,Ddo,Ndo,qdo,tp,cZ,Odo,Gdo,OS,Xdo,Vdo,zdo,ap,mZ,Wdo,Qdo,GS,Hdo,Udo,Jdo,sp,fZ,Ydo,Kdo,XS,Zdo,eco,oco,np,gZ,rco,tco,VS,aco,sco,nco,lp,hZ,lco,ico,zS,dco,cco,mco,ip,uZ,fco,gco,WS,hco,uco,pco,dp,pZ,_co,bco,QS,vco,Tco,Fco,cp,_Z,Cco,Mco,HS,Eco,yco,wco,mp,bZ,Aco,Lco,US,Bco,xco,kco,fp,vZ,Rco,Sco,JS,Pco,$co,Ico,gp,TZ,jco,Dco,YS,Nco,qco,Oco,hp,FZ,Gco,Xco,KS,Vco,zco,Wco,up,CZ,Qco,Hco,ZS,Uco,Jco,Yco,pp,Kco,MZ,Zco,emo,EZ,omo,rmo,yZ,tmo,amo,Sy,Fxe,ed,_p,wZ,Py,smo,AZ,nmo,Cxe,Yo,$y,lmo,od,imo,LZ,dmo,cmo,BZ,mmo,fmo,gmo,Iy,hmo,xZ,umo,pmo,_mo,zr,jy,bmo,kZ,vmo,Tmo,rd,Fmo,RZ,Cmo,Mmo,SZ,Emo,ymo,wmo,PZ,Amo,Lmo,Dy,Bmo,De,Ny,xmo,$Z,kmo,Rmo,za,Smo,IZ,Pmo,$mo,jZ,Imo,jmo,DZ,Dmo,Nmo,qmo,k,bp,NZ,Omo,Gmo,eP,Xmo,Vmo,zmo,vp,qZ,Wmo,Qmo,oP,Hmo,Umo,Jmo,Tp,OZ,Ymo,Kmo,rP,Zmo,efo,ofo,Fp,GZ,rfo,tfo,tP,afo,sfo,nfo,Cp,XZ,lfo,ifo,aP,dfo,cfo,mfo,Mp,VZ,ffo,gfo,sP,hfo,ufo,pfo,Ep,zZ,_fo,bfo,nP,vfo,Tfo,Ffo,yp,WZ,Cfo,Mfo,lP,Efo,yfo,wfo,wp,QZ,Afo,Lfo,iP,Bfo,xfo,kfo,Ap,HZ,Rfo,Sfo,dP,Pfo,$fo,Ifo,Lp,UZ,jfo,Dfo,cP,Nfo,qfo,Ofo,Bp,JZ,Gfo,Xfo,mP,Vfo,zfo,Wfo,xp,YZ,Qfo,Hfo,fP,Ufo,Jfo,Yfo,kp,KZ,Kfo,Zfo,gP,ego,ogo,rgo,Rp,ZZ,tgo,ago,hP,sgo,ngo,lgo,Sp,eee,igo,dgo,uP,cgo,mgo,fgo,Pp,oee,ggo,hgo,pP,ugo,pgo,_go,$p,ree,bgo,vgo,_P,Tgo,Fgo,Cgo,Ip,tee,Mgo,Ego,bP,ygo,wgo,Ago,jp,aee,Lgo,Bgo,vP,xgo,kgo,Rgo,Dp,see,Sgo,Pgo,TP,$go,Igo,jgo,Np,nee,Dgo,Ngo,FP,qgo,Ogo,Ggo,qp,lee,Xgo,Vgo,CP,zgo,Wgo,Qgo,Op,iee,Hgo,Ugo,MP,Jgo,Ygo,Kgo,Gp,dee,Zgo,eho,EP,oho,rho,tho,Xp,cee,aho,sho,yP,nho,lho,iho,Vp,mee,dho,cho,wP,mho,fho,gho,zp,fee,hho,uho,AP,pho,_ho,bho,Wp,gee,vho,Tho,LP,Fho,Cho,Mho,Qp,hee,Eho,yho,BP,who,Aho,Lho,Hp,uee,Bho,xho,xP,kho,Rho,Sho,Up,pee,Pho,$ho,kP,Iho,jho,Dho,Jp,_ee,Nho,qho,RP,Oho,Gho,Xho,Yp,bee,Vho,zho,SP,Who,Qho,Hho,Kp,vee,Uho,Jho,PP,Yho,Kho,Zho,Zp,Tee,euo,ouo,$P,ruo,tuo,auo,e_,Fee,suo,nuo,IP,luo,iuo,duo,o_,Cee,cuo,muo,jP,fuo,guo,huo,r_,Mee,uuo,puo,DP,_uo,buo,vuo,t_,Tuo,Eee,Fuo,Cuo,yee,Muo,Euo,wee,yuo,wuo,qy,Mxe,td,a_,Aee,Oy,Auo,Lee,Luo,Exe,Ko,Gy,Buo,ad,xuo,Bee,kuo,Ruo,xee,Suo,Puo,$uo,Xy,Iuo,kee,juo,Duo,Nuo,Wr,Vy,quo,Ree,Ouo,Guo,sd,Xuo,See,Vuo,zuo,Pee,Wuo,Quo,Huo,$ee,Uuo,Juo,zy,Yuo,Ne,Wy,Kuo,Iee,Zuo,epo,Wa,opo,jee,rpo,tpo,Dee,apo,spo,Nee,npo,lpo,ipo,$,s_,qee,dpo,cpo,NP,mpo,fpo,gpo,n_,Oee,hpo,upo,qP,ppo,_po,bpo,l_,Gee,vpo,Tpo,OP,Fpo,Cpo,Mpo,i_,Xee,Epo,ypo,GP,wpo,Apo,Lpo,d_,Vee,Bpo,xpo,XP,kpo,Rpo,Spo,c_,zee,Ppo,$po,VP,Ipo,jpo,Dpo,m_,Wee,Npo,qpo,zP,Opo,Gpo,Xpo,f_,Qee,Vpo,zpo,WP,Wpo,Qpo,Hpo,g_,Hee,Upo,Jpo,QP,Ypo,Kpo,Zpo,h_,Uee,e_o,o_o,HP,r_o,t_o,a_o,u_,Jee,s_o,n_o,UP,l_o,i_o,d_o,p_,Yee,c_o,m_o,JP,f_o,g_o,h_o,__,Kee,u_o,p_o,YP,__o,b_o,v_o,b_,Zee,T_o,F_o,KP,C_o,M_o,E_o,v_,eoe,y_o,w_o,ZP,A_o,L_o,B_o,T_,ooe,x_o,k_o,e$,R_o,S_o,P_o,F_,roe,$_o,I_o,o$,j_o,D_o,N_o,C_,toe,q_o,O_o,r$,G_o,X_o,V_o,M_,aoe,z_o,W_o,t$,Q_o,H_o,U_o,E_,soe,J_o,Y_o,a$,K_o,Z_o,ebo,y_,noe,obo,rbo,s$,tbo,abo,sbo,w_,loe,nbo,lbo,n$,ibo,dbo,cbo,A_,ioe,mbo,fbo,l$,gbo,hbo,ubo,L_,doe,pbo,_bo,i$,bbo,vbo,Tbo,B_,coe,Fbo,Cbo,d$,Mbo,Ebo,ybo,x_,moe,wbo,Abo,c$,Lbo,Bbo,xbo,k_,foe,kbo,Rbo,m$,Sbo,Pbo,$bo,R_,goe,Ibo,jbo,f$,Dbo,Nbo,qbo,S_,hoe,Obo,Gbo,g$,Xbo,Vbo,zbo,P_,uoe,Wbo,Qbo,h$,Hbo,Ubo,Jbo,$_,poe,Ybo,Kbo,u$,Zbo,e2o,o2o,I_,_oe,r2o,t2o,p$,a2o,s2o,n2o,j_,boe,l2o,i2o,_$,d2o,c2o,m2o,D_,voe,f2o,g2o,b$,h2o,u2o,p2o,N_,Toe,_2o,b2o,v$,v2o,T2o,F2o,q_,C2o,Foe,M2o,E2o,Coe,y2o,w2o,Moe,A2o,L2o,Qy,yxe,nd,O_,Eoe,Hy,B2o,yoe,x2o,wxe,Zo,Uy,k2o,ld,R2o,woe,S2o,P2o,Aoe,$2o,I2o,j2o,Jy,D2o,Loe,N2o,q2o,O2o,Qr,Yy,G2o,Boe,X2o,V2o,id,z2o,xoe,W2o,Q2o,koe,H2o,U2o,J2o,Roe,Y2o,K2o,Ky,Z2o,qe,Zy,evo,Soe,ovo,rvo,Qa,tvo,Poe,avo,svo,$oe,nvo,lvo,Ioe,ivo,dvo,cvo,I,G_,joe,mvo,fvo,T$,gvo,hvo,uvo,X_,Doe,pvo,_vo,F$,bvo,vvo,Tvo,V_,Noe,Fvo,Cvo,C$,Mvo,Evo,yvo,z_,qoe,wvo,Avo,M$,Lvo,Bvo,xvo,W_,Ooe,kvo,Rvo,E$,Svo,Pvo,$vo,Q_,Goe,Ivo,jvo,y$,Dvo,Nvo,qvo,H_,Xoe,Ovo,Gvo,w$,Xvo,Vvo,zvo,U_,Voe,Wvo,Qvo,A$,Hvo,Uvo,Jvo,J_,zoe,Yvo,Kvo,L$,Zvo,eTo,oTo,Y_,Woe,rTo,tTo,B$,aTo,sTo,nTo,K_,Qoe,lTo,iTo,x$,dTo,cTo,mTo,Z_,Hoe,fTo,gTo,k$,hTo,uTo,pTo,eb,Uoe,_To,bTo,R$,vTo,TTo,FTo,ob,Joe,CTo,MTo,S$,ETo,yTo,wTo,rb,Yoe,ATo,LTo,P$,BTo,xTo,kTo,tb,Koe,RTo,STo,$$,PTo,$To,ITo,ab,Zoe,jTo,DTo,I$,NTo,qTo,OTo,sb,ere,GTo,XTo,j$,VTo,zTo,WTo,nb,ore,QTo,HTo,D$,UTo,JTo,YTo,lb,rre,KTo,ZTo,N$,e1o,o1o,r1o,ib,tre,t1o,a1o,q$,s1o,n1o,l1o,db,are,i1o,d1o,O$,c1o,m1o,f1o,cb,sre,g1o,h1o,G$,u1o,p1o,_1o,mb,nre,b1o,v1o,X$,T1o,F1o,C1o,fb,lre,M1o,E1o,V$,y1o,w1o,A1o,gb,ire,L1o,B1o,z$,x1o,k1o,R1o,hb,dre,S1o,P1o,W$,$1o,I1o,j1o,ub,cre,D1o,N1o,Q$,q1o,O1o,G1o,pb,mre,X1o,V1o,H$,z1o,W1o,Q1o,_b,fre,H1o,U1o,U$,J1o,Y1o,K1o,bb,gre,Z1o,eFo,hre,oFo,rFo,tFo,vb,ure,aFo,sFo,J$,nFo,lFo,iFo,Tb,pre,dFo,cFo,Y$,mFo,fFo,gFo,Fb,_re,hFo,uFo,K$,pFo,_Fo,bFo,Cb,bre,vFo,TFo,Z$,FFo,CFo,MFo,Mb,EFo,vre,yFo,wFo,Tre,AFo,LFo,Fre,BFo,xFo,ew,Axe,dd,Eb,Cre,ow,kFo,Mre,RFo,Lxe,er,rw,SFo,cd,PFo,Ere,$Fo,IFo,yre,jFo,DFo,NFo,tw,qFo,wre,OFo,GFo,XFo,Hr,aw,VFo,Are,zFo,WFo,md,QFo,Lre,HFo,UFo,Bre,JFo,YFo,KFo,xre,ZFo,eCo,sw,oCo,Oe,nw,rCo,kre,tCo,aCo,Ha,sCo,Rre,nCo,lCo,Sre,iCo,dCo,Pre,cCo,mCo,fCo,se,yb,$re,gCo,hCo,eI,uCo,pCo,_Co,wb,Ire,bCo,vCo,oI,TCo,FCo,CCo,Ab,jre,MCo,ECo,rI,yCo,wCo,ACo,Lb,Dre,LCo,BCo,tI,xCo,kCo,RCo,Bb,Nre,SCo,PCo,aI,$Co,ICo,jCo,xb,qre,DCo,NCo,sI,qCo,OCo,GCo,kb,Ore,XCo,VCo,nI,zCo,WCo,QCo,Rb,Gre,HCo,UCo,lI,JCo,YCo,KCo,Sb,Xre,ZCo,eMo,iI,oMo,rMo,tMo,Pb,Vre,aMo,sMo,dI,nMo,lMo,iMo,$b,zre,dMo,cMo,cI,mMo,fMo,gMo,Ib,Wre,hMo,uMo,mI,pMo,_Mo,bMo,jb,Qre,vMo,TMo,fI,FMo,CMo,MMo,Db,Hre,EMo,yMo,gI,wMo,AMo,LMo,Nb,Ure,BMo,xMo,hI,kMo,RMo,SMo,qb,Jre,PMo,$Mo,uI,IMo,jMo,DMo,Ob,NMo,Yre,qMo,OMo,Kre,GMo,XMo,Zre,VMo,zMo,lw,Bxe,fd,Gb,ete,iw,WMo,ote,QMo,xxe,or,dw,HMo,gd,UMo,rte,JMo,YMo,tte,KMo,ZMo,e4o,cw,o4o,ate,r4o,t4o,a4o,Ur,mw,s4o,ste,n4o,l4o,hd,i4o,nte,d4o,c4o,lte,m4o,f4o,g4o,ite,h4o,u4o,fw,p4o,Ge,gw,_4o,dte,b4o,v4o,Ua,T4o,cte,F4o,C4o,mte,M4o,E4o,fte,y4o,w4o,A4o,A,Xb,gte,L4o,B4o,pI,x4o,k4o,R4o,Vb,hte,S4o,P4o,_I,$4o,I4o,j4o,zb,ute,D4o,N4o,bI,q4o,O4o,G4o,Wb,pte,X4o,V4o,vI,z4o,W4o,Q4o,Qb,_te,H4o,U4o,TI,J4o,Y4o,K4o,Hb,bte,Z4o,eEo,FI,oEo,rEo,tEo,Ub,vte,aEo,sEo,CI,nEo,lEo,iEo,Jb,Tte,dEo,cEo,MI,mEo,fEo,gEo,Yb,Fte,hEo,uEo,EI,pEo,_Eo,bEo,Kb,Cte,vEo,TEo,yI,FEo,CEo,MEo,Zb,Mte,EEo,yEo,wI,wEo,AEo,LEo,e2,Ete,BEo,xEo,AI,kEo,REo,SEo,o2,yte,PEo,$Eo,LI,IEo,jEo,DEo,r2,wte,NEo,qEo,BI,OEo,GEo,XEo,t2,Ate,VEo,zEo,xI,WEo,QEo,HEo,a2,Lte,UEo,JEo,kI,YEo,KEo,ZEo,s2,Bte,e3o,o3o,RI,r3o,t3o,a3o,n2,xte,s3o,n3o,SI,l3o,i3o,d3o,l2,kte,c3o,m3o,PI,f3o,g3o,h3o,i2,Rte,u3o,p3o,$I,_3o,b3o,v3o,d2,Ste,T3o,F3o,II,C3o,M3o,E3o,c2,Pte,y3o,w3o,jI,A3o,L3o,B3o,m2,$te,x3o,k3o,DI,R3o,S3o,P3o,f2,Ite,$3o,I3o,NI,j3o,D3o,N3o,g2,jte,q3o,O3o,qI,G3o,X3o,V3o,h2,Dte,z3o,W3o,OI,Q3o,H3o,U3o,u2,Nte,J3o,Y3o,GI,K3o,Z3o,e5o,p2,qte,o5o,r5o,XI,t5o,a5o,s5o,_2,Ote,n5o,l5o,VI,i5o,d5o,c5o,b2,Gte,m5o,f5o,zI,g5o,h5o,u5o,v2,Xte,p5o,_5o,WI,b5o,v5o,T5o,T2,Vte,F5o,C5o,QI,M5o,E5o,y5o,F2,zte,w5o,A5o,HI,L5o,B5o,x5o,C2,Wte,k5o,R5o,UI,S5o,P5o,$5o,M2,Qte,I5o,j5o,JI,D5o,N5o,q5o,E2,Hte,O5o,G5o,YI,X5o,V5o,z5o,y2,Ute,W5o,Q5o,KI,H5o,U5o,J5o,w2,Jte,Y5o,K5o,ZI,Z5o,eyo,oyo,A2,Yte,ryo,tyo,ej,ayo,syo,nyo,L2,Kte,lyo,iyo,oj,dyo,cyo,myo,B2,Zte,fyo,gyo,rj,hyo,uyo,pyo,x2,eae,_yo,byo,tj,vyo,Tyo,Fyo,k2,oae,Cyo,Myo,aj,Eyo,yyo,wyo,R2,rae,Ayo,Lyo,sj,Byo,xyo,kyo,S2,tae,Ryo,Syo,nj,Pyo,$yo,Iyo,P2,aae,jyo,Dyo,lj,Nyo,qyo,Oyo,$2,Gyo,sae,Xyo,Vyo,nae,zyo,Wyo,lae,Qyo,Hyo,hw,kxe,ud,I2,iae,uw,Uyo,dae,Jyo,Rxe,rr,pw,Yyo,pd,Kyo,cae,Zyo,ewo,mae,owo,rwo,two,_w,awo,fae,swo,nwo,lwo,Jr,bw,iwo,gae,dwo,cwo,_d,mwo,hae,fwo,gwo,uae,hwo,uwo,pwo,pae,_wo,bwo,vw,vwo,Xe,Tw,Two,_ae,Fwo,Cwo,Ja,Mwo,bae,Ewo,ywo,vae,wwo,Awo,Tae,Lwo,Bwo,xwo,O,j2,Fae,kwo,Rwo,ij,Swo,Pwo,$wo,D2,Cae,Iwo,jwo,dj,Dwo,Nwo,qwo,N2,Mae,Owo,Gwo,cj,Xwo,Vwo,zwo,q2,Eae,Wwo,Qwo,mj,Hwo,Uwo,Jwo,O2,yae,Ywo,Kwo,fj,Zwo,e6o,o6o,G2,wae,r6o,t6o,gj,a6o,s6o,n6o,X2,Aae,l6o,i6o,hj,d6o,c6o,m6o,V2,Lae,f6o,g6o,uj,h6o,u6o,p6o,z2,Bae,_6o,b6o,pj,v6o,T6o,F6o,W2,xae,C6o,M6o,_j,E6o,y6o,w6o,Q2,kae,A6o,L6o,bj,B6o,x6o,k6o,H2,Rae,R6o,S6o,vj,P6o,$6o,I6o,U2,Sae,j6o,D6o,Tj,N6o,q6o,O6o,J2,Pae,G6o,X6o,Fj,V6o,z6o,W6o,Y2,$ae,Q6o,H6o,Cj,U6o,J6o,Y6o,K2,Iae,K6o,Z6o,Mj,eAo,oAo,rAo,Z2,jae,tAo,aAo,Ej,sAo,nAo,lAo,ev,Dae,iAo,dAo,yj,cAo,mAo,fAo,ov,Nae,gAo,hAo,wj,uAo,pAo,_Ao,rv,qae,bAo,vAo,Aj,TAo,FAo,CAo,tv,Oae,MAo,EAo,Lj,yAo,wAo,AAo,av,Gae,LAo,BAo,Bj,xAo,kAo,RAo,sv,Xae,SAo,PAo,xj,$Ao,IAo,jAo,nv,Vae,DAo,NAo,kj,qAo,OAo,GAo,lv,zae,XAo,VAo,Rj,zAo,WAo,QAo,iv,Wae,HAo,UAo,Sj,JAo,YAo,KAo,dv,Qae,ZAo,e0o,Pj,o0o,r0o,t0o,cv,Hae,a0o,s0o,$j,n0o,l0o,i0o,mv,d0o,Uae,c0o,m0o,Jae,f0o,g0o,Yae,h0o,u0o,Fw,Sxe,bd,fv,Kae,Cw,p0o,Zae,_0o,Pxe,tr,Mw,b0o,vd,v0o,ese,T0o,F0o,ose,C0o,M0o,E0o,Ew,y0o,rse,w0o,A0o,L0o,Yr,yw,B0o,tse,x0o,k0o,Td,R0o,ase,S0o,P0o,sse,$0o,I0o,j0o,nse,D0o,N0o,ww,q0o,Ve,Aw,O0o,lse,G0o,X0o,Ya,V0o,ise,z0o,W0o,dse,Q0o,H0o,cse,U0o,J0o,Y0o,da,gv,mse,K0o,Z0o,Ij,eLo,oLo,rLo,hv,fse,tLo,aLo,jj,sLo,nLo,lLo,uv,gse,iLo,dLo,Dj,cLo,mLo,fLo,pv,hse,gLo,hLo,Nj,uLo,pLo,_Lo,_v,use,bLo,vLo,qj,TLo,FLo,CLo,bv,MLo,pse,ELo,yLo,_se,wLo,ALo,bse,LLo,BLo,Lw,$xe,Fd,vv,vse,Bw,xLo,Tse,kLo,Ixe,ar,xw,RLo,Cd,SLo,Fse,PLo,$Lo,Cse,ILo,jLo,DLo,kw,NLo,Mse,qLo,OLo,GLo,Kr,Rw,XLo,Ese,VLo,zLo,Md,WLo,yse,QLo,HLo,wse,ULo,JLo,YLo,Ase,KLo,ZLo,Sw,e8o,ze,Pw,o8o,Lse,r8o,t8o,Ka,a8o,Bse,s8o,n8o,xse,l8o,i8o,kse,d8o,c8o,m8o,N,Tv,Rse,f8o,g8o,Oj,h8o,u8o,p8o,Fv,Sse,_8o,b8o,Gj,v8o,T8o,F8o,Cv,Pse,C8o,M8o,Xj,E8o,y8o,w8o,Mv,$se,A8o,L8o,Vj,B8o,x8o,k8o,Ev,Ise,R8o,S8o,zj,P8o,$8o,I8o,yv,jse,j8o,D8o,Wj,N8o,q8o,O8o,wv,Dse,G8o,X8o,Qj,V8o,z8o,W8o,Av,Nse,Q8o,H8o,Hj,U8o,J8o,Y8o,Lv,qse,K8o,Z8o,Uj,e7o,o7o,r7o,Bv,Ose,t7o,a7o,Jj,s7o,n7o,l7o,xv,Gse,i7o,d7o,Yj,c7o,m7o,f7o,kv,Xse,g7o,h7o,Kj,u7o,p7o,_7o,Rv,Vse,b7o,v7o,Zj,T7o,F7o,C7o,Sv,zse,M7o,E7o,eD,y7o,w7o,A7o,Pv,Wse,L7o,B7o,oD,x7o,k7o,R7o,$v,Qse,S7o,P7o,rD,$7o,I7o,j7o,Iv,Hse,D7o,N7o,tD,q7o,O7o,G7o,jv,Use,X7o,V7o,aD,z7o,W7o,Q7o,Dv,Jse,H7o,U7o,sD,J7o,Y7o,K7o,Nv,Yse,Z7o,e9o,nD,o9o,r9o,t9o,qv,Kse,a9o,s9o,lD,n9o,l9o,i9o,Ov,Zse,d9o,c9o,iD,m9o,f9o,g9o,Gv,ene,h9o,u9o,dD,p9o,_9o,b9o,Xv,one,v9o,T9o,cD,F9o,C9o,M9o,Vv,rne,E9o,y9o,mD,w9o,A9o,L9o,zv,tne,B9o,x9o,fD,k9o,R9o,S9o,Wv,ane,P9o,$9o,gD,I9o,j9o,D9o,Qv,sne,N9o,q9o,hD,O9o,G9o,X9o,Hv,nne,V9o,z9o,uD,W9o,Q9o,H9o,Uv,lne,U9o,J9o,pD,Y9o,K9o,Z9o,Jv,ine,eBo,oBo,_D,rBo,tBo,aBo,Yv,dne,sBo,nBo,bD,lBo,iBo,dBo,Kv,cne,cBo,mBo,vD,fBo,gBo,hBo,Zv,uBo,mne,pBo,_Bo,fne,bBo,vBo,gne,TBo,FBo,$w,jxe,Ed,eT,hne,Iw,CBo,une,MBo,Dxe,sr,jw,EBo,yd,yBo,pne,wBo,ABo,_ne,LBo,BBo,xBo,Dw,kBo,bne,RBo,SBo,PBo,Zr,Nw,$Bo,vne,IBo,jBo,wd,DBo,Tne,NBo,qBo,Fne,OBo,GBo,XBo,Cne,VBo,zBo,qw,WBo,We,Ow,QBo,Mne,HBo,UBo,Za,JBo,Ene,YBo,KBo,yne,ZBo,exo,wne,oxo,rxo,txo,R,oT,Ane,axo,sxo,TD,nxo,lxo,ixo,rT,Lne,dxo,cxo,FD,mxo,fxo,gxo,tT,Bne,hxo,uxo,CD,pxo,_xo,bxo,aT,xne,vxo,Txo,MD,Fxo,Cxo,Mxo,sT,kne,Exo,yxo,ED,wxo,Axo,Lxo,nT,Rne,Bxo,xxo,yD,kxo,Rxo,Sxo,lT,Sne,Pxo,$xo,wD,Ixo,jxo,Dxo,iT,Pne,Nxo,qxo,AD,Oxo,Gxo,Xxo,dT,$ne,Vxo,zxo,LD,Wxo,Qxo,Hxo,cT,Ine,Uxo,Jxo,BD,Yxo,Kxo,Zxo,mT,jne,eko,oko,xD,rko,tko,ako,fT,Dne,sko,nko,kD,lko,iko,dko,gT,Nne,cko,mko,RD,fko,gko,hko,hT,qne,uko,pko,SD,_ko,bko,vko,uT,One,Tko,Fko,PD,Cko,Mko,Eko,pT,Gne,yko,wko,$D,Ako,Lko,Bko,_T,Xne,xko,kko,ID,Rko,Sko,Pko,bT,Vne,$ko,Iko,jD,jko,Dko,Nko,vT,zne,qko,Oko,DD,Gko,Xko,Vko,TT,Wne,zko,Wko,ND,Qko,Hko,Uko,FT,Qne,Jko,Yko,qD,Kko,Zko,eRo,CT,Hne,oRo,rRo,OD,tRo,aRo,sRo,MT,Une,nRo,lRo,GD,iRo,dRo,cRo,ET,Jne,mRo,fRo,XD,gRo,hRo,uRo,yT,Yne,pRo,_Ro,VD,bRo,vRo,TRo,wT,Kne,FRo,CRo,zD,MRo,ERo,yRo,AT,Zne,wRo,ARo,WD,LRo,BRo,xRo,LT,ele,kRo,RRo,QD,SRo,PRo,$Ro,BT,ole,IRo,jRo,HD,DRo,NRo,qRo,xT,rle,ORo,GRo,UD,XRo,VRo,zRo,kT,tle,WRo,QRo,JD,HRo,URo,JRo,RT,ale,YRo,KRo,YD,ZRo,eSo,oSo,ST,sle,rSo,tSo,KD,aSo,sSo,nSo,PT,nle,lSo,iSo,ZD,dSo,cSo,mSo,$T,lle,fSo,gSo,eN,hSo,uSo,pSo,IT,ile,_So,bSo,oN,vSo,TSo,FSo,jT,dle,CSo,MSo,rN,ESo,ySo,wSo,DT,cle,ASo,LSo,tN,BSo,xSo,kSo,NT,mle,RSo,SSo,aN,PSo,$So,ISo,qT,jSo,fle,DSo,NSo,gle,qSo,OSo,hle,GSo,XSo,Gw,Nxe,Ad,OT,ule,Xw,VSo,ple,zSo,qxe,nr,Vw,WSo,Ld,QSo,_le,HSo,USo,ble,JSo,YSo,KSo,zw,ZSo,vle,ePo,oPo,rPo,et,Ww,tPo,Tle,aPo,sPo,Bd,nPo,Fle,lPo,iPo,Cle,dPo,cPo,mPo,Mle,fPo,gPo,Qw,hPo,Qe,Hw,uPo,Ele,pPo,_Po,es,bPo,yle,vPo,TPo,wle,FPo,CPo,Ale,MPo,EPo,yPo,Lle,GT,Ble,wPo,APo,sN,LPo,BPo,xPo,XT,kPo,xle,RPo,SPo,kle,PPo,$Po,Rle,IPo,jPo,Uw,Oxe,xd,VT,Sle,Jw,DPo,Ple,NPo,Gxe,lr,Yw,qPo,kd,OPo,$le,GPo,XPo,Ile,VPo,zPo,WPo,Kw,QPo,jle,HPo,UPo,JPo,ot,Zw,YPo,Dle,KPo,ZPo,Rd,e$o,Nle,o$o,r$o,qle,t$o,a$o,s$o,Ole,n$o,l$o,e6,i$o,He,o6,d$o,Gle,c$o,m$o,os,f$o,Xle,g$o,h$o,Vle,u$o,p$o,zle,_$o,b$o,v$o,Ce,zT,Wle,T$o,F$o,nN,C$o,M$o,E$o,WT,Qle,y$o,w$o,lN,A$o,L$o,B$o,qn,Hle,x$o,k$o,iN,R$o,S$o,dN,P$o,$$o,I$o,QT,Ule,j$o,D$o,cN,N$o,q$o,O$o,fa,Jle,G$o,X$o,mN,V$o,z$o,fN,W$o,Q$o,gN,H$o,U$o,J$o,HT,Yle,Y$o,K$o,hN,Z$o,eIo,oIo,UT,Kle,rIo,tIo,uN,aIo,sIo,nIo,JT,Zle,lIo,iIo,pN,dIo,cIo,mIo,YT,eie,fIo,gIo,_N,hIo,uIo,pIo,KT,_Io,oie,bIo,vIo,rie,TIo,FIo,tie,CIo,MIo,r6,Xxe,Sd,ZT,aie,t6,EIo,sie,yIo,Vxe,ir,a6,wIo,Pd,AIo,nie,LIo,BIo,lie,xIo,kIo,RIo,s6,SIo,iie,PIo,$Io,IIo,rt,n6,jIo,die,DIo,NIo,$d,qIo,cie,OIo,GIo,mie,XIo,VIo,zIo,fie,WIo,QIo,l6,HIo,Ue,i6,UIo,gie,JIo,YIo,rs,KIo,hie,ZIo,ejo,uie,ojo,rjo,pie,tjo,ajo,sjo,_ie,e1,bie,njo,ljo,bN,ijo,djo,cjo,o1,mjo,vie,fjo,gjo,Tie,hjo,ujo,Fie,pjo,_jo,d6,zxe,Id,r1,Cie,c6,bjo,Mie,vjo,Wxe,dr,m6,Tjo,jd,Fjo,Eie,Cjo,Mjo,yie,Ejo,yjo,wjo,f6,Ajo,wie,Ljo,Bjo,xjo,tt,g6,kjo,Aie,Rjo,Sjo,Dd,Pjo,Lie,$jo,Ijo,Bie,jjo,Djo,Njo,xie,qjo,Ojo,h6,Gjo,Je,u6,Xjo,kie,Vjo,zjo,ts,Wjo,Rie,Qjo,Hjo,Sie,Ujo,Jjo,Pie,Yjo,Kjo,Zjo,xe,t1,$ie,eDo,oDo,vN,rDo,tDo,aDo,a1,Iie,sDo,nDo,TN,lDo,iDo,dDo,s1,jie,cDo,mDo,FN,fDo,gDo,hDo,n1,Die,uDo,pDo,CN,_Do,bDo,vDo,l1,Nie,TDo,FDo,MN,CDo,MDo,EDo,i1,qie,yDo,wDo,EN,ADo,LDo,BDo,d1,Oie,xDo,kDo,yN,RDo,SDo,PDo,c1,Gie,$Do,IDo,wN,jDo,DDo,NDo,m1,qDo,Xie,ODo,GDo,Vie,XDo,VDo,zie,zDo,WDo,p6,Qxe,Nd,f1,Wie,_6,QDo,Qie,HDo,Hxe,cr,b6,UDo,qd,JDo,Hie,YDo,KDo,Uie,ZDo,eNo,oNo,v6,rNo,Jie,tNo,aNo,sNo,at,T6,nNo,Yie,lNo,iNo,Od,dNo,Kie,cNo,mNo,Zie,fNo,gNo,hNo,ede,uNo,pNo,F6,_No,Ye,C6,bNo,ode,vNo,TNo,as,FNo,rde,CNo,MNo,tde,ENo,yNo,ade,wNo,ANo,LNo,ss,g1,sde,BNo,xNo,AN,kNo,RNo,SNo,h1,nde,PNo,$No,LN,INo,jNo,DNo,u1,lde,NNo,qNo,BN,ONo,GNo,XNo,p1,ide,VNo,zNo,xN,WNo,QNo,HNo,_1,UNo,dde,JNo,YNo,cde,KNo,ZNo,mde,eqo,oqo,M6,Uxe,Gd,b1,fde,E6,rqo,gde,tqo,Jxe,mr,y6,aqo,Xd,sqo,hde,nqo,lqo,ude,iqo,dqo,cqo,w6,mqo,pde,fqo,gqo,hqo,st,A6,uqo,_de,pqo,_qo,Vd,bqo,bde,vqo,Tqo,vde,Fqo,Cqo,Mqo,Tde,Eqo,yqo,L6,wqo,Ke,B6,Aqo,Fde,Lqo,Bqo,ns,xqo,Cde,kqo,Rqo,Mde,Sqo,Pqo,Ede,$qo,Iqo,jqo,ke,v1,yde,Dqo,Nqo,kN,qqo,Oqo,Gqo,T1,wde,Xqo,Vqo,RN,zqo,Wqo,Qqo,F1,Ade,Hqo,Uqo,SN,Jqo,Yqo,Kqo,C1,Lde,Zqo,eOo,PN,oOo,rOo,tOo,M1,Bde,aOo,sOo,$N,nOo,lOo,iOo,E1,xde,dOo,cOo,IN,mOo,fOo,gOo,y1,kde,hOo,uOo,jN,pOo,_Oo,bOo,w1,Rde,vOo,TOo,DN,FOo,COo,MOo,A1,EOo,Sde,yOo,wOo,Pde,AOo,LOo,$de,BOo,xOo,x6,Yxe,zd,L1,Ide,k6,kOo,jde,ROo,Kxe,fr,R6,SOo,Wd,POo,Dde,$Oo,IOo,Nde,jOo,DOo,NOo,S6,qOo,qde,OOo,GOo,XOo,nt,P6,VOo,Ode,zOo,WOo,Qd,QOo,Gde,HOo,UOo,Xde,JOo,YOo,KOo,Vde,ZOo,eGo,$6,oGo,Ze,I6,rGo,zde,tGo,aGo,ls,sGo,Wde,nGo,lGo,Qde,iGo,dGo,Hde,cGo,mGo,fGo,j6,B1,Ude,gGo,hGo,NN,uGo,pGo,_Go,x1,Jde,bGo,vGo,qN,TGo,FGo,CGo,k1,MGo,Yde,EGo,yGo,Kde,wGo,AGo,Zde,LGo,BGo,D6,Zxe,Hd,R1,ece,N6,xGo,oce,kGo,eke,gr,q6,RGo,Ud,SGo,rce,PGo,$Go,tce,IGo,jGo,DGo,O6,NGo,ace,qGo,OGo,GGo,lt,G6,XGo,sce,VGo,zGo,Jd,WGo,nce,QGo,HGo,lce,UGo,JGo,YGo,ice,KGo,ZGo,X6,eXo,eo,V6,oXo,dce,rXo,tXo,is,aXo,cce,sXo,nXo,mce,lXo,iXo,fce,dXo,cXo,mXo,ds,S1,gce,fXo,gXo,ON,hXo,uXo,pXo,P1,hce,_Xo,bXo,GN,vXo,TXo,FXo,$1,uce,CXo,MXo,XN,EXo,yXo,wXo,I1,pce,AXo,LXo,VN,BXo,xXo,kXo,j1,RXo,_ce,SXo,PXo,bce,$Xo,IXo,vce,jXo,DXo,z6,oke,Yd,D1,Tce,W6,NXo,Fce,qXo,rke,hr,Q6,OXo,Kd,GXo,Cce,XXo,VXo,Mce,zXo,WXo,QXo,H6,HXo,Ece,UXo,JXo,YXo,it,U6,KXo,yce,ZXo,eVo,Zd,oVo,wce,rVo,tVo,Ace,aVo,sVo,nVo,Lce,lVo,iVo,J6,dVo,oo,Y6,cVo,Bce,mVo,fVo,cs,gVo,xce,hVo,uVo,kce,pVo,_Vo,Rce,bVo,vVo,TVo,ec,N1,Sce,FVo,CVo,zN,MVo,EVo,yVo,q1,Pce,wVo,AVo,WN,LVo,BVo,xVo,O1,$ce,kVo,RVo,QN,SVo,PVo,$Vo,G1,IVo,Ice,jVo,DVo,jce,NVo,qVo,Dce,OVo,GVo,K6,tke,oc,X1,Nce,Z6,XVo,qce,VVo,ake,ur,eA,zVo,rc,WVo,Oce,QVo,HVo,Gce,UVo,JVo,YVo,oA,KVo,Xce,ZVo,ezo,ozo,dt,rA,rzo,Vce,tzo,azo,tc,szo,zce,nzo,lzo,Wce,izo,dzo,czo,Qce,mzo,fzo,tA,gzo,ro,aA,hzo,Hce,uzo,pzo,ms,_zo,Uce,bzo,vzo,Jce,Tzo,Fzo,Yce,Czo,Mzo,Ezo,Kce,V1,Zce,yzo,wzo,HN,Azo,Lzo,Bzo,z1,xzo,eme,kzo,Rzo,ome,Szo,Pzo,rme,$zo,Izo,sA,ske,ac,W1,tme,nA,jzo,ame,Dzo,nke,pr,lA,Nzo,sc,qzo,sme,Ozo,Gzo,nme,Xzo,Vzo,zzo,iA,Wzo,lme,Qzo,Hzo,Uzo,ct,dA,Jzo,ime,Yzo,Kzo,nc,Zzo,dme,eWo,oWo,cme,rWo,tWo,aWo,mme,sWo,nWo,cA,lWo,to,mA,iWo,fme,dWo,cWo,fs,mWo,gme,fWo,gWo,hme,hWo,uWo,ume,pWo,_Wo,bWo,pme,Q1,_me,vWo,TWo,UN,FWo,CWo,MWo,H1,EWo,bme,yWo,wWo,vme,AWo,LWo,Tme,BWo,xWo,fA,lke,lc,U1,Fme,gA,kWo,Cme,RWo,ike,_r,hA,SWo,ic,PWo,Mme,$Wo,IWo,Eme,jWo,DWo,NWo,uA,qWo,yme,OWo,GWo,XWo,mt,pA,VWo,wme,zWo,WWo,dc,QWo,Ame,HWo,UWo,Lme,JWo,YWo,KWo,Bme,ZWo,eQo,_A,oQo,ao,bA,rQo,xme,tQo,aQo,gs,sQo,kme,nQo,lQo,Rme,iQo,dQo,Sme,cQo,mQo,fQo,vA,J1,Pme,gQo,hQo,JN,uQo,pQo,_Qo,Y1,$me,bQo,vQo,YN,TQo,FQo,CQo,K1,MQo,Ime,EQo,yQo,jme,wQo,AQo,Dme,LQo,BQo,TA,dke,cc,Z1,Nme,FA,xQo,qme,kQo,cke,br,CA,RQo,mc,SQo,Ome,PQo,$Qo,Gme,IQo,jQo,DQo,MA,NQo,Xme,qQo,OQo,GQo,ft,EA,XQo,Vme,VQo,zQo,fc,WQo,zme,QQo,HQo,Wme,UQo,JQo,YQo,Qme,KQo,ZQo,yA,eHo,so,wA,oHo,Hme,rHo,tHo,hs,aHo,Ume,sHo,nHo,Jme,lHo,iHo,Yme,dHo,cHo,mHo,Kme,eF,Zme,fHo,gHo,KN,hHo,uHo,pHo,oF,_Ho,efe,bHo,vHo,ofe,THo,FHo,rfe,CHo,MHo,AA,mke,gc,rF,tfe,LA,EHo,afe,yHo,fke,vr,BA,wHo,hc,AHo,sfe,LHo,BHo,nfe,xHo,kHo,RHo,xA,SHo,lfe,PHo,$Ho,IHo,gt,kA,jHo,ife,DHo,NHo,uc,qHo,dfe,OHo,GHo,cfe,XHo,VHo,zHo,mfe,WHo,QHo,RA,HHo,ho,SA,UHo,ffe,JHo,YHo,us,KHo,gfe,ZHo,eUo,hfe,oUo,rUo,ufe,tUo,aUo,sUo,B,tF,pfe,nUo,lUo,ZN,iUo,dUo,cUo,aF,_fe,mUo,fUo,eq,gUo,hUo,uUo,sF,bfe,pUo,_Uo,oq,bUo,vUo,TUo,nF,vfe,FUo,CUo,rq,MUo,EUo,yUo,lF,Tfe,wUo,AUo,tq,LUo,BUo,xUo,iF,Ffe,kUo,RUo,aq,SUo,PUo,$Uo,dF,Cfe,IUo,jUo,sq,DUo,NUo,qUo,cF,Mfe,OUo,GUo,nq,XUo,VUo,zUo,mF,Efe,WUo,QUo,lq,HUo,UUo,JUo,fF,yfe,YUo,KUo,iq,ZUo,eJo,oJo,gF,wfe,rJo,tJo,dq,aJo,sJo,nJo,hF,Afe,lJo,iJo,cq,dJo,cJo,mJo,uF,Lfe,fJo,gJo,mq,hJo,uJo,pJo,pF,Bfe,_Jo,bJo,fq,vJo,TJo,FJo,_F,xfe,CJo,MJo,gq,EJo,yJo,wJo,bF,kfe,AJo,LJo,hq,BJo,xJo,kJo,On,Rfe,RJo,SJo,uq,PJo,$Jo,pq,IJo,jJo,DJo,vF,Sfe,NJo,qJo,_q,OJo,GJo,XJo,TF,Pfe,VJo,zJo,bq,WJo,QJo,HJo,FF,$fe,UJo,JJo,vq,YJo,KJo,ZJo,CF,Ife,eYo,oYo,Tq,rYo,tYo,aYo,MF,jfe,sYo,nYo,Fq,lYo,iYo,dYo,EF,Dfe,cYo,mYo,Cq,fYo,gYo,hYo,yF,Nfe,uYo,pYo,Mq,_Yo,bYo,vYo,wF,qfe,TYo,FYo,Eq,CYo,MYo,EYo,AF,Ofe,yYo,wYo,yq,AYo,LYo,BYo,LF,Gfe,xYo,kYo,wq,RYo,SYo,PYo,BF,Xfe,$Yo,IYo,Aq,jYo,DYo,NYo,xF,Vfe,qYo,OYo,Lq,GYo,XYo,VYo,kF,zfe,zYo,WYo,Bq,QYo,HYo,UYo,RF,Wfe,JYo,YYo,xq,KYo,ZYo,eKo,SF,Qfe,oKo,rKo,kq,tKo,aKo,sKo,PF,Hfe,nKo,lKo,Rq,iKo,dKo,cKo,$F,Ufe,mKo,fKo,Sq,gKo,hKo,uKo,IF,Jfe,pKo,_Ko,Pq,bKo,vKo,TKo,jF,Yfe,FKo,CKo,$q,MKo,EKo,yKo,DF,Kfe,wKo,AKo,Iq,LKo,BKo,xKo,NF,Zfe,kKo,RKo,jq,SKo,PKo,$Ko,qF,ege,IKo,jKo,Dq,DKo,NKo,qKo,OF,oge,OKo,GKo,Nq,XKo,VKo,zKo,GF,rge,WKo,QKo,qq,HKo,UKo,JKo,XF,tge,YKo,KKo,Oq,ZKo,eZo,oZo,age,rZo,tZo,PA,gke,pc,VF,sge,$A,aZo,nge,sZo,hke,Tr,IA,nZo,_c,lZo,lge,iZo,dZo,ige,cZo,mZo,fZo,jA,gZo,dge,hZo,uZo,pZo,ht,DA,_Zo,cge,bZo,vZo,bc,TZo,mge,FZo,CZo,fge,MZo,EZo,yZo,gge,wZo,AZo,NA,LZo,uo,qA,BZo,hge,xZo,kZo,ps,RZo,uge,SZo,PZo,pge,$Zo,IZo,_ge,jZo,DZo,NZo,H,zF,bge,qZo,OZo,Gq,GZo,XZo,VZo,WF,vge,zZo,WZo,Xq,QZo,HZo,UZo,QF,Tge,JZo,YZo,Vq,KZo,ZZo,eer,HF,Fge,oer,rer,zq,ter,aer,ser,UF,Cge,ner,ler,Wq,ier,der,cer,JF,Mge,mer,fer,Qq,ger,her,uer,YF,Ege,per,_er,Hq,ber,ver,Ter,KF,yge,Fer,Cer,Uq,Mer,Eer,yer,ZF,wge,wer,Aer,Jq,Ler,Ber,xer,eC,Age,ker,Rer,Yq,Ser,Per,$er,oC,Lge,Ier,jer,Kq,Der,Ner,qer,rC,Bge,Oer,Ger,Zq,Xer,Ver,zer,tC,xge,Wer,Qer,eO,Her,Uer,Jer,aC,kge,Yer,Ker,oO,Zer,eor,oor,sC,Rge,ror,tor,rO,aor,sor,nor,nC,Sge,lor,ior,tO,dor,cor,mor,lC,Pge,gor,hor,aO,uor,por,_or,iC,$ge,bor,vor,sO,Tor,For,Cor,dC,Ige,Mor,Eor,nO,yor,wor,Aor,cC,jge,Lor,Bor,lO,xor,kor,Ror,mC,Dge,Sor,Por,iO,$or,Ior,jor,fC,Nge,Dor,Nor,dO,qor,Oor,Gor,qge,Xor,Vor,OA,uke,vc,gC,Oge,GA,zor,Gge,Wor,pke,Fr,XA,Qor,Tc,Hor,Xge,Uor,Jor,Vge,Yor,Kor,Zor,VA,err,zge,orr,rrr,trr,ut,zA,arr,Wge,srr,nrr,Fc,lrr,Qge,irr,drr,Hge,crr,mrr,frr,Uge,grr,hrr,WA,urr,po,QA,prr,Jge,_rr,brr,_s,vrr,Yge,Trr,Frr,Kge,Crr,Mrr,Zge,Err,yrr,wrr,fe,hC,ehe,Arr,Lrr,cO,Brr,xrr,krr,uC,ohe,Rrr,Srr,mO,Prr,$rr,Irr,pC,rhe,jrr,Drr,fO,Nrr,qrr,Orr,_C,the,Grr,Xrr,gO,Vrr,zrr,Wrr,bC,ahe,Qrr,Hrr,hO,Urr,Jrr,Yrr,vC,she,Krr,Zrr,uO,etr,otr,rtr,TC,nhe,ttr,atr,pO,str,ntr,ltr,FC,lhe,itr,dtr,_O,ctr,mtr,ftr,CC,ihe,gtr,htr,bO,utr,ptr,_tr,MC,dhe,btr,vtr,vO,Ttr,Ftr,Ctr,EC,che,Mtr,Etr,TO,ytr,wtr,Atr,mhe,Ltr,Btr,HA,_ke,Cc,yC,fhe,UA,xtr,ghe,ktr,bke,Cr,JA,Rtr,Mc,Str,hhe,Ptr,$tr,uhe,Itr,jtr,Dtr,YA,Ntr,phe,qtr,Otr,Gtr,pt,KA,Xtr,_he,Vtr,ztr,Ec,Wtr,bhe,Qtr,Htr,vhe,Utr,Jtr,Ytr,The,Ktr,Ztr,ZA,ear,_o,e0,oar,Fhe,rar,tar,bs,aar,Che,sar,nar,Mhe,lar,iar,Ehe,dar,car,mar,o0,wC,yhe,far,gar,FO,har,uar,par,AC,whe,_ar,bar,CO,Tar,Far,Car,Ahe,Mar,Ear,r0,vke,yc,LC,Lhe,t0,yar,Bhe,war,Tke,Mr,a0,Aar,wc,Lar,xhe,Bar,xar,khe,kar,Rar,Sar,s0,Par,Rhe,$ar,Iar,jar,_t,n0,Dar,She,Nar,qar,Ac,Oar,Phe,Gar,Xar,$he,Var,zar,War,Ihe,Qar,Har,l0,Uar,bo,i0,Jar,jhe,Yar,Kar,vs,Zar,Dhe,esr,osr,Nhe,rsr,tsr,qhe,asr,ssr,nsr,Y,BC,Ohe,lsr,isr,MO,dsr,csr,msr,xC,Ghe,fsr,gsr,EO,hsr,usr,psr,kC,Xhe,_sr,bsr,yO,vsr,Tsr,Fsr,RC,Vhe,Csr,Msr,wO,Esr,ysr,wsr,SC,zhe,Asr,Lsr,AO,Bsr,xsr,ksr,PC,Whe,Rsr,Ssr,LO,Psr,$sr,Isr,$C,Qhe,jsr,Dsr,BO,Nsr,qsr,Osr,IC,Hhe,Gsr,Xsr,xO,Vsr,zsr,Wsr,jC,Uhe,Qsr,Hsr,kO,Usr,Jsr,Ysr,DC,Jhe,Ksr,Zsr,RO,enr,onr,rnr,NC,Yhe,tnr,anr,SO,snr,nnr,lnr,qC,Khe,inr,dnr,PO,cnr,mnr,fnr,OC,Zhe,gnr,hnr,$O,unr,pnr,_nr,GC,eue,bnr,vnr,IO,Tnr,Fnr,Cnr,XC,oue,Mnr,Enr,jO,ynr,wnr,Anr,VC,rue,Lnr,Bnr,DO,xnr,knr,Rnr,zC,tue,Snr,Pnr,NO,$nr,Inr,jnr,WC,aue,Dnr,Nnr,qO,qnr,Onr,Gnr,QC,sue,Xnr,Vnr,OO,znr,Wnr,Qnr,HC,nue,Hnr,Unr,GO,Jnr,Ynr,Knr,lue,Znr,elr,d0,Fke,Lc,UC,iue,c0,olr,due,rlr,Cke,Er,m0,tlr,Bc,alr,cue,slr,nlr,mue,llr,ilr,dlr,f0,clr,fue,mlr,flr,glr,bt,g0,hlr,gue,ulr,plr,xc,_lr,hue,blr,vlr,uue,Tlr,Flr,Clr,pue,Mlr,Elr,h0,ylr,vo,u0,wlr,_ue,Alr,Llr,Ts,Blr,bue,xlr,klr,vue,Rlr,Slr,Tue,Plr,$lr,Ilr,pe,JC,Fue,jlr,Dlr,XO,Nlr,qlr,Olr,YC,Cue,Glr,Xlr,VO,Vlr,zlr,Wlr,KC,Mue,Qlr,Hlr,zO,Ulr,Jlr,Ylr,ZC,Eue,Klr,Zlr,WO,eir,oir,rir,eM,yue,tir,air,QO,sir,nir,lir,oM,wue,iir,dir,HO,cir,mir,fir,rM,Aue,gir,hir,UO,uir,pir,_ir,tM,Lue,bir,vir,JO,Tir,Fir,Cir,aM,Bue,Mir,Eir,YO,yir,wir,Air,sM,xue,Lir,Bir,KO,xir,kir,Rir,kue,Sir,Pir,p0,Mke,kc,nM,Rue,_0,$ir,Sue,Iir,Eke,yr,b0,jir,Rc,Dir,Pue,Nir,qir,$ue,Oir,Gir,Xir,v0,Vir,Iue,zir,Wir,Qir,vt,T0,Hir,jue,Uir,Jir,Sc,Yir,Due,Kir,Zir,Nue,edr,odr,rdr,que,tdr,adr,F0,sdr,To,C0,ndr,Oue,ldr,idr,Fs,ddr,Gue,cdr,mdr,Xue,fdr,gdr,Vue,hdr,udr,pdr,V,lM,zue,_dr,bdr,ZO,vdr,Tdr,Fdr,iM,Wue,Cdr,Mdr,eG,Edr,ydr,wdr,dM,Que,Adr,Ldr,oG,Bdr,xdr,kdr,cM,Hue,Rdr,Sdr,rG,Pdr,$dr,Idr,mM,Uue,jdr,Ddr,tG,Ndr,qdr,Odr,fM,Jue,Gdr,Xdr,aG,Vdr,zdr,Wdr,gM,Yue,Qdr,Hdr,sG,Udr,Jdr,Ydr,hM,Kue,Kdr,Zdr,nG,ecr,ocr,rcr,uM,Zue,tcr,acr,lG,scr,ncr,lcr,pM,epe,icr,dcr,iG,ccr,mcr,fcr,_M,ope,gcr,hcr,dG,ucr,pcr,_cr,bM,rpe,bcr,vcr,cG,Tcr,Fcr,Ccr,vM,tpe,Mcr,Ecr,mG,ycr,wcr,Acr,TM,ape,Lcr,Bcr,fG,xcr,kcr,Rcr,FM,spe,Scr,Pcr,gG,$cr,Icr,jcr,CM,npe,Dcr,Ncr,hG,qcr,Ocr,Gcr,MM,lpe,Xcr,Vcr,uG,zcr,Wcr,Qcr,EM,ipe,Hcr,Ucr,pG,Jcr,Ycr,Kcr,yM,dpe,Zcr,emr,_G,omr,rmr,tmr,wM,cpe,amr,smr,bG,nmr,lmr,imr,AM,mpe,dmr,cmr,vG,mmr,fmr,gmr,LM,fpe,hmr,umr,TG,pmr,_mr,bmr,BM,gpe,vmr,Tmr,FG,Fmr,Cmr,Mmr,xM,hpe,Emr,ymr,CG,wmr,Amr,Lmr,kM,upe,Bmr,xmr,MG,kmr,Rmr,Smr,ppe,Pmr,$mr,M0,yke,Pc,RM,_pe,E0,Imr,bpe,jmr,wke,wr,y0,Dmr,$c,Nmr,vpe,qmr,Omr,Tpe,Gmr,Xmr,Vmr,w0,zmr,Fpe,Wmr,Qmr,Hmr,Tt,A0,Umr,Cpe,Jmr,Ymr,Ic,Kmr,Mpe,Zmr,efr,Epe,ofr,rfr,tfr,ype,afr,sfr,L0,nfr,Fo,B0,lfr,wpe,ifr,dfr,Cs,cfr,Ape,mfr,ffr,Lpe,gfr,hfr,Bpe,ufr,pfr,_fr,te,SM,xpe,bfr,vfr,EG,Tfr,Ffr,Cfr,PM,kpe,Mfr,Efr,yG,yfr,wfr,Afr,$M,Rpe,Lfr,Bfr,wG,xfr,kfr,Rfr,IM,Spe,Sfr,Pfr,AG,$fr,Ifr,jfr,jM,Ppe,Dfr,Nfr,LG,qfr,Ofr,Gfr,DM,$pe,Xfr,Vfr,BG,zfr,Wfr,Qfr,NM,Ipe,Hfr,Ufr,xG,Jfr,Yfr,Kfr,qM,jpe,Zfr,egr,kG,ogr,rgr,tgr,OM,Dpe,agr,sgr,RG,ngr,lgr,igr,GM,Npe,dgr,cgr,SG,mgr,fgr,ggr,XM,qpe,hgr,ugr,PG,pgr,_gr,bgr,VM,Ope,vgr,Tgr,$G,Fgr,Cgr,Mgr,zM,Gpe,Egr,ygr,IG,wgr,Agr,Lgr,WM,Xpe,Bgr,xgr,jG,kgr,Rgr,Sgr,QM,Vpe,Pgr,$gr,DG,Igr,jgr,Dgr,HM,zpe,Ngr,qgr,NG,Ogr,Ggr,Xgr,UM,Wpe,Vgr,zgr,qG,Wgr,Qgr,Hgr,Qpe,Ugr,Jgr,x0,Ake,jc,JM,Hpe,k0,Ygr,Upe,Kgr,Lke,Ar,R0,Zgr,Dc,ehr,Jpe,ohr,rhr,Ype,thr,ahr,shr,S0,nhr,Kpe,lhr,ihr,dhr,Ft,P0,chr,Zpe,mhr,fhr,Nc,ghr,e_e,hhr,uhr,o_e,phr,_hr,bhr,r_e,vhr,Thr,$0,Fhr,Co,I0,Chr,t_e,Mhr,Ehr,Ms,yhr,a_e,whr,Ahr,s_e,Lhr,Bhr,n_e,xhr,khr,Rhr,l_e,YM,i_e,Shr,Phr,OG,$hr,Ihr,jhr,d_e,Dhr,Nhr,j0,Bke,qc,KM,c_e,D0,qhr,m_e,Ohr,xke,Lr,N0,Ghr,Oc,Xhr,f_e,Vhr,zhr,g_e,Whr,Qhr,Hhr,q0,Uhr,h_e,Jhr,Yhr,Khr,Ct,O0,Zhr,u_e,eur,our,Gc,rur,p_e,tur,aur,__e,sur,nur,lur,b_e,iur,dur,G0,cur,Mo,X0,mur,v_e,fur,gur,Es,hur,T_e,uur,pur,F_e,_ur,bur,C_e,vur,Tur,Fur,K,ZM,M_e,Cur,Mur,GG,Eur,yur,wur,e4,E_e,Aur,Lur,XG,Bur,xur,kur,o4,y_e,Rur,Sur,VG,Pur,$ur,Iur,r4,w_e,jur,Dur,zG,Nur,qur,Our,t4,A_e,Gur,Xur,WG,Vur,zur,Wur,a4,L_e,Qur,Hur,QG,Uur,Jur,Yur,s4,B_e,Kur,Zur,HG,epr,opr,rpr,n4,x_e,tpr,apr,UG,spr,npr,lpr,l4,k_e,ipr,dpr,JG,cpr,mpr,fpr,i4,R_e,gpr,hpr,YG,upr,ppr,_pr,d4,S_e,bpr,vpr,KG,Tpr,Fpr,Cpr,c4,P_e,Mpr,Epr,ZG,ypr,wpr,Apr,m4,$_e,Lpr,Bpr,eX,xpr,kpr,Rpr,f4,I_e,Spr,Ppr,oX,$pr,Ipr,jpr,g4,j_e,Dpr,Npr,rX,qpr,Opr,Gpr,h4,D_e,Xpr,Vpr,tX,zpr,Wpr,Qpr,u4,N_e,Hpr,Upr,aX,Jpr,Ypr,Kpr,p4,q_e,Zpr,e_r,sX,o_r,r_r,t_r,_4,O_e,a_r,s_r,nX,n_r,l_r,i_r,b4,G_e,d_r,c_r,lX,m_r,f_r,g_r,X_e,h_r,u_r,V0,kke,Xc,v4,V_e,z0,p_r,z_e,__r,Rke,Br,W0,b_r,Vc,v_r,W_e,T_r,F_r,Q_e,C_r,M_r,E_r,Q0,y_r,H_e,w_r,A_r,L_r,Mt,H0,B_r,U_e,x_r,k_r,zc,R_r,J_e,S_r,P_r,Y_e,$_r,I_r,j_r,K_e,D_r,N_r,U0,q_r,Eo,J0,O_r,Z_e,G_r,X_r,ys,V_r,ebe,z_r,W_r,obe,Q_r,H_r,rbe,U_r,J_r,Y_r,Z,T4,tbe,K_r,Z_r,iX,ebr,obr,rbr,F4,abe,tbr,abr,dX,sbr,nbr,lbr,C4,sbe,ibr,dbr,cX,cbr,mbr,fbr,M4,nbe,gbr,hbr,mX,ubr,pbr,_br,E4,lbe,bbr,vbr,fX,Tbr,Fbr,Cbr,y4,ibe,Mbr,Ebr,gX,ybr,wbr,Abr,w4,dbe,Lbr,Bbr,hX,xbr,kbr,Rbr,A4,cbe,Sbr,Pbr,uX,$br,Ibr,jbr,L4,mbe,Dbr,Nbr,pX,qbr,Obr,Gbr,B4,fbe,Xbr,Vbr,_X,zbr,Wbr,Qbr,x4,gbe,Hbr,Ubr,bX,Jbr,Ybr,Kbr,k4,hbe,Zbr,e2r,vX,o2r,r2r,t2r,R4,ube,a2r,s2r,TX,n2r,l2r,i2r,S4,pbe,d2r,c2r,FX,m2r,f2r,g2r,P4,_be,h2r,u2r,CX,p2r,_2r,b2r,$4,bbe,v2r,T2r,MX,F2r,C2r,M2r,I4,vbe,E2r,y2r,EX,w2r,A2r,L2r,j4,Tbe,B2r,x2r,yX,k2r,R2r,S2r,D4,Fbe,P2r,$2r,wX,I2r,j2r,D2r,Cbe,N2r,q2r,Y0,Ske,Wc,N4,Mbe,K0,O2r,Ebe,G2r,Pke,xr,Z0,X2r,Qc,V2r,ybe,z2r,W2r,wbe,Q2r,H2r,U2r,eL,J2r,Abe,Y2r,K2r,Z2r,Et,oL,evr,Lbe,ovr,rvr,Hc,tvr,Bbe,avr,svr,xbe,nvr,lvr,ivr,kbe,dvr,cvr,rL,mvr,yo,tL,fvr,Rbe,gvr,hvr,ws,uvr,Sbe,pvr,_vr,Pbe,bvr,vvr,$be,Tvr,Fvr,Cvr,Ibe,q4,jbe,Mvr,Evr,AX,yvr,wvr,Avr,Dbe,Lvr,Bvr,aL,$ke,Uc,O4,Nbe,sL,xvr,qbe,kvr,Ike,kr,nL,Rvr,Jc,Svr,Obe,Pvr,$vr,Gbe,Ivr,jvr,Dvr,lL,Nvr,Xbe,qvr,Ovr,Gvr,yt,iL,Xvr,Vbe,Vvr,zvr,Yc,Wvr,zbe,Qvr,Hvr,Wbe,Uvr,Jvr,Yvr,Qbe,Kvr,Zvr,dL,eTr,wo,cL,oTr,Hbe,rTr,tTr,As,aTr,Ube,sTr,nTr,Jbe,lTr,iTr,Ybe,dTr,cTr,mTr,Kbe,G4,Zbe,fTr,gTr,LX,hTr,uTr,pTr,e2e,_Tr,bTr,mL,jke,Kc,X4,o2e,fL,vTr,r2e,TTr,Dke,Rr,gL,FTr,Zc,CTr,t2e,MTr,ETr,a2e,yTr,wTr,ATr,hL,LTr,s2e,BTr,xTr,kTr,wt,uL,RTr,n2e,STr,PTr,em,$Tr,l2e,ITr,jTr,i2e,DTr,NTr,qTr,d2e,OTr,GTr,pL,XTr,Ao,_L,VTr,c2e,zTr,WTr,Ls,QTr,m2e,HTr,UTr,f2e,JTr,YTr,g2e,KTr,ZTr,e1r,z,V4,h2e,o1r,r1r,BX,t1r,a1r,s1r,z4,u2e,n1r,l1r,xX,i1r,d1r,c1r,W4,p2e,m1r,f1r,kX,g1r,h1r,u1r,Q4,_2e,p1r,_1r,RX,b1r,v1r,T1r,H4,b2e,F1r,C1r,SX,M1r,E1r,y1r,U4,v2e,w1r,A1r,PX,L1r,B1r,x1r,J4,T2e,k1r,R1r,$X,S1r,P1r,$1r,Y4,F2e,I1r,j1r,IX,D1r,N1r,q1r,K4,C2e,O1r,G1r,jX,X1r,V1r,z1r,Z4,M2e,W1r,Q1r,DX,H1r,U1r,J1r,eE,E2e,Y1r,K1r,NX,Z1r,eFr,oFr,oE,y2e,rFr,tFr,qX,aFr,sFr,nFr,rE,w2e,lFr,iFr,OX,dFr,cFr,mFr,tE,A2e,fFr,gFr,GX,hFr,uFr,pFr,aE,L2e,_Fr,bFr,XX,vFr,TFr,FFr,sE,B2e,CFr,MFr,VX,EFr,yFr,wFr,nE,x2e,AFr,LFr,zX,BFr,xFr,kFr,lE,k2e,RFr,SFr,WX,PFr,$Fr,IFr,iE,R2e,jFr,DFr,QX,NFr,qFr,OFr,dE,S2e,GFr,XFr,HX,VFr,zFr,WFr,cE,P2e,QFr,HFr,UX,UFr,JFr,YFr,mE,$2e,KFr,ZFr,JX,eCr,oCr,rCr,fE,I2e,tCr,aCr,YX,sCr,nCr,lCr,gE,j2e,iCr,dCr,KX,cCr,mCr,fCr,hE,D2e,gCr,hCr,ZX,uCr,pCr,_Cr,N2e,bCr,vCr,bL,Nke,om,uE,q2e,vL,TCr,O2e,FCr,qke,Sr,TL,CCr,rm,MCr,G2e,ECr,yCr,X2e,wCr,ACr,LCr,FL,BCr,V2e,xCr,kCr,RCr,At,CL,SCr,z2e,PCr,$Cr,tm,ICr,W2e,jCr,DCr,Q2e,NCr,qCr,OCr,H2e,GCr,XCr,ML,VCr,Lo,EL,zCr,U2e,WCr,QCr,Bs,HCr,J2e,UCr,JCr,Y2e,YCr,KCr,K2e,ZCr,eMr,oMr,ca,pE,Z2e,rMr,tMr,eV,aMr,sMr,nMr,_E,eve,lMr,iMr,oV,dMr,cMr,mMr,bE,ove,fMr,gMr,rV,hMr,uMr,pMr,vE,rve,_Mr,bMr,tV,vMr,TMr,FMr,TE,tve,CMr,MMr,aV,EMr,yMr,wMr,ave,AMr,LMr,yL,Oke,am,FE,sve,wL,BMr,nve,xMr,Gke,Pr,AL,kMr,sm,RMr,lve,SMr,PMr,ive,$Mr,IMr,jMr,LL,DMr,dve,NMr,qMr,OMr,Lt,BL,GMr,cve,XMr,VMr,nm,zMr,mve,WMr,QMr,fve,HMr,UMr,JMr,gve,YMr,KMr,xL,ZMr,Bo,kL,e4r,hve,o4r,r4r,xs,t4r,uve,a4r,s4r,pve,n4r,l4r,_ve,i4r,d4r,c4r,ce,CE,bve,m4r,f4r,sV,g4r,h4r,u4r,ME,vve,p4r,_4r,nV,b4r,v4r,T4r,EE,Tve,F4r,C4r,lV,M4r,E4r,y4r,yE,Fve,w4r,A4r,iV,L4r,B4r,x4r,wE,Cve,k4r,R4r,dV,S4r,P4r,$4r,AE,Mve,I4r,j4r,cV,D4r,N4r,q4r,LE,Eve,O4r,G4r,mV,X4r,V4r,z4r,BE,yve,W4r,Q4r,fV,H4r,U4r,J4r,xE,wve,Y4r,K4r,gV,Z4r,eEr,oEr,kE,Ave,rEr,tEr,hV,aEr,sEr,nEr,RE,Lve,lEr,iEr,uV,dEr,cEr,mEr,SE,Bve,fEr,gEr,pV,hEr,uEr,pEr,xve,_Er,bEr,RL,Xke,lm,PE,kve,SL,vEr,Rve,TEr,Vke,$r,PL,FEr,im,CEr,Sve,MEr,EEr,Pve,yEr,wEr,AEr,$L,LEr,$ve,BEr,xEr,kEr,Bt,IL,REr,Ive,SEr,PEr,dm,$Er,jve,IEr,jEr,Dve,DEr,NEr,qEr,Nve,OEr,GEr,jL,XEr,xo,DL,VEr,qve,zEr,WEr,ks,QEr,Ove,HEr,UEr,Gve,JEr,YEr,Xve,KEr,ZEr,e3r,_e,$E,Vve,o3r,r3r,_V,t3r,a3r,s3r,IE,zve,n3r,l3r,bV,i3r,d3r,c3r,jE,Wve,m3r,f3r,vV,g3r,h3r,u3r,DE,Qve,p3r,_3r,TV,b3r,v3r,T3r,NE,Hve,F3r,C3r,FV,M3r,E3r,y3r,qE,Uve,w3r,A3r,CV,L3r,B3r,x3r,OE,Jve,k3r,R3r,MV,S3r,P3r,$3r,GE,Yve,I3r,j3r,EV,D3r,N3r,q3r,XE,Kve,O3r,G3r,yV,X3r,V3r,z3r,VE,Zve,W3r,Q3r,wV,H3r,U3r,J3r,eTe,Y3r,K3r,NL,zke,cm,zE,oTe,qL,Z3r,rTe,e5r,Wke,Ir,OL,o5r,mm,r5r,tTe,t5r,a5r,aTe,s5r,n5r,l5r,GL,i5r,sTe,d5r,c5r,m5r,xt,XL,f5r,nTe,g5r,h5r,fm,u5r,lTe,p5r,_5r,iTe,b5r,v5r,T5r,dTe,F5r,C5r,VL,M5r,ko,zL,E5r,cTe,y5r,w5r,Rs,A5r,mTe,L5r,B5r,fTe,x5r,k5r,gTe,R5r,S5r,P5r,Me,WE,hTe,$5r,I5r,AV,j5r,D5r,N5r,QE,uTe,q5r,O5r,LV,G5r,X5r,V5r,HE,pTe,z5r,W5r,BV,Q5r,H5r,U5r,UE,_Te,J5r,Y5r,xV,K5r,Z5r,eyr,JE,bTe,oyr,ryr,kV,tyr,ayr,syr,YE,vTe,nyr,lyr,RV,iyr,dyr,cyr,KE,TTe,myr,fyr,SV,gyr,hyr,uyr,ZE,FTe,pyr,_yr,PV,byr,vyr,Tyr,e3,CTe,Fyr,Cyr,$V,Myr,Eyr,yyr,MTe,wyr,Ayr,WL,Qke,gm,o3,ETe,QL,Lyr,yTe,Byr,Hke,jr,HL,xyr,hm,kyr,wTe,Ryr,Syr,ATe,Pyr,$yr,Iyr,UL,jyr,LTe,Dyr,Nyr,qyr,kt,JL,Oyr,BTe,Gyr,Xyr,um,Vyr,xTe,zyr,Wyr,kTe,Qyr,Hyr,Uyr,RTe,Jyr,Yyr,YL,Kyr,Ro,KL,Zyr,STe,ewr,owr,Ss,rwr,PTe,twr,awr,$Te,swr,nwr,ITe,lwr,iwr,dwr,be,r3,jTe,cwr,mwr,IV,fwr,gwr,hwr,t3,DTe,uwr,pwr,jV,_wr,bwr,vwr,a3,NTe,Twr,Fwr,DV,Cwr,Mwr,Ewr,s3,qTe,ywr,wwr,NV,Awr,Lwr,Bwr,n3,OTe,xwr,kwr,qV,Rwr,Swr,Pwr,l3,GTe,$wr,Iwr,OV,jwr,Dwr,Nwr,i3,XTe,qwr,Owr,GV,Gwr,Xwr,Vwr,d3,VTe,zwr,Wwr,XV,Qwr,Hwr,Uwr,c3,zTe,Jwr,Ywr,VV,Kwr,Zwr,e6r,m3,WTe,o6r,r6r,zV,t6r,a6r,s6r,QTe,n6r,l6r,ZL,Uke,pm,f3,HTe,e8,i6r,UTe,d6r,Jke,Dr,o8,c6r,_m,m6r,JTe,f6r,g6r,YTe,h6r,u6r,p6r,r8,_6r,KTe,b6r,v6r,T6r,Rt,t8,F6r,ZTe,C6r,M6r,bm,E6r,e1e,y6r,w6r,o1e,A6r,L6r,B6r,r1e,x6r,k6r,a8,R6r,So,s8,S6r,t1e,P6r,$6r,Ps,I6r,a1e,j6r,D6r,s1e,N6r,q6r,n1e,O6r,G6r,X6r,ve,g3,l1e,V6r,z6r,WV,W6r,Q6r,H6r,h3,i1e,U6r,J6r,QV,Y6r,K6r,Z6r,u3,d1e,eAr,oAr,HV,rAr,tAr,aAr,p3,c1e,sAr,nAr,UV,lAr,iAr,dAr,_3,m1e,cAr,mAr,JV,fAr,gAr,hAr,b3,f1e,uAr,pAr,YV,_Ar,bAr,vAr,v3,g1e,TAr,FAr,KV,CAr,MAr,EAr,T3,h1e,yAr,wAr,ZV,AAr,LAr,BAr,F3,u1e,xAr,kAr,ez,RAr,SAr,PAr,C3,p1e,$Ar,IAr,oz,jAr,DAr,NAr,_1e,qAr,OAr,n8,Yke,vm,M3,b1e,l8,GAr,v1e,XAr,Kke,Nr,i8,VAr,Tm,zAr,T1e,WAr,QAr,F1e,HAr,UAr,JAr,d8,YAr,C1e,KAr,ZAr,e0r,St,c8,o0r,M1e,r0r,t0r,Fm,a0r,E1e,s0r,n0r,y1e,l0r,i0r,d0r,w1e,c0r,m0r,m8,f0r,Po,f8,g0r,A1e,h0r,u0r,$s,p0r,L1e,_0r,b0r,B1e,v0r,T0r,x1e,F0r,C0r,M0r,Re,E3,k1e,E0r,y0r,rz,w0r,A0r,L0r,y3,R1e,B0r,x0r,tz,k0r,R0r,S0r,w3,S1e,P0r,$0r,az,I0r,j0r,D0r,A3,P1e,N0r,q0r,sz,O0r,G0r,X0r,L3,$1e,V0r,z0r,nz,W0r,Q0r,H0r,B3,I1e,U0r,J0r,lz,Y0r,K0r,Z0r,x3,j1e,eLr,oLr,iz,rLr,tLr,aLr,k3,D1e,sLr,nLr,dz,lLr,iLr,dLr,N1e,cLr,mLr,g8,Zke,Cm,R3,q1e,h8,fLr,O1e,gLr,eRe,qr,u8,hLr,Mm,uLr,G1e,pLr,_Lr,X1e,bLr,vLr,TLr,p8,FLr,V1e,CLr,MLr,ELr,Pt,_8,yLr,z1e,wLr,ALr,Em,LLr,W1e,BLr,xLr,Q1e,kLr,RLr,SLr,H1e,PLr,$Lr,b8,ILr,$o,v8,jLr,U1e,DLr,NLr,Is,qLr,J1e,OLr,GLr,Y1e,XLr,VLr,K1e,zLr,WLr,QLr,Se,S3,Z1e,HLr,ULr,cz,JLr,YLr,KLr,P3,eFe,ZLr,e8r,mz,o8r,r8r,t8r,$3,oFe,a8r,s8r,fz,n8r,l8r,i8r,I3,rFe,d8r,c8r,gz,m8r,f8r,g8r,j3,tFe,h8r,u8r,hz,p8r,_8r,b8r,D3,aFe,v8r,T8r,uz,F8r,C8r,M8r,N3,sFe,E8r,y8r,pz,w8r,A8r,L8r,q3,nFe,B8r,x8r,_z,k8r,R8r,S8r,lFe,P8r,$8r,T8,oRe,ym,O3,iFe,F8,I8r,dFe,j8r,rRe,Or,C8,D8r,wm,N8r,cFe,q8r,O8r,mFe,G8r,X8r,V8r,M8,z8r,fFe,W8r,Q8r,H8r,$t,E8,U8r,gFe,J8r,Y8r,Am,K8r,hFe,Z8r,e7r,uFe,o7r,r7r,t7r,pFe,a7r,s7r,y8,n7r,Io,w8,l7r,_Fe,i7r,d7r,js,c7r,bFe,m7r,f7r,vFe,g7r,h7r,TFe,u7r,p7r,_7r,FFe,G3,CFe,b7r,v7r,bz,T7r,F7r,C7r,MFe,M7r,E7r,A8,tRe,Lm,X3,EFe,L8,y7r,yFe,w7r,aRe,Gr,B8,A7r,Bm,L7r,wFe,B7r,x7r,AFe,k7r,R7r,S7r,x8,P7r,LFe,$7r,I7r,j7r,It,k8,D7r,BFe,N7r,q7r,xm,O7r,xFe,G7r,X7r,kFe,V7r,z7r,W7r,RFe,Q7r,H7r,R8,U7r,jo,S8,J7r,SFe,Y7r,K7r,Ds,Z7r,PFe,e9r,o9r,$Fe,r9r,t9r,IFe,a9r,s9r,n9r,P8,V3,jFe,l9r,i9r,vz,d9r,c9r,m9r,z3,DFe,f9r,g9r,Tz,h9r,u9r,p9r,NFe,_9r,b9r,$8,sRe,km,W3,qFe,I8,v9r,OFe,T9r,nRe,Xr,j8,F9r,Rm,C9r,GFe,M9r,E9r,XFe,y9r,w9r,A9r,D8,L9r,VFe,B9r,x9r,k9r,jt,N8,R9r,zFe,S9r,P9r,Sm,$9r,WFe,I9r,j9r,QFe,D9r,N9r,q9r,HFe,O9r,G9r,q8,X9r,Do,O8,V9r,UFe,z9r,W9r,Ns,Q9r,JFe,H9r,U9r,YFe,J9r,Y9r,KFe,K9r,Z9r,eBr,ZFe,Q3,eCe,oBr,rBr,Fz,tBr,aBr,sBr,oCe,nBr,lBr,G8,lRe;return me=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Y5=new X({}),K5=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qm=new iBr({props:{warning:"&lcub;true}",$$slots:{default:[NCt]},$$scope:{ctx:Ii}}}),Z5=new X({}),ey=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L527"}}),ty=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L550",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),ay=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),sy=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/configuration_auto.py#L672",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),ny=new X({}),ly=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L352"}}),cy=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/master/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),my=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),fy=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),gy=new X({}),hy=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L170"}}),_y=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L184",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/master/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Eh=new iBr({props:{$$slots:{default:[qCt]},$$scope:{ctx:Ii}}}),by=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),vy=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/feature_extraction_auto.py#L311",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),Ty=new X({}),Fy=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L71"}}),Ey=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),$h=new iBr({props:{$$slots:{default:[OCt]},$$scope:{ctx:Ii}}}),yy=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),wy=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),Ay=new X({}),Ly=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L697"}}),xy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),Ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sy=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L704"}}),jy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Gy=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L719"}}),Vy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Wy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L726"}}),Yy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Zy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ow=new X({}),rw=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L733"}}),aw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),nw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iw=new X({}),dw=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L742"}}),mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),gw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uw=new X({}),pw=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L776"}}),bw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Tw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cw=new X({}),Mw=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L783"}}),yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Lw=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),xw=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L769"}}),Rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Pw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$w=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iw=new X({}),jw=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L751"}}),Nw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Ow=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gw=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new X({}),Vw=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L758"}}),Ww=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Hw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jw=new X({}),Yw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L792"}}),Zw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),o6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r6=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t6=new X({}),a6=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L831"}}),n6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),i6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d6=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c6=new X({}),m6=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L838"}}),g6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),h6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),u6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_6=new X({}),b6=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L861"}}),T6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),F6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),C6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E6=new X({}),y6=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L845"}}),A6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),L6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),B6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x6=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k6=new X({}),R6=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L852"}}),P6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),$6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),I6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D6=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N6=new X({}),q6=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L870"}}),G6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),V6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z6=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W6=new X({}),Q6=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L877"}}),U6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),J6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Y6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K6=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z6=new X({}),eA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L824"}}),rA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),aA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nA=new X({}),lA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L799"}}),dA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),mA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new X({}),hA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L806"}}),pA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),_A=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),bA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new X({}),CA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_auto.py#L815"}}),EA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),yA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),wA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new X({}),BA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),kA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),RA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),SA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),DA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),qA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GA=new X({}),XA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),zA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),QA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new X({}),JA=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),KA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),e0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),n0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),l0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),i0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),m0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),g0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),h0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),u0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_0=new X({}),b0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),T0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),F0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),C0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new X({}),y0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),A0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),L0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),B0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new X({}),R0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),P0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),$0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),I0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),N0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),O0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),G0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),X0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),V0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new X({}),W0=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),H0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),U0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),J0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new X({}),Z0=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),oL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),rL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),tL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),nL=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),iL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),dL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),cL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),gL=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),uL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),pL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),_L=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),TL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),CL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),ML=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),EL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wL=new X({}),AL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),BL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),xL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),kL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new X({}),PL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),IL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),jL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),DL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new X({}),OL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),XL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/master/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),VL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),zL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QL=new X({}),HL=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),JL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),YL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),KL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e8=new X({}),o8=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),t8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),a8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),s8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l8=new X({}),i8=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),c8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),m8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),f8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h8=new X({}),u8=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),_8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),b8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),v8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),T8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F8=new X({}),C8=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),E8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),y8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),w8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L8=new X({}),B8=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),k8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),R8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),S8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I8=new X({}),j8=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),N8=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),q8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),O8=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/master/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/master/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/master/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G8=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Pe=l(),de=a("h1"),he=a("a"),io=a("span"),m(me.$$.fragment),Fe=l(),Vo=a("span"),ji=o("Auto Classes"),$m=l(),ma=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),Q5=o("from_pretrained()"),Im=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Le=l(),co=a("p"),qi=o("Instantiating one of "),qs=a("a"),H5=o("AutoConfig"),Os=o(", "),Gs=a("a"),U5=o("AutoModel"),Oi=o(`, and
`),Xs=a("a"),J5=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jm=l(),m(qa.$$.fragment),mo=l(),ue=a("p"),q7=o("will create a model that is an instance of "),Xi=a("a"),O7=o("BertModel"),G7=o("."),zo=l(),Oa=a("p"),X7=o("There is one class of "),Dm=a("code"),V7=o("AutoModel"),TPe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nxe=l(),Vi=a("h2"),Nm=a("a"),hQ=a("span"),m(Y5.$$.fragment),FPe=l(),uQ=a("span"),CPe=o("Extending the Auto Classes"),lxe=l(),Vs=a("p"),MPe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pQ=a("code"),EPe=o("NewModel"),yPe=o(", make sure you have a "),_Q=a("code"),wPe=o("NewModelConfig"),APe=o(` then you can add those to the auto
classes like this:`),ixe=l(),m(K5.$$.fragment),dxe=l(),z7=a("p"),LPe=o("You will then be able to use the auto classes like you would usually do!"),cxe=l(),m(qm.$$.fragment),mxe=l(),zi=a("h2"),Om=a("a"),bQ=a("span"),m(Z5.$$.fragment),BPe=l(),vQ=a("span"),xPe=o("AutoConfig"),fxe=l(),Wo=a("div"),m(ey.$$.fragment),kPe=l(),oy=a("p"),RPe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),W7=a("a"),SPe=o("from_pretrained()"),PPe=o(" class method."),$Pe=l(),ry=a("p"),IPe=o("This class cannot be instantiated directly using "),TQ=a("code"),jPe=o("__init__()"),DPe=o(" (throws an error)."),NPe=l(),fo=a("div"),m(ty.$$.fragment),qPe=l(),FQ=a("p"),OPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),GPe=l(),Wi=a("p"),XPe=o("The configuration class to instantiate is selected based on the "),CQ=a("code"),VPe=o("model_type"),zPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MQ=a("code"),WPe=o("pretrained_model_name_or_path"),QPe=o(":"),HPe=l(),v=a("ul"),Gm=a("li"),EQ=a("strong"),UPe=o("albert"),JPe=o(" \u2014 "),Q7=a("a"),YPe=o("AlbertConfig"),KPe=o(" (ALBERT model)"),ZPe=l(),Xm=a("li"),yQ=a("strong"),e$e=o("bart"),o$e=o(" \u2014 "),H7=a("a"),r$e=o("BartConfig"),t$e=o(" (BART model)"),a$e=l(),Vm=a("li"),wQ=a("strong"),s$e=o("beit"),n$e=o(" \u2014 "),U7=a("a"),l$e=o("BeitConfig"),i$e=o(" (BEiT model)"),d$e=l(),zm=a("li"),AQ=a("strong"),c$e=o("bert"),m$e=o(" \u2014 "),J7=a("a"),f$e=o("BertConfig"),g$e=o(" (BERT model)"),h$e=l(),Wm=a("li"),LQ=a("strong"),u$e=o("bert-generation"),p$e=o(" \u2014 "),Y7=a("a"),_$e=o("BertGenerationConfig"),b$e=o(" (Bert Generation model)"),v$e=l(),Qm=a("li"),BQ=a("strong"),T$e=o("big_bird"),F$e=o(" \u2014 "),K7=a("a"),C$e=o("BigBirdConfig"),M$e=o(" (BigBird model)"),E$e=l(),Hm=a("li"),xQ=a("strong"),y$e=o("bigbird_pegasus"),w$e=o(" \u2014 "),Z7=a("a"),A$e=o("BigBirdPegasusConfig"),L$e=o(" (BigBirdPegasus model)"),B$e=l(),Um=a("li"),kQ=a("strong"),x$e=o("blenderbot"),k$e=o(" \u2014 "),e9=a("a"),R$e=o("BlenderbotConfig"),S$e=o(" (Blenderbot model)"),P$e=l(),Jm=a("li"),RQ=a("strong"),$$e=o("blenderbot-small"),I$e=o(" \u2014 "),o9=a("a"),j$e=o("BlenderbotSmallConfig"),D$e=o(" (BlenderbotSmall model)"),N$e=l(),Ym=a("li"),SQ=a("strong"),q$e=o("camembert"),O$e=o(" \u2014 "),r9=a("a"),G$e=o("CamembertConfig"),X$e=o(" (CamemBERT model)"),V$e=l(),Km=a("li"),PQ=a("strong"),z$e=o("canine"),W$e=o(" \u2014 "),t9=a("a"),Q$e=o("CanineConfig"),H$e=o(" (Canine model)"),U$e=l(),Zm=a("li"),$Q=a("strong"),J$e=o("clip"),Y$e=o(" \u2014 "),a9=a("a"),K$e=o("CLIPConfig"),Z$e=o(" (CLIP model)"),eIe=l(),ef=a("li"),IQ=a("strong"),oIe=o("convbert"),rIe=o(" \u2014 "),s9=a("a"),tIe=o("ConvBertConfig"),aIe=o(" (ConvBERT model)"),sIe=l(),of=a("li"),jQ=a("strong"),nIe=o("convnext"),lIe=o(" \u2014 "),n9=a("a"),iIe=o("ConvNextConfig"),dIe=o(" (ConvNext model)"),cIe=l(),rf=a("li"),DQ=a("strong"),mIe=o("ctrl"),fIe=o(" \u2014 "),l9=a("a"),gIe=o("CTRLConfig"),hIe=o(" (CTRL model)"),uIe=l(),tf=a("li"),NQ=a("strong"),pIe=o("data2vec-audio"),_Ie=o(" \u2014 "),i9=a("a"),bIe=o("Data2VecAudioConfig"),vIe=o(" (Data2VecAudio model)"),TIe=l(),af=a("li"),qQ=a("strong"),FIe=o("data2vec-text"),CIe=o(" \u2014 "),d9=a("a"),MIe=o("Data2VecTextConfig"),EIe=o(" (Data2VecText model)"),yIe=l(),sf=a("li"),OQ=a("strong"),wIe=o("deberta"),AIe=o(" \u2014 "),c9=a("a"),LIe=o("DebertaConfig"),BIe=o(" (DeBERTa model)"),xIe=l(),nf=a("li"),GQ=a("strong"),kIe=o("deberta-v2"),RIe=o(" \u2014 "),m9=a("a"),SIe=o("DebertaV2Config"),PIe=o(" (DeBERTa-v2 model)"),$Ie=l(),lf=a("li"),XQ=a("strong"),IIe=o("deit"),jIe=o(" \u2014 "),f9=a("a"),DIe=o("DeiTConfig"),NIe=o(" (DeiT model)"),qIe=l(),df=a("li"),VQ=a("strong"),OIe=o("detr"),GIe=o(" \u2014 "),g9=a("a"),XIe=o("DetrConfig"),VIe=o(" (DETR model)"),zIe=l(),cf=a("li"),zQ=a("strong"),WIe=o("distilbert"),QIe=o(" \u2014 "),h9=a("a"),HIe=o("DistilBertConfig"),UIe=o(" (DistilBERT model)"),JIe=l(),mf=a("li"),WQ=a("strong"),YIe=o("dpr"),KIe=o(" \u2014 "),u9=a("a"),ZIe=o("DPRConfig"),eje=o(" (DPR model)"),oje=l(),ff=a("li"),QQ=a("strong"),rje=o("electra"),tje=o(" \u2014 "),p9=a("a"),aje=o("ElectraConfig"),sje=o(" (ELECTRA model)"),nje=l(),gf=a("li"),HQ=a("strong"),lje=o("encoder-decoder"),ije=o(" \u2014 "),_9=a("a"),dje=o("EncoderDecoderConfig"),cje=o(" (Encoder decoder model)"),mje=l(),hf=a("li"),UQ=a("strong"),fje=o("flaubert"),gje=o(" \u2014 "),b9=a("a"),hje=o("FlaubertConfig"),uje=o(" (FlauBERT model)"),pje=l(),uf=a("li"),JQ=a("strong"),_je=o("fnet"),bje=o(" \u2014 "),v9=a("a"),vje=o("FNetConfig"),Tje=o(" (FNet model)"),Fje=l(),pf=a("li"),YQ=a("strong"),Cje=o("fsmt"),Mje=o(" \u2014 "),T9=a("a"),Eje=o("FSMTConfig"),yje=o(" (FairSeq Machine-Translation model)"),wje=l(),_f=a("li"),KQ=a("strong"),Aje=o("funnel"),Lje=o(" \u2014 "),F9=a("a"),Bje=o("FunnelConfig"),xje=o(" (Funnel Transformer model)"),kje=l(),bf=a("li"),ZQ=a("strong"),Rje=o("gpt2"),Sje=o(" \u2014 "),C9=a("a"),Pje=o("GPT2Config"),$je=o(" (OpenAI GPT-2 model)"),Ije=l(),vf=a("li"),eH=a("strong"),jje=o("gpt_neo"),Dje=o(" \u2014 "),M9=a("a"),Nje=o("GPTNeoConfig"),qje=o(" (GPT Neo model)"),Oje=l(),Tf=a("li"),oH=a("strong"),Gje=o("gptj"),Xje=o(" \u2014 "),E9=a("a"),Vje=o("GPTJConfig"),zje=o(" (GPT-J model)"),Wje=l(),Ff=a("li"),rH=a("strong"),Qje=o("hubert"),Hje=o(" \u2014 "),y9=a("a"),Uje=o("HubertConfig"),Jje=o(" (Hubert model)"),Yje=l(),Cf=a("li"),tH=a("strong"),Kje=o("ibert"),Zje=o(" \u2014 "),w9=a("a"),eDe=o("IBertConfig"),oDe=o(" (I-BERT model)"),rDe=l(),Mf=a("li"),aH=a("strong"),tDe=o("imagegpt"),aDe=o(" \u2014 "),A9=a("a"),sDe=o("ImageGPTConfig"),nDe=o(" (ImageGPT model)"),lDe=l(),Ef=a("li"),sH=a("strong"),iDe=o("layoutlm"),dDe=o(" \u2014 "),L9=a("a"),cDe=o("LayoutLMConfig"),mDe=o(" (LayoutLM model)"),fDe=l(),yf=a("li"),nH=a("strong"),gDe=o("layoutlmv2"),hDe=o(" \u2014 "),B9=a("a"),uDe=o("LayoutLMv2Config"),pDe=o(" (LayoutLMv2 model)"),_De=l(),wf=a("li"),lH=a("strong"),bDe=o("led"),vDe=o(" \u2014 "),x9=a("a"),TDe=o("LEDConfig"),FDe=o(" (LED model)"),CDe=l(),Af=a("li"),iH=a("strong"),MDe=o("longformer"),EDe=o(" \u2014 "),k9=a("a"),yDe=o("LongformerConfig"),wDe=o(" (Longformer model)"),ADe=l(),Lf=a("li"),dH=a("strong"),LDe=o("luke"),BDe=o(" \u2014 "),R9=a("a"),xDe=o("LukeConfig"),kDe=o(" (LUKE model)"),RDe=l(),Bf=a("li"),cH=a("strong"),SDe=o("lxmert"),PDe=o(" \u2014 "),S9=a("a"),$De=o("LxmertConfig"),IDe=o(" (LXMERT model)"),jDe=l(),xf=a("li"),mH=a("strong"),DDe=o("m2m_100"),NDe=o(" \u2014 "),P9=a("a"),qDe=o("M2M100Config"),ODe=o(" (M2M100 model)"),GDe=l(),kf=a("li"),fH=a("strong"),XDe=o("marian"),VDe=o(" \u2014 "),$9=a("a"),zDe=o("MarianConfig"),WDe=o(" (Marian model)"),QDe=l(),Rf=a("li"),gH=a("strong"),HDe=o("maskformer"),UDe=o(" \u2014 "),I9=a("a"),JDe=o("MaskFormerConfig"),YDe=o(" (MaskFormer model)"),KDe=l(),Sf=a("li"),hH=a("strong"),ZDe=o("mbart"),eNe=o(" \u2014 "),j9=a("a"),oNe=o("MBartConfig"),rNe=o(" (mBART model)"),tNe=l(),Pf=a("li"),uH=a("strong"),aNe=o("megatron-bert"),sNe=o(" \u2014 "),D9=a("a"),nNe=o("MegatronBertConfig"),lNe=o(" (MegatronBert model)"),iNe=l(),$f=a("li"),pH=a("strong"),dNe=o("mobilebert"),cNe=o(" \u2014 "),N9=a("a"),mNe=o("MobileBertConfig"),fNe=o(" (MobileBERT model)"),gNe=l(),If=a("li"),_H=a("strong"),hNe=o("mpnet"),uNe=o(" \u2014 "),q9=a("a"),pNe=o("MPNetConfig"),_Ne=o(" (MPNet model)"),bNe=l(),jf=a("li"),bH=a("strong"),vNe=o("mt5"),TNe=o(" \u2014 "),O9=a("a"),FNe=o("MT5Config"),CNe=o(" (mT5 model)"),MNe=l(),Df=a("li"),vH=a("strong"),ENe=o("nystromformer"),yNe=o(" \u2014 "),G9=a("a"),wNe=o("NystromformerConfig"),ANe=o(" (Nystromformer model)"),LNe=l(),Nf=a("li"),TH=a("strong"),BNe=o("openai-gpt"),xNe=o(" \u2014 "),X9=a("a"),kNe=o("OpenAIGPTConfig"),RNe=o(" (OpenAI GPT model)"),SNe=l(),qf=a("li"),FH=a("strong"),PNe=o("pegasus"),$Ne=o(" \u2014 "),V9=a("a"),INe=o("PegasusConfig"),jNe=o(" (Pegasus model)"),DNe=l(),Of=a("li"),CH=a("strong"),NNe=o("perceiver"),qNe=o(" \u2014 "),z9=a("a"),ONe=o("PerceiverConfig"),GNe=o(" (Perceiver model)"),XNe=l(),Gf=a("li"),MH=a("strong"),VNe=o("plbart"),zNe=o(" \u2014 "),W9=a("a"),WNe=o("PLBartConfig"),QNe=o(" (PLBart model)"),HNe=l(),Xf=a("li"),EH=a("strong"),UNe=o("poolformer"),JNe=o(" \u2014 "),Q9=a("a"),YNe=o("PoolFormerConfig"),KNe=o(" (PoolFormer model)"),ZNe=l(),Vf=a("li"),yH=a("strong"),eqe=o("prophetnet"),oqe=o(" \u2014 "),H9=a("a"),rqe=o("ProphetNetConfig"),tqe=o(" (ProphetNet model)"),aqe=l(),zf=a("li"),wH=a("strong"),sqe=o("qdqbert"),nqe=o(" \u2014 "),U9=a("a"),lqe=o("QDQBertConfig"),iqe=o(" (QDQBert model)"),dqe=l(),Wf=a("li"),AH=a("strong"),cqe=o("rag"),mqe=o(" \u2014 "),J9=a("a"),fqe=o("RagConfig"),gqe=o(" (RAG model)"),hqe=l(),Qf=a("li"),LH=a("strong"),uqe=o("realm"),pqe=o(" \u2014 "),Y9=a("a"),_qe=o("RealmConfig"),bqe=o(" (Realm model)"),vqe=l(),Hf=a("li"),BH=a("strong"),Tqe=o("reformer"),Fqe=o(" \u2014 "),K9=a("a"),Cqe=o("ReformerConfig"),Mqe=o(" (Reformer model)"),Eqe=l(),Uf=a("li"),xH=a("strong"),yqe=o("rembert"),wqe=o(" \u2014 "),Z9=a("a"),Aqe=o("RemBertConfig"),Lqe=o(" (RemBERT model)"),Bqe=l(),Jf=a("li"),kH=a("strong"),xqe=o("retribert"),kqe=o(" \u2014 "),eB=a("a"),Rqe=o("RetriBertConfig"),Sqe=o(" (RetriBERT model)"),Pqe=l(),Yf=a("li"),RH=a("strong"),$qe=o("roberta"),Iqe=o(" \u2014 "),oB=a("a"),jqe=o("RobertaConfig"),Dqe=o(" (RoBERTa model)"),Nqe=l(),Kf=a("li"),SH=a("strong"),qqe=o("roformer"),Oqe=o(" \u2014 "),rB=a("a"),Gqe=o("RoFormerConfig"),Xqe=o(" (RoFormer model)"),Vqe=l(),Zf=a("li"),PH=a("strong"),zqe=o("segformer"),Wqe=o(" \u2014 "),tB=a("a"),Qqe=o("SegformerConfig"),Hqe=o(" (SegFormer model)"),Uqe=l(),eg=a("li"),$H=a("strong"),Jqe=o("sew"),Yqe=o(" \u2014 "),aB=a("a"),Kqe=o("SEWConfig"),Zqe=o(" (SEW model)"),eOe=l(),og=a("li"),IH=a("strong"),oOe=o("sew-d"),rOe=o(" \u2014 "),sB=a("a"),tOe=o("SEWDConfig"),aOe=o(" (SEW-D model)"),sOe=l(),rg=a("li"),jH=a("strong"),nOe=o("speech-encoder-decoder"),lOe=o(" \u2014 "),nB=a("a"),iOe=o("SpeechEncoderDecoderConfig"),dOe=o(" (Speech Encoder decoder model)"),cOe=l(),tg=a("li"),DH=a("strong"),mOe=o("speech_to_text"),fOe=o(" \u2014 "),lB=a("a"),gOe=o("Speech2TextConfig"),hOe=o(" (Speech2Text model)"),uOe=l(),ag=a("li"),NH=a("strong"),pOe=o("speech_to_text_2"),_Oe=o(" \u2014 "),iB=a("a"),bOe=o("Speech2Text2Config"),vOe=o(" (Speech2Text2 model)"),TOe=l(),sg=a("li"),qH=a("strong"),FOe=o("splinter"),COe=o(" \u2014 "),dB=a("a"),MOe=o("SplinterConfig"),EOe=o(" (Splinter model)"),yOe=l(),ng=a("li"),OH=a("strong"),wOe=o("squeezebert"),AOe=o(" \u2014 "),cB=a("a"),LOe=o("SqueezeBertConfig"),BOe=o(" (SqueezeBERT model)"),xOe=l(),lg=a("li"),GH=a("strong"),kOe=o("swin"),ROe=o(" \u2014 "),mB=a("a"),SOe=o("SwinConfig"),POe=o(" (Swin model)"),$Oe=l(),ig=a("li"),XH=a("strong"),IOe=o("t5"),jOe=o(" \u2014 "),fB=a("a"),DOe=o("T5Config"),NOe=o(" (T5 model)"),qOe=l(),dg=a("li"),VH=a("strong"),OOe=o("tapas"),GOe=o(" \u2014 "),gB=a("a"),XOe=o("TapasConfig"),VOe=o(" (TAPAS model)"),zOe=l(),cg=a("li"),zH=a("strong"),WOe=o("transfo-xl"),QOe=o(" \u2014 "),hB=a("a"),HOe=o("TransfoXLConfig"),UOe=o(" (Transformer-XL model)"),JOe=l(),mg=a("li"),WH=a("strong"),YOe=o("trocr"),KOe=o(" \u2014 "),uB=a("a"),ZOe=o("TrOCRConfig"),eGe=o(" (TrOCR model)"),oGe=l(),fg=a("li"),QH=a("strong"),rGe=o("unispeech"),tGe=o(" \u2014 "),pB=a("a"),aGe=o("UniSpeechConfig"),sGe=o(" (UniSpeech model)"),nGe=l(),gg=a("li"),HH=a("strong"),lGe=o("unispeech-sat"),iGe=o(" \u2014 "),_B=a("a"),dGe=o("UniSpeechSatConfig"),cGe=o(" (UniSpeechSat model)"),mGe=l(),hg=a("li"),UH=a("strong"),fGe=o("vilt"),gGe=o(" \u2014 "),bB=a("a"),hGe=o("ViltConfig"),uGe=o(" (ViLT model)"),pGe=l(),ug=a("li"),JH=a("strong"),_Ge=o("vision-encoder-decoder"),bGe=o(" \u2014 "),vB=a("a"),vGe=o("VisionEncoderDecoderConfig"),TGe=o(" (Vision Encoder decoder model)"),FGe=l(),pg=a("li"),YH=a("strong"),CGe=o("vision-text-dual-encoder"),MGe=o(" \u2014 "),TB=a("a"),EGe=o("VisionTextDualEncoderConfig"),yGe=o(" (VisionTextDualEncoder model)"),wGe=l(),_g=a("li"),KH=a("strong"),AGe=o("visual_bert"),LGe=o(" \u2014 "),FB=a("a"),BGe=o("VisualBertConfig"),xGe=o(" (VisualBert model)"),kGe=l(),bg=a("li"),ZH=a("strong"),RGe=o("vit"),SGe=o(" \u2014 "),CB=a("a"),PGe=o("ViTConfig"),$Ge=o(" (ViT model)"),IGe=l(),vg=a("li"),eU=a("strong"),jGe=o("vit_mae"),DGe=o(" \u2014 "),MB=a("a"),NGe=o("ViTMAEConfig"),qGe=o(" (ViTMAE model)"),OGe=l(),Tg=a("li"),oU=a("strong"),GGe=o("wav2vec2"),XGe=o(" \u2014 "),EB=a("a"),VGe=o("Wav2Vec2Config"),zGe=o(" (Wav2Vec2 model)"),WGe=l(),Fg=a("li"),rU=a("strong"),QGe=o("wavlm"),HGe=o(" \u2014 "),yB=a("a"),UGe=o("WavLMConfig"),JGe=o(" (WavLM model)"),YGe=l(),Cg=a("li"),tU=a("strong"),KGe=o("xglm"),ZGe=o(" \u2014 "),wB=a("a"),eXe=o("XGLMConfig"),oXe=o(" (XGLM model)"),rXe=l(),Mg=a("li"),aU=a("strong"),tXe=o("xlm"),aXe=o(" \u2014 "),AB=a("a"),sXe=o("XLMConfig"),nXe=o(" (XLM model)"),lXe=l(),Eg=a("li"),sU=a("strong"),iXe=o("xlm-prophetnet"),dXe=o(" \u2014 "),LB=a("a"),cXe=o("XLMProphetNetConfig"),mXe=o(" (XLMProphetNet model)"),fXe=l(),yg=a("li"),nU=a("strong"),gXe=o("xlm-roberta"),hXe=o(" \u2014 "),BB=a("a"),uXe=o("XLMRobertaConfig"),pXe=o(" (XLM-RoBERTa model)"),_Xe=l(),wg=a("li"),lU=a("strong"),bXe=o("xlm-roberta-xl"),vXe=o(" \u2014 "),xB=a("a"),TXe=o("XLMRobertaXLConfig"),FXe=o(" (XLM-RoBERTa-XL model)"),CXe=l(),Ag=a("li"),iU=a("strong"),MXe=o("xlnet"),EXe=o(" \u2014 "),kB=a("a"),yXe=o("XLNetConfig"),wXe=o(" (XLNet model)"),AXe=l(),Lg=a("li"),dU=a("strong"),LXe=o("yoso"),BXe=o(" \u2014 "),RB=a("a"),xXe=o("YosoConfig"),kXe=o(" (YOSO model)"),RXe=l(),cU=a("p"),SXe=o("Examples:"),PXe=l(),m(ay.$$.fragment),$Xe=l(),Bg=a("div"),m(sy.$$.fragment),IXe=l(),mU=a("p"),jXe=o("Register a new configuration for this class."),gxe=l(),Qi=a("h2"),xg=a("a"),fU=a("span"),m(ny.$$.fragment),DXe=l(),gU=a("span"),NXe=o("AutoTokenizer"),hxe=l(),Qo=a("div"),m(ly.$$.fragment),qXe=l(),iy=a("p"),OXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SB=a("a"),GXe=o("AutoTokenizer.from_pretrained()"),XXe=o(" class method."),VXe=l(),dy=a("p"),zXe=o("This class cannot be instantiated directly using "),hU=a("code"),WXe=o("__init__()"),QXe=o(" (throws an error)."),HXe=l(),go=a("div"),m(cy.$$.fragment),UXe=l(),uU=a("p"),JXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),YXe=l(),Ga=a("p"),KXe=o("The tokenizer class to instantiate is selected based on the "),pU=a("code"),ZXe=o("model_type"),eVe=o(` property of the config object (either
passed as an argument or loaded from `),_U=a("code"),oVe=o("pretrained_model_name_or_path"),rVe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bU=a("code"),tVe=o("pretrained_model_name_or_path"),aVe=o(":"),sVe=l(),E=a("ul"),zs=a("li"),vU=a("strong"),nVe=o("albert"),lVe=o(" \u2014 "),PB=a("a"),iVe=o("AlbertTokenizer"),dVe=o(" or "),$B=a("a"),cVe=o("AlbertTokenizerFast"),mVe=o(" (ALBERT model)"),fVe=l(),Ws=a("li"),TU=a("strong"),gVe=o("bart"),hVe=o(" \u2014 "),IB=a("a"),uVe=o("BartTokenizer"),pVe=o(" or "),jB=a("a"),_Ve=o("BartTokenizerFast"),bVe=o(" (BART model)"),vVe=l(),Qs=a("li"),FU=a("strong"),TVe=o("barthez"),FVe=o(" \u2014 "),DB=a("a"),CVe=o("BarthezTokenizer"),MVe=o(" or "),NB=a("a"),EVe=o("BarthezTokenizerFast"),yVe=o(" (BARThez model)"),wVe=l(),kg=a("li"),CU=a("strong"),AVe=o("bartpho"),LVe=o(" \u2014 "),qB=a("a"),BVe=o("BartphoTokenizer"),xVe=o(" (BARTpho model)"),kVe=l(),Hs=a("li"),MU=a("strong"),RVe=o("bert"),SVe=o(" \u2014 "),OB=a("a"),PVe=o("BertTokenizer"),$Ve=o(" or "),GB=a("a"),IVe=o("BertTokenizerFast"),jVe=o(" (BERT model)"),DVe=l(),Rg=a("li"),EU=a("strong"),NVe=o("bert-generation"),qVe=o(" \u2014 "),XB=a("a"),OVe=o("BertGenerationTokenizer"),GVe=o(" (Bert Generation model)"),XVe=l(),Sg=a("li"),yU=a("strong"),VVe=o("bert-japanese"),zVe=o(" \u2014 "),VB=a("a"),WVe=o("BertJapaneseTokenizer"),QVe=o(" (BertJapanese model)"),HVe=l(),Pg=a("li"),wU=a("strong"),UVe=o("bertweet"),JVe=o(" \u2014 "),zB=a("a"),YVe=o("BertweetTokenizer"),KVe=o(" (Bertweet model)"),ZVe=l(),Us=a("li"),AU=a("strong"),eze=o("big_bird"),oze=o(" \u2014 "),WB=a("a"),rze=o("BigBirdTokenizer"),tze=o(" or "),QB=a("a"),aze=o("BigBirdTokenizerFast"),sze=o(" (BigBird model)"),nze=l(),Js=a("li"),LU=a("strong"),lze=o("bigbird_pegasus"),ize=o(" \u2014 "),HB=a("a"),dze=o("PegasusTokenizer"),cze=o(" or "),UB=a("a"),mze=o("PegasusTokenizerFast"),fze=o(" (BigBirdPegasus model)"),gze=l(),Ys=a("li"),BU=a("strong"),hze=o("blenderbot"),uze=o(" \u2014 "),JB=a("a"),pze=o("BlenderbotTokenizer"),_ze=o(" or "),YB=a("a"),bze=o("BlenderbotTokenizerFast"),vze=o(" (Blenderbot model)"),Tze=l(),$g=a("li"),xU=a("strong"),Fze=o("blenderbot-small"),Cze=o(" \u2014 "),KB=a("a"),Mze=o("BlenderbotSmallTokenizer"),Eze=o(" (BlenderbotSmall model)"),yze=l(),Ig=a("li"),kU=a("strong"),wze=o("byt5"),Aze=o(" \u2014 "),ZB=a("a"),Lze=o("ByT5Tokenizer"),Bze=o(" (ByT5 model)"),xze=l(),Ks=a("li"),RU=a("strong"),kze=o("camembert"),Rze=o(" \u2014 "),ex=a("a"),Sze=o("CamembertTokenizer"),Pze=o(" or "),ox=a("a"),$ze=o("CamembertTokenizerFast"),Ize=o(" (CamemBERT model)"),jze=l(),jg=a("li"),SU=a("strong"),Dze=o("canine"),Nze=o(" \u2014 "),rx=a("a"),qze=o("CanineTokenizer"),Oze=o(" (Canine model)"),Gze=l(),Zs=a("li"),PU=a("strong"),Xze=o("clip"),Vze=o(" \u2014 "),tx=a("a"),zze=o("CLIPTokenizer"),Wze=o(" or "),ax=a("a"),Qze=o("CLIPTokenizerFast"),Hze=o(" (CLIP model)"),Uze=l(),en=a("li"),$U=a("strong"),Jze=o("convbert"),Yze=o(" \u2014 "),sx=a("a"),Kze=o("ConvBertTokenizer"),Zze=o(" or "),nx=a("a"),eWe=o("ConvBertTokenizerFast"),oWe=o(" (ConvBERT model)"),rWe=l(),on=a("li"),IU=a("strong"),tWe=o("cpm"),aWe=o(" \u2014 "),lx=a("a"),sWe=o("CpmTokenizer"),nWe=o(" or "),jU=a("code"),lWe=o("CpmTokenizerFast"),iWe=o(" (CPM model)"),dWe=l(),Dg=a("li"),DU=a("strong"),cWe=o("ctrl"),mWe=o(" \u2014 "),ix=a("a"),fWe=o("CTRLTokenizer"),gWe=o(" (CTRL model)"),hWe=l(),rn=a("li"),NU=a("strong"),uWe=o("deberta"),pWe=o(" \u2014 "),dx=a("a"),_We=o("DebertaTokenizer"),bWe=o(" or "),cx=a("a"),vWe=o("DebertaTokenizerFast"),TWe=o(" (DeBERTa model)"),FWe=l(),Ng=a("li"),qU=a("strong"),CWe=o("deberta-v2"),MWe=o(" \u2014 "),mx=a("a"),EWe=o("DebertaV2Tokenizer"),yWe=o(" (DeBERTa-v2 model)"),wWe=l(),tn=a("li"),OU=a("strong"),AWe=o("distilbert"),LWe=o(" \u2014 "),fx=a("a"),BWe=o("DistilBertTokenizer"),xWe=o(" or "),gx=a("a"),kWe=o("DistilBertTokenizerFast"),RWe=o(" (DistilBERT model)"),SWe=l(),an=a("li"),GU=a("strong"),PWe=o("dpr"),$We=o(" \u2014 "),hx=a("a"),IWe=o("DPRQuestionEncoderTokenizer"),jWe=o(" or "),ux=a("a"),DWe=o("DPRQuestionEncoderTokenizerFast"),NWe=o(" (DPR model)"),qWe=l(),sn=a("li"),XU=a("strong"),OWe=o("electra"),GWe=o(" \u2014 "),px=a("a"),XWe=o("ElectraTokenizer"),VWe=o(" or "),_x=a("a"),zWe=o("ElectraTokenizerFast"),WWe=o(" (ELECTRA model)"),QWe=l(),qg=a("li"),VU=a("strong"),HWe=o("flaubert"),UWe=o(" \u2014 "),bx=a("a"),JWe=o("FlaubertTokenizer"),YWe=o(" (FlauBERT model)"),KWe=l(),nn=a("li"),zU=a("strong"),ZWe=o("fnet"),eQe=o(" \u2014 "),vx=a("a"),oQe=o("FNetTokenizer"),rQe=o(" or "),Tx=a("a"),tQe=o("FNetTokenizerFast"),aQe=o(" (FNet model)"),sQe=l(),Og=a("li"),WU=a("strong"),nQe=o("fsmt"),lQe=o(" \u2014 "),Fx=a("a"),iQe=o("FSMTTokenizer"),dQe=o(" (FairSeq Machine-Translation model)"),cQe=l(),ln=a("li"),QU=a("strong"),mQe=o("funnel"),fQe=o(" \u2014 "),Cx=a("a"),gQe=o("FunnelTokenizer"),hQe=o(" or "),Mx=a("a"),uQe=o("FunnelTokenizerFast"),pQe=o(" (Funnel Transformer model)"),_Qe=l(),dn=a("li"),HU=a("strong"),bQe=o("gpt2"),vQe=o(" \u2014 "),Ex=a("a"),TQe=o("GPT2Tokenizer"),FQe=o(" or "),yx=a("a"),CQe=o("GPT2TokenizerFast"),MQe=o(" (OpenAI GPT-2 model)"),EQe=l(),cn=a("li"),UU=a("strong"),yQe=o("gpt_neo"),wQe=o(" \u2014 "),wx=a("a"),AQe=o("GPT2Tokenizer"),LQe=o(" or "),Ax=a("a"),BQe=o("GPT2TokenizerFast"),xQe=o(" (GPT Neo model)"),kQe=l(),mn=a("li"),JU=a("strong"),RQe=o("herbert"),SQe=o(" \u2014 "),Lx=a("a"),PQe=o("HerbertTokenizer"),$Qe=o(" or "),Bx=a("a"),IQe=o("HerbertTokenizerFast"),jQe=o(" (HerBERT model)"),DQe=l(),Gg=a("li"),YU=a("strong"),NQe=o("hubert"),qQe=o(" \u2014 "),xx=a("a"),OQe=o("Wav2Vec2CTCTokenizer"),GQe=o(" (Hubert model)"),XQe=l(),fn=a("li"),KU=a("strong"),VQe=o("ibert"),zQe=o(" \u2014 "),kx=a("a"),WQe=o("RobertaTokenizer"),QQe=o(" or "),Rx=a("a"),HQe=o("RobertaTokenizerFast"),UQe=o(" (I-BERT model)"),JQe=l(),gn=a("li"),ZU=a("strong"),YQe=o("layoutlm"),KQe=o(" \u2014 "),Sx=a("a"),ZQe=o("LayoutLMTokenizer"),eHe=o(" or "),Px=a("a"),oHe=o("LayoutLMTokenizerFast"),rHe=o(" (LayoutLM model)"),tHe=l(),hn=a("li"),eJ=a("strong"),aHe=o("layoutlmv2"),sHe=o(" \u2014 "),$x=a("a"),nHe=o("LayoutLMv2Tokenizer"),lHe=o(" or "),Ix=a("a"),iHe=o("LayoutLMv2TokenizerFast"),dHe=o(" (LayoutLMv2 model)"),cHe=l(),un=a("li"),oJ=a("strong"),mHe=o("layoutxlm"),fHe=o(" \u2014 "),jx=a("a"),gHe=o("LayoutXLMTokenizer"),hHe=o(" or "),Dx=a("a"),uHe=o("LayoutXLMTokenizerFast"),pHe=o(" (LayoutXLM model)"),_He=l(),pn=a("li"),rJ=a("strong"),bHe=o("led"),vHe=o(" \u2014 "),Nx=a("a"),THe=o("LEDTokenizer"),FHe=o(" or "),qx=a("a"),CHe=o("LEDTokenizerFast"),MHe=o(" (LED model)"),EHe=l(),_n=a("li"),tJ=a("strong"),yHe=o("longformer"),wHe=o(" \u2014 "),Ox=a("a"),AHe=o("LongformerTokenizer"),LHe=o(" or "),Gx=a("a"),BHe=o("LongformerTokenizerFast"),xHe=o(" (Longformer model)"),kHe=l(),Xg=a("li"),aJ=a("strong"),RHe=o("luke"),SHe=o(" \u2014 "),Xx=a("a"),PHe=o("LukeTokenizer"),$He=o(" (LUKE model)"),IHe=l(),bn=a("li"),sJ=a("strong"),jHe=o("lxmert"),DHe=o(" \u2014 "),Vx=a("a"),NHe=o("LxmertTokenizer"),qHe=o(" or "),zx=a("a"),OHe=o("LxmertTokenizerFast"),GHe=o(" (LXMERT model)"),XHe=l(),Vg=a("li"),nJ=a("strong"),VHe=o("m2m_100"),zHe=o(" \u2014 "),Wx=a("a"),WHe=o("M2M100Tokenizer"),QHe=o(" (M2M100 model)"),HHe=l(),zg=a("li"),lJ=a("strong"),UHe=o("marian"),JHe=o(" \u2014 "),Qx=a("a"),YHe=o("MarianTokenizer"),KHe=o(" (Marian model)"),ZHe=l(),vn=a("li"),iJ=a("strong"),eUe=o("mbart"),oUe=o(" \u2014 "),Hx=a("a"),rUe=o("MBartTokenizer"),tUe=o(" or "),Ux=a("a"),aUe=o("MBartTokenizerFast"),sUe=o(" (mBART model)"),nUe=l(),Tn=a("li"),dJ=a("strong"),lUe=o("mbart50"),iUe=o(" \u2014 "),Jx=a("a"),dUe=o("MBart50Tokenizer"),cUe=o(" or "),Yx=a("a"),mUe=o("MBart50TokenizerFast"),fUe=o(" (mBART-50 model)"),gUe=l(),Wg=a("li"),cJ=a("strong"),hUe=o("mluke"),uUe=o(" \u2014 "),Kx=a("a"),pUe=o("MLukeTokenizer"),_Ue=o(" (mLUKE model)"),bUe=l(),Fn=a("li"),mJ=a("strong"),vUe=o("mobilebert"),TUe=o(" \u2014 "),Zx=a("a"),FUe=o("MobileBertTokenizer"),CUe=o(" or "),ek=a("a"),MUe=o("MobileBertTokenizerFast"),EUe=o(" (MobileBERT model)"),yUe=l(),Cn=a("li"),fJ=a("strong"),wUe=o("mpnet"),AUe=o(" \u2014 "),ok=a("a"),LUe=o("MPNetTokenizer"),BUe=o(" or "),rk=a("a"),xUe=o("MPNetTokenizerFast"),kUe=o(" (MPNet model)"),RUe=l(),Mn=a("li"),gJ=a("strong"),SUe=o("mt5"),PUe=o(" \u2014 "),tk=a("a"),$Ue=o("MT5Tokenizer"),IUe=o(" or "),ak=a("a"),jUe=o("MT5TokenizerFast"),DUe=o(" (mT5 model)"),NUe=l(),En=a("li"),hJ=a("strong"),qUe=o("openai-gpt"),OUe=o(" \u2014 "),sk=a("a"),GUe=o("OpenAIGPTTokenizer"),XUe=o(" or "),nk=a("a"),VUe=o("OpenAIGPTTokenizerFast"),zUe=o(" (OpenAI GPT model)"),WUe=l(),yn=a("li"),uJ=a("strong"),QUe=o("pegasus"),HUe=o(" \u2014 "),lk=a("a"),UUe=o("PegasusTokenizer"),JUe=o(" or "),ik=a("a"),YUe=o("PegasusTokenizerFast"),KUe=o(" (Pegasus model)"),ZUe=l(),Qg=a("li"),pJ=a("strong"),eJe=o("perceiver"),oJe=o(" \u2014 "),dk=a("a"),rJe=o("PerceiverTokenizer"),tJe=o(" (Perceiver model)"),aJe=l(),Hg=a("li"),_J=a("strong"),sJe=o("phobert"),nJe=o(" \u2014 "),ck=a("a"),lJe=o("PhobertTokenizer"),iJe=o(" (PhoBERT model)"),dJe=l(),Ug=a("li"),bJ=a("strong"),cJe=o("plbart"),mJe=o(" \u2014 "),mk=a("a"),fJe=o("PLBartTokenizer"),gJe=o(" (PLBart model)"),hJe=l(),Jg=a("li"),vJ=a("strong"),uJe=o("prophetnet"),pJe=o(" \u2014 "),fk=a("a"),_Je=o("ProphetNetTokenizer"),bJe=o(" (ProphetNet model)"),vJe=l(),wn=a("li"),TJ=a("strong"),TJe=o("qdqbert"),FJe=o(" \u2014 "),gk=a("a"),CJe=o("BertTokenizer"),MJe=o(" or "),hk=a("a"),EJe=o("BertTokenizerFast"),yJe=o(" (QDQBert model)"),wJe=l(),Yg=a("li"),FJ=a("strong"),AJe=o("rag"),LJe=o(" \u2014 "),uk=a("a"),BJe=o("RagTokenizer"),xJe=o(" (RAG model)"),kJe=l(),An=a("li"),CJ=a("strong"),RJe=o("realm"),SJe=o(" \u2014 "),pk=a("a"),PJe=o("RealmTokenizer"),$Je=o(" or "),_k=a("a"),IJe=o("RealmTokenizerFast"),jJe=o(" (Realm model)"),DJe=l(),Ln=a("li"),MJ=a("strong"),NJe=o("reformer"),qJe=o(" \u2014 "),bk=a("a"),OJe=o("ReformerTokenizer"),GJe=o(" or "),vk=a("a"),XJe=o("ReformerTokenizerFast"),VJe=o(" (Reformer model)"),zJe=l(),Bn=a("li"),EJ=a("strong"),WJe=o("rembert"),QJe=o(" \u2014 "),Tk=a("a"),HJe=o("RemBertTokenizer"),UJe=o(" or "),Fk=a("a"),JJe=o("RemBertTokenizerFast"),YJe=o(" (RemBERT model)"),KJe=l(),xn=a("li"),yJ=a("strong"),ZJe=o("retribert"),eYe=o(" \u2014 "),Ck=a("a"),oYe=o("RetriBertTokenizer"),rYe=o(" or "),Mk=a("a"),tYe=o("RetriBertTokenizerFast"),aYe=o(" (RetriBERT model)"),sYe=l(),kn=a("li"),wJ=a("strong"),nYe=o("roberta"),lYe=o(" \u2014 "),Ek=a("a"),iYe=o("RobertaTokenizer"),dYe=o(" or "),yk=a("a"),cYe=o("RobertaTokenizerFast"),mYe=o(" (RoBERTa model)"),fYe=l(),Rn=a("li"),AJ=a("strong"),gYe=o("roformer"),hYe=o(" \u2014 "),wk=a("a"),uYe=o("RoFormerTokenizer"),pYe=o(" or "),Ak=a("a"),_Ye=o("RoFormerTokenizerFast"),bYe=o(" (RoFormer model)"),vYe=l(),Kg=a("li"),LJ=a("strong"),TYe=o("speech_to_text"),FYe=o(" \u2014 "),Lk=a("a"),CYe=o("Speech2TextTokenizer"),MYe=o(" (Speech2Text model)"),EYe=l(),Zg=a("li"),BJ=a("strong"),yYe=o("speech_to_text_2"),wYe=o(" \u2014 "),Bk=a("a"),AYe=o("Speech2Text2Tokenizer"),LYe=o(" (Speech2Text2 model)"),BYe=l(),Sn=a("li"),xJ=a("strong"),xYe=o("splinter"),kYe=o(" \u2014 "),xk=a("a"),RYe=o("SplinterTokenizer"),SYe=o(" or "),kk=a("a"),PYe=o("SplinterTokenizerFast"),$Ye=o(" (Splinter model)"),IYe=l(),Pn=a("li"),kJ=a("strong"),jYe=o("squeezebert"),DYe=o(" \u2014 "),Rk=a("a"),NYe=o("SqueezeBertTokenizer"),qYe=o(" or "),Sk=a("a"),OYe=o("SqueezeBertTokenizerFast"),GYe=o(" (SqueezeBERT model)"),XYe=l(),$n=a("li"),RJ=a("strong"),VYe=o("t5"),zYe=o(" \u2014 "),Pk=a("a"),WYe=o("T5Tokenizer"),QYe=o(" or "),$k=a("a"),HYe=o("T5TokenizerFast"),UYe=o(" (T5 model)"),JYe=l(),eh=a("li"),SJ=a("strong"),YYe=o("tapas"),KYe=o(" \u2014 "),Ik=a("a"),ZYe=o("TapasTokenizer"),eKe=o(" (TAPAS model)"),oKe=l(),oh=a("li"),PJ=a("strong"),rKe=o("transfo-xl"),tKe=o(" \u2014 "),jk=a("a"),aKe=o("TransfoXLTokenizer"),sKe=o(" (Transformer-XL model)"),nKe=l(),rh=a("li"),$J=a("strong"),lKe=o("wav2vec2"),iKe=o(" \u2014 "),Dk=a("a"),dKe=o("Wav2Vec2CTCTokenizer"),cKe=o(" (Wav2Vec2 model)"),mKe=l(),th=a("li"),IJ=a("strong"),fKe=o("wav2vec2_phoneme"),gKe=o(" \u2014 "),Nk=a("a"),hKe=o("Wav2Vec2PhonemeCTCTokenizer"),uKe=o(" (Wav2Vec2Phoneme model)"),pKe=l(),In=a("li"),jJ=a("strong"),_Ke=o("xglm"),bKe=o(" \u2014 "),qk=a("a"),vKe=o("XGLMTokenizer"),TKe=o(" or "),Ok=a("a"),FKe=o("XGLMTokenizerFast"),CKe=o(" (XGLM model)"),MKe=l(),ah=a("li"),DJ=a("strong"),EKe=o("xlm"),yKe=o(" \u2014 "),Gk=a("a"),wKe=o("XLMTokenizer"),AKe=o(" (XLM model)"),LKe=l(),sh=a("li"),NJ=a("strong"),BKe=o("xlm-prophetnet"),xKe=o(" \u2014 "),Xk=a("a"),kKe=o("XLMProphetNetTokenizer"),RKe=o(" (XLMProphetNet model)"),SKe=l(),jn=a("li"),qJ=a("strong"),PKe=o("xlm-roberta"),$Ke=o(" \u2014 "),Vk=a("a"),IKe=o("XLMRobertaTokenizer"),jKe=o(" or "),zk=a("a"),DKe=o("XLMRobertaTokenizerFast"),NKe=o(" (XLM-RoBERTa model)"),qKe=l(),Dn=a("li"),OJ=a("strong"),OKe=o("xlnet"),GKe=o(" \u2014 "),Wk=a("a"),XKe=o("XLNetTokenizer"),VKe=o(" or "),Qk=a("a"),zKe=o("XLNetTokenizerFast"),WKe=o(" (XLNet model)"),QKe=l(),GJ=a("p"),HKe=o("Examples:"),UKe=l(),m(my.$$.fragment),JKe=l(),nh=a("div"),m(fy.$$.fragment),YKe=l(),XJ=a("p"),KKe=o("Register a new tokenizer in this mapping."),uxe=l(),Hi=a("h2"),lh=a("a"),VJ=a("span"),m(gy.$$.fragment),ZKe=l(),zJ=a("span"),eZe=o("AutoFeatureExtractor"),pxe=l(),Ho=a("div"),m(hy.$$.fragment),oZe=l(),uy=a("p"),rZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Hk=a("a"),tZe=o("AutoFeatureExtractor.from_pretrained()"),aZe=o(" class method."),sZe=l(),py=a("p"),nZe=o("This class cannot be instantiated directly using "),WJ=a("code"),lZe=o("__init__()"),iZe=o(" (throws an error)."),dZe=l(),$e=a("div"),m(_y.$$.fragment),cZe=l(),QJ=a("p"),mZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),fZe=l(),Xa=a("p"),gZe=o("The feature extractor class to instantiate is selected based on the "),HJ=a("code"),hZe=o("model_type"),uZe=o(` property of the config object
(either passed as an argument or loaded from `),UJ=a("code"),pZe=o("pretrained_model_name_or_path"),_Ze=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),JJ=a("code"),bZe=o("pretrained_model_name_or_path"),vZe=o(":"),TZe=l(),ae=a("ul"),ih=a("li"),YJ=a("strong"),FZe=o("beit"),CZe=o(" \u2014 "),Uk=a("a"),MZe=o("BeitFeatureExtractor"),EZe=o(" (BEiT model)"),yZe=l(),dh=a("li"),KJ=a("strong"),wZe=o("clip"),AZe=o(" \u2014 "),Jk=a("a"),LZe=o("CLIPFeatureExtractor"),BZe=o(" (CLIP model)"),xZe=l(),ch=a("li"),ZJ=a("strong"),kZe=o("convnext"),RZe=o(" \u2014 "),Yk=a("a"),SZe=o("ConvNextFeatureExtractor"),PZe=o(" (ConvNext model)"),$Ze=l(),mh=a("li"),eY=a("strong"),IZe=o("deit"),jZe=o(" \u2014 "),Kk=a("a"),DZe=o("DeiTFeatureExtractor"),NZe=o(" (DeiT model)"),qZe=l(),fh=a("li"),oY=a("strong"),OZe=o("detr"),GZe=o(" \u2014 "),Zk=a("a"),XZe=o("DetrFeatureExtractor"),VZe=o(" (DETR model)"),zZe=l(),gh=a("li"),rY=a("strong"),WZe=o("hubert"),QZe=o(" \u2014 "),eR=a("a"),HZe=o("Wav2Vec2FeatureExtractor"),UZe=o(" (Hubert model)"),JZe=l(),hh=a("li"),tY=a("strong"),YZe=o("layoutlmv2"),KZe=o(" \u2014 "),oR=a("a"),ZZe=o("LayoutLMv2FeatureExtractor"),eeo=o(" (LayoutLMv2 model)"),oeo=l(),uh=a("li"),aY=a("strong"),reo=o("maskformer"),teo=o(" \u2014 "),rR=a("a"),aeo=o("MaskFormerFeatureExtractor"),seo=o(" (MaskFormer model)"),neo=l(),ph=a("li"),sY=a("strong"),leo=o("perceiver"),ieo=o(" \u2014 "),tR=a("a"),deo=o("PerceiverFeatureExtractor"),ceo=o(" (Perceiver model)"),meo=l(),_h=a("li"),nY=a("strong"),feo=o("poolformer"),geo=o(" \u2014 "),aR=a("a"),heo=o("PoolFormerFeatureExtractor"),ueo=o(" (PoolFormer model)"),peo=l(),bh=a("li"),lY=a("strong"),_eo=o("segformer"),beo=o(" \u2014 "),sR=a("a"),veo=o("SegformerFeatureExtractor"),Teo=o(" (SegFormer model)"),Feo=l(),vh=a("li"),iY=a("strong"),Ceo=o("speech_to_text"),Meo=o(" \u2014 "),nR=a("a"),Eeo=o("Speech2TextFeatureExtractor"),yeo=o(" (Speech2Text model)"),weo=l(),Th=a("li"),dY=a("strong"),Aeo=o("swin"),Leo=o(" \u2014 "),lR=a("a"),Beo=o("ViTFeatureExtractor"),xeo=o(" (Swin model)"),keo=l(),Fh=a("li"),cY=a("strong"),Reo=o("vit"),Seo=o(" \u2014 "),iR=a("a"),Peo=o("ViTFeatureExtractor"),$eo=o(" (ViT model)"),Ieo=l(),Ch=a("li"),mY=a("strong"),jeo=o("vit_mae"),Deo=o(" \u2014 "),dR=a("a"),Neo=o("ViTFeatureExtractor"),qeo=o(" (ViTMAE model)"),Oeo=l(),Mh=a("li"),fY=a("strong"),Geo=o("wav2vec2"),Xeo=o(" \u2014 "),cR=a("a"),Veo=o("Wav2Vec2FeatureExtractor"),zeo=o(" (Wav2Vec2 model)"),Weo=l(),m(Eh.$$.fragment),Qeo=l(),gY=a("p"),Heo=o("Examples:"),Ueo=l(),m(by.$$.fragment),Jeo=l(),yh=a("div"),m(vy.$$.fragment),Yeo=l(),hY=a("p"),Keo=o("Register a new feature extractor for this class."),_xe=l(),Ui=a("h2"),wh=a("a"),uY=a("span"),m(Ty.$$.fragment),Zeo=l(),pY=a("span"),eoo=o("AutoProcessor"),bxe=l(),Uo=a("div"),m(Fy.$$.fragment),ooo=l(),Cy=a("p"),roo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mR=a("a"),too=o("AutoProcessor.from_pretrained()"),aoo=o(" class method."),soo=l(),My=a("p"),noo=o("This class cannot be instantiated directly using "),_Y=a("code"),loo=o("__init__()"),ioo=o(" (throws an error)."),doo=l(),Ie=a("div"),m(Ey.$$.fragment),coo=l(),bY=a("p"),moo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),foo=l(),Ji=a("p"),goo=o("The processor class to instantiate is selected based on the "),vY=a("code"),hoo=o("model_type"),uoo=o(` property of the config object (either
passed as an argument or loaded from `),TY=a("code"),poo=o("pretrained_model_name_or_path"),_oo=o(" if possible):"),boo=l(),Be=a("ul"),Ah=a("li"),FY=a("strong"),voo=o("clip"),Too=o(" \u2014 "),fR=a("a"),Foo=o("CLIPProcessor"),Coo=o(" (CLIP model)"),Moo=l(),Lh=a("li"),CY=a("strong"),Eoo=o("layoutlmv2"),yoo=o(" \u2014 "),gR=a("a"),woo=o("LayoutLMv2Processor"),Aoo=o(" (LayoutLMv2 model)"),Loo=l(),Bh=a("li"),MY=a("strong"),Boo=o("layoutxlm"),xoo=o(" \u2014 "),hR=a("a"),koo=o("LayoutXLMProcessor"),Roo=o(" (LayoutXLM model)"),Soo=l(),xh=a("li"),EY=a("strong"),Poo=o("speech_to_text"),$oo=o(" \u2014 "),uR=a("a"),Ioo=o("Speech2TextProcessor"),joo=o(" (Speech2Text model)"),Doo=l(),kh=a("li"),yY=a("strong"),Noo=o("speech_to_text_2"),qoo=o(" \u2014 "),pR=a("a"),Ooo=o("Speech2Text2Processor"),Goo=o(" (Speech2Text2 model)"),Xoo=l(),Rh=a("li"),wY=a("strong"),Voo=o("trocr"),zoo=o(" \u2014 "),_R=a("a"),Woo=o("TrOCRProcessor"),Qoo=o(" (TrOCR model)"),Hoo=l(),Sh=a("li"),AY=a("strong"),Uoo=o("vision-text-dual-encoder"),Joo=o(" \u2014 "),bR=a("a"),Yoo=o("VisionTextDualEncoderProcessor"),Koo=o(" (VisionTextDualEncoder model)"),Zoo=l(),Ph=a("li"),LY=a("strong"),ero=o("wav2vec2"),oro=o(" \u2014 "),vR=a("a"),rro=o("Wav2Vec2Processor"),tro=o(" (Wav2Vec2 model)"),aro=l(),m($h.$$.fragment),sro=l(),BY=a("p"),nro=o("Examples:"),lro=l(),m(yy.$$.fragment),iro=l(),Ih=a("div"),m(wy.$$.fragment),dro=l(),xY=a("p"),cro=o("Register a new processor for this class."),vxe=l(),Yi=a("h2"),jh=a("a"),kY=a("span"),m(Ay.$$.fragment),mro=l(),RY=a("span"),fro=o("AutoModel"),Txe=l(),Jo=a("div"),m(Ly.$$.fragment),gro=l(),Ki=a("p"),hro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SY=a("code"),uro=o("from_pretrained()"),pro=o("class method or the "),PY=a("code"),_ro=o("from_config()"),bro=o(`class
method.`),vro=l(),By=a("p"),Tro=o("This class cannot be instantiated directly using "),$Y=a("code"),Fro=o("__init__()"),Cro=o(" (throws an error)."),Mro=l(),Vr=a("div"),m(xy.$$.fragment),Ero=l(),IY=a("p"),yro=o("Instantiates one of the base model classes of the library from a configuration."),wro=l(),Zi=a("p"),Aro=o(`Note:
Loading a model from its configuration file does `),jY=a("strong"),Lro=o("not"),Bro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("code"),xro=o("from_pretrained()"),kro=o("to load the model weights."),Rro=l(),NY=a("p"),Sro=o("Examples:"),Pro=l(),m(ky.$$.fragment),$ro=l(),je=a("div"),m(Ry.$$.fragment),Iro=l(),qY=a("p"),jro=o("Instantiate one of the base model classes of the library from a pretrained model."),Dro=l(),Va=a("p"),Nro=o("The model class to instantiate is selected based on the "),OY=a("code"),qro=o("model_type"),Oro=o(` property of the config object (either
passed as an argument or loaded from `),GY=a("code"),Gro=o("pretrained_model_name_or_path"),Xro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XY=a("code"),Vro=o("pretrained_model_name_or_path"),zro=o(":"),Wro=l(),F=a("ul"),Dh=a("li"),VY=a("strong"),Qro=o("albert"),Hro=o(" \u2014 "),TR=a("a"),Uro=o("AlbertModel"),Jro=o(" (ALBERT model)"),Yro=l(),Nh=a("li"),zY=a("strong"),Kro=o("bart"),Zro=o(" \u2014 "),FR=a("a"),eto=o("BartModel"),oto=o(" (BART model)"),rto=l(),qh=a("li"),WY=a("strong"),tto=o("beit"),ato=o(" \u2014 "),CR=a("a"),sto=o("BeitModel"),nto=o(" (BEiT model)"),lto=l(),Oh=a("li"),QY=a("strong"),ito=o("bert"),dto=o(" \u2014 "),MR=a("a"),cto=o("BertModel"),mto=o(" (BERT model)"),fto=l(),Gh=a("li"),HY=a("strong"),gto=o("bert-generation"),hto=o(" \u2014 "),ER=a("a"),uto=o("BertGenerationEncoder"),pto=o(" (Bert Generation model)"),_to=l(),Xh=a("li"),UY=a("strong"),bto=o("big_bird"),vto=o(" \u2014 "),yR=a("a"),Tto=o("BigBirdModel"),Fto=o(" (BigBird model)"),Cto=l(),Vh=a("li"),JY=a("strong"),Mto=o("bigbird_pegasus"),Eto=o(" \u2014 "),wR=a("a"),yto=o("BigBirdPegasusModel"),wto=o(" (BigBirdPegasus model)"),Ato=l(),zh=a("li"),YY=a("strong"),Lto=o("blenderbot"),Bto=o(" \u2014 "),AR=a("a"),xto=o("BlenderbotModel"),kto=o(" (Blenderbot model)"),Rto=l(),Wh=a("li"),KY=a("strong"),Sto=o("blenderbot-small"),Pto=o(" \u2014 "),LR=a("a"),$to=o("BlenderbotSmallModel"),Ito=o(" (BlenderbotSmall model)"),jto=l(),Qh=a("li"),ZY=a("strong"),Dto=o("camembert"),Nto=o(" \u2014 "),BR=a("a"),qto=o("CamembertModel"),Oto=o(" (CamemBERT model)"),Gto=l(),Hh=a("li"),eK=a("strong"),Xto=o("canine"),Vto=o(" \u2014 "),xR=a("a"),zto=o("CanineModel"),Wto=o(" (Canine model)"),Qto=l(),Uh=a("li"),oK=a("strong"),Hto=o("clip"),Uto=o(" \u2014 "),kR=a("a"),Jto=o("CLIPModel"),Yto=o(" (CLIP model)"),Kto=l(),Jh=a("li"),rK=a("strong"),Zto=o("convbert"),eao=o(" \u2014 "),RR=a("a"),oao=o("ConvBertModel"),rao=o(" (ConvBERT model)"),tao=l(),Yh=a("li"),tK=a("strong"),aao=o("convnext"),sao=o(" \u2014 "),SR=a("a"),nao=o("ConvNextModel"),lao=o(" (ConvNext model)"),iao=l(),Kh=a("li"),aK=a("strong"),dao=o("ctrl"),cao=o(" \u2014 "),PR=a("a"),mao=o("CTRLModel"),fao=o(" (CTRL model)"),gao=l(),Zh=a("li"),sK=a("strong"),hao=o("data2vec-audio"),uao=o(" \u2014 "),$R=a("a"),pao=o("Data2VecAudioModel"),_ao=o(" (Data2VecAudio model)"),bao=l(),eu=a("li"),nK=a("strong"),vao=o("data2vec-text"),Tao=o(" \u2014 "),IR=a("a"),Fao=o("Data2VecTextModel"),Cao=o(" (Data2VecText model)"),Mao=l(),ou=a("li"),lK=a("strong"),Eao=o("deberta"),yao=o(" \u2014 "),jR=a("a"),wao=o("DebertaModel"),Aao=o(" (DeBERTa model)"),Lao=l(),ru=a("li"),iK=a("strong"),Bao=o("deberta-v2"),xao=o(" \u2014 "),DR=a("a"),kao=o("DebertaV2Model"),Rao=o(" (DeBERTa-v2 model)"),Sao=l(),tu=a("li"),dK=a("strong"),Pao=o("deit"),$ao=o(" \u2014 "),NR=a("a"),Iao=o("DeiTModel"),jao=o(" (DeiT model)"),Dao=l(),au=a("li"),cK=a("strong"),Nao=o("detr"),qao=o(" \u2014 "),qR=a("a"),Oao=o("DetrModel"),Gao=o(" (DETR model)"),Xao=l(),su=a("li"),mK=a("strong"),Vao=o("distilbert"),zao=o(" \u2014 "),OR=a("a"),Wao=o("DistilBertModel"),Qao=o(" (DistilBERT model)"),Hao=l(),nu=a("li"),fK=a("strong"),Uao=o("dpr"),Jao=o(" \u2014 "),GR=a("a"),Yao=o("DPRQuestionEncoder"),Kao=o(" (DPR model)"),Zao=l(),lu=a("li"),gK=a("strong"),eso=o("electra"),oso=o(" \u2014 "),XR=a("a"),rso=o("ElectraModel"),tso=o(" (ELECTRA model)"),aso=l(),iu=a("li"),hK=a("strong"),sso=o("flaubert"),nso=o(" \u2014 "),VR=a("a"),lso=o("FlaubertModel"),iso=o(" (FlauBERT model)"),dso=l(),du=a("li"),uK=a("strong"),cso=o("fnet"),mso=o(" \u2014 "),zR=a("a"),fso=o("FNetModel"),gso=o(" (FNet model)"),hso=l(),cu=a("li"),pK=a("strong"),uso=o("fsmt"),pso=o(" \u2014 "),WR=a("a"),_so=o("FSMTModel"),bso=o(" (FairSeq Machine-Translation model)"),vso=l(),Nn=a("li"),_K=a("strong"),Tso=o("funnel"),Fso=o(" \u2014 "),QR=a("a"),Cso=o("FunnelModel"),Mso=o(" or "),HR=a("a"),Eso=o("FunnelBaseModel"),yso=o(" (Funnel Transformer model)"),wso=l(),mu=a("li"),bK=a("strong"),Aso=o("gpt2"),Lso=o(" \u2014 "),UR=a("a"),Bso=o("GPT2Model"),xso=o(" (OpenAI GPT-2 model)"),kso=l(),fu=a("li"),vK=a("strong"),Rso=o("gpt_neo"),Sso=o(" \u2014 "),JR=a("a"),Pso=o("GPTNeoModel"),$so=o(" (GPT Neo model)"),Iso=l(),gu=a("li"),TK=a("strong"),jso=o("gptj"),Dso=o(" \u2014 "),YR=a("a"),Nso=o("GPTJModel"),qso=o(" (GPT-J model)"),Oso=l(),hu=a("li"),FK=a("strong"),Gso=o("hubert"),Xso=o(" \u2014 "),KR=a("a"),Vso=o("HubertModel"),zso=o(" (Hubert model)"),Wso=l(),uu=a("li"),CK=a("strong"),Qso=o("ibert"),Hso=o(" \u2014 "),ZR=a("a"),Uso=o("IBertModel"),Jso=o(" (I-BERT model)"),Yso=l(),pu=a("li"),MK=a("strong"),Kso=o("imagegpt"),Zso=o(" \u2014 "),eS=a("a"),eno=o("ImageGPTModel"),ono=o(" (ImageGPT model)"),rno=l(),_u=a("li"),EK=a("strong"),tno=o("layoutlm"),ano=o(" \u2014 "),oS=a("a"),sno=o("LayoutLMModel"),nno=o(" (LayoutLM model)"),lno=l(),bu=a("li"),yK=a("strong"),ino=o("layoutlmv2"),dno=o(" \u2014 "),rS=a("a"),cno=o("LayoutLMv2Model"),mno=o(" (LayoutLMv2 model)"),fno=l(),vu=a("li"),wK=a("strong"),gno=o("led"),hno=o(" \u2014 "),tS=a("a"),uno=o("LEDModel"),pno=o(" (LED model)"),_no=l(),Tu=a("li"),AK=a("strong"),bno=o("longformer"),vno=o(" \u2014 "),aS=a("a"),Tno=o("LongformerModel"),Fno=o(" (Longformer model)"),Cno=l(),Fu=a("li"),LK=a("strong"),Mno=o("luke"),Eno=o(" \u2014 "),sS=a("a"),yno=o("LukeModel"),wno=o(" (LUKE model)"),Ano=l(),Cu=a("li"),BK=a("strong"),Lno=o("lxmert"),Bno=o(" \u2014 "),nS=a("a"),xno=o("LxmertModel"),kno=o(" (LXMERT model)"),Rno=l(),Mu=a("li"),xK=a("strong"),Sno=o("m2m_100"),Pno=o(" \u2014 "),lS=a("a"),$no=o("M2M100Model"),Ino=o(" (M2M100 model)"),jno=l(),Eu=a("li"),kK=a("strong"),Dno=o("marian"),Nno=o(" \u2014 "),iS=a("a"),qno=o("MarianModel"),Ono=o(" (Marian model)"),Gno=l(),yu=a("li"),RK=a("strong"),Xno=o("maskformer"),Vno=o(" \u2014 "),dS=a("a"),zno=o("MaskFormerModel"),Wno=o(" (MaskFormer model)"),Qno=l(),wu=a("li"),SK=a("strong"),Hno=o("mbart"),Uno=o(" \u2014 "),cS=a("a"),Jno=o("MBartModel"),Yno=o(" (mBART model)"),Kno=l(),Au=a("li"),PK=a("strong"),Zno=o("megatron-bert"),elo=o(" \u2014 "),mS=a("a"),olo=o("MegatronBertModel"),rlo=o(" (MegatronBert model)"),tlo=l(),Lu=a("li"),$K=a("strong"),alo=o("mobilebert"),slo=o(" \u2014 "),fS=a("a"),nlo=o("MobileBertModel"),llo=o(" (MobileBERT model)"),ilo=l(),Bu=a("li"),IK=a("strong"),dlo=o("mpnet"),clo=o(" \u2014 "),gS=a("a"),mlo=o("MPNetModel"),flo=o(" (MPNet model)"),glo=l(),xu=a("li"),jK=a("strong"),hlo=o("mt5"),ulo=o(" \u2014 "),hS=a("a"),plo=o("MT5Model"),_lo=o(" (mT5 model)"),blo=l(),ku=a("li"),DK=a("strong"),vlo=o("nystromformer"),Tlo=o(" \u2014 "),uS=a("a"),Flo=o("NystromformerModel"),Clo=o(" (Nystromformer model)"),Mlo=l(),Ru=a("li"),NK=a("strong"),Elo=o("openai-gpt"),ylo=o(" \u2014 "),pS=a("a"),wlo=o("OpenAIGPTModel"),Alo=o(" (OpenAI GPT model)"),Llo=l(),Su=a("li"),qK=a("strong"),Blo=o("pegasus"),xlo=o(" \u2014 "),_S=a("a"),klo=o("PegasusModel"),Rlo=o(" (Pegasus model)"),Slo=l(),Pu=a("li"),OK=a("strong"),Plo=o("perceiver"),$lo=o(" \u2014 "),bS=a("a"),Ilo=o("PerceiverModel"),jlo=o(" (Perceiver model)"),Dlo=l(),$u=a("li"),GK=a("strong"),Nlo=o("plbart"),qlo=o(" \u2014 "),vS=a("a"),Olo=o("PLBartModel"),Glo=o(" (PLBart model)"),Xlo=l(),Iu=a("li"),XK=a("strong"),Vlo=o("poolformer"),zlo=o(" \u2014 "),TS=a("a"),Wlo=o("PoolFormerModel"),Qlo=o(" (PoolFormer model)"),Hlo=l(),ju=a("li"),VK=a("strong"),Ulo=o("prophetnet"),Jlo=o(" \u2014 "),FS=a("a"),Ylo=o("ProphetNetModel"),Klo=o(" (ProphetNet model)"),Zlo=l(),Du=a("li"),zK=a("strong"),eio=o("qdqbert"),oio=o(" \u2014 "),CS=a("a"),rio=o("QDQBertModel"),tio=o(" (QDQBert model)"),aio=l(),Nu=a("li"),WK=a("strong"),sio=o("reformer"),nio=o(" \u2014 "),MS=a("a"),lio=o("ReformerModel"),iio=o(" (Reformer model)"),dio=l(),qu=a("li"),QK=a("strong"),cio=o("rembert"),mio=o(" \u2014 "),ES=a("a"),fio=o("RemBertModel"),gio=o(" (RemBERT model)"),hio=l(),Ou=a("li"),HK=a("strong"),uio=o("retribert"),pio=o(" \u2014 "),yS=a("a"),_io=o("RetriBertModel"),bio=o(" (RetriBERT model)"),vio=l(),Gu=a("li"),UK=a("strong"),Tio=o("roberta"),Fio=o(" \u2014 "),wS=a("a"),Cio=o("RobertaModel"),Mio=o(" (RoBERTa model)"),Eio=l(),Xu=a("li"),JK=a("strong"),yio=o("roformer"),wio=o(" \u2014 "),AS=a("a"),Aio=o("RoFormerModel"),Lio=o(" (RoFormer model)"),Bio=l(),Vu=a("li"),YK=a("strong"),xio=o("segformer"),kio=o(" \u2014 "),LS=a("a"),Rio=o("SegformerModel"),Sio=o(" (SegFormer model)"),Pio=l(),zu=a("li"),KK=a("strong"),$io=o("sew"),Iio=o(" \u2014 "),BS=a("a"),jio=o("SEWModel"),Dio=o(" (SEW model)"),Nio=l(),Wu=a("li"),ZK=a("strong"),qio=o("sew-d"),Oio=o(" \u2014 "),xS=a("a"),Gio=o("SEWDModel"),Xio=o(" (SEW-D model)"),Vio=l(),Qu=a("li"),eZ=a("strong"),zio=o("speech_to_text"),Wio=o(" \u2014 "),kS=a("a"),Qio=o("Speech2TextModel"),Hio=o(" (Speech2Text model)"),Uio=l(),Hu=a("li"),oZ=a("strong"),Jio=o("splinter"),Yio=o(" \u2014 "),RS=a("a"),Kio=o("SplinterModel"),Zio=o(" (Splinter model)"),edo=l(),Uu=a("li"),rZ=a("strong"),odo=o("squeezebert"),rdo=o(" \u2014 "),SS=a("a"),tdo=o("SqueezeBertModel"),ado=o(" (SqueezeBERT model)"),sdo=l(),Ju=a("li"),tZ=a("strong"),ndo=o("swin"),ldo=o(" \u2014 "),PS=a("a"),ido=o("SwinModel"),ddo=o(" (Swin model)"),cdo=l(),Yu=a("li"),aZ=a("strong"),mdo=o("t5"),fdo=o(" \u2014 "),$S=a("a"),gdo=o("T5Model"),hdo=o(" (T5 model)"),udo=l(),Ku=a("li"),sZ=a("strong"),pdo=o("tapas"),_do=o(" \u2014 "),IS=a("a"),bdo=o("TapasModel"),vdo=o(" (TAPAS model)"),Tdo=l(),Zu=a("li"),nZ=a("strong"),Fdo=o("transfo-xl"),Cdo=o(" \u2014 "),jS=a("a"),Mdo=o("TransfoXLModel"),Edo=o(" (Transformer-XL model)"),ydo=l(),ep=a("li"),lZ=a("strong"),wdo=o("unispeech"),Ado=o(" \u2014 "),DS=a("a"),Ldo=o("UniSpeechModel"),Bdo=o(" (UniSpeech model)"),xdo=l(),op=a("li"),iZ=a("strong"),kdo=o("unispeech-sat"),Rdo=o(" \u2014 "),NS=a("a"),Sdo=o("UniSpeechSatModel"),Pdo=o(" (UniSpeechSat model)"),$do=l(),rp=a("li"),dZ=a("strong"),Ido=o("vilt"),jdo=o(" \u2014 "),qS=a("a"),Ddo=o("ViltModel"),Ndo=o(" (ViLT model)"),qdo=l(),tp=a("li"),cZ=a("strong"),Odo=o("vision-text-dual-encoder"),Gdo=o(" \u2014 "),OS=a("a"),Xdo=o("VisionTextDualEncoderModel"),Vdo=o(" (VisionTextDualEncoder model)"),zdo=l(),ap=a("li"),mZ=a("strong"),Wdo=o("visual_bert"),Qdo=o(" \u2014 "),GS=a("a"),Hdo=o("VisualBertModel"),Udo=o(" (VisualBert model)"),Jdo=l(),sp=a("li"),fZ=a("strong"),Ydo=o("vit"),Kdo=o(" \u2014 "),XS=a("a"),Zdo=o("ViTModel"),eco=o(" (ViT model)"),oco=l(),np=a("li"),gZ=a("strong"),rco=o("vit_mae"),tco=o(" \u2014 "),VS=a("a"),aco=o("ViTMAEModel"),sco=o(" (ViTMAE model)"),nco=l(),lp=a("li"),hZ=a("strong"),lco=o("wav2vec2"),ico=o(" \u2014 "),zS=a("a"),dco=o("Wav2Vec2Model"),cco=o(" (Wav2Vec2 model)"),mco=l(),ip=a("li"),uZ=a("strong"),fco=o("wavlm"),gco=o(" \u2014 "),WS=a("a"),hco=o("WavLMModel"),uco=o(" (WavLM model)"),pco=l(),dp=a("li"),pZ=a("strong"),_co=o("xglm"),bco=o(" \u2014 "),QS=a("a"),vco=o("XGLMModel"),Tco=o(" (XGLM model)"),Fco=l(),cp=a("li"),_Z=a("strong"),Cco=o("xlm"),Mco=o(" \u2014 "),HS=a("a"),Eco=o("XLMModel"),yco=o(" (XLM model)"),wco=l(),mp=a("li"),bZ=a("strong"),Aco=o("xlm-prophetnet"),Lco=o(" \u2014 "),US=a("a"),Bco=o("XLMProphetNetModel"),xco=o(" (XLMProphetNet model)"),kco=l(),fp=a("li"),vZ=a("strong"),Rco=o("xlm-roberta"),Sco=o(" \u2014 "),JS=a("a"),Pco=o("XLMRobertaModel"),$co=o(" (XLM-RoBERTa model)"),Ico=l(),gp=a("li"),TZ=a("strong"),jco=o("xlm-roberta-xl"),Dco=o(" \u2014 "),YS=a("a"),Nco=o("XLMRobertaXLModel"),qco=o(" (XLM-RoBERTa-XL model)"),Oco=l(),hp=a("li"),FZ=a("strong"),Gco=o("xlnet"),Xco=o(" \u2014 "),KS=a("a"),Vco=o("XLNetModel"),zco=o(" (XLNet model)"),Wco=l(),up=a("li"),CZ=a("strong"),Qco=o("yoso"),Hco=o(" \u2014 "),ZS=a("a"),Uco=o("YosoModel"),Jco=o(" (YOSO model)"),Yco=l(),pp=a("p"),Kco=o("The model is set in evaluation mode by default using "),MZ=a("code"),Zco=o("model.eval()"),emo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EZ=a("code"),omo=o("model.train()"),rmo=l(),yZ=a("p"),tmo=o("Examples:"),amo=l(),m(Sy.$$.fragment),Fxe=l(),ed=a("h2"),_p=a("a"),wZ=a("span"),m(Py.$$.fragment),smo=l(),AZ=a("span"),nmo=o("AutoModelForPreTraining"),Cxe=l(),Yo=a("div"),m($y.$$.fragment),lmo=l(),od=a("p"),imo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LZ=a("code"),dmo=o("from_pretrained()"),cmo=o("class method or the "),BZ=a("code"),mmo=o("from_config()"),fmo=o(`class
method.`),gmo=l(),Iy=a("p"),hmo=o("This class cannot be instantiated directly using "),xZ=a("code"),umo=o("__init__()"),pmo=o(" (throws an error)."),_mo=l(),zr=a("div"),m(jy.$$.fragment),bmo=l(),kZ=a("p"),vmo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tmo=l(),rd=a("p"),Fmo=o(`Note:
Loading a model from its configuration file does `),RZ=a("strong"),Cmo=o("not"),Mmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("code"),Emo=o("from_pretrained()"),ymo=o("to load the model weights."),wmo=l(),PZ=a("p"),Amo=o("Examples:"),Lmo=l(),m(Dy.$$.fragment),Bmo=l(),De=a("div"),m(Ny.$$.fragment),xmo=l(),$Z=a("p"),kmo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rmo=l(),za=a("p"),Smo=o("The model class to instantiate is selected based on the "),IZ=a("code"),Pmo=o("model_type"),$mo=o(` property of the config object (either
passed as an argument or loaded from `),jZ=a("code"),Imo=o("pretrained_model_name_or_path"),jmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DZ=a("code"),Dmo=o("pretrained_model_name_or_path"),Nmo=o(":"),qmo=l(),k=a("ul"),bp=a("li"),NZ=a("strong"),Omo=o("albert"),Gmo=o(" \u2014 "),eP=a("a"),Xmo=o("AlbertForPreTraining"),Vmo=o(" (ALBERT model)"),zmo=l(),vp=a("li"),qZ=a("strong"),Wmo=o("bart"),Qmo=o(" \u2014 "),oP=a("a"),Hmo=o("BartForConditionalGeneration"),Umo=o(" (BART model)"),Jmo=l(),Tp=a("li"),OZ=a("strong"),Ymo=o("bert"),Kmo=o(" \u2014 "),rP=a("a"),Zmo=o("BertForPreTraining"),efo=o(" (BERT model)"),ofo=l(),Fp=a("li"),GZ=a("strong"),rfo=o("big_bird"),tfo=o(" \u2014 "),tP=a("a"),afo=o("BigBirdForPreTraining"),sfo=o(" (BigBird model)"),nfo=l(),Cp=a("li"),XZ=a("strong"),lfo=o("camembert"),ifo=o(" \u2014 "),aP=a("a"),dfo=o("CamembertForMaskedLM"),cfo=o(" (CamemBERT model)"),mfo=l(),Mp=a("li"),VZ=a("strong"),ffo=o("ctrl"),gfo=o(" \u2014 "),sP=a("a"),hfo=o("CTRLLMHeadModel"),ufo=o(" (CTRL model)"),pfo=l(),Ep=a("li"),zZ=a("strong"),_fo=o("data2vec-text"),bfo=o(" \u2014 "),nP=a("a"),vfo=o("Data2VecTextForMaskedLM"),Tfo=o(" (Data2VecText model)"),Ffo=l(),yp=a("li"),WZ=a("strong"),Cfo=o("deberta"),Mfo=o(" \u2014 "),lP=a("a"),Efo=o("DebertaForMaskedLM"),yfo=o(" (DeBERTa model)"),wfo=l(),wp=a("li"),QZ=a("strong"),Afo=o("deberta-v2"),Lfo=o(" \u2014 "),iP=a("a"),Bfo=o("DebertaV2ForMaskedLM"),xfo=o(" (DeBERTa-v2 model)"),kfo=l(),Ap=a("li"),HZ=a("strong"),Rfo=o("distilbert"),Sfo=o(" \u2014 "),dP=a("a"),Pfo=o("DistilBertForMaskedLM"),$fo=o(" (DistilBERT model)"),Ifo=l(),Lp=a("li"),UZ=a("strong"),jfo=o("electra"),Dfo=o(" \u2014 "),cP=a("a"),Nfo=o("ElectraForPreTraining"),qfo=o(" (ELECTRA model)"),Ofo=l(),Bp=a("li"),JZ=a("strong"),Gfo=o("flaubert"),Xfo=o(" \u2014 "),mP=a("a"),Vfo=o("FlaubertWithLMHeadModel"),zfo=o(" (FlauBERT model)"),Wfo=l(),xp=a("li"),YZ=a("strong"),Qfo=o("fnet"),Hfo=o(" \u2014 "),fP=a("a"),Ufo=o("FNetForPreTraining"),Jfo=o(" (FNet model)"),Yfo=l(),kp=a("li"),KZ=a("strong"),Kfo=o("fsmt"),Zfo=o(" \u2014 "),gP=a("a"),ego=o("FSMTForConditionalGeneration"),ogo=o(" (FairSeq Machine-Translation model)"),rgo=l(),Rp=a("li"),ZZ=a("strong"),tgo=o("funnel"),ago=o(" \u2014 "),hP=a("a"),sgo=o("FunnelForPreTraining"),ngo=o(" (Funnel Transformer model)"),lgo=l(),Sp=a("li"),eee=a("strong"),igo=o("gpt2"),dgo=o(" \u2014 "),uP=a("a"),cgo=o("GPT2LMHeadModel"),mgo=o(" (OpenAI GPT-2 model)"),fgo=l(),Pp=a("li"),oee=a("strong"),ggo=o("ibert"),hgo=o(" \u2014 "),pP=a("a"),ugo=o("IBertForMaskedLM"),pgo=o(" (I-BERT model)"),_go=l(),$p=a("li"),ree=a("strong"),bgo=o("layoutlm"),vgo=o(" \u2014 "),_P=a("a"),Tgo=o("LayoutLMForMaskedLM"),Fgo=o(" (LayoutLM model)"),Cgo=l(),Ip=a("li"),tee=a("strong"),Mgo=o("longformer"),Ego=o(" \u2014 "),bP=a("a"),ygo=o("LongformerForMaskedLM"),wgo=o(" (Longformer model)"),Ago=l(),jp=a("li"),aee=a("strong"),Lgo=o("lxmert"),Bgo=o(" \u2014 "),vP=a("a"),xgo=o("LxmertForPreTraining"),kgo=o(" (LXMERT model)"),Rgo=l(),Dp=a("li"),see=a("strong"),Sgo=o("megatron-bert"),Pgo=o(" \u2014 "),TP=a("a"),$go=o("MegatronBertForPreTraining"),Igo=o(" (MegatronBert model)"),jgo=l(),Np=a("li"),nee=a("strong"),Dgo=o("mobilebert"),Ngo=o(" \u2014 "),FP=a("a"),qgo=o("MobileBertForPreTraining"),Ogo=o(" (MobileBERT model)"),Ggo=l(),qp=a("li"),lee=a("strong"),Xgo=o("mpnet"),Vgo=o(" \u2014 "),CP=a("a"),zgo=o("MPNetForMaskedLM"),Wgo=o(" (MPNet model)"),Qgo=l(),Op=a("li"),iee=a("strong"),Hgo=o("openai-gpt"),Ugo=o(" \u2014 "),MP=a("a"),Jgo=o("OpenAIGPTLMHeadModel"),Ygo=o(" (OpenAI GPT model)"),Kgo=l(),Gp=a("li"),dee=a("strong"),Zgo=o("retribert"),eho=o(" \u2014 "),EP=a("a"),oho=o("RetriBertModel"),rho=o(" (RetriBERT model)"),tho=l(),Xp=a("li"),cee=a("strong"),aho=o("roberta"),sho=o(" \u2014 "),yP=a("a"),nho=o("RobertaForMaskedLM"),lho=o(" (RoBERTa model)"),iho=l(),Vp=a("li"),mee=a("strong"),dho=o("squeezebert"),cho=o(" \u2014 "),wP=a("a"),mho=o("SqueezeBertForMaskedLM"),fho=o(" (SqueezeBERT model)"),gho=l(),zp=a("li"),fee=a("strong"),hho=o("t5"),uho=o(" \u2014 "),AP=a("a"),pho=o("T5ForConditionalGeneration"),_ho=o(" (T5 model)"),bho=l(),Wp=a("li"),gee=a("strong"),vho=o("tapas"),Tho=o(" \u2014 "),LP=a("a"),Fho=o("TapasForMaskedLM"),Cho=o(" (TAPAS model)"),Mho=l(),Qp=a("li"),hee=a("strong"),Eho=o("transfo-xl"),yho=o(" \u2014 "),BP=a("a"),who=o("TransfoXLLMHeadModel"),Aho=o(" (Transformer-XL model)"),Lho=l(),Hp=a("li"),uee=a("strong"),Bho=o("unispeech"),xho=o(" \u2014 "),xP=a("a"),kho=o("UniSpeechForPreTraining"),Rho=o(" (UniSpeech model)"),Sho=l(),Up=a("li"),pee=a("strong"),Pho=o("unispeech-sat"),$ho=o(" \u2014 "),kP=a("a"),Iho=o("UniSpeechSatForPreTraining"),jho=o(" (UniSpeechSat model)"),Dho=l(),Jp=a("li"),_ee=a("strong"),Nho=o("visual_bert"),qho=o(" \u2014 "),RP=a("a"),Oho=o("VisualBertForPreTraining"),Gho=o(" (VisualBert model)"),Xho=l(),Yp=a("li"),bee=a("strong"),Vho=o("vit_mae"),zho=o(" \u2014 "),SP=a("a"),Who=o("ViTMAEForPreTraining"),Qho=o(" (ViTMAE model)"),Hho=l(),Kp=a("li"),vee=a("strong"),Uho=o("wav2vec2"),Jho=o(" \u2014 "),PP=a("a"),Yho=o("Wav2Vec2ForPreTraining"),Kho=o(" (Wav2Vec2 model)"),Zho=l(),Zp=a("li"),Tee=a("strong"),euo=o("xlm"),ouo=o(" \u2014 "),$P=a("a"),ruo=o("XLMWithLMHeadModel"),tuo=o(" (XLM model)"),auo=l(),e_=a("li"),Fee=a("strong"),suo=o("xlm-roberta"),nuo=o(" \u2014 "),IP=a("a"),luo=o("XLMRobertaForMaskedLM"),iuo=o(" (XLM-RoBERTa model)"),duo=l(),o_=a("li"),Cee=a("strong"),cuo=o("xlm-roberta-xl"),muo=o(" \u2014 "),jP=a("a"),fuo=o("XLMRobertaXLForMaskedLM"),guo=o(" (XLM-RoBERTa-XL model)"),huo=l(),r_=a("li"),Mee=a("strong"),uuo=o("xlnet"),puo=o(" \u2014 "),DP=a("a"),_uo=o("XLNetLMHeadModel"),buo=o(" (XLNet model)"),vuo=l(),t_=a("p"),Tuo=o("The model is set in evaluation mode by default using "),Eee=a("code"),Fuo=o("model.eval()"),Cuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yee=a("code"),Muo=o("model.train()"),Euo=l(),wee=a("p"),yuo=o("Examples:"),wuo=l(),m(qy.$$.fragment),Mxe=l(),td=a("h2"),a_=a("a"),Aee=a("span"),m(Oy.$$.fragment),Auo=l(),Lee=a("span"),Luo=o("AutoModelForCausalLM"),Exe=l(),Ko=a("div"),m(Gy.$$.fragment),Buo=l(),ad=a("p"),xuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bee=a("code"),kuo=o("from_pretrained()"),Ruo=o("class method or the "),xee=a("code"),Suo=o("from_config()"),Puo=o(`class
method.`),$uo=l(),Xy=a("p"),Iuo=o("This class cannot be instantiated directly using "),kee=a("code"),juo=o("__init__()"),Duo=o(" (throws an error)."),Nuo=l(),Wr=a("div"),m(Vy.$$.fragment),quo=l(),Ree=a("p"),Ouo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Guo=l(),sd=a("p"),Xuo=o(`Note:
Loading a model from its configuration file does `),See=a("strong"),Vuo=o("not"),zuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=a("code"),Wuo=o("from_pretrained()"),Quo=o("to load the model weights."),Huo=l(),$ee=a("p"),Uuo=o("Examples:"),Juo=l(),m(zy.$$.fragment),Yuo=l(),Ne=a("div"),m(Wy.$$.fragment),Kuo=l(),Iee=a("p"),Zuo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),epo=l(),Wa=a("p"),opo=o("The model class to instantiate is selected based on the "),jee=a("code"),rpo=o("model_type"),tpo=o(` property of the config object (either
passed as an argument or loaded from `),Dee=a("code"),apo=o("pretrained_model_name_or_path"),spo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nee=a("code"),npo=o("pretrained_model_name_or_path"),lpo=o(":"),ipo=l(),$=a("ul"),s_=a("li"),qee=a("strong"),dpo=o("bart"),cpo=o(" \u2014 "),NP=a("a"),mpo=o("BartForCausalLM"),fpo=o(" (BART model)"),gpo=l(),n_=a("li"),Oee=a("strong"),hpo=o("bert"),upo=o(" \u2014 "),qP=a("a"),ppo=o("BertLMHeadModel"),_po=o(" (BERT model)"),bpo=l(),l_=a("li"),Gee=a("strong"),vpo=o("bert-generation"),Tpo=o(" \u2014 "),OP=a("a"),Fpo=o("BertGenerationDecoder"),Cpo=o(" (Bert Generation model)"),Mpo=l(),i_=a("li"),Xee=a("strong"),Epo=o("big_bird"),ypo=o(" \u2014 "),GP=a("a"),wpo=o("BigBirdForCausalLM"),Apo=o(" (BigBird model)"),Lpo=l(),d_=a("li"),Vee=a("strong"),Bpo=o("bigbird_pegasus"),xpo=o(" \u2014 "),XP=a("a"),kpo=o("BigBirdPegasusForCausalLM"),Rpo=o(" (BigBirdPegasus model)"),Spo=l(),c_=a("li"),zee=a("strong"),Ppo=o("blenderbot"),$po=o(" \u2014 "),VP=a("a"),Ipo=o("BlenderbotForCausalLM"),jpo=o(" (Blenderbot model)"),Dpo=l(),m_=a("li"),Wee=a("strong"),Npo=o("blenderbot-small"),qpo=o(" \u2014 "),zP=a("a"),Opo=o("BlenderbotSmallForCausalLM"),Gpo=o(" (BlenderbotSmall model)"),Xpo=l(),f_=a("li"),Qee=a("strong"),Vpo=o("camembert"),zpo=o(" \u2014 "),WP=a("a"),Wpo=o("CamembertForCausalLM"),Qpo=o(" (CamemBERT model)"),Hpo=l(),g_=a("li"),Hee=a("strong"),Upo=o("ctrl"),Jpo=o(" \u2014 "),QP=a("a"),Ypo=o("CTRLLMHeadModel"),Kpo=o(" (CTRL model)"),Zpo=l(),h_=a("li"),Uee=a("strong"),e_o=o("data2vec-text"),o_o=o(" \u2014 "),HP=a("a"),r_o=o("Data2VecTextForCausalLM"),t_o=o(" (Data2VecText model)"),a_o=l(),u_=a("li"),Jee=a("strong"),s_o=o("electra"),n_o=o(" \u2014 "),UP=a("a"),l_o=o("ElectraForCausalLM"),i_o=o(" (ELECTRA model)"),d_o=l(),p_=a("li"),Yee=a("strong"),c_o=o("gpt2"),m_o=o(" \u2014 "),JP=a("a"),f_o=o("GPT2LMHeadModel"),g_o=o(" (OpenAI GPT-2 model)"),h_o=l(),__=a("li"),Kee=a("strong"),u_o=o("gpt_neo"),p_o=o(" \u2014 "),YP=a("a"),__o=o("GPTNeoForCausalLM"),b_o=o(" (GPT Neo model)"),v_o=l(),b_=a("li"),Zee=a("strong"),T_o=o("gptj"),F_o=o(" \u2014 "),KP=a("a"),C_o=o("GPTJForCausalLM"),M_o=o(" (GPT-J model)"),E_o=l(),v_=a("li"),eoe=a("strong"),y_o=o("marian"),w_o=o(" \u2014 "),ZP=a("a"),A_o=o("MarianForCausalLM"),L_o=o(" (Marian model)"),B_o=l(),T_=a("li"),ooe=a("strong"),x_o=o("mbart"),k_o=o(" \u2014 "),e$=a("a"),R_o=o("MBartForCausalLM"),S_o=o(" (mBART model)"),P_o=l(),F_=a("li"),roe=a("strong"),$_o=o("megatron-bert"),I_o=o(" \u2014 "),o$=a("a"),j_o=o("MegatronBertForCausalLM"),D_o=o(" (MegatronBert model)"),N_o=l(),C_=a("li"),toe=a("strong"),q_o=o("openai-gpt"),O_o=o(" \u2014 "),r$=a("a"),G_o=o("OpenAIGPTLMHeadModel"),X_o=o(" (OpenAI GPT model)"),V_o=l(),M_=a("li"),aoe=a("strong"),z_o=o("pegasus"),W_o=o(" \u2014 "),t$=a("a"),Q_o=o("PegasusForCausalLM"),H_o=o(" (Pegasus model)"),U_o=l(),E_=a("li"),soe=a("strong"),J_o=o("plbart"),Y_o=o(" \u2014 "),a$=a("a"),K_o=o("PLBartForCausalLM"),Z_o=o(" (PLBart model)"),ebo=l(),y_=a("li"),noe=a("strong"),obo=o("prophetnet"),rbo=o(" \u2014 "),s$=a("a"),tbo=o("ProphetNetForCausalLM"),abo=o(" (ProphetNet model)"),sbo=l(),w_=a("li"),loe=a("strong"),nbo=o("qdqbert"),lbo=o(" \u2014 "),n$=a("a"),ibo=o("QDQBertLMHeadModel"),dbo=o(" (QDQBert model)"),cbo=l(),A_=a("li"),ioe=a("strong"),mbo=o("reformer"),fbo=o(" \u2014 "),l$=a("a"),gbo=o("ReformerModelWithLMHead"),hbo=o(" (Reformer model)"),ubo=l(),L_=a("li"),doe=a("strong"),pbo=o("rembert"),_bo=o(" \u2014 "),i$=a("a"),bbo=o("RemBertForCausalLM"),vbo=o(" (RemBERT model)"),Tbo=l(),B_=a("li"),coe=a("strong"),Fbo=o("roberta"),Cbo=o(" \u2014 "),d$=a("a"),Mbo=o("RobertaForCausalLM"),Ebo=o(" (RoBERTa model)"),ybo=l(),x_=a("li"),moe=a("strong"),wbo=o("roformer"),Abo=o(" \u2014 "),c$=a("a"),Lbo=o("RoFormerForCausalLM"),Bbo=o(" (RoFormer model)"),xbo=l(),k_=a("li"),foe=a("strong"),kbo=o("speech_to_text_2"),Rbo=o(" \u2014 "),m$=a("a"),Sbo=o("Speech2Text2ForCausalLM"),Pbo=o(" (Speech2Text2 model)"),$bo=l(),R_=a("li"),goe=a("strong"),Ibo=o("transfo-xl"),jbo=o(" \u2014 "),f$=a("a"),Dbo=o("TransfoXLLMHeadModel"),Nbo=o(" (Transformer-XL model)"),qbo=l(),S_=a("li"),hoe=a("strong"),Obo=o("trocr"),Gbo=o(" \u2014 "),g$=a("a"),Xbo=o("TrOCRForCausalLM"),Vbo=o(" (TrOCR model)"),zbo=l(),P_=a("li"),uoe=a("strong"),Wbo=o("xglm"),Qbo=o(" \u2014 "),h$=a("a"),Hbo=o("XGLMForCausalLM"),Ubo=o(" (XGLM model)"),Jbo=l(),$_=a("li"),poe=a("strong"),Ybo=o("xlm"),Kbo=o(" \u2014 "),u$=a("a"),Zbo=o("XLMWithLMHeadModel"),e2o=o(" (XLM model)"),o2o=l(),I_=a("li"),_oe=a("strong"),r2o=o("xlm-prophetnet"),t2o=o(" \u2014 "),p$=a("a"),a2o=o("XLMProphetNetForCausalLM"),s2o=o(" (XLMProphetNet model)"),n2o=l(),j_=a("li"),boe=a("strong"),l2o=o("xlm-roberta"),i2o=o(" \u2014 "),_$=a("a"),d2o=o("XLMRobertaForCausalLM"),c2o=o(" (XLM-RoBERTa model)"),m2o=l(),D_=a("li"),voe=a("strong"),f2o=o("xlm-roberta-xl"),g2o=o(" \u2014 "),b$=a("a"),h2o=o("XLMRobertaXLForCausalLM"),u2o=o(" (XLM-RoBERTa-XL model)"),p2o=l(),N_=a("li"),Toe=a("strong"),_2o=o("xlnet"),b2o=o(" \u2014 "),v$=a("a"),v2o=o("XLNetLMHeadModel"),T2o=o(" (XLNet model)"),F2o=l(),q_=a("p"),C2o=o("The model is set in evaluation mode by default using "),Foe=a("code"),M2o=o("model.eval()"),E2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=a("code"),y2o=o("model.train()"),w2o=l(),Moe=a("p"),A2o=o("Examples:"),L2o=l(),m(Qy.$$.fragment),yxe=l(),nd=a("h2"),O_=a("a"),Eoe=a("span"),m(Hy.$$.fragment),B2o=l(),yoe=a("span"),x2o=o("AutoModelForMaskedLM"),wxe=l(),Zo=a("div"),m(Uy.$$.fragment),k2o=l(),ld=a("p"),R2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),woe=a("code"),S2o=o("from_pretrained()"),P2o=o("class method or the "),Aoe=a("code"),$2o=o("from_config()"),I2o=o(`class
method.`),j2o=l(),Jy=a("p"),D2o=o("This class cannot be instantiated directly using "),Loe=a("code"),N2o=o("__init__()"),q2o=o(" (throws an error)."),O2o=l(),Qr=a("div"),m(Yy.$$.fragment),G2o=l(),Boe=a("p"),X2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),V2o=l(),id=a("p"),z2o=o(`Note:
Loading a model from its configuration file does `),xoe=a("strong"),W2o=o("not"),Q2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=a("code"),H2o=o("from_pretrained()"),U2o=o("to load the model weights."),J2o=l(),Roe=a("p"),Y2o=o("Examples:"),K2o=l(),m(Ky.$$.fragment),Z2o=l(),qe=a("div"),m(Zy.$$.fragment),evo=l(),Soe=a("p"),ovo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rvo=l(),Qa=a("p"),tvo=o("The model class to instantiate is selected based on the "),Poe=a("code"),avo=o("model_type"),svo=o(` property of the config object (either
passed as an argument or loaded from `),$oe=a("code"),nvo=o("pretrained_model_name_or_path"),lvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=a("code"),ivo=o("pretrained_model_name_or_path"),dvo=o(":"),cvo=l(),I=a("ul"),G_=a("li"),joe=a("strong"),mvo=o("albert"),fvo=o(" \u2014 "),T$=a("a"),gvo=o("AlbertForMaskedLM"),hvo=o(" (ALBERT model)"),uvo=l(),X_=a("li"),Doe=a("strong"),pvo=o("bart"),_vo=o(" \u2014 "),F$=a("a"),bvo=o("BartForConditionalGeneration"),vvo=o(" (BART model)"),Tvo=l(),V_=a("li"),Noe=a("strong"),Fvo=o("bert"),Cvo=o(" \u2014 "),C$=a("a"),Mvo=o("BertForMaskedLM"),Evo=o(" (BERT model)"),yvo=l(),z_=a("li"),qoe=a("strong"),wvo=o("big_bird"),Avo=o(" \u2014 "),M$=a("a"),Lvo=o("BigBirdForMaskedLM"),Bvo=o(" (BigBird model)"),xvo=l(),W_=a("li"),Ooe=a("strong"),kvo=o("camembert"),Rvo=o(" \u2014 "),E$=a("a"),Svo=o("CamembertForMaskedLM"),Pvo=o(" (CamemBERT model)"),$vo=l(),Q_=a("li"),Goe=a("strong"),Ivo=o("convbert"),jvo=o(" \u2014 "),y$=a("a"),Dvo=o("ConvBertForMaskedLM"),Nvo=o(" (ConvBERT model)"),qvo=l(),H_=a("li"),Xoe=a("strong"),Ovo=o("data2vec-text"),Gvo=o(" \u2014 "),w$=a("a"),Xvo=o("Data2VecTextForMaskedLM"),Vvo=o(" (Data2VecText model)"),zvo=l(),U_=a("li"),Voe=a("strong"),Wvo=o("deberta"),Qvo=o(" \u2014 "),A$=a("a"),Hvo=o("DebertaForMaskedLM"),Uvo=o(" (DeBERTa model)"),Jvo=l(),J_=a("li"),zoe=a("strong"),Yvo=o("deberta-v2"),Kvo=o(" \u2014 "),L$=a("a"),Zvo=o("DebertaV2ForMaskedLM"),eTo=o(" (DeBERTa-v2 model)"),oTo=l(),Y_=a("li"),Woe=a("strong"),rTo=o("distilbert"),tTo=o(" \u2014 "),B$=a("a"),aTo=o("DistilBertForMaskedLM"),sTo=o(" (DistilBERT model)"),nTo=l(),K_=a("li"),Qoe=a("strong"),lTo=o("electra"),iTo=o(" \u2014 "),x$=a("a"),dTo=o("ElectraForMaskedLM"),cTo=o(" (ELECTRA model)"),mTo=l(),Z_=a("li"),Hoe=a("strong"),fTo=o("flaubert"),gTo=o(" \u2014 "),k$=a("a"),hTo=o("FlaubertWithLMHeadModel"),uTo=o(" (FlauBERT model)"),pTo=l(),eb=a("li"),Uoe=a("strong"),_To=o("fnet"),bTo=o(" \u2014 "),R$=a("a"),vTo=o("FNetForMaskedLM"),TTo=o(" (FNet model)"),FTo=l(),ob=a("li"),Joe=a("strong"),CTo=o("funnel"),MTo=o(" \u2014 "),S$=a("a"),ETo=o("FunnelForMaskedLM"),yTo=o(" (Funnel Transformer model)"),wTo=l(),rb=a("li"),Yoe=a("strong"),ATo=o("ibert"),LTo=o(" \u2014 "),P$=a("a"),BTo=o("IBertForMaskedLM"),xTo=o(" (I-BERT model)"),kTo=l(),tb=a("li"),Koe=a("strong"),RTo=o("layoutlm"),STo=o(" \u2014 "),$$=a("a"),PTo=o("LayoutLMForMaskedLM"),$To=o(" (LayoutLM model)"),ITo=l(),ab=a("li"),Zoe=a("strong"),jTo=o("longformer"),DTo=o(" \u2014 "),I$=a("a"),NTo=o("LongformerForMaskedLM"),qTo=o(" (Longformer model)"),OTo=l(),sb=a("li"),ere=a("strong"),GTo=o("mbart"),XTo=o(" \u2014 "),j$=a("a"),VTo=o("MBartForConditionalGeneration"),zTo=o(" (mBART model)"),WTo=l(),nb=a("li"),ore=a("strong"),QTo=o("megatron-bert"),HTo=o(" \u2014 "),D$=a("a"),UTo=o("MegatronBertForMaskedLM"),JTo=o(" (MegatronBert model)"),YTo=l(),lb=a("li"),rre=a("strong"),KTo=o("mobilebert"),ZTo=o(" \u2014 "),N$=a("a"),e1o=o("MobileBertForMaskedLM"),o1o=o(" (MobileBERT model)"),r1o=l(),ib=a("li"),tre=a("strong"),t1o=o("mpnet"),a1o=o(" \u2014 "),q$=a("a"),s1o=o("MPNetForMaskedLM"),n1o=o(" (MPNet model)"),l1o=l(),db=a("li"),are=a("strong"),i1o=o("nystromformer"),d1o=o(" \u2014 "),O$=a("a"),c1o=o("NystromformerForMaskedLM"),m1o=o(" (Nystromformer model)"),f1o=l(),cb=a("li"),sre=a("strong"),g1o=o("perceiver"),h1o=o(" \u2014 "),G$=a("a"),u1o=o("PerceiverForMaskedLM"),p1o=o(" (Perceiver model)"),_1o=l(),mb=a("li"),nre=a("strong"),b1o=o("qdqbert"),v1o=o(" \u2014 "),X$=a("a"),T1o=o("QDQBertForMaskedLM"),F1o=o(" (QDQBert model)"),C1o=l(),fb=a("li"),lre=a("strong"),M1o=o("reformer"),E1o=o(" \u2014 "),V$=a("a"),y1o=o("ReformerForMaskedLM"),w1o=o(" (Reformer model)"),A1o=l(),gb=a("li"),ire=a("strong"),L1o=o("rembert"),B1o=o(" \u2014 "),z$=a("a"),x1o=o("RemBertForMaskedLM"),k1o=o(" (RemBERT model)"),R1o=l(),hb=a("li"),dre=a("strong"),S1o=o("roberta"),P1o=o(" \u2014 "),W$=a("a"),$1o=o("RobertaForMaskedLM"),I1o=o(" (RoBERTa model)"),j1o=l(),ub=a("li"),cre=a("strong"),D1o=o("roformer"),N1o=o(" \u2014 "),Q$=a("a"),q1o=o("RoFormerForMaskedLM"),O1o=o(" (RoFormer model)"),G1o=l(),pb=a("li"),mre=a("strong"),X1o=o("squeezebert"),V1o=o(" \u2014 "),H$=a("a"),z1o=o("SqueezeBertForMaskedLM"),W1o=o(" (SqueezeBERT model)"),Q1o=l(),_b=a("li"),fre=a("strong"),H1o=o("tapas"),U1o=o(" \u2014 "),U$=a("a"),J1o=o("TapasForMaskedLM"),Y1o=o(" (TAPAS model)"),K1o=l(),bb=a("li"),gre=a("strong"),Z1o=o("wav2vec2"),eFo=o(" \u2014 "),hre=a("code"),oFo=o("Wav2Vec2ForMaskedLM"),rFo=o("(Wav2Vec2 model)"),tFo=l(),vb=a("li"),ure=a("strong"),aFo=o("xlm"),sFo=o(" \u2014 "),J$=a("a"),nFo=o("XLMWithLMHeadModel"),lFo=o(" (XLM model)"),iFo=l(),Tb=a("li"),pre=a("strong"),dFo=o("xlm-roberta"),cFo=o(" \u2014 "),Y$=a("a"),mFo=o("XLMRobertaForMaskedLM"),fFo=o(" (XLM-RoBERTa model)"),gFo=l(),Fb=a("li"),_re=a("strong"),hFo=o("xlm-roberta-xl"),uFo=o(" \u2014 "),K$=a("a"),pFo=o("XLMRobertaXLForMaskedLM"),_Fo=o(" (XLM-RoBERTa-XL model)"),bFo=l(),Cb=a("li"),bre=a("strong"),vFo=o("yoso"),TFo=o(" \u2014 "),Z$=a("a"),FFo=o("YosoForMaskedLM"),CFo=o(" (YOSO model)"),MFo=l(),Mb=a("p"),EFo=o("The model is set in evaluation mode by default using "),vre=a("code"),yFo=o("model.eval()"),wFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=a("code"),AFo=o("model.train()"),LFo=l(),Fre=a("p"),BFo=o("Examples:"),xFo=l(),m(ew.$$.fragment),Axe=l(),dd=a("h2"),Eb=a("a"),Cre=a("span"),m(ow.$$.fragment),kFo=l(),Mre=a("span"),RFo=o("AutoModelForSeq2SeqLM"),Lxe=l(),er=a("div"),m(rw.$$.fragment),SFo=l(),cd=a("p"),PFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ere=a("code"),$Fo=o("from_pretrained()"),IFo=o("class method or the "),yre=a("code"),jFo=o("from_config()"),DFo=o(`class
method.`),NFo=l(),tw=a("p"),qFo=o("This class cannot be instantiated directly using "),wre=a("code"),OFo=o("__init__()"),GFo=o(" (throws an error)."),XFo=l(),Hr=a("div"),m(aw.$$.fragment),VFo=l(),Are=a("p"),zFo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WFo=l(),md=a("p"),QFo=o(`Note:
Loading a model from its configuration file does `),Lre=a("strong"),HFo=o("not"),UFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=a("code"),JFo=o("from_pretrained()"),YFo=o("to load the model weights."),KFo=l(),xre=a("p"),ZFo=o("Examples:"),eCo=l(),m(sw.$$.fragment),oCo=l(),Oe=a("div"),m(nw.$$.fragment),rCo=l(),kre=a("p"),tCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aCo=l(),Ha=a("p"),sCo=o("The model class to instantiate is selected based on the "),Rre=a("code"),nCo=o("model_type"),lCo=o(` property of the config object (either
passed as an argument or loaded from `),Sre=a("code"),iCo=o("pretrained_model_name_or_path"),dCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=a("code"),cCo=o("pretrained_model_name_or_path"),mCo=o(":"),fCo=l(),se=a("ul"),yb=a("li"),$re=a("strong"),gCo=o("bart"),hCo=o(" \u2014 "),eI=a("a"),uCo=o("BartForConditionalGeneration"),pCo=o(" (BART model)"),_Co=l(),wb=a("li"),Ire=a("strong"),bCo=o("bigbird_pegasus"),vCo=o(" \u2014 "),oI=a("a"),TCo=o("BigBirdPegasusForConditionalGeneration"),FCo=o(" (BigBirdPegasus model)"),CCo=l(),Ab=a("li"),jre=a("strong"),MCo=o("blenderbot"),ECo=o(" \u2014 "),rI=a("a"),yCo=o("BlenderbotForConditionalGeneration"),wCo=o(" (Blenderbot model)"),ACo=l(),Lb=a("li"),Dre=a("strong"),LCo=o("blenderbot-small"),BCo=o(" \u2014 "),tI=a("a"),xCo=o("BlenderbotSmallForConditionalGeneration"),kCo=o(" (BlenderbotSmall model)"),RCo=l(),Bb=a("li"),Nre=a("strong"),SCo=o("encoder-decoder"),PCo=o(" \u2014 "),aI=a("a"),$Co=o("EncoderDecoderModel"),ICo=o(" (Encoder decoder model)"),jCo=l(),xb=a("li"),qre=a("strong"),DCo=o("fsmt"),NCo=o(" \u2014 "),sI=a("a"),qCo=o("FSMTForConditionalGeneration"),OCo=o(" (FairSeq Machine-Translation model)"),GCo=l(),kb=a("li"),Ore=a("strong"),XCo=o("led"),VCo=o(" \u2014 "),nI=a("a"),zCo=o("LEDForConditionalGeneration"),WCo=o(" (LED model)"),QCo=l(),Rb=a("li"),Gre=a("strong"),HCo=o("m2m_100"),UCo=o(" \u2014 "),lI=a("a"),JCo=o("M2M100ForConditionalGeneration"),YCo=o(" (M2M100 model)"),KCo=l(),Sb=a("li"),Xre=a("strong"),ZCo=o("marian"),eMo=o(" \u2014 "),iI=a("a"),oMo=o("MarianMTModel"),rMo=o(" (Marian model)"),tMo=l(),Pb=a("li"),Vre=a("strong"),aMo=o("mbart"),sMo=o(" \u2014 "),dI=a("a"),nMo=o("MBartForConditionalGeneration"),lMo=o(" (mBART model)"),iMo=l(),$b=a("li"),zre=a("strong"),dMo=o("mt5"),cMo=o(" \u2014 "),cI=a("a"),mMo=o("MT5ForConditionalGeneration"),fMo=o(" (mT5 model)"),gMo=l(),Ib=a("li"),Wre=a("strong"),hMo=o("pegasus"),uMo=o(" \u2014 "),mI=a("a"),pMo=o("PegasusForConditionalGeneration"),_Mo=o(" (Pegasus model)"),bMo=l(),jb=a("li"),Qre=a("strong"),vMo=o("plbart"),TMo=o(" \u2014 "),fI=a("a"),FMo=o("PLBartForConditionalGeneration"),CMo=o(" (PLBart model)"),MMo=l(),Db=a("li"),Hre=a("strong"),EMo=o("prophetnet"),yMo=o(" \u2014 "),gI=a("a"),wMo=o("ProphetNetForConditionalGeneration"),AMo=o(" (ProphetNet model)"),LMo=l(),Nb=a("li"),Ure=a("strong"),BMo=o("t5"),xMo=o(" \u2014 "),hI=a("a"),kMo=o("T5ForConditionalGeneration"),RMo=o(" (T5 model)"),SMo=l(),qb=a("li"),Jre=a("strong"),PMo=o("xlm-prophetnet"),$Mo=o(" \u2014 "),uI=a("a"),IMo=o("XLMProphetNetForConditionalGeneration"),jMo=o(" (XLMProphetNet model)"),DMo=l(),Ob=a("p"),NMo=o("The model is set in evaluation mode by default using "),Yre=a("code"),qMo=o("model.eval()"),OMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kre=a("code"),GMo=o("model.train()"),XMo=l(),Zre=a("p"),VMo=o("Examples:"),zMo=l(),m(lw.$$.fragment),Bxe=l(),fd=a("h2"),Gb=a("a"),ete=a("span"),m(iw.$$.fragment),WMo=l(),ote=a("span"),QMo=o("AutoModelForSequenceClassification"),xxe=l(),or=a("div"),m(dw.$$.fragment),HMo=l(),gd=a("p"),UMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rte=a("code"),JMo=o("from_pretrained()"),YMo=o("class method or the "),tte=a("code"),KMo=o("from_config()"),ZMo=o(`class
method.`),e4o=l(),cw=a("p"),o4o=o("This class cannot be instantiated directly using "),ate=a("code"),r4o=o("__init__()"),t4o=o(" (throws an error)."),a4o=l(),Ur=a("div"),m(mw.$$.fragment),s4o=l(),ste=a("p"),n4o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l4o=l(),hd=a("p"),i4o=o(`Note:
Loading a model from its configuration file does `),nte=a("strong"),d4o=o("not"),c4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=a("code"),m4o=o("from_pretrained()"),f4o=o("to load the model weights."),g4o=l(),ite=a("p"),h4o=o("Examples:"),u4o=l(),m(fw.$$.fragment),p4o=l(),Ge=a("div"),m(gw.$$.fragment),_4o=l(),dte=a("p"),b4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),v4o=l(),Ua=a("p"),T4o=o("The model class to instantiate is selected based on the "),cte=a("code"),F4o=o("model_type"),C4o=o(` property of the config object (either
passed as an argument or loaded from `),mte=a("code"),M4o=o("pretrained_model_name_or_path"),E4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fte=a("code"),y4o=o("pretrained_model_name_or_path"),w4o=o(":"),A4o=l(),A=a("ul"),Xb=a("li"),gte=a("strong"),L4o=o("albert"),B4o=o(" \u2014 "),pI=a("a"),x4o=o("AlbertForSequenceClassification"),k4o=o(" (ALBERT model)"),R4o=l(),Vb=a("li"),hte=a("strong"),S4o=o("bart"),P4o=o(" \u2014 "),_I=a("a"),$4o=o("BartForSequenceClassification"),I4o=o(" (BART model)"),j4o=l(),zb=a("li"),ute=a("strong"),D4o=o("bert"),N4o=o(" \u2014 "),bI=a("a"),q4o=o("BertForSequenceClassification"),O4o=o(" (BERT model)"),G4o=l(),Wb=a("li"),pte=a("strong"),X4o=o("big_bird"),V4o=o(" \u2014 "),vI=a("a"),z4o=o("BigBirdForSequenceClassification"),W4o=o(" (BigBird model)"),Q4o=l(),Qb=a("li"),_te=a("strong"),H4o=o("bigbird_pegasus"),U4o=o(" \u2014 "),TI=a("a"),J4o=o("BigBirdPegasusForSequenceClassification"),Y4o=o(" (BigBirdPegasus model)"),K4o=l(),Hb=a("li"),bte=a("strong"),Z4o=o("camembert"),eEo=o(" \u2014 "),FI=a("a"),oEo=o("CamembertForSequenceClassification"),rEo=o(" (CamemBERT model)"),tEo=l(),Ub=a("li"),vte=a("strong"),aEo=o("canine"),sEo=o(" \u2014 "),CI=a("a"),nEo=o("CanineForSequenceClassification"),lEo=o(" (Canine model)"),iEo=l(),Jb=a("li"),Tte=a("strong"),dEo=o("convbert"),cEo=o(" \u2014 "),MI=a("a"),mEo=o("ConvBertForSequenceClassification"),fEo=o(" (ConvBERT model)"),gEo=l(),Yb=a("li"),Fte=a("strong"),hEo=o("ctrl"),uEo=o(" \u2014 "),EI=a("a"),pEo=o("CTRLForSequenceClassification"),_Eo=o(" (CTRL model)"),bEo=l(),Kb=a("li"),Cte=a("strong"),vEo=o("data2vec-text"),TEo=o(" \u2014 "),yI=a("a"),FEo=o("Data2VecTextForSequenceClassification"),CEo=o(" (Data2VecText model)"),MEo=l(),Zb=a("li"),Mte=a("strong"),EEo=o("deberta"),yEo=o(" \u2014 "),wI=a("a"),wEo=o("DebertaForSequenceClassification"),AEo=o(" (DeBERTa model)"),LEo=l(),e2=a("li"),Ete=a("strong"),BEo=o("deberta-v2"),xEo=o(" \u2014 "),AI=a("a"),kEo=o("DebertaV2ForSequenceClassification"),REo=o(" (DeBERTa-v2 model)"),SEo=l(),o2=a("li"),yte=a("strong"),PEo=o("distilbert"),$Eo=o(" \u2014 "),LI=a("a"),IEo=o("DistilBertForSequenceClassification"),jEo=o(" (DistilBERT model)"),DEo=l(),r2=a("li"),wte=a("strong"),NEo=o("electra"),qEo=o(" \u2014 "),BI=a("a"),OEo=o("ElectraForSequenceClassification"),GEo=o(" (ELECTRA model)"),XEo=l(),t2=a("li"),Ate=a("strong"),VEo=o("flaubert"),zEo=o(" \u2014 "),xI=a("a"),WEo=o("FlaubertForSequenceClassification"),QEo=o(" (FlauBERT model)"),HEo=l(),a2=a("li"),Lte=a("strong"),UEo=o("fnet"),JEo=o(" \u2014 "),kI=a("a"),YEo=o("FNetForSequenceClassification"),KEo=o(" (FNet model)"),ZEo=l(),s2=a("li"),Bte=a("strong"),e3o=o("funnel"),o3o=o(" \u2014 "),RI=a("a"),r3o=o("FunnelForSequenceClassification"),t3o=o(" (Funnel Transformer model)"),a3o=l(),n2=a("li"),xte=a("strong"),s3o=o("gpt2"),n3o=o(" \u2014 "),SI=a("a"),l3o=o("GPT2ForSequenceClassification"),i3o=o(" (OpenAI GPT-2 model)"),d3o=l(),l2=a("li"),kte=a("strong"),c3o=o("gpt_neo"),m3o=o(" \u2014 "),PI=a("a"),f3o=o("GPTNeoForSequenceClassification"),g3o=o(" (GPT Neo model)"),h3o=l(),i2=a("li"),Rte=a("strong"),u3o=o("gptj"),p3o=o(" \u2014 "),$I=a("a"),_3o=o("GPTJForSequenceClassification"),b3o=o(" (GPT-J model)"),v3o=l(),d2=a("li"),Ste=a("strong"),T3o=o("ibert"),F3o=o(" \u2014 "),II=a("a"),C3o=o("IBertForSequenceClassification"),M3o=o(" (I-BERT model)"),E3o=l(),c2=a("li"),Pte=a("strong"),y3o=o("layoutlm"),w3o=o(" \u2014 "),jI=a("a"),A3o=o("LayoutLMForSequenceClassification"),L3o=o(" (LayoutLM model)"),B3o=l(),m2=a("li"),$te=a("strong"),x3o=o("layoutlmv2"),k3o=o(" \u2014 "),DI=a("a"),R3o=o("LayoutLMv2ForSequenceClassification"),S3o=o(" (LayoutLMv2 model)"),P3o=l(),f2=a("li"),Ite=a("strong"),$3o=o("led"),I3o=o(" \u2014 "),NI=a("a"),j3o=o("LEDForSequenceClassification"),D3o=o(" (LED model)"),N3o=l(),g2=a("li"),jte=a("strong"),q3o=o("longformer"),O3o=o(" \u2014 "),qI=a("a"),G3o=o("LongformerForSequenceClassification"),X3o=o(" (Longformer model)"),V3o=l(),h2=a("li"),Dte=a("strong"),z3o=o("mbart"),W3o=o(" \u2014 "),OI=a("a"),Q3o=o("MBartForSequenceClassification"),H3o=o(" (mBART model)"),U3o=l(),u2=a("li"),Nte=a("strong"),J3o=o("megatron-bert"),Y3o=o(" \u2014 "),GI=a("a"),K3o=o("MegatronBertForSequenceClassification"),Z3o=o(" (MegatronBert model)"),e5o=l(),p2=a("li"),qte=a("strong"),o5o=o("mobilebert"),r5o=o(" \u2014 "),XI=a("a"),t5o=o("MobileBertForSequenceClassification"),a5o=o(" (MobileBERT model)"),s5o=l(),_2=a("li"),Ote=a("strong"),n5o=o("mpnet"),l5o=o(" \u2014 "),VI=a("a"),i5o=o("MPNetForSequenceClassification"),d5o=o(" (MPNet model)"),c5o=l(),b2=a("li"),Gte=a("strong"),m5o=o("nystromformer"),f5o=o(" \u2014 "),zI=a("a"),g5o=o("NystromformerForSequenceClassification"),h5o=o(" (Nystromformer model)"),u5o=l(),v2=a("li"),Xte=a("strong"),p5o=o("openai-gpt"),_5o=o(" \u2014 "),WI=a("a"),b5o=o("OpenAIGPTForSequenceClassification"),v5o=o(" (OpenAI GPT model)"),T5o=l(),T2=a("li"),Vte=a("strong"),F5o=o("perceiver"),C5o=o(" \u2014 "),QI=a("a"),M5o=o("PerceiverForSequenceClassification"),E5o=o(" (Perceiver model)"),y5o=l(),F2=a("li"),zte=a("strong"),w5o=o("plbart"),A5o=o(" \u2014 "),HI=a("a"),L5o=o("PLBartForSequenceClassification"),B5o=o(" (PLBart model)"),x5o=l(),C2=a("li"),Wte=a("strong"),k5o=o("qdqbert"),R5o=o(" \u2014 "),UI=a("a"),S5o=o("QDQBertForSequenceClassification"),P5o=o(" (QDQBert model)"),$5o=l(),M2=a("li"),Qte=a("strong"),I5o=o("reformer"),j5o=o(" \u2014 "),JI=a("a"),D5o=o("ReformerForSequenceClassification"),N5o=o(" (Reformer model)"),q5o=l(),E2=a("li"),Hte=a("strong"),O5o=o("rembert"),G5o=o(" \u2014 "),YI=a("a"),X5o=o("RemBertForSequenceClassification"),V5o=o(" (RemBERT model)"),z5o=l(),y2=a("li"),Ute=a("strong"),W5o=o("roberta"),Q5o=o(" \u2014 "),KI=a("a"),H5o=o("RobertaForSequenceClassification"),U5o=o(" (RoBERTa model)"),J5o=l(),w2=a("li"),Jte=a("strong"),Y5o=o("roformer"),K5o=o(" \u2014 "),ZI=a("a"),Z5o=o("RoFormerForSequenceClassification"),eyo=o(" (RoFormer model)"),oyo=l(),A2=a("li"),Yte=a("strong"),ryo=o("squeezebert"),tyo=o(" \u2014 "),ej=a("a"),ayo=o("SqueezeBertForSequenceClassification"),syo=o(" (SqueezeBERT model)"),nyo=l(),L2=a("li"),Kte=a("strong"),lyo=o("tapas"),iyo=o(" \u2014 "),oj=a("a"),dyo=o("TapasForSequenceClassification"),cyo=o(" (TAPAS model)"),myo=l(),B2=a("li"),Zte=a("strong"),fyo=o("transfo-xl"),gyo=o(" \u2014 "),rj=a("a"),hyo=o("TransfoXLForSequenceClassification"),uyo=o(" (Transformer-XL model)"),pyo=l(),x2=a("li"),eae=a("strong"),_yo=o("xlm"),byo=o(" \u2014 "),tj=a("a"),vyo=o("XLMForSequenceClassification"),Tyo=o(" (XLM model)"),Fyo=l(),k2=a("li"),oae=a("strong"),Cyo=o("xlm-roberta"),Myo=o(" \u2014 "),aj=a("a"),Eyo=o("XLMRobertaForSequenceClassification"),yyo=o(" (XLM-RoBERTa model)"),wyo=l(),R2=a("li"),rae=a("strong"),Ayo=o("xlm-roberta-xl"),Lyo=o(" \u2014 "),sj=a("a"),Byo=o("XLMRobertaXLForSequenceClassification"),xyo=o(" (XLM-RoBERTa-XL model)"),kyo=l(),S2=a("li"),tae=a("strong"),Ryo=o("xlnet"),Syo=o(" \u2014 "),nj=a("a"),Pyo=o("XLNetForSequenceClassification"),$yo=o(" (XLNet model)"),Iyo=l(),P2=a("li"),aae=a("strong"),jyo=o("yoso"),Dyo=o(" \u2014 "),lj=a("a"),Nyo=o("YosoForSequenceClassification"),qyo=o(" (YOSO model)"),Oyo=l(),$2=a("p"),Gyo=o("The model is set in evaluation mode by default using "),sae=a("code"),Xyo=o("model.eval()"),Vyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nae=a("code"),zyo=o("model.train()"),Wyo=l(),lae=a("p"),Qyo=o("Examples:"),Hyo=l(),m(hw.$$.fragment),kxe=l(),ud=a("h2"),I2=a("a"),iae=a("span"),m(uw.$$.fragment),Uyo=l(),dae=a("span"),Jyo=o("AutoModelForMultipleChoice"),Rxe=l(),rr=a("div"),m(pw.$$.fragment),Yyo=l(),pd=a("p"),Kyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cae=a("code"),Zyo=o("from_pretrained()"),ewo=o("class method or the "),mae=a("code"),owo=o("from_config()"),rwo=o(`class
method.`),two=l(),_w=a("p"),awo=o("This class cannot be instantiated directly using "),fae=a("code"),swo=o("__init__()"),nwo=o(" (throws an error)."),lwo=l(),Jr=a("div"),m(bw.$$.fragment),iwo=l(),gae=a("p"),dwo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cwo=l(),_d=a("p"),mwo=o(`Note:
Loading a model from its configuration file does `),hae=a("strong"),fwo=o("not"),gwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=a("code"),hwo=o("from_pretrained()"),uwo=o("to load the model weights."),pwo=l(),pae=a("p"),_wo=o("Examples:"),bwo=l(),m(vw.$$.fragment),vwo=l(),Xe=a("div"),m(Tw.$$.fragment),Two=l(),_ae=a("p"),Fwo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cwo=l(),Ja=a("p"),Mwo=o("The model class to instantiate is selected based on the "),bae=a("code"),Ewo=o("model_type"),ywo=o(` property of the config object (either
passed as an argument or loaded from `),vae=a("code"),wwo=o("pretrained_model_name_or_path"),Awo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tae=a("code"),Lwo=o("pretrained_model_name_or_path"),Bwo=o(":"),xwo=l(),O=a("ul"),j2=a("li"),Fae=a("strong"),kwo=o("albert"),Rwo=o(" \u2014 "),ij=a("a"),Swo=o("AlbertForMultipleChoice"),Pwo=o(" (ALBERT model)"),$wo=l(),D2=a("li"),Cae=a("strong"),Iwo=o("bert"),jwo=o(" \u2014 "),dj=a("a"),Dwo=o("BertForMultipleChoice"),Nwo=o(" (BERT model)"),qwo=l(),N2=a("li"),Mae=a("strong"),Owo=o("big_bird"),Gwo=o(" \u2014 "),cj=a("a"),Xwo=o("BigBirdForMultipleChoice"),Vwo=o(" (BigBird model)"),zwo=l(),q2=a("li"),Eae=a("strong"),Wwo=o("camembert"),Qwo=o(" \u2014 "),mj=a("a"),Hwo=o("CamembertForMultipleChoice"),Uwo=o(" (CamemBERT model)"),Jwo=l(),O2=a("li"),yae=a("strong"),Ywo=o("canine"),Kwo=o(" \u2014 "),fj=a("a"),Zwo=o("CanineForMultipleChoice"),e6o=o(" (Canine model)"),o6o=l(),G2=a("li"),wae=a("strong"),r6o=o("convbert"),t6o=o(" \u2014 "),gj=a("a"),a6o=o("ConvBertForMultipleChoice"),s6o=o(" (ConvBERT model)"),n6o=l(),X2=a("li"),Aae=a("strong"),l6o=o("data2vec-text"),i6o=o(" \u2014 "),hj=a("a"),d6o=o("Data2VecTextForMultipleChoice"),c6o=o(" (Data2VecText model)"),m6o=l(),V2=a("li"),Lae=a("strong"),f6o=o("distilbert"),g6o=o(" \u2014 "),uj=a("a"),h6o=o("DistilBertForMultipleChoice"),u6o=o(" (DistilBERT model)"),p6o=l(),z2=a("li"),Bae=a("strong"),_6o=o("electra"),b6o=o(" \u2014 "),pj=a("a"),v6o=o("ElectraForMultipleChoice"),T6o=o(" (ELECTRA model)"),F6o=l(),W2=a("li"),xae=a("strong"),C6o=o("flaubert"),M6o=o(" \u2014 "),_j=a("a"),E6o=o("FlaubertForMultipleChoice"),y6o=o(" (FlauBERT model)"),w6o=l(),Q2=a("li"),kae=a("strong"),A6o=o("fnet"),L6o=o(" \u2014 "),bj=a("a"),B6o=o("FNetForMultipleChoice"),x6o=o(" (FNet model)"),k6o=l(),H2=a("li"),Rae=a("strong"),R6o=o("funnel"),S6o=o(" \u2014 "),vj=a("a"),P6o=o("FunnelForMultipleChoice"),$6o=o(" (Funnel Transformer model)"),I6o=l(),U2=a("li"),Sae=a("strong"),j6o=o("ibert"),D6o=o(" \u2014 "),Tj=a("a"),N6o=o("IBertForMultipleChoice"),q6o=o(" (I-BERT model)"),O6o=l(),J2=a("li"),Pae=a("strong"),G6o=o("longformer"),X6o=o(" \u2014 "),Fj=a("a"),V6o=o("LongformerForMultipleChoice"),z6o=o(" (Longformer model)"),W6o=l(),Y2=a("li"),$ae=a("strong"),Q6o=o("megatron-bert"),H6o=o(" \u2014 "),Cj=a("a"),U6o=o("MegatronBertForMultipleChoice"),J6o=o(" (MegatronBert model)"),Y6o=l(),K2=a("li"),Iae=a("strong"),K6o=o("mobilebert"),Z6o=o(" \u2014 "),Mj=a("a"),eAo=o("MobileBertForMultipleChoice"),oAo=o(" (MobileBERT model)"),rAo=l(),Z2=a("li"),jae=a("strong"),tAo=o("mpnet"),aAo=o(" \u2014 "),Ej=a("a"),sAo=o("MPNetForMultipleChoice"),nAo=o(" (MPNet model)"),lAo=l(),ev=a("li"),Dae=a("strong"),iAo=o("nystromformer"),dAo=o(" \u2014 "),yj=a("a"),cAo=o("NystromformerForMultipleChoice"),mAo=o(" (Nystromformer model)"),fAo=l(),ov=a("li"),Nae=a("strong"),gAo=o("qdqbert"),hAo=o(" \u2014 "),wj=a("a"),uAo=o("QDQBertForMultipleChoice"),pAo=o(" (QDQBert model)"),_Ao=l(),rv=a("li"),qae=a("strong"),bAo=o("rembert"),vAo=o(" \u2014 "),Aj=a("a"),TAo=o("RemBertForMultipleChoice"),FAo=o(" (RemBERT model)"),CAo=l(),tv=a("li"),Oae=a("strong"),MAo=o("roberta"),EAo=o(" \u2014 "),Lj=a("a"),yAo=o("RobertaForMultipleChoice"),wAo=o(" (RoBERTa model)"),AAo=l(),av=a("li"),Gae=a("strong"),LAo=o("roformer"),BAo=o(" \u2014 "),Bj=a("a"),xAo=o("RoFormerForMultipleChoice"),kAo=o(" (RoFormer model)"),RAo=l(),sv=a("li"),Xae=a("strong"),SAo=o("squeezebert"),PAo=o(" \u2014 "),xj=a("a"),$Ao=o("SqueezeBertForMultipleChoice"),IAo=o(" (SqueezeBERT model)"),jAo=l(),nv=a("li"),Vae=a("strong"),DAo=o("xlm"),NAo=o(" \u2014 "),kj=a("a"),qAo=o("XLMForMultipleChoice"),OAo=o(" (XLM model)"),GAo=l(),lv=a("li"),zae=a("strong"),XAo=o("xlm-roberta"),VAo=o(" \u2014 "),Rj=a("a"),zAo=o("XLMRobertaForMultipleChoice"),WAo=o(" (XLM-RoBERTa model)"),QAo=l(),iv=a("li"),Wae=a("strong"),HAo=o("xlm-roberta-xl"),UAo=o(" \u2014 "),Sj=a("a"),JAo=o("XLMRobertaXLForMultipleChoice"),YAo=o(" (XLM-RoBERTa-XL model)"),KAo=l(),dv=a("li"),Qae=a("strong"),ZAo=o("xlnet"),e0o=o(" \u2014 "),Pj=a("a"),o0o=o("XLNetForMultipleChoice"),r0o=o(" (XLNet model)"),t0o=l(),cv=a("li"),Hae=a("strong"),a0o=o("yoso"),s0o=o(" \u2014 "),$j=a("a"),n0o=o("YosoForMultipleChoice"),l0o=o(" (YOSO model)"),i0o=l(),mv=a("p"),d0o=o("The model is set in evaluation mode by default using "),Uae=a("code"),c0o=o("model.eval()"),m0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jae=a("code"),f0o=o("model.train()"),g0o=l(),Yae=a("p"),h0o=o("Examples:"),u0o=l(),m(Fw.$$.fragment),Sxe=l(),bd=a("h2"),fv=a("a"),Kae=a("span"),m(Cw.$$.fragment),p0o=l(),Zae=a("span"),_0o=o("AutoModelForNextSentencePrediction"),Pxe=l(),tr=a("div"),m(Mw.$$.fragment),b0o=l(),vd=a("p"),v0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ese=a("code"),T0o=o("from_pretrained()"),F0o=o("class method or the "),ose=a("code"),C0o=o("from_config()"),M0o=o(`class
method.`),E0o=l(),Ew=a("p"),y0o=o("This class cannot be instantiated directly using "),rse=a("code"),w0o=o("__init__()"),A0o=o(" (throws an error)."),L0o=l(),Yr=a("div"),m(yw.$$.fragment),B0o=l(),tse=a("p"),x0o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),k0o=l(),Td=a("p"),R0o=o(`Note:
Loading a model from its configuration file does `),ase=a("strong"),S0o=o("not"),P0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sse=a("code"),$0o=o("from_pretrained()"),I0o=o("to load the model weights."),j0o=l(),nse=a("p"),D0o=o("Examples:"),N0o=l(),m(ww.$$.fragment),q0o=l(),Ve=a("div"),m(Aw.$$.fragment),O0o=l(),lse=a("p"),G0o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),X0o=l(),Ya=a("p"),V0o=o("The model class to instantiate is selected based on the "),ise=a("code"),z0o=o("model_type"),W0o=o(` property of the config object (either
passed as an argument or loaded from `),dse=a("code"),Q0o=o("pretrained_model_name_or_path"),H0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cse=a("code"),U0o=o("pretrained_model_name_or_path"),J0o=o(":"),Y0o=l(),da=a("ul"),gv=a("li"),mse=a("strong"),K0o=o("bert"),Z0o=o(" \u2014 "),Ij=a("a"),eLo=o("BertForNextSentencePrediction"),oLo=o(" (BERT model)"),rLo=l(),hv=a("li"),fse=a("strong"),tLo=o("fnet"),aLo=o(" \u2014 "),jj=a("a"),sLo=o("FNetForNextSentencePrediction"),nLo=o(" (FNet model)"),lLo=l(),uv=a("li"),gse=a("strong"),iLo=o("megatron-bert"),dLo=o(" \u2014 "),Dj=a("a"),cLo=o("MegatronBertForNextSentencePrediction"),mLo=o(" (MegatronBert model)"),fLo=l(),pv=a("li"),hse=a("strong"),gLo=o("mobilebert"),hLo=o(" \u2014 "),Nj=a("a"),uLo=o("MobileBertForNextSentencePrediction"),pLo=o(" (MobileBERT model)"),_Lo=l(),_v=a("li"),use=a("strong"),bLo=o("qdqbert"),vLo=o(" \u2014 "),qj=a("a"),TLo=o("QDQBertForNextSentencePrediction"),FLo=o(" (QDQBert model)"),CLo=l(),bv=a("p"),MLo=o("The model is set in evaluation mode by default using "),pse=a("code"),ELo=o("model.eval()"),yLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=a("code"),wLo=o("model.train()"),ALo=l(),bse=a("p"),LLo=o("Examples:"),BLo=l(),m(Lw.$$.fragment),$xe=l(),Fd=a("h2"),vv=a("a"),vse=a("span"),m(Bw.$$.fragment),xLo=l(),Tse=a("span"),kLo=o("AutoModelForTokenClassification"),Ixe=l(),ar=a("div"),m(xw.$$.fragment),RLo=l(),Cd=a("p"),SLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fse=a("code"),PLo=o("from_pretrained()"),$Lo=o("class method or the "),Cse=a("code"),ILo=o("from_config()"),jLo=o(`class
method.`),DLo=l(),kw=a("p"),NLo=o("This class cannot be instantiated directly using "),Mse=a("code"),qLo=o("__init__()"),OLo=o(" (throws an error)."),GLo=l(),Kr=a("div"),m(Rw.$$.fragment),XLo=l(),Ese=a("p"),VLo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zLo=l(),Md=a("p"),WLo=o(`Note:
Loading a model from its configuration file does `),yse=a("strong"),QLo=o("not"),HLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=a("code"),ULo=o("from_pretrained()"),JLo=o("to load the model weights."),YLo=l(),Ase=a("p"),KLo=o("Examples:"),ZLo=l(),m(Sw.$$.fragment),e8o=l(),ze=a("div"),m(Pw.$$.fragment),o8o=l(),Lse=a("p"),r8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t8o=l(),Ka=a("p"),a8o=o("The model class to instantiate is selected based on the "),Bse=a("code"),s8o=o("model_type"),n8o=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),l8o=o("pretrained_model_name_or_path"),i8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=a("code"),d8o=o("pretrained_model_name_or_path"),c8o=o(":"),m8o=l(),N=a("ul"),Tv=a("li"),Rse=a("strong"),f8o=o("albert"),g8o=o(" \u2014 "),Oj=a("a"),h8o=o("AlbertForTokenClassification"),u8o=o(" (ALBERT model)"),p8o=l(),Fv=a("li"),Sse=a("strong"),_8o=o("bert"),b8o=o(" \u2014 "),Gj=a("a"),v8o=o("BertForTokenClassification"),T8o=o(" (BERT model)"),F8o=l(),Cv=a("li"),Pse=a("strong"),C8o=o("big_bird"),M8o=o(" \u2014 "),Xj=a("a"),E8o=o("BigBirdForTokenClassification"),y8o=o(" (BigBird model)"),w8o=l(),Mv=a("li"),$se=a("strong"),A8o=o("camembert"),L8o=o(" \u2014 "),Vj=a("a"),B8o=o("CamembertForTokenClassification"),x8o=o(" (CamemBERT model)"),k8o=l(),Ev=a("li"),Ise=a("strong"),R8o=o("canine"),S8o=o(" \u2014 "),zj=a("a"),P8o=o("CanineForTokenClassification"),$8o=o(" (Canine model)"),I8o=l(),yv=a("li"),jse=a("strong"),j8o=o("convbert"),D8o=o(" \u2014 "),Wj=a("a"),N8o=o("ConvBertForTokenClassification"),q8o=o(" (ConvBERT model)"),O8o=l(),wv=a("li"),Dse=a("strong"),G8o=o("data2vec-text"),X8o=o(" \u2014 "),Qj=a("a"),V8o=o("Data2VecTextForTokenClassification"),z8o=o(" (Data2VecText model)"),W8o=l(),Av=a("li"),Nse=a("strong"),Q8o=o("deberta"),H8o=o(" \u2014 "),Hj=a("a"),U8o=o("DebertaForTokenClassification"),J8o=o(" (DeBERTa model)"),Y8o=l(),Lv=a("li"),qse=a("strong"),K8o=o("deberta-v2"),Z8o=o(" \u2014 "),Uj=a("a"),e7o=o("DebertaV2ForTokenClassification"),o7o=o(" (DeBERTa-v2 model)"),r7o=l(),Bv=a("li"),Ose=a("strong"),t7o=o("distilbert"),a7o=o(" \u2014 "),Jj=a("a"),s7o=o("DistilBertForTokenClassification"),n7o=o(" (DistilBERT model)"),l7o=l(),xv=a("li"),Gse=a("strong"),i7o=o("electra"),d7o=o(" \u2014 "),Yj=a("a"),c7o=o("ElectraForTokenClassification"),m7o=o(" (ELECTRA model)"),f7o=l(),kv=a("li"),Xse=a("strong"),g7o=o("flaubert"),h7o=o(" \u2014 "),Kj=a("a"),u7o=o("FlaubertForTokenClassification"),p7o=o(" (FlauBERT model)"),_7o=l(),Rv=a("li"),Vse=a("strong"),b7o=o("fnet"),v7o=o(" \u2014 "),Zj=a("a"),T7o=o("FNetForTokenClassification"),F7o=o(" (FNet model)"),C7o=l(),Sv=a("li"),zse=a("strong"),M7o=o("funnel"),E7o=o(" \u2014 "),eD=a("a"),y7o=o("FunnelForTokenClassification"),w7o=o(" (Funnel Transformer model)"),A7o=l(),Pv=a("li"),Wse=a("strong"),L7o=o("gpt2"),B7o=o(" \u2014 "),oD=a("a"),x7o=o("GPT2ForTokenClassification"),k7o=o(" (OpenAI GPT-2 model)"),R7o=l(),$v=a("li"),Qse=a("strong"),S7o=o("ibert"),P7o=o(" \u2014 "),rD=a("a"),$7o=o("IBertForTokenClassification"),I7o=o(" (I-BERT model)"),j7o=l(),Iv=a("li"),Hse=a("strong"),D7o=o("layoutlm"),N7o=o(" \u2014 "),tD=a("a"),q7o=o("LayoutLMForTokenClassification"),O7o=o(" (LayoutLM model)"),G7o=l(),jv=a("li"),Use=a("strong"),X7o=o("layoutlmv2"),V7o=o(" \u2014 "),aD=a("a"),z7o=o("LayoutLMv2ForTokenClassification"),W7o=o(" (LayoutLMv2 model)"),Q7o=l(),Dv=a("li"),Jse=a("strong"),H7o=o("longformer"),U7o=o(" \u2014 "),sD=a("a"),J7o=o("LongformerForTokenClassification"),Y7o=o(" (Longformer model)"),K7o=l(),Nv=a("li"),Yse=a("strong"),Z7o=o("megatron-bert"),e9o=o(" \u2014 "),nD=a("a"),o9o=o("MegatronBertForTokenClassification"),r9o=o(" (MegatronBert model)"),t9o=l(),qv=a("li"),Kse=a("strong"),a9o=o("mobilebert"),s9o=o(" \u2014 "),lD=a("a"),n9o=o("MobileBertForTokenClassification"),l9o=o(" (MobileBERT model)"),i9o=l(),Ov=a("li"),Zse=a("strong"),d9o=o("mpnet"),c9o=o(" \u2014 "),iD=a("a"),m9o=o("MPNetForTokenClassification"),f9o=o(" (MPNet model)"),g9o=l(),Gv=a("li"),ene=a("strong"),h9o=o("nystromformer"),u9o=o(" \u2014 "),dD=a("a"),p9o=o("NystromformerForTokenClassification"),_9o=o(" (Nystromformer model)"),b9o=l(),Xv=a("li"),one=a("strong"),v9o=o("qdqbert"),T9o=o(" \u2014 "),cD=a("a"),F9o=o("QDQBertForTokenClassification"),C9o=o(" (QDQBert model)"),M9o=l(),Vv=a("li"),rne=a("strong"),E9o=o("rembert"),y9o=o(" \u2014 "),mD=a("a"),w9o=o("RemBertForTokenClassification"),A9o=o(" (RemBERT model)"),L9o=l(),zv=a("li"),tne=a("strong"),B9o=o("roberta"),x9o=o(" \u2014 "),fD=a("a"),k9o=o("RobertaForTokenClassification"),R9o=o(" (RoBERTa model)"),S9o=l(),Wv=a("li"),ane=a("strong"),P9o=o("roformer"),$9o=o(" \u2014 "),gD=a("a"),I9o=o("RoFormerForTokenClassification"),j9o=o(" (RoFormer model)"),D9o=l(),Qv=a("li"),sne=a("strong"),N9o=o("squeezebert"),q9o=o(" \u2014 "),hD=a("a"),O9o=o("SqueezeBertForTokenClassification"),G9o=o(" (SqueezeBERT model)"),X9o=l(),Hv=a("li"),nne=a("strong"),V9o=o("xlm"),z9o=o(" \u2014 "),uD=a("a"),W9o=o("XLMForTokenClassification"),Q9o=o(" (XLM model)"),H9o=l(),Uv=a("li"),lne=a("strong"),U9o=o("xlm-roberta"),J9o=o(" \u2014 "),pD=a("a"),Y9o=o("XLMRobertaForTokenClassification"),K9o=o(" (XLM-RoBERTa model)"),Z9o=l(),Jv=a("li"),ine=a("strong"),eBo=o("xlm-roberta-xl"),oBo=o(" \u2014 "),_D=a("a"),rBo=o("XLMRobertaXLForTokenClassification"),tBo=o(" (XLM-RoBERTa-XL model)"),aBo=l(),Yv=a("li"),dne=a("strong"),sBo=o("xlnet"),nBo=o(" \u2014 "),bD=a("a"),lBo=o("XLNetForTokenClassification"),iBo=o(" (XLNet model)"),dBo=l(),Kv=a("li"),cne=a("strong"),cBo=o("yoso"),mBo=o(" \u2014 "),vD=a("a"),fBo=o("YosoForTokenClassification"),gBo=o(" (YOSO model)"),hBo=l(),Zv=a("p"),uBo=o("The model is set in evaluation mode by default using "),mne=a("code"),pBo=o("model.eval()"),_Bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fne=a("code"),bBo=o("model.train()"),vBo=l(),gne=a("p"),TBo=o("Examples:"),FBo=l(),m($w.$$.fragment),jxe=l(),Ed=a("h2"),eT=a("a"),hne=a("span"),m(Iw.$$.fragment),CBo=l(),une=a("span"),MBo=o("AutoModelForQuestionAnswering"),Dxe=l(),sr=a("div"),m(jw.$$.fragment),EBo=l(),yd=a("p"),yBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pne=a("code"),wBo=o("from_pretrained()"),ABo=o("class method or the "),_ne=a("code"),LBo=o("from_config()"),BBo=o(`class
method.`),xBo=l(),Dw=a("p"),kBo=o("This class cannot be instantiated directly using "),bne=a("code"),RBo=o("__init__()"),SBo=o(" (throws an error)."),PBo=l(),Zr=a("div"),m(Nw.$$.fragment),$Bo=l(),vne=a("p"),IBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jBo=l(),wd=a("p"),DBo=o(`Note:
Loading a model from its configuration file does `),Tne=a("strong"),NBo=o("not"),qBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fne=a("code"),OBo=o("from_pretrained()"),GBo=o("to load the model weights."),XBo=l(),Cne=a("p"),VBo=o("Examples:"),zBo=l(),m(qw.$$.fragment),WBo=l(),We=a("div"),m(Ow.$$.fragment),QBo=l(),Mne=a("p"),HBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UBo=l(),Za=a("p"),JBo=o("The model class to instantiate is selected based on the "),Ene=a("code"),YBo=o("model_type"),KBo=o(` property of the config object (either
passed as an argument or loaded from `),yne=a("code"),ZBo=o("pretrained_model_name_or_path"),exo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wne=a("code"),oxo=o("pretrained_model_name_or_path"),rxo=o(":"),txo=l(),R=a("ul"),oT=a("li"),Ane=a("strong"),axo=o("albert"),sxo=o(" \u2014 "),TD=a("a"),nxo=o("AlbertForQuestionAnswering"),lxo=o(" (ALBERT model)"),ixo=l(),rT=a("li"),Lne=a("strong"),dxo=o("bart"),cxo=o(" \u2014 "),FD=a("a"),mxo=o("BartForQuestionAnswering"),fxo=o(" (BART model)"),gxo=l(),tT=a("li"),Bne=a("strong"),hxo=o("bert"),uxo=o(" \u2014 "),CD=a("a"),pxo=o("BertForQuestionAnswering"),_xo=o(" (BERT model)"),bxo=l(),aT=a("li"),xne=a("strong"),vxo=o("big_bird"),Txo=o(" \u2014 "),MD=a("a"),Fxo=o("BigBirdForQuestionAnswering"),Cxo=o(" (BigBird model)"),Mxo=l(),sT=a("li"),kne=a("strong"),Exo=o("bigbird_pegasus"),yxo=o(" \u2014 "),ED=a("a"),wxo=o("BigBirdPegasusForQuestionAnswering"),Axo=o(" (BigBirdPegasus model)"),Lxo=l(),nT=a("li"),Rne=a("strong"),Bxo=o("camembert"),xxo=o(" \u2014 "),yD=a("a"),kxo=o("CamembertForQuestionAnswering"),Rxo=o(" (CamemBERT model)"),Sxo=l(),lT=a("li"),Sne=a("strong"),Pxo=o("canine"),$xo=o(" \u2014 "),wD=a("a"),Ixo=o("CanineForQuestionAnswering"),jxo=o(" (Canine model)"),Dxo=l(),iT=a("li"),Pne=a("strong"),Nxo=o("convbert"),qxo=o(" \u2014 "),AD=a("a"),Oxo=o("ConvBertForQuestionAnswering"),Gxo=o(" (ConvBERT model)"),Xxo=l(),dT=a("li"),$ne=a("strong"),Vxo=o("data2vec-text"),zxo=o(" \u2014 "),LD=a("a"),Wxo=o("Data2VecTextForQuestionAnswering"),Qxo=o(" (Data2VecText model)"),Hxo=l(),cT=a("li"),Ine=a("strong"),Uxo=o("deberta"),Jxo=o(" \u2014 "),BD=a("a"),Yxo=o("DebertaForQuestionAnswering"),Kxo=o(" (DeBERTa model)"),Zxo=l(),mT=a("li"),jne=a("strong"),eko=o("deberta-v2"),oko=o(" \u2014 "),xD=a("a"),rko=o("DebertaV2ForQuestionAnswering"),tko=o(" (DeBERTa-v2 model)"),ako=l(),fT=a("li"),Dne=a("strong"),sko=o("distilbert"),nko=o(" \u2014 "),kD=a("a"),lko=o("DistilBertForQuestionAnswering"),iko=o(" (DistilBERT model)"),dko=l(),gT=a("li"),Nne=a("strong"),cko=o("electra"),mko=o(" \u2014 "),RD=a("a"),fko=o("ElectraForQuestionAnswering"),gko=o(" (ELECTRA model)"),hko=l(),hT=a("li"),qne=a("strong"),uko=o("flaubert"),pko=o(" \u2014 "),SD=a("a"),_ko=o("FlaubertForQuestionAnsweringSimple"),bko=o(" (FlauBERT model)"),vko=l(),uT=a("li"),One=a("strong"),Tko=o("fnet"),Fko=o(" \u2014 "),PD=a("a"),Cko=o("FNetForQuestionAnswering"),Mko=o(" (FNet model)"),Eko=l(),pT=a("li"),Gne=a("strong"),yko=o("funnel"),wko=o(" \u2014 "),$D=a("a"),Ako=o("FunnelForQuestionAnswering"),Lko=o(" (Funnel Transformer model)"),Bko=l(),_T=a("li"),Xne=a("strong"),xko=o("gptj"),kko=o(" \u2014 "),ID=a("a"),Rko=o("GPTJForQuestionAnswering"),Sko=o(" (GPT-J model)"),Pko=l(),bT=a("li"),Vne=a("strong"),$ko=o("ibert"),Iko=o(" \u2014 "),jD=a("a"),jko=o("IBertForQuestionAnswering"),Dko=o(" (I-BERT model)"),Nko=l(),vT=a("li"),zne=a("strong"),qko=o("layoutlmv2"),Oko=o(" \u2014 "),DD=a("a"),Gko=o("LayoutLMv2ForQuestionAnswering"),Xko=o(" (LayoutLMv2 model)"),Vko=l(),TT=a("li"),Wne=a("strong"),zko=o("led"),Wko=o(" \u2014 "),ND=a("a"),Qko=o("LEDForQuestionAnswering"),Hko=o(" (LED model)"),Uko=l(),FT=a("li"),Qne=a("strong"),Jko=o("longformer"),Yko=o(" \u2014 "),qD=a("a"),Kko=o("LongformerForQuestionAnswering"),Zko=o(" (Longformer model)"),eRo=l(),CT=a("li"),Hne=a("strong"),oRo=o("lxmert"),rRo=o(" \u2014 "),OD=a("a"),tRo=o("LxmertForQuestionAnswering"),aRo=o(" (LXMERT model)"),sRo=l(),MT=a("li"),Une=a("strong"),nRo=o("mbart"),lRo=o(" \u2014 "),GD=a("a"),iRo=o("MBartForQuestionAnswering"),dRo=o(" (mBART model)"),cRo=l(),ET=a("li"),Jne=a("strong"),mRo=o("megatron-bert"),fRo=o(" \u2014 "),XD=a("a"),gRo=o("MegatronBertForQuestionAnswering"),hRo=o(" (MegatronBert model)"),uRo=l(),yT=a("li"),Yne=a("strong"),pRo=o("mobilebert"),_Ro=o(" \u2014 "),VD=a("a"),bRo=o("MobileBertForQuestionAnswering"),vRo=o(" (MobileBERT model)"),TRo=l(),wT=a("li"),Kne=a("strong"),FRo=o("mpnet"),CRo=o(" \u2014 "),zD=a("a"),MRo=o("MPNetForQuestionAnswering"),ERo=o(" (MPNet model)"),yRo=l(),AT=a("li"),Zne=a("strong"),wRo=o("nystromformer"),ARo=o(" \u2014 "),WD=a("a"),LRo=o("NystromformerForQuestionAnswering"),BRo=o(" (Nystromformer model)"),xRo=l(),LT=a("li"),ele=a("strong"),kRo=o("qdqbert"),RRo=o(" \u2014 "),QD=a("a"),SRo=o("QDQBertForQuestionAnswering"),PRo=o(" (QDQBert model)"),$Ro=l(),BT=a("li"),ole=a("strong"),IRo=o("reformer"),jRo=o(" \u2014 "),HD=a("a"),DRo=o("ReformerForQuestionAnswering"),NRo=o(" (Reformer model)"),qRo=l(),xT=a("li"),rle=a("strong"),ORo=o("rembert"),GRo=o(" \u2014 "),UD=a("a"),XRo=o("RemBertForQuestionAnswering"),VRo=o(" (RemBERT model)"),zRo=l(),kT=a("li"),tle=a("strong"),WRo=o("roberta"),QRo=o(" \u2014 "),JD=a("a"),HRo=o("RobertaForQuestionAnswering"),URo=o(" (RoBERTa model)"),JRo=l(),RT=a("li"),ale=a("strong"),YRo=o("roformer"),KRo=o(" \u2014 "),YD=a("a"),ZRo=o("RoFormerForQuestionAnswering"),eSo=o(" (RoFormer model)"),oSo=l(),ST=a("li"),sle=a("strong"),rSo=o("splinter"),tSo=o(" \u2014 "),KD=a("a"),aSo=o("SplinterForQuestionAnswering"),sSo=o(" (Splinter model)"),nSo=l(),PT=a("li"),nle=a("strong"),lSo=o("squeezebert"),iSo=o(" \u2014 "),ZD=a("a"),dSo=o("SqueezeBertForQuestionAnswering"),cSo=o(" (SqueezeBERT model)"),mSo=l(),$T=a("li"),lle=a("strong"),fSo=o("xlm"),gSo=o(" \u2014 "),eN=a("a"),hSo=o("XLMForQuestionAnsweringSimple"),uSo=o(" (XLM model)"),pSo=l(),IT=a("li"),ile=a("strong"),_So=o("xlm-roberta"),bSo=o(" \u2014 "),oN=a("a"),vSo=o("XLMRobertaForQuestionAnswering"),TSo=o(" (XLM-RoBERTa model)"),FSo=l(),jT=a("li"),dle=a("strong"),CSo=o("xlm-roberta-xl"),MSo=o(" \u2014 "),rN=a("a"),ESo=o("XLMRobertaXLForQuestionAnswering"),ySo=o(" (XLM-RoBERTa-XL model)"),wSo=l(),DT=a("li"),cle=a("strong"),ASo=o("xlnet"),LSo=o(" \u2014 "),tN=a("a"),BSo=o("XLNetForQuestionAnsweringSimple"),xSo=o(" (XLNet model)"),kSo=l(),NT=a("li"),mle=a("strong"),RSo=o("yoso"),SSo=o(" \u2014 "),aN=a("a"),PSo=o("YosoForQuestionAnswering"),$So=o(" (YOSO model)"),ISo=l(),qT=a("p"),jSo=o("The model is set in evaluation mode by default using "),fle=a("code"),DSo=o("model.eval()"),NSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=a("code"),qSo=o("model.train()"),OSo=l(),hle=a("p"),GSo=o("Examples:"),XSo=l(),m(Gw.$$.fragment),Nxe=l(),Ad=a("h2"),OT=a("a"),ule=a("span"),m(Xw.$$.fragment),VSo=l(),ple=a("span"),zSo=o("AutoModelForTableQuestionAnswering"),qxe=l(),nr=a("div"),m(Vw.$$.fragment),WSo=l(),Ld=a("p"),QSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_le=a("code"),HSo=o("from_pretrained()"),USo=o("class method or the "),ble=a("code"),JSo=o("from_config()"),YSo=o(`class
method.`),KSo=l(),zw=a("p"),ZSo=o("This class cannot be instantiated directly using "),vle=a("code"),ePo=o("__init__()"),oPo=o(" (throws an error)."),rPo=l(),et=a("div"),m(Ww.$$.fragment),tPo=l(),Tle=a("p"),aPo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),sPo=l(),Bd=a("p"),nPo=o(`Note:
Loading a model from its configuration file does `),Fle=a("strong"),lPo=o("not"),iPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cle=a("code"),dPo=o("from_pretrained()"),cPo=o("to load the model weights."),mPo=l(),Mle=a("p"),fPo=o("Examples:"),gPo=l(),m(Qw.$$.fragment),hPo=l(),Qe=a("div"),m(Hw.$$.fragment),uPo=l(),Ele=a("p"),pPo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Po=l(),es=a("p"),bPo=o("The model class to instantiate is selected based on the "),yle=a("code"),vPo=o("model_type"),TPo=o(` property of the config object (either
passed as an argument or loaded from `),wle=a("code"),FPo=o("pretrained_model_name_or_path"),CPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=a("code"),MPo=o("pretrained_model_name_or_path"),EPo=o(":"),yPo=l(),Lle=a("ul"),GT=a("li"),Ble=a("strong"),wPo=o("tapas"),APo=o(" \u2014 "),sN=a("a"),LPo=o("TapasForQuestionAnswering"),BPo=o(" (TAPAS model)"),xPo=l(),XT=a("p"),kPo=o("The model is set in evaluation mode by default using "),xle=a("code"),RPo=o("model.eval()"),SPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kle=a("code"),PPo=o("model.train()"),$Po=l(),Rle=a("p"),IPo=o("Examples:"),jPo=l(),m(Uw.$$.fragment),Oxe=l(),xd=a("h2"),VT=a("a"),Sle=a("span"),m(Jw.$$.fragment),DPo=l(),Ple=a("span"),NPo=o("AutoModelForImageClassification"),Gxe=l(),lr=a("div"),m(Yw.$$.fragment),qPo=l(),kd=a("p"),OPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$le=a("code"),GPo=o("from_pretrained()"),XPo=o("class method or the "),Ile=a("code"),VPo=o("from_config()"),zPo=o(`class
method.`),WPo=l(),Kw=a("p"),QPo=o("This class cannot be instantiated directly using "),jle=a("code"),HPo=o("__init__()"),UPo=o(" (throws an error)."),JPo=l(),ot=a("div"),m(Zw.$$.fragment),YPo=l(),Dle=a("p"),KPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZPo=l(),Rd=a("p"),e$o=o(`Note:
Loading a model from its configuration file does `),Nle=a("strong"),o$o=o("not"),r$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qle=a("code"),t$o=o("from_pretrained()"),a$o=o("to load the model weights."),s$o=l(),Ole=a("p"),n$o=o("Examples:"),l$o=l(),m(e6.$$.fragment),i$o=l(),He=a("div"),m(o6.$$.fragment),d$o=l(),Gle=a("p"),c$o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),m$o=l(),os=a("p"),f$o=o("The model class to instantiate is selected based on the "),Xle=a("code"),g$o=o("model_type"),h$o=o(` property of the config object (either
passed as an argument or loaded from `),Vle=a("code"),u$o=o("pretrained_model_name_or_path"),p$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=a("code"),_$o=o("pretrained_model_name_or_path"),b$o=o(":"),v$o=l(),Ce=a("ul"),zT=a("li"),Wle=a("strong"),T$o=o("beit"),F$o=o(" \u2014 "),nN=a("a"),C$o=o("BeitForImageClassification"),M$o=o(" (BEiT model)"),E$o=l(),WT=a("li"),Qle=a("strong"),y$o=o("convnext"),w$o=o(" \u2014 "),lN=a("a"),A$o=o("ConvNextForImageClassification"),L$o=o(" (ConvNext model)"),B$o=l(),qn=a("li"),Hle=a("strong"),x$o=o("deit"),k$o=o(" \u2014 "),iN=a("a"),R$o=o("DeiTForImageClassification"),S$o=o(" or "),dN=a("a"),P$o=o("DeiTForImageClassificationWithTeacher"),$$o=o(" (DeiT model)"),I$o=l(),QT=a("li"),Ule=a("strong"),j$o=o("imagegpt"),D$o=o(" \u2014 "),cN=a("a"),N$o=o("ImageGPTForImageClassification"),q$o=o(" (ImageGPT model)"),O$o=l(),fa=a("li"),Jle=a("strong"),G$o=o("perceiver"),X$o=o(" \u2014 "),mN=a("a"),V$o=o("PerceiverForImageClassificationLearned"),z$o=o(" or "),fN=a("a"),W$o=o("PerceiverForImageClassificationFourier"),Q$o=o(" or "),gN=a("a"),H$o=o("PerceiverForImageClassificationConvProcessing"),U$o=o(" (Perceiver model)"),J$o=l(),HT=a("li"),Yle=a("strong"),Y$o=o("poolformer"),K$o=o(" \u2014 "),hN=a("a"),Z$o=o("PoolFormerForImageClassification"),eIo=o(" (PoolFormer model)"),oIo=l(),UT=a("li"),Kle=a("strong"),rIo=o("segformer"),tIo=o(" \u2014 "),uN=a("a"),aIo=o("SegformerForImageClassification"),sIo=o(" (SegFormer model)"),nIo=l(),JT=a("li"),Zle=a("strong"),lIo=o("swin"),iIo=o(" \u2014 "),pN=a("a"),dIo=o("SwinForImageClassification"),cIo=o(" (Swin model)"),mIo=l(),YT=a("li"),eie=a("strong"),fIo=o("vit"),gIo=o(" \u2014 "),_N=a("a"),hIo=o("ViTForImageClassification"),uIo=o(" (ViT model)"),pIo=l(),KT=a("p"),_Io=o("The model is set in evaluation mode by default using "),oie=a("code"),bIo=o("model.eval()"),vIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),TIo=o("model.train()"),FIo=l(),tie=a("p"),CIo=o("Examples:"),MIo=l(),m(r6.$$.fragment),Xxe=l(),Sd=a("h2"),ZT=a("a"),aie=a("span"),m(t6.$$.fragment),EIo=l(),sie=a("span"),yIo=o("AutoModelForVision2Seq"),Vxe=l(),ir=a("div"),m(a6.$$.fragment),wIo=l(),Pd=a("p"),AIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nie=a("code"),LIo=o("from_pretrained()"),BIo=o("class method or the "),lie=a("code"),xIo=o("from_config()"),kIo=o(`class
method.`),RIo=l(),s6=a("p"),SIo=o("This class cannot be instantiated directly using "),iie=a("code"),PIo=o("__init__()"),$Io=o(" (throws an error)."),IIo=l(),rt=a("div"),m(n6.$$.fragment),jIo=l(),die=a("p"),DIo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NIo=l(),$d=a("p"),qIo=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),OIo=o("not"),GIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mie=a("code"),XIo=o("from_pretrained()"),VIo=o("to load the model weights."),zIo=l(),fie=a("p"),WIo=o("Examples:"),QIo=l(),m(l6.$$.fragment),HIo=l(),Ue=a("div"),m(i6.$$.fragment),UIo=l(),gie=a("p"),JIo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),YIo=l(),rs=a("p"),KIo=o("The model class to instantiate is selected based on the "),hie=a("code"),ZIo=o("model_type"),ejo=o(` property of the config object (either
passed as an argument or loaded from `),uie=a("code"),ojo=o("pretrained_model_name_or_path"),rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(":"),sjo=l(),_ie=a("ul"),e1=a("li"),bie=a("strong"),njo=o("vision-encoder-decoder"),ljo=o(" \u2014 "),bN=a("a"),ijo=o("VisionEncoderDecoderModel"),djo=o(" (Vision Encoder decoder model)"),cjo=l(),o1=a("p"),mjo=o("The model is set in evaluation mode by default using "),vie=a("code"),fjo=o("model.eval()"),gjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),hjo=o("model.train()"),ujo=l(),Fie=a("p"),pjo=o("Examples:"),_jo=l(),m(d6.$$.fragment),zxe=l(),Id=a("h2"),r1=a("a"),Cie=a("span"),m(c6.$$.fragment),bjo=l(),Mie=a("span"),vjo=o("AutoModelForAudioClassification"),Wxe=l(),dr=a("div"),m(m6.$$.fragment),Tjo=l(),jd=a("p"),Fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Eie=a("code"),Cjo=o("from_pretrained()"),Mjo=o("class method or the "),yie=a("code"),Ejo=o("from_config()"),yjo=o(`class
method.`),wjo=l(),f6=a("p"),Ajo=o("This class cannot be instantiated directly using "),wie=a("code"),Ljo=o("__init__()"),Bjo=o(" (throws an error)."),xjo=l(),tt=a("div"),m(g6.$$.fragment),kjo=l(),Aie=a("p"),Rjo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Sjo=l(),Dd=a("p"),Pjo=o(`Note:
Loading a model from its configuration file does `),Lie=a("strong"),$jo=o("not"),Ijo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=a("code"),jjo=o("from_pretrained()"),Djo=o("to load the model weights."),Njo=l(),xie=a("p"),qjo=o("Examples:"),Ojo=l(),m(h6.$$.fragment),Gjo=l(),Je=a("div"),m(u6.$$.fragment),Xjo=l(),kie=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zjo=l(),ts=a("p"),Wjo=o("The model class to instantiate is selected based on the "),Rie=a("code"),Qjo=o("model_type"),Hjo=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),Ujo=o("pretrained_model_name_or_path"),Jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(":"),Zjo=l(),xe=a("ul"),t1=a("li"),$ie=a("strong"),eDo=o("data2vec-audio"),oDo=o(" \u2014 "),vN=a("a"),rDo=o("Data2VecAudioForSequenceClassification"),tDo=o(" (Data2VecAudio model)"),aDo=l(),a1=a("li"),Iie=a("strong"),sDo=o("hubert"),nDo=o(" \u2014 "),TN=a("a"),lDo=o("HubertForSequenceClassification"),iDo=o(" (Hubert model)"),dDo=l(),s1=a("li"),jie=a("strong"),cDo=o("sew"),mDo=o(" \u2014 "),FN=a("a"),fDo=o("SEWForSequenceClassification"),gDo=o(" (SEW model)"),hDo=l(),n1=a("li"),Die=a("strong"),uDo=o("sew-d"),pDo=o(" \u2014 "),CN=a("a"),_Do=o("SEWDForSequenceClassification"),bDo=o(" (SEW-D model)"),vDo=l(),l1=a("li"),Nie=a("strong"),TDo=o("unispeech"),FDo=o(" \u2014 "),MN=a("a"),CDo=o("UniSpeechForSequenceClassification"),MDo=o(" (UniSpeech model)"),EDo=l(),i1=a("li"),qie=a("strong"),yDo=o("unispeech-sat"),wDo=o(" \u2014 "),EN=a("a"),ADo=o("UniSpeechSatForSequenceClassification"),LDo=o(" (UniSpeechSat model)"),BDo=l(),d1=a("li"),Oie=a("strong"),xDo=o("wav2vec2"),kDo=o(" \u2014 "),yN=a("a"),RDo=o("Wav2Vec2ForSequenceClassification"),SDo=o(" (Wav2Vec2 model)"),PDo=l(),c1=a("li"),Gie=a("strong"),$Do=o("wavlm"),IDo=o(" \u2014 "),wN=a("a"),jDo=o("WavLMForSequenceClassification"),DDo=o(" (WavLM model)"),NDo=l(),m1=a("p"),qDo=o("The model is set in evaluation mode by default using "),Xie=a("code"),ODo=o("model.eval()"),GDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=a("code"),XDo=o("model.train()"),VDo=l(),zie=a("p"),zDo=o("Examples:"),WDo=l(),m(p6.$$.fragment),Qxe=l(),Nd=a("h2"),f1=a("a"),Wie=a("span"),m(_6.$$.fragment),QDo=l(),Qie=a("span"),HDo=o("AutoModelForAudioFrameClassification"),Hxe=l(),cr=a("div"),m(b6.$$.fragment),UDo=l(),qd=a("p"),JDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Hie=a("code"),YDo=o("from_pretrained()"),KDo=o("class method or the "),Uie=a("code"),ZDo=o("from_config()"),eNo=o(`class
method.`),oNo=l(),v6=a("p"),rNo=o("This class cannot be instantiated directly using "),Jie=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),sNo=l(),at=a("div"),m(T6.$$.fragment),nNo=l(),Yie=a("p"),lNo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),iNo=l(),Od=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),Kie=a("strong"),cNo=o("not"),mNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=a("code"),fNo=o("from_pretrained()"),gNo=o("to load the model weights."),hNo=l(),ede=a("p"),uNo=o("Examples:"),pNo=l(),m(F6.$$.fragment),_No=l(),Ye=a("div"),m(C6.$$.fragment),bNo=l(),ode=a("p"),vNo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),TNo=l(),as=a("p"),FNo=o("The model class to instantiate is selected based on the "),rde=a("code"),CNo=o("model_type"),MNo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),ENo=o("pretrained_model_name_or_path"),yNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),wNo=o("pretrained_model_name_or_path"),ANo=o(":"),LNo=l(),ss=a("ul"),g1=a("li"),sde=a("strong"),BNo=o("data2vec-audio"),xNo=o(" \u2014 "),AN=a("a"),kNo=o("Data2VecAudioForAudioFrameClassification"),RNo=o(" (Data2VecAudio model)"),SNo=l(),h1=a("li"),nde=a("strong"),PNo=o("unispeech-sat"),$No=o(" \u2014 "),LN=a("a"),INo=o("UniSpeechSatForAudioFrameClassification"),jNo=o(" (UniSpeechSat model)"),DNo=l(),u1=a("li"),lde=a("strong"),NNo=o("wav2vec2"),qNo=o(" \u2014 "),BN=a("a"),ONo=o("Wav2Vec2ForAudioFrameClassification"),GNo=o(" (Wav2Vec2 model)"),XNo=l(),p1=a("li"),ide=a("strong"),VNo=o("wavlm"),zNo=o(" \u2014 "),xN=a("a"),WNo=o("WavLMForAudioFrameClassification"),QNo=o(" (WavLM model)"),HNo=l(),_1=a("p"),UNo=o("The model is set in evaluation mode by default using "),dde=a("code"),JNo=o("model.eval()"),YNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),KNo=o("model.train()"),ZNo=l(),mde=a("p"),eqo=o("Examples:"),oqo=l(),m(M6.$$.fragment),Uxe=l(),Gd=a("h2"),b1=a("a"),fde=a("span"),m(E6.$$.fragment),rqo=l(),gde=a("span"),tqo=o("AutoModelForCTC"),Jxe=l(),mr=a("div"),m(y6.$$.fragment),aqo=l(),Xd=a("p"),sqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hde=a("code"),nqo=o("from_pretrained()"),lqo=o("class method or the "),ude=a("code"),iqo=o("from_config()"),dqo=o(`class
method.`),cqo=l(),w6=a("p"),mqo=o("This class cannot be instantiated directly using "),pde=a("code"),fqo=o("__init__()"),gqo=o(" (throws an error)."),hqo=l(),st=a("div"),m(A6.$$.fragment),uqo=l(),_de=a("p"),pqo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),_qo=l(),Vd=a("p"),bqo=o(`Note:
Loading a model from its configuration file does `),bde=a("strong"),vqo=o("not"),Tqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=a("code"),Fqo=o("from_pretrained()"),Cqo=o("to load the model weights."),Mqo=l(),Tde=a("p"),Eqo=o("Examples:"),yqo=l(),m(L6.$$.fragment),wqo=l(),Ke=a("div"),m(B6.$$.fragment),Aqo=l(),Fde=a("p"),Lqo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Bqo=l(),ns=a("p"),xqo=o("The model class to instantiate is selected based on the "),Cde=a("code"),kqo=o("model_type"),Rqo=o(` property of the config object (either
passed as an argument or loaded from `),Mde=a("code"),Sqo=o("pretrained_model_name_or_path"),Pqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=a("code"),$qo=o("pretrained_model_name_or_path"),Iqo=o(":"),jqo=l(),ke=a("ul"),v1=a("li"),yde=a("strong"),Dqo=o("data2vec-audio"),Nqo=o(" \u2014 "),kN=a("a"),qqo=o("Data2VecAudioForCTC"),Oqo=o(" (Data2VecAudio model)"),Gqo=l(),T1=a("li"),wde=a("strong"),Xqo=o("hubert"),Vqo=o(" \u2014 "),RN=a("a"),zqo=o("HubertForCTC"),Wqo=o(" (Hubert model)"),Qqo=l(),F1=a("li"),Ade=a("strong"),Hqo=o("sew"),Uqo=o(" \u2014 "),SN=a("a"),Jqo=o("SEWForCTC"),Yqo=o(" (SEW model)"),Kqo=l(),C1=a("li"),Lde=a("strong"),Zqo=o("sew-d"),eOo=o(" \u2014 "),PN=a("a"),oOo=o("SEWDForCTC"),rOo=o(" (SEW-D model)"),tOo=l(),M1=a("li"),Bde=a("strong"),aOo=o("unispeech"),sOo=o(" \u2014 "),$N=a("a"),nOo=o("UniSpeechForCTC"),lOo=o(" (UniSpeech model)"),iOo=l(),E1=a("li"),xde=a("strong"),dOo=o("unispeech-sat"),cOo=o(" \u2014 "),IN=a("a"),mOo=o("UniSpeechSatForCTC"),fOo=o(" (UniSpeechSat model)"),gOo=l(),y1=a("li"),kde=a("strong"),hOo=o("wav2vec2"),uOo=o(" \u2014 "),jN=a("a"),pOo=o("Wav2Vec2ForCTC"),_Oo=o(" (Wav2Vec2 model)"),bOo=l(),w1=a("li"),Rde=a("strong"),vOo=o("wavlm"),TOo=o(" \u2014 "),DN=a("a"),FOo=o("WavLMForCTC"),COo=o(" (WavLM model)"),MOo=l(),A1=a("p"),EOo=o("The model is set in evaluation mode by default using "),Sde=a("code"),yOo=o("model.eval()"),wOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),AOo=o("model.train()"),LOo=l(),$de=a("p"),BOo=o("Examples:"),xOo=l(),m(x6.$$.fragment),Yxe=l(),zd=a("h2"),L1=a("a"),Ide=a("span"),m(k6.$$.fragment),kOo=l(),jde=a("span"),ROo=o("AutoModelForSpeechSeq2Seq"),Kxe=l(),fr=a("div"),m(R6.$$.fragment),SOo=l(),Wd=a("p"),POo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dde=a("code"),$Oo=o("from_pretrained()"),IOo=o("class method or the "),Nde=a("code"),jOo=o("from_config()"),DOo=o(`class
method.`),NOo=l(),S6=a("p"),qOo=o("This class cannot be instantiated directly using "),qde=a("code"),OOo=o("__init__()"),GOo=o(" (throws an error)."),XOo=l(),nt=a("div"),m(P6.$$.fragment),VOo=l(),Ode=a("p"),zOo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WOo=l(),Qd=a("p"),QOo=o(`Note:
Loading a model from its configuration file does `),Gde=a("strong"),HOo=o("not"),UOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=a("code"),JOo=o("from_pretrained()"),YOo=o("to load the model weights."),KOo=l(),Vde=a("p"),ZOo=o("Examples:"),eGo=l(),m($6.$$.fragment),oGo=l(),Ze=a("div"),m(I6.$$.fragment),rGo=l(),zde=a("p"),tGo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aGo=l(),ls=a("p"),sGo=o("The model class to instantiate is selected based on the "),Wde=a("code"),nGo=o("model_type"),lGo=o(` property of the config object (either
passed as an argument or loaded from `),Qde=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=a("code"),cGo=o("pretrained_model_name_or_path"),mGo=o(":"),fGo=l(),j6=a("ul"),B1=a("li"),Ude=a("strong"),gGo=o("speech-encoder-decoder"),hGo=o(" \u2014 "),NN=a("a"),uGo=o("SpeechEncoderDecoderModel"),pGo=o(" (Speech Encoder decoder model)"),_Go=l(),x1=a("li"),Jde=a("strong"),bGo=o("speech_to_text"),vGo=o(" \u2014 "),qN=a("a"),TGo=o("Speech2TextForConditionalGeneration"),FGo=o(" (Speech2Text model)"),CGo=l(),k1=a("p"),MGo=o("The model is set in evaluation mode by default using "),Yde=a("code"),EGo=o("model.eval()"),yGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kde=a("code"),wGo=o("model.train()"),AGo=l(),Zde=a("p"),LGo=o("Examples:"),BGo=l(),m(D6.$$.fragment),Zxe=l(),Hd=a("h2"),R1=a("a"),ece=a("span"),m(N6.$$.fragment),xGo=l(),oce=a("span"),kGo=o("AutoModelForAudioXVector"),eke=l(),gr=a("div"),m(q6.$$.fragment),RGo=l(),Ud=a("p"),SGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rce=a("code"),PGo=o("from_pretrained()"),$Go=o("class method or the "),tce=a("code"),IGo=o("from_config()"),jGo=o(`class
method.`),DGo=l(),O6=a("p"),NGo=o("This class cannot be instantiated directly using "),ace=a("code"),qGo=o("__init__()"),OGo=o(" (throws an error)."),GGo=l(),lt=a("div"),m(G6.$$.fragment),XGo=l(),sce=a("p"),VGo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zGo=l(),Jd=a("p"),WGo=o(`Note:
Loading a model from its configuration file does `),nce=a("strong"),QGo=o("not"),HGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lce=a("code"),UGo=o("from_pretrained()"),JGo=o("to load the model weights."),YGo=l(),ice=a("p"),KGo=o("Examples:"),ZGo=l(),m(X6.$$.fragment),eXo=l(),eo=a("div"),m(V6.$$.fragment),oXo=l(),dce=a("p"),rXo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),tXo=l(),is=a("p"),aXo=o("The model class to instantiate is selected based on the "),cce=a("code"),sXo=o("model_type"),nXo=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(":"),mXo=l(),ds=a("ul"),S1=a("li"),gce=a("strong"),fXo=o("data2vec-audio"),gXo=o(" \u2014 "),ON=a("a"),hXo=o("Data2VecAudioForXVector"),uXo=o(" (Data2VecAudio model)"),pXo=l(),P1=a("li"),hce=a("strong"),_Xo=o("unispeech-sat"),bXo=o(" \u2014 "),GN=a("a"),vXo=o("UniSpeechSatForXVector"),TXo=o(" (UniSpeechSat model)"),FXo=l(),$1=a("li"),uce=a("strong"),CXo=o("wav2vec2"),MXo=o(" \u2014 "),XN=a("a"),EXo=o("Wav2Vec2ForXVector"),yXo=o(" (Wav2Vec2 model)"),wXo=l(),I1=a("li"),pce=a("strong"),AXo=o("wavlm"),LXo=o(" \u2014 "),VN=a("a"),BXo=o("WavLMForXVector"),xXo=o(" (WavLM model)"),kXo=l(),j1=a("p"),RXo=o("The model is set in evaluation mode by default using "),_ce=a("code"),SXo=o("model.eval()"),PXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bce=a("code"),$Xo=o("model.train()"),IXo=l(),vce=a("p"),jXo=o("Examples:"),DXo=l(),m(z6.$$.fragment),oke=l(),Yd=a("h2"),D1=a("a"),Tce=a("span"),m(W6.$$.fragment),NXo=l(),Fce=a("span"),qXo=o("AutoModelForMaskedImageModeling"),rke=l(),hr=a("div"),m(Q6.$$.fragment),OXo=l(),Kd=a("p"),GXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Cce=a("code"),XXo=o("from_pretrained()"),VXo=o("class method or the "),Mce=a("code"),zXo=o("from_config()"),WXo=o(`class
method.`),QXo=l(),H6=a("p"),HXo=o("This class cannot be instantiated directly using "),Ece=a("code"),UXo=o("__init__()"),JXo=o(" (throws an error)."),YXo=l(),it=a("div"),m(U6.$$.fragment),KXo=l(),yce=a("p"),ZXo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),eVo=l(),Zd=a("p"),oVo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),rVo=o("not"),tVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ace=a("code"),aVo=o("from_pretrained()"),sVo=o("to load the model weights."),nVo=l(),Lce=a("p"),lVo=o("Examples:"),iVo=l(),m(J6.$$.fragment),dVo=l(),oo=a("div"),m(Y6.$$.fragment),cVo=l(),Bce=a("p"),mVo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fVo=l(),cs=a("p"),gVo=o("The model class to instantiate is selected based on the "),xce=a("code"),hVo=o("model_type"),uVo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),pVo=o("pretrained_model_name_or_path"),_Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(":"),TVo=l(),ec=a("ul"),N1=a("li"),Sce=a("strong"),FVo=o("deit"),CVo=o(" \u2014 "),zN=a("a"),MVo=o("DeiTForMaskedImageModeling"),EVo=o(" (DeiT model)"),yVo=l(),q1=a("li"),Pce=a("strong"),wVo=o("swin"),AVo=o(" \u2014 "),WN=a("a"),LVo=o("SwinForMaskedImageModeling"),BVo=o(" (Swin model)"),xVo=l(),O1=a("li"),$ce=a("strong"),kVo=o("vit"),RVo=o(" \u2014 "),QN=a("a"),SVo=o("ViTForMaskedImageModeling"),PVo=o(" (ViT model)"),$Vo=l(),G1=a("p"),IVo=o("The model is set in evaluation mode by default using "),Ice=a("code"),jVo=o("model.eval()"),DVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=a("code"),NVo=o("model.train()"),qVo=l(),Dce=a("p"),OVo=o("Examples:"),GVo=l(),m(K6.$$.fragment),tke=l(),oc=a("h2"),X1=a("a"),Nce=a("span"),m(Z6.$$.fragment),XVo=l(),qce=a("span"),VVo=o("AutoModelForObjectDetection"),ake=l(),ur=a("div"),m(eA.$$.fragment),zVo=l(),rc=a("p"),WVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Oce=a("code"),QVo=o("from_pretrained()"),HVo=o("class method or the "),Gce=a("code"),UVo=o("from_config()"),JVo=o(`class
method.`),YVo=l(),oA=a("p"),KVo=o("This class cannot be instantiated directly using "),Xce=a("code"),ZVo=o("__init__()"),ezo=o(" (throws an error)."),ozo=l(),dt=a("div"),m(rA.$$.fragment),rzo=l(),Vce=a("p"),tzo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),azo=l(),tc=a("p"),szo=o(`Note:
Loading a model from its configuration file does `),zce=a("strong"),nzo=o("not"),lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=a("code"),izo=o("from_pretrained()"),dzo=o("to load the model weights."),czo=l(),Qce=a("p"),mzo=o("Examples:"),fzo=l(),m(tA.$$.fragment),gzo=l(),ro=a("div"),m(aA.$$.fragment),hzo=l(),Hce=a("p"),uzo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pzo=l(),ms=a("p"),_zo=o("The model class to instantiate is selected based on the "),Uce=a("code"),bzo=o("model_type"),vzo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),Tzo=o("pretrained_model_name_or_path"),Fzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),Czo=o("pretrained_model_name_or_path"),Mzo=o(":"),Ezo=l(),Kce=a("ul"),V1=a("li"),Zce=a("strong"),yzo=o("detr"),wzo=o(" \u2014 "),HN=a("a"),Azo=o("DetrForObjectDetection"),Lzo=o(" (DETR model)"),Bzo=l(),z1=a("p"),xzo=o("The model is set in evaluation mode by default using "),eme=a("code"),kzo=o("model.eval()"),Rzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),Szo=o("model.train()"),Pzo=l(),rme=a("p"),$zo=o("Examples:"),Izo=l(),m(sA.$$.fragment),ske=l(),ac=a("h2"),W1=a("a"),tme=a("span"),m(nA.$$.fragment),jzo=l(),ame=a("span"),Dzo=o("AutoModelForImageSegmentation"),nke=l(),pr=a("div"),m(lA.$$.fragment),Nzo=l(),sc=a("p"),qzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sme=a("code"),Ozo=o("from_pretrained()"),Gzo=o("class method or the "),nme=a("code"),Xzo=o("from_config()"),Vzo=o(`class
method.`),zzo=l(),iA=a("p"),Wzo=o("This class cannot be instantiated directly using "),lme=a("code"),Qzo=o("__init__()"),Hzo=o(" (throws an error)."),Uzo=l(),ct=a("div"),m(dA.$$.fragment),Jzo=l(),ime=a("p"),Yzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Kzo=l(),nc=a("p"),Zzo=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),eWo=o("not"),oWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cme=a("code"),rWo=o("from_pretrained()"),tWo=o("to load the model weights."),aWo=l(),mme=a("p"),sWo=o("Examples:"),nWo=l(),m(cA.$$.fragment),lWo=l(),to=a("div"),m(mA.$$.fragment),iWo=l(),fme=a("p"),dWo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cWo=l(),fs=a("p"),mWo=o("The model class to instantiate is selected based on the "),gme=a("code"),fWo=o("model_type"),gWo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),hWo=o("pretrained_model_name_or_path"),uWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),pWo=o("pretrained_model_name_or_path"),_Wo=o(":"),bWo=l(),pme=a("ul"),Q1=a("li"),_me=a("strong"),vWo=o("detr"),TWo=o(" \u2014 "),UN=a("a"),FWo=o("DetrForSegmentation"),CWo=o(" (DETR model)"),MWo=l(),H1=a("p"),EWo=o("The model is set in evaluation mode by default using "),bme=a("code"),yWo=o("model.eval()"),wWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=a("code"),AWo=o("model.train()"),LWo=l(),Tme=a("p"),BWo=o("Examples:"),xWo=l(),m(fA.$$.fragment),lke=l(),lc=a("h2"),U1=a("a"),Fme=a("span"),m(gA.$$.fragment),kWo=l(),Cme=a("span"),RWo=o("AutoModelForSemanticSegmentation"),ike=l(),_r=a("div"),m(hA.$$.fragment),SWo=l(),ic=a("p"),PWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mme=a("code"),$Wo=o("from_pretrained()"),IWo=o("class method or the "),Eme=a("code"),jWo=o("from_config()"),DWo=o(`class
method.`),NWo=l(),uA=a("p"),qWo=o("This class cannot be instantiated directly using "),yme=a("code"),OWo=o("__init__()"),GWo=o(" (throws an error)."),XWo=l(),mt=a("div"),m(pA.$$.fragment),VWo=l(),wme=a("p"),zWo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WWo=l(),dc=a("p"),QWo=o(`Note:
Loading a model from its configuration file does `),Ame=a("strong"),HWo=o("not"),UWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lme=a("code"),JWo=o("from_pretrained()"),YWo=o("to load the model weights."),KWo=l(),Bme=a("p"),ZWo=o("Examples:"),eQo=l(),m(_A.$$.fragment),oQo=l(),ao=a("div"),m(bA.$$.fragment),rQo=l(),xme=a("p"),tQo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),aQo=l(),gs=a("p"),sQo=o("The model class to instantiate is selected based on the "),kme=a("code"),nQo=o("model_type"),lQo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=a("code"),cQo=o("pretrained_model_name_or_path"),mQo=o(":"),fQo=l(),vA=a("ul"),J1=a("li"),Pme=a("strong"),gQo=o("beit"),hQo=o(" \u2014 "),JN=a("a"),uQo=o("BeitForSemanticSegmentation"),pQo=o(" (BEiT model)"),_Qo=l(),Y1=a("li"),$me=a("strong"),bQo=o("segformer"),vQo=o(" \u2014 "),YN=a("a"),TQo=o("SegformerForSemanticSegmentation"),FQo=o(" (SegFormer model)"),CQo=l(),K1=a("p"),MQo=o("The model is set in evaluation mode by default using "),Ime=a("code"),EQo=o("model.eval()"),yQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),wQo=o("model.train()"),AQo=l(),Dme=a("p"),LQo=o("Examples:"),BQo=l(),m(TA.$$.fragment),dke=l(),cc=a("h2"),Z1=a("a"),Nme=a("span"),m(FA.$$.fragment),xQo=l(),qme=a("span"),kQo=o("AutoModelForInstanceSegmentation"),cke=l(),br=a("div"),m(CA.$$.fragment),RQo=l(),mc=a("p"),SQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ome=a("code"),PQo=o("from_pretrained()"),$Qo=o("class method or the "),Gme=a("code"),IQo=o("from_config()"),jQo=o(`class
method.`),DQo=l(),MA=a("p"),NQo=o("This class cannot be instantiated directly using "),Xme=a("code"),qQo=o("__init__()"),OQo=o(" (throws an error)."),GQo=l(),ft=a("div"),m(EA.$$.fragment),XQo=l(),Vme=a("p"),VQo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zQo=l(),fc=a("p"),WQo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),QQo=o("not"),HQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=a("code"),UQo=o("from_pretrained()"),JQo=o("to load the model weights."),YQo=l(),Qme=a("p"),KQo=o("Examples:"),ZQo=l(),m(yA.$$.fragment),eHo=l(),so=a("div"),m(wA.$$.fragment),oHo=l(),Hme=a("p"),rHo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tHo=l(),hs=a("p"),aHo=o("The model class to instantiate is selected based on the "),Ume=a("code"),sHo=o("model_type"),nHo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),lHo=o("pretrained_model_name_or_path"),iHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),dHo=o("pretrained_model_name_or_path"),cHo=o(":"),mHo=l(),Kme=a("ul"),eF=a("li"),Zme=a("strong"),fHo=o("maskformer"),gHo=o(" \u2014 "),KN=a("a"),hHo=o("MaskFormerForInstanceSegmentation"),uHo=o(" (MaskFormer model)"),pHo=l(),oF=a("p"),_Ho=o("The model is set in evaluation mode by default using "),efe=a("code"),bHo=o("model.eval()"),vHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),THo=o("model.train()"),FHo=l(),rfe=a("p"),CHo=o("Examples:"),MHo=l(),m(AA.$$.fragment),mke=l(),gc=a("h2"),rF=a("a"),tfe=a("span"),m(LA.$$.fragment),EHo=l(),afe=a("span"),yHo=o("TFAutoModel"),fke=l(),vr=a("div"),m(BA.$$.fragment),wHo=l(),hc=a("p"),AHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sfe=a("code"),LHo=o("from_pretrained()"),BHo=o("class method or the "),nfe=a("code"),xHo=o("from_config()"),kHo=o(`class
method.`),RHo=l(),xA=a("p"),SHo=o("This class cannot be instantiated directly using "),lfe=a("code"),PHo=o("__init__()"),$Ho=o(" (throws an error)."),IHo=l(),gt=a("div"),m(kA.$$.fragment),jHo=l(),ife=a("p"),DHo=o("Instantiates one of the base model classes of the library from a configuration."),NHo=l(),uc=a("p"),qHo=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),OHo=o("not"),GHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cfe=a("code"),XHo=o("from_pretrained()"),VHo=o("to load the model weights."),zHo=l(),mfe=a("p"),WHo=o("Examples:"),QHo=l(),m(RA.$$.fragment),HHo=l(),ho=a("div"),m(SA.$$.fragment),UHo=l(),ffe=a("p"),JHo=o("Instantiate one of the base model classes of the library from a pretrained model."),YHo=l(),us=a("p"),KHo=o("The model class to instantiate is selected based on the "),gfe=a("code"),ZHo=o("model_type"),eUo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),oUo=o("pretrained_model_name_or_path"),rUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),tUo=o("pretrained_model_name_or_path"),aUo=o(":"),sUo=l(),B=a("ul"),tF=a("li"),pfe=a("strong"),nUo=o("albert"),lUo=o(" \u2014 "),ZN=a("a"),iUo=o("TFAlbertModel"),dUo=o(" (ALBERT model)"),cUo=l(),aF=a("li"),_fe=a("strong"),mUo=o("bart"),fUo=o(" \u2014 "),eq=a("a"),gUo=o("TFBartModel"),hUo=o(" (BART model)"),uUo=l(),sF=a("li"),bfe=a("strong"),pUo=o("bert"),_Uo=o(" \u2014 "),oq=a("a"),bUo=o("TFBertModel"),vUo=o(" (BERT model)"),TUo=l(),nF=a("li"),vfe=a("strong"),FUo=o("blenderbot"),CUo=o(" \u2014 "),rq=a("a"),MUo=o("TFBlenderbotModel"),EUo=o(" (Blenderbot model)"),yUo=l(),lF=a("li"),Tfe=a("strong"),wUo=o("blenderbot-small"),AUo=o(" \u2014 "),tq=a("a"),LUo=o("TFBlenderbotSmallModel"),BUo=o(" (BlenderbotSmall model)"),xUo=l(),iF=a("li"),Ffe=a("strong"),kUo=o("camembert"),RUo=o(" \u2014 "),aq=a("a"),SUo=o("TFCamembertModel"),PUo=o(" (CamemBERT model)"),$Uo=l(),dF=a("li"),Cfe=a("strong"),IUo=o("clip"),jUo=o(" \u2014 "),sq=a("a"),DUo=o("TFCLIPModel"),NUo=o(" (CLIP model)"),qUo=l(),cF=a("li"),Mfe=a("strong"),OUo=o("convbert"),GUo=o(" \u2014 "),nq=a("a"),XUo=o("TFConvBertModel"),VUo=o(" (ConvBERT model)"),zUo=l(),mF=a("li"),Efe=a("strong"),WUo=o("convnext"),QUo=o(" \u2014 "),lq=a("a"),HUo=o("TFConvNextModel"),UUo=o(" (ConvNext model)"),JUo=l(),fF=a("li"),yfe=a("strong"),YUo=o("ctrl"),KUo=o(" \u2014 "),iq=a("a"),ZUo=o("TFCTRLModel"),eJo=o(" (CTRL model)"),oJo=l(),gF=a("li"),wfe=a("strong"),rJo=o("deberta"),tJo=o(" \u2014 "),dq=a("a"),aJo=o("TFDebertaModel"),sJo=o(" (DeBERTa model)"),nJo=l(),hF=a("li"),Afe=a("strong"),lJo=o("deberta-v2"),iJo=o(" \u2014 "),cq=a("a"),dJo=o("TFDebertaV2Model"),cJo=o(" (DeBERTa-v2 model)"),mJo=l(),uF=a("li"),Lfe=a("strong"),fJo=o("distilbert"),gJo=o(" \u2014 "),mq=a("a"),hJo=o("TFDistilBertModel"),uJo=o(" (DistilBERT model)"),pJo=l(),pF=a("li"),Bfe=a("strong"),_Jo=o("dpr"),bJo=o(" \u2014 "),fq=a("a"),vJo=o("TFDPRQuestionEncoder"),TJo=o(" (DPR model)"),FJo=l(),_F=a("li"),xfe=a("strong"),CJo=o("electra"),MJo=o(" \u2014 "),gq=a("a"),EJo=o("TFElectraModel"),yJo=o(" (ELECTRA model)"),wJo=l(),bF=a("li"),kfe=a("strong"),AJo=o("flaubert"),LJo=o(" \u2014 "),hq=a("a"),BJo=o("TFFlaubertModel"),xJo=o(" (FlauBERT model)"),kJo=l(),On=a("li"),Rfe=a("strong"),RJo=o("funnel"),SJo=o(" \u2014 "),uq=a("a"),PJo=o("TFFunnelModel"),$Jo=o(" or "),pq=a("a"),IJo=o("TFFunnelBaseModel"),jJo=o(" (Funnel Transformer model)"),DJo=l(),vF=a("li"),Sfe=a("strong"),NJo=o("gpt2"),qJo=o(" \u2014 "),_q=a("a"),OJo=o("TFGPT2Model"),GJo=o(" (OpenAI GPT-2 model)"),XJo=l(),TF=a("li"),Pfe=a("strong"),VJo=o("hubert"),zJo=o(" \u2014 "),bq=a("a"),WJo=o("TFHubertModel"),QJo=o(" (Hubert model)"),HJo=l(),FF=a("li"),$fe=a("strong"),UJo=o("layoutlm"),JJo=o(" \u2014 "),vq=a("a"),YJo=o("TFLayoutLMModel"),KJo=o(" (LayoutLM model)"),ZJo=l(),CF=a("li"),Ife=a("strong"),eYo=o("led"),oYo=o(" \u2014 "),Tq=a("a"),rYo=o("TFLEDModel"),tYo=o(" (LED model)"),aYo=l(),MF=a("li"),jfe=a("strong"),sYo=o("longformer"),nYo=o(" \u2014 "),Fq=a("a"),lYo=o("TFLongformerModel"),iYo=o(" (Longformer model)"),dYo=l(),EF=a("li"),Dfe=a("strong"),cYo=o("lxmert"),mYo=o(" \u2014 "),Cq=a("a"),fYo=o("TFLxmertModel"),gYo=o(" (LXMERT model)"),hYo=l(),yF=a("li"),Nfe=a("strong"),uYo=o("marian"),pYo=o(" \u2014 "),Mq=a("a"),_Yo=o("TFMarianModel"),bYo=o(" (Marian model)"),vYo=l(),wF=a("li"),qfe=a("strong"),TYo=o("mbart"),FYo=o(" \u2014 "),Eq=a("a"),CYo=o("TFMBartModel"),MYo=o(" (mBART model)"),EYo=l(),AF=a("li"),Ofe=a("strong"),yYo=o("mobilebert"),wYo=o(" \u2014 "),yq=a("a"),AYo=o("TFMobileBertModel"),LYo=o(" (MobileBERT model)"),BYo=l(),LF=a("li"),Gfe=a("strong"),xYo=o("mpnet"),kYo=o(" \u2014 "),wq=a("a"),RYo=o("TFMPNetModel"),SYo=o(" (MPNet model)"),PYo=l(),BF=a("li"),Xfe=a("strong"),$Yo=o("mt5"),IYo=o(" \u2014 "),Aq=a("a"),jYo=o("TFMT5Model"),DYo=o(" (mT5 model)"),NYo=l(),xF=a("li"),Vfe=a("strong"),qYo=o("openai-gpt"),OYo=o(" \u2014 "),Lq=a("a"),GYo=o("TFOpenAIGPTModel"),XYo=o(" (OpenAI GPT model)"),VYo=l(),kF=a("li"),zfe=a("strong"),zYo=o("pegasus"),WYo=o(" \u2014 "),Bq=a("a"),QYo=o("TFPegasusModel"),HYo=o(" (Pegasus model)"),UYo=l(),RF=a("li"),Wfe=a("strong"),JYo=o("rembert"),YYo=o(" \u2014 "),xq=a("a"),KYo=o("TFRemBertModel"),ZYo=o(" (RemBERT model)"),eKo=l(),SF=a("li"),Qfe=a("strong"),oKo=o("roberta"),rKo=o(" \u2014 "),kq=a("a"),tKo=o("TFRobertaModel"),aKo=o(" (RoBERTa model)"),sKo=l(),PF=a("li"),Hfe=a("strong"),nKo=o("roformer"),lKo=o(" \u2014 "),Rq=a("a"),iKo=o("TFRoFormerModel"),dKo=o(" (RoFormer model)"),cKo=l(),$F=a("li"),Ufe=a("strong"),mKo=o("speech_to_text"),fKo=o(" \u2014 "),Sq=a("a"),gKo=o("TFSpeech2TextModel"),hKo=o(" (Speech2Text model)"),uKo=l(),IF=a("li"),Jfe=a("strong"),pKo=o("t5"),_Ko=o(" \u2014 "),Pq=a("a"),bKo=o("TFT5Model"),vKo=o(" (T5 model)"),TKo=l(),jF=a("li"),Yfe=a("strong"),FKo=o("tapas"),CKo=o(" \u2014 "),$q=a("a"),MKo=o("TFTapasModel"),EKo=o(" (TAPAS model)"),yKo=l(),DF=a("li"),Kfe=a("strong"),wKo=o("transfo-xl"),AKo=o(" \u2014 "),Iq=a("a"),LKo=o("TFTransfoXLModel"),BKo=o(" (Transformer-XL model)"),xKo=l(),NF=a("li"),Zfe=a("strong"),kKo=o("vit"),RKo=o(" \u2014 "),jq=a("a"),SKo=o("TFViTModel"),PKo=o(" (ViT model)"),$Ko=l(),qF=a("li"),ege=a("strong"),IKo=o("wav2vec2"),jKo=o(" \u2014 "),Dq=a("a"),DKo=o("TFWav2Vec2Model"),NKo=o(" (Wav2Vec2 model)"),qKo=l(),OF=a("li"),oge=a("strong"),OKo=o("xlm"),GKo=o(" \u2014 "),Nq=a("a"),XKo=o("TFXLMModel"),VKo=o(" (XLM model)"),zKo=l(),GF=a("li"),rge=a("strong"),WKo=o("xlm-roberta"),QKo=o(" \u2014 "),qq=a("a"),HKo=o("TFXLMRobertaModel"),UKo=o(" (XLM-RoBERTa model)"),JKo=l(),XF=a("li"),tge=a("strong"),YKo=o("xlnet"),KKo=o(" \u2014 "),Oq=a("a"),ZKo=o("TFXLNetModel"),eZo=o(" (XLNet model)"),oZo=l(),age=a("p"),rZo=o("Examples:"),tZo=l(),m(PA.$$.fragment),gke=l(),pc=a("h2"),VF=a("a"),sge=a("span"),m($A.$$.fragment),aZo=l(),nge=a("span"),sZo=o("TFAutoModelForPreTraining"),hke=l(),Tr=a("div"),m(IA.$$.fragment),nZo=l(),_c=a("p"),lZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lge=a("code"),iZo=o("from_pretrained()"),dZo=o("class method or the "),ige=a("code"),cZo=o("from_config()"),mZo=o(`class
method.`),fZo=l(),jA=a("p"),gZo=o("This class cannot be instantiated directly using "),dge=a("code"),hZo=o("__init__()"),uZo=o(" (throws an error)."),pZo=l(),ht=a("div"),m(DA.$$.fragment),_Zo=l(),cge=a("p"),bZo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vZo=l(),bc=a("p"),TZo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),FZo=o("not"),CZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fge=a("code"),MZo=o("from_pretrained()"),EZo=o("to load the model weights."),yZo=l(),gge=a("p"),wZo=o("Examples:"),AZo=l(),m(NA.$$.fragment),LZo=l(),uo=a("div"),m(qA.$$.fragment),BZo=l(),hge=a("p"),xZo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kZo=l(),ps=a("p"),RZo=o("The model class to instantiate is selected based on the "),uge=a("code"),SZo=o("model_type"),PZo=o(` property of the config object (either
passed as an argument or loaded from `),pge=a("code"),$Zo=o("pretrained_model_name_or_path"),IZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=a("code"),jZo=o("pretrained_model_name_or_path"),DZo=o(":"),NZo=l(),H=a("ul"),zF=a("li"),bge=a("strong"),qZo=o("albert"),OZo=o(" \u2014 "),Gq=a("a"),GZo=o("TFAlbertForPreTraining"),XZo=o(" (ALBERT model)"),VZo=l(),WF=a("li"),vge=a("strong"),zZo=o("bart"),WZo=o(" \u2014 "),Xq=a("a"),QZo=o("TFBartForConditionalGeneration"),HZo=o(" (BART model)"),UZo=l(),QF=a("li"),Tge=a("strong"),JZo=o("bert"),YZo=o(" \u2014 "),Vq=a("a"),KZo=o("TFBertForPreTraining"),ZZo=o(" (BERT model)"),eer=l(),HF=a("li"),Fge=a("strong"),oer=o("camembert"),rer=o(" \u2014 "),zq=a("a"),ter=o("TFCamembertForMaskedLM"),aer=o(" (CamemBERT model)"),ser=l(),UF=a("li"),Cge=a("strong"),ner=o("ctrl"),ler=o(" \u2014 "),Wq=a("a"),ier=o("TFCTRLLMHeadModel"),der=o(" (CTRL model)"),cer=l(),JF=a("li"),Mge=a("strong"),mer=o("distilbert"),fer=o(" \u2014 "),Qq=a("a"),ger=o("TFDistilBertForMaskedLM"),her=o(" (DistilBERT model)"),uer=l(),YF=a("li"),Ege=a("strong"),per=o("electra"),_er=o(" \u2014 "),Hq=a("a"),ber=o("TFElectraForPreTraining"),ver=o(" (ELECTRA model)"),Ter=l(),KF=a("li"),yge=a("strong"),Fer=o("flaubert"),Cer=o(" \u2014 "),Uq=a("a"),Mer=o("TFFlaubertWithLMHeadModel"),Eer=o(" (FlauBERT model)"),yer=l(),ZF=a("li"),wge=a("strong"),wer=o("funnel"),Aer=o(" \u2014 "),Jq=a("a"),Ler=o("TFFunnelForPreTraining"),Ber=o(" (Funnel Transformer model)"),xer=l(),eC=a("li"),Age=a("strong"),ker=o("gpt2"),Rer=o(" \u2014 "),Yq=a("a"),Ser=o("TFGPT2LMHeadModel"),Per=o(" (OpenAI GPT-2 model)"),$er=l(),oC=a("li"),Lge=a("strong"),Ier=o("layoutlm"),jer=o(" \u2014 "),Kq=a("a"),Der=o("TFLayoutLMForMaskedLM"),Ner=o(" (LayoutLM model)"),qer=l(),rC=a("li"),Bge=a("strong"),Oer=o("lxmert"),Ger=o(" \u2014 "),Zq=a("a"),Xer=o("TFLxmertForPreTraining"),Ver=o(" (LXMERT model)"),zer=l(),tC=a("li"),xge=a("strong"),Wer=o("mobilebert"),Qer=o(" \u2014 "),eO=a("a"),Her=o("TFMobileBertForPreTraining"),Uer=o(" (MobileBERT model)"),Jer=l(),aC=a("li"),kge=a("strong"),Yer=o("mpnet"),Ker=o(" \u2014 "),oO=a("a"),Zer=o("TFMPNetForMaskedLM"),eor=o(" (MPNet model)"),oor=l(),sC=a("li"),Rge=a("strong"),ror=o("openai-gpt"),tor=o(" \u2014 "),rO=a("a"),aor=o("TFOpenAIGPTLMHeadModel"),sor=o(" (OpenAI GPT model)"),nor=l(),nC=a("li"),Sge=a("strong"),lor=o("roberta"),ior=o(" \u2014 "),tO=a("a"),dor=o("TFRobertaForMaskedLM"),cor=o(" (RoBERTa model)"),mor=l(),lC=a("li"),Pge=a("strong"),gor=o("t5"),hor=o(" \u2014 "),aO=a("a"),uor=o("TFT5ForConditionalGeneration"),por=o(" (T5 model)"),_or=l(),iC=a("li"),$ge=a("strong"),bor=o("tapas"),vor=o(" \u2014 "),sO=a("a"),Tor=o("TFTapasForMaskedLM"),For=o(" (TAPAS model)"),Cor=l(),dC=a("li"),Ige=a("strong"),Mor=o("transfo-xl"),Eor=o(" \u2014 "),nO=a("a"),yor=o("TFTransfoXLLMHeadModel"),wor=o(" (Transformer-XL model)"),Aor=l(),cC=a("li"),jge=a("strong"),Lor=o("xlm"),Bor=o(" \u2014 "),lO=a("a"),xor=o("TFXLMWithLMHeadModel"),kor=o(" (XLM model)"),Ror=l(),mC=a("li"),Dge=a("strong"),Sor=o("xlm-roberta"),Por=o(" \u2014 "),iO=a("a"),$or=o("TFXLMRobertaForMaskedLM"),Ior=o(" (XLM-RoBERTa model)"),jor=l(),fC=a("li"),Nge=a("strong"),Dor=o("xlnet"),Nor=o(" \u2014 "),dO=a("a"),qor=o("TFXLNetLMHeadModel"),Oor=o(" (XLNet model)"),Gor=l(),qge=a("p"),Xor=o("Examples:"),Vor=l(),m(OA.$$.fragment),uke=l(),vc=a("h2"),gC=a("a"),Oge=a("span"),m(GA.$$.fragment),zor=l(),Gge=a("span"),Wor=o("TFAutoModelForCausalLM"),pke=l(),Fr=a("div"),m(XA.$$.fragment),Qor=l(),Tc=a("p"),Hor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Xge=a("code"),Uor=o("from_pretrained()"),Jor=o("class method or the "),Vge=a("code"),Yor=o("from_config()"),Kor=o(`class
method.`),Zor=l(),VA=a("p"),err=o("This class cannot be instantiated directly using "),zge=a("code"),orr=o("__init__()"),rrr=o(" (throws an error)."),trr=l(),ut=a("div"),m(zA.$$.fragment),arr=l(),Wge=a("p"),srr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),nrr=l(),Fc=a("p"),lrr=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),irr=o("not"),drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=a("code"),crr=o("from_pretrained()"),mrr=o("to load the model weights."),frr=l(),Uge=a("p"),grr=o("Examples:"),hrr=l(),m(WA.$$.fragment),urr=l(),po=a("div"),m(QA.$$.fragment),prr=l(),Jge=a("p"),_rr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),brr=l(),_s=a("p"),vrr=o("The model class to instantiate is selected based on the "),Yge=a("code"),Trr=o("model_type"),Frr=o(` property of the config object (either
passed as an argument or loaded from `),Kge=a("code"),Crr=o("pretrained_model_name_or_path"),Mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=a("code"),Err=o("pretrained_model_name_or_path"),yrr=o(":"),wrr=l(),fe=a("ul"),hC=a("li"),ehe=a("strong"),Arr=o("bert"),Lrr=o(" \u2014 "),cO=a("a"),Brr=o("TFBertLMHeadModel"),xrr=o(" (BERT model)"),krr=l(),uC=a("li"),ohe=a("strong"),Rrr=o("camembert"),Srr=o(" \u2014 "),mO=a("a"),Prr=o("TFCamembertForCausalLM"),$rr=o(" (CamemBERT model)"),Irr=l(),pC=a("li"),rhe=a("strong"),jrr=o("ctrl"),Drr=o(" \u2014 "),fO=a("a"),Nrr=o("TFCTRLLMHeadModel"),qrr=o(" (CTRL model)"),Orr=l(),_C=a("li"),the=a("strong"),Grr=o("gpt2"),Xrr=o(" \u2014 "),gO=a("a"),Vrr=o("TFGPT2LMHeadModel"),zrr=o(" (OpenAI GPT-2 model)"),Wrr=l(),bC=a("li"),ahe=a("strong"),Qrr=o("openai-gpt"),Hrr=o(" \u2014 "),hO=a("a"),Urr=o("TFOpenAIGPTLMHeadModel"),Jrr=o(" (OpenAI GPT model)"),Yrr=l(),vC=a("li"),she=a("strong"),Krr=o("rembert"),Zrr=o(" \u2014 "),uO=a("a"),etr=o("TFRemBertForCausalLM"),otr=o(" (RemBERT model)"),rtr=l(),TC=a("li"),nhe=a("strong"),ttr=o("roberta"),atr=o(" \u2014 "),pO=a("a"),str=o("TFRobertaForCausalLM"),ntr=o(" (RoBERTa model)"),ltr=l(),FC=a("li"),lhe=a("strong"),itr=o("roformer"),dtr=o(" \u2014 "),_O=a("a"),ctr=o("TFRoFormerForCausalLM"),mtr=o(" (RoFormer model)"),ftr=l(),CC=a("li"),ihe=a("strong"),gtr=o("transfo-xl"),htr=o(" \u2014 "),bO=a("a"),utr=o("TFTransfoXLLMHeadModel"),ptr=o(" (Transformer-XL model)"),_tr=l(),MC=a("li"),dhe=a("strong"),btr=o("xlm"),vtr=o(" \u2014 "),vO=a("a"),Ttr=o("TFXLMWithLMHeadModel"),Ftr=o(" (XLM model)"),Ctr=l(),EC=a("li"),che=a("strong"),Mtr=o("xlnet"),Etr=o(" \u2014 "),TO=a("a"),ytr=o("TFXLNetLMHeadModel"),wtr=o(" (XLNet model)"),Atr=l(),mhe=a("p"),Ltr=o("Examples:"),Btr=l(),m(HA.$$.fragment),_ke=l(),Cc=a("h2"),yC=a("a"),fhe=a("span"),m(UA.$$.fragment),xtr=l(),ghe=a("span"),ktr=o("TFAutoModelForImageClassification"),bke=l(),Cr=a("div"),m(JA.$$.fragment),Rtr=l(),Mc=a("p"),Str=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hhe=a("code"),Ptr=o("from_pretrained()"),$tr=o("class method or the "),uhe=a("code"),Itr=o("from_config()"),jtr=o(`class
method.`),Dtr=l(),YA=a("p"),Ntr=o("This class cannot be instantiated directly using "),phe=a("code"),qtr=o("__init__()"),Otr=o(" (throws an error)."),Gtr=l(),pt=a("div"),m(KA.$$.fragment),Xtr=l(),_he=a("p"),Vtr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ztr=l(),Ec=a("p"),Wtr=o(`Note:
Loading a model from its configuration file does `),bhe=a("strong"),Qtr=o("not"),Htr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vhe=a("code"),Utr=o("from_pretrained()"),Jtr=o("to load the model weights."),Ytr=l(),The=a("p"),Ktr=o("Examples:"),Ztr=l(),m(ZA.$$.fragment),ear=l(),_o=a("div"),m(e0.$$.fragment),oar=l(),Fhe=a("p"),rar=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tar=l(),bs=a("p"),aar=o("The model class to instantiate is selected based on the "),Che=a("code"),sar=o("model_type"),nar=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),lar=o("pretrained_model_name_or_path"),iar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),dar=o("pretrained_model_name_or_path"),car=o(":"),mar=l(),o0=a("ul"),wC=a("li"),yhe=a("strong"),far=o("convnext"),gar=o(" \u2014 "),FO=a("a"),har=o("TFConvNextForImageClassification"),uar=o(" (ConvNext model)"),par=l(),AC=a("li"),whe=a("strong"),_ar=o("vit"),bar=o(" \u2014 "),CO=a("a"),Tar=o("TFViTForImageClassification"),Far=o(" (ViT model)"),Car=l(),Ahe=a("p"),Mar=o("Examples:"),Ear=l(),m(r0.$$.fragment),vke=l(),yc=a("h2"),LC=a("a"),Lhe=a("span"),m(t0.$$.fragment),yar=l(),Bhe=a("span"),war=o("TFAutoModelForMaskedLM"),Tke=l(),Mr=a("div"),m(a0.$$.fragment),Aar=l(),wc=a("p"),Lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xhe=a("code"),Bar=o("from_pretrained()"),xar=o("class method or the "),khe=a("code"),kar=o("from_config()"),Rar=o(`class
method.`),Sar=l(),s0=a("p"),Par=o("This class cannot be instantiated directly using "),Rhe=a("code"),$ar=o("__init__()"),Iar=o(" (throws an error)."),jar=l(),_t=a("div"),m(n0.$$.fragment),Dar=l(),She=a("p"),Nar=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qar=l(),Ac=a("p"),Oar=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),Gar=o("not"),Xar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$he=a("code"),Var=o("from_pretrained()"),zar=o("to load the model weights."),War=l(),Ihe=a("p"),Qar=o("Examples:"),Har=l(),m(l0.$$.fragment),Uar=l(),bo=a("div"),m(i0.$$.fragment),Jar=l(),jhe=a("p"),Yar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kar=l(),vs=a("p"),Zar=o("The model class to instantiate is selected based on the "),Dhe=a("code"),esr=o("model_type"),osr=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),asr=o("pretrained_model_name_or_path"),ssr=o(":"),nsr=l(),Y=a("ul"),BC=a("li"),Ohe=a("strong"),lsr=o("albert"),isr=o(" \u2014 "),MO=a("a"),dsr=o("TFAlbertForMaskedLM"),csr=o(" (ALBERT model)"),msr=l(),xC=a("li"),Ghe=a("strong"),fsr=o("bert"),gsr=o(" \u2014 "),EO=a("a"),hsr=o("TFBertForMaskedLM"),usr=o(" (BERT model)"),psr=l(),kC=a("li"),Xhe=a("strong"),_sr=o("camembert"),bsr=o(" \u2014 "),yO=a("a"),vsr=o("TFCamembertForMaskedLM"),Tsr=o(" (CamemBERT model)"),Fsr=l(),RC=a("li"),Vhe=a("strong"),Csr=o("convbert"),Msr=o(" \u2014 "),wO=a("a"),Esr=o("TFConvBertForMaskedLM"),ysr=o(" (ConvBERT model)"),wsr=l(),SC=a("li"),zhe=a("strong"),Asr=o("deberta"),Lsr=o(" \u2014 "),AO=a("a"),Bsr=o("TFDebertaForMaskedLM"),xsr=o(" (DeBERTa model)"),ksr=l(),PC=a("li"),Whe=a("strong"),Rsr=o("deberta-v2"),Ssr=o(" \u2014 "),LO=a("a"),Psr=o("TFDebertaV2ForMaskedLM"),$sr=o(" (DeBERTa-v2 model)"),Isr=l(),$C=a("li"),Qhe=a("strong"),jsr=o("distilbert"),Dsr=o(" \u2014 "),BO=a("a"),Nsr=o("TFDistilBertForMaskedLM"),qsr=o(" (DistilBERT model)"),Osr=l(),IC=a("li"),Hhe=a("strong"),Gsr=o("electra"),Xsr=o(" \u2014 "),xO=a("a"),Vsr=o("TFElectraForMaskedLM"),zsr=o(" (ELECTRA model)"),Wsr=l(),jC=a("li"),Uhe=a("strong"),Qsr=o("flaubert"),Hsr=o(" \u2014 "),kO=a("a"),Usr=o("TFFlaubertWithLMHeadModel"),Jsr=o(" (FlauBERT model)"),Ysr=l(),DC=a("li"),Jhe=a("strong"),Ksr=o("funnel"),Zsr=o(" \u2014 "),RO=a("a"),enr=o("TFFunnelForMaskedLM"),onr=o(" (Funnel Transformer model)"),rnr=l(),NC=a("li"),Yhe=a("strong"),tnr=o("layoutlm"),anr=o(" \u2014 "),SO=a("a"),snr=o("TFLayoutLMForMaskedLM"),nnr=o(" (LayoutLM model)"),lnr=l(),qC=a("li"),Khe=a("strong"),inr=o("longformer"),dnr=o(" \u2014 "),PO=a("a"),cnr=o("TFLongformerForMaskedLM"),mnr=o(" (Longformer model)"),fnr=l(),OC=a("li"),Zhe=a("strong"),gnr=o("mobilebert"),hnr=o(" \u2014 "),$O=a("a"),unr=o("TFMobileBertForMaskedLM"),pnr=o(" (MobileBERT model)"),_nr=l(),GC=a("li"),eue=a("strong"),bnr=o("mpnet"),vnr=o(" \u2014 "),IO=a("a"),Tnr=o("TFMPNetForMaskedLM"),Fnr=o(" (MPNet model)"),Cnr=l(),XC=a("li"),oue=a("strong"),Mnr=o("rembert"),Enr=o(" \u2014 "),jO=a("a"),ynr=o("TFRemBertForMaskedLM"),wnr=o(" (RemBERT model)"),Anr=l(),VC=a("li"),rue=a("strong"),Lnr=o("roberta"),Bnr=o(" \u2014 "),DO=a("a"),xnr=o("TFRobertaForMaskedLM"),knr=o(" (RoBERTa model)"),Rnr=l(),zC=a("li"),tue=a("strong"),Snr=o("roformer"),Pnr=o(" \u2014 "),NO=a("a"),$nr=o("TFRoFormerForMaskedLM"),Inr=o(" (RoFormer model)"),jnr=l(),WC=a("li"),aue=a("strong"),Dnr=o("tapas"),Nnr=o(" \u2014 "),qO=a("a"),qnr=o("TFTapasForMaskedLM"),Onr=o(" (TAPAS model)"),Gnr=l(),QC=a("li"),sue=a("strong"),Xnr=o("xlm"),Vnr=o(" \u2014 "),OO=a("a"),znr=o("TFXLMWithLMHeadModel"),Wnr=o(" (XLM model)"),Qnr=l(),HC=a("li"),nue=a("strong"),Hnr=o("xlm-roberta"),Unr=o(" \u2014 "),GO=a("a"),Jnr=o("TFXLMRobertaForMaskedLM"),Ynr=o(" (XLM-RoBERTa model)"),Knr=l(),lue=a("p"),Znr=o("Examples:"),elr=l(),m(d0.$$.fragment),Fke=l(),Lc=a("h2"),UC=a("a"),iue=a("span"),m(c0.$$.fragment),olr=l(),due=a("span"),rlr=o("TFAutoModelForSeq2SeqLM"),Cke=l(),Er=a("div"),m(m0.$$.fragment),tlr=l(),Bc=a("p"),alr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cue=a("code"),slr=o("from_pretrained()"),nlr=o("class method or the "),mue=a("code"),llr=o("from_config()"),ilr=o(`class
method.`),dlr=l(),f0=a("p"),clr=o("This class cannot be instantiated directly using "),fue=a("code"),mlr=o("__init__()"),flr=o(" (throws an error)."),glr=l(),bt=a("div"),m(g0.$$.fragment),hlr=l(),gue=a("p"),ulr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),plr=l(),xc=a("p"),_lr=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),blr=o("not"),vlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uue=a("code"),Tlr=o("from_pretrained()"),Flr=o("to load the model weights."),Clr=l(),pue=a("p"),Mlr=o("Examples:"),Elr=l(),m(h0.$$.fragment),ylr=l(),vo=a("div"),m(u0.$$.fragment),wlr=l(),_ue=a("p"),Alr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Llr=l(),Ts=a("p"),Blr=o("The model class to instantiate is selected based on the "),bue=a("code"),xlr=o("model_type"),klr=o(` property of the config object (either
passed as an argument or loaded from `),vue=a("code"),Rlr=o("pretrained_model_name_or_path"),Slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),Plr=o("pretrained_model_name_or_path"),$lr=o(":"),Ilr=l(),pe=a("ul"),JC=a("li"),Fue=a("strong"),jlr=o("bart"),Dlr=o(" \u2014 "),XO=a("a"),Nlr=o("TFBartForConditionalGeneration"),qlr=o(" (BART model)"),Olr=l(),YC=a("li"),Cue=a("strong"),Glr=o("blenderbot"),Xlr=o(" \u2014 "),VO=a("a"),Vlr=o("TFBlenderbotForConditionalGeneration"),zlr=o(" (Blenderbot model)"),Wlr=l(),KC=a("li"),Mue=a("strong"),Qlr=o("blenderbot-small"),Hlr=o(" \u2014 "),zO=a("a"),Ulr=o("TFBlenderbotSmallForConditionalGeneration"),Jlr=o(" (BlenderbotSmall model)"),Ylr=l(),ZC=a("li"),Eue=a("strong"),Klr=o("encoder-decoder"),Zlr=o(" \u2014 "),WO=a("a"),eir=o("TFEncoderDecoderModel"),oir=o(" (Encoder decoder model)"),rir=l(),eM=a("li"),yue=a("strong"),tir=o("led"),air=o(" \u2014 "),QO=a("a"),sir=o("TFLEDForConditionalGeneration"),nir=o(" (LED model)"),lir=l(),oM=a("li"),wue=a("strong"),iir=o("marian"),dir=o(" \u2014 "),HO=a("a"),cir=o("TFMarianMTModel"),mir=o(" (Marian model)"),fir=l(),rM=a("li"),Aue=a("strong"),gir=o("mbart"),hir=o(" \u2014 "),UO=a("a"),uir=o("TFMBartForConditionalGeneration"),pir=o(" (mBART model)"),_ir=l(),tM=a("li"),Lue=a("strong"),bir=o("mt5"),vir=o(" \u2014 "),JO=a("a"),Tir=o("TFMT5ForConditionalGeneration"),Fir=o(" (mT5 model)"),Cir=l(),aM=a("li"),Bue=a("strong"),Mir=o("pegasus"),Eir=o(" \u2014 "),YO=a("a"),yir=o("TFPegasusForConditionalGeneration"),wir=o(" (Pegasus model)"),Air=l(),sM=a("li"),xue=a("strong"),Lir=o("t5"),Bir=o(" \u2014 "),KO=a("a"),xir=o("TFT5ForConditionalGeneration"),kir=o(" (T5 model)"),Rir=l(),kue=a("p"),Sir=o("Examples:"),Pir=l(),m(p0.$$.fragment),Mke=l(),kc=a("h2"),nM=a("a"),Rue=a("span"),m(_0.$$.fragment),$ir=l(),Sue=a("span"),Iir=o("TFAutoModelForSequenceClassification"),Eke=l(),yr=a("div"),m(b0.$$.fragment),jir=l(),Rc=a("p"),Dir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Pue=a("code"),Nir=o("from_pretrained()"),qir=o("class method or the "),$ue=a("code"),Oir=o("from_config()"),Gir=o(`class
method.`),Xir=l(),v0=a("p"),Vir=o("This class cannot be instantiated directly using "),Iue=a("code"),zir=o("__init__()"),Wir=o(" (throws an error)."),Qir=l(),vt=a("div"),m(T0.$$.fragment),Hir=l(),jue=a("p"),Uir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Jir=l(),Sc=a("p"),Yir=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),Kir=o("not"),Zir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nue=a("code"),edr=o("from_pretrained()"),odr=o("to load the model weights."),rdr=l(),que=a("p"),tdr=o("Examples:"),adr=l(),m(F0.$$.fragment),sdr=l(),To=a("div"),m(C0.$$.fragment),ndr=l(),Oue=a("p"),ldr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),idr=l(),Fs=a("p"),ddr=o("The model class to instantiate is selected based on the "),Gue=a("code"),cdr=o("model_type"),mdr=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),fdr=o("pretrained_model_name_or_path"),gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),hdr=o("pretrained_model_name_or_path"),udr=o(":"),pdr=l(),V=a("ul"),lM=a("li"),zue=a("strong"),_dr=o("albert"),bdr=o(" \u2014 "),ZO=a("a"),vdr=o("TFAlbertForSequenceClassification"),Tdr=o(" (ALBERT model)"),Fdr=l(),iM=a("li"),Wue=a("strong"),Cdr=o("bert"),Mdr=o(" \u2014 "),eG=a("a"),Edr=o("TFBertForSequenceClassification"),ydr=o(" (BERT model)"),wdr=l(),dM=a("li"),Que=a("strong"),Adr=o("camembert"),Ldr=o(" \u2014 "),oG=a("a"),Bdr=o("TFCamembertForSequenceClassification"),xdr=o(" (CamemBERT model)"),kdr=l(),cM=a("li"),Hue=a("strong"),Rdr=o("convbert"),Sdr=o(" \u2014 "),rG=a("a"),Pdr=o("TFConvBertForSequenceClassification"),$dr=o(" (ConvBERT model)"),Idr=l(),mM=a("li"),Uue=a("strong"),jdr=o("ctrl"),Ddr=o(" \u2014 "),tG=a("a"),Ndr=o("TFCTRLForSequenceClassification"),qdr=o(" (CTRL model)"),Odr=l(),fM=a("li"),Jue=a("strong"),Gdr=o("deberta"),Xdr=o(" \u2014 "),aG=a("a"),Vdr=o("TFDebertaForSequenceClassification"),zdr=o(" (DeBERTa model)"),Wdr=l(),gM=a("li"),Yue=a("strong"),Qdr=o("deberta-v2"),Hdr=o(" \u2014 "),sG=a("a"),Udr=o("TFDebertaV2ForSequenceClassification"),Jdr=o(" (DeBERTa-v2 model)"),Ydr=l(),hM=a("li"),Kue=a("strong"),Kdr=o("distilbert"),Zdr=o(" \u2014 "),nG=a("a"),ecr=o("TFDistilBertForSequenceClassification"),ocr=o(" (DistilBERT model)"),rcr=l(),uM=a("li"),Zue=a("strong"),tcr=o("electra"),acr=o(" \u2014 "),lG=a("a"),scr=o("TFElectraForSequenceClassification"),ncr=o(" (ELECTRA model)"),lcr=l(),pM=a("li"),epe=a("strong"),icr=o("flaubert"),dcr=o(" \u2014 "),iG=a("a"),ccr=o("TFFlaubertForSequenceClassification"),mcr=o(" (FlauBERT model)"),fcr=l(),_M=a("li"),ope=a("strong"),gcr=o("funnel"),hcr=o(" \u2014 "),dG=a("a"),ucr=o("TFFunnelForSequenceClassification"),pcr=o(" (Funnel Transformer model)"),_cr=l(),bM=a("li"),rpe=a("strong"),bcr=o("gpt2"),vcr=o(" \u2014 "),cG=a("a"),Tcr=o("TFGPT2ForSequenceClassification"),Fcr=o(" (OpenAI GPT-2 model)"),Ccr=l(),vM=a("li"),tpe=a("strong"),Mcr=o("layoutlm"),Ecr=o(" \u2014 "),mG=a("a"),ycr=o("TFLayoutLMForSequenceClassification"),wcr=o(" (LayoutLM model)"),Acr=l(),TM=a("li"),ape=a("strong"),Lcr=o("longformer"),Bcr=o(" \u2014 "),fG=a("a"),xcr=o("TFLongformerForSequenceClassification"),kcr=o(" (Longformer model)"),Rcr=l(),FM=a("li"),spe=a("strong"),Scr=o("mobilebert"),Pcr=o(" \u2014 "),gG=a("a"),$cr=o("TFMobileBertForSequenceClassification"),Icr=o(" (MobileBERT model)"),jcr=l(),CM=a("li"),npe=a("strong"),Dcr=o("mpnet"),Ncr=o(" \u2014 "),hG=a("a"),qcr=o("TFMPNetForSequenceClassification"),Ocr=o(" (MPNet model)"),Gcr=l(),MM=a("li"),lpe=a("strong"),Xcr=o("openai-gpt"),Vcr=o(" \u2014 "),uG=a("a"),zcr=o("TFOpenAIGPTForSequenceClassification"),Wcr=o(" (OpenAI GPT model)"),Qcr=l(),EM=a("li"),ipe=a("strong"),Hcr=o("rembert"),Ucr=o(" \u2014 "),pG=a("a"),Jcr=o("TFRemBertForSequenceClassification"),Ycr=o(" (RemBERT model)"),Kcr=l(),yM=a("li"),dpe=a("strong"),Zcr=o("roberta"),emr=o(" \u2014 "),_G=a("a"),omr=o("TFRobertaForSequenceClassification"),rmr=o(" (RoBERTa model)"),tmr=l(),wM=a("li"),cpe=a("strong"),amr=o("roformer"),smr=o(" \u2014 "),bG=a("a"),nmr=o("TFRoFormerForSequenceClassification"),lmr=o(" (RoFormer model)"),imr=l(),AM=a("li"),mpe=a("strong"),dmr=o("tapas"),cmr=o(" \u2014 "),vG=a("a"),mmr=o("TFTapasForSequenceClassification"),fmr=o(" (TAPAS model)"),gmr=l(),LM=a("li"),fpe=a("strong"),hmr=o("transfo-xl"),umr=o(" \u2014 "),TG=a("a"),pmr=o("TFTransfoXLForSequenceClassification"),_mr=o(" (Transformer-XL model)"),bmr=l(),BM=a("li"),gpe=a("strong"),vmr=o("xlm"),Tmr=o(" \u2014 "),FG=a("a"),Fmr=o("TFXLMForSequenceClassification"),Cmr=o(" (XLM model)"),Mmr=l(),xM=a("li"),hpe=a("strong"),Emr=o("xlm-roberta"),ymr=o(" \u2014 "),CG=a("a"),wmr=o("TFXLMRobertaForSequenceClassification"),Amr=o(" (XLM-RoBERTa model)"),Lmr=l(),kM=a("li"),upe=a("strong"),Bmr=o("xlnet"),xmr=o(" \u2014 "),MG=a("a"),kmr=o("TFXLNetForSequenceClassification"),Rmr=o(" (XLNet model)"),Smr=l(),ppe=a("p"),Pmr=o("Examples:"),$mr=l(),m(M0.$$.fragment),yke=l(),Pc=a("h2"),RM=a("a"),_pe=a("span"),m(E0.$$.fragment),Imr=l(),bpe=a("span"),jmr=o("TFAutoModelForMultipleChoice"),wke=l(),wr=a("div"),m(y0.$$.fragment),Dmr=l(),$c=a("p"),Nmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vpe=a("code"),qmr=o("from_pretrained()"),Omr=o("class method or the "),Tpe=a("code"),Gmr=o("from_config()"),Xmr=o(`class
method.`),Vmr=l(),w0=a("p"),zmr=o("This class cannot be instantiated directly using "),Fpe=a("code"),Wmr=o("__init__()"),Qmr=o(" (throws an error)."),Hmr=l(),Tt=a("div"),m(A0.$$.fragment),Umr=l(),Cpe=a("p"),Jmr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ymr=l(),Ic=a("p"),Kmr=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),Zmr=o("not"),efr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Epe=a("code"),ofr=o("from_pretrained()"),rfr=o("to load the model weights."),tfr=l(),ype=a("p"),afr=o("Examples:"),sfr=l(),m(L0.$$.fragment),nfr=l(),Fo=a("div"),m(B0.$$.fragment),lfr=l(),wpe=a("p"),ifr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dfr=l(),Cs=a("p"),cfr=o("The model class to instantiate is selected based on the "),Ape=a("code"),mfr=o("model_type"),ffr=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),gfr=o("pretrained_model_name_or_path"),hfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),ufr=o("pretrained_model_name_or_path"),pfr=o(":"),_fr=l(),te=a("ul"),SM=a("li"),xpe=a("strong"),bfr=o("albert"),vfr=o(" \u2014 "),EG=a("a"),Tfr=o("TFAlbertForMultipleChoice"),Ffr=o(" (ALBERT model)"),Cfr=l(),PM=a("li"),kpe=a("strong"),Mfr=o("bert"),Efr=o(" \u2014 "),yG=a("a"),yfr=o("TFBertForMultipleChoice"),wfr=o(" (BERT model)"),Afr=l(),$M=a("li"),Rpe=a("strong"),Lfr=o("camembert"),Bfr=o(" \u2014 "),wG=a("a"),xfr=o("TFCamembertForMultipleChoice"),kfr=o(" (CamemBERT model)"),Rfr=l(),IM=a("li"),Spe=a("strong"),Sfr=o("convbert"),Pfr=o(" \u2014 "),AG=a("a"),$fr=o("TFConvBertForMultipleChoice"),Ifr=o(" (ConvBERT model)"),jfr=l(),jM=a("li"),Ppe=a("strong"),Dfr=o("distilbert"),Nfr=o(" \u2014 "),LG=a("a"),qfr=o("TFDistilBertForMultipleChoice"),Ofr=o(" (DistilBERT model)"),Gfr=l(),DM=a("li"),$pe=a("strong"),Xfr=o("electra"),Vfr=o(" \u2014 "),BG=a("a"),zfr=o("TFElectraForMultipleChoice"),Wfr=o(" (ELECTRA model)"),Qfr=l(),NM=a("li"),Ipe=a("strong"),Hfr=o("flaubert"),Ufr=o(" \u2014 "),xG=a("a"),Jfr=o("TFFlaubertForMultipleChoice"),Yfr=o(" (FlauBERT model)"),Kfr=l(),qM=a("li"),jpe=a("strong"),Zfr=o("funnel"),egr=o(" \u2014 "),kG=a("a"),ogr=o("TFFunnelForMultipleChoice"),rgr=o(" (Funnel Transformer model)"),tgr=l(),OM=a("li"),Dpe=a("strong"),agr=o("longformer"),sgr=o(" \u2014 "),RG=a("a"),ngr=o("TFLongformerForMultipleChoice"),lgr=o(" (Longformer model)"),igr=l(),GM=a("li"),Npe=a("strong"),dgr=o("mobilebert"),cgr=o(" \u2014 "),SG=a("a"),mgr=o("TFMobileBertForMultipleChoice"),fgr=o(" (MobileBERT model)"),ggr=l(),XM=a("li"),qpe=a("strong"),hgr=o("mpnet"),ugr=o(" \u2014 "),PG=a("a"),pgr=o("TFMPNetForMultipleChoice"),_gr=o(" (MPNet model)"),bgr=l(),VM=a("li"),Ope=a("strong"),vgr=o("rembert"),Tgr=o(" \u2014 "),$G=a("a"),Fgr=o("TFRemBertForMultipleChoice"),Cgr=o(" (RemBERT model)"),Mgr=l(),zM=a("li"),Gpe=a("strong"),Egr=o("roberta"),ygr=o(" \u2014 "),IG=a("a"),wgr=o("TFRobertaForMultipleChoice"),Agr=o(" (RoBERTa model)"),Lgr=l(),WM=a("li"),Xpe=a("strong"),Bgr=o("roformer"),xgr=o(" \u2014 "),jG=a("a"),kgr=o("TFRoFormerForMultipleChoice"),Rgr=o(" (RoFormer model)"),Sgr=l(),QM=a("li"),Vpe=a("strong"),Pgr=o("xlm"),$gr=o(" \u2014 "),DG=a("a"),Igr=o("TFXLMForMultipleChoice"),jgr=o(" (XLM model)"),Dgr=l(),HM=a("li"),zpe=a("strong"),Ngr=o("xlm-roberta"),qgr=o(" \u2014 "),NG=a("a"),Ogr=o("TFXLMRobertaForMultipleChoice"),Ggr=o(" (XLM-RoBERTa model)"),Xgr=l(),UM=a("li"),Wpe=a("strong"),Vgr=o("xlnet"),zgr=o(" \u2014 "),qG=a("a"),Wgr=o("TFXLNetForMultipleChoice"),Qgr=o(" (XLNet model)"),Hgr=l(),Qpe=a("p"),Ugr=o("Examples:"),Jgr=l(),m(x0.$$.fragment),Ake=l(),jc=a("h2"),JM=a("a"),Hpe=a("span"),m(k0.$$.fragment),Ygr=l(),Upe=a("span"),Kgr=o("TFAutoModelForTableQuestionAnswering"),Lke=l(),Ar=a("div"),m(R0.$$.fragment),Zgr=l(),Dc=a("p"),ehr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Jpe=a("code"),ohr=o("from_pretrained()"),rhr=o("class method or the "),Ype=a("code"),thr=o("from_config()"),ahr=o(`class
method.`),shr=l(),S0=a("p"),nhr=o("This class cannot be instantiated directly using "),Kpe=a("code"),lhr=o("__init__()"),ihr=o(" (throws an error)."),dhr=l(),Ft=a("div"),m(P0.$$.fragment),chr=l(),Zpe=a("p"),mhr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fhr=l(),Nc=a("p"),ghr=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),hhr=o("not"),uhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o_e=a("code"),phr=o("from_pretrained()"),_hr=o("to load the model weights."),bhr=l(),r_e=a("p"),vhr=o("Examples:"),Thr=l(),m($0.$$.fragment),Fhr=l(),Co=a("div"),m(I0.$$.fragment),Chr=l(),t_e=a("p"),Mhr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ehr=l(),Ms=a("p"),yhr=o("The model class to instantiate is selected based on the "),a_e=a("code"),whr=o("model_type"),Ahr=o(` property of the config object (either
passed as an argument or loaded from `),s_e=a("code"),Lhr=o("pretrained_model_name_or_path"),Bhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=a("code"),xhr=o("pretrained_model_name_or_path"),khr=o(":"),Rhr=l(),l_e=a("ul"),YM=a("li"),i_e=a("strong"),Shr=o("tapas"),Phr=o(" \u2014 "),OG=a("a"),$hr=o("TFTapasForQuestionAnswering"),Ihr=o(" (TAPAS model)"),jhr=l(),d_e=a("p"),Dhr=o("Examples:"),Nhr=l(),m(j0.$$.fragment),Bke=l(),qc=a("h2"),KM=a("a"),c_e=a("span"),m(D0.$$.fragment),qhr=l(),m_e=a("span"),Ohr=o("TFAutoModelForTokenClassification"),xke=l(),Lr=a("div"),m(N0.$$.fragment),Ghr=l(),Oc=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),f_e=a("code"),Vhr=o("from_pretrained()"),zhr=o("class method or the "),g_e=a("code"),Whr=o("from_config()"),Qhr=o(`class
method.`),Hhr=l(),q0=a("p"),Uhr=o("This class cannot be instantiated directly using "),h_e=a("code"),Jhr=o("__init__()"),Yhr=o(" (throws an error)."),Khr=l(),Ct=a("div"),m(O0.$$.fragment),Zhr=l(),u_e=a("p"),eur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),our=l(),Gc=a("p"),rur=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),tur=o("not"),aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),__e=a("code"),sur=o("from_pretrained()"),nur=o("to load the model weights."),lur=l(),b_e=a("p"),iur=o("Examples:"),dur=l(),m(G0.$$.fragment),cur=l(),Mo=a("div"),m(X0.$$.fragment),mur=l(),v_e=a("p"),fur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gur=l(),Es=a("p"),hur=o("The model class to instantiate is selected based on the "),T_e=a("code"),uur=o("model_type"),pur=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),_ur=o("pretrained_model_name_or_path"),bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=a("code"),vur=o("pretrained_model_name_or_path"),Tur=o(":"),Fur=l(),K=a("ul"),ZM=a("li"),M_e=a("strong"),Cur=o("albert"),Mur=o(" \u2014 "),GG=a("a"),Eur=o("TFAlbertForTokenClassification"),yur=o(" (ALBERT model)"),wur=l(),e4=a("li"),E_e=a("strong"),Aur=o("bert"),Lur=o(" \u2014 "),XG=a("a"),Bur=o("TFBertForTokenClassification"),xur=o(" (BERT model)"),kur=l(),o4=a("li"),y_e=a("strong"),Rur=o("camembert"),Sur=o(" \u2014 "),VG=a("a"),Pur=o("TFCamembertForTokenClassification"),$ur=o(" (CamemBERT model)"),Iur=l(),r4=a("li"),w_e=a("strong"),jur=o("convbert"),Dur=o(" \u2014 "),zG=a("a"),Nur=o("TFConvBertForTokenClassification"),qur=o(" (ConvBERT model)"),Our=l(),t4=a("li"),A_e=a("strong"),Gur=o("deberta"),Xur=o(" \u2014 "),WG=a("a"),Vur=o("TFDebertaForTokenClassification"),zur=o(" (DeBERTa model)"),Wur=l(),a4=a("li"),L_e=a("strong"),Qur=o("deberta-v2"),Hur=o(" \u2014 "),QG=a("a"),Uur=o("TFDebertaV2ForTokenClassification"),Jur=o(" (DeBERTa-v2 model)"),Yur=l(),s4=a("li"),B_e=a("strong"),Kur=o("distilbert"),Zur=o(" \u2014 "),HG=a("a"),epr=o("TFDistilBertForTokenClassification"),opr=o(" (DistilBERT model)"),rpr=l(),n4=a("li"),x_e=a("strong"),tpr=o("electra"),apr=o(" \u2014 "),UG=a("a"),spr=o("TFElectraForTokenClassification"),npr=o(" (ELECTRA model)"),lpr=l(),l4=a("li"),k_e=a("strong"),ipr=o("flaubert"),dpr=o(" \u2014 "),JG=a("a"),cpr=o("TFFlaubertForTokenClassification"),mpr=o(" (FlauBERT model)"),fpr=l(),i4=a("li"),R_e=a("strong"),gpr=o("funnel"),hpr=o(" \u2014 "),YG=a("a"),upr=o("TFFunnelForTokenClassification"),ppr=o(" (Funnel Transformer model)"),_pr=l(),d4=a("li"),S_e=a("strong"),bpr=o("layoutlm"),vpr=o(" \u2014 "),KG=a("a"),Tpr=o("TFLayoutLMForTokenClassification"),Fpr=o(" (LayoutLM model)"),Cpr=l(),c4=a("li"),P_e=a("strong"),Mpr=o("longformer"),Epr=o(" \u2014 "),ZG=a("a"),ypr=o("TFLongformerForTokenClassification"),wpr=o(" (Longformer model)"),Apr=l(),m4=a("li"),$_e=a("strong"),Lpr=o("mobilebert"),Bpr=o(" \u2014 "),eX=a("a"),xpr=o("TFMobileBertForTokenClassification"),kpr=o(" (MobileBERT model)"),Rpr=l(),f4=a("li"),I_e=a("strong"),Spr=o("mpnet"),Ppr=o(" \u2014 "),oX=a("a"),$pr=o("TFMPNetForTokenClassification"),Ipr=o(" (MPNet model)"),jpr=l(),g4=a("li"),j_e=a("strong"),Dpr=o("rembert"),Npr=o(" \u2014 "),rX=a("a"),qpr=o("TFRemBertForTokenClassification"),Opr=o(" (RemBERT model)"),Gpr=l(),h4=a("li"),D_e=a("strong"),Xpr=o("roberta"),Vpr=o(" \u2014 "),tX=a("a"),zpr=o("TFRobertaForTokenClassification"),Wpr=o(" (RoBERTa model)"),Qpr=l(),u4=a("li"),N_e=a("strong"),Hpr=o("roformer"),Upr=o(" \u2014 "),aX=a("a"),Jpr=o("TFRoFormerForTokenClassification"),Ypr=o(" (RoFormer model)"),Kpr=l(),p4=a("li"),q_e=a("strong"),Zpr=o("xlm"),e_r=o(" \u2014 "),sX=a("a"),o_r=o("TFXLMForTokenClassification"),r_r=o(" (XLM model)"),t_r=l(),_4=a("li"),O_e=a("strong"),a_r=o("xlm-roberta"),s_r=o(" \u2014 "),nX=a("a"),n_r=o("TFXLMRobertaForTokenClassification"),l_r=o(" (XLM-RoBERTa model)"),i_r=l(),b4=a("li"),G_e=a("strong"),d_r=o("xlnet"),c_r=o(" \u2014 "),lX=a("a"),m_r=o("TFXLNetForTokenClassification"),f_r=o(" (XLNet model)"),g_r=l(),X_e=a("p"),h_r=o("Examples:"),u_r=l(),m(V0.$$.fragment),kke=l(),Xc=a("h2"),v4=a("a"),V_e=a("span"),m(z0.$$.fragment),p_r=l(),z_e=a("span"),__r=o("TFAutoModelForQuestionAnswering"),Rke=l(),Br=a("div"),m(W0.$$.fragment),b_r=l(),Vc=a("p"),v_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),W_e=a("code"),T_r=o("from_pretrained()"),F_r=o("class method or the "),Q_e=a("code"),C_r=o("from_config()"),M_r=o(`class
method.`),E_r=l(),Q0=a("p"),y_r=o("This class cannot be instantiated directly using "),H_e=a("code"),w_r=o("__init__()"),A_r=o(" (throws an error)."),L_r=l(),Mt=a("div"),m(H0.$$.fragment),B_r=l(),U_e=a("p"),x_r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),k_r=l(),zc=a("p"),R_r=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),S_r=o("not"),P_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Y_e=a("code"),$_r=o("from_pretrained()"),I_r=o("to load the model weights."),j_r=l(),K_e=a("p"),D_r=o("Examples:"),N_r=l(),m(U0.$$.fragment),q_r=l(),Eo=a("div"),m(J0.$$.fragment),O_r=l(),Z_e=a("p"),G_r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X_r=l(),ys=a("p"),V_r=o("The model class to instantiate is selected based on the "),ebe=a("code"),z_r=o("model_type"),W_r=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),Q_r=o("pretrained_model_name_or_path"),H_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(":"),Y_r=l(),Z=a("ul"),T4=a("li"),tbe=a("strong"),K_r=o("albert"),Z_r=o(" \u2014 "),iX=a("a"),ebr=o("TFAlbertForQuestionAnswering"),obr=o(" (ALBERT model)"),rbr=l(),F4=a("li"),abe=a("strong"),tbr=o("bert"),abr=o(" \u2014 "),dX=a("a"),sbr=o("TFBertForQuestionAnswering"),nbr=o(" (BERT model)"),lbr=l(),C4=a("li"),sbe=a("strong"),ibr=o("camembert"),dbr=o(" \u2014 "),cX=a("a"),cbr=o("TFCamembertForQuestionAnswering"),mbr=o(" (CamemBERT model)"),fbr=l(),M4=a("li"),nbe=a("strong"),gbr=o("convbert"),hbr=o(" \u2014 "),mX=a("a"),ubr=o("TFConvBertForQuestionAnswering"),pbr=o(" (ConvBERT model)"),_br=l(),E4=a("li"),lbe=a("strong"),bbr=o("deberta"),vbr=o(" \u2014 "),fX=a("a"),Tbr=o("TFDebertaForQuestionAnswering"),Fbr=o(" (DeBERTa model)"),Cbr=l(),y4=a("li"),ibe=a("strong"),Mbr=o("deberta-v2"),Ebr=o(" \u2014 "),gX=a("a"),ybr=o("TFDebertaV2ForQuestionAnswering"),wbr=o(" (DeBERTa-v2 model)"),Abr=l(),w4=a("li"),dbe=a("strong"),Lbr=o("distilbert"),Bbr=o(" \u2014 "),hX=a("a"),xbr=o("TFDistilBertForQuestionAnswering"),kbr=o(" (DistilBERT model)"),Rbr=l(),A4=a("li"),cbe=a("strong"),Sbr=o("electra"),Pbr=o(" \u2014 "),uX=a("a"),$br=o("TFElectraForQuestionAnswering"),Ibr=o(" (ELECTRA model)"),jbr=l(),L4=a("li"),mbe=a("strong"),Dbr=o("flaubert"),Nbr=o(" \u2014 "),pX=a("a"),qbr=o("TFFlaubertForQuestionAnsweringSimple"),Obr=o(" (FlauBERT model)"),Gbr=l(),B4=a("li"),fbe=a("strong"),Xbr=o("funnel"),Vbr=o(" \u2014 "),_X=a("a"),zbr=o("TFFunnelForQuestionAnswering"),Wbr=o(" (Funnel Transformer model)"),Qbr=l(),x4=a("li"),gbe=a("strong"),Hbr=o("longformer"),Ubr=o(" \u2014 "),bX=a("a"),Jbr=o("TFLongformerForQuestionAnswering"),Ybr=o(" (Longformer model)"),Kbr=l(),k4=a("li"),hbe=a("strong"),Zbr=o("mobilebert"),e2r=o(" \u2014 "),vX=a("a"),o2r=o("TFMobileBertForQuestionAnswering"),r2r=o(" (MobileBERT model)"),t2r=l(),R4=a("li"),ube=a("strong"),a2r=o("mpnet"),s2r=o(" \u2014 "),TX=a("a"),n2r=o("TFMPNetForQuestionAnswering"),l2r=o(" (MPNet model)"),i2r=l(),S4=a("li"),pbe=a("strong"),d2r=o("rembert"),c2r=o(" \u2014 "),FX=a("a"),m2r=o("TFRemBertForQuestionAnswering"),f2r=o(" (RemBERT model)"),g2r=l(),P4=a("li"),_be=a("strong"),h2r=o("roberta"),u2r=o(" \u2014 "),CX=a("a"),p2r=o("TFRobertaForQuestionAnswering"),_2r=o(" (RoBERTa model)"),b2r=l(),$4=a("li"),bbe=a("strong"),v2r=o("roformer"),T2r=o(" \u2014 "),MX=a("a"),F2r=o("TFRoFormerForQuestionAnswering"),C2r=o(" (RoFormer model)"),M2r=l(),I4=a("li"),vbe=a("strong"),E2r=o("xlm"),y2r=o(" \u2014 "),EX=a("a"),w2r=o("TFXLMForQuestionAnsweringSimple"),A2r=o(" (XLM model)"),L2r=l(),j4=a("li"),Tbe=a("strong"),B2r=o("xlm-roberta"),x2r=o(" \u2014 "),yX=a("a"),k2r=o("TFXLMRobertaForQuestionAnswering"),R2r=o(" (XLM-RoBERTa model)"),S2r=l(),D4=a("li"),Fbe=a("strong"),P2r=o("xlnet"),$2r=o(" \u2014 "),wX=a("a"),I2r=o("TFXLNetForQuestionAnsweringSimple"),j2r=o(" (XLNet model)"),D2r=l(),Cbe=a("p"),N2r=o("Examples:"),q2r=l(),m(Y0.$$.fragment),Ske=l(),Wc=a("h2"),N4=a("a"),Mbe=a("span"),m(K0.$$.fragment),O2r=l(),Ebe=a("span"),G2r=o("TFAutoModelForVision2Seq"),Pke=l(),xr=a("div"),m(Z0.$$.fragment),X2r=l(),Qc=a("p"),V2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ybe=a("code"),z2r=o("from_pretrained()"),W2r=o("class method or the "),wbe=a("code"),Q2r=o("from_config()"),H2r=o(`class
method.`),U2r=l(),eL=a("p"),J2r=o("This class cannot be instantiated directly using "),Abe=a("code"),Y2r=o("__init__()"),K2r=o(" (throws an error)."),Z2r=l(),Et=a("div"),m(oL.$$.fragment),evr=l(),Lbe=a("p"),ovr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rvr=l(),Hc=a("p"),tvr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),avr=o("not"),svr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xbe=a("code"),nvr=o("from_pretrained()"),lvr=o("to load the model weights."),ivr=l(),kbe=a("p"),dvr=o("Examples:"),cvr=l(),m(rL.$$.fragment),mvr=l(),yo=a("div"),m(tL.$$.fragment),fvr=l(),Rbe=a("p"),gvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hvr=l(),ws=a("p"),uvr=o("The model class to instantiate is selected based on the "),Sbe=a("code"),pvr=o("model_type"),_vr=o(` property of the config object (either
passed as an argument or loaded from `),Pbe=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),Tvr=o("pretrained_model_name_or_path"),Fvr=o(":"),Cvr=l(),Ibe=a("ul"),q4=a("li"),jbe=a("strong"),Mvr=o("vision-encoder-decoder"),Evr=o(" \u2014 "),AX=a("a"),yvr=o("TFVisionEncoderDecoderModel"),wvr=o(" (Vision Encoder decoder model)"),Avr=l(),Dbe=a("p"),Lvr=o("Examples:"),Bvr=l(),m(aL.$$.fragment),$ke=l(),Uc=a("h2"),O4=a("a"),Nbe=a("span"),m(sL.$$.fragment),xvr=l(),qbe=a("span"),kvr=o("TFAutoModelForSpeechSeq2Seq"),Ike=l(),kr=a("div"),m(nL.$$.fragment),Rvr=l(),Jc=a("p"),Svr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Obe=a("code"),Pvr=o("from_pretrained()"),$vr=o("class method or the "),Gbe=a("code"),Ivr=o("from_config()"),jvr=o(`class
method.`),Dvr=l(),lL=a("p"),Nvr=o("This class cannot be instantiated directly using "),Xbe=a("code"),qvr=o("__init__()"),Ovr=o(" (throws an error)."),Gvr=l(),yt=a("div"),m(iL.$$.fragment),Xvr=l(),Vbe=a("p"),Vvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zvr=l(),Yc=a("p"),Wvr=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),Qvr=o("not"),Hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wbe=a("code"),Uvr=o("from_pretrained()"),Jvr=o("to load the model weights."),Yvr=l(),Qbe=a("p"),Kvr=o("Examples:"),Zvr=l(),m(dL.$$.fragment),eTr=l(),wo=a("div"),m(cL.$$.fragment),oTr=l(),Hbe=a("p"),rTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tTr=l(),As=a("p"),aTr=o("The model class to instantiate is selected based on the "),Ube=a("code"),sTr=o("model_type"),nTr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),dTr=o("pretrained_model_name_or_path"),cTr=o(":"),mTr=l(),Kbe=a("ul"),G4=a("li"),Zbe=a("strong"),fTr=o("speech_to_text"),gTr=o(" \u2014 "),LX=a("a"),hTr=o("TFSpeech2TextForConditionalGeneration"),uTr=o(" (Speech2Text model)"),pTr=l(),e2e=a("p"),_Tr=o("Examples:"),bTr=l(),m(mL.$$.fragment),jke=l(),Kc=a("h2"),X4=a("a"),o2e=a("span"),m(fL.$$.fragment),vTr=l(),r2e=a("span"),TTr=o("FlaxAutoModel"),Dke=l(),Rr=a("div"),m(gL.$$.fragment),FTr=l(),Zc=a("p"),CTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),t2e=a("code"),MTr=o("from_pretrained()"),ETr=o("class method or the "),a2e=a("code"),yTr=o("from_config()"),wTr=o(`class
method.`),ATr=l(),hL=a("p"),LTr=o("This class cannot be instantiated directly using "),s2e=a("code"),BTr=o("__init__()"),xTr=o(" (throws an error)."),kTr=l(),wt=a("div"),m(uL.$$.fragment),RTr=l(),n2e=a("p"),STr=o("Instantiates one of the base model classes of the library from a configuration."),PTr=l(),em=a("p"),$Tr=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),ITr=o("not"),jTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i2e=a("code"),DTr=o("from_pretrained()"),NTr=o("to load the model weights."),qTr=l(),d2e=a("p"),OTr=o("Examples:"),GTr=l(),m(pL.$$.fragment),XTr=l(),Ao=a("div"),m(_L.$$.fragment),VTr=l(),c2e=a("p"),zTr=o("Instantiate one of the base model classes of the library from a pretrained model."),WTr=l(),Ls=a("p"),QTr=o("The model class to instantiate is selected based on the "),m2e=a("code"),HTr=o("model_type"),UTr=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),JTr=o("pretrained_model_name_or_path"),YTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),KTr=o("pretrained_model_name_or_path"),ZTr=o(":"),e1r=l(),z=a("ul"),V4=a("li"),h2e=a("strong"),o1r=o("albert"),r1r=o(" \u2014 "),BX=a("a"),t1r=o("FlaxAlbertModel"),a1r=o(" (ALBERT model)"),s1r=l(),z4=a("li"),u2e=a("strong"),n1r=o("bart"),l1r=o(" \u2014 "),xX=a("a"),i1r=o("FlaxBartModel"),d1r=o(" (BART model)"),c1r=l(),W4=a("li"),p2e=a("strong"),m1r=o("beit"),f1r=o(" \u2014 "),kX=a("a"),g1r=o("FlaxBeitModel"),h1r=o(" (BEiT model)"),u1r=l(),Q4=a("li"),_2e=a("strong"),p1r=o("bert"),_1r=o(" \u2014 "),RX=a("a"),b1r=o("FlaxBertModel"),v1r=o(" (BERT model)"),T1r=l(),H4=a("li"),b2e=a("strong"),F1r=o("big_bird"),C1r=o(" \u2014 "),SX=a("a"),M1r=o("FlaxBigBirdModel"),E1r=o(" (BigBird model)"),y1r=l(),U4=a("li"),v2e=a("strong"),w1r=o("blenderbot"),A1r=o(" \u2014 "),PX=a("a"),L1r=o("FlaxBlenderbotModel"),B1r=o(" (Blenderbot model)"),x1r=l(),J4=a("li"),T2e=a("strong"),k1r=o("blenderbot-small"),R1r=o(" \u2014 "),$X=a("a"),S1r=o("FlaxBlenderbotSmallModel"),P1r=o(" (BlenderbotSmall model)"),$1r=l(),Y4=a("li"),F2e=a("strong"),I1r=o("clip"),j1r=o(" \u2014 "),IX=a("a"),D1r=o("FlaxCLIPModel"),N1r=o(" (CLIP model)"),q1r=l(),K4=a("li"),C2e=a("strong"),O1r=o("distilbert"),G1r=o(" \u2014 "),jX=a("a"),X1r=o("FlaxDistilBertModel"),V1r=o(" (DistilBERT model)"),z1r=l(),Z4=a("li"),M2e=a("strong"),W1r=o("electra"),Q1r=o(" \u2014 "),DX=a("a"),H1r=o("FlaxElectraModel"),U1r=o(" (ELECTRA model)"),J1r=l(),eE=a("li"),E2e=a("strong"),Y1r=o("gpt2"),K1r=o(" \u2014 "),NX=a("a"),Z1r=o("FlaxGPT2Model"),eFr=o(" (OpenAI GPT-2 model)"),oFr=l(),oE=a("li"),y2e=a("strong"),rFr=o("gpt_neo"),tFr=o(" \u2014 "),qX=a("a"),aFr=o("FlaxGPTNeoModel"),sFr=o(" (GPT Neo model)"),nFr=l(),rE=a("li"),w2e=a("strong"),lFr=o("gptj"),iFr=o(" \u2014 "),OX=a("a"),dFr=o("FlaxGPTJModel"),cFr=o(" (GPT-J model)"),mFr=l(),tE=a("li"),A2e=a("strong"),fFr=o("marian"),gFr=o(" \u2014 "),GX=a("a"),hFr=o("FlaxMarianModel"),uFr=o(" (Marian model)"),pFr=l(),aE=a("li"),L2e=a("strong"),_Fr=o("mbart"),bFr=o(" \u2014 "),XX=a("a"),vFr=o("FlaxMBartModel"),TFr=o(" (mBART model)"),FFr=l(),sE=a("li"),B2e=a("strong"),CFr=o("mt5"),MFr=o(" \u2014 "),VX=a("a"),EFr=o("FlaxMT5Model"),yFr=o(" (mT5 model)"),wFr=l(),nE=a("li"),x2e=a("strong"),AFr=o("pegasus"),LFr=o(" \u2014 "),zX=a("a"),BFr=o("FlaxPegasusModel"),xFr=o(" (Pegasus model)"),kFr=l(),lE=a("li"),k2e=a("strong"),RFr=o("roberta"),SFr=o(" \u2014 "),WX=a("a"),PFr=o("FlaxRobertaModel"),$Fr=o(" (RoBERTa model)"),IFr=l(),iE=a("li"),R2e=a("strong"),jFr=o("roformer"),DFr=o(" \u2014 "),QX=a("a"),NFr=o("FlaxRoFormerModel"),qFr=o(" (RoFormer model)"),OFr=l(),dE=a("li"),S2e=a("strong"),GFr=o("t5"),XFr=o(" \u2014 "),HX=a("a"),VFr=o("FlaxT5Model"),zFr=o(" (T5 model)"),WFr=l(),cE=a("li"),P2e=a("strong"),QFr=o("vision-text-dual-encoder"),HFr=o(" \u2014 "),UX=a("a"),UFr=o("FlaxVisionTextDualEncoderModel"),JFr=o(" (VisionTextDualEncoder model)"),YFr=l(),mE=a("li"),$2e=a("strong"),KFr=o("vit"),ZFr=o(" \u2014 "),JX=a("a"),eCr=o("FlaxViTModel"),oCr=o(" (ViT model)"),rCr=l(),fE=a("li"),I2e=a("strong"),tCr=o("wav2vec2"),aCr=o(" \u2014 "),YX=a("a"),sCr=o("FlaxWav2Vec2Model"),nCr=o(" (Wav2Vec2 model)"),lCr=l(),gE=a("li"),j2e=a("strong"),iCr=o("xglm"),dCr=o(" \u2014 "),KX=a("a"),cCr=o("FlaxXGLMModel"),mCr=o(" (XGLM model)"),fCr=l(),hE=a("li"),D2e=a("strong"),gCr=o("xlm-roberta"),hCr=o(" \u2014 "),ZX=a("a"),uCr=o("FlaxXLMRobertaModel"),pCr=o(" (XLM-RoBERTa model)"),_Cr=l(),N2e=a("p"),bCr=o("Examples:"),vCr=l(),m(bL.$$.fragment),Nke=l(),om=a("h2"),uE=a("a"),q2e=a("span"),m(vL.$$.fragment),TCr=l(),O2e=a("span"),FCr=o("FlaxAutoModelForCausalLM"),qke=l(),Sr=a("div"),m(TL.$$.fragment),CCr=l(),rm=a("p"),MCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),G2e=a("code"),ECr=o("from_pretrained()"),yCr=o("class method or the "),X2e=a("code"),wCr=o("from_config()"),ACr=o(`class
method.`),LCr=l(),FL=a("p"),BCr=o("This class cannot be instantiated directly using "),V2e=a("code"),xCr=o("__init__()"),kCr=o(" (throws an error)."),RCr=l(),At=a("div"),m(CL.$$.fragment),SCr=l(),z2e=a("p"),PCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Cr=l(),tm=a("p"),ICr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),jCr=o("not"),DCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q2e=a("code"),NCr=o("from_pretrained()"),qCr=o("to load the model weights."),OCr=l(),H2e=a("p"),GCr=o("Examples:"),XCr=l(),m(ML.$$.fragment),VCr=l(),Lo=a("div"),m(EL.$$.fragment),zCr=l(),U2e=a("p"),WCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),QCr=l(),Bs=a("p"),HCr=o("The model class to instantiate is selected based on the "),J2e=a("code"),UCr=o("model_type"),JCr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),ZCr=o("pretrained_model_name_or_path"),eMr=o(":"),oMr=l(),ca=a("ul"),pE=a("li"),Z2e=a("strong"),rMr=o("bart"),tMr=o(" \u2014 "),eV=a("a"),aMr=o("FlaxBartForCausalLM"),sMr=o(" (BART model)"),nMr=l(),_E=a("li"),eve=a("strong"),lMr=o("gpt2"),iMr=o(" \u2014 "),oV=a("a"),dMr=o("FlaxGPT2LMHeadModel"),cMr=o(" (OpenAI GPT-2 model)"),mMr=l(),bE=a("li"),ove=a("strong"),fMr=o("gpt_neo"),gMr=o(" \u2014 "),rV=a("a"),hMr=o("FlaxGPTNeoForCausalLM"),uMr=o(" (GPT Neo model)"),pMr=l(),vE=a("li"),rve=a("strong"),_Mr=o("gptj"),bMr=o(" \u2014 "),tV=a("a"),vMr=o("FlaxGPTJForCausalLM"),TMr=o(" (GPT-J model)"),FMr=l(),TE=a("li"),tve=a("strong"),CMr=o("xglm"),MMr=o(" \u2014 "),aV=a("a"),EMr=o("FlaxXGLMForCausalLM"),yMr=o(" (XGLM model)"),wMr=l(),ave=a("p"),AMr=o("Examples:"),LMr=l(),m(yL.$$.fragment),Oke=l(),am=a("h2"),FE=a("a"),sve=a("span"),m(wL.$$.fragment),BMr=l(),nve=a("span"),xMr=o("FlaxAutoModelForPreTraining"),Gke=l(),Pr=a("div"),m(AL.$$.fragment),kMr=l(),sm=a("p"),RMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lve=a("code"),SMr=o("from_pretrained()"),PMr=o("class method or the "),ive=a("code"),$Mr=o("from_config()"),IMr=o(`class
method.`),jMr=l(),LL=a("p"),DMr=o("This class cannot be instantiated directly using "),dve=a("code"),NMr=o("__init__()"),qMr=o(" (throws an error)."),OMr=l(),Lt=a("div"),m(BL.$$.fragment),GMr=l(),cve=a("p"),XMr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VMr=l(),nm=a("p"),zMr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),WMr=o("not"),QMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fve=a("code"),HMr=o("from_pretrained()"),UMr=o("to load the model weights."),JMr=l(),gve=a("p"),YMr=o("Examples:"),KMr=l(),m(xL.$$.fragment),ZMr=l(),Bo=a("div"),m(kL.$$.fragment),e4r=l(),hve=a("p"),o4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r4r=l(),xs=a("p"),t4r=o("The model class to instantiate is selected based on the "),uve=a("code"),a4r=o("model_type"),s4r=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),n4r=o("pretrained_model_name_or_path"),l4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(":"),c4r=l(),ce=a("ul"),CE=a("li"),bve=a("strong"),m4r=o("albert"),f4r=o(" \u2014 "),sV=a("a"),g4r=o("FlaxAlbertForPreTraining"),h4r=o(" (ALBERT model)"),u4r=l(),ME=a("li"),vve=a("strong"),p4r=o("bart"),_4r=o(" \u2014 "),nV=a("a"),b4r=o("FlaxBartForConditionalGeneration"),v4r=o(" (BART model)"),T4r=l(),EE=a("li"),Tve=a("strong"),F4r=o("bert"),C4r=o(" \u2014 "),lV=a("a"),M4r=o("FlaxBertForPreTraining"),E4r=o(" (BERT model)"),y4r=l(),yE=a("li"),Fve=a("strong"),w4r=o("big_bird"),A4r=o(" \u2014 "),iV=a("a"),L4r=o("FlaxBigBirdForPreTraining"),B4r=o(" (BigBird model)"),x4r=l(),wE=a("li"),Cve=a("strong"),k4r=o("electra"),R4r=o(" \u2014 "),dV=a("a"),S4r=o("FlaxElectraForPreTraining"),P4r=o(" (ELECTRA model)"),$4r=l(),AE=a("li"),Mve=a("strong"),I4r=o("mbart"),j4r=o(" \u2014 "),cV=a("a"),D4r=o("FlaxMBartForConditionalGeneration"),N4r=o(" (mBART model)"),q4r=l(),LE=a("li"),Eve=a("strong"),O4r=o("mt5"),G4r=o(" \u2014 "),mV=a("a"),X4r=o("FlaxMT5ForConditionalGeneration"),V4r=o(" (mT5 model)"),z4r=l(),BE=a("li"),yve=a("strong"),W4r=o("roberta"),Q4r=o(" \u2014 "),fV=a("a"),H4r=o("FlaxRobertaForMaskedLM"),U4r=o(" (RoBERTa model)"),J4r=l(),xE=a("li"),wve=a("strong"),Y4r=o("roformer"),K4r=o(" \u2014 "),gV=a("a"),Z4r=o("FlaxRoFormerForMaskedLM"),eEr=o(" (RoFormer model)"),oEr=l(),kE=a("li"),Ave=a("strong"),rEr=o("t5"),tEr=o(" \u2014 "),hV=a("a"),aEr=o("FlaxT5ForConditionalGeneration"),sEr=o(" (T5 model)"),nEr=l(),RE=a("li"),Lve=a("strong"),lEr=o("wav2vec2"),iEr=o(" \u2014 "),uV=a("a"),dEr=o("FlaxWav2Vec2ForPreTraining"),cEr=o(" (Wav2Vec2 model)"),mEr=l(),SE=a("li"),Bve=a("strong"),fEr=o("xlm-roberta"),gEr=o(" \u2014 "),pV=a("a"),hEr=o("FlaxXLMRobertaForMaskedLM"),uEr=o(" (XLM-RoBERTa model)"),pEr=l(),xve=a("p"),_Er=o("Examples:"),bEr=l(),m(RL.$$.fragment),Xke=l(),lm=a("h2"),PE=a("a"),kve=a("span"),m(SL.$$.fragment),vEr=l(),Rve=a("span"),TEr=o("FlaxAutoModelForMaskedLM"),Vke=l(),$r=a("div"),m(PL.$$.fragment),FEr=l(),im=a("p"),CEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Sve=a("code"),MEr=o("from_pretrained()"),EEr=o("class method or the "),Pve=a("code"),yEr=o("from_config()"),wEr=o(`class
method.`),AEr=l(),$L=a("p"),LEr=o("This class cannot be instantiated directly using "),$ve=a("code"),BEr=o("__init__()"),xEr=o(" (throws an error)."),kEr=l(),Bt=a("div"),m(IL.$$.fragment),REr=l(),Ive=a("p"),SEr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PEr=l(),dm=a("p"),$Er=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),IEr=o("not"),jEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dve=a("code"),DEr=o("from_pretrained()"),NEr=o("to load the model weights."),qEr=l(),Nve=a("p"),OEr=o("Examples:"),GEr=l(),m(jL.$$.fragment),XEr=l(),xo=a("div"),m(DL.$$.fragment),VEr=l(),qve=a("p"),zEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WEr=l(),ks=a("p"),QEr=o("The model class to instantiate is selected based on the "),Ove=a("code"),HEr=o("model_type"),UEr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),JEr=o("pretrained_model_name_or_path"),YEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),KEr=o("pretrained_model_name_or_path"),ZEr=o(":"),e3r=l(),_e=a("ul"),$E=a("li"),Vve=a("strong"),o3r=o("albert"),r3r=o(" \u2014 "),_V=a("a"),t3r=o("FlaxAlbertForMaskedLM"),a3r=o(" (ALBERT model)"),s3r=l(),IE=a("li"),zve=a("strong"),n3r=o("bart"),l3r=o(" \u2014 "),bV=a("a"),i3r=o("FlaxBartForConditionalGeneration"),d3r=o(" (BART model)"),c3r=l(),jE=a("li"),Wve=a("strong"),m3r=o("bert"),f3r=o(" \u2014 "),vV=a("a"),g3r=o("FlaxBertForMaskedLM"),h3r=o(" (BERT model)"),u3r=l(),DE=a("li"),Qve=a("strong"),p3r=o("big_bird"),_3r=o(" \u2014 "),TV=a("a"),b3r=o("FlaxBigBirdForMaskedLM"),v3r=o(" (BigBird model)"),T3r=l(),NE=a("li"),Hve=a("strong"),F3r=o("distilbert"),C3r=o(" \u2014 "),FV=a("a"),M3r=o("FlaxDistilBertForMaskedLM"),E3r=o(" (DistilBERT model)"),y3r=l(),qE=a("li"),Uve=a("strong"),w3r=o("electra"),A3r=o(" \u2014 "),CV=a("a"),L3r=o("FlaxElectraForMaskedLM"),B3r=o(" (ELECTRA model)"),x3r=l(),OE=a("li"),Jve=a("strong"),k3r=o("mbart"),R3r=o(" \u2014 "),MV=a("a"),S3r=o("FlaxMBartForConditionalGeneration"),P3r=o(" (mBART model)"),$3r=l(),GE=a("li"),Yve=a("strong"),I3r=o("roberta"),j3r=o(" \u2014 "),EV=a("a"),D3r=o("FlaxRobertaForMaskedLM"),N3r=o(" (RoBERTa model)"),q3r=l(),XE=a("li"),Kve=a("strong"),O3r=o("roformer"),G3r=o(" \u2014 "),yV=a("a"),X3r=o("FlaxRoFormerForMaskedLM"),V3r=o(" (RoFormer model)"),z3r=l(),VE=a("li"),Zve=a("strong"),W3r=o("xlm-roberta"),Q3r=o(" \u2014 "),wV=a("a"),H3r=o("FlaxXLMRobertaForMaskedLM"),U3r=o(" (XLM-RoBERTa model)"),J3r=l(),eTe=a("p"),Y3r=o("Examples:"),K3r=l(),m(NL.$$.fragment),zke=l(),cm=a("h2"),zE=a("a"),oTe=a("span"),m(qL.$$.fragment),Z3r=l(),rTe=a("span"),e5r=o("FlaxAutoModelForSeq2SeqLM"),Wke=l(),Ir=a("div"),m(OL.$$.fragment),o5r=l(),mm=a("p"),r5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tTe=a("code"),t5r=o("from_pretrained()"),a5r=o("class method or the "),aTe=a("code"),s5r=o("from_config()"),n5r=o(`class
method.`),l5r=l(),GL=a("p"),i5r=o("This class cannot be instantiated directly using "),sTe=a("code"),d5r=o("__init__()"),c5r=o(" (throws an error)."),m5r=l(),xt=a("div"),m(XL.$$.fragment),f5r=l(),nTe=a("p"),g5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h5r=l(),fm=a("p"),u5r=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),p5r=o("not"),_5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iTe=a("code"),b5r=o("from_pretrained()"),v5r=o("to load the model weights."),T5r=l(),dTe=a("p"),F5r=o("Examples:"),C5r=l(),m(VL.$$.fragment),M5r=l(),ko=a("div"),m(zL.$$.fragment),E5r=l(),cTe=a("p"),y5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w5r=l(),Rs=a("p"),A5r=o("The model class to instantiate is selected based on the "),mTe=a("code"),L5r=o("model_type"),B5r=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),x5r=o("pretrained_model_name_or_path"),k5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),R5r=o("pretrained_model_name_or_path"),S5r=o(":"),P5r=l(),Me=a("ul"),WE=a("li"),hTe=a("strong"),$5r=o("bart"),I5r=o(" \u2014 "),AV=a("a"),j5r=o("FlaxBartForConditionalGeneration"),D5r=o(" (BART model)"),N5r=l(),QE=a("li"),uTe=a("strong"),q5r=o("blenderbot"),O5r=o(" \u2014 "),LV=a("a"),G5r=o("FlaxBlenderbotForConditionalGeneration"),X5r=o(" (Blenderbot model)"),V5r=l(),HE=a("li"),pTe=a("strong"),z5r=o("blenderbot-small"),W5r=o(" \u2014 "),BV=a("a"),Q5r=o("FlaxBlenderbotSmallForConditionalGeneration"),H5r=o(" (BlenderbotSmall model)"),U5r=l(),UE=a("li"),_Te=a("strong"),J5r=o("encoder-decoder"),Y5r=o(" \u2014 "),xV=a("a"),K5r=o("FlaxEncoderDecoderModel"),Z5r=o(" (Encoder decoder model)"),eyr=l(),JE=a("li"),bTe=a("strong"),oyr=o("marian"),ryr=o(" \u2014 "),kV=a("a"),tyr=o("FlaxMarianMTModel"),ayr=o(" (Marian model)"),syr=l(),YE=a("li"),vTe=a("strong"),nyr=o("mbart"),lyr=o(" \u2014 "),RV=a("a"),iyr=o("FlaxMBartForConditionalGeneration"),dyr=o(" (mBART model)"),cyr=l(),KE=a("li"),TTe=a("strong"),myr=o("mt5"),fyr=o(" \u2014 "),SV=a("a"),gyr=o("FlaxMT5ForConditionalGeneration"),hyr=o(" (mT5 model)"),uyr=l(),ZE=a("li"),FTe=a("strong"),pyr=o("pegasus"),_yr=o(" \u2014 "),PV=a("a"),byr=o("FlaxPegasusForConditionalGeneration"),vyr=o(" (Pegasus model)"),Tyr=l(),e3=a("li"),CTe=a("strong"),Fyr=o("t5"),Cyr=o(" \u2014 "),$V=a("a"),Myr=o("FlaxT5ForConditionalGeneration"),Eyr=o(" (T5 model)"),yyr=l(),MTe=a("p"),wyr=o("Examples:"),Ayr=l(),m(WL.$$.fragment),Qke=l(),gm=a("h2"),o3=a("a"),ETe=a("span"),m(QL.$$.fragment),Lyr=l(),yTe=a("span"),Byr=o("FlaxAutoModelForSequenceClassification"),Hke=l(),jr=a("div"),m(HL.$$.fragment),xyr=l(),hm=a("p"),kyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wTe=a("code"),Ryr=o("from_pretrained()"),Syr=o("class method or the "),ATe=a("code"),Pyr=o("from_config()"),$yr=o(`class
method.`),Iyr=l(),UL=a("p"),jyr=o("This class cannot be instantiated directly using "),LTe=a("code"),Dyr=o("__init__()"),Nyr=o(" (throws an error)."),qyr=l(),kt=a("div"),m(JL.$$.fragment),Oyr=l(),BTe=a("p"),Gyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xyr=l(),um=a("p"),Vyr=o(`Note:
Loading a model from its configuration file does `),xTe=a("strong"),zyr=o("not"),Wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kTe=a("code"),Qyr=o("from_pretrained()"),Hyr=o("to load the model weights."),Uyr=l(),RTe=a("p"),Jyr=o("Examples:"),Yyr=l(),m(YL.$$.fragment),Kyr=l(),Ro=a("div"),m(KL.$$.fragment),Zyr=l(),STe=a("p"),ewr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),owr=l(),Ss=a("p"),rwr=o("The model class to instantiate is selected based on the "),PTe=a("code"),twr=o("model_type"),awr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),swr=o("pretrained_model_name_or_path"),nwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(":"),dwr=l(),be=a("ul"),r3=a("li"),jTe=a("strong"),cwr=o("albert"),mwr=o(" \u2014 "),IV=a("a"),fwr=o("FlaxAlbertForSequenceClassification"),gwr=o(" (ALBERT model)"),hwr=l(),t3=a("li"),DTe=a("strong"),uwr=o("bart"),pwr=o(" \u2014 "),jV=a("a"),_wr=o("FlaxBartForSequenceClassification"),bwr=o(" (BART model)"),vwr=l(),a3=a("li"),NTe=a("strong"),Twr=o("bert"),Fwr=o(" \u2014 "),DV=a("a"),Cwr=o("FlaxBertForSequenceClassification"),Mwr=o(" (BERT model)"),Ewr=l(),s3=a("li"),qTe=a("strong"),ywr=o("big_bird"),wwr=o(" \u2014 "),NV=a("a"),Awr=o("FlaxBigBirdForSequenceClassification"),Lwr=o(" (BigBird model)"),Bwr=l(),n3=a("li"),OTe=a("strong"),xwr=o("distilbert"),kwr=o(" \u2014 "),qV=a("a"),Rwr=o("FlaxDistilBertForSequenceClassification"),Swr=o(" (DistilBERT model)"),Pwr=l(),l3=a("li"),GTe=a("strong"),$wr=o("electra"),Iwr=o(" \u2014 "),OV=a("a"),jwr=o("FlaxElectraForSequenceClassification"),Dwr=o(" (ELECTRA model)"),Nwr=l(),i3=a("li"),XTe=a("strong"),qwr=o("mbart"),Owr=o(" \u2014 "),GV=a("a"),Gwr=o("FlaxMBartForSequenceClassification"),Xwr=o(" (mBART model)"),Vwr=l(),d3=a("li"),VTe=a("strong"),zwr=o("roberta"),Wwr=o(" \u2014 "),XV=a("a"),Qwr=o("FlaxRobertaForSequenceClassification"),Hwr=o(" (RoBERTa model)"),Uwr=l(),c3=a("li"),zTe=a("strong"),Jwr=o("roformer"),Ywr=o(" \u2014 "),VV=a("a"),Kwr=o("FlaxRoFormerForSequenceClassification"),Zwr=o(" (RoFormer model)"),e6r=l(),m3=a("li"),WTe=a("strong"),o6r=o("xlm-roberta"),r6r=o(" \u2014 "),zV=a("a"),t6r=o("FlaxXLMRobertaForSequenceClassification"),a6r=o(" (XLM-RoBERTa model)"),s6r=l(),QTe=a("p"),n6r=o("Examples:"),l6r=l(),m(ZL.$$.fragment),Uke=l(),pm=a("h2"),f3=a("a"),HTe=a("span"),m(e8.$$.fragment),i6r=l(),UTe=a("span"),d6r=o("FlaxAutoModelForQuestionAnswering"),Jke=l(),Dr=a("div"),m(o8.$$.fragment),c6r=l(),_m=a("p"),m6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JTe=a("code"),f6r=o("from_pretrained()"),g6r=o("class method or the "),YTe=a("code"),h6r=o("from_config()"),u6r=o(`class
method.`),p6r=l(),r8=a("p"),_6r=o("This class cannot be instantiated directly using "),KTe=a("code"),b6r=o("__init__()"),v6r=o(" (throws an error)."),T6r=l(),Rt=a("div"),m(t8.$$.fragment),F6r=l(),ZTe=a("p"),C6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M6r=l(),bm=a("p"),E6r=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),y6r=o("not"),w6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o1e=a("code"),A6r=o("from_pretrained()"),L6r=o("to load the model weights."),B6r=l(),r1e=a("p"),x6r=o("Examples:"),k6r=l(),m(a8.$$.fragment),R6r=l(),So=a("div"),m(s8.$$.fragment),S6r=l(),t1e=a("p"),P6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$6r=l(),Ps=a("p"),I6r=o("The model class to instantiate is selected based on the "),a1e=a("code"),j6r=o("model_type"),D6r=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),N6r=o("pretrained_model_name_or_path"),q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),O6r=o("pretrained_model_name_or_path"),G6r=o(":"),X6r=l(),ve=a("ul"),g3=a("li"),l1e=a("strong"),V6r=o("albert"),z6r=o(" \u2014 "),WV=a("a"),W6r=o("FlaxAlbertForQuestionAnswering"),Q6r=o(" (ALBERT model)"),H6r=l(),h3=a("li"),i1e=a("strong"),U6r=o("bart"),J6r=o(" \u2014 "),QV=a("a"),Y6r=o("FlaxBartForQuestionAnswering"),K6r=o(" (BART model)"),Z6r=l(),u3=a("li"),d1e=a("strong"),eAr=o("bert"),oAr=o(" \u2014 "),HV=a("a"),rAr=o("FlaxBertForQuestionAnswering"),tAr=o(" (BERT model)"),aAr=l(),p3=a("li"),c1e=a("strong"),sAr=o("big_bird"),nAr=o(" \u2014 "),UV=a("a"),lAr=o("FlaxBigBirdForQuestionAnswering"),iAr=o(" (BigBird model)"),dAr=l(),_3=a("li"),m1e=a("strong"),cAr=o("distilbert"),mAr=o(" \u2014 "),JV=a("a"),fAr=o("FlaxDistilBertForQuestionAnswering"),gAr=o(" (DistilBERT model)"),hAr=l(),b3=a("li"),f1e=a("strong"),uAr=o("electra"),pAr=o(" \u2014 "),YV=a("a"),_Ar=o("FlaxElectraForQuestionAnswering"),bAr=o(" (ELECTRA model)"),vAr=l(),v3=a("li"),g1e=a("strong"),TAr=o("mbart"),FAr=o(" \u2014 "),KV=a("a"),CAr=o("FlaxMBartForQuestionAnswering"),MAr=o(" (mBART model)"),EAr=l(),T3=a("li"),h1e=a("strong"),yAr=o("roberta"),wAr=o(" \u2014 "),ZV=a("a"),AAr=o("FlaxRobertaForQuestionAnswering"),LAr=o(" (RoBERTa model)"),BAr=l(),F3=a("li"),u1e=a("strong"),xAr=o("roformer"),kAr=o(" \u2014 "),ez=a("a"),RAr=o("FlaxRoFormerForQuestionAnswering"),SAr=o(" (RoFormer model)"),PAr=l(),C3=a("li"),p1e=a("strong"),$Ar=o("xlm-roberta"),IAr=o(" \u2014 "),oz=a("a"),jAr=o("FlaxXLMRobertaForQuestionAnswering"),DAr=o(" (XLM-RoBERTa model)"),NAr=l(),_1e=a("p"),qAr=o("Examples:"),OAr=l(),m(n8.$$.fragment),Yke=l(),vm=a("h2"),M3=a("a"),b1e=a("span"),m(l8.$$.fragment),GAr=l(),v1e=a("span"),XAr=o("FlaxAutoModelForTokenClassification"),Kke=l(),Nr=a("div"),m(i8.$$.fragment),VAr=l(),Tm=a("p"),zAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),T1e=a("code"),WAr=o("from_pretrained()"),QAr=o("class method or the "),F1e=a("code"),HAr=o("from_config()"),UAr=o(`class
method.`),JAr=l(),d8=a("p"),YAr=o("This class cannot be instantiated directly using "),C1e=a("code"),KAr=o("__init__()"),ZAr=o(" (throws an error)."),e0r=l(),St=a("div"),m(c8.$$.fragment),o0r=l(),M1e=a("p"),r0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t0r=l(),Fm=a("p"),a0r=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),s0r=o("not"),n0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y1e=a("code"),l0r=o("from_pretrained()"),i0r=o("to load the model weights."),d0r=l(),w1e=a("p"),c0r=o("Examples:"),m0r=l(),m(m8.$$.fragment),f0r=l(),Po=a("div"),m(f8.$$.fragment),g0r=l(),A1e=a("p"),h0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u0r=l(),$s=a("p"),p0r=o("The model class to instantiate is selected based on the "),L1e=a("code"),_0r=o("model_type"),b0r=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),v0r=o("pretrained_model_name_or_path"),T0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),F0r=o("pretrained_model_name_or_path"),C0r=o(":"),M0r=l(),Re=a("ul"),E3=a("li"),k1e=a("strong"),E0r=o("albert"),y0r=o(" \u2014 "),rz=a("a"),w0r=o("FlaxAlbertForTokenClassification"),A0r=o(" (ALBERT model)"),L0r=l(),y3=a("li"),R1e=a("strong"),B0r=o("bert"),x0r=o(" \u2014 "),tz=a("a"),k0r=o("FlaxBertForTokenClassification"),R0r=o(" (BERT model)"),S0r=l(),w3=a("li"),S1e=a("strong"),P0r=o("big_bird"),$0r=o(" \u2014 "),az=a("a"),I0r=o("FlaxBigBirdForTokenClassification"),j0r=o(" (BigBird model)"),D0r=l(),A3=a("li"),P1e=a("strong"),N0r=o("distilbert"),q0r=o(" \u2014 "),sz=a("a"),O0r=o("FlaxDistilBertForTokenClassification"),G0r=o(" (DistilBERT model)"),X0r=l(),L3=a("li"),$1e=a("strong"),V0r=o("electra"),z0r=o(" \u2014 "),nz=a("a"),W0r=o("FlaxElectraForTokenClassification"),Q0r=o(" (ELECTRA model)"),H0r=l(),B3=a("li"),I1e=a("strong"),U0r=o("roberta"),J0r=o(" \u2014 "),lz=a("a"),Y0r=o("FlaxRobertaForTokenClassification"),K0r=o(" (RoBERTa model)"),Z0r=l(),x3=a("li"),j1e=a("strong"),eLr=o("roformer"),oLr=o(" \u2014 "),iz=a("a"),rLr=o("FlaxRoFormerForTokenClassification"),tLr=o(" (RoFormer model)"),aLr=l(),k3=a("li"),D1e=a("strong"),sLr=o("xlm-roberta"),nLr=o(" \u2014 "),dz=a("a"),lLr=o("FlaxXLMRobertaForTokenClassification"),iLr=o(" (XLM-RoBERTa model)"),dLr=l(),N1e=a("p"),cLr=o("Examples:"),mLr=l(),m(g8.$$.fragment),Zke=l(),Cm=a("h2"),R3=a("a"),q1e=a("span"),m(h8.$$.fragment),fLr=l(),O1e=a("span"),gLr=o("FlaxAutoModelForMultipleChoice"),eRe=l(),qr=a("div"),m(u8.$$.fragment),hLr=l(),Mm=a("p"),uLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),G1e=a("code"),pLr=o("from_pretrained()"),_Lr=o("class method or the "),X1e=a("code"),bLr=o("from_config()"),vLr=o(`class
method.`),TLr=l(),p8=a("p"),FLr=o("This class cannot be instantiated directly using "),V1e=a("code"),CLr=o("__init__()"),MLr=o(" (throws an error)."),ELr=l(),Pt=a("div"),m(_8.$$.fragment),yLr=l(),z1e=a("p"),wLr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ALr=l(),Em=a("p"),LLr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),BLr=o("not"),xLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q1e=a("code"),kLr=o("from_pretrained()"),RLr=o("to load the model weights."),SLr=l(),H1e=a("p"),PLr=o("Examples:"),$Lr=l(),m(b8.$$.fragment),ILr=l(),$o=a("div"),m(v8.$$.fragment),jLr=l(),U1e=a("p"),DLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),NLr=l(),Is=a("p"),qLr=o("The model class to instantiate is selected based on the "),J1e=a("code"),OLr=o("model_type"),GLr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),XLr=o("pretrained_model_name_or_path"),VLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),zLr=o("pretrained_model_name_or_path"),WLr=o(":"),QLr=l(),Se=a("ul"),S3=a("li"),Z1e=a("strong"),HLr=o("albert"),ULr=o(" \u2014 "),cz=a("a"),JLr=o("FlaxAlbertForMultipleChoice"),YLr=o(" (ALBERT model)"),KLr=l(),P3=a("li"),eFe=a("strong"),ZLr=o("bert"),e8r=o(" \u2014 "),mz=a("a"),o8r=o("FlaxBertForMultipleChoice"),r8r=o(" (BERT model)"),t8r=l(),$3=a("li"),oFe=a("strong"),a8r=o("big_bird"),s8r=o(" \u2014 "),fz=a("a"),n8r=o("FlaxBigBirdForMultipleChoice"),l8r=o(" (BigBird model)"),i8r=l(),I3=a("li"),rFe=a("strong"),d8r=o("distilbert"),c8r=o(" \u2014 "),gz=a("a"),m8r=o("FlaxDistilBertForMultipleChoice"),f8r=o(" (DistilBERT model)"),g8r=l(),j3=a("li"),tFe=a("strong"),h8r=o("electra"),u8r=o(" \u2014 "),hz=a("a"),p8r=o("FlaxElectraForMultipleChoice"),_8r=o(" (ELECTRA model)"),b8r=l(),D3=a("li"),aFe=a("strong"),v8r=o("roberta"),T8r=o(" \u2014 "),uz=a("a"),F8r=o("FlaxRobertaForMultipleChoice"),C8r=o(" (RoBERTa model)"),M8r=l(),N3=a("li"),sFe=a("strong"),E8r=o("roformer"),y8r=o(" \u2014 "),pz=a("a"),w8r=o("FlaxRoFormerForMultipleChoice"),A8r=o(" (RoFormer model)"),L8r=l(),q3=a("li"),nFe=a("strong"),B8r=o("xlm-roberta"),x8r=o(" \u2014 "),_z=a("a"),k8r=o("FlaxXLMRobertaForMultipleChoice"),R8r=o(" (XLM-RoBERTa model)"),S8r=l(),lFe=a("p"),P8r=o("Examples:"),$8r=l(),m(T8.$$.fragment),oRe=l(),ym=a("h2"),O3=a("a"),iFe=a("span"),m(F8.$$.fragment),I8r=l(),dFe=a("span"),j8r=o("FlaxAutoModelForNextSentencePrediction"),rRe=l(),Or=a("div"),m(C8.$$.fragment),D8r=l(),wm=a("p"),N8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cFe=a("code"),q8r=o("from_pretrained()"),O8r=o("class method or the "),mFe=a("code"),G8r=o("from_config()"),X8r=o(`class
method.`),V8r=l(),M8=a("p"),z8r=o("This class cannot be instantiated directly using "),fFe=a("code"),W8r=o("__init__()"),Q8r=o(" (throws an error)."),H8r=l(),$t=a("div"),m(E8.$$.fragment),U8r=l(),gFe=a("p"),J8r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Y8r=l(),Am=a("p"),K8r=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),Z8r=o("not"),e7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uFe=a("code"),o7r=o("from_pretrained()"),r7r=o("to load the model weights."),t7r=l(),pFe=a("p"),a7r=o("Examples:"),s7r=l(),m(y8.$$.fragment),n7r=l(),Io=a("div"),m(w8.$$.fragment),l7r=l(),_Fe=a("p"),i7r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),d7r=l(),js=a("p"),c7r=o("The model class to instantiate is selected based on the "),bFe=a("code"),m7r=o("model_type"),f7r=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),u7r=o("pretrained_model_name_or_path"),p7r=o(":"),_7r=l(),FFe=a("ul"),G3=a("li"),CFe=a("strong"),b7r=o("bert"),v7r=o(" \u2014 "),bz=a("a"),T7r=o("FlaxBertForNextSentencePrediction"),F7r=o(" (BERT model)"),C7r=l(),MFe=a("p"),M7r=o("Examples:"),E7r=l(),m(A8.$$.fragment),tRe=l(),Lm=a("h2"),X3=a("a"),EFe=a("span"),m(L8.$$.fragment),y7r=l(),yFe=a("span"),w7r=o("FlaxAutoModelForImageClassification"),aRe=l(),Gr=a("div"),m(B8.$$.fragment),A7r=l(),Bm=a("p"),L7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wFe=a("code"),B7r=o("from_pretrained()"),x7r=o("class method or the "),AFe=a("code"),k7r=o("from_config()"),R7r=o(`class
method.`),S7r=l(),x8=a("p"),P7r=o("This class cannot be instantiated directly using "),LFe=a("code"),$7r=o("__init__()"),I7r=o(" (throws an error)."),j7r=l(),It=a("div"),m(k8.$$.fragment),D7r=l(),BFe=a("p"),N7r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),q7r=l(),xm=a("p"),O7r=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),G7r=o("not"),X7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kFe=a("code"),V7r=o("from_pretrained()"),z7r=o("to load the model weights."),W7r=l(),RFe=a("p"),Q7r=o("Examples:"),H7r=l(),m(R8.$$.fragment),U7r=l(),jo=a("div"),m(S8.$$.fragment),J7r=l(),SFe=a("p"),Y7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),K7r=l(),Ds=a("p"),Z7r=o("The model class to instantiate is selected based on the "),PFe=a("code"),e9r=o("model_type"),o9r=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),r9r=o("pretrained_model_name_or_path"),t9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),a9r=o("pretrained_model_name_or_path"),s9r=o(":"),n9r=l(),P8=a("ul"),V3=a("li"),jFe=a("strong"),l9r=o("beit"),i9r=o(" \u2014 "),vz=a("a"),d9r=o("FlaxBeitForImageClassification"),c9r=o(" (BEiT model)"),m9r=l(),z3=a("li"),DFe=a("strong"),f9r=o("vit"),g9r=o(" \u2014 "),Tz=a("a"),h9r=o("FlaxViTForImageClassification"),u9r=o(" (ViT model)"),p9r=l(),NFe=a("p"),_9r=o("Examples:"),b9r=l(),m($8.$$.fragment),sRe=l(),km=a("h2"),W3=a("a"),qFe=a("span"),m(I8.$$.fragment),v9r=l(),OFe=a("span"),T9r=o("FlaxAutoModelForVision2Seq"),nRe=l(),Xr=a("div"),m(j8.$$.fragment),F9r=l(),Rm=a("p"),C9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GFe=a("code"),M9r=o("from_pretrained()"),E9r=o("class method or the "),XFe=a("code"),y9r=o("from_config()"),w9r=o(`class
method.`),A9r=l(),D8=a("p"),L9r=o("This class cannot be instantiated directly using "),VFe=a("code"),B9r=o("__init__()"),x9r=o(" (throws an error)."),k9r=l(),jt=a("div"),m(N8.$$.fragment),R9r=l(),zFe=a("p"),S9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),P9r=l(),Sm=a("p"),$9r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),I9r=o("not"),j9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QFe=a("code"),D9r=o("from_pretrained()"),N9r=o("to load the model weights."),q9r=l(),HFe=a("p"),O9r=o("Examples:"),G9r=l(),m(q8.$$.fragment),X9r=l(),Do=a("div"),m(O8.$$.fragment),V9r=l(),UFe=a("p"),z9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W9r=l(),Ns=a("p"),Q9r=o("The model class to instantiate is selected based on the "),JFe=a("code"),H9r=o("model_type"),U9r=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),J9r=o("pretrained_model_name_or_path"),Y9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),K9r=o("pretrained_model_name_or_path"),Z9r=o(":"),eBr=l(),ZFe=a("ul"),Q3=a("li"),eCe=a("strong"),oBr=o("vision-encoder-decoder"),rBr=o(" \u2014 "),Fz=a("a"),tBr=o("FlaxVisionEncoderDecoderModel"),aBr=o(" (Vision Encoder decoder model)"),sBr=l(),oCe=a("p"),nBr=o("Examples:"),lBr=l(),m(G8.$$.fragment),this.h()},l(d){const _=DCt('[data-svelte="svelte-1phssyn"]',document.head);J=s(_,"META",{name:!0,content:!0}),_.forEach(t),Pe=i(d),de=s(d,"H1",{class:!0});var X8=n(de);he=s(X8,"A",{id:!0,class:!0,href:!0});var rCe=n(he);io=s(rCe,"SPAN",{});var tCe=n(io);f(me.$$.fragment,tCe),tCe.forEach(t),rCe.forEach(t),Fe=i(X8),Vo=s(X8,"SPAN",{});var dBr=n(Vo);ji=r(dBr,"Auto Classes"),dBr.forEach(t),X8.forEach(t),$m=i(d),ma=s(d,"P",{});var iRe=n(ma);Di=r(iRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=s(iRe,"CODE",{});var cBr=n(Ni);Q5=r(cBr,"from_pretrained()"),cBr.forEach(t),Im=r(iRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),iRe.forEach(t),Le=i(d),co=s(d,"P",{});var H3=n(co);qi=r(H3,"Instantiating one of "),qs=s(H3,"A",{href:!0});var mBr=n(qs);H5=r(mBr,"AutoConfig"),mBr.forEach(t),Os=r(H3,", "),Gs=s(H3,"A",{href:!0});var fBr=n(Gs);U5=r(fBr,"AutoModel"),fBr.forEach(t),Oi=r(H3,`, and
`),Xs=s(H3,"A",{href:!0});var gBr=n(Xs);J5=r(gBr,"AutoTokenizer"),gBr.forEach(t),Gi=r(H3," will directly create a class of the relevant architecture. For instance"),H3.forEach(t),jm=i(d),f(qa.$$.fragment,d),mo=i(d),ue=s(d,"P",{});var dRe=n(ue);q7=r(dRe,"will create a model that is an instance of "),Xi=s(dRe,"A",{href:!0});var hBr=n(Xi);O7=r(hBr,"BertModel"),hBr.forEach(t),G7=r(dRe,"."),dRe.forEach(t),zo=i(d),Oa=s(d,"P",{});var cRe=n(Oa);X7=r(cRe,"There is one class of "),Dm=s(cRe,"CODE",{});var uBr=n(Dm);V7=r(uBr,"AutoModel"),uBr.forEach(t),TPe=r(cRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cRe.forEach(t),nxe=i(d),Vi=s(d,"H2",{class:!0});var mRe=n(Vi);Nm=s(mRe,"A",{id:!0,class:!0,href:!0});var pBr=n(Nm);hQ=s(pBr,"SPAN",{});var _Br=n(hQ);f(Y5.$$.fragment,_Br),_Br.forEach(t),pBr.forEach(t),FPe=i(mRe),uQ=s(mRe,"SPAN",{});var bBr=n(uQ);CPe=r(bBr,"Extending the Auto Classes"),bBr.forEach(t),mRe.forEach(t),lxe=i(d),Vs=s(d,"P",{});var Cz=n(Vs);MPe=r(Cz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pQ=s(Cz,"CODE",{});var vBr=n(pQ);EPe=r(vBr,"NewModel"),vBr.forEach(t),yPe=r(Cz,", make sure you have a "),_Q=s(Cz,"CODE",{});var TBr=n(_Q);wPe=r(TBr,"NewModelConfig"),TBr.forEach(t),APe=r(Cz,` then you can add those to the auto
classes like this:`),Cz.forEach(t),ixe=i(d),f(K5.$$.fragment,d),dxe=i(d),z7=s(d,"P",{});var FBr=n(z7);LPe=r(FBr,"You will then be able to use the auto classes like you would usually do!"),FBr.forEach(t),cxe=i(d),f(qm.$$.fragment,d),mxe=i(d),zi=s(d,"H2",{class:!0});var fRe=n(zi);Om=s(fRe,"A",{id:!0,class:!0,href:!0});var CBr=n(Om);bQ=s(CBr,"SPAN",{});var MBr=n(bQ);f(Z5.$$.fragment,MBr),MBr.forEach(t),CBr.forEach(t),BPe=i(fRe),vQ=s(fRe,"SPAN",{});var EBr=n(vQ);xPe=r(EBr,"AutoConfig"),EBr.forEach(t),fRe.forEach(t),fxe=i(d),Wo=s(d,"DIV",{class:!0});var Gn=n(Wo);f(ey.$$.fragment,Gn),kPe=i(Gn),oy=s(Gn,"P",{});var gRe=n(oy);RPe=r(gRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),W7=s(gRe,"A",{href:!0});var yBr=n(W7);SPe=r(yBr,"from_pretrained()"),yBr.forEach(t),PPe=r(gRe," class method."),gRe.forEach(t),$Pe=i(Gn),ry=s(Gn,"P",{});var hRe=n(ry);IPe=r(hRe,"This class cannot be instantiated directly using "),TQ=s(hRe,"CODE",{});var wBr=n(TQ);jPe=r(wBr,"__init__()"),wBr.forEach(t),DPe=r(hRe," (throws an error)."),hRe.forEach(t),NPe=i(Gn),fo=s(Gn,"DIV",{class:!0});var ga=n(fo);f(ty.$$.fragment,ga),qPe=i(ga),FQ=s(ga,"P",{});var ABr=n(FQ);OPe=r(ABr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),ABr.forEach(t),GPe=i(ga),Wi=s(ga,"P",{});var Mz=n(Wi);XPe=r(Mz,"The configuration class to instantiate is selected based on the "),CQ=s(Mz,"CODE",{});var LBr=n(CQ);VPe=r(LBr,"model_type"),LBr.forEach(t),zPe=r(Mz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MQ=s(Mz,"CODE",{});var BBr=n(MQ);WPe=r(BBr,"pretrained_model_name_or_path"),BBr.forEach(t),QPe=r(Mz,":"),Mz.forEach(t),HPe=i(ga),v=s(ga,"UL",{});var T=n(v);Gm=s(T,"LI",{});var aCe=n(Gm);EQ=s(aCe,"STRONG",{});var xBr=n(EQ);UPe=r(xBr,"albert"),xBr.forEach(t),JPe=r(aCe," \u2014 "),Q7=s(aCe,"A",{href:!0});var kBr=n(Q7);YPe=r(kBr,"AlbertConfig"),kBr.forEach(t),KPe=r(aCe," (ALBERT model)"),aCe.forEach(t),ZPe=i(T),Xm=s(T,"LI",{});var sCe=n(Xm);yQ=s(sCe,"STRONG",{});var RBr=n(yQ);e$e=r(RBr,"bart"),RBr.forEach(t),o$e=r(sCe," \u2014 "),H7=s(sCe,"A",{href:!0});var SBr=n(H7);r$e=r(SBr,"BartConfig"),SBr.forEach(t),t$e=r(sCe," (BART model)"),sCe.forEach(t),a$e=i(T),Vm=s(T,"LI",{});var nCe=n(Vm);wQ=s(nCe,"STRONG",{});var PBr=n(wQ);s$e=r(PBr,"beit"),PBr.forEach(t),n$e=r(nCe," \u2014 "),U7=s(nCe,"A",{href:!0});var $Br=n(U7);l$e=r($Br,"BeitConfig"),$Br.forEach(t),i$e=r(nCe," (BEiT model)"),nCe.forEach(t),d$e=i(T),zm=s(T,"LI",{});var lCe=n(zm);AQ=s(lCe,"STRONG",{});var IBr=n(AQ);c$e=r(IBr,"bert"),IBr.forEach(t),m$e=r(lCe," \u2014 "),J7=s(lCe,"A",{href:!0});var jBr=n(J7);f$e=r(jBr,"BertConfig"),jBr.forEach(t),g$e=r(lCe," (BERT model)"),lCe.forEach(t),h$e=i(T),Wm=s(T,"LI",{});var iCe=n(Wm);LQ=s(iCe,"STRONG",{});var DBr=n(LQ);u$e=r(DBr,"bert-generation"),DBr.forEach(t),p$e=r(iCe," \u2014 "),Y7=s(iCe,"A",{href:!0});var NBr=n(Y7);_$e=r(NBr,"BertGenerationConfig"),NBr.forEach(t),b$e=r(iCe," (Bert Generation model)"),iCe.forEach(t),v$e=i(T),Qm=s(T,"LI",{});var dCe=n(Qm);BQ=s(dCe,"STRONG",{});var qBr=n(BQ);T$e=r(qBr,"big_bird"),qBr.forEach(t),F$e=r(dCe," \u2014 "),K7=s(dCe,"A",{href:!0});var OBr=n(K7);C$e=r(OBr,"BigBirdConfig"),OBr.forEach(t),M$e=r(dCe," (BigBird model)"),dCe.forEach(t),E$e=i(T),Hm=s(T,"LI",{});var cCe=n(Hm);xQ=s(cCe,"STRONG",{});var GBr=n(xQ);y$e=r(GBr,"bigbird_pegasus"),GBr.forEach(t),w$e=r(cCe," \u2014 "),Z7=s(cCe,"A",{href:!0});var XBr=n(Z7);A$e=r(XBr,"BigBirdPegasusConfig"),XBr.forEach(t),L$e=r(cCe," (BigBirdPegasus model)"),cCe.forEach(t),B$e=i(T),Um=s(T,"LI",{});var mCe=n(Um);kQ=s(mCe,"STRONG",{});var VBr=n(kQ);x$e=r(VBr,"blenderbot"),VBr.forEach(t),k$e=r(mCe," \u2014 "),e9=s(mCe,"A",{href:!0});var zBr=n(e9);R$e=r(zBr,"BlenderbotConfig"),zBr.forEach(t),S$e=r(mCe," (Blenderbot model)"),mCe.forEach(t),P$e=i(T),Jm=s(T,"LI",{});var fCe=n(Jm);RQ=s(fCe,"STRONG",{});var WBr=n(RQ);$$e=r(WBr,"blenderbot-small"),WBr.forEach(t),I$e=r(fCe," \u2014 "),o9=s(fCe,"A",{href:!0});var QBr=n(o9);j$e=r(QBr,"BlenderbotSmallConfig"),QBr.forEach(t),D$e=r(fCe," (BlenderbotSmall model)"),fCe.forEach(t),N$e=i(T),Ym=s(T,"LI",{});var gCe=n(Ym);SQ=s(gCe,"STRONG",{});var HBr=n(SQ);q$e=r(HBr,"camembert"),HBr.forEach(t),O$e=r(gCe," \u2014 "),r9=s(gCe,"A",{href:!0});var UBr=n(r9);G$e=r(UBr,"CamembertConfig"),UBr.forEach(t),X$e=r(gCe," (CamemBERT model)"),gCe.forEach(t),V$e=i(T),Km=s(T,"LI",{});var hCe=n(Km);PQ=s(hCe,"STRONG",{});var JBr=n(PQ);z$e=r(JBr,"canine"),JBr.forEach(t),W$e=r(hCe," \u2014 "),t9=s(hCe,"A",{href:!0});var YBr=n(t9);Q$e=r(YBr,"CanineConfig"),YBr.forEach(t),H$e=r(hCe," (Canine model)"),hCe.forEach(t),U$e=i(T),Zm=s(T,"LI",{});var uCe=n(Zm);$Q=s(uCe,"STRONG",{});var KBr=n($Q);J$e=r(KBr,"clip"),KBr.forEach(t),Y$e=r(uCe," \u2014 "),a9=s(uCe,"A",{href:!0});var ZBr=n(a9);K$e=r(ZBr,"CLIPConfig"),ZBr.forEach(t),Z$e=r(uCe," (CLIP model)"),uCe.forEach(t),eIe=i(T),ef=s(T,"LI",{});var pCe=n(ef);IQ=s(pCe,"STRONG",{});var exr=n(IQ);oIe=r(exr,"convbert"),exr.forEach(t),rIe=r(pCe," \u2014 "),s9=s(pCe,"A",{href:!0});var oxr=n(s9);tIe=r(oxr,"ConvBertConfig"),oxr.forEach(t),aIe=r(pCe," (ConvBERT model)"),pCe.forEach(t),sIe=i(T),of=s(T,"LI",{});var _Ce=n(of);jQ=s(_Ce,"STRONG",{});var rxr=n(jQ);nIe=r(rxr,"convnext"),rxr.forEach(t),lIe=r(_Ce," \u2014 "),n9=s(_Ce,"A",{href:!0});var txr=n(n9);iIe=r(txr,"ConvNextConfig"),txr.forEach(t),dIe=r(_Ce," (ConvNext model)"),_Ce.forEach(t),cIe=i(T),rf=s(T,"LI",{});var bCe=n(rf);DQ=s(bCe,"STRONG",{});var axr=n(DQ);mIe=r(axr,"ctrl"),axr.forEach(t),fIe=r(bCe," \u2014 "),l9=s(bCe,"A",{href:!0});var sxr=n(l9);gIe=r(sxr,"CTRLConfig"),sxr.forEach(t),hIe=r(bCe," (CTRL model)"),bCe.forEach(t),uIe=i(T),tf=s(T,"LI",{});var vCe=n(tf);NQ=s(vCe,"STRONG",{});var nxr=n(NQ);pIe=r(nxr,"data2vec-audio"),nxr.forEach(t),_Ie=r(vCe," \u2014 "),i9=s(vCe,"A",{href:!0});var lxr=n(i9);bIe=r(lxr,"Data2VecAudioConfig"),lxr.forEach(t),vIe=r(vCe," (Data2VecAudio model)"),vCe.forEach(t),TIe=i(T),af=s(T,"LI",{});var TCe=n(af);qQ=s(TCe,"STRONG",{});var ixr=n(qQ);FIe=r(ixr,"data2vec-text"),ixr.forEach(t),CIe=r(TCe," \u2014 "),d9=s(TCe,"A",{href:!0});var dxr=n(d9);MIe=r(dxr,"Data2VecTextConfig"),dxr.forEach(t),EIe=r(TCe," (Data2VecText model)"),TCe.forEach(t),yIe=i(T),sf=s(T,"LI",{});var FCe=n(sf);OQ=s(FCe,"STRONG",{});var cxr=n(OQ);wIe=r(cxr,"deberta"),cxr.forEach(t),AIe=r(FCe," \u2014 "),c9=s(FCe,"A",{href:!0});var mxr=n(c9);LIe=r(mxr,"DebertaConfig"),mxr.forEach(t),BIe=r(FCe," (DeBERTa model)"),FCe.forEach(t),xIe=i(T),nf=s(T,"LI",{});var CCe=n(nf);GQ=s(CCe,"STRONG",{});var fxr=n(GQ);kIe=r(fxr,"deberta-v2"),fxr.forEach(t),RIe=r(CCe," \u2014 "),m9=s(CCe,"A",{href:!0});var gxr=n(m9);SIe=r(gxr,"DebertaV2Config"),gxr.forEach(t),PIe=r(CCe," (DeBERTa-v2 model)"),CCe.forEach(t),$Ie=i(T),lf=s(T,"LI",{});var MCe=n(lf);XQ=s(MCe,"STRONG",{});var hxr=n(XQ);IIe=r(hxr,"deit"),hxr.forEach(t),jIe=r(MCe," \u2014 "),f9=s(MCe,"A",{href:!0});var uxr=n(f9);DIe=r(uxr,"DeiTConfig"),uxr.forEach(t),NIe=r(MCe," (DeiT model)"),MCe.forEach(t),qIe=i(T),df=s(T,"LI",{});var ECe=n(df);VQ=s(ECe,"STRONG",{});var pxr=n(VQ);OIe=r(pxr,"detr"),pxr.forEach(t),GIe=r(ECe," \u2014 "),g9=s(ECe,"A",{href:!0});var _xr=n(g9);XIe=r(_xr,"DetrConfig"),_xr.forEach(t),VIe=r(ECe," (DETR model)"),ECe.forEach(t),zIe=i(T),cf=s(T,"LI",{});var yCe=n(cf);zQ=s(yCe,"STRONG",{});var bxr=n(zQ);WIe=r(bxr,"distilbert"),bxr.forEach(t),QIe=r(yCe," \u2014 "),h9=s(yCe,"A",{href:!0});var vxr=n(h9);HIe=r(vxr,"DistilBertConfig"),vxr.forEach(t),UIe=r(yCe," (DistilBERT model)"),yCe.forEach(t),JIe=i(T),mf=s(T,"LI",{});var wCe=n(mf);WQ=s(wCe,"STRONG",{});var Txr=n(WQ);YIe=r(Txr,"dpr"),Txr.forEach(t),KIe=r(wCe," \u2014 "),u9=s(wCe,"A",{href:!0});var Fxr=n(u9);ZIe=r(Fxr,"DPRConfig"),Fxr.forEach(t),eje=r(wCe," (DPR model)"),wCe.forEach(t),oje=i(T),ff=s(T,"LI",{});var ACe=n(ff);QQ=s(ACe,"STRONG",{});var Cxr=n(QQ);rje=r(Cxr,"electra"),Cxr.forEach(t),tje=r(ACe," \u2014 "),p9=s(ACe,"A",{href:!0});var Mxr=n(p9);aje=r(Mxr,"ElectraConfig"),Mxr.forEach(t),sje=r(ACe," (ELECTRA model)"),ACe.forEach(t),nje=i(T),gf=s(T,"LI",{});var LCe=n(gf);HQ=s(LCe,"STRONG",{});var Exr=n(HQ);lje=r(Exr,"encoder-decoder"),Exr.forEach(t),ije=r(LCe," \u2014 "),_9=s(LCe,"A",{href:!0});var yxr=n(_9);dje=r(yxr,"EncoderDecoderConfig"),yxr.forEach(t),cje=r(LCe," (Encoder decoder model)"),LCe.forEach(t),mje=i(T),hf=s(T,"LI",{});var BCe=n(hf);UQ=s(BCe,"STRONG",{});var wxr=n(UQ);fje=r(wxr,"flaubert"),wxr.forEach(t),gje=r(BCe," \u2014 "),b9=s(BCe,"A",{href:!0});var Axr=n(b9);hje=r(Axr,"FlaubertConfig"),Axr.forEach(t),uje=r(BCe," (FlauBERT model)"),BCe.forEach(t),pje=i(T),uf=s(T,"LI",{});var xCe=n(uf);JQ=s(xCe,"STRONG",{});var Lxr=n(JQ);_je=r(Lxr,"fnet"),Lxr.forEach(t),bje=r(xCe," \u2014 "),v9=s(xCe,"A",{href:!0});var Bxr=n(v9);vje=r(Bxr,"FNetConfig"),Bxr.forEach(t),Tje=r(xCe," (FNet model)"),xCe.forEach(t),Fje=i(T),pf=s(T,"LI",{});var kCe=n(pf);YQ=s(kCe,"STRONG",{});var xxr=n(YQ);Cje=r(xxr,"fsmt"),xxr.forEach(t),Mje=r(kCe," \u2014 "),T9=s(kCe,"A",{href:!0});var kxr=n(T9);Eje=r(kxr,"FSMTConfig"),kxr.forEach(t),yje=r(kCe," (FairSeq Machine-Translation model)"),kCe.forEach(t),wje=i(T),_f=s(T,"LI",{});var RCe=n(_f);KQ=s(RCe,"STRONG",{});var Rxr=n(KQ);Aje=r(Rxr,"funnel"),Rxr.forEach(t),Lje=r(RCe," \u2014 "),F9=s(RCe,"A",{href:!0});var Sxr=n(F9);Bje=r(Sxr,"FunnelConfig"),Sxr.forEach(t),xje=r(RCe," (Funnel Transformer model)"),RCe.forEach(t),kje=i(T),bf=s(T,"LI",{});var SCe=n(bf);ZQ=s(SCe,"STRONG",{});var Pxr=n(ZQ);Rje=r(Pxr,"gpt2"),Pxr.forEach(t),Sje=r(SCe," \u2014 "),C9=s(SCe,"A",{href:!0});var $xr=n(C9);Pje=r($xr,"GPT2Config"),$xr.forEach(t),$je=r(SCe," (OpenAI GPT-2 model)"),SCe.forEach(t),Ije=i(T),vf=s(T,"LI",{});var PCe=n(vf);eH=s(PCe,"STRONG",{});var Ixr=n(eH);jje=r(Ixr,"gpt_neo"),Ixr.forEach(t),Dje=r(PCe," \u2014 "),M9=s(PCe,"A",{href:!0});var jxr=n(M9);Nje=r(jxr,"GPTNeoConfig"),jxr.forEach(t),qje=r(PCe," (GPT Neo model)"),PCe.forEach(t),Oje=i(T),Tf=s(T,"LI",{});var $Ce=n(Tf);oH=s($Ce,"STRONG",{});var Dxr=n(oH);Gje=r(Dxr,"gptj"),Dxr.forEach(t),Xje=r($Ce," \u2014 "),E9=s($Ce,"A",{href:!0});var Nxr=n(E9);Vje=r(Nxr,"GPTJConfig"),Nxr.forEach(t),zje=r($Ce," (GPT-J model)"),$Ce.forEach(t),Wje=i(T),Ff=s(T,"LI",{});var ICe=n(Ff);rH=s(ICe,"STRONG",{});var qxr=n(rH);Qje=r(qxr,"hubert"),qxr.forEach(t),Hje=r(ICe," \u2014 "),y9=s(ICe,"A",{href:!0});var Oxr=n(y9);Uje=r(Oxr,"HubertConfig"),Oxr.forEach(t),Jje=r(ICe," (Hubert model)"),ICe.forEach(t),Yje=i(T),Cf=s(T,"LI",{});var jCe=n(Cf);tH=s(jCe,"STRONG",{});var Gxr=n(tH);Kje=r(Gxr,"ibert"),Gxr.forEach(t),Zje=r(jCe," \u2014 "),w9=s(jCe,"A",{href:!0});var Xxr=n(w9);eDe=r(Xxr,"IBertConfig"),Xxr.forEach(t),oDe=r(jCe," (I-BERT model)"),jCe.forEach(t),rDe=i(T),Mf=s(T,"LI",{});var DCe=n(Mf);aH=s(DCe,"STRONG",{});var Vxr=n(aH);tDe=r(Vxr,"imagegpt"),Vxr.forEach(t),aDe=r(DCe," \u2014 "),A9=s(DCe,"A",{href:!0});var zxr=n(A9);sDe=r(zxr,"ImageGPTConfig"),zxr.forEach(t),nDe=r(DCe," (ImageGPT model)"),DCe.forEach(t),lDe=i(T),Ef=s(T,"LI",{});var NCe=n(Ef);sH=s(NCe,"STRONG",{});var Wxr=n(sH);iDe=r(Wxr,"layoutlm"),Wxr.forEach(t),dDe=r(NCe," \u2014 "),L9=s(NCe,"A",{href:!0});var Qxr=n(L9);cDe=r(Qxr,"LayoutLMConfig"),Qxr.forEach(t),mDe=r(NCe," (LayoutLM model)"),NCe.forEach(t),fDe=i(T),yf=s(T,"LI",{});var qCe=n(yf);nH=s(qCe,"STRONG",{});var Hxr=n(nH);gDe=r(Hxr,"layoutlmv2"),Hxr.forEach(t),hDe=r(qCe," \u2014 "),B9=s(qCe,"A",{href:!0});var Uxr=n(B9);uDe=r(Uxr,"LayoutLMv2Config"),Uxr.forEach(t),pDe=r(qCe," (LayoutLMv2 model)"),qCe.forEach(t),_De=i(T),wf=s(T,"LI",{});var OCe=n(wf);lH=s(OCe,"STRONG",{});var Jxr=n(lH);bDe=r(Jxr,"led"),Jxr.forEach(t),vDe=r(OCe," \u2014 "),x9=s(OCe,"A",{href:!0});var Yxr=n(x9);TDe=r(Yxr,"LEDConfig"),Yxr.forEach(t),FDe=r(OCe," (LED model)"),OCe.forEach(t),CDe=i(T),Af=s(T,"LI",{});var GCe=n(Af);iH=s(GCe,"STRONG",{});var Kxr=n(iH);MDe=r(Kxr,"longformer"),Kxr.forEach(t),EDe=r(GCe," \u2014 "),k9=s(GCe,"A",{href:!0});var Zxr=n(k9);yDe=r(Zxr,"LongformerConfig"),Zxr.forEach(t),wDe=r(GCe," (Longformer model)"),GCe.forEach(t),ADe=i(T),Lf=s(T,"LI",{});var XCe=n(Lf);dH=s(XCe,"STRONG",{});var ekr=n(dH);LDe=r(ekr,"luke"),ekr.forEach(t),BDe=r(XCe," \u2014 "),R9=s(XCe,"A",{href:!0});var okr=n(R9);xDe=r(okr,"LukeConfig"),okr.forEach(t),kDe=r(XCe," (LUKE model)"),XCe.forEach(t),RDe=i(T),Bf=s(T,"LI",{});var VCe=n(Bf);cH=s(VCe,"STRONG",{});var rkr=n(cH);SDe=r(rkr,"lxmert"),rkr.forEach(t),PDe=r(VCe," \u2014 "),S9=s(VCe,"A",{href:!0});var tkr=n(S9);$De=r(tkr,"LxmertConfig"),tkr.forEach(t),IDe=r(VCe," (LXMERT model)"),VCe.forEach(t),jDe=i(T),xf=s(T,"LI",{});var zCe=n(xf);mH=s(zCe,"STRONG",{});var akr=n(mH);DDe=r(akr,"m2m_100"),akr.forEach(t),NDe=r(zCe," \u2014 "),P9=s(zCe,"A",{href:!0});var skr=n(P9);qDe=r(skr,"M2M100Config"),skr.forEach(t),ODe=r(zCe," (M2M100 model)"),zCe.forEach(t),GDe=i(T),kf=s(T,"LI",{});var WCe=n(kf);fH=s(WCe,"STRONG",{});var nkr=n(fH);XDe=r(nkr,"marian"),nkr.forEach(t),VDe=r(WCe," \u2014 "),$9=s(WCe,"A",{href:!0});var lkr=n($9);zDe=r(lkr,"MarianConfig"),lkr.forEach(t),WDe=r(WCe," (Marian model)"),WCe.forEach(t),QDe=i(T),Rf=s(T,"LI",{});var QCe=n(Rf);gH=s(QCe,"STRONG",{});var ikr=n(gH);HDe=r(ikr,"maskformer"),ikr.forEach(t),UDe=r(QCe," \u2014 "),I9=s(QCe,"A",{href:!0});var dkr=n(I9);JDe=r(dkr,"MaskFormerConfig"),dkr.forEach(t),YDe=r(QCe," (MaskFormer model)"),QCe.forEach(t),KDe=i(T),Sf=s(T,"LI",{});var HCe=n(Sf);hH=s(HCe,"STRONG",{});var ckr=n(hH);ZDe=r(ckr,"mbart"),ckr.forEach(t),eNe=r(HCe," \u2014 "),j9=s(HCe,"A",{href:!0});var mkr=n(j9);oNe=r(mkr,"MBartConfig"),mkr.forEach(t),rNe=r(HCe," (mBART model)"),HCe.forEach(t),tNe=i(T),Pf=s(T,"LI",{});var UCe=n(Pf);uH=s(UCe,"STRONG",{});var fkr=n(uH);aNe=r(fkr,"megatron-bert"),fkr.forEach(t),sNe=r(UCe," \u2014 "),D9=s(UCe,"A",{href:!0});var gkr=n(D9);nNe=r(gkr,"MegatronBertConfig"),gkr.forEach(t),lNe=r(UCe," (MegatronBert model)"),UCe.forEach(t),iNe=i(T),$f=s(T,"LI",{});var JCe=n($f);pH=s(JCe,"STRONG",{});var hkr=n(pH);dNe=r(hkr,"mobilebert"),hkr.forEach(t),cNe=r(JCe," \u2014 "),N9=s(JCe,"A",{href:!0});var ukr=n(N9);mNe=r(ukr,"MobileBertConfig"),ukr.forEach(t),fNe=r(JCe," (MobileBERT model)"),JCe.forEach(t),gNe=i(T),If=s(T,"LI",{});var YCe=n(If);_H=s(YCe,"STRONG",{});var pkr=n(_H);hNe=r(pkr,"mpnet"),pkr.forEach(t),uNe=r(YCe," \u2014 "),q9=s(YCe,"A",{href:!0});var _kr=n(q9);pNe=r(_kr,"MPNetConfig"),_kr.forEach(t),_Ne=r(YCe," (MPNet model)"),YCe.forEach(t),bNe=i(T),jf=s(T,"LI",{});var KCe=n(jf);bH=s(KCe,"STRONG",{});var bkr=n(bH);vNe=r(bkr,"mt5"),bkr.forEach(t),TNe=r(KCe," \u2014 "),O9=s(KCe,"A",{href:!0});var vkr=n(O9);FNe=r(vkr,"MT5Config"),vkr.forEach(t),CNe=r(KCe," (mT5 model)"),KCe.forEach(t),MNe=i(T),Df=s(T,"LI",{});var ZCe=n(Df);vH=s(ZCe,"STRONG",{});var Tkr=n(vH);ENe=r(Tkr,"nystromformer"),Tkr.forEach(t),yNe=r(ZCe," \u2014 "),G9=s(ZCe,"A",{href:!0});var Fkr=n(G9);wNe=r(Fkr,"NystromformerConfig"),Fkr.forEach(t),ANe=r(ZCe," (Nystromformer model)"),ZCe.forEach(t),LNe=i(T),Nf=s(T,"LI",{});var eMe=n(Nf);TH=s(eMe,"STRONG",{});var Ckr=n(TH);BNe=r(Ckr,"openai-gpt"),Ckr.forEach(t),xNe=r(eMe," \u2014 "),X9=s(eMe,"A",{href:!0});var Mkr=n(X9);kNe=r(Mkr,"OpenAIGPTConfig"),Mkr.forEach(t),RNe=r(eMe," (OpenAI GPT model)"),eMe.forEach(t),SNe=i(T),qf=s(T,"LI",{});var oMe=n(qf);FH=s(oMe,"STRONG",{});var Ekr=n(FH);PNe=r(Ekr,"pegasus"),Ekr.forEach(t),$Ne=r(oMe," \u2014 "),V9=s(oMe,"A",{href:!0});var ykr=n(V9);INe=r(ykr,"PegasusConfig"),ykr.forEach(t),jNe=r(oMe," (Pegasus model)"),oMe.forEach(t),DNe=i(T),Of=s(T,"LI",{});var rMe=n(Of);CH=s(rMe,"STRONG",{});var wkr=n(CH);NNe=r(wkr,"perceiver"),wkr.forEach(t),qNe=r(rMe," \u2014 "),z9=s(rMe,"A",{href:!0});var Akr=n(z9);ONe=r(Akr,"PerceiverConfig"),Akr.forEach(t),GNe=r(rMe," (Perceiver model)"),rMe.forEach(t),XNe=i(T),Gf=s(T,"LI",{});var tMe=n(Gf);MH=s(tMe,"STRONG",{});var Lkr=n(MH);VNe=r(Lkr,"plbart"),Lkr.forEach(t),zNe=r(tMe," \u2014 "),W9=s(tMe,"A",{href:!0});var Bkr=n(W9);WNe=r(Bkr,"PLBartConfig"),Bkr.forEach(t),QNe=r(tMe," (PLBart model)"),tMe.forEach(t),HNe=i(T),Xf=s(T,"LI",{});var aMe=n(Xf);EH=s(aMe,"STRONG",{});var xkr=n(EH);UNe=r(xkr,"poolformer"),xkr.forEach(t),JNe=r(aMe," \u2014 "),Q9=s(aMe,"A",{href:!0});var kkr=n(Q9);YNe=r(kkr,"PoolFormerConfig"),kkr.forEach(t),KNe=r(aMe," (PoolFormer model)"),aMe.forEach(t),ZNe=i(T),Vf=s(T,"LI",{});var sMe=n(Vf);yH=s(sMe,"STRONG",{});var Rkr=n(yH);eqe=r(Rkr,"prophetnet"),Rkr.forEach(t),oqe=r(sMe," \u2014 "),H9=s(sMe,"A",{href:!0});var Skr=n(H9);rqe=r(Skr,"ProphetNetConfig"),Skr.forEach(t),tqe=r(sMe," (ProphetNet model)"),sMe.forEach(t),aqe=i(T),zf=s(T,"LI",{});var nMe=n(zf);wH=s(nMe,"STRONG",{});var Pkr=n(wH);sqe=r(Pkr,"qdqbert"),Pkr.forEach(t),nqe=r(nMe," \u2014 "),U9=s(nMe,"A",{href:!0});var $kr=n(U9);lqe=r($kr,"QDQBertConfig"),$kr.forEach(t),iqe=r(nMe," (QDQBert model)"),nMe.forEach(t),dqe=i(T),Wf=s(T,"LI",{});var lMe=n(Wf);AH=s(lMe,"STRONG",{});var Ikr=n(AH);cqe=r(Ikr,"rag"),Ikr.forEach(t),mqe=r(lMe," \u2014 "),J9=s(lMe,"A",{href:!0});var jkr=n(J9);fqe=r(jkr,"RagConfig"),jkr.forEach(t),gqe=r(lMe," (RAG model)"),lMe.forEach(t),hqe=i(T),Qf=s(T,"LI",{});var iMe=n(Qf);LH=s(iMe,"STRONG",{});var Dkr=n(LH);uqe=r(Dkr,"realm"),Dkr.forEach(t),pqe=r(iMe," \u2014 "),Y9=s(iMe,"A",{href:!0});var Nkr=n(Y9);_qe=r(Nkr,"RealmConfig"),Nkr.forEach(t),bqe=r(iMe," (Realm model)"),iMe.forEach(t),vqe=i(T),Hf=s(T,"LI",{});var dMe=n(Hf);BH=s(dMe,"STRONG",{});var qkr=n(BH);Tqe=r(qkr,"reformer"),qkr.forEach(t),Fqe=r(dMe," \u2014 "),K9=s(dMe,"A",{href:!0});var Okr=n(K9);Cqe=r(Okr,"ReformerConfig"),Okr.forEach(t),Mqe=r(dMe," (Reformer model)"),dMe.forEach(t),Eqe=i(T),Uf=s(T,"LI",{});var cMe=n(Uf);xH=s(cMe,"STRONG",{});var Gkr=n(xH);yqe=r(Gkr,"rembert"),Gkr.forEach(t),wqe=r(cMe," \u2014 "),Z9=s(cMe,"A",{href:!0});var Xkr=n(Z9);Aqe=r(Xkr,"RemBertConfig"),Xkr.forEach(t),Lqe=r(cMe," (RemBERT model)"),cMe.forEach(t),Bqe=i(T),Jf=s(T,"LI",{});var mMe=n(Jf);kH=s(mMe,"STRONG",{});var Vkr=n(kH);xqe=r(Vkr,"retribert"),Vkr.forEach(t),kqe=r(mMe," \u2014 "),eB=s(mMe,"A",{href:!0});var zkr=n(eB);Rqe=r(zkr,"RetriBertConfig"),zkr.forEach(t),Sqe=r(mMe," (RetriBERT model)"),mMe.forEach(t),Pqe=i(T),Yf=s(T,"LI",{});var fMe=n(Yf);RH=s(fMe,"STRONG",{});var Wkr=n(RH);$qe=r(Wkr,"roberta"),Wkr.forEach(t),Iqe=r(fMe," \u2014 "),oB=s(fMe,"A",{href:!0});var Qkr=n(oB);jqe=r(Qkr,"RobertaConfig"),Qkr.forEach(t),Dqe=r(fMe," (RoBERTa model)"),fMe.forEach(t),Nqe=i(T),Kf=s(T,"LI",{});var gMe=n(Kf);SH=s(gMe,"STRONG",{});var Hkr=n(SH);qqe=r(Hkr,"roformer"),Hkr.forEach(t),Oqe=r(gMe," \u2014 "),rB=s(gMe,"A",{href:!0});var Ukr=n(rB);Gqe=r(Ukr,"RoFormerConfig"),Ukr.forEach(t),Xqe=r(gMe," (RoFormer model)"),gMe.forEach(t),Vqe=i(T),Zf=s(T,"LI",{});var hMe=n(Zf);PH=s(hMe,"STRONG",{});var Jkr=n(PH);zqe=r(Jkr,"segformer"),Jkr.forEach(t),Wqe=r(hMe," \u2014 "),tB=s(hMe,"A",{href:!0});var Ykr=n(tB);Qqe=r(Ykr,"SegformerConfig"),Ykr.forEach(t),Hqe=r(hMe," (SegFormer model)"),hMe.forEach(t),Uqe=i(T),eg=s(T,"LI",{});var uMe=n(eg);$H=s(uMe,"STRONG",{});var Kkr=n($H);Jqe=r(Kkr,"sew"),Kkr.forEach(t),Yqe=r(uMe," \u2014 "),aB=s(uMe,"A",{href:!0});var Zkr=n(aB);Kqe=r(Zkr,"SEWConfig"),Zkr.forEach(t),Zqe=r(uMe," (SEW model)"),uMe.forEach(t),eOe=i(T),og=s(T,"LI",{});var pMe=n(og);IH=s(pMe,"STRONG",{});var eRr=n(IH);oOe=r(eRr,"sew-d"),eRr.forEach(t),rOe=r(pMe," \u2014 "),sB=s(pMe,"A",{href:!0});var oRr=n(sB);tOe=r(oRr,"SEWDConfig"),oRr.forEach(t),aOe=r(pMe," (SEW-D model)"),pMe.forEach(t),sOe=i(T),rg=s(T,"LI",{});var _Me=n(rg);jH=s(_Me,"STRONG",{});var rRr=n(jH);nOe=r(rRr,"speech-encoder-decoder"),rRr.forEach(t),lOe=r(_Me," \u2014 "),nB=s(_Me,"A",{href:!0});var tRr=n(nB);iOe=r(tRr,"SpeechEncoderDecoderConfig"),tRr.forEach(t),dOe=r(_Me," (Speech Encoder decoder model)"),_Me.forEach(t),cOe=i(T),tg=s(T,"LI",{});var bMe=n(tg);DH=s(bMe,"STRONG",{});var aRr=n(DH);mOe=r(aRr,"speech_to_text"),aRr.forEach(t),fOe=r(bMe," \u2014 "),lB=s(bMe,"A",{href:!0});var sRr=n(lB);gOe=r(sRr,"Speech2TextConfig"),sRr.forEach(t),hOe=r(bMe," (Speech2Text model)"),bMe.forEach(t),uOe=i(T),ag=s(T,"LI",{});var vMe=n(ag);NH=s(vMe,"STRONG",{});var nRr=n(NH);pOe=r(nRr,"speech_to_text_2"),nRr.forEach(t),_Oe=r(vMe," \u2014 "),iB=s(vMe,"A",{href:!0});var lRr=n(iB);bOe=r(lRr,"Speech2Text2Config"),lRr.forEach(t),vOe=r(vMe," (Speech2Text2 model)"),vMe.forEach(t),TOe=i(T),sg=s(T,"LI",{});var TMe=n(sg);qH=s(TMe,"STRONG",{});var iRr=n(qH);FOe=r(iRr,"splinter"),iRr.forEach(t),COe=r(TMe," \u2014 "),dB=s(TMe,"A",{href:!0});var dRr=n(dB);MOe=r(dRr,"SplinterConfig"),dRr.forEach(t),EOe=r(TMe," (Splinter model)"),TMe.forEach(t),yOe=i(T),ng=s(T,"LI",{});var FMe=n(ng);OH=s(FMe,"STRONG",{});var cRr=n(OH);wOe=r(cRr,"squeezebert"),cRr.forEach(t),AOe=r(FMe," \u2014 "),cB=s(FMe,"A",{href:!0});var mRr=n(cB);LOe=r(mRr,"SqueezeBertConfig"),mRr.forEach(t),BOe=r(FMe," (SqueezeBERT model)"),FMe.forEach(t),xOe=i(T),lg=s(T,"LI",{});var CMe=n(lg);GH=s(CMe,"STRONG",{});var fRr=n(GH);kOe=r(fRr,"swin"),fRr.forEach(t),ROe=r(CMe," \u2014 "),mB=s(CMe,"A",{href:!0});var gRr=n(mB);SOe=r(gRr,"SwinConfig"),gRr.forEach(t),POe=r(CMe," (Swin model)"),CMe.forEach(t),$Oe=i(T),ig=s(T,"LI",{});var MMe=n(ig);XH=s(MMe,"STRONG",{});var hRr=n(XH);IOe=r(hRr,"t5"),hRr.forEach(t),jOe=r(MMe," \u2014 "),fB=s(MMe,"A",{href:!0});var uRr=n(fB);DOe=r(uRr,"T5Config"),uRr.forEach(t),NOe=r(MMe," (T5 model)"),MMe.forEach(t),qOe=i(T),dg=s(T,"LI",{});var EMe=n(dg);VH=s(EMe,"STRONG",{});var pRr=n(VH);OOe=r(pRr,"tapas"),pRr.forEach(t),GOe=r(EMe," \u2014 "),gB=s(EMe,"A",{href:!0});var _Rr=n(gB);XOe=r(_Rr,"TapasConfig"),_Rr.forEach(t),VOe=r(EMe," (TAPAS model)"),EMe.forEach(t),zOe=i(T),cg=s(T,"LI",{});var yMe=n(cg);zH=s(yMe,"STRONG",{});var bRr=n(zH);WOe=r(bRr,"transfo-xl"),bRr.forEach(t),QOe=r(yMe," \u2014 "),hB=s(yMe,"A",{href:!0});var vRr=n(hB);HOe=r(vRr,"TransfoXLConfig"),vRr.forEach(t),UOe=r(yMe," (Transformer-XL model)"),yMe.forEach(t),JOe=i(T),mg=s(T,"LI",{});var wMe=n(mg);WH=s(wMe,"STRONG",{});var TRr=n(WH);YOe=r(TRr,"trocr"),TRr.forEach(t),KOe=r(wMe," \u2014 "),uB=s(wMe,"A",{href:!0});var FRr=n(uB);ZOe=r(FRr,"TrOCRConfig"),FRr.forEach(t),eGe=r(wMe," (TrOCR model)"),wMe.forEach(t),oGe=i(T),fg=s(T,"LI",{});var AMe=n(fg);QH=s(AMe,"STRONG",{});var CRr=n(QH);rGe=r(CRr,"unispeech"),CRr.forEach(t),tGe=r(AMe," \u2014 "),pB=s(AMe,"A",{href:!0});var MRr=n(pB);aGe=r(MRr,"UniSpeechConfig"),MRr.forEach(t),sGe=r(AMe," (UniSpeech model)"),AMe.forEach(t),nGe=i(T),gg=s(T,"LI",{});var LMe=n(gg);HH=s(LMe,"STRONG",{});var ERr=n(HH);lGe=r(ERr,"unispeech-sat"),ERr.forEach(t),iGe=r(LMe," \u2014 "),_B=s(LMe,"A",{href:!0});var yRr=n(_B);dGe=r(yRr,"UniSpeechSatConfig"),yRr.forEach(t),cGe=r(LMe," (UniSpeechSat model)"),LMe.forEach(t),mGe=i(T),hg=s(T,"LI",{});var BMe=n(hg);UH=s(BMe,"STRONG",{});var wRr=n(UH);fGe=r(wRr,"vilt"),wRr.forEach(t),gGe=r(BMe," \u2014 "),bB=s(BMe,"A",{href:!0});var ARr=n(bB);hGe=r(ARr,"ViltConfig"),ARr.forEach(t),uGe=r(BMe," (ViLT model)"),BMe.forEach(t),pGe=i(T),ug=s(T,"LI",{});var xMe=n(ug);JH=s(xMe,"STRONG",{});var LRr=n(JH);_Ge=r(LRr,"vision-encoder-decoder"),LRr.forEach(t),bGe=r(xMe," \u2014 "),vB=s(xMe,"A",{href:!0});var BRr=n(vB);vGe=r(BRr,"VisionEncoderDecoderConfig"),BRr.forEach(t),TGe=r(xMe," (Vision Encoder decoder model)"),xMe.forEach(t),FGe=i(T),pg=s(T,"LI",{});var kMe=n(pg);YH=s(kMe,"STRONG",{});var xRr=n(YH);CGe=r(xRr,"vision-text-dual-encoder"),xRr.forEach(t),MGe=r(kMe," \u2014 "),TB=s(kMe,"A",{href:!0});var kRr=n(TB);EGe=r(kRr,"VisionTextDualEncoderConfig"),kRr.forEach(t),yGe=r(kMe," (VisionTextDualEncoder model)"),kMe.forEach(t),wGe=i(T),_g=s(T,"LI",{});var RMe=n(_g);KH=s(RMe,"STRONG",{});var RRr=n(KH);AGe=r(RRr,"visual_bert"),RRr.forEach(t),LGe=r(RMe," \u2014 "),FB=s(RMe,"A",{href:!0});var SRr=n(FB);BGe=r(SRr,"VisualBertConfig"),SRr.forEach(t),xGe=r(RMe," (VisualBert model)"),RMe.forEach(t),kGe=i(T),bg=s(T,"LI",{});var SMe=n(bg);ZH=s(SMe,"STRONG",{});var PRr=n(ZH);RGe=r(PRr,"vit"),PRr.forEach(t),SGe=r(SMe," \u2014 "),CB=s(SMe,"A",{href:!0});var $Rr=n(CB);PGe=r($Rr,"ViTConfig"),$Rr.forEach(t),$Ge=r(SMe," (ViT model)"),SMe.forEach(t),IGe=i(T),vg=s(T,"LI",{});var PMe=n(vg);eU=s(PMe,"STRONG",{});var IRr=n(eU);jGe=r(IRr,"vit_mae"),IRr.forEach(t),DGe=r(PMe," \u2014 "),MB=s(PMe,"A",{href:!0});var jRr=n(MB);NGe=r(jRr,"ViTMAEConfig"),jRr.forEach(t),qGe=r(PMe," (ViTMAE model)"),PMe.forEach(t),OGe=i(T),Tg=s(T,"LI",{});var $Me=n(Tg);oU=s($Me,"STRONG",{});var DRr=n(oU);GGe=r(DRr,"wav2vec2"),DRr.forEach(t),XGe=r($Me," \u2014 "),EB=s($Me,"A",{href:!0});var NRr=n(EB);VGe=r(NRr,"Wav2Vec2Config"),NRr.forEach(t),zGe=r($Me," (Wav2Vec2 model)"),$Me.forEach(t),WGe=i(T),Fg=s(T,"LI",{});var IMe=n(Fg);rU=s(IMe,"STRONG",{});var qRr=n(rU);QGe=r(qRr,"wavlm"),qRr.forEach(t),HGe=r(IMe," \u2014 "),yB=s(IMe,"A",{href:!0});var ORr=n(yB);UGe=r(ORr,"WavLMConfig"),ORr.forEach(t),JGe=r(IMe," (WavLM model)"),IMe.forEach(t),YGe=i(T),Cg=s(T,"LI",{});var jMe=n(Cg);tU=s(jMe,"STRONG",{});var GRr=n(tU);KGe=r(GRr,"xglm"),GRr.forEach(t),ZGe=r(jMe," \u2014 "),wB=s(jMe,"A",{href:!0});var XRr=n(wB);eXe=r(XRr,"XGLMConfig"),XRr.forEach(t),oXe=r(jMe," (XGLM model)"),jMe.forEach(t),rXe=i(T),Mg=s(T,"LI",{});var DMe=n(Mg);aU=s(DMe,"STRONG",{});var VRr=n(aU);tXe=r(VRr,"xlm"),VRr.forEach(t),aXe=r(DMe," \u2014 "),AB=s(DMe,"A",{href:!0});var zRr=n(AB);sXe=r(zRr,"XLMConfig"),zRr.forEach(t),nXe=r(DMe," (XLM model)"),DMe.forEach(t),lXe=i(T),Eg=s(T,"LI",{});var NMe=n(Eg);sU=s(NMe,"STRONG",{});var WRr=n(sU);iXe=r(WRr,"xlm-prophetnet"),WRr.forEach(t),dXe=r(NMe," \u2014 "),LB=s(NMe,"A",{href:!0});var QRr=n(LB);cXe=r(QRr,"XLMProphetNetConfig"),QRr.forEach(t),mXe=r(NMe," (XLMProphetNet model)"),NMe.forEach(t),fXe=i(T),yg=s(T,"LI",{});var qMe=n(yg);nU=s(qMe,"STRONG",{});var HRr=n(nU);gXe=r(HRr,"xlm-roberta"),HRr.forEach(t),hXe=r(qMe," \u2014 "),BB=s(qMe,"A",{href:!0});var URr=n(BB);uXe=r(URr,"XLMRobertaConfig"),URr.forEach(t),pXe=r(qMe," (XLM-RoBERTa model)"),qMe.forEach(t),_Xe=i(T),wg=s(T,"LI",{});var OMe=n(wg);lU=s(OMe,"STRONG",{});var JRr=n(lU);bXe=r(JRr,"xlm-roberta-xl"),JRr.forEach(t),vXe=r(OMe," \u2014 "),xB=s(OMe,"A",{href:!0});var YRr=n(xB);TXe=r(YRr,"XLMRobertaXLConfig"),YRr.forEach(t),FXe=r(OMe," (XLM-RoBERTa-XL model)"),OMe.forEach(t),CXe=i(T),Ag=s(T,"LI",{});var GMe=n(Ag);iU=s(GMe,"STRONG",{});var KRr=n(iU);MXe=r(KRr,"xlnet"),KRr.forEach(t),EXe=r(GMe," \u2014 "),kB=s(GMe,"A",{href:!0});var ZRr=n(kB);yXe=r(ZRr,"XLNetConfig"),ZRr.forEach(t),wXe=r(GMe," (XLNet model)"),GMe.forEach(t),AXe=i(T),Lg=s(T,"LI",{});var XMe=n(Lg);dU=s(XMe,"STRONG",{});var eSr=n(dU);LXe=r(eSr,"yoso"),eSr.forEach(t),BXe=r(XMe," \u2014 "),RB=s(XMe,"A",{href:!0});var oSr=n(RB);xXe=r(oSr,"YosoConfig"),oSr.forEach(t),kXe=r(XMe," (YOSO model)"),XMe.forEach(t),T.forEach(t),RXe=i(ga),cU=s(ga,"P",{});var rSr=n(cU);SXe=r(rSr,"Examples:"),rSr.forEach(t),PXe=i(ga),f(ay.$$.fragment,ga),ga.forEach(t),$Xe=i(Gn),Bg=s(Gn,"DIV",{class:!0});var uRe=n(Bg);f(sy.$$.fragment,uRe),IXe=i(uRe),mU=s(uRe,"P",{});var tSr=n(mU);jXe=r(tSr,"Register a new configuration for this class."),tSr.forEach(t),uRe.forEach(t),Gn.forEach(t),gxe=i(d),Qi=s(d,"H2",{class:!0});var pRe=n(Qi);xg=s(pRe,"A",{id:!0,class:!0,href:!0});var aSr=n(xg);fU=s(aSr,"SPAN",{});var sSr=n(fU);f(ny.$$.fragment,sSr),sSr.forEach(t),aSr.forEach(t),DXe=i(pRe),gU=s(pRe,"SPAN",{});var nSr=n(gU);NXe=r(nSr,"AutoTokenizer"),nSr.forEach(t),pRe.forEach(t),hxe=i(d),Qo=s(d,"DIV",{class:!0});var Xn=n(Qo);f(ly.$$.fragment,Xn),qXe=i(Xn),iy=s(Xn,"P",{});var _Re=n(iy);OXe=r(_Re,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),SB=s(_Re,"A",{href:!0});var lSr=n(SB);GXe=r(lSr,"AutoTokenizer.from_pretrained()"),lSr.forEach(t),XXe=r(_Re," class method."),_Re.forEach(t),VXe=i(Xn),dy=s(Xn,"P",{});var bRe=n(dy);zXe=r(bRe,"This class cannot be instantiated directly using "),hU=s(bRe,"CODE",{});var iSr=n(hU);WXe=r(iSr,"__init__()"),iSr.forEach(t),QXe=r(bRe," (throws an error)."),bRe.forEach(t),HXe=i(Xn),go=s(Xn,"DIV",{class:!0});var ha=n(go);f(cy.$$.fragment,ha),UXe=i(ha),uU=s(ha,"P",{});var dSr=n(uU);JXe=r(dSr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dSr.forEach(t),YXe=i(ha),Ga=s(ha,"P",{});var U3=n(Ga);KXe=r(U3,"The tokenizer class to instantiate is selected based on the "),pU=s(U3,"CODE",{});var cSr=n(pU);ZXe=r(cSr,"model_type"),cSr.forEach(t),eVe=r(U3,` property of the config object (either
passed as an argument or loaded from `),_U=s(U3,"CODE",{});var mSr=n(_U);oVe=r(mSr,"pretrained_model_name_or_path"),mSr.forEach(t),rVe=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bU=s(U3,"CODE",{});var fSr=n(bU);tVe=r(fSr,"pretrained_model_name_or_path"),fSr.forEach(t),aVe=r(U3,":"),U3.forEach(t),sVe=i(ha),E=s(ha,"UL",{});var y=n(E);zs=s(y,"LI",{});var V8=n(zs);vU=s(V8,"STRONG",{});var gSr=n(vU);nVe=r(gSr,"albert"),gSr.forEach(t),lVe=r(V8," \u2014 "),PB=s(V8,"A",{href:!0});var hSr=n(PB);iVe=r(hSr,"AlbertTokenizer"),hSr.forEach(t),dVe=r(V8," or "),$B=s(V8,"A",{href:!0});var uSr=n($B);cVe=r(uSr,"AlbertTokenizerFast"),uSr.forEach(t),mVe=r(V8," (ALBERT model)"),V8.forEach(t),fVe=i(y),Ws=s(y,"LI",{});var z8=n(Ws);TU=s(z8,"STRONG",{});var pSr=n(TU);gVe=r(pSr,"bart"),pSr.forEach(t),hVe=r(z8," \u2014 "),IB=s(z8,"A",{href:!0});var _Sr=n(IB);uVe=r(_Sr,"BartTokenizer"),_Sr.forEach(t),pVe=r(z8," or "),jB=s(z8,"A",{href:!0});var bSr=n(jB);_Ve=r(bSr,"BartTokenizerFast"),bSr.forEach(t),bVe=r(z8," (BART model)"),z8.forEach(t),vVe=i(y),Qs=s(y,"LI",{});var W8=n(Qs);FU=s(W8,"STRONG",{});var vSr=n(FU);TVe=r(vSr,"barthez"),vSr.forEach(t),FVe=r(W8," \u2014 "),DB=s(W8,"A",{href:!0});var TSr=n(DB);CVe=r(TSr,"BarthezTokenizer"),TSr.forEach(t),MVe=r(W8," or "),NB=s(W8,"A",{href:!0});var FSr=n(NB);EVe=r(FSr,"BarthezTokenizerFast"),FSr.forEach(t),yVe=r(W8," (BARThez model)"),W8.forEach(t),wVe=i(y),kg=s(y,"LI",{});var VMe=n(kg);CU=s(VMe,"STRONG",{});var CSr=n(CU);AVe=r(CSr,"bartpho"),CSr.forEach(t),LVe=r(VMe," \u2014 "),qB=s(VMe,"A",{href:!0});var MSr=n(qB);BVe=r(MSr,"BartphoTokenizer"),MSr.forEach(t),xVe=r(VMe," (BARTpho model)"),VMe.forEach(t),kVe=i(y),Hs=s(y,"LI",{});var Q8=n(Hs);MU=s(Q8,"STRONG",{});var ESr=n(MU);RVe=r(ESr,"bert"),ESr.forEach(t),SVe=r(Q8," \u2014 "),OB=s(Q8,"A",{href:!0});var ySr=n(OB);PVe=r(ySr,"BertTokenizer"),ySr.forEach(t),$Ve=r(Q8," or "),GB=s(Q8,"A",{href:!0});var wSr=n(GB);IVe=r(wSr,"BertTokenizerFast"),wSr.forEach(t),jVe=r(Q8," (BERT model)"),Q8.forEach(t),DVe=i(y),Rg=s(y,"LI",{});var zMe=n(Rg);EU=s(zMe,"STRONG",{});var ASr=n(EU);NVe=r(ASr,"bert-generation"),ASr.forEach(t),qVe=r(zMe," \u2014 "),XB=s(zMe,"A",{href:!0});var LSr=n(XB);OVe=r(LSr,"BertGenerationTokenizer"),LSr.forEach(t),GVe=r(zMe," (Bert Generation model)"),zMe.forEach(t),XVe=i(y),Sg=s(y,"LI",{});var WMe=n(Sg);yU=s(WMe,"STRONG",{});var BSr=n(yU);VVe=r(BSr,"bert-japanese"),BSr.forEach(t),zVe=r(WMe," \u2014 "),VB=s(WMe,"A",{href:!0});var xSr=n(VB);WVe=r(xSr,"BertJapaneseTokenizer"),xSr.forEach(t),QVe=r(WMe," (BertJapanese model)"),WMe.forEach(t),HVe=i(y),Pg=s(y,"LI",{});var QMe=n(Pg);wU=s(QMe,"STRONG",{});var kSr=n(wU);UVe=r(kSr,"bertweet"),kSr.forEach(t),JVe=r(QMe," \u2014 "),zB=s(QMe,"A",{href:!0});var RSr=n(zB);YVe=r(RSr,"BertweetTokenizer"),RSr.forEach(t),KVe=r(QMe," (Bertweet model)"),QMe.forEach(t),ZVe=i(y),Us=s(y,"LI",{});var H8=n(Us);AU=s(H8,"STRONG",{});var SSr=n(AU);eze=r(SSr,"big_bird"),SSr.forEach(t),oze=r(H8," \u2014 "),WB=s(H8,"A",{href:!0});var PSr=n(WB);rze=r(PSr,"BigBirdTokenizer"),PSr.forEach(t),tze=r(H8," or "),QB=s(H8,"A",{href:!0});var $Sr=n(QB);aze=r($Sr,"BigBirdTokenizerFast"),$Sr.forEach(t),sze=r(H8," (BigBird model)"),H8.forEach(t),nze=i(y),Js=s(y,"LI",{});var U8=n(Js);LU=s(U8,"STRONG",{});var ISr=n(LU);lze=r(ISr,"bigbird_pegasus"),ISr.forEach(t),ize=r(U8," \u2014 "),HB=s(U8,"A",{href:!0});var jSr=n(HB);dze=r(jSr,"PegasusTokenizer"),jSr.forEach(t),cze=r(U8," or "),UB=s(U8,"A",{href:!0});var DSr=n(UB);mze=r(DSr,"PegasusTokenizerFast"),DSr.forEach(t),fze=r(U8," (BigBirdPegasus model)"),U8.forEach(t),gze=i(y),Ys=s(y,"LI",{});var J8=n(Ys);BU=s(J8,"STRONG",{});var NSr=n(BU);hze=r(NSr,"blenderbot"),NSr.forEach(t),uze=r(J8," \u2014 "),JB=s(J8,"A",{href:!0});var qSr=n(JB);pze=r(qSr,"BlenderbotTokenizer"),qSr.forEach(t),_ze=r(J8," or "),YB=s(J8,"A",{href:!0});var OSr=n(YB);bze=r(OSr,"BlenderbotTokenizerFast"),OSr.forEach(t),vze=r(J8," (Blenderbot model)"),J8.forEach(t),Tze=i(y),$g=s(y,"LI",{});var HMe=n($g);xU=s(HMe,"STRONG",{});var GSr=n(xU);Fze=r(GSr,"blenderbot-small"),GSr.forEach(t),Cze=r(HMe," \u2014 "),KB=s(HMe,"A",{href:!0});var XSr=n(KB);Mze=r(XSr,"BlenderbotSmallTokenizer"),XSr.forEach(t),Eze=r(HMe," (BlenderbotSmall model)"),HMe.forEach(t),yze=i(y),Ig=s(y,"LI",{});var UMe=n(Ig);kU=s(UMe,"STRONG",{});var VSr=n(kU);wze=r(VSr,"byt5"),VSr.forEach(t),Aze=r(UMe," \u2014 "),ZB=s(UMe,"A",{href:!0});var zSr=n(ZB);Lze=r(zSr,"ByT5Tokenizer"),zSr.forEach(t),Bze=r(UMe," (ByT5 model)"),UMe.forEach(t),xze=i(y),Ks=s(y,"LI",{});var Y8=n(Ks);RU=s(Y8,"STRONG",{});var WSr=n(RU);kze=r(WSr,"camembert"),WSr.forEach(t),Rze=r(Y8," \u2014 "),ex=s(Y8,"A",{href:!0});var QSr=n(ex);Sze=r(QSr,"CamembertTokenizer"),QSr.forEach(t),Pze=r(Y8," or "),ox=s(Y8,"A",{href:!0});var HSr=n(ox);$ze=r(HSr,"CamembertTokenizerFast"),HSr.forEach(t),Ize=r(Y8," (CamemBERT model)"),Y8.forEach(t),jze=i(y),jg=s(y,"LI",{});var JMe=n(jg);SU=s(JMe,"STRONG",{});var USr=n(SU);Dze=r(USr,"canine"),USr.forEach(t),Nze=r(JMe," \u2014 "),rx=s(JMe,"A",{href:!0});var JSr=n(rx);qze=r(JSr,"CanineTokenizer"),JSr.forEach(t),Oze=r(JMe," (Canine model)"),JMe.forEach(t),Gze=i(y),Zs=s(y,"LI",{});var K8=n(Zs);PU=s(K8,"STRONG",{});var YSr=n(PU);Xze=r(YSr,"clip"),YSr.forEach(t),Vze=r(K8," \u2014 "),tx=s(K8,"A",{href:!0});var KSr=n(tx);zze=r(KSr,"CLIPTokenizer"),KSr.forEach(t),Wze=r(K8," or "),ax=s(K8,"A",{href:!0});var ZSr=n(ax);Qze=r(ZSr,"CLIPTokenizerFast"),ZSr.forEach(t),Hze=r(K8," (CLIP model)"),K8.forEach(t),Uze=i(y),en=s(y,"LI",{});var Z8=n(en);$U=s(Z8,"STRONG",{});var ePr=n($U);Jze=r(ePr,"convbert"),ePr.forEach(t),Yze=r(Z8," \u2014 "),sx=s(Z8,"A",{href:!0});var oPr=n(sx);Kze=r(oPr,"ConvBertTokenizer"),oPr.forEach(t),Zze=r(Z8," or "),nx=s(Z8,"A",{href:!0});var rPr=n(nx);eWe=r(rPr,"ConvBertTokenizerFast"),rPr.forEach(t),oWe=r(Z8," (ConvBERT model)"),Z8.forEach(t),rWe=i(y),on=s(y,"LI",{});var e7=n(on);IU=s(e7,"STRONG",{});var tPr=n(IU);tWe=r(tPr,"cpm"),tPr.forEach(t),aWe=r(e7," \u2014 "),lx=s(e7,"A",{href:!0});var aPr=n(lx);sWe=r(aPr,"CpmTokenizer"),aPr.forEach(t),nWe=r(e7," or "),jU=s(e7,"CODE",{});var sPr=n(jU);lWe=r(sPr,"CpmTokenizerFast"),sPr.forEach(t),iWe=r(e7," (CPM model)"),e7.forEach(t),dWe=i(y),Dg=s(y,"LI",{});var YMe=n(Dg);DU=s(YMe,"STRONG",{});var nPr=n(DU);cWe=r(nPr,"ctrl"),nPr.forEach(t),mWe=r(YMe," \u2014 "),ix=s(YMe,"A",{href:!0});var lPr=n(ix);fWe=r(lPr,"CTRLTokenizer"),lPr.forEach(t),gWe=r(YMe," (CTRL model)"),YMe.forEach(t),hWe=i(y),rn=s(y,"LI",{});var o7=n(rn);NU=s(o7,"STRONG",{});var iPr=n(NU);uWe=r(iPr,"deberta"),iPr.forEach(t),pWe=r(o7," \u2014 "),dx=s(o7,"A",{href:!0});var dPr=n(dx);_We=r(dPr,"DebertaTokenizer"),dPr.forEach(t),bWe=r(o7," or "),cx=s(o7,"A",{href:!0});var cPr=n(cx);vWe=r(cPr,"DebertaTokenizerFast"),cPr.forEach(t),TWe=r(o7," (DeBERTa model)"),o7.forEach(t),FWe=i(y),Ng=s(y,"LI",{});var KMe=n(Ng);qU=s(KMe,"STRONG",{});var mPr=n(qU);CWe=r(mPr,"deberta-v2"),mPr.forEach(t),MWe=r(KMe," \u2014 "),mx=s(KMe,"A",{href:!0});var fPr=n(mx);EWe=r(fPr,"DebertaV2Tokenizer"),fPr.forEach(t),yWe=r(KMe," (DeBERTa-v2 model)"),KMe.forEach(t),wWe=i(y),tn=s(y,"LI",{});var r7=n(tn);OU=s(r7,"STRONG",{});var gPr=n(OU);AWe=r(gPr,"distilbert"),gPr.forEach(t),LWe=r(r7," \u2014 "),fx=s(r7,"A",{href:!0});var hPr=n(fx);BWe=r(hPr,"DistilBertTokenizer"),hPr.forEach(t),xWe=r(r7," or "),gx=s(r7,"A",{href:!0});var uPr=n(gx);kWe=r(uPr,"DistilBertTokenizerFast"),uPr.forEach(t),RWe=r(r7," (DistilBERT model)"),r7.forEach(t),SWe=i(y),an=s(y,"LI",{});var t7=n(an);GU=s(t7,"STRONG",{});var pPr=n(GU);PWe=r(pPr,"dpr"),pPr.forEach(t),$We=r(t7," \u2014 "),hx=s(t7,"A",{href:!0});var _Pr=n(hx);IWe=r(_Pr,"DPRQuestionEncoderTokenizer"),_Pr.forEach(t),jWe=r(t7," or "),ux=s(t7,"A",{href:!0});var bPr=n(ux);DWe=r(bPr,"DPRQuestionEncoderTokenizerFast"),bPr.forEach(t),NWe=r(t7," (DPR model)"),t7.forEach(t),qWe=i(y),sn=s(y,"LI",{});var a7=n(sn);XU=s(a7,"STRONG",{});var vPr=n(XU);OWe=r(vPr,"electra"),vPr.forEach(t),GWe=r(a7," \u2014 "),px=s(a7,"A",{href:!0});var TPr=n(px);XWe=r(TPr,"ElectraTokenizer"),TPr.forEach(t),VWe=r(a7," or "),_x=s(a7,"A",{href:!0});var FPr=n(_x);zWe=r(FPr,"ElectraTokenizerFast"),FPr.forEach(t),WWe=r(a7," (ELECTRA model)"),a7.forEach(t),QWe=i(y),qg=s(y,"LI",{});var ZMe=n(qg);VU=s(ZMe,"STRONG",{});var CPr=n(VU);HWe=r(CPr,"flaubert"),CPr.forEach(t),UWe=r(ZMe," \u2014 "),bx=s(ZMe,"A",{href:!0});var MPr=n(bx);JWe=r(MPr,"FlaubertTokenizer"),MPr.forEach(t),YWe=r(ZMe," (FlauBERT model)"),ZMe.forEach(t),KWe=i(y),nn=s(y,"LI",{});var s7=n(nn);zU=s(s7,"STRONG",{});var EPr=n(zU);ZWe=r(EPr,"fnet"),EPr.forEach(t),eQe=r(s7," \u2014 "),vx=s(s7,"A",{href:!0});var yPr=n(vx);oQe=r(yPr,"FNetTokenizer"),yPr.forEach(t),rQe=r(s7," or "),Tx=s(s7,"A",{href:!0});var wPr=n(Tx);tQe=r(wPr,"FNetTokenizerFast"),wPr.forEach(t),aQe=r(s7," (FNet model)"),s7.forEach(t),sQe=i(y),Og=s(y,"LI",{});var e4e=n(Og);WU=s(e4e,"STRONG",{});var APr=n(WU);nQe=r(APr,"fsmt"),APr.forEach(t),lQe=r(e4e," \u2014 "),Fx=s(e4e,"A",{href:!0});var LPr=n(Fx);iQe=r(LPr,"FSMTTokenizer"),LPr.forEach(t),dQe=r(e4e," (FairSeq Machine-Translation model)"),e4e.forEach(t),cQe=i(y),ln=s(y,"LI",{});var n7=n(ln);QU=s(n7,"STRONG",{});var BPr=n(QU);mQe=r(BPr,"funnel"),BPr.forEach(t),fQe=r(n7," \u2014 "),Cx=s(n7,"A",{href:!0});var xPr=n(Cx);gQe=r(xPr,"FunnelTokenizer"),xPr.forEach(t),hQe=r(n7," or "),Mx=s(n7,"A",{href:!0});var kPr=n(Mx);uQe=r(kPr,"FunnelTokenizerFast"),kPr.forEach(t),pQe=r(n7," (Funnel Transformer model)"),n7.forEach(t),_Qe=i(y),dn=s(y,"LI",{});var l7=n(dn);HU=s(l7,"STRONG",{});var RPr=n(HU);bQe=r(RPr,"gpt2"),RPr.forEach(t),vQe=r(l7," \u2014 "),Ex=s(l7,"A",{href:!0});var SPr=n(Ex);TQe=r(SPr,"GPT2Tokenizer"),SPr.forEach(t),FQe=r(l7," or "),yx=s(l7,"A",{href:!0});var PPr=n(yx);CQe=r(PPr,"GPT2TokenizerFast"),PPr.forEach(t),MQe=r(l7," (OpenAI GPT-2 model)"),l7.forEach(t),EQe=i(y),cn=s(y,"LI",{});var i7=n(cn);UU=s(i7,"STRONG",{});var $Pr=n(UU);yQe=r($Pr,"gpt_neo"),$Pr.forEach(t),wQe=r(i7," \u2014 "),wx=s(i7,"A",{href:!0});var IPr=n(wx);AQe=r(IPr,"GPT2Tokenizer"),IPr.forEach(t),LQe=r(i7," or "),Ax=s(i7,"A",{href:!0});var jPr=n(Ax);BQe=r(jPr,"GPT2TokenizerFast"),jPr.forEach(t),xQe=r(i7," (GPT Neo model)"),i7.forEach(t),kQe=i(y),mn=s(y,"LI",{});var d7=n(mn);JU=s(d7,"STRONG",{});var DPr=n(JU);RQe=r(DPr,"herbert"),DPr.forEach(t),SQe=r(d7," \u2014 "),Lx=s(d7,"A",{href:!0});var NPr=n(Lx);PQe=r(NPr,"HerbertTokenizer"),NPr.forEach(t),$Qe=r(d7," or "),Bx=s(d7,"A",{href:!0});var qPr=n(Bx);IQe=r(qPr,"HerbertTokenizerFast"),qPr.forEach(t),jQe=r(d7," (HerBERT model)"),d7.forEach(t),DQe=i(y),Gg=s(y,"LI",{});var o4e=n(Gg);YU=s(o4e,"STRONG",{});var OPr=n(YU);NQe=r(OPr,"hubert"),OPr.forEach(t),qQe=r(o4e," \u2014 "),xx=s(o4e,"A",{href:!0});var GPr=n(xx);OQe=r(GPr,"Wav2Vec2CTCTokenizer"),GPr.forEach(t),GQe=r(o4e," (Hubert model)"),o4e.forEach(t),XQe=i(y),fn=s(y,"LI",{});var c7=n(fn);KU=s(c7,"STRONG",{});var XPr=n(KU);VQe=r(XPr,"ibert"),XPr.forEach(t),zQe=r(c7," \u2014 "),kx=s(c7,"A",{href:!0});var VPr=n(kx);WQe=r(VPr,"RobertaTokenizer"),VPr.forEach(t),QQe=r(c7," or "),Rx=s(c7,"A",{href:!0});var zPr=n(Rx);HQe=r(zPr,"RobertaTokenizerFast"),zPr.forEach(t),UQe=r(c7," (I-BERT model)"),c7.forEach(t),JQe=i(y),gn=s(y,"LI",{});var m7=n(gn);ZU=s(m7,"STRONG",{});var WPr=n(ZU);YQe=r(WPr,"layoutlm"),WPr.forEach(t),KQe=r(m7," \u2014 "),Sx=s(m7,"A",{href:!0});var QPr=n(Sx);ZQe=r(QPr,"LayoutLMTokenizer"),QPr.forEach(t),eHe=r(m7," or "),Px=s(m7,"A",{href:!0});var HPr=n(Px);oHe=r(HPr,"LayoutLMTokenizerFast"),HPr.forEach(t),rHe=r(m7," (LayoutLM model)"),m7.forEach(t),tHe=i(y),hn=s(y,"LI",{});var f7=n(hn);eJ=s(f7,"STRONG",{});var UPr=n(eJ);aHe=r(UPr,"layoutlmv2"),UPr.forEach(t),sHe=r(f7," \u2014 "),$x=s(f7,"A",{href:!0});var JPr=n($x);nHe=r(JPr,"LayoutLMv2Tokenizer"),JPr.forEach(t),lHe=r(f7," or "),Ix=s(f7,"A",{href:!0});var YPr=n(Ix);iHe=r(YPr,"LayoutLMv2TokenizerFast"),YPr.forEach(t),dHe=r(f7," (LayoutLMv2 model)"),f7.forEach(t),cHe=i(y),un=s(y,"LI",{});var g7=n(un);oJ=s(g7,"STRONG",{});var KPr=n(oJ);mHe=r(KPr,"layoutxlm"),KPr.forEach(t),fHe=r(g7," \u2014 "),jx=s(g7,"A",{href:!0});var ZPr=n(jx);gHe=r(ZPr,"LayoutXLMTokenizer"),ZPr.forEach(t),hHe=r(g7," or "),Dx=s(g7,"A",{href:!0});var e$r=n(Dx);uHe=r(e$r,"LayoutXLMTokenizerFast"),e$r.forEach(t),pHe=r(g7," (LayoutXLM model)"),g7.forEach(t),_He=i(y),pn=s(y,"LI",{});var h7=n(pn);rJ=s(h7,"STRONG",{});var o$r=n(rJ);bHe=r(o$r,"led"),o$r.forEach(t),vHe=r(h7," \u2014 "),Nx=s(h7,"A",{href:!0});var r$r=n(Nx);THe=r(r$r,"LEDTokenizer"),r$r.forEach(t),FHe=r(h7," or "),qx=s(h7,"A",{href:!0});var t$r=n(qx);CHe=r(t$r,"LEDTokenizerFast"),t$r.forEach(t),MHe=r(h7," (LED model)"),h7.forEach(t),EHe=i(y),_n=s(y,"LI",{});var u7=n(_n);tJ=s(u7,"STRONG",{});var a$r=n(tJ);yHe=r(a$r,"longformer"),a$r.forEach(t),wHe=r(u7," \u2014 "),Ox=s(u7,"A",{href:!0});var s$r=n(Ox);AHe=r(s$r,"LongformerTokenizer"),s$r.forEach(t),LHe=r(u7," or "),Gx=s(u7,"A",{href:!0});var n$r=n(Gx);BHe=r(n$r,"LongformerTokenizerFast"),n$r.forEach(t),xHe=r(u7," (Longformer model)"),u7.forEach(t),kHe=i(y),Xg=s(y,"LI",{});var r4e=n(Xg);aJ=s(r4e,"STRONG",{});var l$r=n(aJ);RHe=r(l$r,"luke"),l$r.forEach(t),SHe=r(r4e," \u2014 "),Xx=s(r4e,"A",{href:!0});var i$r=n(Xx);PHe=r(i$r,"LukeTokenizer"),i$r.forEach(t),$He=r(r4e," (LUKE model)"),r4e.forEach(t),IHe=i(y),bn=s(y,"LI",{});var p7=n(bn);sJ=s(p7,"STRONG",{});var d$r=n(sJ);jHe=r(d$r,"lxmert"),d$r.forEach(t),DHe=r(p7," \u2014 "),Vx=s(p7,"A",{href:!0});var c$r=n(Vx);NHe=r(c$r,"LxmertTokenizer"),c$r.forEach(t),qHe=r(p7," or "),zx=s(p7,"A",{href:!0});var m$r=n(zx);OHe=r(m$r,"LxmertTokenizerFast"),m$r.forEach(t),GHe=r(p7," (LXMERT model)"),p7.forEach(t),XHe=i(y),Vg=s(y,"LI",{});var t4e=n(Vg);nJ=s(t4e,"STRONG",{});var f$r=n(nJ);VHe=r(f$r,"m2m_100"),f$r.forEach(t),zHe=r(t4e," \u2014 "),Wx=s(t4e,"A",{href:!0});var g$r=n(Wx);WHe=r(g$r,"M2M100Tokenizer"),g$r.forEach(t),QHe=r(t4e," (M2M100 model)"),t4e.forEach(t),HHe=i(y),zg=s(y,"LI",{});var a4e=n(zg);lJ=s(a4e,"STRONG",{});var h$r=n(lJ);UHe=r(h$r,"marian"),h$r.forEach(t),JHe=r(a4e," \u2014 "),Qx=s(a4e,"A",{href:!0});var u$r=n(Qx);YHe=r(u$r,"MarianTokenizer"),u$r.forEach(t),KHe=r(a4e," (Marian model)"),a4e.forEach(t),ZHe=i(y),vn=s(y,"LI",{});var _7=n(vn);iJ=s(_7,"STRONG",{});var p$r=n(iJ);eUe=r(p$r,"mbart"),p$r.forEach(t),oUe=r(_7," \u2014 "),Hx=s(_7,"A",{href:!0});var _$r=n(Hx);rUe=r(_$r,"MBartTokenizer"),_$r.forEach(t),tUe=r(_7," or "),Ux=s(_7,"A",{href:!0});var b$r=n(Ux);aUe=r(b$r,"MBartTokenizerFast"),b$r.forEach(t),sUe=r(_7," (mBART model)"),_7.forEach(t),nUe=i(y),Tn=s(y,"LI",{});var b7=n(Tn);dJ=s(b7,"STRONG",{});var v$r=n(dJ);lUe=r(v$r,"mbart50"),v$r.forEach(t),iUe=r(b7," \u2014 "),Jx=s(b7,"A",{href:!0});var T$r=n(Jx);dUe=r(T$r,"MBart50Tokenizer"),T$r.forEach(t),cUe=r(b7," or "),Yx=s(b7,"A",{href:!0});var F$r=n(Yx);mUe=r(F$r,"MBart50TokenizerFast"),F$r.forEach(t),fUe=r(b7," (mBART-50 model)"),b7.forEach(t),gUe=i(y),Wg=s(y,"LI",{});var s4e=n(Wg);cJ=s(s4e,"STRONG",{});var C$r=n(cJ);hUe=r(C$r,"mluke"),C$r.forEach(t),uUe=r(s4e," \u2014 "),Kx=s(s4e,"A",{href:!0});var M$r=n(Kx);pUe=r(M$r,"MLukeTokenizer"),M$r.forEach(t),_Ue=r(s4e," (mLUKE model)"),s4e.forEach(t),bUe=i(y),Fn=s(y,"LI",{});var v7=n(Fn);mJ=s(v7,"STRONG",{});var E$r=n(mJ);vUe=r(E$r,"mobilebert"),E$r.forEach(t),TUe=r(v7," \u2014 "),Zx=s(v7,"A",{href:!0});var y$r=n(Zx);FUe=r(y$r,"MobileBertTokenizer"),y$r.forEach(t),CUe=r(v7," or "),ek=s(v7,"A",{href:!0});var w$r=n(ek);MUe=r(w$r,"MobileBertTokenizerFast"),w$r.forEach(t),EUe=r(v7," (MobileBERT model)"),v7.forEach(t),yUe=i(y),Cn=s(y,"LI",{});var T7=n(Cn);fJ=s(T7,"STRONG",{});var A$r=n(fJ);wUe=r(A$r,"mpnet"),A$r.forEach(t),AUe=r(T7," \u2014 "),ok=s(T7,"A",{href:!0});var L$r=n(ok);LUe=r(L$r,"MPNetTokenizer"),L$r.forEach(t),BUe=r(T7," or "),rk=s(T7,"A",{href:!0});var B$r=n(rk);xUe=r(B$r,"MPNetTokenizerFast"),B$r.forEach(t),kUe=r(T7," (MPNet model)"),T7.forEach(t),RUe=i(y),Mn=s(y,"LI",{});var F7=n(Mn);gJ=s(F7,"STRONG",{});var x$r=n(gJ);SUe=r(x$r,"mt5"),x$r.forEach(t),PUe=r(F7," \u2014 "),tk=s(F7,"A",{href:!0});var k$r=n(tk);$Ue=r(k$r,"MT5Tokenizer"),k$r.forEach(t),IUe=r(F7," or "),ak=s(F7,"A",{href:!0});var R$r=n(ak);jUe=r(R$r,"MT5TokenizerFast"),R$r.forEach(t),DUe=r(F7," (mT5 model)"),F7.forEach(t),NUe=i(y),En=s(y,"LI",{});var C7=n(En);hJ=s(C7,"STRONG",{});var S$r=n(hJ);qUe=r(S$r,"openai-gpt"),S$r.forEach(t),OUe=r(C7," \u2014 "),sk=s(C7,"A",{href:!0});var P$r=n(sk);GUe=r(P$r,"OpenAIGPTTokenizer"),P$r.forEach(t),XUe=r(C7," or "),nk=s(C7,"A",{href:!0});var $$r=n(nk);VUe=r($$r,"OpenAIGPTTokenizerFast"),$$r.forEach(t),zUe=r(C7," (OpenAI GPT model)"),C7.forEach(t),WUe=i(y),yn=s(y,"LI",{});var M7=n(yn);uJ=s(M7,"STRONG",{});var I$r=n(uJ);QUe=r(I$r,"pegasus"),I$r.forEach(t),HUe=r(M7," \u2014 "),lk=s(M7,"A",{href:!0});var j$r=n(lk);UUe=r(j$r,"PegasusTokenizer"),j$r.forEach(t),JUe=r(M7," or "),ik=s(M7,"A",{href:!0});var D$r=n(ik);YUe=r(D$r,"PegasusTokenizerFast"),D$r.forEach(t),KUe=r(M7," (Pegasus model)"),M7.forEach(t),ZUe=i(y),Qg=s(y,"LI",{});var n4e=n(Qg);pJ=s(n4e,"STRONG",{});var N$r=n(pJ);eJe=r(N$r,"perceiver"),N$r.forEach(t),oJe=r(n4e," \u2014 "),dk=s(n4e,"A",{href:!0});var q$r=n(dk);rJe=r(q$r,"PerceiverTokenizer"),q$r.forEach(t),tJe=r(n4e," (Perceiver model)"),n4e.forEach(t),aJe=i(y),Hg=s(y,"LI",{});var l4e=n(Hg);_J=s(l4e,"STRONG",{});var O$r=n(_J);sJe=r(O$r,"phobert"),O$r.forEach(t),nJe=r(l4e," \u2014 "),ck=s(l4e,"A",{href:!0});var G$r=n(ck);lJe=r(G$r,"PhobertTokenizer"),G$r.forEach(t),iJe=r(l4e," (PhoBERT model)"),l4e.forEach(t),dJe=i(y),Ug=s(y,"LI",{});var i4e=n(Ug);bJ=s(i4e,"STRONG",{});var X$r=n(bJ);cJe=r(X$r,"plbart"),X$r.forEach(t),mJe=r(i4e," \u2014 "),mk=s(i4e,"A",{href:!0});var V$r=n(mk);fJe=r(V$r,"PLBartTokenizer"),V$r.forEach(t),gJe=r(i4e," (PLBart model)"),i4e.forEach(t),hJe=i(y),Jg=s(y,"LI",{});var d4e=n(Jg);vJ=s(d4e,"STRONG",{});var z$r=n(vJ);uJe=r(z$r,"prophetnet"),z$r.forEach(t),pJe=r(d4e," \u2014 "),fk=s(d4e,"A",{href:!0});var W$r=n(fk);_Je=r(W$r,"ProphetNetTokenizer"),W$r.forEach(t),bJe=r(d4e," (ProphetNet model)"),d4e.forEach(t),vJe=i(y),wn=s(y,"LI",{});var E7=n(wn);TJ=s(E7,"STRONG",{});var Q$r=n(TJ);TJe=r(Q$r,"qdqbert"),Q$r.forEach(t),FJe=r(E7," \u2014 "),gk=s(E7,"A",{href:!0});var H$r=n(gk);CJe=r(H$r,"BertTokenizer"),H$r.forEach(t),MJe=r(E7," or "),hk=s(E7,"A",{href:!0});var U$r=n(hk);EJe=r(U$r,"BertTokenizerFast"),U$r.forEach(t),yJe=r(E7," (QDQBert model)"),E7.forEach(t),wJe=i(y),Yg=s(y,"LI",{});var c4e=n(Yg);FJ=s(c4e,"STRONG",{});var J$r=n(FJ);AJe=r(J$r,"rag"),J$r.forEach(t),LJe=r(c4e," \u2014 "),uk=s(c4e,"A",{href:!0});var Y$r=n(uk);BJe=r(Y$r,"RagTokenizer"),Y$r.forEach(t),xJe=r(c4e," (RAG model)"),c4e.forEach(t),kJe=i(y),An=s(y,"LI",{});var y7=n(An);CJ=s(y7,"STRONG",{});var K$r=n(CJ);RJe=r(K$r,"realm"),K$r.forEach(t),SJe=r(y7," \u2014 "),pk=s(y7,"A",{href:!0});var Z$r=n(pk);PJe=r(Z$r,"RealmTokenizer"),Z$r.forEach(t),$Je=r(y7," or "),_k=s(y7,"A",{href:!0});var eIr=n(_k);IJe=r(eIr,"RealmTokenizerFast"),eIr.forEach(t),jJe=r(y7," (Realm model)"),y7.forEach(t),DJe=i(y),Ln=s(y,"LI",{});var w7=n(Ln);MJ=s(w7,"STRONG",{});var oIr=n(MJ);NJe=r(oIr,"reformer"),oIr.forEach(t),qJe=r(w7," \u2014 "),bk=s(w7,"A",{href:!0});var rIr=n(bk);OJe=r(rIr,"ReformerTokenizer"),rIr.forEach(t),GJe=r(w7," or "),vk=s(w7,"A",{href:!0});var tIr=n(vk);XJe=r(tIr,"ReformerTokenizerFast"),tIr.forEach(t),VJe=r(w7," (Reformer model)"),w7.forEach(t),zJe=i(y),Bn=s(y,"LI",{});var A7=n(Bn);EJ=s(A7,"STRONG",{});var aIr=n(EJ);WJe=r(aIr,"rembert"),aIr.forEach(t),QJe=r(A7," \u2014 "),Tk=s(A7,"A",{href:!0});var sIr=n(Tk);HJe=r(sIr,"RemBertTokenizer"),sIr.forEach(t),UJe=r(A7," or "),Fk=s(A7,"A",{href:!0});var nIr=n(Fk);JJe=r(nIr,"RemBertTokenizerFast"),nIr.forEach(t),YJe=r(A7," (RemBERT model)"),A7.forEach(t),KJe=i(y),xn=s(y,"LI",{});var L7=n(xn);yJ=s(L7,"STRONG",{});var lIr=n(yJ);ZJe=r(lIr,"retribert"),lIr.forEach(t),eYe=r(L7," \u2014 "),Ck=s(L7,"A",{href:!0});var iIr=n(Ck);oYe=r(iIr,"RetriBertTokenizer"),iIr.forEach(t),rYe=r(L7," or "),Mk=s(L7,"A",{href:!0});var dIr=n(Mk);tYe=r(dIr,"RetriBertTokenizerFast"),dIr.forEach(t),aYe=r(L7," (RetriBERT model)"),L7.forEach(t),sYe=i(y),kn=s(y,"LI",{});var B7=n(kn);wJ=s(B7,"STRONG",{});var cIr=n(wJ);nYe=r(cIr,"roberta"),cIr.forEach(t),lYe=r(B7," \u2014 "),Ek=s(B7,"A",{href:!0});var mIr=n(Ek);iYe=r(mIr,"RobertaTokenizer"),mIr.forEach(t),dYe=r(B7," or "),yk=s(B7,"A",{href:!0});var fIr=n(yk);cYe=r(fIr,"RobertaTokenizerFast"),fIr.forEach(t),mYe=r(B7," (RoBERTa model)"),B7.forEach(t),fYe=i(y),Rn=s(y,"LI",{});var x7=n(Rn);AJ=s(x7,"STRONG",{});var gIr=n(AJ);gYe=r(gIr,"roformer"),gIr.forEach(t),hYe=r(x7," \u2014 "),wk=s(x7,"A",{href:!0});var hIr=n(wk);uYe=r(hIr,"RoFormerTokenizer"),hIr.forEach(t),pYe=r(x7," or "),Ak=s(x7,"A",{href:!0});var uIr=n(Ak);_Ye=r(uIr,"RoFormerTokenizerFast"),uIr.forEach(t),bYe=r(x7," (RoFormer model)"),x7.forEach(t),vYe=i(y),Kg=s(y,"LI",{});var m4e=n(Kg);LJ=s(m4e,"STRONG",{});var pIr=n(LJ);TYe=r(pIr,"speech_to_text"),pIr.forEach(t),FYe=r(m4e," \u2014 "),Lk=s(m4e,"A",{href:!0});var _Ir=n(Lk);CYe=r(_Ir,"Speech2TextTokenizer"),_Ir.forEach(t),MYe=r(m4e," (Speech2Text model)"),m4e.forEach(t),EYe=i(y),Zg=s(y,"LI",{});var f4e=n(Zg);BJ=s(f4e,"STRONG",{});var bIr=n(BJ);yYe=r(bIr,"speech_to_text_2"),bIr.forEach(t),wYe=r(f4e," \u2014 "),Bk=s(f4e,"A",{href:!0});var vIr=n(Bk);AYe=r(vIr,"Speech2Text2Tokenizer"),vIr.forEach(t),LYe=r(f4e," (Speech2Text2 model)"),f4e.forEach(t),BYe=i(y),Sn=s(y,"LI",{});var k7=n(Sn);xJ=s(k7,"STRONG",{});var TIr=n(xJ);xYe=r(TIr,"splinter"),TIr.forEach(t),kYe=r(k7," \u2014 "),xk=s(k7,"A",{href:!0});var FIr=n(xk);RYe=r(FIr,"SplinterTokenizer"),FIr.forEach(t),SYe=r(k7," or "),kk=s(k7,"A",{href:!0});var CIr=n(kk);PYe=r(CIr,"SplinterTokenizerFast"),CIr.forEach(t),$Ye=r(k7," (Splinter model)"),k7.forEach(t),IYe=i(y),Pn=s(y,"LI",{});var R7=n(Pn);kJ=s(R7,"STRONG",{});var MIr=n(kJ);jYe=r(MIr,"squeezebert"),MIr.forEach(t),DYe=r(R7," \u2014 "),Rk=s(R7,"A",{href:!0});var EIr=n(Rk);NYe=r(EIr,"SqueezeBertTokenizer"),EIr.forEach(t),qYe=r(R7," or "),Sk=s(R7,"A",{href:!0});var yIr=n(Sk);OYe=r(yIr,"SqueezeBertTokenizerFast"),yIr.forEach(t),GYe=r(R7," (SqueezeBERT model)"),R7.forEach(t),XYe=i(y),$n=s(y,"LI",{});var S7=n($n);RJ=s(S7,"STRONG",{});var wIr=n(RJ);VYe=r(wIr,"t5"),wIr.forEach(t),zYe=r(S7," \u2014 "),Pk=s(S7,"A",{href:!0});var AIr=n(Pk);WYe=r(AIr,"T5Tokenizer"),AIr.forEach(t),QYe=r(S7," or "),$k=s(S7,"A",{href:!0});var LIr=n($k);HYe=r(LIr,"T5TokenizerFast"),LIr.forEach(t),UYe=r(S7," (T5 model)"),S7.forEach(t),JYe=i(y),eh=s(y,"LI",{});var g4e=n(eh);SJ=s(g4e,"STRONG",{});var BIr=n(SJ);YYe=r(BIr,"tapas"),BIr.forEach(t),KYe=r(g4e," \u2014 "),Ik=s(g4e,"A",{href:!0});var xIr=n(Ik);ZYe=r(xIr,"TapasTokenizer"),xIr.forEach(t),eKe=r(g4e," (TAPAS model)"),g4e.forEach(t),oKe=i(y),oh=s(y,"LI",{});var h4e=n(oh);PJ=s(h4e,"STRONG",{});var kIr=n(PJ);rKe=r(kIr,"transfo-xl"),kIr.forEach(t),tKe=r(h4e," \u2014 "),jk=s(h4e,"A",{href:!0});var RIr=n(jk);aKe=r(RIr,"TransfoXLTokenizer"),RIr.forEach(t),sKe=r(h4e," (Transformer-XL model)"),h4e.forEach(t),nKe=i(y),rh=s(y,"LI",{});var u4e=n(rh);$J=s(u4e,"STRONG",{});var SIr=n($J);lKe=r(SIr,"wav2vec2"),SIr.forEach(t),iKe=r(u4e," \u2014 "),Dk=s(u4e,"A",{href:!0});var PIr=n(Dk);dKe=r(PIr,"Wav2Vec2CTCTokenizer"),PIr.forEach(t),cKe=r(u4e," (Wav2Vec2 model)"),u4e.forEach(t),mKe=i(y),th=s(y,"LI",{});var p4e=n(th);IJ=s(p4e,"STRONG",{});var $Ir=n(IJ);fKe=r($Ir,"wav2vec2_phoneme"),$Ir.forEach(t),gKe=r(p4e," \u2014 "),Nk=s(p4e,"A",{href:!0});var IIr=n(Nk);hKe=r(IIr,"Wav2Vec2PhonemeCTCTokenizer"),IIr.forEach(t),uKe=r(p4e," (Wav2Vec2Phoneme model)"),p4e.forEach(t),pKe=i(y),In=s(y,"LI",{});var P7=n(In);jJ=s(P7,"STRONG",{});var jIr=n(jJ);_Ke=r(jIr,"xglm"),jIr.forEach(t),bKe=r(P7," \u2014 "),qk=s(P7,"A",{href:!0});var DIr=n(qk);vKe=r(DIr,"XGLMTokenizer"),DIr.forEach(t),TKe=r(P7," or "),Ok=s(P7,"A",{href:!0});var NIr=n(Ok);FKe=r(NIr,"XGLMTokenizerFast"),NIr.forEach(t),CKe=r(P7," (XGLM model)"),P7.forEach(t),MKe=i(y),ah=s(y,"LI",{});var _4e=n(ah);DJ=s(_4e,"STRONG",{});var qIr=n(DJ);EKe=r(qIr,"xlm"),qIr.forEach(t),yKe=r(_4e," \u2014 "),Gk=s(_4e,"A",{href:!0});var OIr=n(Gk);wKe=r(OIr,"XLMTokenizer"),OIr.forEach(t),AKe=r(_4e," (XLM model)"),_4e.forEach(t),LKe=i(y),sh=s(y,"LI",{});var b4e=n(sh);NJ=s(b4e,"STRONG",{});var GIr=n(NJ);BKe=r(GIr,"xlm-prophetnet"),GIr.forEach(t),xKe=r(b4e," \u2014 "),Xk=s(b4e,"A",{href:!0});var XIr=n(Xk);kKe=r(XIr,"XLMProphetNetTokenizer"),XIr.forEach(t),RKe=r(b4e," (XLMProphetNet model)"),b4e.forEach(t),SKe=i(y),jn=s(y,"LI",{});var $7=n(jn);qJ=s($7,"STRONG",{});var VIr=n(qJ);PKe=r(VIr,"xlm-roberta"),VIr.forEach(t),$Ke=r($7," \u2014 "),Vk=s($7,"A",{href:!0});var zIr=n(Vk);IKe=r(zIr,"XLMRobertaTokenizer"),zIr.forEach(t),jKe=r($7," or "),zk=s($7,"A",{href:!0});var WIr=n(zk);DKe=r(WIr,"XLMRobertaTokenizerFast"),WIr.forEach(t),NKe=r($7," (XLM-RoBERTa model)"),$7.forEach(t),qKe=i(y),Dn=s(y,"LI",{});var I7=n(Dn);OJ=s(I7,"STRONG",{});var QIr=n(OJ);OKe=r(QIr,"xlnet"),QIr.forEach(t),GKe=r(I7," \u2014 "),Wk=s(I7,"A",{href:!0});var HIr=n(Wk);XKe=r(HIr,"XLNetTokenizer"),HIr.forEach(t),VKe=r(I7," or "),Qk=s(I7,"A",{href:!0});var UIr=n(Qk);zKe=r(UIr,"XLNetTokenizerFast"),UIr.forEach(t),WKe=r(I7," (XLNet model)"),I7.forEach(t),y.forEach(t),QKe=i(ha),GJ=s(ha,"P",{});var JIr=n(GJ);HKe=r(JIr,"Examples:"),JIr.forEach(t),UKe=i(ha),f(my.$$.fragment,ha),ha.forEach(t),JKe=i(Xn),nh=s(Xn,"DIV",{class:!0});var vRe=n(nh);f(fy.$$.fragment,vRe),YKe=i(vRe),XJ=s(vRe,"P",{});var YIr=n(XJ);KKe=r(YIr,"Register a new tokenizer in this mapping."),YIr.forEach(t),vRe.forEach(t),Xn.forEach(t),uxe=i(d),Hi=s(d,"H2",{class:!0});var TRe=n(Hi);lh=s(TRe,"A",{id:!0,class:!0,href:!0});var KIr=n(lh);VJ=s(KIr,"SPAN",{});var ZIr=n(VJ);f(gy.$$.fragment,ZIr),ZIr.forEach(t),KIr.forEach(t),ZKe=i(TRe),zJ=s(TRe,"SPAN",{});var ejr=n(zJ);eZe=r(ejr,"AutoFeatureExtractor"),ejr.forEach(t),TRe.forEach(t),pxe=i(d),Ho=s(d,"DIV",{class:!0});var Vn=n(Ho);f(hy.$$.fragment,Vn),oZe=i(Vn),uy=s(Vn,"P",{});var FRe=n(uy);rZe=r(FRe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),Hk=s(FRe,"A",{href:!0});var ojr=n(Hk);tZe=r(ojr,"AutoFeatureExtractor.from_pretrained()"),ojr.forEach(t),aZe=r(FRe," class method."),FRe.forEach(t),sZe=i(Vn),py=s(Vn,"P",{});var CRe=n(py);nZe=r(CRe,"This class cannot be instantiated directly using "),WJ=s(CRe,"CODE",{});var rjr=n(WJ);lZe=r(rjr,"__init__()"),rjr.forEach(t),iZe=r(CRe," (throws an error)."),CRe.forEach(t),dZe=i(Vn),$e=s(Vn,"DIV",{class:!0});var Dt=n($e);f(_y.$$.fragment,Dt),cZe=i(Dt),QJ=s(Dt,"P",{});var tjr=n(QJ);mZe=r(tjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),tjr.forEach(t),fZe=i(Dt),Xa=s(Dt,"P",{});var J3=n(Xa);gZe=r(J3,"The feature extractor class to instantiate is selected based on the "),HJ=s(J3,"CODE",{});var ajr=n(HJ);hZe=r(ajr,"model_type"),ajr.forEach(t),uZe=r(J3,` property of the config object
(either passed as an argument or loaded from `),UJ=s(J3,"CODE",{});var sjr=n(UJ);pZe=r(sjr,"pretrained_model_name_or_path"),sjr.forEach(t),_Ze=r(J3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),JJ=s(J3,"CODE",{});var njr=n(JJ);bZe=r(njr,"pretrained_model_name_or_path"),njr.forEach(t),vZe=r(J3,":"),J3.forEach(t),TZe=i(Dt),ae=s(Dt,"UL",{});var le=n(ae);ih=s(le,"LI",{});var v4e=n(ih);YJ=s(v4e,"STRONG",{});var ljr=n(YJ);FZe=r(ljr,"beit"),ljr.forEach(t),CZe=r(v4e," \u2014 "),Uk=s(v4e,"A",{href:!0});var ijr=n(Uk);MZe=r(ijr,"BeitFeatureExtractor"),ijr.forEach(t),EZe=r(v4e," (BEiT model)"),v4e.forEach(t),yZe=i(le),dh=s(le,"LI",{});var T4e=n(dh);KJ=s(T4e,"STRONG",{});var djr=n(KJ);wZe=r(djr,"clip"),djr.forEach(t),AZe=r(T4e," \u2014 "),Jk=s(T4e,"A",{href:!0});var cjr=n(Jk);LZe=r(cjr,"CLIPFeatureExtractor"),cjr.forEach(t),BZe=r(T4e," (CLIP model)"),T4e.forEach(t),xZe=i(le),ch=s(le,"LI",{});var F4e=n(ch);ZJ=s(F4e,"STRONG",{});var mjr=n(ZJ);kZe=r(mjr,"convnext"),mjr.forEach(t),RZe=r(F4e," \u2014 "),Yk=s(F4e,"A",{href:!0});var fjr=n(Yk);SZe=r(fjr,"ConvNextFeatureExtractor"),fjr.forEach(t),PZe=r(F4e," (ConvNext model)"),F4e.forEach(t),$Ze=i(le),mh=s(le,"LI",{});var C4e=n(mh);eY=s(C4e,"STRONG",{});var gjr=n(eY);IZe=r(gjr,"deit"),gjr.forEach(t),jZe=r(C4e," \u2014 "),Kk=s(C4e,"A",{href:!0});var hjr=n(Kk);DZe=r(hjr,"DeiTFeatureExtractor"),hjr.forEach(t),NZe=r(C4e," (DeiT model)"),C4e.forEach(t),qZe=i(le),fh=s(le,"LI",{});var M4e=n(fh);oY=s(M4e,"STRONG",{});var ujr=n(oY);OZe=r(ujr,"detr"),ujr.forEach(t),GZe=r(M4e," \u2014 "),Zk=s(M4e,"A",{href:!0});var pjr=n(Zk);XZe=r(pjr,"DetrFeatureExtractor"),pjr.forEach(t),VZe=r(M4e," (DETR model)"),M4e.forEach(t),zZe=i(le),gh=s(le,"LI",{});var E4e=n(gh);rY=s(E4e,"STRONG",{});var _jr=n(rY);WZe=r(_jr,"hubert"),_jr.forEach(t),QZe=r(E4e," \u2014 "),eR=s(E4e,"A",{href:!0});var bjr=n(eR);HZe=r(bjr,"Wav2Vec2FeatureExtractor"),bjr.forEach(t),UZe=r(E4e," (Hubert model)"),E4e.forEach(t),JZe=i(le),hh=s(le,"LI",{});var y4e=n(hh);tY=s(y4e,"STRONG",{});var vjr=n(tY);YZe=r(vjr,"layoutlmv2"),vjr.forEach(t),KZe=r(y4e," \u2014 "),oR=s(y4e,"A",{href:!0});var Tjr=n(oR);ZZe=r(Tjr,"LayoutLMv2FeatureExtractor"),Tjr.forEach(t),eeo=r(y4e," (LayoutLMv2 model)"),y4e.forEach(t),oeo=i(le),uh=s(le,"LI",{});var w4e=n(uh);aY=s(w4e,"STRONG",{});var Fjr=n(aY);reo=r(Fjr,"maskformer"),Fjr.forEach(t),teo=r(w4e," \u2014 "),rR=s(w4e,"A",{href:!0});var Cjr=n(rR);aeo=r(Cjr,"MaskFormerFeatureExtractor"),Cjr.forEach(t),seo=r(w4e," (MaskFormer model)"),w4e.forEach(t),neo=i(le),ph=s(le,"LI",{});var A4e=n(ph);sY=s(A4e,"STRONG",{});var Mjr=n(sY);leo=r(Mjr,"perceiver"),Mjr.forEach(t),ieo=r(A4e," \u2014 "),tR=s(A4e,"A",{href:!0});var Ejr=n(tR);deo=r(Ejr,"PerceiverFeatureExtractor"),Ejr.forEach(t),ceo=r(A4e," (Perceiver model)"),A4e.forEach(t),meo=i(le),_h=s(le,"LI",{});var L4e=n(_h);nY=s(L4e,"STRONG",{});var yjr=n(nY);feo=r(yjr,"poolformer"),yjr.forEach(t),geo=r(L4e," \u2014 "),aR=s(L4e,"A",{href:!0});var wjr=n(aR);heo=r(wjr,"PoolFormerFeatureExtractor"),wjr.forEach(t),ueo=r(L4e," (PoolFormer model)"),L4e.forEach(t),peo=i(le),bh=s(le,"LI",{});var B4e=n(bh);lY=s(B4e,"STRONG",{});var Ajr=n(lY);_eo=r(Ajr,"segformer"),Ajr.forEach(t),beo=r(B4e," \u2014 "),sR=s(B4e,"A",{href:!0});var Ljr=n(sR);veo=r(Ljr,"SegformerFeatureExtractor"),Ljr.forEach(t),Teo=r(B4e," (SegFormer model)"),B4e.forEach(t),Feo=i(le),vh=s(le,"LI",{});var x4e=n(vh);iY=s(x4e,"STRONG",{});var Bjr=n(iY);Ceo=r(Bjr,"speech_to_text"),Bjr.forEach(t),Meo=r(x4e," \u2014 "),nR=s(x4e,"A",{href:!0});var xjr=n(nR);Eeo=r(xjr,"Speech2TextFeatureExtractor"),xjr.forEach(t),yeo=r(x4e," (Speech2Text model)"),x4e.forEach(t),weo=i(le),Th=s(le,"LI",{});var k4e=n(Th);dY=s(k4e,"STRONG",{});var kjr=n(dY);Aeo=r(kjr,"swin"),kjr.forEach(t),Leo=r(k4e," \u2014 "),lR=s(k4e,"A",{href:!0});var Rjr=n(lR);Beo=r(Rjr,"ViTFeatureExtractor"),Rjr.forEach(t),xeo=r(k4e," (Swin model)"),k4e.forEach(t),keo=i(le),Fh=s(le,"LI",{});var R4e=n(Fh);cY=s(R4e,"STRONG",{});var Sjr=n(cY);Reo=r(Sjr,"vit"),Sjr.forEach(t),Seo=r(R4e," \u2014 "),iR=s(R4e,"A",{href:!0});var Pjr=n(iR);Peo=r(Pjr,"ViTFeatureExtractor"),Pjr.forEach(t),$eo=r(R4e," (ViT model)"),R4e.forEach(t),Ieo=i(le),Ch=s(le,"LI",{});var S4e=n(Ch);mY=s(S4e,"STRONG",{});var $jr=n(mY);jeo=r($jr,"vit_mae"),$jr.forEach(t),Deo=r(S4e," \u2014 "),dR=s(S4e,"A",{href:!0});var Ijr=n(dR);Neo=r(Ijr,"ViTFeatureExtractor"),Ijr.forEach(t),qeo=r(S4e," (ViTMAE model)"),S4e.forEach(t),Oeo=i(le),Mh=s(le,"LI",{});var P4e=n(Mh);fY=s(P4e,"STRONG",{});var jjr=n(fY);Geo=r(jjr,"wav2vec2"),jjr.forEach(t),Xeo=r(P4e," \u2014 "),cR=s(P4e,"A",{href:!0});var Djr=n(cR);Veo=r(Djr,"Wav2Vec2FeatureExtractor"),Djr.forEach(t),zeo=r(P4e," (Wav2Vec2 model)"),P4e.forEach(t),le.forEach(t),Weo=i(Dt),f(Eh.$$.fragment,Dt),Qeo=i(Dt),gY=s(Dt,"P",{});var Njr=n(gY);Heo=r(Njr,"Examples:"),Njr.forEach(t),Ueo=i(Dt),f(by.$$.fragment,Dt),Dt.forEach(t),Jeo=i(Vn),yh=s(Vn,"DIV",{class:!0});var MRe=n(yh);f(vy.$$.fragment,MRe),Yeo=i(MRe),hY=s(MRe,"P",{});var qjr=n(hY);Keo=r(qjr,"Register a new feature extractor for this class."),qjr.forEach(t),MRe.forEach(t),Vn.forEach(t),_xe=i(d),Ui=s(d,"H2",{class:!0});var ERe=n(Ui);wh=s(ERe,"A",{id:!0,class:!0,href:!0});var Ojr=n(wh);uY=s(Ojr,"SPAN",{});var Gjr=n(uY);f(Ty.$$.fragment,Gjr),Gjr.forEach(t),Ojr.forEach(t),Zeo=i(ERe),pY=s(ERe,"SPAN",{});var Xjr=n(pY);eoo=r(Xjr,"AutoProcessor"),Xjr.forEach(t),ERe.forEach(t),bxe=i(d),Uo=s(d,"DIV",{class:!0});var zn=n(Uo);f(Fy.$$.fragment,zn),ooo=i(zn),Cy=s(zn,"P",{});var yRe=n(Cy);roo=r(yRe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mR=s(yRe,"A",{href:!0});var Vjr=n(mR);too=r(Vjr,"AutoProcessor.from_pretrained()"),Vjr.forEach(t),aoo=r(yRe," class method."),yRe.forEach(t),soo=i(zn),My=s(zn,"P",{});var wRe=n(My);noo=r(wRe,"This class cannot be instantiated directly using "),_Y=s(wRe,"CODE",{});var zjr=n(_Y);loo=r(zjr,"__init__()"),zjr.forEach(t),ioo=r(wRe," (throws an error)."),wRe.forEach(t),doo=i(zn),Ie=s(zn,"DIV",{class:!0});var Nt=n(Ie);f(Ey.$$.fragment,Nt),coo=i(Nt),bY=s(Nt,"P",{});var Wjr=n(bY);moo=r(Wjr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Wjr.forEach(t),foo=i(Nt),Ji=s(Nt,"P",{});var Ez=n(Ji);goo=r(Ez,"The processor class to instantiate is selected based on the "),vY=s(Ez,"CODE",{});var Qjr=n(vY);hoo=r(Qjr,"model_type"),Qjr.forEach(t),uoo=r(Ez,` property of the config object (either
passed as an argument or loaded from `),TY=s(Ez,"CODE",{});var Hjr=n(TY);poo=r(Hjr,"pretrained_model_name_or_path"),Hjr.forEach(t),_oo=r(Ez," if possible):"),Ez.forEach(t),boo=i(Nt),Be=s(Nt,"UL",{});var No=n(Be);Ah=s(No,"LI",{});var $4e=n(Ah);FY=s($4e,"STRONG",{});var Ujr=n(FY);voo=r(Ujr,"clip"),Ujr.forEach(t),Too=r($4e," \u2014 "),fR=s($4e,"A",{href:!0});var Jjr=n(fR);Foo=r(Jjr,"CLIPProcessor"),Jjr.forEach(t),Coo=r($4e," (CLIP model)"),$4e.forEach(t),Moo=i(No),Lh=s(No,"LI",{});var I4e=n(Lh);CY=s(I4e,"STRONG",{});var Yjr=n(CY);Eoo=r(Yjr,"layoutlmv2"),Yjr.forEach(t),yoo=r(I4e," \u2014 "),gR=s(I4e,"A",{href:!0});var Kjr=n(gR);woo=r(Kjr,"LayoutLMv2Processor"),Kjr.forEach(t),Aoo=r(I4e," (LayoutLMv2 model)"),I4e.forEach(t),Loo=i(No),Bh=s(No,"LI",{});var j4e=n(Bh);MY=s(j4e,"STRONG",{});var Zjr=n(MY);Boo=r(Zjr,"layoutxlm"),Zjr.forEach(t),xoo=r(j4e," \u2014 "),hR=s(j4e,"A",{href:!0});var eDr=n(hR);koo=r(eDr,"LayoutXLMProcessor"),eDr.forEach(t),Roo=r(j4e," (LayoutXLM model)"),j4e.forEach(t),Soo=i(No),xh=s(No,"LI",{});var D4e=n(xh);EY=s(D4e,"STRONG",{});var oDr=n(EY);Poo=r(oDr,"speech_to_text"),oDr.forEach(t),$oo=r(D4e," \u2014 "),uR=s(D4e,"A",{href:!0});var rDr=n(uR);Ioo=r(rDr,"Speech2TextProcessor"),rDr.forEach(t),joo=r(D4e," (Speech2Text model)"),D4e.forEach(t),Doo=i(No),kh=s(No,"LI",{});var N4e=n(kh);yY=s(N4e,"STRONG",{});var tDr=n(yY);Noo=r(tDr,"speech_to_text_2"),tDr.forEach(t),qoo=r(N4e," \u2014 "),pR=s(N4e,"A",{href:!0});var aDr=n(pR);Ooo=r(aDr,"Speech2Text2Processor"),aDr.forEach(t),Goo=r(N4e," (Speech2Text2 model)"),N4e.forEach(t),Xoo=i(No),Rh=s(No,"LI",{});var q4e=n(Rh);wY=s(q4e,"STRONG",{});var sDr=n(wY);Voo=r(sDr,"trocr"),sDr.forEach(t),zoo=r(q4e," \u2014 "),_R=s(q4e,"A",{href:!0});var nDr=n(_R);Woo=r(nDr,"TrOCRProcessor"),nDr.forEach(t),Qoo=r(q4e," (TrOCR model)"),q4e.forEach(t),Hoo=i(No),Sh=s(No,"LI",{});var O4e=n(Sh);AY=s(O4e,"STRONG",{});var lDr=n(AY);Uoo=r(lDr,"vision-text-dual-encoder"),lDr.forEach(t),Joo=r(O4e," \u2014 "),bR=s(O4e,"A",{href:!0});var iDr=n(bR);Yoo=r(iDr,"VisionTextDualEncoderProcessor"),iDr.forEach(t),Koo=r(O4e," (VisionTextDualEncoder model)"),O4e.forEach(t),Zoo=i(No),Ph=s(No,"LI",{});var G4e=n(Ph);LY=s(G4e,"STRONG",{});var dDr=n(LY);ero=r(dDr,"wav2vec2"),dDr.forEach(t),oro=r(G4e," \u2014 "),vR=s(G4e,"A",{href:!0});var cDr=n(vR);rro=r(cDr,"Wav2Vec2Processor"),cDr.forEach(t),tro=r(G4e," (Wav2Vec2 model)"),G4e.forEach(t),No.forEach(t),aro=i(Nt),f($h.$$.fragment,Nt),sro=i(Nt),BY=s(Nt,"P",{});var mDr=n(BY);nro=r(mDr,"Examples:"),mDr.forEach(t),lro=i(Nt),f(yy.$$.fragment,Nt),Nt.forEach(t),iro=i(zn),Ih=s(zn,"DIV",{class:!0});var ARe=n(Ih);f(wy.$$.fragment,ARe),dro=i(ARe),xY=s(ARe,"P",{});var fDr=n(xY);cro=r(fDr,"Register a new processor for this class."),fDr.forEach(t),ARe.forEach(t),zn.forEach(t),vxe=i(d),Yi=s(d,"H2",{class:!0});var LRe=n(Yi);jh=s(LRe,"A",{id:!0,class:!0,href:!0});var gDr=n(jh);kY=s(gDr,"SPAN",{});var hDr=n(kY);f(Ay.$$.fragment,hDr),hDr.forEach(t),gDr.forEach(t),mro=i(LRe),RY=s(LRe,"SPAN",{});var uDr=n(RY);fro=r(uDr,"AutoModel"),uDr.forEach(t),LRe.forEach(t),Txe=i(d),Jo=s(d,"DIV",{class:!0});var Wn=n(Jo);f(Ly.$$.fragment,Wn),gro=i(Wn),Ki=s(Wn,"P",{});var yz=n(Ki);hro=r(yz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SY=s(yz,"CODE",{});var pDr=n(SY);uro=r(pDr,"from_pretrained()"),pDr.forEach(t),pro=r(yz,"class method or the "),PY=s(yz,"CODE",{});var _Dr=n(PY);_ro=r(_Dr,"from_config()"),_Dr.forEach(t),bro=r(yz,`class
method.`),yz.forEach(t),vro=i(Wn),By=s(Wn,"P",{});var BRe=n(By);Tro=r(BRe,"This class cannot be instantiated directly using "),$Y=s(BRe,"CODE",{});var bDr=n($Y);Fro=r(bDr,"__init__()"),bDr.forEach(t),Cro=r(BRe," (throws an error)."),BRe.forEach(t),Mro=i(Wn),Vr=s(Wn,"DIV",{class:!0});var Qn=n(Vr);f(xy.$$.fragment,Qn),Ero=i(Qn),IY=s(Qn,"P",{});var vDr=n(IY);yro=r(vDr,"Instantiates one of the base model classes of the library from a configuration."),vDr.forEach(t),wro=i(Qn),Zi=s(Qn,"P",{});var wz=n(Zi);Aro=r(wz,`Note:
Loading a model from its configuration file does `),jY=s(wz,"STRONG",{});var TDr=n(jY);Lro=r(TDr,"not"),TDr.forEach(t),Bro=r(wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=s(wz,"CODE",{});var FDr=n(DY);xro=r(FDr,"from_pretrained()"),FDr.forEach(t),kro=r(wz,"to load the model weights."),wz.forEach(t),Rro=i(Qn),NY=s(Qn,"P",{});var CDr=n(NY);Sro=r(CDr,"Examples:"),CDr.forEach(t),Pro=i(Qn),f(ky.$$.fragment,Qn),Qn.forEach(t),$ro=i(Wn),je=s(Wn,"DIV",{class:!0});var qt=n(je);f(Ry.$$.fragment,qt),Iro=i(qt),qY=s(qt,"P",{});var MDr=n(qY);jro=r(MDr,"Instantiate one of the base model classes of the library from a pretrained model."),MDr.forEach(t),Dro=i(qt),Va=s(qt,"P",{});var Y3=n(Va);Nro=r(Y3,"The model class to instantiate is selected based on the "),OY=s(Y3,"CODE",{});var EDr=n(OY);qro=r(EDr,"model_type"),EDr.forEach(t),Oro=r(Y3,` property of the config object (either
passed as an argument or loaded from `),GY=s(Y3,"CODE",{});var yDr=n(GY);Gro=r(yDr,"pretrained_model_name_or_path"),yDr.forEach(t),Xro=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XY=s(Y3,"CODE",{});var wDr=n(XY);Vro=r(wDr,"pretrained_model_name_or_path"),wDr.forEach(t),zro=r(Y3,":"),Y3.forEach(t),Wro=i(qt),F=s(qt,"UL",{});var C=n(F);Dh=s(C,"LI",{});var X4e=n(Dh);VY=s(X4e,"STRONG",{});var ADr=n(VY);Qro=r(ADr,"albert"),ADr.forEach(t),Hro=r(X4e," \u2014 "),TR=s(X4e,"A",{href:!0});var LDr=n(TR);Uro=r(LDr,"AlbertModel"),LDr.forEach(t),Jro=r(X4e," (ALBERT model)"),X4e.forEach(t),Yro=i(C),Nh=s(C,"LI",{});var V4e=n(Nh);zY=s(V4e,"STRONG",{});var BDr=n(zY);Kro=r(BDr,"bart"),BDr.forEach(t),Zro=r(V4e," \u2014 "),FR=s(V4e,"A",{href:!0});var xDr=n(FR);eto=r(xDr,"BartModel"),xDr.forEach(t),oto=r(V4e," (BART model)"),V4e.forEach(t),rto=i(C),qh=s(C,"LI",{});var z4e=n(qh);WY=s(z4e,"STRONG",{});var kDr=n(WY);tto=r(kDr,"beit"),kDr.forEach(t),ato=r(z4e," \u2014 "),CR=s(z4e,"A",{href:!0});var RDr=n(CR);sto=r(RDr,"BeitModel"),RDr.forEach(t),nto=r(z4e," (BEiT model)"),z4e.forEach(t),lto=i(C),Oh=s(C,"LI",{});var W4e=n(Oh);QY=s(W4e,"STRONG",{});var SDr=n(QY);ito=r(SDr,"bert"),SDr.forEach(t),dto=r(W4e," \u2014 "),MR=s(W4e,"A",{href:!0});var PDr=n(MR);cto=r(PDr,"BertModel"),PDr.forEach(t),mto=r(W4e," (BERT model)"),W4e.forEach(t),fto=i(C),Gh=s(C,"LI",{});var Q4e=n(Gh);HY=s(Q4e,"STRONG",{});var $Dr=n(HY);gto=r($Dr,"bert-generation"),$Dr.forEach(t),hto=r(Q4e," \u2014 "),ER=s(Q4e,"A",{href:!0});var IDr=n(ER);uto=r(IDr,"BertGenerationEncoder"),IDr.forEach(t),pto=r(Q4e," (Bert Generation model)"),Q4e.forEach(t),_to=i(C),Xh=s(C,"LI",{});var H4e=n(Xh);UY=s(H4e,"STRONG",{});var jDr=n(UY);bto=r(jDr,"big_bird"),jDr.forEach(t),vto=r(H4e," \u2014 "),yR=s(H4e,"A",{href:!0});var DDr=n(yR);Tto=r(DDr,"BigBirdModel"),DDr.forEach(t),Fto=r(H4e," (BigBird model)"),H4e.forEach(t),Cto=i(C),Vh=s(C,"LI",{});var U4e=n(Vh);JY=s(U4e,"STRONG",{});var NDr=n(JY);Mto=r(NDr,"bigbird_pegasus"),NDr.forEach(t),Eto=r(U4e," \u2014 "),wR=s(U4e,"A",{href:!0});var qDr=n(wR);yto=r(qDr,"BigBirdPegasusModel"),qDr.forEach(t),wto=r(U4e," (BigBirdPegasus model)"),U4e.forEach(t),Ato=i(C),zh=s(C,"LI",{});var J4e=n(zh);YY=s(J4e,"STRONG",{});var ODr=n(YY);Lto=r(ODr,"blenderbot"),ODr.forEach(t),Bto=r(J4e," \u2014 "),AR=s(J4e,"A",{href:!0});var GDr=n(AR);xto=r(GDr,"BlenderbotModel"),GDr.forEach(t),kto=r(J4e," (Blenderbot model)"),J4e.forEach(t),Rto=i(C),Wh=s(C,"LI",{});var Y4e=n(Wh);KY=s(Y4e,"STRONG",{});var XDr=n(KY);Sto=r(XDr,"blenderbot-small"),XDr.forEach(t),Pto=r(Y4e," \u2014 "),LR=s(Y4e,"A",{href:!0});var VDr=n(LR);$to=r(VDr,"BlenderbotSmallModel"),VDr.forEach(t),Ito=r(Y4e," (BlenderbotSmall model)"),Y4e.forEach(t),jto=i(C),Qh=s(C,"LI",{});var K4e=n(Qh);ZY=s(K4e,"STRONG",{});var zDr=n(ZY);Dto=r(zDr,"camembert"),zDr.forEach(t),Nto=r(K4e," \u2014 "),BR=s(K4e,"A",{href:!0});var WDr=n(BR);qto=r(WDr,"CamembertModel"),WDr.forEach(t),Oto=r(K4e," (CamemBERT model)"),K4e.forEach(t),Gto=i(C),Hh=s(C,"LI",{});var Z4e=n(Hh);eK=s(Z4e,"STRONG",{});var QDr=n(eK);Xto=r(QDr,"canine"),QDr.forEach(t),Vto=r(Z4e," \u2014 "),xR=s(Z4e,"A",{href:!0});var HDr=n(xR);zto=r(HDr,"CanineModel"),HDr.forEach(t),Wto=r(Z4e," (Canine model)"),Z4e.forEach(t),Qto=i(C),Uh=s(C,"LI",{});var eEe=n(Uh);oK=s(eEe,"STRONG",{});var UDr=n(oK);Hto=r(UDr,"clip"),UDr.forEach(t),Uto=r(eEe," \u2014 "),kR=s(eEe,"A",{href:!0});var JDr=n(kR);Jto=r(JDr,"CLIPModel"),JDr.forEach(t),Yto=r(eEe," (CLIP model)"),eEe.forEach(t),Kto=i(C),Jh=s(C,"LI",{});var oEe=n(Jh);rK=s(oEe,"STRONG",{});var YDr=n(rK);Zto=r(YDr,"convbert"),YDr.forEach(t),eao=r(oEe," \u2014 "),RR=s(oEe,"A",{href:!0});var KDr=n(RR);oao=r(KDr,"ConvBertModel"),KDr.forEach(t),rao=r(oEe," (ConvBERT model)"),oEe.forEach(t),tao=i(C),Yh=s(C,"LI",{});var rEe=n(Yh);tK=s(rEe,"STRONG",{});var ZDr=n(tK);aao=r(ZDr,"convnext"),ZDr.forEach(t),sao=r(rEe," \u2014 "),SR=s(rEe,"A",{href:!0});var eNr=n(SR);nao=r(eNr,"ConvNextModel"),eNr.forEach(t),lao=r(rEe," (ConvNext model)"),rEe.forEach(t),iao=i(C),Kh=s(C,"LI",{});var tEe=n(Kh);aK=s(tEe,"STRONG",{});var oNr=n(aK);dao=r(oNr,"ctrl"),oNr.forEach(t),cao=r(tEe," \u2014 "),PR=s(tEe,"A",{href:!0});var rNr=n(PR);mao=r(rNr,"CTRLModel"),rNr.forEach(t),fao=r(tEe," (CTRL model)"),tEe.forEach(t),gao=i(C),Zh=s(C,"LI",{});var aEe=n(Zh);sK=s(aEe,"STRONG",{});var tNr=n(sK);hao=r(tNr,"data2vec-audio"),tNr.forEach(t),uao=r(aEe," \u2014 "),$R=s(aEe,"A",{href:!0});var aNr=n($R);pao=r(aNr,"Data2VecAudioModel"),aNr.forEach(t),_ao=r(aEe," (Data2VecAudio model)"),aEe.forEach(t),bao=i(C),eu=s(C,"LI",{});var sEe=n(eu);nK=s(sEe,"STRONG",{});var sNr=n(nK);vao=r(sNr,"data2vec-text"),sNr.forEach(t),Tao=r(sEe," \u2014 "),IR=s(sEe,"A",{href:!0});var nNr=n(IR);Fao=r(nNr,"Data2VecTextModel"),nNr.forEach(t),Cao=r(sEe," (Data2VecText model)"),sEe.forEach(t),Mao=i(C),ou=s(C,"LI",{});var nEe=n(ou);lK=s(nEe,"STRONG",{});var lNr=n(lK);Eao=r(lNr,"deberta"),lNr.forEach(t),yao=r(nEe," \u2014 "),jR=s(nEe,"A",{href:!0});var iNr=n(jR);wao=r(iNr,"DebertaModel"),iNr.forEach(t),Aao=r(nEe," (DeBERTa model)"),nEe.forEach(t),Lao=i(C),ru=s(C,"LI",{});var lEe=n(ru);iK=s(lEe,"STRONG",{});var dNr=n(iK);Bao=r(dNr,"deberta-v2"),dNr.forEach(t),xao=r(lEe," \u2014 "),DR=s(lEe,"A",{href:!0});var cNr=n(DR);kao=r(cNr,"DebertaV2Model"),cNr.forEach(t),Rao=r(lEe," (DeBERTa-v2 model)"),lEe.forEach(t),Sao=i(C),tu=s(C,"LI",{});var iEe=n(tu);dK=s(iEe,"STRONG",{});var mNr=n(dK);Pao=r(mNr,"deit"),mNr.forEach(t),$ao=r(iEe," \u2014 "),NR=s(iEe,"A",{href:!0});var fNr=n(NR);Iao=r(fNr,"DeiTModel"),fNr.forEach(t),jao=r(iEe," (DeiT model)"),iEe.forEach(t),Dao=i(C),au=s(C,"LI",{});var dEe=n(au);cK=s(dEe,"STRONG",{});var gNr=n(cK);Nao=r(gNr,"detr"),gNr.forEach(t),qao=r(dEe," \u2014 "),qR=s(dEe,"A",{href:!0});var hNr=n(qR);Oao=r(hNr,"DetrModel"),hNr.forEach(t),Gao=r(dEe," (DETR model)"),dEe.forEach(t),Xao=i(C),su=s(C,"LI",{});var cEe=n(su);mK=s(cEe,"STRONG",{});var uNr=n(mK);Vao=r(uNr,"distilbert"),uNr.forEach(t),zao=r(cEe," \u2014 "),OR=s(cEe,"A",{href:!0});var pNr=n(OR);Wao=r(pNr,"DistilBertModel"),pNr.forEach(t),Qao=r(cEe," (DistilBERT model)"),cEe.forEach(t),Hao=i(C),nu=s(C,"LI",{});var mEe=n(nu);fK=s(mEe,"STRONG",{});var _Nr=n(fK);Uao=r(_Nr,"dpr"),_Nr.forEach(t),Jao=r(mEe," \u2014 "),GR=s(mEe,"A",{href:!0});var bNr=n(GR);Yao=r(bNr,"DPRQuestionEncoder"),bNr.forEach(t),Kao=r(mEe," (DPR model)"),mEe.forEach(t),Zao=i(C),lu=s(C,"LI",{});var fEe=n(lu);gK=s(fEe,"STRONG",{});var vNr=n(gK);eso=r(vNr,"electra"),vNr.forEach(t),oso=r(fEe," \u2014 "),XR=s(fEe,"A",{href:!0});var TNr=n(XR);rso=r(TNr,"ElectraModel"),TNr.forEach(t),tso=r(fEe," (ELECTRA model)"),fEe.forEach(t),aso=i(C),iu=s(C,"LI",{});var gEe=n(iu);hK=s(gEe,"STRONG",{});var FNr=n(hK);sso=r(FNr,"flaubert"),FNr.forEach(t),nso=r(gEe," \u2014 "),VR=s(gEe,"A",{href:!0});var CNr=n(VR);lso=r(CNr,"FlaubertModel"),CNr.forEach(t),iso=r(gEe," (FlauBERT model)"),gEe.forEach(t),dso=i(C),du=s(C,"LI",{});var hEe=n(du);uK=s(hEe,"STRONG",{});var MNr=n(uK);cso=r(MNr,"fnet"),MNr.forEach(t),mso=r(hEe," \u2014 "),zR=s(hEe,"A",{href:!0});var ENr=n(zR);fso=r(ENr,"FNetModel"),ENr.forEach(t),gso=r(hEe," (FNet model)"),hEe.forEach(t),hso=i(C),cu=s(C,"LI",{});var uEe=n(cu);pK=s(uEe,"STRONG",{});var yNr=n(pK);uso=r(yNr,"fsmt"),yNr.forEach(t),pso=r(uEe," \u2014 "),WR=s(uEe,"A",{href:!0});var wNr=n(WR);_so=r(wNr,"FSMTModel"),wNr.forEach(t),bso=r(uEe," (FairSeq Machine-Translation model)"),uEe.forEach(t),vso=i(C),Nn=s(C,"LI",{});var j7=n(Nn);_K=s(j7,"STRONG",{});var ANr=n(_K);Tso=r(ANr,"funnel"),ANr.forEach(t),Fso=r(j7," \u2014 "),QR=s(j7,"A",{href:!0});var LNr=n(QR);Cso=r(LNr,"FunnelModel"),LNr.forEach(t),Mso=r(j7," or "),HR=s(j7,"A",{href:!0});var BNr=n(HR);Eso=r(BNr,"FunnelBaseModel"),BNr.forEach(t),yso=r(j7," (Funnel Transformer model)"),j7.forEach(t),wso=i(C),mu=s(C,"LI",{});var pEe=n(mu);bK=s(pEe,"STRONG",{});var xNr=n(bK);Aso=r(xNr,"gpt2"),xNr.forEach(t),Lso=r(pEe," \u2014 "),UR=s(pEe,"A",{href:!0});var kNr=n(UR);Bso=r(kNr,"GPT2Model"),kNr.forEach(t),xso=r(pEe," (OpenAI GPT-2 model)"),pEe.forEach(t),kso=i(C),fu=s(C,"LI",{});var _Ee=n(fu);vK=s(_Ee,"STRONG",{});var RNr=n(vK);Rso=r(RNr,"gpt_neo"),RNr.forEach(t),Sso=r(_Ee," \u2014 "),JR=s(_Ee,"A",{href:!0});var SNr=n(JR);Pso=r(SNr,"GPTNeoModel"),SNr.forEach(t),$so=r(_Ee," (GPT Neo model)"),_Ee.forEach(t),Iso=i(C),gu=s(C,"LI",{});var bEe=n(gu);TK=s(bEe,"STRONG",{});var PNr=n(TK);jso=r(PNr,"gptj"),PNr.forEach(t),Dso=r(bEe," \u2014 "),YR=s(bEe,"A",{href:!0});var $Nr=n(YR);Nso=r($Nr,"GPTJModel"),$Nr.forEach(t),qso=r(bEe," (GPT-J model)"),bEe.forEach(t),Oso=i(C),hu=s(C,"LI",{});var vEe=n(hu);FK=s(vEe,"STRONG",{});var INr=n(FK);Gso=r(INr,"hubert"),INr.forEach(t),Xso=r(vEe," \u2014 "),KR=s(vEe,"A",{href:!0});var jNr=n(KR);Vso=r(jNr,"HubertModel"),jNr.forEach(t),zso=r(vEe," (Hubert model)"),vEe.forEach(t),Wso=i(C),uu=s(C,"LI",{});var TEe=n(uu);CK=s(TEe,"STRONG",{});var DNr=n(CK);Qso=r(DNr,"ibert"),DNr.forEach(t),Hso=r(TEe," \u2014 "),ZR=s(TEe,"A",{href:!0});var NNr=n(ZR);Uso=r(NNr,"IBertModel"),NNr.forEach(t),Jso=r(TEe," (I-BERT model)"),TEe.forEach(t),Yso=i(C),pu=s(C,"LI",{});var FEe=n(pu);MK=s(FEe,"STRONG",{});var qNr=n(MK);Kso=r(qNr,"imagegpt"),qNr.forEach(t),Zso=r(FEe," \u2014 "),eS=s(FEe,"A",{href:!0});var ONr=n(eS);eno=r(ONr,"ImageGPTModel"),ONr.forEach(t),ono=r(FEe," (ImageGPT model)"),FEe.forEach(t),rno=i(C),_u=s(C,"LI",{});var CEe=n(_u);EK=s(CEe,"STRONG",{});var GNr=n(EK);tno=r(GNr,"layoutlm"),GNr.forEach(t),ano=r(CEe," \u2014 "),oS=s(CEe,"A",{href:!0});var XNr=n(oS);sno=r(XNr,"LayoutLMModel"),XNr.forEach(t),nno=r(CEe," (LayoutLM model)"),CEe.forEach(t),lno=i(C),bu=s(C,"LI",{});var MEe=n(bu);yK=s(MEe,"STRONG",{});var VNr=n(yK);ino=r(VNr,"layoutlmv2"),VNr.forEach(t),dno=r(MEe," \u2014 "),rS=s(MEe,"A",{href:!0});var zNr=n(rS);cno=r(zNr,"LayoutLMv2Model"),zNr.forEach(t),mno=r(MEe," (LayoutLMv2 model)"),MEe.forEach(t),fno=i(C),vu=s(C,"LI",{});var EEe=n(vu);wK=s(EEe,"STRONG",{});var WNr=n(wK);gno=r(WNr,"led"),WNr.forEach(t),hno=r(EEe," \u2014 "),tS=s(EEe,"A",{href:!0});var QNr=n(tS);uno=r(QNr,"LEDModel"),QNr.forEach(t),pno=r(EEe," (LED model)"),EEe.forEach(t),_no=i(C),Tu=s(C,"LI",{});var yEe=n(Tu);AK=s(yEe,"STRONG",{});var HNr=n(AK);bno=r(HNr,"longformer"),HNr.forEach(t),vno=r(yEe," \u2014 "),aS=s(yEe,"A",{href:!0});var UNr=n(aS);Tno=r(UNr,"LongformerModel"),UNr.forEach(t),Fno=r(yEe," (Longformer model)"),yEe.forEach(t),Cno=i(C),Fu=s(C,"LI",{});var wEe=n(Fu);LK=s(wEe,"STRONG",{});var JNr=n(LK);Mno=r(JNr,"luke"),JNr.forEach(t),Eno=r(wEe," \u2014 "),sS=s(wEe,"A",{href:!0});var YNr=n(sS);yno=r(YNr,"LukeModel"),YNr.forEach(t),wno=r(wEe," (LUKE model)"),wEe.forEach(t),Ano=i(C),Cu=s(C,"LI",{});var AEe=n(Cu);BK=s(AEe,"STRONG",{});var KNr=n(BK);Lno=r(KNr,"lxmert"),KNr.forEach(t),Bno=r(AEe," \u2014 "),nS=s(AEe,"A",{href:!0});var ZNr=n(nS);xno=r(ZNr,"LxmertModel"),ZNr.forEach(t),kno=r(AEe," (LXMERT model)"),AEe.forEach(t),Rno=i(C),Mu=s(C,"LI",{});var LEe=n(Mu);xK=s(LEe,"STRONG",{});var eqr=n(xK);Sno=r(eqr,"m2m_100"),eqr.forEach(t),Pno=r(LEe," \u2014 "),lS=s(LEe,"A",{href:!0});var oqr=n(lS);$no=r(oqr,"M2M100Model"),oqr.forEach(t),Ino=r(LEe," (M2M100 model)"),LEe.forEach(t),jno=i(C),Eu=s(C,"LI",{});var BEe=n(Eu);kK=s(BEe,"STRONG",{});var rqr=n(kK);Dno=r(rqr,"marian"),rqr.forEach(t),Nno=r(BEe," \u2014 "),iS=s(BEe,"A",{href:!0});var tqr=n(iS);qno=r(tqr,"MarianModel"),tqr.forEach(t),Ono=r(BEe," (Marian model)"),BEe.forEach(t),Gno=i(C),yu=s(C,"LI",{});var xEe=n(yu);RK=s(xEe,"STRONG",{});var aqr=n(RK);Xno=r(aqr,"maskformer"),aqr.forEach(t),Vno=r(xEe," \u2014 "),dS=s(xEe,"A",{href:!0});var sqr=n(dS);zno=r(sqr,"MaskFormerModel"),sqr.forEach(t),Wno=r(xEe," (MaskFormer model)"),xEe.forEach(t),Qno=i(C),wu=s(C,"LI",{});var kEe=n(wu);SK=s(kEe,"STRONG",{});var nqr=n(SK);Hno=r(nqr,"mbart"),nqr.forEach(t),Uno=r(kEe," \u2014 "),cS=s(kEe,"A",{href:!0});var lqr=n(cS);Jno=r(lqr,"MBartModel"),lqr.forEach(t),Yno=r(kEe," (mBART model)"),kEe.forEach(t),Kno=i(C),Au=s(C,"LI",{});var REe=n(Au);PK=s(REe,"STRONG",{});var iqr=n(PK);Zno=r(iqr,"megatron-bert"),iqr.forEach(t),elo=r(REe," \u2014 "),mS=s(REe,"A",{href:!0});var dqr=n(mS);olo=r(dqr,"MegatronBertModel"),dqr.forEach(t),rlo=r(REe," (MegatronBert model)"),REe.forEach(t),tlo=i(C),Lu=s(C,"LI",{});var SEe=n(Lu);$K=s(SEe,"STRONG",{});var cqr=n($K);alo=r(cqr,"mobilebert"),cqr.forEach(t),slo=r(SEe," \u2014 "),fS=s(SEe,"A",{href:!0});var mqr=n(fS);nlo=r(mqr,"MobileBertModel"),mqr.forEach(t),llo=r(SEe," (MobileBERT model)"),SEe.forEach(t),ilo=i(C),Bu=s(C,"LI",{});var PEe=n(Bu);IK=s(PEe,"STRONG",{});var fqr=n(IK);dlo=r(fqr,"mpnet"),fqr.forEach(t),clo=r(PEe," \u2014 "),gS=s(PEe,"A",{href:!0});var gqr=n(gS);mlo=r(gqr,"MPNetModel"),gqr.forEach(t),flo=r(PEe," (MPNet model)"),PEe.forEach(t),glo=i(C),xu=s(C,"LI",{});var $Ee=n(xu);jK=s($Ee,"STRONG",{});var hqr=n(jK);hlo=r(hqr,"mt5"),hqr.forEach(t),ulo=r($Ee," \u2014 "),hS=s($Ee,"A",{href:!0});var uqr=n(hS);plo=r(uqr,"MT5Model"),uqr.forEach(t),_lo=r($Ee," (mT5 model)"),$Ee.forEach(t),blo=i(C),ku=s(C,"LI",{});var IEe=n(ku);DK=s(IEe,"STRONG",{});var pqr=n(DK);vlo=r(pqr,"nystromformer"),pqr.forEach(t),Tlo=r(IEe," \u2014 "),uS=s(IEe,"A",{href:!0});var _qr=n(uS);Flo=r(_qr,"NystromformerModel"),_qr.forEach(t),Clo=r(IEe," (Nystromformer model)"),IEe.forEach(t),Mlo=i(C),Ru=s(C,"LI",{});var jEe=n(Ru);NK=s(jEe,"STRONG",{});var bqr=n(NK);Elo=r(bqr,"openai-gpt"),bqr.forEach(t),ylo=r(jEe," \u2014 "),pS=s(jEe,"A",{href:!0});var vqr=n(pS);wlo=r(vqr,"OpenAIGPTModel"),vqr.forEach(t),Alo=r(jEe," (OpenAI GPT model)"),jEe.forEach(t),Llo=i(C),Su=s(C,"LI",{});var DEe=n(Su);qK=s(DEe,"STRONG",{});var Tqr=n(qK);Blo=r(Tqr,"pegasus"),Tqr.forEach(t),xlo=r(DEe," \u2014 "),_S=s(DEe,"A",{href:!0});var Fqr=n(_S);klo=r(Fqr,"PegasusModel"),Fqr.forEach(t),Rlo=r(DEe," (Pegasus model)"),DEe.forEach(t),Slo=i(C),Pu=s(C,"LI",{});var NEe=n(Pu);OK=s(NEe,"STRONG",{});var Cqr=n(OK);Plo=r(Cqr,"perceiver"),Cqr.forEach(t),$lo=r(NEe," \u2014 "),bS=s(NEe,"A",{href:!0});var Mqr=n(bS);Ilo=r(Mqr,"PerceiverModel"),Mqr.forEach(t),jlo=r(NEe," (Perceiver model)"),NEe.forEach(t),Dlo=i(C),$u=s(C,"LI",{});var qEe=n($u);GK=s(qEe,"STRONG",{});var Eqr=n(GK);Nlo=r(Eqr,"plbart"),Eqr.forEach(t),qlo=r(qEe," \u2014 "),vS=s(qEe,"A",{href:!0});var yqr=n(vS);Olo=r(yqr,"PLBartModel"),yqr.forEach(t),Glo=r(qEe," (PLBart model)"),qEe.forEach(t),Xlo=i(C),Iu=s(C,"LI",{});var OEe=n(Iu);XK=s(OEe,"STRONG",{});var wqr=n(XK);Vlo=r(wqr,"poolformer"),wqr.forEach(t),zlo=r(OEe," \u2014 "),TS=s(OEe,"A",{href:!0});var Aqr=n(TS);Wlo=r(Aqr,"PoolFormerModel"),Aqr.forEach(t),Qlo=r(OEe," (PoolFormer model)"),OEe.forEach(t),Hlo=i(C),ju=s(C,"LI",{});var GEe=n(ju);VK=s(GEe,"STRONG",{});var Lqr=n(VK);Ulo=r(Lqr,"prophetnet"),Lqr.forEach(t),Jlo=r(GEe," \u2014 "),FS=s(GEe,"A",{href:!0});var Bqr=n(FS);Ylo=r(Bqr,"ProphetNetModel"),Bqr.forEach(t),Klo=r(GEe," (ProphetNet model)"),GEe.forEach(t),Zlo=i(C),Du=s(C,"LI",{});var XEe=n(Du);zK=s(XEe,"STRONG",{});var xqr=n(zK);eio=r(xqr,"qdqbert"),xqr.forEach(t),oio=r(XEe," \u2014 "),CS=s(XEe,"A",{href:!0});var kqr=n(CS);rio=r(kqr,"QDQBertModel"),kqr.forEach(t),tio=r(XEe," (QDQBert model)"),XEe.forEach(t),aio=i(C),Nu=s(C,"LI",{});var VEe=n(Nu);WK=s(VEe,"STRONG",{});var Rqr=n(WK);sio=r(Rqr,"reformer"),Rqr.forEach(t),nio=r(VEe," \u2014 "),MS=s(VEe,"A",{href:!0});var Sqr=n(MS);lio=r(Sqr,"ReformerModel"),Sqr.forEach(t),iio=r(VEe," (Reformer model)"),VEe.forEach(t),dio=i(C),qu=s(C,"LI",{});var zEe=n(qu);QK=s(zEe,"STRONG",{});var Pqr=n(QK);cio=r(Pqr,"rembert"),Pqr.forEach(t),mio=r(zEe," \u2014 "),ES=s(zEe,"A",{href:!0});var $qr=n(ES);fio=r($qr,"RemBertModel"),$qr.forEach(t),gio=r(zEe," (RemBERT model)"),zEe.forEach(t),hio=i(C),Ou=s(C,"LI",{});var WEe=n(Ou);HK=s(WEe,"STRONG",{});var Iqr=n(HK);uio=r(Iqr,"retribert"),Iqr.forEach(t),pio=r(WEe," \u2014 "),yS=s(WEe,"A",{href:!0});var jqr=n(yS);_io=r(jqr,"RetriBertModel"),jqr.forEach(t),bio=r(WEe," (RetriBERT model)"),WEe.forEach(t),vio=i(C),Gu=s(C,"LI",{});var QEe=n(Gu);UK=s(QEe,"STRONG",{});var Dqr=n(UK);Tio=r(Dqr,"roberta"),Dqr.forEach(t),Fio=r(QEe," \u2014 "),wS=s(QEe,"A",{href:!0});var Nqr=n(wS);Cio=r(Nqr,"RobertaModel"),Nqr.forEach(t),Mio=r(QEe," (RoBERTa model)"),QEe.forEach(t),Eio=i(C),Xu=s(C,"LI",{});var HEe=n(Xu);JK=s(HEe,"STRONG",{});var qqr=n(JK);yio=r(qqr,"roformer"),qqr.forEach(t),wio=r(HEe," \u2014 "),AS=s(HEe,"A",{href:!0});var Oqr=n(AS);Aio=r(Oqr,"RoFormerModel"),Oqr.forEach(t),Lio=r(HEe," (RoFormer model)"),HEe.forEach(t),Bio=i(C),Vu=s(C,"LI",{});var UEe=n(Vu);YK=s(UEe,"STRONG",{});var Gqr=n(YK);xio=r(Gqr,"segformer"),Gqr.forEach(t),kio=r(UEe," \u2014 "),LS=s(UEe,"A",{href:!0});var Xqr=n(LS);Rio=r(Xqr,"SegformerModel"),Xqr.forEach(t),Sio=r(UEe," (SegFormer model)"),UEe.forEach(t),Pio=i(C),zu=s(C,"LI",{});var JEe=n(zu);KK=s(JEe,"STRONG",{});var Vqr=n(KK);$io=r(Vqr,"sew"),Vqr.forEach(t),Iio=r(JEe," \u2014 "),BS=s(JEe,"A",{href:!0});var zqr=n(BS);jio=r(zqr,"SEWModel"),zqr.forEach(t),Dio=r(JEe," (SEW model)"),JEe.forEach(t),Nio=i(C),Wu=s(C,"LI",{});var YEe=n(Wu);ZK=s(YEe,"STRONG",{});var Wqr=n(ZK);qio=r(Wqr,"sew-d"),Wqr.forEach(t),Oio=r(YEe," \u2014 "),xS=s(YEe,"A",{href:!0});var Qqr=n(xS);Gio=r(Qqr,"SEWDModel"),Qqr.forEach(t),Xio=r(YEe," (SEW-D model)"),YEe.forEach(t),Vio=i(C),Qu=s(C,"LI",{});var KEe=n(Qu);eZ=s(KEe,"STRONG",{});var Hqr=n(eZ);zio=r(Hqr,"speech_to_text"),Hqr.forEach(t),Wio=r(KEe," \u2014 "),kS=s(KEe,"A",{href:!0});var Uqr=n(kS);Qio=r(Uqr,"Speech2TextModel"),Uqr.forEach(t),Hio=r(KEe," (Speech2Text model)"),KEe.forEach(t),Uio=i(C),Hu=s(C,"LI",{});var ZEe=n(Hu);oZ=s(ZEe,"STRONG",{});var Jqr=n(oZ);Jio=r(Jqr,"splinter"),Jqr.forEach(t),Yio=r(ZEe," \u2014 "),RS=s(ZEe,"A",{href:!0});var Yqr=n(RS);Kio=r(Yqr,"SplinterModel"),Yqr.forEach(t),Zio=r(ZEe," (Splinter model)"),ZEe.forEach(t),edo=i(C),Uu=s(C,"LI",{});var e3e=n(Uu);rZ=s(e3e,"STRONG",{});var Kqr=n(rZ);odo=r(Kqr,"squeezebert"),Kqr.forEach(t),rdo=r(e3e," \u2014 "),SS=s(e3e,"A",{href:!0});var Zqr=n(SS);tdo=r(Zqr,"SqueezeBertModel"),Zqr.forEach(t),ado=r(e3e," (SqueezeBERT model)"),e3e.forEach(t),sdo=i(C),Ju=s(C,"LI",{});var o3e=n(Ju);tZ=s(o3e,"STRONG",{});var eOr=n(tZ);ndo=r(eOr,"swin"),eOr.forEach(t),ldo=r(o3e," \u2014 "),PS=s(o3e,"A",{href:!0});var oOr=n(PS);ido=r(oOr,"SwinModel"),oOr.forEach(t),ddo=r(o3e," (Swin model)"),o3e.forEach(t),cdo=i(C),Yu=s(C,"LI",{});var r3e=n(Yu);aZ=s(r3e,"STRONG",{});var rOr=n(aZ);mdo=r(rOr,"t5"),rOr.forEach(t),fdo=r(r3e," \u2014 "),$S=s(r3e,"A",{href:!0});var tOr=n($S);gdo=r(tOr,"T5Model"),tOr.forEach(t),hdo=r(r3e," (T5 model)"),r3e.forEach(t),udo=i(C),Ku=s(C,"LI",{});var t3e=n(Ku);sZ=s(t3e,"STRONG",{});var aOr=n(sZ);pdo=r(aOr,"tapas"),aOr.forEach(t),_do=r(t3e," \u2014 "),IS=s(t3e,"A",{href:!0});var sOr=n(IS);bdo=r(sOr,"TapasModel"),sOr.forEach(t),vdo=r(t3e," (TAPAS model)"),t3e.forEach(t),Tdo=i(C),Zu=s(C,"LI",{});var a3e=n(Zu);nZ=s(a3e,"STRONG",{});var nOr=n(nZ);Fdo=r(nOr,"transfo-xl"),nOr.forEach(t),Cdo=r(a3e," \u2014 "),jS=s(a3e,"A",{href:!0});var lOr=n(jS);Mdo=r(lOr,"TransfoXLModel"),lOr.forEach(t),Edo=r(a3e," (Transformer-XL model)"),a3e.forEach(t),ydo=i(C),ep=s(C,"LI",{});var s3e=n(ep);lZ=s(s3e,"STRONG",{});var iOr=n(lZ);wdo=r(iOr,"unispeech"),iOr.forEach(t),Ado=r(s3e," \u2014 "),DS=s(s3e,"A",{href:!0});var dOr=n(DS);Ldo=r(dOr,"UniSpeechModel"),dOr.forEach(t),Bdo=r(s3e," (UniSpeech model)"),s3e.forEach(t),xdo=i(C),op=s(C,"LI",{});var n3e=n(op);iZ=s(n3e,"STRONG",{});var cOr=n(iZ);kdo=r(cOr,"unispeech-sat"),cOr.forEach(t),Rdo=r(n3e," \u2014 "),NS=s(n3e,"A",{href:!0});var mOr=n(NS);Sdo=r(mOr,"UniSpeechSatModel"),mOr.forEach(t),Pdo=r(n3e," (UniSpeechSat model)"),n3e.forEach(t),$do=i(C),rp=s(C,"LI",{});var l3e=n(rp);dZ=s(l3e,"STRONG",{});var fOr=n(dZ);Ido=r(fOr,"vilt"),fOr.forEach(t),jdo=r(l3e," \u2014 "),qS=s(l3e,"A",{href:!0});var gOr=n(qS);Ddo=r(gOr,"ViltModel"),gOr.forEach(t),Ndo=r(l3e," (ViLT model)"),l3e.forEach(t),qdo=i(C),tp=s(C,"LI",{});var i3e=n(tp);cZ=s(i3e,"STRONG",{});var hOr=n(cZ);Odo=r(hOr,"vision-text-dual-encoder"),hOr.forEach(t),Gdo=r(i3e," \u2014 "),OS=s(i3e,"A",{href:!0});var uOr=n(OS);Xdo=r(uOr,"VisionTextDualEncoderModel"),uOr.forEach(t),Vdo=r(i3e," (VisionTextDualEncoder model)"),i3e.forEach(t),zdo=i(C),ap=s(C,"LI",{});var d3e=n(ap);mZ=s(d3e,"STRONG",{});var pOr=n(mZ);Wdo=r(pOr,"visual_bert"),pOr.forEach(t),Qdo=r(d3e," \u2014 "),GS=s(d3e,"A",{href:!0});var _Or=n(GS);Hdo=r(_Or,"VisualBertModel"),_Or.forEach(t),Udo=r(d3e," (VisualBert model)"),d3e.forEach(t),Jdo=i(C),sp=s(C,"LI",{});var c3e=n(sp);fZ=s(c3e,"STRONG",{});var bOr=n(fZ);Ydo=r(bOr,"vit"),bOr.forEach(t),Kdo=r(c3e," \u2014 "),XS=s(c3e,"A",{href:!0});var vOr=n(XS);Zdo=r(vOr,"ViTModel"),vOr.forEach(t),eco=r(c3e," (ViT model)"),c3e.forEach(t),oco=i(C),np=s(C,"LI",{});var m3e=n(np);gZ=s(m3e,"STRONG",{});var TOr=n(gZ);rco=r(TOr,"vit_mae"),TOr.forEach(t),tco=r(m3e," \u2014 "),VS=s(m3e,"A",{href:!0});var FOr=n(VS);aco=r(FOr,"ViTMAEModel"),FOr.forEach(t),sco=r(m3e," (ViTMAE model)"),m3e.forEach(t),nco=i(C),lp=s(C,"LI",{});var f3e=n(lp);hZ=s(f3e,"STRONG",{});var COr=n(hZ);lco=r(COr,"wav2vec2"),COr.forEach(t),ico=r(f3e," \u2014 "),zS=s(f3e,"A",{href:!0});var MOr=n(zS);dco=r(MOr,"Wav2Vec2Model"),MOr.forEach(t),cco=r(f3e," (Wav2Vec2 model)"),f3e.forEach(t),mco=i(C),ip=s(C,"LI",{});var g3e=n(ip);uZ=s(g3e,"STRONG",{});var EOr=n(uZ);fco=r(EOr,"wavlm"),EOr.forEach(t),gco=r(g3e," \u2014 "),WS=s(g3e,"A",{href:!0});var yOr=n(WS);hco=r(yOr,"WavLMModel"),yOr.forEach(t),uco=r(g3e," (WavLM model)"),g3e.forEach(t),pco=i(C),dp=s(C,"LI",{});var h3e=n(dp);pZ=s(h3e,"STRONG",{});var wOr=n(pZ);_co=r(wOr,"xglm"),wOr.forEach(t),bco=r(h3e," \u2014 "),QS=s(h3e,"A",{href:!0});var AOr=n(QS);vco=r(AOr,"XGLMModel"),AOr.forEach(t),Tco=r(h3e," (XGLM model)"),h3e.forEach(t),Fco=i(C),cp=s(C,"LI",{});var u3e=n(cp);_Z=s(u3e,"STRONG",{});var LOr=n(_Z);Cco=r(LOr,"xlm"),LOr.forEach(t),Mco=r(u3e," \u2014 "),HS=s(u3e,"A",{href:!0});var BOr=n(HS);Eco=r(BOr,"XLMModel"),BOr.forEach(t),yco=r(u3e," (XLM model)"),u3e.forEach(t),wco=i(C),mp=s(C,"LI",{});var p3e=n(mp);bZ=s(p3e,"STRONG",{});var xOr=n(bZ);Aco=r(xOr,"xlm-prophetnet"),xOr.forEach(t),Lco=r(p3e," \u2014 "),US=s(p3e,"A",{href:!0});var kOr=n(US);Bco=r(kOr,"XLMProphetNetModel"),kOr.forEach(t),xco=r(p3e," (XLMProphetNet model)"),p3e.forEach(t),kco=i(C),fp=s(C,"LI",{});var _3e=n(fp);vZ=s(_3e,"STRONG",{});var ROr=n(vZ);Rco=r(ROr,"xlm-roberta"),ROr.forEach(t),Sco=r(_3e," \u2014 "),JS=s(_3e,"A",{href:!0});var SOr=n(JS);Pco=r(SOr,"XLMRobertaModel"),SOr.forEach(t),$co=r(_3e," (XLM-RoBERTa model)"),_3e.forEach(t),Ico=i(C),gp=s(C,"LI",{});var b3e=n(gp);TZ=s(b3e,"STRONG",{});var POr=n(TZ);jco=r(POr,"xlm-roberta-xl"),POr.forEach(t),Dco=r(b3e," \u2014 "),YS=s(b3e,"A",{href:!0});var $Or=n(YS);Nco=r($Or,"XLMRobertaXLModel"),$Or.forEach(t),qco=r(b3e," (XLM-RoBERTa-XL model)"),b3e.forEach(t),Oco=i(C),hp=s(C,"LI",{});var v3e=n(hp);FZ=s(v3e,"STRONG",{});var IOr=n(FZ);Gco=r(IOr,"xlnet"),IOr.forEach(t),Xco=r(v3e," \u2014 "),KS=s(v3e,"A",{href:!0});var jOr=n(KS);Vco=r(jOr,"XLNetModel"),jOr.forEach(t),zco=r(v3e," (XLNet model)"),v3e.forEach(t),Wco=i(C),up=s(C,"LI",{});var T3e=n(up);CZ=s(T3e,"STRONG",{});var DOr=n(CZ);Qco=r(DOr,"yoso"),DOr.forEach(t),Hco=r(T3e," \u2014 "),ZS=s(T3e,"A",{href:!0});var NOr=n(ZS);Uco=r(NOr,"YosoModel"),NOr.forEach(t),Jco=r(T3e," (YOSO model)"),T3e.forEach(t),C.forEach(t),Yco=i(qt),pp=s(qt,"P",{});var F3e=n(pp);Kco=r(F3e,"The model is set in evaluation mode by default using "),MZ=s(F3e,"CODE",{});var qOr=n(MZ);Zco=r(qOr,"model.eval()"),qOr.forEach(t),emo=r(F3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),EZ=s(F3e,"CODE",{});var OOr=n(EZ);omo=r(OOr,"model.train()"),OOr.forEach(t),F3e.forEach(t),rmo=i(qt),yZ=s(qt,"P",{});var GOr=n(yZ);tmo=r(GOr,"Examples:"),GOr.forEach(t),amo=i(qt),f(Sy.$$.fragment,qt),qt.forEach(t),Wn.forEach(t),Fxe=i(d),ed=s(d,"H2",{class:!0});var xRe=n(ed);_p=s(xRe,"A",{id:!0,class:!0,href:!0});var XOr=n(_p);wZ=s(XOr,"SPAN",{});var VOr=n(wZ);f(Py.$$.fragment,VOr),VOr.forEach(t),XOr.forEach(t),smo=i(xRe),AZ=s(xRe,"SPAN",{});var zOr=n(AZ);nmo=r(zOr,"AutoModelForPreTraining"),zOr.forEach(t),xRe.forEach(t),Cxe=i(d),Yo=s(d,"DIV",{class:!0});var Hn=n(Yo);f($y.$$.fragment,Hn),lmo=i(Hn),od=s(Hn,"P",{});var Az=n(od);imo=r(Az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LZ=s(Az,"CODE",{});var WOr=n(LZ);dmo=r(WOr,"from_pretrained()"),WOr.forEach(t),cmo=r(Az,"class method or the "),BZ=s(Az,"CODE",{});var QOr=n(BZ);mmo=r(QOr,"from_config()"),QOr.forEach(t),fmo=r(Az,`class
method.`),Az.forEach(t),gmo=i(Hn),Iy=s(Hn,"P",{});var kRe=n(Iy);hmo=r(kRe,"This class cannot be instantiated directly using "),xZ=s(kRe,"CODE",{});var HOr=n(xZ);umo=r(HOr,"__init__()"),HOr.forEach(t),pmo=r(kRe," (throws an error)."),kRe.forEach(t),_mo=i(Hn),zr=s(Hn,"DIV",{class:!0});var Un=n(zr);f(jy.$$.fragment,Un),bmo=i(Un),kZ=s(Un,"P",{});var UOr=n(kZ);vmo=r(UOr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),UOr.forEach(t),Tmo=i(Un),rd=s(Un,"P",{});var Lz=n(rd);Fmo=r(Lz,`Note:
Loading a model from its configuration file does `),RZ=s(Lz,"STRONG",{});var JOr=n(RZ);Cmo=r(JOr,"not"),JOr.forEach(t),Mmo=r(Lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=s(Lz,"CODE",{});var YOr=n(SZ);Emo=r(YOr,"from_pretrained()"),YOr.forEach(t),ymo=r(Lz,"to load the model weights."),Lz.forEach(t),wmo=i(Un),PZ=s(Un,"P",{});var KOr=n(PZ);Amo=r(KOr,"Examples:"),KOr.forEach(t),Lmo=i(Un),f(Dy.$$.fragment,Un),Un.forEach(t),Bmo=i(Hn),De=s(Hn,"DIV",{class:!0});var Ot=n(De);f(Ny.$$.fragment,Ot),xmo=i(Ot),$Z=s(Ot,"P",{});var ZOr=n($Z);kmo=r(ZOr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZOr.forEach(t),Rmo=i(Ot),za=s(Ot,"P",{});var K3=n(za);Smo=r(K3,"The model class to instantiate is selected based on the "),IZ=s(K3,"CODE",{});var eGr=n(IZ);Pmo=r(eGr,"model_type"),eGr.forEach(t),$mo=r(K3,` property of the config object (either
passed as an argument or loaded from `),jZ=s(K3,"CODE",{});var oGr=n(jZ);Imo=r(oGr,"pretrained_model_name_or_path"),oGr.forEach(t),jmo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DZ=s(K3,"CODE",{});var rGr=n(DZ);Dmo=r(rGr,"pretrained_model_name_or_path"),rGr.forEach(t),Nmo=r(K3,":"),K3.forEach(t),qmo=i(Ot),k=s(Ot,"UL",{});var S=n(k);bp=s(S,"LI",{});var C3e=n(bp);NZ=s(C3e,"STRONG",{});var tGr=n(NZ);Omo=r(tGr,"albert"),tGr.forEach(t),Gmo=r(C3e," \u2014 "),eP=s(C3e,"A",{href:!0});var aGr=n(eP);Xmo=r(aGr,"AlbertForPreTraining"),aGr.forEach(t),Vmo=r(C3e," (ALBERT model)"),C3e.forEach(t),zmo=i(S),vp=s(S,"LI",{});var M3e=n(vp);qZ=s(M3e,"STRONG",{});var sGr=n(qZ);Wmo=r(sGr,"bart"),sGr.forEach(t),Qmo=r(M3e," \u2014 "),oP=s(M3e,"A",{href:!0});var nGr=n(oP);Hmo=r(nGr,"BartForConditionalGeneration"),nGr.forEach(t),Umo=r(M3e," (BART model)"),M3e.forEach(t),Jmo=i(S),Tp=s(S,"LI",{});var E3e=n(Tp);OZ=s(E3e,"STRONG",{});var lGr=n(OZ);Ymo=r(lGr,"bert"),lGr.forEach(t),Kmo=r(E3e," \u2014 "),rP=s(E3e,"A",{href:!0});var iGr=n(rP);Zmo=r(iGr,"BertForPreTraining"),iGr.forEach(t),efo=r(E3e," (BERT model)"),E3e.forEach(t),ofo=i(S),Fp=s(S,"LI",{});var y3e=n(Fp);GZ=s(y3e,"STRONG",{});var dGr=n(GZ);rfo=r(dGr,"big_bird"),dGr.forEach(t),tfo=r(y3e," \u2014 "),tP=s(y3e,"A",{href:!0});var cGr=n(tP);afo=r(cGr,"BigBirdForPreTraining"),cGr.forEach(t),sfo=r(y3e," (BigBird model)"),y3e.forEach(t),nfo=i(S),Cp=s(S,"LI",{});var w3e=n(Cp);XZ=s(w3e,"STRONG",{});var mGr=n(XZ);lfo=r(mGr,"camembert"),mGr.forEach(t),ifo=r(w3e," \u2014 "),aP=s(w3e,"A",{href:!0});var fGr=n(aP);dfo=r(fGr,"CamembertForMaskedLM"),fGr.forEach(t),cfo=r(w3e," (CamemBERT model)"),w3e.forEach(t),mfo=i(S),Mp=s(S,"LI",{});var A3e=n(Mp);VZ=s(A3e,"STRONG",{});var gGr=n(VZ);ffo=r(gGr,"ctrl"),gGr.forEach(t),gfo=r(A3e," \u2014 "),sP=s(A3e,"A",{href:!0});var hGr=n(sP);hfo=r(hGr,"CTRLLMHeadModel"),hGr.forEach(t),ufo=r(A3e," (CTRL model)"),A3e.forEach(t),pfo=i(S),Ep=s(S,"LI",{});var L3e=n(Ep);zZ=s(L3e,"STRONG",{});var uGr=n(zZ);_fo=r(uGr,"data2vec-text"),uGr.forEach(t),bfo=r(L3e," \u2014 "),nP=s(L3e,"A",{href:!0});var pGr=n(nP);vfo=r(pGr,"Data2VecTextForMaskedLM"),pGr.forEach(t),Tfo=r(L3e," (Data2VecText model)"),L3e.forEach(t),Ffo=i(S),yp=s(S,"LI",{});var B3e=n(yp);WZ=s(B3e,"STRONG",{});var _Gr=n(WZ);Cfo=r(_Gr,"deberta"),_Gr.forEach(t),Mfo=r(B3e," \u2014 "),lP=s(B3e,"A",{href:!0});var bGr=n(lP);Efo=r(bGr,"DebertaForMaskedLM"),bGr.forEach(t),yfo=r(B3e," (DeBERTa model)"),B3e.forEach(t),wfo=i(S),wp=s(S,"LI",{});var x3e=n(wp);QZ=s(x3e,"STRONG",{});var vGr=n(QZ);Afo=r(vGr,"deberta-v2"),vGr.forEach(t),Lfo=r(x3e," \u2014 "),iP=s(x3e,"A",{href:!0});var TGr=n(iP);Bfo=r(TGr,"DebertaV2ForMaskedLM"),TGr.forEach(t),xfo=r(x3e," (DeBERTa-v2 model)"),x3e.forEach(t),kfo=i(S),Ap=s(S,"LI",{});var k3e=n(Ap);HZ=s(k3e,"STRONG",{});var FGr=n(HZ);Rfo=r(FGr,"distilbert"),FGr.forEach(t),Sfo=r(k3e," \u2014 "),dP=s(k3e,"A",{href:!0});var CGr=n(dP);Pfo=r(CGr,"DistilBertForMaskedLM"),CGr.forEach(t),$fo=r(k3e," (DistilBERT model)"),k3e.forEach(t),Ifo=i(S),Lp=s(S,"LI",{});var R3e=n(Lp);UZ=s(R3e,"STRONG",{});var MGr=n(UZ);jfo=r(MGr,"electra"),MGr.forEach(t),Dfo=r(R3e," \u2014 "),cP=s(R3e,"A",{href:!0});var EGr=n(cP);Nfo=r(EGr,"ElectraForPreTraining"),EGr.forEach(t),qfo=r(R3e," (ELECTRA model)"),R3e.forEach(t),Ofo=i(S),Bp=s(S,"LI",{});var S3e=n(Bp);JZ=s(S3e,"STRONG",{});var yGr=n(JZ);Gfo=r(yGr,"flaubert"),yGr.forEach(t),Xfo=r(S3e," \u2014 "),mP=s(S3e,"A",{href:!0});var wGr=n(mP);Vfo=r(wGr,"FlaubertWithLMHeadModel"),wGr.forEach(t),zfo=r(S3e," (FlauBERT model)"),S3e.forEach(t),Wfo=i(S),xp=s(S,"LI",{});var P3e=n(xp);YZ=s(P3e,"STRONG",{});var AGr=n(YZ);Qfo=r(AGr,"fnet"),AGr.forEach(t),Hfo=r(P3e," \u2014 "),fP=s(P3e,"A",{href:!0});var LGr=n(fP);Ufo=r(LGr,"FNetForPreTraining"),LGr.forEach(t),Jfo=r(P3e," (FNet model)"),P3e.forEach(t),Yfo=i(S),kp=s(S,"LI",{});var $3e=n(kp);KZ=s($3e,"STRONG",{});var BGr=n(KZ);Kfo=r(BGr,"fsmt"),BGr.forEach(t),Zfo=r($3e," \u2014 "),gP=s($3e,"A",{href:!0});var xGr=n(gP);ego=r(xGr,"FSMTForConditionalGeneration"),xGr.forEach(t),ogo=r($3e," (FairSeq Machine-Translation model)"),$3e.forEach(t),rgo=i(S),Rp=s(S,"LI",{});var I3e=n(Rp);ZZ=s(I3e,"STRONG",{});var kGr=n(ZZ);tgo=r(kGr,"funnel"),kGr.forEach(t),ago=r(I3e," \u2014 "),hP=s(I3e,"A",{href:!0});var RGr=n(hP);sgo=r(RGr,"FunnelForPreTraining"),RGr.forEach(t),ngo=r(I3e," (Funnel Transformer model)"),I3e.forEach(t),lgo=i(S),Sp=s(S,"LI",{});var j3e=n(Sp);eee=s(j3e,"STRONG",{});var SGr=n(eee);igo=r(SGr,"gpt2"),SGr.forEach(t),dgo=r(j3e," \u2014 "),uP=s(j3e,"A",{href:!0});var PGr=n(uP);cgo=r(PGr,"GPT2LMHeadModel"),PGr.forEach(t),mgo=r(j3e," (OpenAI GPT-2 model)"),j3e.forEach(t),fgo=i(S),Pp=s(S,"LI",{});var D3e=n(Pp);oee=s(D3e,"STRONG",{});var $Gr=n(oee);ggo=r($Gr,"ibert"),$Gr.forEach(t),hgo=r(D3e," \u2014 "),pP=s(D3e,"A",{href:!0});var IGr=n(pP);ugo=r(IGr,"IBertForMaskedLM"),IGr.forEach(t),pgo=r(D3e," (I-BERT model)"),D3e.forEach(t),_go=i(S),$p=s(S,"LI",{});var N3e=n($p);ree=s(N3e,"STRONG",{});var jGr=n(ree);bgo=r(jGr,"layoutlm"),jGr.forEach(t),vgo=r(N3e," \u2014 "),_P=s(N3e,"A",{href:!0});var DGr=n(_P);Tgo=r(DGr,"LayoutLMForMaskedLM"),DGr.forEach(t),Fgo=r(N3e," (LayoutLM model)"),N3e.forEach(t),Cgo=i(S),Ip=s(S,"LI",{});var q3e=n(Ip);tee=s(q3e,"STRONG",{});var NGr=n(tee);Mgo=r(NGr,"longformer"),NGr.forEach(t),Ego=r(q3e," \u2014 "),bP=s(q3e,"A",{href:!0});var qGr=n(bP);ygo=r(qGr,"LongformerForMaskedLM"),qGr.forEach(t),wgo=r(q3e," (Longformer model)"),q3e.forEach(t),Ago=i(S),jp=s(S,"LI",{});var O3e=n(jp);aee=s(O3e,"STRONG",{});var OGr=n(aee);Lgo=r(OGr,"lxmert"),OGr.forEach(t),Bgo=r(O3e," \u2014 "),vP=s(O3e,"A",{href:!0});var GGr=n(vP);xgo=r(GGr,"LxmertForPreTraining"),GGr.forEach(t),kgo=r(O3e," (LXMERT model)"),O3e.forEach(t),Rgo=i(S),Dp=s(S,"LI",{});var G3e=n(Dp);see=s(G3e,"STRONG",{});var XGr=n(see);Sgo=r(XGr,"megatron-bert"),XGr.forEach(t),Pgo=r(G3e," \u2014 "),TP=s(G3e,"A",{href:!0});var VGr=n(TP);$go=r(VGr,"MegatronBertForPreTraining"),VGr.forEach(t),Igo=r(G3e," (MegatronBert model)"),G3e.forEach(t),jgo=i(S),Np=s(S,"LI",{});var X3e=n(Np);nee=s(X3e,"STRONG",{});var zGr=n(nee);Dgo=r(zGr,"mobilebert"),zGr.forEach(t),Ngo=r(X3e," \u2014 "),FP=s(X3e,"A",{href:!0});var WGr=n(FP);qgo=r(WGr,"MobileBertForPreTraining"),WGr.forEach(t),Ogo=r(X3e," (MobileBERT model)"),X3e.forEach(t),Ggo=i(S),qp=s(S,"LI",{});var V3e=n(qp);lee=s(V3e,"STRONG",{});var QGr=n(lee);Xgo=r(QGr,"mpnet"),QGr.forEach(t),Vgo=r(V3e," \u2014 "),CP=s(V3e,"A",{href:!0});var HGr=n(CP);zgo=r(HGr,"MPNetForMaskedLM"),HGr.forEach(t),Wgo=r(V3e," (MPNet model)"),V3e.forEach(t),Qgo=i(S),Op=s(S,"LI",{});var z3e=n(Op);iee=s(z3e,"STRONG",{});var UGr=n(iee);Hgo=r(UGr,"openai-gpt"),UGr.forEach(t),Ugo=r(z3e," \u2014 "),MP=s(z3e,"A",{href:!0});var JGr=n(MP);Jgo=r(JGr,"OpenAIGPTLMHeadModel"),JGr.forEach(t),Ygo=r(z3e," (OpenAI GPT model)"),z3e.forEach(t),Kgo=i(S),Gp=s(S,"LI",{});var W3e=n(Gp);dee=s(W3e,"STRONG",{});var YGr=n(dee);Zgo=r(YGr,"retribert"),YGr.forEach(t),eho=r(W3e," \u2014 "),EP=s(W3e,"A",{href:!0});var KGr=n(EP);oho=r(KGr,"RetriBertModel"),KGr.forEach(t),rho=r(W3e," (RetriBERT model)"),W3e.forEach(t),tho=i(S),Xp=s(S,"LI",{});var Q3e=n(Xp);cee=s(Q3e,"STRONG",{});var ZGr=n(cee);aho=r(ZGr,"roberta"),ZGr.forEach(t),sho=r(Q3e," \u2014 "),yP=s(Q3e,"A",{href:!0});var eXr=n(yP);nho=r(eXr,"RobertaForMaskedLM"),eXr.forEach(t),lho=r(Q3e," (RoBERTa model)"),Q3e.forEach(t),iho=i(S),Vp=s(S,"LI",{});var H3e=n(Vp);mee=s(H3e,"STRONG",{});var oXr=n(mee);dho=r(oXr,"squeezebert"),oXr.forEach(t),cho=r(H3e," \u2014 "),wP=s(H3e,"A",{href:!0});var rXr=n(wP);mho=r(rXr,"SqueezeBertForMaskedLM"),rXr.forEach(t),fho=r(H3e," (SqueezeBERT model)"),H3e.forEach(t),gho=i(S),zp=s(S,"LI",{});var U3e=n(zp);fee=s(U3e,"STRONG",{});var tXr=n(fee);hho=r(tXr,"t5"),tXr.forEach(t),uho=r(U3e," \u2014 "),AP=s(U3e,"A",{href:!0});var aXr=n(AP);pho=r(aXr,"T5ForConditionalGeneration"),aXr.forEach(t),_ho=r(U3e," (T5 model)"),U3e.forEach(t),bho=i(S),Wp=s(S,"LI",{});var J3e=n(Wp);gee=s(J3e,"STRONG",{});var sXr=n(gee);vho=r(sXr,"tapas"),sXr.forEach(t),Tho=r(J3e," \u2014 "),LP=s(J3e,"A",{href:!0});var nXr=n(LP);Fho=r(nXr,"TapasForMaskedLM"),nXr.forEach(t),Cho=r(J3e," (TAPAS model)"),J3e.forEach(t),Mho=i(S),Qp=s(S,"LI",{});var Y3e=n(Qp);hee=s(Y3e,"STRONG",{});var lXr=n(hee);Eho=r(lXr,"transfo-xl"),lXr.forEach(t),yho=r(Y3e," \u2014 "),BP=s(Y3e,"A",{href:!0});var iXr=n(BP);who=r(iXr,"TransfoXLLMHeadModel"),iXr.forEach(t),Aho=r(Y3e," (Transformer-XL model)"),Y3e.forEach(t),Lho=i(S),Hp=s(S,"LI",{});var K3e=n(Hp);uee=s(K3e,"STRONG",{});var dXr=n(uee);Bho=r(dXr,"unispeech"),dXr.forEach(t),xho=r(K3e," \u2014 "),xP=s(K3e,"A",{href:!0});var cXr=n(xP);kho=r(cXr,"UniSpeechForPreTraining"),cXr.forEach(t),Rho=r(K3e," (UniSpeech model)"),K3e.forEach(t),Sho=i(S),Up=s(S,"LI",{});var Z3e=n(Up);pee=s(Z3e,"STRONG",{});var mXr=n(pee);Pho=r(mXr,"unispeech-sat"),mXr.forEach(t),$ho=r(Z3e," \u2014 "),kP=s(Z3e,"A",{href:!0});var fXr=n(kP);Iho=r(fXr,"UniSpeechSatForPreTraining"),fXr.forEach(t),jho=r(Z3e," (UniSpeechSat model)"),Z3e.forEach(t),Dho=i(S),Jp=s(S,"LI",{});var e5e=n(Jp);_ee=s(e5e,"STRONG",{});var gXr=n(_ee);Nho=r(gXr,"visual_bert"),gXr.forEach(t),qho=r(e5e," \u2014 "),RP=s(e5e,"A",{href:!0});var hXr=n(RP);Oho=r(hXr,"VisualBertForPreTraining"),hXr.forEach(t),Gho=r(e5e," (VisualBert model)"),e5e.forEach(t),Xho=i(S),Yp=s(S,"LI",{});var o5e=n(Yp);bee=s(o5e,"STRONG",{});var uXr=n(bee);Vho=r(uXr,"vit_mae"),uXr.forEach(t),zho=r(o5e," \u2014 "),SP=s(o5e,"A",{href:!0});var pXr=n(SP);Who=r(pXr,"ViTMAEForPreTraining"),pXr.forEach(t),Qho=r(o5e," (ViTMAE model)"),o5e.forEach(t),Hho=i(S),Kp=s(S,"LI",{});var r5e=n(Kp);vee=s(r5e,"STRONG",{});var _Xr=n(vee);Uho=r(_Xr,"wav2vec2"),_Xr.forEach(t),Jho=r(r5e," \u2014 "),PP=s(r5e,"A",{href:!0});var bXr=n(PP);Yho=r(bXr,"Wav2Vec2ForPreTraining"),bXr.forEach(t),Kho=r(r5e," (Wav2Vec2 model)"),r5e.forEach(t),Zho=i(S),Zp=s(S,"LI",{});var t5e=n(Zp);Tee=s(t5e,"STRONG",{});var vXr=n(Tee);euo=r(vXr,"xlm"),vXr.forEach(t),ouo=r(t5e," \u2014 "),$P=s(t5e,"A",{href:!0});var TXr=n($P);ruo=r(TXr,"XLMWithLMHeadModel"),TXr.forEach(t),tuo=r(t5e," (XLM model)"),t5e.forEach(t),auo=i(S),e_=s(S,"LI",{});var a5e=n(e_);Fee=s(a5e,"STRONG",{});var FXr=n(Fee);suo=r(FXr,"xlm-roberta"),FXr.forEach(t),nuo=r(a5e," \u2014 "),IP=s(a5e,"A",{href:!0});var CXr=n(IP);luo=r(CXr,"XLMRobertaForMaskedLM"),CXr.forEach(t),iuo=r(a5e," (XLM-RoBERTa model)"),a5e.forEach(t),duo=i(S),o_=s(S,"LI",{});var s5e=n(o_);Cee=s(s5e,"STRONG",{});var MXr=n(Cee);cuo=r(MXr,"xlm-roberta-xl"),MXr.forEach(t),muo=r(s5e," \u2014 "),jP=s(s5e,"A",{href:!0});var EXr=n(jP);fuo=r(EXr,"XLMRobertaXLForMaskedLM"),EXr.forEach(t),guo=r(s5e," (XLM-RoBERTa-XL model)"),s5e.forEach(t),huo=i(S),r_=s(S,"LI",{});var n5e=n(r_);Mee=s(n5e,"STRONG",{});var yXr=n(Mee);uuo=r(yXr,"xlnet"),yXr.forEach(t),puo=r(n5e," \u2014 "),DP=s(n5e,"A",{href:!0});var wXr=n(DP);_uo=r(wXr,"XLNetLMHeadModel"),wXr.forEach(t),buo=r(n5e," (XLNet model)"),n5e.forEach(t),S.forEach(t),vuo=i(Ot),t_=s(Ot,"P",{});var l5e=n(t_);Tuo=r(l5e,"The model is set in evaluation mode by default using "),Eee=s(l5e,"CODE",{});var AXr=n(Eee);Fuo=r(AXr,"model.eval()"),AXr.forEach(t),Cuo=r(l5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yee=s(l5e,"CODE",{});var LXr=n(yee);Muo=r(LXr,"model.train()"),LXr.forEach(t),l5e.forEach(t),Euo=i(Ot),wee=s(Ot,"P",{});var BXr=n(wee);yuo=r(BXr,"Examples:"),BXr.forEach(t),wuo=i(Ot),f(qy.$$.fragment,Ot),Ot.forEach(t),Hn.forEach(t),Mxe=i(d),td=s(d,"H2",{class:!0});var RRe=n(td);a_=s(RRe,"A",{id:!0,class:!0,href:!0});var xXr=n(a_);Aee=s(xXr,"SPAN",{});var kXr=n(Aee);f(Oy.$$.fragment,kXr),kXr.forEach(t),xXr.forEach(t),Auo=i(RRe),Lee=s(RRe,"SPAN",{});var RXr=n(Lee);Luo=r(RXr,"AutoModelForCausalLM"),RXr.forEach(t),RRe.forEach(t),Exe=i(d),Ko=s(d,"DIV",{class:!0});var Jn=n(Ko);f(Gy.$$.fragment,Jn),Buo=i(Jn),ad=s(Jn,"P",{});var Bz=n(ad);xuo=r(Bz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bee=s(Bz,"CODE",{});var SXr=n(Bee);kuo=r(SXr,"from_pretrained()"),SXr.forEach(t),Ruo=r(Bz,"class method or the "),xee=s(Bz,"CODE",{});var PXr=n(xee);Suo=r(PXr,"from_config()"),PXr.forEach(t),Puo=r(Bz,`class
method.`),Bz.forEach(t),$uo=i(Jn),Xy=s(Jn,"P",{});var SRe=n(Xy);Iuo=r(SRe,"This class cannot be instantiated directly using "),kee=s(SRe,"CODE",{});var $Xr=n(kee);juo=r($Xr,"__init__()"),$Xr.forEach(t),Duo=r(SRe," (throws an error)."),SRe.forEach(t),Nuo=i(Jn),Wr=s(Jn,"DIV",{class:!0});var Yn=n(Wr);f(Vy.$$.fragment,Yn),quo=i(Yn),Ree=s(Yn,"P",{});var IXr=n(Ree);Ouo=r(IXr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IXr.forEach(t),Guo=i(Yn),sd=s(Yn,"P",{});var xz=n(sd);Xuo=r(xz,`Note:
Loading a model from its configuration file does `),See=s(xz,"STRONG",{});var jXr=n(See);Vuo=r(jXr,"not"),jXr.forEach(t),zuo=r(xz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pee=s(xz,"CODE",{});var DXr=n(Pee);Wuo=r(DXr,"from_pretrained()"),DXr.forEach(t),Quo=r(xz,"to load the model weights."),xz.forEach(t),Huo=i(Yn),$ee=s(Yn,"P",{});var NXr=n($ee);Uuo=r(NXr,"Examples:"),NXr.forEach(t),Juo=i(Yn),f(zy.$$.fragment,Yn),Yn.forEach(t),Yuo=i(Jn),Ne=s(Jn,"DIV",{class:!0});var Gt=n(Ne);f(Wy.$$.fragment,Gt),Kuo=i(Gt),Iee=s(Gt,"P",{});var qXr=n(Iee);Zuo=r(qXr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qXr.forEach(t),epo=i(Gt),Wa=s(Gt,"P",{});var Z3=n(Wa);opo=r(Z3,"The model class to instantiate is selected based on the "),jee=s(Z3,"CODE",{});var OXr=n(jee);rpo=r(OXr,"model_type"),OXr.forEach(t),tpo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Dee=s(Z3,"CODE",{});var GXr=n(Dee);apo=r(GXr,"pretrained_model_name_or_path"),GXr.forEach(t),spo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nee=s(Z3,"CODE",{});var XXr=n(Nee);npo=r(XXr,"pretrained_model_name_or_path"),XXr.forEach(t),lpo=r(Z3,":"),Z3.forEach(t),ipo=i(Gt),$=s(Gt,"UL",{});var j=n($);s_=s(j,"LI",{});var i5e=n(s_);qee=s(i5e,"STRONG",{});var VXr=n(qee);dpo=r(VXr,"bart"),VXr.forEach(t),cpo=r(i5e," \u2014 "),NP=s(i5e,"A",{href:!0});var zXr=n(NP);mpo=r(zXr,"BartForCausalLM"),zXr.forEach(t),fpo=r(i5e," (BART model)"),i5e.forEach(t),gpo=i(j),n_=s(j,"LI",{});var d5e=n(n_);Oee=s(d5e,"STRONG",{});var WXr=n(Oee);hpo=r(WXr,"bert"),WXr.forEach(t),upo=r(d5e," \u2014 "),qP=s(d5e,"A",{href:!0});var QXr=n(qP);ppo=r(QXr,"BertLMHeadModel"),QXr.forEach(t),_po=r(d5e," (BERT model)"),d5e.forEach(t),bpo=i(j),l_=s(j,"LI",{});var c5e=n(l_);Gee=s(c5e,"STRONG",{});var HXr=n(Gee);vpo=r(HXr,"bert-generation"),HXr.forEach(t),Tpo=r(c5e," \u2014 "),OP=s(c5e,"A",{href:!0});var UXr=n(OP);Fpo=r(UXr,"BertGenerationDecoder"),UXr.forEach(t),Cpo=r(c5e," (Bert Generation model)"),c5e.forEach(t),Mpo=i(j),i_=s(j,"LI",{});var m5e=n(i_);Xee=s(m5e,"STRONG",{});var JXr=n(Xee);Epo=r(JXr,"big_bird"),JXr.forEach(t),ypo=r(m5e," \u2014 "),GP=s(m5e,"A",{href:!0});var YXr=n(GP);wpo=r(YXr,"BigBirdForCausalLM"),YXr.forEach(t),Apo=r(m5e," (BigBird model)"),m5e.forEach(t),Lpo=i(j),d_=s(j,"LI",{});var f5e=n(d_);Vee=s(f5e,"STRONG",{});var KXr=n(Vee);Bpo=r(KXr,"bigbird_pegasus"),KXr.forEach(t),xpo=r(f5e," \u2014 "),XP=s(f5e,"A",{href:!0});var ZXr=n(XP);kpo=r(ZXr,"BigBirdPegasusForCausalLM"),ZXr.forEach(t),Rpo=r(f5e," (BigBirdPegasus model)"),f5e.forEach(t),Spo=i(j),c_=s(j,"LI",{});var g5e=n(c_);zee=s(g5e,"STRONG",{});var eVr=n(zee);Ppo=r(eVr,"blenderbot"),eVr.forEach(t),$po=r(g5e," \u2014 "),VP=s(g5e,"A",{href:!0});var oVr=n(VP);Ipo=r(oVr,"BlenderbotForCausalLM"),oVr.forEach(t),jpo=r(g5e," (Blenderbot model)"),g5e.forEach(t),Dpo=i(j),m_=s(j,"LI",{});var h5e=n(m_);Wee=s(h5e,"STRONG",{});var rVr=n(Wee);Npo=r(rVr,"blenderbot-small"),rVr.forEach(t),qpo=r(h5e," \u2014 "),zP=s(h5e,"A",{href:!0});var tVr=n(zP);Opo=r(tVr,"BlenderbotSmallForCausalLM"),tVr.forEach(t),Gpo=r(h5e," (BlenderbotSmall model)"),h5e.forEach(t),Xpo=i(j),f_=s(j,"LI",{});var u5e=n(f_);Qee=s(u5e,"STRONG",{});var aVr=n(Qee);Vpo=r(aVr,"camembert"),aVr.forEach(t),zpo=r(u5e," \u2014 "),WP=s(u5e,"A",{href:!0});var sVr=n(WP);Wpo=r(sVr,"CamembertForCausalLM"),sVr.forEach(t),Qpo=r(u5e," (CamemBERT model)"),u5e.forEach(t),Hpo=i(j),g_=s(j,"LI",{});var p5e=n(g_);Hee=s(p5e,"STRONG",{});var nVr=n(Hee);Upo=r(nVr,"ctrl"),nVr.forEach(t),Jpo=r(p5e," \u2014 "),QP=s(p5e,"A",{href:!0});var lVr=n(QP);Ypo=r(lVr,"CTRLLMHeadModel"),lVr.forEach(t),Kpo=r(p5e," (CTRL model)"),p5e.forEach(t),Zpo=i(j),h_=s(j,"LI",{});var _5e=n(h_);Uee=s(_5e,"STRONG",{});var iVr=n(Uee);e_o=r(iVr,"data2vec-text"),iVr.forEach(t),o_o=r(_5e," \u2014 "),HP=s(_5e,"A",{href:!0});var dVr=n(HP);r_o=r(dVr,"Data2VecTextForCausalLM"),dVr.forEach(t),t_o=r(_5e," (Data2VecText model)"),_5e.forEach(t),a_o=i(j),u_=s(j,"LI",{});var b5e=n(u_);Jee=s(b5e,"STRONG",{});var cVr=n(Jee);s_o=r(cVr,"electra"),cVr.forEach(t),n_o=r(b5e," \u2014 "),UP=s(b5e,"A",{href:!0});var mVr=n(UP);l_o=r(mVr,"ElectraForCausalLM"),mVr.forEach(t),i_o=r(b5e," (ELECTRA model)"),b5e.forEach(t),d_o=i(j),p_=s(j,"LI",{});var v5e=n(p_);Yee=s(v5e,"STRONG",{});var fVr=n(Yee);c_o=r(fVr,"gpt2"),fVr.forEach(t),m_o=r(v5e," \u2014 "),JP=s(v5e,"A",{href:!0});var gVr=n(JP);f_o=r(gVr,"GPT2LMHeadModel"),gVr.forEach(t),g_o=r(v5e," (OpenAI GPT-2 model)"),v5e.forEach(t),h_o=i(j),__=s(j,"LI",{});var T5e=n(__);Kee=s(T5e,"STRONG",{});var hVr=n(Kee);u_o=r(hVr,"gpt_neo"),hVr.forEach(t),p_o=r(T5e," \u2014 "),YP=s(T5e,"A",{href:!0});var uVr=n(YP);__o=r(uVr,"GPTNeoForCausalLM"),uVr.forEach(t),b_o=r(T5e," (GPT Neo model)"),T5e.forEach(t),v_o=i(j),b_=s(j,"LI",{});var F5e=n(b_);Zee=s(F5e,"STRONG",{});var pVr=n(Zee);T_o=r(pVr,"gptj"),pVr.forEach(t),F_o=r(F5e," \u2014 "),KP=s(F5e,"A",{href:!0});var _Vr=n(KP);C_o=r(_Vr,"GPTJForCausalLM"),_Vr.forEach(t),M_o=r(F5e," (GPT-J model)"),F5e.forEach(t),E_o=i(j),v_=s(j,"LI",{});var C5e=n(v_);eoe=s(C5e,"STRONG",{});var bVr=n(eoe);y_o=r(bVr,"marian"),bVr.forEach(t),w_o=r(C5e," \u2014 "),ZP=s(C5e,"A",{href:!0});var vVr=n(ZP);A_o=r(vVr,"MarianForCausalLM"),vVr.forEach(t),L_o=r(C5e," (Marian model)"),C5e.forEach(t),B_o=i(j),T_=s(j,"LI",{});var M5e=n(T_);ooe=s(M5e,"STRONG",{});var TVr=n(ooe);x_o=r(TVr,"mbart"),TVr.forEach(t),k_o=r(M5e," \u2014 "),e$=s(M5e,"A",{href:!0});var FVr=n(e$);R_o=r(FVr,"MBartForCausalLM"),FVr.forEach(t),S_o=r(M5e," (mBART model)"),M5e.forEach(t),P_o=i(j),F_=s(j,"LI",{});var E5e=n(F_);roe=s(E5e,"STRONG",{});var CVr=n(roe);$_o=r(CVr,"megatron-bert"),CVr.forEach(t),I_o=r(E5e," \u2014 "),o$=s(E5e,"A",{href:!0});var MVr=n(o$);j_o=r(MVr,"MegatronBertForCausalLM"),MVr.forEach(t),D_o=r(E5e," (MegatronBert model)"),E5e.forEach(t),N_o=i(j),C_=s(j,"LI",{});var y5e=n(C_);toe=s(y5e,"STRONG",{});var EVr=n(toe);q_o=r(EVr,"openai-gpt"),EVr.forEach(t),O_o=r(y5e," \u2014 "),r$=s(y5e,"A",{href:!0});var yVr=n(r$);G_o=r(yVr,"OpenAIGPTLMHeadModel"),yVr.forEach(t),X_o=r(y5e," (OpenAI GPT model)"),y5e.forEach(t),V_o=i(j),M_=s(j,"LI",{});var w5e=n(M_);aoe=s(w5e,"STRONG",{});var wVr=n(aoe);z_o=r(wVr,"pegasus"),wVr.forEach(t),W_o=r(w5e," \u2014 "),t$=s(w5e,"A",{href:!0});var AVr=n(t$);Q_o=r(AVr,"PegasusForCausalLM"),AVr.forEach(t),H_o=r(w5e," (Pegasus model)"),w5e.forEach(t),U_o=i(j),E_=s(j,"LI",{});var A5e=n(E_);soe=s(A5e,"STRONG",{});var LVr=n(soe);J_o=r(LVr,"plbart"),LVr.forEach(t),Y_o=r(A5e," \u2014 "),a$=s(A5e,"A",{href:!0});var BVr=n(a$);K_o=r(BVr,"PLBartForCausalLM"),BVr.forEach(t),Z_o=r(A5e," (PLBart model)"),A5e.forEach(t),ebo=i(j),y_=s(j,"LI",{});var L5e=n(y_);noe=s(L5e,"STRONG",{});var xVr=n(noe);obo=r(xVr,"prophetnet"),xVr.forEach(t),rbo=r(L5e," \u2014 "),s$=s(L5e,"A",{href:!0});var kVr=n(s$);tbo=r(kVr,"ProphetNetForCausalLM"),kVr.forEach(t),abo=r(L5e," (ProphetNet model)"),L5e.forEach(t),sbo=i(j),w_=s(j,"LI",{});var B5e=n(w_);loe=s(B5e,"STRONG",{});var RVr=n(loe);nbo=r(RVr,"qdqbert"),RVr.forEach(t),lbo=r(B5e," \u2014 "),n$=s(B5e,"A",{href:!0});var SVr=n(n$);ibo=r(SVr,"QDQBertLMHeadModel"),SVr.forEach(t),dbo=r(B5e," (QDQBert model)"),B5e.forEach(t),cbo=i(j),A_=s(j,"LI",{});var x5e=n(A_);ioe=s(x5e,"STRONG",{});var PVr=n(ioe);mbo=r(PVr,"reformer"),PVr.forEach(t),fbo=r(x5e," \u2014 "),l$=s(x5e,"A",{href:!0});var $Vr=n(l$);gbo=r($Vr,"ReformerModelWithLMHead"),$Vr.forEach(t),hbo=r(x5e," (Reformer model)"),x5e.forEach(t),ubo=i(j),L_=s(j,"LI",{});var k5e=n(L_);doe=s(k5e,"STRONG",{});var IVr=n(doe);pbo=r(IVr,"rembert"),IVr.forEach(t),_bo=r(k5e," \u2014 "),i$=s(k5e,"A",{href:!0});var jVr=n(i$);bbo=r(jVr,"RemBertForCausalLM"),jVr.forEach(t),vbo=r(k5e," (RemBERT model)"),k5e.forEach(t),Tbo=i(j),B_=s(j,"LI",{});var R5e=n(B_);coe=s(R5e,"STRONG",{});var DVr=n(coe);Fbo=r(DVr,"roberta"),DVr.forEach(t),Cbo=r(R5e," \u2014 "),d$=s(R5e,"A",{href:!0});var NVr=n(d$);Mbo=r(NVr,"RobertaForCausalLM"),NVr.forEach(t),Ebo=r(R5e," (RoBERTa model)"),R5e.forEach(t),ybo=i(j),x_=s(j,"LI",{});var S5e=n(x_);moe=s(S5e,"STRONG",{});var qVr=n(moe);wbo=r(qVr,"roformer"),qVr.forEach(t),Abo=r(S5e," \u2014 "),c$=s(S5e,"A",{href:!0});var OVr=n(c$);Lbo=r(OVr,"RoFormerForCausalLM"),OVr.forEach(t),Bbo=r(S5e," (RoFormer model)"),S5e.forEach(t),xbo=i(j),k_=s(j,"LI",{});var P5e=n(k_);foe=s(P5e,"STRONG",{});var GVr=n(foe);kbo=r(GVr,"speech_to_text_2"),GVr.forEach(t),Rbo=r(P5e," \u2014 "),m$=s(P5e,"A",{href:!0});var XVr=n(m$);Sbo=r(XVr,"Speech2Text2ForCausalLM"),XVr.forEach(t),Pbo=r(P5e," (Speech2Text2 model)"),P5e.forEach(t),$bo=i(j),R_=s(j,"LI",{});var $5e=n(R_);goe=s($5e,"STRONG",{});var VVr=n(goe);Ibo=r(VVr,"transfo-xl"),VVr.forEach(t),jbo=r($5e," \u2014 "),f$=s($5e,"A",{href:!0});var zVr=n(f$);Dbo=r(zVr,"TransfoXLLMHeadModel"),zVr.forEach(t),Nbo=r($5e," (Transformer-XL model)"),$5e.forEach(t),qbo=i(j),S_=s(j,"LI",{});var I5e=n(S_);hoe=s(I5e,"STRONG",{});var WVr=n(hoe);Obo=r(WVr,"trocr"),WVr.forEach(t),Gbo=r(I5e," \u2014 "),g$=s(I5e,"A",{href:!0});var QVr=n(g$);Xbo=r(QVr,"TrOCRForCausalLM"),QVr.forEach(t),Vbo=r(I5e," (TrOCR model)"),I5e.forEach(t),zbo=i(j),P_=s(j,"LI",{});var j5e=n(P_);uoe=s(j5e,"STRONG",{});var HVr=n(uoe);Wbo=r(HVr,"xglm"),HVr.forEach(t),Qbo=r(j5e," \u2014 "),h$=s(j5e,"A",{href:!0});var UVr=n(h$);Hbo=r(UVr,"XGLMForCausalLM"),UVr.forEach(t),Ubo=r(j5e," (XGLM model)"),j5e.forEach(t),Jbo=i(j),$_=s(j,"LI",{});var D5e=n($_);poe=s(D5e,"STRONG",{});var JVr=n(poe);Ybo=r(JVr,"xlm"),JVr.forEach(t),Kbo=r(D5e," \u2014 "),u$=s(D5e,"A",{href:!0});var YVr=n(u$);Zbo=r(YVr,"XLMWithLMHeadModel"),YVr.forEach(t),e2o=r(D5e," (XLM model)"),D5e.forEach(t),o2o=i(j),I_=s(j,"LI",{});var N5e=n(I_);_oe=s(N5e,"STRONG",{});var KVr=n(_oe);r2o=r(KVr,"xlm-prophetnet"),KVr.forEach(t),t2o=r(N5e," \u2014 "),p$=s(N5e,"A",{href:!0});var ZVr=n(p$);a2o=r(ZVr,"XLMProphetNetForCausalLM"),ZVr.forEach(t),s2o=r(N5e," (XLMProphetNet model)"),N5e.forEach(t),n2o=i(j),j_=s(j,"LI",{});var q5e=n(j_);boe=s(q5e,"STRONG",{});var ezr=n(boe);l2o=r(ezr,"xlm-roberta"),ezr.forEach(t),i2o=r(q5e," \u2014 "),_$=s(q5e,"A",{href:!0});var ozr=n(_$);d2o=r(ozr,"XLMRobertaForCausalLM"),ozr.forEach(t),c2o=r(q5e," (XLM-RoBERTa model)"),q5e.forEach(t),m2o=i(j),D_=s(j,"LI",{});var O5e=n(D_);voe=s(O5e,"STRONG",{});var rzr=n(voe);f2o=r(rzr,"xlm-roberta-xl"),rzr.forEach(t),g2o=r(O5e," \u2014 "),b$=s(O5e,"A",{href:!0});var tzr=n(b$);h2o=r(tzr,"XLMRobertaXLForCausalLM"),tzr.forEach(t),u2o=r(O5e," (XLM-RoBERTa-XL model)"),O5e.forEach(t),p2o=i(j),N_=s(j,"LI",{});var G5e=n(N_);Toe=s(G5e,"STRONG",{});var azr=n(Toe);_2o=r(azr,"xlnet"),azr.forEach(t),b2o=r(G5e," \u2014 "),v$=s(G5e,"A",{href:!0});var szr=n(v$);v2o=r(szr,"XLNetLMHeadModel"),szr.forEach(t),T2o=r(G5e," (XLNet model)"),G5e.forEach(t),j.forEach(t),F2o=i(Gt),q_=s(Gt,"P",{});var X5e=n(q_);C2o=r(X5e,"The model is set in evaluation mode by default using "),Foe=s(X5e,"CODE",{});var nzr=n(Foe);M2o=r(nzr,"model.eval()"),nzr.forEach(t),E2o=r(X5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Coe=s(X5e,"CODE",{});var lzr=n(Coe);y2o=r(lzr,"model.train()"),lzr.forEach(t),X5e.forEach(t),w2o=i(Gt),Moe=s(Gt,"P",{});var izr=n(Moe);A2o=r(izr,"Examples:"),izr.forEach(t),L2o=i(Gt),f(Qy.$$.fragment,Gt),Gt.forEach(t),Jn.forEach(t),yxe=i(d),nd=s(d,"H2",{class:!0});var PRe=n(nd);O_=s(PRe,"A",{id:!0,class:!0,href:!0});var dzr=n(O_);Eoe=s(dzr,"SPAN",{});var czr=n(Eoe);f(Hy.$$.fragment,czr),czr.forEach(t),dzr.forEach(t),B2o=i(PRe),yoe=s(PRe,"SPAN",{});var mzr=n(yoe);x2o=r(mzr,"AutoModelForMaskedLM"),mzr.forEach(t),PRe.forEach(t),wxe=i(d),Zo=s(d,"DIV",{class:!0});var Kn=n(Zo);f(Uy.$$.fragment,Kn),k2o=i(Kn),ld=s(Kn,"P",{});var kz=n(ld);R2o=r(kz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),woe=s(kz,"CODE",{});var fzr=n(woe);S2o=r(fzr,"from_pretrained()"),fzr.forEach(t),P2o=r(kz,"class method or the "),Aoe=s(kz,"CODE",{});var gzr=n(Aoe);$2o=r(gzr,"from_config()"),gzr.forEach(t),I2o=r(kz,`class
method.`),kz.forEach(t),j2o=i(Kn),Jy=s(Kn,"P",{});var $Re=n(Jy);D2o=r($Re,"This class cannot be instantiated directly using "),Loe=s($Re,"CODE",{});var hzr=n(Loe);N2o=r(hzr,"__init__()"),hzr.forEach(t),q2o=r($Re," (throws an error)."),$Re.forEach(t),O2o=i(Kn),Qr=s(Kn,"DIV",{class:!0});var Zn=n(Qr);f(Yy.$$.fragment,Zn),G2o=i(Zn),Boe=s(Zn,"P",{});var uzr=n(Boe);X2o=r(uzr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uzr.forEach(t),V2o=i(Zn),id=s(Zn,"P",{});var Rz=n(id);z2o=r(Rz,`Note:
Loading a model from its configuration file does `),xoe=s(Rz,"STRONG",{});var pzr=n(xoe);W2o=r(pzr,"not"),pzr.forEach(t),Q2o=r(Rz,` load the model weights. It only affects the
model\u2019s configuration. Use `),koe=s(Rz,"CODE",{});var _zr=n(koe);H2o=r(_zr,"from_pretrained()"),_zr.forEach(t),U2o=r(Rz,"to load the model weights."),Rz.forEach(t),J2o=i(Zn),Roe=s(Zn,"P",{});var bzr=n(Roe);Y2o=r(bzr,"Examples:"),bzr.forEach(t),K2o=i(Zn),f(Ky.$$.fragment,Zn),Zn.forEach(t),Z2o=i(Kn),qe=s(Kn,"DIV",{class:!0});var Xt=n(qe);f(Zy.$$.fragment,Xt),evo=i(Xt),Soe=s(Xt,"P",{});var vzr=n(Soe);ovo=r(vzr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vzr.forEach(t),rvo=i(Xt),Qa=s(Xt,"P",{});var e5=n(Qa);tvo=r(e5,"The model class to instantiate is selected based on the "),Poe=s(e5,"CODE",{});var Tzr=n(Poe);avo=r(Tzr,"model_type"),Tzr.forEach(t),svo=r(e5,` property of the config object (either
passed as an argument or loaded from `),$oe=s(e5,"CODE",{});var Fzr=n($oe);nvo=r(Fzr,"pretrained_model_name_or_path"),Fzr.forEach(t),lvo=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=s(e5,"CODE",{});var Czr=n(Ioe);ivo=r(Czr,"pretrained_model_name_or_path"),Czr.forEach(t),dvo=r(e5,":"),e5.forEach(t),cvo=i(Xt),I=s(Xt,"UL",{});var D=n(I);G_=s(D,"LI",{});var V5e=n(G_);joe=s(V5e,"STRONG",{});var Mzr=n(joe);mvo=r(Mzr,"albert"),Mzr.forEach(t),fvo=r(V5e," \u2014 "),T$=s(V5e,"A",{href:!0});var Ezr=n(T$);gvo=r(Ezr,"AlbertForMaskedLM"),Ezr.forEach(t),hvo=r(V5e," (ALBERT model)"),V5e.forEach(t),uvo=i(D),X_=s(D,"LI",{});var z5e=n(X_);Doe=s(z5e,"STRONG",{});var yzr=n(Doe);pvo=r(yzr,"bart"),yzr.forEach(t),_vo=r(z5e," \u2014 "),F$=s(z5e,"A",{href:!0});var wzr=n(F$);bvo=r(wzr,"BartForConditionalGeneration"),wzr.forEach(t),vvo=r(z5e," (BART model)"),z5e.forEach(t),Tvo=i(D),V_=s(D,"LI",{});var W5e=n(V_);Noe=s(W5e,"STRONG",{});var Azr=n(Noe);Fvo=r(Azr,"bert"),Azr.forEach(t),Cvo=r(W5e," \u2014 "),C$=s(W5e,"A",{href:!0});var Lzr=n(C$);Mvo=r(Lzr,"BertForMaskedLM"),Lzr.forEach(t),Evo=r(W5e," (BERT model)"),W5e.forEach(t),yvo=i(D),z_=s(D,"LI",{});var Q5e=n(z_);qoe=s(Q5e,"STRONG",{});var Bzr=n(qoe);wvo=r(Bzr,"big_bird"),Bzr.forEach(t),Avo=r(Q5e," \u2014 "),M$=s(Q5e,"A",{href:!0});var xzr=n(M$);Lvo=r(xzr,"BigBirdForMaskedLM"),xzr.forEach(t),Bvo=r(Q5e," (BigBird model)"),Q5e.forEach(t),xvo=i(D),W_=s(D,"LI",{});var H5e=n(W_);Ooe=s(H5e,"STRONG",{});var kzr=n(Ooe);kvo=r(kzr,"camembert"),kzr.forEach(t),Rvo=r(H5e," \u2014 "),E$=s(H5e,"A",{href:!0});var Rzr=n(E$);Svo=r(Rzr,"CamembertForMaskedLM"),Rzr.forEach(t),Pvo=r(H5e," (CamemBERT model)"),H5e.forEach(t),$vo=i(D),Q_=s(D,"LI",{});var U5e=n(Q_);Goe=s(U5e,"STRONG",{});var Szr=n(Goe);Ivo=r(Szr,"convbert"),Szr.forEach(t),jvo=r(U5e," \u2014 "),y$=s(U5e,"A",{href:!0});var Pzr=n(y$);Dvo=r(Pzr,"ConvBertForMaskedLM"),Pzr.forEach(t),Nvo=r(U5e," (ConvBERT model)"),U5e.forEach(t),qvo=i(D),H_=s(D,"LI",{});var J5e=n(H_);Xoe=s(J5e,"STRONG",{});var $zr=n(Xoe);Ovo=r($zr,"data2vec-text"),$zr.forEach(t),Gvo=r(J5e," \u2014 "),w$=s(J5e,"A",{href:!0});var Izr=n(w$);Xvo=r(Izr,"Data2VecTextForMaskedLM"),Izr.forEach(t),Vvo=r(J5e," (Data2VecText model)"),J5e.forEach(t),zvo=i(D),U_=s(D,"LI",{});var Y5e=n(U_);Voe=s(Y5e,"STRONG",{});var jzr=n(Voe);Wvo=r(jzr,"deberta"),jzr.forEach(t),Qvo=r(Y5e," \u2014 "),A$=s(Y5e,"A",{href:!0});var Dzr=n(A$);Hvo=r(Dzr,"DebertaForMaskedLM"),Dzr.forEach(t),Uvo=r(Y5e," (DeBERTa model)"),Y5e.forEach(t),Jvo=i(D),J_=s(D,"LI",{});var K5e=n(J_);zoe=s(K5e,"STRONG",{});var Nzr=n(zoe);Yvo=r(Nzr,"deberta-v2"),Nzr.forEach(t),Kvo=r(K5e," \u2014 "),L$=s(K5e,"A",{href:!0});var qzr=n(L$);Zvo=r(qzr,"DebertaV2ForMaskedLM"),qzr.forEach(t),eTo=r(K5e," (DeBERTa-v2 model)"),K5e.forEach(t),oTo=i(D),Y_=s(D,"LI",{});var Z5e=n(Y_);Woe=s(Z5e,"STRONG",{});var Ozr=n(Woe);rTo=r(Ozr,"distilbert"),Ozr.forEach(t),tTo=r(Z5e," \u2014 "),B$=s(Z5e,"A",{href:!0});var Gzr=n(B$);aTo=r(Gzr,"DistilBertForMaskedLM"),Gzr.forEach(t),sTo=r(Z5e," (DistilBERT model)"),Z5e.forEach(t),nTo=i(D),K_=s(D,"LI",{});var eye=n(K_);Qoe=s(eye,"STRONG",{});var Xzr=n(Qoe);lTo=r(Xzr,"electra"),Xzr.forEach(t),iTo=r(eye," \u2014 "),x$=s(eye,"A",{href:!0});var Vzr=n(x$);dTo=r(Vzr,"ElectraForMaskedLM"),Vzr.forEach(t),cTo=r(eye," (ELECTRA model)"),eye.forEach(t),mTo=i(D),Z_=s(D,"LI",{});var oye=n(Z_);Hoe=s(oye,"STRONG",{});var zzr=n(Hoe);fTo=r(zzr,"flaubert"),zzr.forEach(t),gTo=r(oye," \u2014 "),k$=s(oye,"A",{href:!0});var Wzr=n(k$);hTo=r(Wzr,"FlaubertWithLMHeadModel"),Wzr.forEach(t),uTo=r(oye," (FlauBERT model)"),oye.forEach(t),pTo=i(D),eb=s(D,"LI",{});var rye=n(eb);Uoe=s(rye,"STRONG",{});var Qzr=n(Uoe);_To=r(Qzr,"fnet"),Qzr.forEach(t),bTo=r(rye," \u2014 "),R$=s(rye,"A",{href:!0});var Hzr=n(R$);vTo=r(Hzr,"FNetForMaskedLM"),Hzr.forEach(t),TTo=r(rye," (FNet model)"),rye.forEach(t),FTo=i(D),ob=s(D,"LI",{});var tye=n(ob);Joe=s(tye,"STRONG",{});var Uzr=n(Joe);CTo=r(Uzr,"funnel"),Uzr.forEach(t),MTo=r(tye," \u2014 "),S$=s(tye,"A",{href:!0});var Jzr=n(S$);ETo=r(Jzr,"FunnelForMaskedLM"),Jzr.forEach(t),yTo=r(tye," (Funnel Transformer model)"),tye.forEach(t),wTo=i(D),rb=s(D,"LI",{});var aye=n(rb);Yoe=s(aye,"STRONG",{});var Yzr=n(Yoe);ATo=r(Yzr,"ibert"),Yzr.forEach(t),LTo=r(aye," \u2014 "),P$=s(aye,"A",{href:!0});var Kzr=n(P$);BTo=r(Kzr,"IBertForMaskedLM"),Kzr.forEach(t),xTo=r(aye," (I-BERT model)"),aye.forEach(t),kTo=i(D),tb=s(D,"LI",{});var sye=n(tb);Koe=s(sye,"STRONG",{});var Zzr=n(Koe);RTo=r(Zzr,"layoutlm"),Zzr.forEach(t),STo=r(sye," \u2014 "),$$=s(sye,"A",{href:!0});var eWr=n($$);PTo=r(eWr,"LayoutLMForMaskedLM"),eWr.forEach(t),$To=r(sye," (LayoutLM model)"),sye.forEach(t),ITo=i(D),ab=s(D,"LI",{});var nye=n(ab);Zoe=s(nye,"STRONG",{});var oWr=n(Zoe);jTo=r(oWr,"longformer"),oWr.forEach(t),DTo=r(nye," \u2014 "),I$=s(nye,"A",{href:!0});var rWr=n(I$);NTo=r(rWr,"LongformerForMaskedLM"),rWr.forEach(t),qTo=r(nye," (Longformer model)"),nye.forEach(t),OTo=i(D),sb=s(D,"LI",{});var lye=n(sb);ere=s(lye,"STRONG",{});var tWr=n(ere);GTo=r(tWr,"mbart"),tWr.forEach(t),XTo=r(lye," \u2014 "),j$=s(lye,"A",{href:!0});var aWr=n(j$);VTo=r(aWr,"MBartForConditionalGeneration"),aWr.forEach(t),zTo=r(lye," (mBART model)"),lye.forEach(t),WTo=i(D),nb=s(D,"LI",{});var iye=n(nb);ore=s(iye,"STRONG",{});var sWr=n(ore);QTo=r(sWr,"megatron-bert"),sWr.forEach(t),HTo=r(iye," \u2014 "),D$=s(iye,"A",{href:!0});var nWr=n(D$);UTo=r(nWr,"MegatronBertForMaskedLM"),nWr.forEach(t),JTo=r(iye," (MegatronBert model)"),iye.forEach(t),YTo=i(D),lb=s(D,"LI",{});var dye=n(lb);rre=s(dye,"STRONG",{});var lWr=n(rre);KTo=r(lWr,"mobilebert"),lWr.forEach(t),ZTo=r(dye," \u2014 "),N$=s(dye,"A",{href:!0});var iWr=n(N$);e1o=r(iWr,"MobileBertForMaskedLM"),iWr.forEach(t),o1o=r(dye," (MobileBERT model)"),dye.forEach(t),r1o=i(D),ib=s(D,"LI",{});var cye=n(ib);tre=s(cye,"STRONG",{});var dWr=n(tre);t1o=r(dWr,"mpnet"),dWr.forEach(t),a1o=r(cye," \u2014 "),q$=s(cye,"A",{href:!0});var cWr=n(q$);s1o=r(cWr,"MPNetForMaskedLM"),cWr.forEach(t),n1o=r(cye," (MPNet model)"),cye.forEach(t),l1o=i(D),db=s(D,"LI",{});var mye=n(db);are=s(mye,"STRONG",{});var mWr=n(are);i1o=r(mWr,"nystromformer"),mWr.forEach(t),d1o=r(mye," \u2014 "),O$=s(mye,"A",{href:!0});var fWr=n(O$);c1o=r(fWr,"NystromformerForMaskedLM"),fWr.forEach(t),m1o=r(mye," (Nystromformer model)"),mye.forEach(t),f1o=i(D),cb=s(D,"LI",{});var fye=n(cb);sre=s(fye,"STRONG",{});var gWr=n(sre);g1o=r(gWr,"perceiver"),gWr.forEach(t),h1o=r(fye," \u2014 "),G$=s(fye,"A",{href:!0});var hWr=n(G$);u1o=r(hWr,"PerceiverForMaskedLM"),hWr.forEach(t),p1o=r(fye," (Perceiver model)"),fye.forEach(t),_1o=i(D),mb=s(D,"LI",{});var gye=n(mb);nre=s(gye,"STRONG",{});var uWr=n(nre);b1o=r(uWr,"qdqbert"),uWr.forEach(t),v1o=r(gye," \u2014 "),X$=s(gye,"A",{href:!0});var pWr=n(X$);T1o=r(pWr,"QDQBertForMaskedLM"),pWr.forEach(t),F1o=r(gye," (QDQBert model)"),gye.forEach(t),C1o=i(D),fb=s(D,"LI",{});var hye=n(fb);lre=s(hye,"STRONG",{});var _Wr=n(lre);M1o=r(_Wr,"reformer"),_Wr.forEach(t),E1o=r(hye," \u2014 "),V$=s(hye,"A",{href:!0});var bWr=n(V$);y1o=r(bWr,"ReformerForMaskedLM"),bWr.forEach(t),w1o=r(hye," (Reformer model)"),hye.forEach(t),A1o=i(D),gb=s(D,"LI",{});var uye=n(gb);ire=s(uye,"STRONG",{});var vWr=n(ire);L1o=r(vWr,"rembert"),vWr.forEach(t),B1o=r(uye," \u2014 "),z$=s(uye,"A",{href:!0});var TWr=n(z$);x1o=r(TWr,"RemBertForMaskedLM"),TWr.forEach(t),k1o=r(uye," (RemBERT model)"),uye.forEach(t),R1o=i(D),hb=s(D,"LI",{});var pye=n(hb);dre=s(pye,"STRONG",{});var FWr=n(dre);S1o=r(FWr,"roberta"),FWr.forEach(t),P1o=r(pye," \u2014 "),W$=s(pye,"A",{href:!0});var CWr=n(W$);$1o=r(CWr,"RobertaForMaskedLM"),CWr.forEach(t),I1o=r(pye," (RoBERTa model)"),pye.forEach(t),j1o=i(D),ub=s(D,"LI",{});var _ye=n(ub);cre=s(_ye,"STRONG",{});var MWr=n(cre);D1o=r(MWr,"roformer"),MWr.forEach(t),N1o=r(_ye," \u2014 "),Q$=s(_ye,"A",{href:!0});var EWr=n(Q$);q1o=r(EWr,"RoFormerForMaskedLM"),EWr.forEach(t),O1o=r(_ye," (RoFormer model)"),_ye.forEach(t),G1o=i(D),pb=s(D,"LI",{});var bye=n(pb);mre=s(bye,"STRONG",{});var yWr=n(mre);X1o=r(yWr,"squeezebert"),yWr.forEach(t),V1o=r(bye," \u2014 "),H$=s(bye,"A",{href:!0});var wWr=n(H$);z1o=r(wWr,"SqueezeBertForMaskedLM"),wWr.forEach(t),W1o=r(bye," (SqueezeBERT model)"),bye.forEach(t),Q1o=i(D),_b=s(D,"LI",{});var vye=n(_b);fre=s(vye,"STRONG",{});var AWr=n(fre);H1o=r(AWr,"tapas"),AWr.forEach(t),U1o=r(vye," \u2014 "),U$=s(vye,"A",{href:!0});var LWr=n(U$);J1o=r(LWr,"TapasForMaskedLM"),LWr.forEach(t),Y1o=r(vye," (TAPAS model)"),vye.forEach(t),K1o=i(D),bb=s(D,"LI",{});var Tye=n(bb);gre=s(Tye,"STRONG",{});var BWr=n(gre);Z1o=r(BWr,"wav2vec2"),BWr.forEach(t),eFo=r(Tye," \u2014 "),hre=s(Tye,"CODE",{});var xWr=n(hre);oFo=r(xWr,"Wav2Vec2ForMaskedLM"),xWr.forEach(t),rFo=r(Tye,"(Wav2Vec2 model)"),Tye.forEach(t),tFo=i(D),vb=s(D,"LI",{});var Fye=n(vb);ure=s(Fye,"STRONG",{});var kWr=n(ure);aFo=r(kWr,"xlm"),kWr.forEach(t),sFo=r(Fye," \u2014 "),J$=s(Fye,"A",{href:!0});var RWr=n(J$);nFo=r(RWr,"XLMWithLMHeadModel"),RWr.forEach(t),lFo=r(Fye," (XLM model)"),Fye.forEach(t),iFo=i(D),Tb=s(D,"LI",{});var Cye=n(Tb);pre=s(Cye,"STRONG",{});var SWr=n(pre);dFo=r(SWr,"xlm-roberta"),SWr.forEach(t),cFo=r(Cye," \u2014 "),Y$=s(Cye,"A",{href:!0});var PWr=n(Y$);mFo=r(PWr,"XLMRobertaForMaskedLM"),PWr.forEach(t),fFo=r(Cye," (XLM-RoBERTa model)"),Cye.forEach(t),gFo=i(D),Fb=s(D,"LI",{});var Mye=n(Fb);_re=s(Mye,"STRONG",{});var $Wr=n(_re);hFo=r($Wr,"xlm-roberta-xl"),$Wr.forEach(t),uFo=r(Mye," \u2014 "),K$=s(Mye,"A",{href:!0});var IWr=n(K$);pFo=r(IWr,"XLMRobertaXLForMaskedLM"),IWr.forEach(t),_Fo=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),bFo=i(D),Cb=s(D,"LI",{});var Eye=n(Cb);bre=s(Eye,"STRONG",{});var jWr=n(bre);vFo=r(jWr,"yoso"),jWr.forEach(t),TFo=r(Eye," \u2014 "),Z$=s(Eye,"A",{href:!0});var DWr=n(Z$);FFo=r(DWr,"YosoForMaskedLM"),DWr.forEach(t),CFo=r(Eye," (YOSO model)"),Eye.forEach(t),D.forEach(t),MFo=i(Xt),Mb=s(Xt,"P",{});var yye=n(Mb);EFo=r(yye,"The model is set in evaluation mode by default using "),vre=s(yye,"CODE",{});var NWr=n(vre);yFo=r(NWr,"model.eval()"),NWr.forEach(t),wFo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tre=s(yye,"CODE",{});var qWr=n(Tre);AFo=r(qWr,"model.train()"),qWr.forEach(t),yye.forEach(t),LFo=i(Xt),Fre=s(Xt,"P",{});var OWr=n(Fre);BFo=r(OWr,"Examples:"),OWr.forEach(t),xFo=i(Xt),f(ew.$$.fragment,Xt),Xt.forEach(t),Kn.forEach(t),Axe=i(d),dd=s(d,"H2",{class:!0});var IRe=n(dd);Eb=s(IRe,"A",{id:!0,class:!0,href:!0});var GWr=n(Eb);Cre=s(GWr,"SPAN",{});var XWr=n(Cre);f(ow.$$.fragment,XWr),XWr.forEach(t),GWr.forEach(t),kFo=i(IRe),Mre=s(IRe,"SPAN",{});var VWr=n(Mre);RFo=r(VWr,"AutoModelForSeq2SeqLM"),VWr.forEach(t),IRe.forEach(t),Lxe=i(d),er=s(d,"DIV",{class:!0});var el=n(er);f(rw.$$.fragment,el),SFo=i(el),cd=s(el,"P",{});var Sz=n(cd);PFo=r(Sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Ere=s(Sz,"CODE",{});var zWr=n(Ere);$Fo=r(zWr,"from_pretrained()"),zWr.forEach(t),IFo=r(Sz,"class method or the "),yre=s(Sz,"CODE",{});var WWr=n(yre);jFo=r(WWr,"from_config()"),WWr.forEach(t),DFo=r(Sz,`class
method.`),Sz.forEach(t),NFo=i(el),tw=s(el,"P",{});var jRe=n(tw);qFo=r(jRe,"This class cannot be instantiated directly using "),wre=s(jRe,"CODE",{});var QWr=n(wre);OFo=r(QWr,"__init__()"),QWr.forEach(t),GFo=r(jRe," (throws an error)."),jRe.forEach(t),XFo=i(el),Hr=s(el,"DIV",{class:!0});var ol=n(Hr);f(aw.$$.fragment,ol),VFo=i(ol),Are=s(ol,"P",{});var HWr=n(Are);zFo=r(HWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),HWr.forEach(t),WFo=i(ol),md=s(ol,"P",{});var Pz=n(md);QFo=r(Pz,`Note:
Loading a model from its configuration file does `),Lre=s(Pz,"STRONG",{});var UWr=n(Lre);HFo=r(UWr,"not"),UWr.forEach(t),UFo=r(Pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bre=s(Pz,"CODE",{});var JWr=n(Bre);JFo=r(JWr,"from_pretrained()"),JWr.forEach(t),YFo=r(Pz,"to load the model weights."),Pz.forEach(t),KFo=i(ol),xre=s(ol,"P",{});var YWr=n(xre);ZFo=r(YWr,"Examples:"),YWr.forEach(t),eCo=i(ol),f(sw.$$.fragment,ol),ol.forEach(t),oCo=i(el),Oe=s(el,"DIV",{class:!0});var Vt=n(Oe);f(nw.$$.fragment,Vt),rCo=i(Vt),kre=s(Vt,"P",{});var KWr=n(kre);tCo=r(KWr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),KWr.forEach(t),aCo=i(Vt),Ha=s(Vt,"P",{});var o5=n(Ha);sCo=r(o5,"The model class to instantiate is selected based on the "),Rre=s(o5,"CODE",{});var ZWr=n(Rre);nCo=r(ZWr,"model_type"),ZWr.forEach(t),lCo=r(o5,` property of the config object (either
passed as an argument or loaded from `),Sre=s(o5,"CODE",{});var eQr=n(Sre);iCo=r(eQr,"pretrained_model_name_or_path"),eQr.forEach(t),dCo=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=s(o5,"CODE",{});var oQr=n(Pre);cCo=r(oQr,"pretrained_model_name_or_path"),oQr.forEach(t),mCo=r(o5,":"),o5.forEach(t),fCo=i(Vt),se=s(Vt,"UL",{});var ie=n(se);yb=s(ie,"LI",{});var wye=n(yb);$re=s(wye,"STRONG",{});var rQr=n($re);gCo=r(rQr,"bart"),rQr.forEach(t),hCo=r(wye," \u2014 "),eI=s(wye,"A",{href:!0});var tQr=n(eI);uCo=r(tQr,"BartForConditionalGeneration"),tQr.forEach(t),pCo=r(wye," (BART model)"),wye.forEach(t),_Co=i(ie),wb=s(ie,"LI",{});var Aye=n(wb);Ire=s(Aye,"STRONG",{});var aQr=n(Ire);bCo=r(aQr,"bigbird_pegasus"),aQr.forEach(t),vCo=r(Aye," \u2014 "),oI=s(Aye,"A",{href:!0});var sQr=n(oI);TCo=r(sQr,"BigBirdPegasusForConditionalGeneration"),sQr.forEach(t),FCo=r(Aye," (BigBirdPegasus model)"),Aye.forEach(t),CCo=i(ie),Ab=s(ie,"LI",{});var Lye=n(Ab);jre=s(Lye,"STRONG",{});var nQr=n(jre);MCo=r(nQr,"blenderbot"),nQr.forEach(t),ECo=r(Lye," \u2014 "),rI=s(Lye,"A",{href:!0});var lQr=n(rI);yCo=r(lQr,"BlenderbotForConditionalGeneration"),lQr.forEach(t),wCo=r(Lye," (Blenderbot model)"),Lye.forEach(t),ACo=i(ie),Lb=s(ie,"LI",{});var Bye=n(Lb);Dre=s(Bye,"STRONG",{});var iQr=n(Dre);LCo=r(iQr,"blenderbot-small"),iQr.forEach(t),BCo=r(Bye," \u2014 "),tI=s(Bye,"A",{href:!0});var dQr=n(tI);xCo=r(dQr,"BlenderbotSmallForConditionalGeneration"),dQr.forEach(t),kCo=r(Bye," (BlenderbotSmall model)"),Bye.forEach(t),RCo=i(ie),Bb=s(ie,"LI",{});var xye=n(Bb);Nre=s(xye,"STRONG",{});var cQr=n(Nre);SCo=r(cQr,"encoder-decoder"),cQr.forEach(t),PCo=r(xye," \u2014 "),aI=s(xye,"A",{href:!0});var mQr=n(aI);$Co=r(mQr,"EncoderDecoderModel"),mQr.forEach(t),ICo=r(xye," (Encoder decoder model)"),xye.forEach(t),jCo=i(ie),xb=s(ie,"LI",{});var kye=n(xb);qre=s(kye,"STRONG",{});var fQr=n(qre);DCo=r(fQr,"fsmt"),fQr.forEach(t),NCo=r(kye," \u2014 "),sI=s(kye,"A",{href:!0});var gQr=n(sI);qCo=r(gQr,"FSMTForConditionalGeneration"),gQr.forEach(t),OCo=r(kye," (FairSeq Machine-Translation model)"),kye.forEach(t),GCo=i(ie),kb=s(ie,"LI",{});var Rye=n(kb);Ore=s(Rye,"STRONG",{});var hQr=n(Ore);XCo=r(hQr,"led"),hQr.forEach(t),VCo=r(Rye," \u2014 "),nI=s(Rye,"A",{href:!0});var uQr=n(nI);zCo=r(uQr,"LEDForConditionalGeneration"),uQr.forEach(t),WCo=r(Rye," (LED model)"),Rye.forEach(t),QCo=i(ie),Rb=s(ie,"LI",{});var Sye=n(Rb);Gre=s(Sye,"STRONG",{});var pQr=n(Gre);HCo=r(pQr,"m2m_100"),pQr.forEach(t),UCo=r(Sye," \u2014 "),lI=s(Sye,"A",{href:!0});var _Qr=n(lI);JCo=r(_Qr,"M2M100ForConditionalGeneration"),_Qr.forEach(t),YCo=r(Sye," (M2M100 model)"),Sye.forEach(t),KCo=i(ie),Sb=s(ie,"LI",{});var Pye=n(Sb);Xre=s(Pye,"STRONG",{});var bQr=n(Xre);ZCo=r(bQr,"marian"),bQr.forEach(t),eMo=r(Pye," \u2014 "),iI=s(Pye,"A",{href:!0});var vQr=n(iI);oMo=r(vQr,"MarianMTModel"),vQr.forEach(t),rMo=r(Pye," (Marian model)"),Pye.forEach(t),tMo=i(ie),Pb=s(ie,"LI",{});var $ye=n(Pb);Vre=s($ye,"STRONG",{});var TQr=n(Vre);aMo=r(TQr,"mbart"),TQr.forEach(t),sMo=r($ye," \u2014 "),dI=s($ye,"A",{href:!0});var FQr=n(dI);nMo=r(FQr,"MBartForConditionalGeneration"),FQr.forEach(t),lMo=r($ye," (mBART model)"),$ye.forEach(t),iMo=i(ie),$b=s(ie,"LI",{});var Iye=n($b);zre=s(Iye,"STRONG",{});var CQr=n(zre);dMo=r(CQr,"mt5"),CQr.forEach(t),cMo=r(Iye," \u2014 "),cI=s(Iye,"A",{href:!0});var MQr=n(cI);mMo=r(MQr,"MT5ForConditionalGeneration"),MQr.forEach(t),fMo=r(Iye," (mT5 model)"),Iye.forEach(t),gMo=i(ie),Ib=s(ie,"LI",{});var jye=n(Ib);Wre=s(jye,"STRONG",{});var EQr=n(Wre);hMo=r(EQr,"pegasus"),EQr.forEach(t),uMo=r(jye," \u2014 "),mI=s(jye,"A",{href:!0});var yQr=n(mI);pMo=r(yQr,"PegasusForConditionalGeneration"),yQr.forEach(t),_Mo=r(jye," (Pegasus model)"),jye.forEach(t),bMo=i(ie),jb=s(ie,"LI",{});var Dye=n(jb);Qre=s(Dye,"STRONG",{});var wQr=n(Qre);vMo=r(wQr,"plbart"),wQr.forEach(t),TMo=r(Dye," \u2014 "),fI=s(Dye,"A",{href:!0});var AQr=n(fI);FMo=r(AQr,"PLBartForConditionalGeneration"),AQr.forEach(t),CMo=r(Dye," (PLBart model)"),Dye.forEach(t),MMo=i(ie),Db=s(ie,"LI",{});var Nye=n(Db);Hre=s(Nye,"STRONG",{});var LQr=n(Hre);EMo=r(LQr,"prophetnet"),LQr.forEach(t),yMo=r(Nye," \u2014 "),gI=s(Nye,"A",{href:!0});var BQr=n(gI);wMo=r(BQr,"ProphetNetForConditionalGeneration"),BQr.forEach(t),AMo=r(Nye," (ProphetNet model)"),Nye.forEach(t),LMo=i(ie),Nb=s(ie,"LI",{});var qye=n(Nb);Ure=s(qye,"STRONG",{});var xQr=n(Ure);BMo=r(xQr,"t5"),xQr.forEach(t),xMo=r(qye," \u2014 "),hI=s(qye,"A",{href:!0});var kQr=n(hI);kMo=r(kQr,"T5ForConditionalGeneration"),kQr.forEach(t),RMo=r(qye," (T5 model)"),qye.forEach(t),SMo=i(ie),qb=s(ie,"LI",{});var Oye=n(qb);Jre=s(Oye,"STRONG",{});var RQr=n(Jre);PMo=r(RQr,"xlm-prophetnet"),RQr.forEach(t),$Mo=r(Oye," \u2014 "),uI=s(Oye,"A",{href:!0});var SQr=n(uI);IMo=r(SQr,"XLMProphetNetForConditionalGeneration"),SQr.forEach(t),jMo=r(Oye," (XLMProphetNet model)"),Oye.forEach(t),ie.forEach(t),DMo=i(Vt),Ob=s(Vt,"P",{});var Gye=n(Ob);NMo=r(Gye,"The model is set in evaluation mode by default using "),Yre=s(Gye,"CODE",{});var PQr=n(Yre);qMo=r(PQr,"model.eval()"),PQr.forEach(t),OMo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kre=s(Gye,"CODE",{});var $Qr=n(Kre);GMo=r($Qr,"model.train()"),$Qr.forEach(t),Gye.forEach(t),XMo=i(Vt),Zre=s(Vt,"P",{});var IQr=n(Zre);VMo=r(IQr,"Examples:"),IQr.forEach(t),zMo=i(Vt),f(lw.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Bxe=i(d),fd=s(d,"H2",{class:!0});var DRe=n(fd);Gb=s(DRe,"A",{id:!0,class:!0,href:!0});var jQr=n(Gb);ete=s(jQr,"SPAN",{});var DQr=n(ete);f(iw.$$.fragment,DQr),DQr.forEach(t),jQr.forEach(t),WMo=i(DRe),ote=s(DRe,"SPAN",{});var NQr=n(ote);QMo=r(NQr,"AutoModelForSequenceClassification"),NQr.forEach(t),DRe.forEach(t),xxe=i(d),or=s(d,"DIV",{class:!0});var rl=n(or);f(dw.$$.fragment,rl),HMo=i(rl),gd=s(rl,"P",{});var $z=n(gd);UMo=r($z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),rte=s($z,"CODE",{});var qQr=n(rte);JMo=r(qQr,"from_pretrained()"),qQr.forEach(t),YMo=r($z,"class method or the "),tte=s($z,"CODE",{});var OQr=n(tte);KMo=r(OQr,"from_config()"),OQr.forEach(t),ZMo=r($z,`class
method.`),$z.forEach(t),e4o=i(rl),cw=s(rl,"P",{});var NRe=n(cw);o4o=r(NRe,"This class cannot be instantiated directly using "),ate=s(NRe,"CODE",{});var GQr=n(ate);r4o=r(GQr,"__init__()"),GQr.forEach(t),t4o=r(NRe," (throws an error)."),NRe.forEach(t),a4o=i(rl),Ur=s(rl,"DIV",{class:!0});var tl=n(Ur);f(mw.$$.fragment,tl),s4o=i(tl),ste=s(tl,"P",{});var XQr=n(ste);n4o=r(XQr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XQr.forEach(t),l4o=i(tl),hd=s(tl,"P",{});var Iz=n(hd);i4o=r(Iz,`Note:
Loading a model from its configuration file does `),nte=s(Iz,"STRONG",{});var VQr=n(nte);d4o=r(VQr,"not"),VQr.forEach(t),c4o=r(Iz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lte=s(Iz,"CODE",{});var zQr=n(lte);m4o=r(zQr,"from_pretrained()"),zQr.forEach(t),f4o=r(Iz,"to load the model weights."),Iz.forEach(t),g4o=i(tl),ite=s(tl,"P",{});var WQr=n(ite);h4o=r(WQr,"Examples:"),WQr.forEach(t),u4o=i(tl),f(fw.$$.fragment,tl),tl.forEach(t),p4o=i(rl),Ge=s(rl,"DIV",{class:!0});var zt=n(Ge);f(gw.$$.fragment,zt),_4o=i(zt),dte=s(zt,"P",{});var QQr=n(dte);b4o=r(QQr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),QQr.forEach(t),v4o=i(zt),Ua=s(zt,"P",{});var r5=n(Ua);T4o=r(r5,"The model class to instantiate is selected based on the "),cte=s(r5,"CODE",{});var HQr=n(cte);F4o=r(HQr,"model_type"),HQr.forEach(t),C4o=r(r5,` property of the config object (either
passed as an argument or loaded from `),mte=s(r5,"CODE",{});var UQr=n(mte);M4o=r(UQr,"pretrained_model_name_or_path"),UQr.forEach(t),E4o=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fte=s(r5,"CODE",{});var JQr=n(fte);y4o=r(JQr,"pretrained_model_name_or_path"),JQr.forEach(t),w4o=r(r5,":"),r5.forEach(t),A4o=i(zt),A=s(zt,"UL",{});var L=n(A);Xb=s(L,"LI",{});var Xye=n(Xb);gte=s(Xye,"STRONG",{});var YQr=n(gte);L4o=r(YQr,"albert"),YQr.forEach(t),B4o=r(Xye," \u2014 "),pI=s(Xye,"A",{href:!0});var KQr=n(pI);x4o=r(KQr,"AlbertForSequenceClassification"),KQr.forEach(t),k4o=r(Xye," (ALBERT model)"),Xye.forEach(t),R4o=i(L),Vb=s(L,"LI",{});var Vye=n(Vb);hte=s(Vye,"STRONG",{});var ZQr=n(hte);S4o=r(ZQr,"bart"),ZQr.forEach(t),P4o=r(Vye," \u2014 "),_I=s(Vye,"A",{href:!0});var eHr=n(_I);$4o=r(eHr,"BartForSequenceClassification"),eHr.forEach(t),I4o=r(Vye," (BART model)"),Vye.forEach(t),j4o=i(L),zb=s(L,"LI",{});var zye=n(zb);ute=s(zye,"STRONG",{});var oHr=n(ute);D4o=r(oHr,"bert"),oHr.forEach(t),N4o=r(zye," \u2014 "),bI=s(zye,"A",{href:!0});var rHr=n(bI);q4o=r(rHr,"BertForSequenceClassification"),rHr.forEach(t),O4o=r(zye," (BERT model)"),zye.forEach(t),G4o=i(L),Wb=s(L,"LI",{});var Wye=n(Wb);pte=s(Wye,"STRONG",{});var tHr=n(pte);X4o=r(tHr,"big_bird"),tHr.forEach(t),V4o=r(Wye," \u2014 "),vI=s(Wye,"A",{href:!0});var aHr=n(vI);z4o=r(aHr,"BigBirdForSequenceClassification"),aHr.forEach(t),W4o=r(Wye," (BigBird model)"),Wye.forEach(t),Q4o=i(L),Qb=s(L,"LI",{});var Qye=n(Qb);_te=s(Qye,"STRONG",{});var sHr=n(_te);H4o=r(sHr,"bigbird_pegasus"),sHr.forEach(t),U4o=r(Qye," \u2014 "),TI=s(Qye,"A",{href:!0});var nHr=n(TI);J4o=r(nHr,"BigBirdPegasusForSequenceClassification"),nHr.forEach(t),Y4o=r(Qye," (BigBirdPegasus model)"),Qye.forEach(t),K4o=i(L),Hb=s(L,"LI",{});var Hye=n(Hb);bte=s(Hye,"STRONG",{});var lHr=n(bte);Z4o=r(lHr,"camembert"),lHr.forEach(t),eEo=r(Hye," \u2014 "),FI=s(Hye,"A",{href:!0});var iHr=n(FI);oEo=r(iHr,"CamembertForSequenceClassification"),iHr.forEach(t),rEo=r(Hye," (CamemBERT model)"),Hye.forEach(t),tEo=i(L),Ub=s(L,"LI",{});var Uye=n(Ub);vte=s(Uye,"STRONG",{});var dHr=n(vte);aEo=r(dHr,"canine"),dHr.forEach(t),sEo=r(Uye," \u2014 "),CI=s(Uye,"A",{href:!0});var cHr=n(CI);nEo=r(cHr,"CanineForSequenceClassification"),cHr.forEach(t),lEo=r(Uye," (Canine model)"),Uye.forEach(t),iEo=i(L),Jb=s(L,"LI",{});var Jye=n(Jb);Tte=s(Jye,"STRONG",{});var mHr=n(Tte);dEo=r(mHr,"convbert"),mHr.forEach(t),cEo=r(Jye," \u2014 "),MI=s(Jye,"A",{href:!0});var fHr=n(MI);mEo=r(fHr,"ConvBertForSequenceClassification"),fHr.forEach(t),fEo=r(Jye," (ConvBERT model)"),Jye.forEach(t),gEo=i(L),Yb=s(L,"LI",{});var Yye=n(Yb);Fte=s(Yye,"STRONG",{});var gHr=n(Fte);hEo=r(gHr,"ctrl"),gHr.forEach(t),uEo=r(Yye," \u2014 "),EI=s(Yye,"A",{href:!0});var hHr=n(EI);pEo=r(hHr,"CTRLForSequenceClassification"),hHr.forEach(t),_Eo=r(Yye," (CTRL model)"),Yye.forEach(t),bEo=i(L),Kb=s(L,"LI",{});var Kye=n(Kb);Cte=s(Kye,"STRONG",{});var uHr=n(Cte);vEo=r(uHr,"data2vec-text"),uHr.forEach(t),TEo=r(Kye," \u2014 "),yI=s(Kye,"A",{href:!0});var pHr=n(yI);FEo=r(pHr,"Data2VecTextForSequenceClassification"),pHr.forEach(t),CEo=r(Kye," (Data2VecText model)"),Kye.forEach(t),MEo=i(L),Zb=s(L,"LI",{});var Zye=n(Zb);Mte=s(Zye,"STRONG",{});var _Hr=n(Mte);EEo=r(_Hr,"deberta"),_Hr.forEach(t),yEo=r(Zye," \u2014 "),wI=s(Zye,"A",{href:!0});var bHr=n(wI);wEo=r(bHr,"DebertaForSequenceClassification"),bHr.forEach(t),AEo=r(Zye," (DeBERTa model)"),Zye.forEach(t),LEo=i(L),e2=s(L,"LI",{});var ewe=n(e2);Ete=s(ewe,"STRONG",{});var vHr=n(Ete);BEo=r(vHr,"deberta-v2"),vHr.forEach(t),xEo=r(ewe," \u2014 "),AI=s(ewe,"A",{href:!0});var THr=n(AI);kEo=r(THr,"DebertaV2ForSequenceClassification"),THr.forEach(t),REo=r(ewe," (DeBERTa-v2 model)"),ewe.forEach(t),SEo=i(L),o2=s(L,"LI",{});var owe=n(o2);yte=s(owe,"STRONG",{});var FHr=n(yte);PEo=r(FHr,"distilbert"),FHr.forEach(t),$Eo=r(owe," \u2014 "),LI=s(owe,"A",{href:!0});var CHr=n(LI);IEo=r(CHr,"DistilBertForSequenceClassification"),CHr.forEach(t),jEo=r(owe," (DistilBERT model)"),owe.forEach(t),DEo=i(L),r2=s(L,"LI",{});var rwe=n(r2);wte=s(rwe,"STRONG",{});var MHr=n(wte);NEo=r(MHr,"electra"),MHr.forEach(t),qEo=r(rwe," \u2014 "),BI=s(rwe,"A",{href:!0});var EHr=n(BI);OEo=r(EHr,"ElectraForSequenceClassification"),EHr.forEach(t),GEo=r(rwe," (ELECTRA model)"),rwe.forEach(t),XEo=i(L),t2=s(L,"LI",{});var twe=n(t2);Ate=s(twe,"STRONG",{});var yHr=n(Ate);VEo=r(yHr,"flaubert"),yHr.forEach(t),zEo=r(twe," \u2014 "),xI=s(twe,"A",{href:!0});var wHr=n(xI);WEo=r(wHr,"FlaubertForSequenceClassification"),wHr.forEach(t),QEo=r(twe," (FlauBERT model)"),twe.forEach(t),HEo=i(L),a2=s(L,"LI",{});var awe=n(a2);Lte=s(awe,"STRONG",{});var AHr=n(Lte);UEo=r(AHr,"fnet"),AHr.forEach(t),JEo=r(awe," \u2014 "),kI=s(awe,"A",{href:!0});var LHr=n(kI);YEo=r(LHr,"FNetForSequenceClassification"),LHr.forEach(t),KEo=r(awe," (FNet model)"),awe.forEach(t),ZEo=i(L),s2=s(L,"LI",{});var swe=n(s2);Bte=s(swe,"STRONG",{});var BHr=n(Bte);e3o=r(BHr,"funnel"),BHr.forEach(t),o3o=r(swe," \u2014 "),RI=s(swe,"A",{href:!0});var xHr=n(RI);r3o=r(xHr,"FunnelForSequenceClassification"),xHr.forEach(t),t3o=r(swe," (Funnel Transformer model)"),swe.forEach(t),a3o=i(L),n2=s(L,"LI",{});var nwe=n(n2);xte=s(nwe,"STRONG",{});var kHr=n(xte);s3o=r(kHr,"gpt2"),kHr.forEach(t),n3o=r(nwe," \u2014 "),SI=s(nwe,"A",{href:!0});var RHr=n(SI);l3o=r(RHr,"GPT2ForSequenceClassification"),RHr.forEach(t),i3o=r(nwe," (OpenAI GPT-2 model)"),nwe.forEach(t),d3o=i(L),l2=s(L,"LI",{});var lwe=n(l2);kte=s(lwe,"STRONG",{});var SHr=n(kte);c3o=r(SHr,"gpt_neo"),SHr.forEach(t),m3o=r(lwe," \u2014 "),PI=s(lwe,"A",{href:!0});var PHr=n(PI);f3o=r(PHr,"GPTNeoForSequenceClassification"),PHr.forEach(t),g3o=r(lwe," (GPT Neo model)"),lwe.forEach(t),h3o=i(L),i2=s(L,"LI",{});var iwe=n(i2);Rte=s(iwe,"STRONG",{});var $Hr=n(Rte);u3o=r($Hr,"gptj"),$Hr.forEach(t),p3o=r(iwe," \u2014 "),$I=s(iwe,"A",{href:!0});var IHr=n($I);_3o=r(IHr,"GPTJForSequenceClassification"),IHr.forEach(t),b3o=r(iwe," (GPT-J model)"),iwe.forEach(t),v3o=i(L),d2=s(L,"LI",{});var dwe=n(d2);Ste=s(dwe,"STRONG",{});var jHr=n(Ste);T3o=r(jHr,"ibert"),jHr.forEach(t),F3o=r(dwe," \u2014 "),II=s(dwe,"A",{href:!0});var DHr=n(II);C3o=r(DHr,"IBertForSequenceClassification"),DHr.forEach(t),M3o=r(dwe," (I-BERT model)"),dwe.forEach(t),E3o=i(L),c2=s(L,"LI",{});var cwe=n(c2);Pte=s(cwe,"STRONG",{});var NHr=n(Pte);y3o=r(NHr,"layoutlm"),NHr.forEach(t),w3o=r(cwe," \u2014 "),jI=s(cwe,"A",{href:!0});var qHr=n(jI);A3o=r(qHr,"LayoutLMForSequenceClassification"),qHr.forEach(t),L3o=r(cwe," (LayoutLM model)"),cwe.forEach(t),B3o=i(L),m2=s(L,"LI",{});var mwe=n(m2);$te=s(mwe,"STRONG",{});var OHr=n($te);x3o=r(OHr,"layoutlmv2"),OHr.forEach(t),k3o=r(mwe," \u2014 "),DI=s(mwe,"A",{href:!0});var GHr=n(DI);R3o=r(GHr,"LayoutLMv2ForSequenceClassification"),GHr.forEach(t),S3o=r(mwe," (LayoutLMv2 model)"),mwe.forEach(t),P3o=i(L),f2=s(L,"LI",{});var fwe=n(f2);Ite=s(fwe,"STRONG",{});var XHr=n(Ite);$3o=r(XHr,"led"),XHr.forEach(t),I3o=r(fwe," \u2014 "),NI=s(fwe,"A",{href:!0});var VHr=n(NI);j3o=r(VHr,"LEDForSequenceClassification"),VHr.forEach(t),D3o=r(fwe," (LED model)"),fwe.forEach(t),N3o=i(L),g2=s(L,"LI",{});var gwe=n(g2);jte=s(gwe,"STRONG",{});var zHr=n(jte);q3o=r(zHr,"longformer"),zHr.forEach(t),O3o=r(gwe," \u2014 "),qI=s(gwe,"A",{href:!0});var WHr=n(qI);G3o=r(WHr,"LongformerForSequenceClassification"),WHr.forEach(t),X3o=r(gwe," (Longformer model)"),gwe.forEach(t),V3o=i(L),h2=s(L,"LI",{});var hwe=n(h2);Dte=s(hwe,"STRONG",{});var QHr=n(Dte);z3o=r(QHr,"mbart"),QHr.forEach(t),W3o=r(hwe," \u2014 "),OI=s(hwe,"A",{href:!0});var HHr=n(OI);Q3o=r(HHr,"MBartForSequenceClassification"),HHr.forEach(t),H3o=r(hwe," (mBART model)"),hwe.forEach(t),U3o=i(L),u2=s(L,"LI",{});var uwe=n(u2);Nte=s(uwe,"STRONG",{});var UHr=n(Nte);J3o=r(UHr,"megatron-bert"),UHr.forEach(t),Y3o=r(uwe," \u2014 "),GI=s(uwe,"A",{href:!0});var JHr=n(GI);K3o=r(JHr,"MegatronBertForSequenceClassification"),JHr.forEach(t),Z3o=r(uwe," (MegatronBert model)"),uwe.forEach(t),e5o=i(L),p2=s(L,"LI",{});var pwe=n(p2);qte=s(pwe,"STRONG",{});var YHr=n(qte);o5o=r(YHr,"mobilebert"),YHr.forEach(t),r5o=r(pwe," \u2014 "),XI=s(pwe,"A",{href:!0});var KHr=n(XI);t5o=r(KHr,"MobileBertForSequenceClassification"),KHr.forEach(t),a5o=r(pwe," (MobileBERT model)"),pwe.forEach(t),s5o=i(L),_2=s(L,"LI",{});var _we=n(_2);Ote=s(_we,"STRONG",{});var ZHr=n(Ote);n5o=r(ZHr,"mpnet"),ZHr.forEach(t),l5o=r(_we," \u2014 "),VI=s(_we,"A",{href:!0});var eUr=n(VI);i5o=r(eUr,"MPNetForSequenceClassification"),eUr.forEach(t),d5o=r(_we," (MPNet model)"),_we.forEach(t),c5o=i(L),b2=s(L,"LI",{});var bwe=n(b2);Gte=s(bwe,"STRONG",{});var oUr=n(Gte);m5o=r(oUr,"nystromformer"),oUr.forEach(t),f5o=r(bwe," \u2014 "),zI=s(bwe,"A",{href:!0});var rUr=n(zI);g5o=r(rUr,"NystromformerForSequenceClassification"),rUr.forEach(t),h5o=r(bwe," (Nystromformer model)"),bwe.forEach(t),u5o=i(L),v2=s(L,"LI",{});var vwe=n(v2);Xte=s(vwe,"STRONG",{});var tUr=n(Xte);p5o=r(tUr,"openai-gpt"),tUr.forEach(t),_5o=r(vwe," \u2014 "),WI=s(vwe,"A",{href:!0});var aUr=n(WI);b5o=r(aUr,"OpenAIGPTForSequenceClassification"),aUr.forEach(t),v5o=r(vwe," (OpenAI GPT model)"),vwe.forEach(t),T5o=i(L),T2=s(L,"LI",{});var Twe=n(T2);Vte=s(Twe,"STRONG",{});var sUr=n(Vte);F5o=r(sUr,"perceiver"),sUr.forEach(t),C5o=r(Twe," \u2014 "),QI=s(Twe,"A",{href:!0});var nUr=n(QI);M5o=r(nUr,"PerceiverForSequenceClassification"),nUr.forEach(t),E5o=r(Twe," (Perceiver model)"),Twe.forEach(t),y5o=i(L),F2=s(L,"LI",{});var Fwe=n(F2);zte=s(Fwe,"STRONG",{});var lUr=n(zte);w5o=r(lUr,"plbart"),lUr.forEach(t),A5o=r(Fwe," \u2014 "),HI=s(Fwe,"A",{href:!0});var iUr=n(HI);L5o=r(iUr,"PLBartForSequenceClassification"),iUr.forEach(t),B5o=r(Fwe," (PLBart model)"),Fwe.forEach(t),x5o=i(L),C2=s(L,"LI",{});var Cwe=n(C2);Wte=s(Cwe,"STRONG",{});var dUr=n(Wte);k5o=r(dUr,"qdqbert"),dUr.forEach(t),R5o=r(Cwe," \u2014 "),UI=s(Cwe,"A",{href:!0});var cUr=n(UI);S5o=r(cUr,"QDQBertForSequenceClassification"),cUr.forEach(t),P5o=r(Cwe," (QDQBert model)"),Cwe.forEach(t),$5o=i(L),M2=s(L,"LI",{});var Mwe=n(M2);Qte=s(Mwe,"STRONG",{});var mUr=n(Qte);I5o=r(mUr,"reformer"),mUr.forEach(t),j5o=r(Mwe," \u2014 "),JI=s(Mwe,"A",{href:!0});var fUr=n(JI);D5o=r(fUr,"ReformerForSequenceClassification"),fUr.forEach(t),N5o=r(Mwe," (Reformer model)"),Mwe.forEach(t),q5o=i(L),E2=s(L,"LI",{});var Ewe=n(E2);Hte=s(Ewe,"STRONG",{});var gUr=n(Hte);O5o=r(gUr,"rembert"),gUr.forEach(t),G5o=r(Ewe," \u2014 "),YI=s(Ewe,"A",{href:!0});var hUr=n(YI);X5o=r(hUr,"RemBertForSequenceClassification"),hUr.forEach(t),V5o=r(Ewe," (RemBERT model)"),Ewe.forEach(t),z5o=i(L),y2=s(L,"LI",{});var ywe=n(y2);Ute=s(ywe,"STRONG",{});var uUr=n(Ute);W5o=r(uUr,"roberta"),uUr.forEach(t),Q5o=r(ywe," \u2014 "),KI=s(ywe,"A",{href:!0});var pUr=n(KI);H5o=r(pUr,"RobertaForSequenceClassification"),pUr.forEach(t),U5o=r(ywe," (RoBERTa model)"),ywe.forEach(t),J5o=i(L),w2=s(L,"LI",{});var wwe=n(w2);Jte=s(wwe,"STRONG",{});var _Ur=n(Jte);Y5o=r(_Ur,"roformer"),_Ur.forEach(t),K5o=r(wwe," \u2014 "),ZI=s(wwe,"A",{href:!0});var bUr=n(ZI);Z5o=r(bUr,"RoFormerForSequenceClassification"),bUr.forEach(t),eyo=r(wwe," (RoFormer model)"),wwe.forEach(t),oyo=i(L),A2=s(L,"LI",{});var Awe=n(A2);Yte=s(Awe,"STRONG",{});var vUr=n(Yte);ryo=r(vUr,"squeezebert"),vUr.forEach(t),tyo=r(Awe," \u2014 "),ej=s(Awe,"A",{href:!0});var TUr=n(ej);ayo=r(TUr,"SqueezeBertForSequenceClassification"),TUr.forEach(t),syo=r(Awe," (SqueezeBERT model)"),Awe.forEach(t),nyo=i(L),L2=s(L,"LI",{});var Lwe=n(L2);Kte=s(Lwe,"STRONG",{});var FUr=n(Kte);lyo=r(FUr,"tapas"),FUr.forEach(t),iyo=r(Lwe," \u2014 "),oj=s(Lwe,"A",{href:!0});var CUr=n(oj);dyo=r(CUr,"TapasForSequenceClassification"),CUr.forEach(t),cyo=r(Lwe," (TAPAS model)"),Lwe.forEach(t),myo=i(L),B2=s(L,"LI",{});var Bwe=n(B2);Zte=s(Bwe,"STRONG",{});var MUr=n(Zte);fyo=r(MUr,"transfo-xl"),MUr.forEach(t),gyo=r(Bwe," \u2014 "),rj=s(Bwe,"A",{href:!0});var EUr=n(rj);hyo=r(EUr,"TransfoXLForSequenceClassification"),EUr.forEach(t),uyo=r(Bwe," (Transformer-XL model)"),Bwe.forEach(t),pyo=i(L),x2=s(L,"LI",{});var xwe=n(x2);eae=s(xwe,"STRONG",{});var yUr=n(eae);_yo=r(yUr,"xlm"),yUr.forEach(t),byo=r(xwe," \u2014 "),tj=s(xwe,"A",{href:!0});var wUr=n(tj);vyo=r(wUr,"XLMForSequenceClassification"),wUr.forEach(t),Tyo=r(xwe," (XLM model)"),xwe.forEach(t),Fyo=i(L),k2=s(L,"LI",{});var kwe=n(k2);oae=s(kwe,"STRONG",{});var AUr=n(oae);Cyo=r(AUr,"xlm-roberta"),AUr.forEach(t),Myo=r(kwe," \u2014 "),aj=s(kwe,"A",{href:!0});var LUr=n(aj);Eyo=r(LUr,"XLMRobertaForSequenceClassification"),LUr.forEach(t),yyo=r(kwe," (XLM-RoBERTa model)"),kwe.forEach(t),wyo=i(L),R2=s(L,"LI",{});var Rwe=n(R2);rae=s(Rwe,"STRONG",{});var BUr=n(rae);Ayo=r(BUr,"xlm-roberta-xl"),BUr.forEach(t),Lyo=r(Rwe," \u2014 "),sj=s(Rwe,"A",{href:!0});var xUr=n(sj);Byo=r(xUr,"XLMRobertaXLForSequenceClassification"),xUr.forEach(t),xyo=r(Rwe," (XLM-RoBERTa-XL model)"),Rwe.forEach(t),kyo=i(L),S2=s(L,"LI",{});var Swe=n(S2);tae=s(Swe,"STRONG",{});var kUr=n(tae);Ryo=r(kUr,"xlnet"),kUr.forEach(t),Syo=r(Swe," \u2014 "),nj=s(Swe,"A",{href:!0});var RUr=n(nj);Pyo=r(RUr,"XLNetForSequenceClassification"),RUr.forEach(t),$yo=r(Swe," (XLNet model)"),Swe.forEach(t),Iyo=i(L),P2=s(L,"LI",{});var Pwe=n(P2);aae=s(Pwe,"STRONG",{});var SUr=n(aae);jyo=r(SUr,"yoso"),SUr.forEach(t),Dyo=r(Pwe," \u2014 "),lj=s(Pwe,"A",{href:!0});var PUr=n(lj);Nyo=r(PUr,"YosoForSequenceClassification"),PUr.forEach(t),qyo=r(Pwe," (YOSO model)"),Pwe.forEach(t),L.forEach(t),Oyo=i(zt),$2=s(zt,"P",{});var $we=n($2);Gyo=r($we,"The model is set in evaluation mode by default using "),sae=s($we,"CODE",{});var $Ur=n(sae);Xyo=r($Ur,"model.eval()"),$Ur.forEach(t),Vyo=r($we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nae=s($we,"CODE",{});var IUr=n(nae);zyo=r(IUr,"model.train()"),IUr.forEach(t),$we.forEach(t),Wyo=i(zt),lae=s(zt,"P",{});var jUr=n(lae);Qyo=r(jUr,"Examples:"),jUr.forEach(t),Hyo=i(zt),f(hw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),kxe=i(d),ud=s(d,"H2",{class:!0});var qRe=n(ud);I2=s(qRe,"A",{id:!0,class:!0,href:!0});var DUr=n(I2);iae=s(DUr,"SPAN",{});var NUr=n(iae);f(uw.$$.fragment,NUr),NUr.forEach(t),DUr.forEach(t),Uyo=i(qRe),dae=s(qRe,"SPAN",{});var qUr=n(dae);Jyo=r(qUr,"AutoModelForMultipleChoice"),qUr.forEach(t),qRe.forEach(t),Rxe=i(d),rr=s(d,"DIV",{class:!0});var al=n(rr);f(pw.$$.fragment,al),Yyo=i(al),pd=s(al,"P",{});var jz=n(pd);Kyo=r(jz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cae=s(jz,"CODE",{});var OUr=n(cae);Zyo=r(OUr,"from_pretrained()"),OUr.forEach(t),ewo=r(jz,"class method or the "),mae=s(jz,"CODE",{});var GUr=n(mae);owo=r(GUr,"from_config()"),GUr.forEach(t),rwo=r(jz,`class
method.`),jz.forEach(t),two=i(al),_w=s(al,"P",{});var ORe=n(_w);awo=r(ORe,"This class cannot be instantiated directly using "),fae=s(ORe,"CODE",{});var XUr=n(fae);swo=r(XUr,"__init__()"),XUr.forEach(t),nwo=r(ORe," (throws an error)."),ORe.forEach(t),lwo=i(al),Jr=s(al,"DIV",{class:!0});var sl=n(Jr);f(bw.$$.fragment,sl),iwo=i(sl),gae=s(sl,"P",{});var VUr=n(gae);dwo=r(VUr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VUr.forEach(t),cwo=i(sl),_d=s(sl,"P",{});var Dz=n(_d);mwo=r(Dz,`Note:
Loading a model from its configuration file does `),hae=s(Dz,"STRONG",{});var zUr=n(hae);fwo=r(zUr,"not"),zUr.forEach(t),gwo=r(Dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),uae=s(Dz,"CODE",{});var WUr=n(uae);hwo=r(WUr,"from_pretrained()"),WUr.forEach(t),uwo=r(Dz,"to load the model weights."),Dz.forEach(t),pwo=i(sl),pae=s(sl,"P",{});var QUr=n(pae);_wo=r(QUr,"Examples:"),QUr.forEach(t),bwo=i(sl),f(vw.$$.fragment,sl),sl.forEach(t),vwo=i(al),Xe=s(al,"DIV",{class:!0});var Wt=n(Xe);f(Tw.$$.fragment,Wt),Two=i(Wt),_ae=s(Wt,"P",{});var HUr=n(_ae);Fwo=r(HUr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HUr.forEach(t),Cwo=i(Wt),Ja=s(Wt,"P",{});var t5=n(Ja);Mwo=r(t5,"The model class to instantiate is selected based on the "),bae=s(t5,"CODE",{});var UUr=n(bae);Ewo=r(UUr,"model_type"),UUr.forEach(t),ywo=r(t5,` property of the config object (either
passed as an argument or loaded from `),vae=s(t5,"CODE",{});var JUr=n(vae);wwo=r(JUr,"pretrained_model_name_or_path"),JUr.forEach(t),Awo=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tae=s(t5,"CODE",{});var YUr=n(Tae);Lwo=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),Bwo=r(t5,":"),t5.forEach(t),xwo=i(Wt),O=s(Wt,"UL",{});var G=n(O);j2=s(G,"LI",{});var Iwe=n(j2);Fae=s(Iwe,"STRONG",{});var KUr=n(Fae);kwo=r(KUr,"albert"),KUr.forEach(t),Rwo=r(Iwe," \u2014 "),ij=s(Iwe,"A",{href:!0});var ZUr=n(ij);Swo=r(ZUr,"AlbertForMultipleChoice"),ZUr.forEach(t),Pwo=r(Iwe," (ALBERT model)"),Iwe.forEach(t),$wo=i(G),D2=s(G,"LI",{});var jwe=n(D2);Cae=s(jwe,"STRONG",{});var eJr=n(Cae);Iwo=r(eJr,"bert"),eJr.forEach(t),jwo=r(jwe," \u2014 "),dj=s(jwe,"A",{href:!0});var oJr=n(dj);Dwo=r(oJr,"BertForMultipleChoice"),oJr.forEach(t),Nwo=r(jwe," (BERT model)"),jwe.forEach(t),qwo=i(G),N2=s(G,"LI",{});var Dwe=n(N2);Mae=s(Dwe,"STRONG",{});var rJr=n(Mae);Owo=r(rJr,"big_bird"),rJr.forEach(t),Gwo=r(Dwe," \u2014 "),cj=s(Dwe,"A",{href:!0});var tJr=n(cj);Xwo=r(tJr,"BigBirdForMultipleChoice"),tJr.forEach(t),Vwo=r(Dwe," (BigBird model)"),Dwe.forEach(t),zwo=i(G),q2=s(G,"LI",{});var Nwe=n(q2);Eae=s(Nwe,"STRONG",{});var aJr=n(Eae);Wwo=r(aJr,"camembert"),aJr.forEach(t),Qwo=r(Nwe," \u2014 "),mj=s(Nwe,"A",{href:!0});var sJr=n(mj);Hwo=r(sJr,"CamembertForMultipleChoice"),sJr.forEach(t),Uwo=r(Nwe," (CamemBERT model)"),Nwe.forEach(t),Jwo=i(G),O2=s(G,"LI",{});var qwe=n(O2);yae=s(qwe,"STRONG",{});var nJr=n(yae);Ywo=r(nJr,"canine"),nJr.forEach(t),Kwo=r(qwe," \u2014 "),fj=s(qwe,"A",{href:!0});var lJr=n(fj);Zwo=r(lJr,"CanineForMultipleChoice"),lJr.forEach(t),e6o=r(qwe," (Canine model)"),qwe.forEach(t),o6o=i(G),G2=s(G,"LI",{});var Owe=n(G2);wae=s(Owe,"STRONG",{});var iJr=n(wae);r6o=r(iJr,"convbert"),iJr.forEach(t),t6o=r(Owe," \u2014 "),gj=s(Owe,"A",{href:!0});var dJr=n(gj);a6o=r(dJr,"ConvBertForMultipleChoice"),dJr.forEach(t),s6o=r(Owe," (ConvBERT model)"),Owe.forEach(t),n6o=i(G),X2=s(G,"LI",{});var Gwe=n(X2);Aae=s(Gwe,"STRONG",{});var cJr=n(Aae);l6o=r(cJr,"data2vec-text"),cJr.forEach(t),i6o=r(Gwe," \u2014 "),hj=s(Gwe,"A",{href:!0});var mJr=n(hj);d6o=r(mJr,"Data2VecTextForMultipleChoice"),mJr.forEach(t),c6o=r(Gwe," (Data2VecText model)"),Gwe.forEach(t),m6o=i(G),V2=s(G,"LI",{});var Xwe=n(V2);Lae=s(Xwe,"STRONG",{});var fJr=n(Lae);f6o=r(fJr,"distilbert"),fJr.forEach(t),g6o=r(Xwe," \u2014 "),uj=s(Xwe,"A",{href:!0});var gJr=n(uj);h6o=r(gJr,"DistilBertForMultipleChoice"),gJr.forEach(t),u6o=r(Xwe," (DistilBERT model)"),Xwe.forEach(t),p6o=i(G),z2=s(G,"LI",{});var Vwe=n(z2);Bae=s(Vwe,"STRONG",{});var hJr=n(Bae);_6o=r(hJr,"electra"),hJr.forEach(t),b6o=r(Vwe," \u2014 "),pj=s(Vwe,"A",{href:!0});var uJr=n(pj);v6o=r(uJr,"ElectraForMultipleChoice"),uJr.forEach(t),T6o=r(Vwe," (ELECTRA model)"),Vwe.forEach(t),F6o=i(G),W2=s(G,"LI",{});var zwe=n(W2);xae=s(zwe,"STRONG",{});var pJr=n(xae);C6o=r(pJr,"flaubert"),pJr.forEach(t),M6o=r(zwe," \u2014 "),_j=s(zwe,"A",{href:!0});var _Jr=n(_j);E6o=r(_Jr,"FlaubertForMultipleChoice"),_Jr.forEach(t),y6o=r(zwe," (FlauBERT model)"),zwe.forEach(t),w6o=i(G),Q2=s(G,"LI",{});var Wwe=n(Q2);kae=s(Wwe,"STRONG",{});var bJr=n(kae);A6o=r(bJr,"fnet"),bJr.forEach(t),L6o=r(Wwe," \u2014 "),bj=s(Wwe,"A",{href:!0});var vJr=n(bj);B6o=r(vJr,"FNetForMultipleChoice"),vJr.forEach(t),x6o=r(Wwe," (FNet model)"),Wwe.forEach(t),k6o=i(G),H2=s(G,"LI",{});var Qwe=n(H2);Rae=s(Qwe,"STRONG",{});var TJr=n(Rae);R6o=r(TJr,"funnel"),TJr.forEach(t),S6o=r(Qwe," \u2014 "),vj=s(Qwe,"A",{href:!0});var FJr=n(vj);P6o=r(FJr,"FunnelForMultipleChoice"),FJr.forEach(t),$6o=r(Qwe," (Funnel Transformer model)"),Qwe.forEach(t),I6o=i(G),U2=s(G,"LI",{});var Hwe=n(U2);Sae=s(Hwe,"STRONG",{});var CJr=n(Sae);j6o=r(CJr,"ibert"),CJr.forEach(t),D6o=r(Hwe," \u2014 "),Tj=s(Hwe,"A",{href:!0});var MJr=n(Tj);N6o=r(MJr,"IBertForMultipleChoice"),MJr.forEach(t),q6o=r(Hwe," (I-BERT model)"),Hwe.forEach(t),O6o=i(G),J2=s(G,"LI",{});var Uwe=n(J2);Pae=s(Uwe,"STRONG",{});var EJr=n(Pae);G6o=r(EJr,"longformer"),EJr.forEach(t),X6o=r(Uwe," \u2014 "),Fj=s(Uwe,"A",{href:!0});var yJr=n(Fj);V6o=r(yJr,"LongformerForMultipleChoice"),yJr.forEach(t),z6o=r(Uwe," (Longformer model)"),Uwe.forEach(t),W6o=i(G),Y2=s(G,"LI",{});var Jwe=n(Y2);$ae=s(Jwe,"STRONG",{});var wJr=n($ae);Q6o=r(wJr,"megatron-bert"),wJr.forEach(t),H6o=r(Jwe," \u2014 "),Cj=s(Jwe,"A",{href:!0});var AJr=n(Cj);U6o=r(AJr,"MegatronBertForMultipleChoice"),AJr.forEach(t),J6o=r(Jwe," (MegatronBert model)"),Jwe.forEach(t),Y6o=i(G),K2=s(G,"LI",{});var Ywe=n(K2);Iae=s(Ywe,"STRONG",{});var LJr=n(Iae);K6o=r(LJr,"mobilebert"),LJr.forEach(t),Z6o=r(Ywe," \u2014 "),Mj=s(Ywe,"A",{href:!0});var BJr=n(Mj);eAo=r(BJr,"MobileBertForMultipleChoice"),BJr.forEach(t),oAo=r(Ywe," (MobileBERT model)"),Ywe.forEach(t),rAo=i(G),Z2=s(G,"LI",{});var Kwe=n(Z2);jae=s(Kwe,"STRONG",{});var xJr=n(jae);tAo=r(xJr,"mpnet"),xJr.forEach(t),aAo=r(Kwe," \u2014 "),Ej=s(Kwe,"A",{href:!0});var kJr=n(Ej);sAo=r(kJr,"MPNetForMultipleChoice"),kJr.forEach(t),nAo=r(Kwe," (MPNet model)"),Kwe.forEach(t),lAo=i(G),ev=s(G,"LI",{});var Zwe=n(ev);Dae=s(Zwe,"STRONG",{});var RJr=n(Dae);iAo=r(RJr,"nystromformer"),RJr.forEach(t),dAo=r(Zwe," \u2014 "),yj=s(Zwe,"A",{href:!0});var SJr=n(yj);cAo=r(SJr,"NystromformerForMultipleChoice"),SJr.forEach(t),mAo=r(Zwe," (Nystromformer model)"),Zwe.forEach(t),fAo=i(G),ov=s(G,"LI",{});var e6e=n(ov);Nae=s(e6e,"STRONG",{});var PJr=n(Nae);gAo=r(PJr,"qdqbert"),PJr.forEach(t),hAo=r(e6e," \u2014 "),wj=s(e6e,"A",{href:!0});var $Jr=n(wj);uAo=r($Jr,"QDQBertForMultipleChoice"),$Jr.forEach(t),pAo=r(e6e," (QDQBert model)"),e6e.forEach(t),_Ao=i(G),rv=s(G,"LI",{});var o6e=n(rv);qae=s(o6e,"STRONG",{});var IJr=n(qae);bAo=r(IJr,"rembert"),IJr.forEach(t),vAo=r(o6e," \u2014 "),Aj=s(o6e,"A",{href:!0});var jJr=n(Aj);TAo=r(jJr,"RemBertForMultipleChoice"),jJr.forEach(t),FAo=r(o6e," (RemBERT model)"),o6e.forEach(t),CAo=i(G),tv=s(G,"LI",{});var r6e=n(tv);Oae=s(r6e,"STRONG",{});var DJr=n(Oae);MAo=r(DJr,"roberta"),DJr.forEach(t),EAo=r(r6e," \u2014 "),Lj=s(r6e,"A",{href:!0});var NJr=n(Lj);yAo=r(NJr,"RobertaForMultipleChoice"),NJr.forEach(t),wAo=r(r6e," (RoBERTa model)"),r6e.forEach(t),AAo=i(G),av=s(G,"LI",{});var t6e=n(av);Gae=s(t6e,"STRONG",{});var qJr=n(Gae);LAo=r(qJr,"roformer"),qJr.forEach(t),BAo=r(t6e," \u2014 "),Bj=s(t6e,"A",{href:!0});var OJr=n(Bj);xAo=r(OJr,"RoFormerForMultipleChoice"),OJr.forEach(t),kAo=r(t6e," (RoFormer model)"),t6e.forEach(t),RAo=i(G),sv=s(G,"LI",{});var a6e=n(sv);Xae=s(a6e,"STRONG",{});var GJr=n(Xae);SAo=r(GJr,"squeezebert"),GJr.forEach(t),PAo=r(a6e," \u2014 "),xj=s(a6e,"A",{href:!0});var XJr=n(xj);$Ao=r(XJr,"SqueezeBertForMultipleChoice"),XJr.forEach(t),IAo=r(a6e," (SqueezeBERT model)"),a6e.forEach(t),jAo=i(G),nv=s(G,"LI",{});var s6e=n(nv);Vae=s(s6e,"STRONG",{});var VJr=n(Vae);DAo=r(VJr,"xlm"),VJr.forEach(t),NAo=r(s6e," \u2014 "),kj=s(s6e,"A",{href:!0});var zJr=n(kj);qAo=r(zJr,"XLMForMultipleChoice"),zJr.forEach(t),OAo=r(s6e," (XLM model)"),s6e.forEach(t),GAo=i(G),lv=s(G,"LI",{});var n6e=n(lv);zae=s(n6e,"STRONG",{});var WJr=n(zae);XAo=r(WJr,"xlm-roberta"),WJr.forEach(t),VAo=r(n6e," \u2014 "),Rj=s(n6e,"A",{href:!0});var QJr=n(Rj);zAo=r(QJr,"XLMRobertaForMultipleChoice"),QJr.forEach(t),WAo=r(n6e," (XLM-RoBERTa model)"),n6e.forEach(t),QAo=i(G),iv=s(G,"LI",{});var l6e=n(iv);Wae=s(l6e,"STRONG",{});var HJr=n(Wae);HAo=r(HJr,"xlm-roberta-xl"),HJr.forEach(t),UAo=r(l6e," \u2014 "),Sj=s(l6e,"A",{href:!0});var UJr=n(Sj);JAo=r(UJr,"XLMRobertaXLForMultipleChoice"),UJr.forEach(t),YAo=r(l6e," (XLM-RoBERTa-XL model)"),l6e.forEach(t),KAo=i(G),dv=s(G,"LI",{});var i6e=n(dv);Qae=s(i6e,"STRONG",{});var JJr=n(Qae);ZAo=r(JJr,"xlnet"),JJr.forEach(t),e0o=r(i6e," \u2014 "),Pj=s(i6e,"A",{href:!0});var YJr=n(Pj);o0o=r(YJr,"XLNetForMultipleChoice"),YJr.forEach(t),r0o=r(i6e," (XLNet model)"),i6e.forEach(t),t0o=i(G),cv=s(G,"LI",{});var d6e=n(cv);Hae=s(d6e,"STRONG",{});var KJr=n(Hae);a0o=r(KJr,"yoso"),KJr.forEach(t),s0o=r(d6e," \u2014 "),$j=s(d6e,"A",{href:!0});var ZJr=n($j);n0o=r(ZJr,"YosoForMultipleChoice"),ZJr.forEach(t),l0o=r(d6e," (YOSO model)"),d6e.forEach(t),G.forEach(t),i0o=i(Wt),mv=s(Wt,"P",{});var c6e=n(mv);d0o=r(c6e,"The model is set in evaluation mode by default using "),Uae=s(c6e,"CODE",{});var eYr=n(Uae);c0o=r(eYr,"model.eval()"),eYr.forEach(t),m0o=r(c6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jae=s(c6e,"CODE",{});var oYr=n(Jae);f0o=r(oYr,"model.train()"),oYr.forEach(t),c6e.forEach(t),g0o=i(Wt),Yae=s(Wt,"P",{});var rYr=n(Yae);h0o=r(rYr,"Examples:"),rYr.forEach(t),u0o=i(Wt),f(Fw.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Sxe=i(d),bd=s(d,"H2",{class:!0});var GRe=n(bd);fv=s(GRe,"A",{id:!0,class:!0,href:!0});var tYr=n(fv);Kae=s(tYr,"SPAN",{});var aYr=n(Kae);f(Cw.$$.fragment,aYr),aYr.forEach(t),tYr.forEach(t),p0o=i(GRe),Zae=s(GRe,"SPAN",{});var sYr=n(Zae);_0o=r(sYr,"AutoModelForNextSentencePrediction"),sYr.forEach(t),GRe.forEach(t),Pxe=i(d),tr=s(d,"DIV",{class:!0});var nl=n(tr);f(Mw.$$.fragment,nl),b0o=i(nl),vd=s(nl,"P",{});var Nz=n(vd);v0o=r(Nz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ese=s(Nz,"CODE",{});var nYr=n(ese);T0o=r(nYr,"from_pretrained()"),nYr.forEach(t),F0o=r(Nz,"class method or the "),ose=s(Nz,"CODE",{});var lYr=n(ose);C0o=r(lYr,"from_config()"),lYr.forEach(t),M0o=r(Nz,`class
method.`),Nz.forEach(t),E0o=i(nl),Ew=s(nl,"P",{});var XRe=n(Ew);y0o=r(XRe,"This class cannot be instantiated directly using "),rse=s(XRe,"CODE",{});var iYr=n(rse);w0o=r(iYr,"__init__()"),iYr.forEach(t),A0o=r(XRe," (throws an error)."),XRe.forEach(t),L0o=i(nl),Yr=s(nl,"DIV",{class:!0});var ll=n(Yr);f(yw.$$.fragment,ll),B0o=i(ll),tse=s(ll,"P",{});var dYr=n(tse);x0o=r(dYr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dYr.forEach(t),k0o=i(ll),Td=s(ll,"P",{});var qz=n(Td);R0o=r(qz,`Note:
Loading a model from its configuration file does `),ase=s(qz,"STRONG",{});var cYr=n(ase);S0o=r(cYr,"not"),cYr.forEach(t),P0o=r(qz,` load the model weights. It only affects the
model\u2019s configuration. Use `),sse=s(qz,"CODE",{});var mYr=n(sse);$0o=r(mYr,"from_pretrained()"),mYr.forEach(t),I0o=r(qz,"to load the model weights."),qz.forEach(t),j0o=i(ll),nse=s(ll,"P",{});var fYr=n(nse);D0o=r(fYr,"Examples:"),fYr.forEach(t),N0o=i(ll),f(ww.$$.fragment,ll),ll.forEach(t),q0o=i(nl),Ve=s(nl,"DIV",{class:!0});var Qt=n(Ve);f(Aw.$$.fragment,Qt),O0o=i(Qt),lse=s(Qt,"P",{});var gYr=n(lse);G0o=r(gYr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gYr.forEach(t),X0o=i(Qt),Ya=s(Qt,"P",{});var a5=n(Ya);V0o=r(a5,"The model class to instantiate is selected based on the "),ise=s(a5,"CODE",{});var hYr=n(ise);z0o=r(hYr,"model_type"),hYr.forEach(t),W0o=r(a5,` property of the config object (either
passed as an argument or loaded from `),dse=s(a5,"CODE",{});var uYr=n(dse);Q0o=r(uYr,"pretrained_model_name_or_path"),uYr.forEach(t),H0o=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cse=s(a5,"CODE",{});var pYr=n(cse);U0o=r(pYr,"pretrained_model_name_or_path"),pYr.forEach(t),J0o=r(a5,":"),a5.forEach(t),Y0o=i(Qt),da=s(Qt,"UL",{});var il=n(da);gv=s(il,"LI",{});var m6e=n(gv);mse=s(m6e,"STRONG",{});var _Yr=n(mse);K0o=r(_Yr,"bert"),_Yr.forEach(t),Z0o=r(m6e," \u2014 "),Ij=s(m6e,"A",{href:!0});var bYr=n(Ij);eLo=r(bYr,"BertForNextSentencePrediction"),bYr.forEach(t),oLo=r(m6e," (BERT model)"),m6e.forEach(t),rLo=i(il),hv=s(il,"LI",{});var f6e=n(hv);fse=s(f6e,"STRONG",{});var vYr=n(fse);tLo=r(vYr,"fnet"),vYr.forEach(t),aLo=r(f6e," \u2014 "),jj=s(f6e,"A",{href:!0});var TYr=n(jj);sLo=r(TYr,"FNetForNextSentencePrediction"),TYr.forEach(t),nLo=r(f6e," (FNet model)"),f6e.forEach(t),lLo=i(il),uv=s(il,"LI",{});var g6e=n(uv);gse=s(g6e,"STRONG",{});var FYr=n(gse);iLo=r(FYr,"megatron-bert"),FYr.forEach(t),dLo=r(g6e," \u2014 "),Dj=s(g6e,"A",{href:!0});var CYr=n(Dj);cLo=r(CYr,"MegatronBertForNextSentencePrediction"),CYr.forEach(t),mLo=r(g6e," (MegatronBert model)"),g6e.forEach(t),fLo=i(il),pv=s(il,"LI",{});var h6e=n(pv);hse=s(h6e,"STRONG",{});var MYr=n(hse);gLo=r(MYr,"mobilebert"),MYr.forEach(t),hLo=r(h6e," \u2014 "),Nj=s(h6e,"A",{href:!0});var EYr=n(Nj);uLo=r(EYr,"MobileBertForNextSentencePrediction"),EYr.forEach(t),pLo=r(h6e," (MobileBERT model)"),h6e.forEach(t),_Lo=i(il),_v=s(il,"LI",{});var u6e=n(_v);use=s(u6e,"STRONG",{});var yYr=n(use);bLo=r(yYr,"qdqbert"),yYr.forEach(t),vLo=r(u6e," \u2014 "),qj=s(u6e,"A",{href:!0});var wYr=n(qj);TLo=r(wYr,"QDQBertForNextSentencePrediction"),wYr.forEach(t),FLo=r(u6e," (QDQBert model)"),u6e.forEach(t),il.forEach(t),CLo=i(Qt),bv=s(Qt,"P",{});var p6e=n(bv);MLo=r(p6e,"The model is set in evaluation mode by default using "),pse=s(p6e,"CODE",{});var AYr=n(pse);ELo=r(AYr,"model.eval()"),AYr.forEach(t),yLo=r(p6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=s(p6e,"CODE",{});var LYr=n(_se);wLo=r(LYr,"model.train()"),LYr.forEach(t),p6e.forEach(t),ALo=i(Qt),bse=s(Qt,"P",{});var BYr=n(bse);LLo=r(BYr,"Examples:"),BYr.forEach(t),BLo=i(Qt),f(Lw.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),$xe=i(d),Fd=s(d,"H2",{class:!0});var VRe=n(Fd);vv=s(VRe,"A",{id:!0,class:!0,href:!0});var xYr=n(vv);vse=s(xYr,"SPAN",{});var kYr=n(vse);f(Bw.$$.fragment,kYr),kYr.forEach(t),xYr.forEach(t),xLo=i(VRe),Tse=s(VRe,"SPAN",{});var RYr=n(Tse);kLo=r(RYr,"AutoModelForTokenClassification"),RYr.forEach(t),VRe.forEach(t),Ixe=i(d),ar=s(d,"DIV",{class:!0});var dl=n(ar);f(xw.$$.fragment,dl),RLo=i(dl),Cd=s(dl,"P",{});var Oz=n(Cd);SLo=r(Oz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fse=s(Oz,"CODE",{});var SYr=n(Fse);PLo=r(SYr,"from_pretrained()"),SYr.forEach(t),$Lo=r(Oz,"class method or the "),Cse=s(Oz,"CODE",{});var PYr=n(Cse);ILo=r(PYr,"from_config()"),PYr.forEach(t),jLo=r(Oz,`class
method.`),Oz.forEach(t),DLo=i(dl),kw=s(dl,"P",{});var zRe=n(kw);NLo=r(zRe,"This class cannot be instantiated directly using "),Mse=s(zRe,"CODE",{});var $Yr=n(Mse);qLo=r($Yr,"__init__()"),$Yr.forEach(t),OLo=r(zRe," (throws an error)."),zRe.forEach(t),GLo=i(dl),Kr=s(dl,"DIV",{class:!0});var cl=n(Kr);f(Rw.$$.fragment,cl),XLo=i(cl),Ese=s(cl,"P",{});var IYr=n(Ese);VLo=r(IYr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IYr.forEach(t),zLo=i(cl),Md=s(cl,"P",{});var Gz=n(Md);WLo=r(Gz,`Note:
Loading a model from its configuration file does `),yse=s(Gz,"STRONG",{});var jYr=n(yse);QLo=r(jYr,"not"),jYr.forEach(t),HLo=r(Gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),wse=s(Gz,"CODE",{});var DYr=n(wse);ULo=r(DYr,"from_pretrained()"),DYr.forEach(t),JLo=r(Gz,"to load the model weights."),Gz.forEach(t),YLo=i(cl),Ase=s(cl,"P",{});var NYr=n(Ase);KLo=r(NYr,"Examples:"),NYr.forEach(t),ZLo=i(cl),f(Sw.$$.fragment,cl),cl.forEach(t),e8o=i(dl),ze=s(dl,"DIV",{class:!0});var Ht=n(ze);f(Pw.$$.fragment,Ht),o8o=i(Ht),Lse=s(Ht,"P",{});var qYr=n(Lse);r8o=r(qYr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qYr.forEach(t),t8o=i(Ht),Ka=s(Ht,"P",{});var s5=n(Ka);a8o=r(s5,"The model class to instantiate is selected based on the "),Bse=s(s5,"CODE",{});var OYr=n(Bse);s8o=r(OYr,"model_type"),OYr.forEach(t),n8o=r(s5,` property of the config object (either
passed as an argument or loaded from `),xse=s(s5,"CODE",{});var GYr=n(xse);l8o=r(GYr,"pretrained_model_name_or_path"),GYr.forEach(t),i8o=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kse=s(s5,"CODE",{});var XYr=n(kse);d8o=r(XYr,"pretrained_model_name_or_path"),XYr.forEach(t),c8o=r(s5,":"),s5.forEach(t),m8o=i(Ht),N=s(Ht,"UL",{});var q=n(N);Tv=s(q,"LI",{});var _6e=n(Tv);Rse=s(_6e,"STRONG",{});var VYr=n(Rse);f8o=r(VYr,"albert"),VYr.forEach(t),g8o=r(_6e," \u2014 "),Oj=s(_6e,"A",{href:!0});var zYr=n(Oj);h8o=r(zYr,"AlbertForTokenClassification"),zYr.forEach(t),u8o=r(_6e," (ALBERT model)"),_6e.forEach(t),p8o=i(q),Fv=s(q,"LI",{});var b6e=n(Fv);Sse=s(b6e,"STRONG",{});var WYr=n(Sse);_8o=r(WYr,"bert"),WYr.forEach(t),b8o=r(b6e," \u2014 "),Gj=s(b6e,"A",{href:!0});var QYr=n(Gj);v8o=r(QYr,"BertForTokenClassification"),QYr.forEach(t),T8o=r(b6e," (BERT model)"),b6e.forEach(t),F8o=i(q),Cv=s(q,"LI",{});var v6e=n(Cv);Pse=s(v6e,"STRONG",{});var HYr=n(Pse);C8o=r(HYr,"big_bird"),HYr.forEach(t),M8o=r(v6e," \u2014 "),Xj=s(v6e,"A",{href:!0});var UYr=n(Xj);E8o=r(UYr,"BigBirdForTokenClassification"),UYr.forEach(t),y8o=r(v6e," (BigBird model)"),v6e.forEach(t),w8o=i(q),Mv=s(q,"LI",{});var T6e=n(Mv);$se=s(T6e,"STRONG",{});var JYr=n($se);A8o=r(JYr,"camembert"),JYr.forEach(t),L8o=r(T6e," \u2014 "),Vj=s(T6e,"A",{href:!0});var YYr=n(Vj);B8o=r(YYr,"CamembertForTokenClassification"),YYr.forEach(t),x8o=r(T6e," (CamemBERT model)"),T6e.forEach(t),k8o=i(q),Ev=s(q,"LI",{});var F6e=n(Ev);Ise=s(F6e,"STRONG",{});var KYr=n(Ise);R8o=r(KYr,"canine"),KYr.forEach(t),S8o=r(F6e," \u2014 "),zj=s(F6e,"A",{href:!0});var ZYr=n(zj);P8o=r(ZYr,"CanineForTokenClassification"),ZYr.forEach(t),$8o=r(F6e," (Canine model)"),F6e.forEach(t),I8o=i(q),yv=s(q,"LI",{});var C6e=n(yv);jse=s(C6e,"STRONG",{});var eKr=n(jse);j8o=r(eKr,"convbert"),eKr.forEach(t),D8o=r(C6e," \u2014 "),Wj=s(C6e,"A",{href:!0});var oKr=n(Wj);N8o=r(oKr,"ConvBertForTokenClassification"),oKr.forEach(t),q8o=r(C6e," (ConvBERT model)"),C6e.forEach(t),O8o=i(q),wv=s(q,"LI",{});var M6e=n(wv);Dse=s(M6e,"STRONG",{});var rKr=n(Dse);G8o=r(rKr,"data2vec-text"),rKr.forEach(t),X8o=r(M6e," \u2014 "),Qj=s(M6e,"A",{href:!0});var tKr=n(Qj);V8o=r(tKr,"Data2VecTextForTokenClassification"),tKr.forEach(t),z8o=r(M6e," (Data2VecText model)"),M6e.forEach(t),W8o=i(q),Av=s(q,"LI",{});var E6e=n(Av);Nse=s(E6e,"STRONG",{});var aKr=n(Nse);Q8o=r(aKr,"deberta"),aKr.forEach(t),H8o=r(E6e," \u2014 "),Hj=s(E6e,"A",{href:!0});var sKr=n(Hj);U8o=r(sKr,"DebertaForTokenClassification"),sKr.forEach(t),J8o=r(E6e," (DeBERTa model)"),E6e.forEach(t),Y8o=i(q),Lv=s(q,"LI",{});var y6e=n(Lv);qse=s(y6e,"STRONG",{});var nKr=n(qse);K8o=r(nKr,"deberta-v2"),nKr.forEach(t),Z8o=r(y6e," \u2014 "),Uj=s(y6e,"A",{href:!0});var lKr=n(Uj);e7o=r(lKr,"DebertaV2ForTokenClassification"),lKr.forEach(t),o7o=r(y6e," (DeBERTa-v2 model)"),y6e.forEach(t),r7o=i(q),Bv=s(q,"LI",{});var w6e=n(Bv);Ose=s(w6e,"STRONG",{});var iKr=n(Ose);t7o=r(iKr,"distilbert"),iKr.forEach(t),a7o=r(w6e," \u2014 "),Jj=s(w6e,"A",{href:!0});var dKr=n(Jj);s7o=r(dKr,"DistilBertForTokenClassification"),dKr.forEach(t),n7o=r(w6e," (DistilBERT model)"),w6e.forEach(t),l7o=i(q),xv=s(q,"LI",{});var A6e=n(xv);Gse=s(A6e,"STRONG",{});var cKr=n(Gse);i7o=r(cKr,"electra"),cKr.forEach(t),d7o=r(A6e," \u2014 "),Yj=s(A6e,"A",{href:!0});var mKr=n(Yj);c7o=r(mKr,"ElectraForTokenClassification"),mKr.forEach(t),m7o=r(A6e," (ELECTRA model)"),A6e.forEach(t),f7o=i(q),kv=s(q,"LI",{});var L6e=n(kv);Xse=s(L6e,"STRONG",{});var fKr=n(Xse);g7o=r(fKr,"flaubert"),fKr.forEach(t),h7o=r(L6e," \u2014 "),Kj=s(L6e,"A",{href:!0});var gKr=n(Kj);u7o=r(gKr,"FlaubertForTokenClassification"),gKr.forEach(t),p7o=r(L6e," (FlauBERT model)"),L6e.forEach(t),_7o=i(q),Rv=s(q,"LI",{});var B6e=n(Rv);Vse=s(B6e,"STRONG",{});var hKr=n(Vse);b7o=r(hKr,"fnet"),hKr.forEach(t),v7o=r(B6e," \u2014 "),Zj=s(B6e,"A",{href:!0});var uKr=n(Zj);T7o=r(uKr,"FNetForTokenClassification"),uKr.forEach(t),F7o=r(B6e," (FNet model)"),B6e.forEach(t),C7o=i(q),Sv=s(q,"LI",{});var x6e=n(Sv);zse=s(x6e,"STRONG",{});var pKr=n(zse);M7o=r(pKr,"funnel"),pKr.forEach(t),E7o=r(x6e," \u2014 "),eD=s(x6e,"A",{href:!0});var _Kr=n(eD);y7o=r(_Kr,"FunnelForTokenClassification"),_Kr.forEach(t),w7o=r(x6e," (Funnel Transformer model)"),x6e.forEach(t),A7o=i(q),Pv=s(q,"LI",{});var k6e=n(Pv);Wse=s(k6e,"STRONG",{});var bKr=n(Wse);L7o=r(bKr,"gpt2"),bKr.forEach(t),B7o=r(k6e," \u2014 "),oD=s(k6e,"A",{href:!0});var vKr=n(oD);x7o=r(vKr,"GPT2ForTokenClassification"),vKr.forEach(t),k7o=r(k6e," (OpenAI GPT-2 model)"),k6e.forEach(t),R7o=i(q),$v=s(q,"LI",{});var R6e=n($v);Qse=s(R6e,"STRONG",{});var TKr=n(Qse);S7o=r(TKr,"ibert"),TKr.forEach(t),P7o=r(R6e," \u2014 "),rD=s(R6e,"A",{href:!0});var FKr=n(rD);$7o=r(FKr,"IBertForTokenClassification"),FKr.forEach(t),I7o=r(R6e," (I-BERT model)"),R6e.forEach(t),j7o=i(q),Iv=s(q,"LI",{});var S6e=n(Iv);Hse=s(S6e,"STRONG",{});var CKr=n(Hse);D7o=r(CKr,"layoutlm"),CKr.forEach(t),N7o=r(S6e," \u2014 "),tD=s(S6e,"A",{href:!0});var MKr=n(tD);q7o=r(MKr,"LayoutLMForTokenClassification"),MKr.forEach(t),O7o=r(S6e," (LayoutLM model)"),S6e.forEach(t),G7o=i(q),jv=s(q,"LI",{});var P6e=n(jv);Use=s(P6e,"STRONG",{});var EKr=n(Use);X7o=r(EKr,"layoutlmv2"),EKr.forEach(t),V7o=r(P6e," \u2014 "),aD=s(P6e,"A",{href:!0});var yKr=n(aD);z7o=r(yKr,"LayoutLMv2ForTokenClassification"),yKr.forEach(t),W7o=r(P6e," (LayoutLMv2 model)"),P6e.forEach(t),Q7o=i(q),Dv=s(q,"LI",{});var $6e=n(Dv);Jse=s($6e,"STRONG",{});var wKr=n(Jse);H7o=r(wKr,"longformer"),wKr.forEach(t),U7o=r($6e," \u2014 "),sD=s($6e,"A",{href:!0});var AKr=n(sD);J7o=r(AKr,"LongformerForTokenClassification"),AKr.forEach(t),Y7o=r($6e," (Longformer model)"),$6e.forEach(t),K7o=i(q),Nv=s(q,"LI",{});var I6e=n(Nv);Yse=s(I6e,"STRONG",{});var LKr=n(Yse);Z7o=r(LKr,"megatron-bert"),LKr.forEach(t),e9o=r(I6e," \u2014 "),nD=s(I6e,"A",{href:!0});var BKr=n(nD);o9o=r(BKr,"MegatronBertForTokenClassification"),BKr.forEach(t),r9o=r(I6e," (MegatronBert model)"),I6e.forEach(t),t9o=i(q),qv=s(q,"LI",{});var j6e=n(qv);Kse=s(j6e,"STRONG",{});var xKr=n(Kse);a9o=r(xKr,"mobilebert"),xKr.forEach(t),s9o=r(j6e," \u2014 "),lD=s(j6e,"A",{href:!0});var kKr=n(lD);n9o=r(kKr,"MobileBertForTokenClassification"),kKr.forEach(t),l9o=r(j6e," (MobileBERT model)"),j6e.forEach(t),i9o=i(q),Ov=s(q,"LI",{});var D6e=n(Ov);Zse=s(D6e,"STRONG",{});var RKr=n(Zse);d9o=r(RKr,"mpnet"),RKr.forEach(t),c9o=r(D6e," \u2014 "),iD=s(D6e,"A",{href:!0});var SKr=n(iD);m9o=r(SKr,"MPNetForTokenClassification"),SKr.forEach(t),f9o=r(D6e," (MPNet model)"),D6e.forEach(t),g9o=i(q),Gv=s(q,"LI",{});var N6e=n(Gv);ene=s(N6e,"STRONG",{});var PKr=n(ene);h9o=r(PKr,"nystromformer"),PKr.forEach(t),u9o=r(N6e," \u2014 "),dD=s(N6e,"A",{href:!0});var $Kr=n(dD);p9o=r($Kr,"NystromformerForTokenClassification"),$Kr.forEach(t),_9o=r(N6e," (Nystromformer model)"),N6e.forEach(t),b9o=i(q),Xv=s(q,"LI",{});var q6e=n(Xv);one=s(q6e,"STRONG",{});var IKr=n(one);v9o=r(IKr,"qdqbert"),IKr.forEach(t),T9o=r(q6e," \u2014 "),cD=s(q6e,"A",{href:!0});var jKr=n(cD);F9o=r(jKr,"QDQBertForTokenClassification"),jKr.forEach(t),C9o=r(q6e," (QDQBert model)"),q6e.forEach(t),M9o=i(q),Vv=s(q,"LI",{});var O6e=n(Vv);rne=s(O6e,"STRONG",{});var DKr=n(rne);E9o=r(DKr,"rembert"),DKr.forEach(t),y9o=r(O6e," \u2014 "),mD=s(O6e,"A",{href:!0});var NKr=n(mD);w9o=r(NKr,"RemBertForTokenClassification"),NKr.forEach(t),A9o=r(O6e," (RemBERT model)"),O6e.forEach(t),L9o=i(q),zv=s(q,"LI",{});var G6e=n(zv);tne=s(G6e,"STRONG",{});var qKr=n(tne);B9o=r(qKr,"roberta"),qKr.forEach(t),x9o=r(G6e," \u2014 "),fD=s(G6e,"A",{href:!0});var OKr=n(fD);k9o=r(OKr,"RobertaForTokenClassification"),OKr.forEach(t),R9o=r(G6e," (RoBERTa model)"),G6e.forEach(t),S9o=i(q),Wv=s(q,"LI",{});var X6e=n(Wv);ane=s(X6e,"STRONG",{});var GKr=n(ane);P9o=r(GKr,"roformer"),GKr.forEach(t),$9o=r(X6e," \u2014 "),gD=s(X6e,"A",{href:!0});var XKr=n(gD);I9o=r(XKr,"RoFormerForTokenClassification"),XKr.forEach(t),j9o=r(X6e," (RoFormer model)"),X6e.forEach(t),D9o=i(q),Qv=s(q,"LI",{});var V6e=n(Qv);sne=s(V6e,"STRONG",{});var VKr=n(sne);N9o=r(VKr,"squeezebert"),VKr.forEach(t),q9o=r(V6e," \u2014 "),hD=s(V6e,"A",{href:!0});var zKr=n(hD);O9o=r(zKr,"SqueezeBertForTokenClassification"),zKr.forEach(t),G9o=r(V6e," (SqueezeBERT model)"),V6e.forEach(t),X9o=i(q),Hv=s(q,"LI",{});var z6e=n(Hv);nne=s(z6e,"STRONG",{});var WKr=n(nne);V9o=r(WKr,"xlm"),WKr.forEach(t),z9o=r(z6e," \u2014 "),uD=s(z6e,"A",{href:!0});var QKr=n(uD);W9o=r(QKr,"XLMForTokenClassification"),QKr.forEach(t),Q9o=r(z6e," (XLM model)"),z6e.forEach(t),H9o=i(q),Uv=s(q,"LI",{});var W6e=n(Uv);lne=s(W6e,"STRONG",{});var HKr=n(lne);U9o=r(HKr,"xlm-roberta"),HKr.forEach(t),J9o=r(W6e," \u2014 "),pD=s(W6e,"A",{href:!0});var UKr=n(pD);Y9o=r(UKr,"XLMRobertaForTokenClassification"),UKr.forEach(t),K9o=r(W6e," (XLM-RoBERTa model)"),W6e.forEach(t),Z9o=i(q),Jv=s(q,"LI",{});var Q6e=n(Jv);ine=s(Q6e,"STRONG",{});var JKr=n(ine);eBo=r(JKr,"xlm-roberta-xl"),JKr.forEach(t),oBo=r(Q6e," \u2014 "),_D=s(Q6e,"A",{href:!0});var YKr=n(_D);rBo=r(YKr,"XLMRobertaXLForTokenClassification"),YKr.forEach(t),tBo=r(Q6e," (XLM-RoBERTa-XL model)"),Q6e.forEach(t),aBo=i(q),Yv=s(q,"LI",{});var H6e=n(Yv);dne=s(H6e,"STRONG",{});var KKr=n(dne);sBo=r(KKr,"xlnet"),KKr.forEach(t),nBo=r(H6e," \u2014 "),bD=s(H6e,"A",{href:!0});var ZKr=n(bD);lBo=r(ZKr,"XLNetForTokenClassification"),ZKr.forEach(t),iBo=r(H6e," (XLNet model)"),H6e.forEach(t),dBo=i(q),Kv=s(q,"LI",{});var U6e=n(Kv);cne=s(U6e,"STRONG",{});var eZr=n(cne);cBo=r(eZr,"yoso"),eZr.forEach(t),mBo=r(U6e," \u2014 "),vD=s(U6e,"A",{href:!0});var oZr=n(vD);fBo=r(oZr,"YosoForTokenClassification"),oZr.forEach(t),gBo=r(U6e," (YOSO model)"),U6e.forEach(t),q.forEach(t),hBo=i(Ht),Zv=s(Ht,"P",{});var J6e=n(Zv);uBo=r(J6e,"The model is set in evaluation mode by default using "),mne=s(J6e,"CODE",{});var rZr=n(mne);pBo=r(rZr,"model.eval()"),rZr.forEach(t),_Bo=r(J6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fne=s(J6e,"CODE",{});var tZr=n(fne);bBo=r(tZr,"model.train()"),tZr.forEach(t),J6e.forEach(t),vBo=i(Ht),gne=s(Ht,"P",{});var aZr=n(gne);TBo=r(aZr,"Examples:"),aZr.forEach(t),FBo=i(Ht),f($w.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),jxe=i(d),Ed=s(d,"H2",{class:!0});var WRe=n(Ed);eT=s(WRe,"A",{id:!0,class:!0,href:!0});var sZr=n(eT);hne=s(sZr,"SPAN",{});var nZr=n(hne);f(Iw.$$.fragment,nZr),nZr.forEach(t),sZr.forEach(t),CBo=i(WRe),une=s(WRe,"SPAN",{});var lZr=n(une);MBo=r(lZr,"AutoModelForQuestionAnswering"),lZr.forEach(t),WRe.forEach(t),Dxe=i(d),sr=s(d,"DIV",{class:!0});var ml=n(sr);f(jw.$$.fragment,ml),EBo=i(ml),yd=s(ml,"P",{});var Xz=n(yd);yBo=r(Xz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pne=s(Xz,"CODE",{});var iZr=n(pne);wBo=r(iZr,"from_pretrained()"),iZr.forEach(t),ABo=r(Xz,"class method or the "),_ne=s(Xz,"CODE",{});var dZr=n(_ne);LBo=r(dZr,"from_config()"),dZr.forEach(t),BBo=r(Xz,`class
method.`),Xz.forEach(t),xBo=i(ml),Dw=s(ml,"P",{});var QRe=n(Dw);kBo=r(QRe,"This class cannot be instantiated directly using "),bne=s(QRe,"CODE",{});var cZr=n(bne);RBo=r(cZr,"__init__()"),cZr.forEach(t),SBo=r(QRe," (throws an error)."),QRe.forEach(t),PBo=i(ml),Zr=s(ml,"DIV",{class:!0});var fl=n(Zr);f(Nw.$$.fragment,fl),$Bo=i(fl),vne=s(fl,"P",{});var mZr=n(vne);IBo=r(mZr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mZr.forEach(t),jBo=i(fl),wd=s(fl,"P",{});var Vz=n(wd);DBo=r(Vz,`Note:
Loading a model from its configuration file does `),Tne=s(Vz,"STRONG",{});var fZr=n(Tne);NBo=r(fZr,"not"),fZr.forEach(t),qBo=r(Vz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fne=s(Vz,"CODE",{});var gZr=n(Fne);OBo=r(gZr,"from_pretrained()"),gZr.forEach(t),GBo=r(Vz,"to load the model weights."),Vz.forEach(t),XBo=i(fl),Cne=s(fl,"P",{});var hZr=n(Cne);VBo=r(hZr,"Examples:"),hZr.forEach(t),zBo=i(fl),f(qw.$$.fragment,fl),fl.forEach(t),WBo=i(ml),We=s(ml,"DIV",{class:!0});var Ut=n(We);f(Ow.$$.fragment,Ut),QBo=i(Ut),Mne=s(Ut,"P",{});var uZr=n(Mne);HBo=r(uZr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uZr.forEach(t),UBo=i(Ut),Za=s(Ut,"P",{});var n5=n(Za);JBo=r(n5,"The model class to instantiate is selected based on the "),Ene=s(n5,"CODE",{});var pZr=n(Ene);YBo=r(pZr,"model_type"),pZr.forEach(t),KBo=r(n5,` property of the config object (either
passed as an argument or loaded from `),yne=s(n5,"CODE",{});var _Zr=n(yne);ZBo=r(_Zr,"pretrained_model_name_or_path"),_Zr.forEach(t),exo=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wne=s(n5,"CODE",{});var bZr=n(wne);oxo=r(bZr,"pretrained_model_name_or_path"),bZr.forEach(t),rxo=r(n5,":"),n5.forEach(t),txo=i(Ut),R=s(Ut,"UL",{});var P=n(R);oT=s(P,"LI",{});var Y6e=n(oT);Ane=s(Y6e,"STRONG",{});var vZr=n(Ane);axo=r(vZr,"albert"),vZr.forEach(t),sxo=r(Y6e," \u2014 "),TD=s(Y6e,"A",{href:!0});var TZr=n(TD);nxo=r(TZr,"AlbertForQuestionAnswering"),TZr.forEach(t),lxo=r(Y6e," (ALBERT model)"),Y6e.forEach(t),ixo=i(P),rT=s(P,"LI",{});var K6e=n(rT);Lne=s(K6e,"STRONG",{});var FZr=n(Lne);dxo=r(FZr,"bart"),FZr.forEach(t),cxo=r(K6e," \u2014 "),FD=s(K6e,"A",{href:!0});var CZr=n(FD);mxo=r(CZr,"BartForQuestionAnswering"),CZr.forEach(t),fxo=r(K6e," (BART model)"),K6e.forEach(t),gxo=i(P),tT=s(P,"LI",{});var Z6e=n(tT);Bne=s(Z6e,"STRONG",{});var MZr=n(Bne);hxo=r(MZr,"bert"),MZr.forEach(t),uxo=r(Z6e," \u2014 "),CD=s(Z6e,"A",{href:!0});var EZr=n(CD);pxo=r(EZr,"BertForQuestionAnswering"),EZr.forEach(t),_xo=r(Z6e," (BERT model)"),Z6e.forEach(t),bxo=i(P),aT=s(P,"LI",{});var eAe=n(aT);xne=s(eAe,"STRONG",{});var yZr=n(xne);vxo=r(yZr,"big_bird"),yZr.forEach(t),Txo=r(eAe," \u2014 "),MD=s(eAe,"A",{href:!0});var wZr=n(MD);Fxo=r(wZr,"BigBirdForQuestionAnswering"),wZr.forEach(t),Cxo=r(eAe," (BigBird model)"),eAe.forEach(t),Mxo=i(P),sT=s(P,"LI",{});var oAe=n(sT);kne=s(oAe,"STRONG",{});var AZr=n(kne);Exo=r(AZr,"bigbird_pegasus"),AZr.forEach(t),yxo=r(oAe," \u2014 "),ED=s(oAe,"A",{href:!0});var LZr=n(ED);wxo=r(LZr,"BigBirdPegasusForQuestionAnswering"),LZr.forEach(t),Axo=r(oAe," (BigBirdPegasus model)"),oAe.forEach(t),Lxo=i(P),nT=s(P,"LI",{});var rAe=n(nT);Rne=s(rAe,"STRONG",{});var BZr=n(Rne);Bxo=r(BZr,"camembert"),BZr.forEach(t),xxo=r(rAe," \u2014 "),yD=s(rAe,"A",{href:!0});var xZr=n(yD);kxo=r(xZr,"CamembertForQuestionAnswering"),xZr.forEach(t),Rxo=r(rAe," (CamemBERT model)"),rAe.forEach(t),Sxo=i(P),lT=s(P,"LI",{});var tAe=n(lT);Sne=s(tAe,"STRONG",{});var kZr=n(Sne);Pxo=r(kZr,"canine"),kZr.forEach(t),$xo=r(tAe," \u2014 "),wD=s(tAe,"A",{href:!0});var RZr=n(wD);Ixo=r(RZr,"CanineForQuestionAnswering"),RZr.forEach(t),jxo=r(tAe," (Canine model)"),tAe.forEach(t),Dxo=i(P),iT=s(P,"LI",{});var aAe=n(iT);Pne=s(aAe,"STRONG",{});var SZr=n(Pne);Nxo=r(SZr,"convbert"),SZr.forEach(t),qxo=r(aAe," \u2014 "),AD=s(aAe,"A",{href:!0});var PZr=n(AD);Oxo=r(PZr,"ConvBertForQuestionAnswering"),PZr.forEach(t),Gxo=r(aAe," (ConvBERT model)"),aAe.forEach(t),Xxo=i(P),dT=s(P,"LI",{});var sAe=n(dT);$ne=s(sAe,"STRONG",{});var $Zr=n($ne);Vxo=r($Zr,"data2vec-text"),$Zr.forEach(t),zxo=r(sAe," \u2014 "),LD=s(sAe,"A",{href:!0});var IZr=n(LD);Wxo=r(IZr,"Data2VecTextForQuestionAnswering"),IZr.forEach(t),Qxo=r(sAe," (Data2VecText model)"),sAe.forEach(t),Hxo=i(P),cT=s(P,"LI",{});var nAe=n(cT);Ine=s(nAe,"STRONG",{});var jZr=n(Ine);Uxo=r(jZr,"deberta"),jZr.forEach(t),Jxo=r(nAe," \u2014 "),BD=s(nAe,"A",{href:!0});var DZr=n(BD);Yxo=r(DZr,"DebertaForQuestionAnswering"),DZr.forEach(t),Kxo=r(nAe," (DeBERTa model)"),nAe.forEach(t),Zxo=i(P),mT=s(P,"LI",{});var lAe=n(mT);jne=s(lAe,"STRONG",{});var NZr=n(jne);eko=r(NZr,"deberta-v2"),NZr.forEach(t),oko=r(lAe," \u2014 "),xD=s(lAe,"A",{href:!0});var qZr=n(xD);rko=r(qZr,"DebertaV2ForQuestionAnswering"),qZr.forEach(t),tko=r(lAe," (DeBERTa-v2 model)"),lAe.forEach(t),ako=i(P),fT=s(P,"LI",{});var iAe=n(fT);Dne=s(iAe,"STRONG",{});var OZr=n(Dne);sko=r(OZr,"distilbert"),OZr.forEach(t),nko=r(iAe," \u2014 "),kD=s(iAe,"A",{href:!0});var GZr=n(kD);lko=r(GZr,"DistilBertForQuestionAnswering"),GZr.forEach(t),iko=r(iAe," (DistilBERT model)"),iAe.forEach(t),dko=i(P),gT=s(P,"LI",{});var dAe=n(gT);Nne=s(dAe,"STRONG",{});var XZr=n(Nne);cko=r(XZr,"electra"),XZr.forEach(t),mko=r(dAe," \u2014 "),RD=s(dAe,"A",{href:!0});var VZr=n(RD);fko=r(VZr,"ElectraForQuestionAnswering"),VZr.forEach(t),gko=r(dAe," (ELECTRA model)"),dAe.forEach(t),hko=i(P),hT=s(P,"LI",{});var cAe=n(hT);qne=s(cAe,"STRONG",{});var zZr=n(qne);uko=r(zZr,"flaubert"),zZr.forEach(t),pko=r(cAe," \u2014 "),SD=s(cAe,"A",{href:!0});var WZr=n(SD);_ko=r(WZr,"FlaubertForQuestionAnsweringSimple"),WZr.forEach(t),bko=r(cAe," (FlauBERT model)"),cAe.forEach(t),vko=i(P),uT=s(P,"LI",{});var mAe=n(uT);One=s(mAe,"STRONG",{});var QZr=n(One);Tko=r(QZr,"fnet"),QZr.forEach(t),Fko=r(mAe," \u2014 "),PD=s(mAe,"A",{href:!0});var HZr=n(PD);Cko=r(HZr,"FNetForQuestionAnswering"),HZr.forEach(t),Mko=r(mAe," (FNet model)"),mAe.forEach(t),Eko=i(P),pT=s(P,"LI",{});var fAe=n(pT);Gne=s(fAe,"STRONG",{});var UZr=n(Gne);yko=r(UZr,"funnel"),UZr.forEach(t),wko=r(fAe," \u2014 "),$D=s(fAe,"A",{href:!0});var JZr=n($D);Ako=r(JZr,"FunnelForQuestionAnswering"),JZr.forEach(t),Lko=r(fAe," (Funnel Transformer model)"),fAe.forEach(t),Bko=i(P),_T=s(P,"LI",{});var gAe=n(_T);Xne=s(gAe,"STRONG",{});var YZr=n(Xne);xko=r(YZr,"gptj"),YZr.forEach(t),kko=r(gAe," \u2014 "),ID=s(gAe,"A",{href:!0});var KZr=n(ID);Rko=r(KZr,"GPTJForQuestionAnswering"),KZr.forEach(t),Sko=r(gAe," (GPT-J model)"),gAe.forEach(t),Pko=i(P),bT=s(P,"LI",{});var hAe=n(bT);Vne=s(hAe,"STRONG",{});var ZZr=n(Vne);$ko=r(ZZr,"ibert"),ZZr.forEach(t),Iko=r(hAe," \u2014 "),jD=s(hAe,"A",{href:!0});var eet=n(jD);jko=r(eet,"IBertForQuestionAnswering"),eet.forEach(t),Dko=r(hAe," (I-BERT model)"),hAe.forEach(t),Nko=i(P),vT=s(P,"LI",{});var uAe=n(vT);zne=s(uAe,"STRONG",{});var oet=n(zne);qko=r(oet,"layoutlmv2"),oet.forEach(t),Oko=r(uAe," \u2014 "),DD=s(uAe,"A",{href:!0});var ret=n(DD);Gko=r(ret,"LayoutLMv2ForQuestionAnswering"),ret.forEach(t),Xko=r(uAe," (LayoutLMv2 model)"),uAe.forEach(t),Vko=i(P),TT=s(P,"LI",{});var pAe=n(TT);Wne=s(pAe,"STRONG",{});var tet=n(Wne);zko=r(tet,"led"),tet.forEach(t),Wko=r(pAe," \u2014 "),ND=s(pAe,"A",{href:!0});var aet=n(ND);Qko=r(aet,"LEDForQuestionAnswering"),aet.forEach(t),Hko=r(pAe," (LED model)"),pAe.forEach(t),Uko=i(P),FT=s(P,"LI",{});var _Ae=n(FT);Qne=s(_Ae,"STRONG",{});var set=n(Qne);Jko=r(set,"longformer"),set.forEach(t),Yko=r(_Ae," \u2014 "),qD=s(_Ae,"A",{href:!0});var net=n(qD);Kko=r(net,"LongformerForQuestionAnswering"),net.forEach(t),Zko=r(_Ae," (Longformer model)"),_Ae.forEach(t),eRo=i(P),CT=s(P,"LI",{});var bAe=n(CT);Hne=s(bAe,"STRONG",{});var iet=n(Hne);oRo=r(iet,"lxmert"),iet.forEach(t),rRo=r(bAe," \u2014 "),OD=s(bAe,"A",{href:!0});var det=n(OD);tRo=r(det,"LxmertForQuestionAnswering"),det.forEach(t),aRo=r(bAe," (LXMERT model)"),bAe.forEach(t),sRo=i(P),MT=s(P,"LI",{});var vAe=n(MT);Une=s(vAe,"STRONG",{});var cet=n(Une);nRo=r(cet,"mbart"),cet.forEach(t),lRo=r(vAe," \u2014 "),GD=s(vAe,"A",{href:!0});var met=n(GD);iRo=r(met,"MBartForQuestionAnswering"),met.forEach(t),dRo=r(vAe," (mBART model)"),vAe.forEach(t),cRo=i(P),ET=s(P,"LI",{});var TAe=n(ET);Jne=s(TAe,"STRONG",{});var fet=n(Jne);mRo=r(fet,"megatron-bert"),fet.forEach(t),fRo=r(TAe," \u2014 "),XD=s(TAe,"A",{href:!0});var get=n(XD);gRo=r(get,"MegatronBertForQuestionAnswering"),get.forEach(t),hRo=r(TAe," (MegatronBert model)"),TAe.forEach(t),uRo=i(P),yT=s(P,"LI",{});var FAe=n(yT);Yne=s(FAe,"STRONG",{});var het=n(Yne);pRo=r(het,"mobilebert"),het.forEach(t),_Ro=r(FAe," \u2014 "),VD=s(FAe,"A",{href:!0});var uet=n(VD);bRo=r(uet,"MobileBertForQuestionAnswering"),uet.forEach(t),vRo=r(FAe," (MobileBERT model)"),FAe.forEach(t),TRo=i(P),wT=s(P,"LI",{});var CAe=n(wT);Kne=s(CAe,"STRONG",{});var pet=n(Kne);FRo=r(pet,"mpnet"),pet.forEach(t),CRo=r(CAe," \u2014 "),zD=s(CAe,"A",{href:!0});var _et=n(zD);MRo=r(_et,"MPNetForQuestionAnswering"),_et.forEach(t),ERo=r(CAe," (MPNet model)"),CAe.forEach(t),yRo=i(P),AT=s(P,"LI",{});var MAe=n(AT);Zne=s(MAe,"STRONG",{});var bet=n(Zne);wRo=r(bet,"nystromformer"),bet.forEach(t),ARo=r(MAe," \u2014 "),WD=s(MAe,"A",{href:!0});var vet=n(WD);LRo=r(vet,"NystromformerForQuestionAnswering"),vet.forEach(t),BRo=r(MAe," (Nystromformer model)"),MAe.forEach(t),xRo=i(P),LT=s(P,"LI",{});var EAe=n(LT);ele=s(EAe,"STRONG",{});var Tet=n(ele);kRo=r(Tet,"qdqbert"),Tet.forEach(t),RRo=r(EAe," \u2014 "),QD=s(EAe,"A",{href:!0});var Fet=n(QD);SRo=r(Fet,"QDQBertForQuestionAnswering"),Fet.forEach(t),PRo=r(EAe," (QDQBert model)"),EAe.forEach(t),$Ro=i(P),BT=s(P,"LI",{});var yAe=n(BT);ole=s(yAe,"STRONG",{});var Cet=n(ole);IRo=r(Cet,"reformer"),Cet.forEach(t),jRo=r(yAe," \u2014 "),HD=s(yAe,"A",{href:!0});var Met=n(HD);DRo=r(Met,"ReformerForQuestionAnswering"),Met.forEach(t),NRo=r(yAe," (Reformer model)"),yAe.forEach(t),qRo=i(P),xT=s(P,"LI",{});var wAe=n(xT);rle=s(wAe,"STRONG",{});var Eet=n(rle);ORo=r(Eet,"rembert"),Eet.forEach(t),GRo=r(wAe," \u2014 "),UD=s(wAe,"A",{href:!0});var yet=n(UD);XRo=r(yet,"RemBertForQuestionAnswering"),yet.forEach(t),VRo=r(wAe," (RemBERT model)"),wAe.forEach(t),zRo=i(P),kT=s(P,"LI",{});var AAe=n(kT);tle=s(AAe,"STRONG",{});var wet=n(tle);WRo=r(wet,"roberta"),wet.forEach(t),QRo=r(AAe," \u2014 "),JD=s(AAe,"A",{href:!0});var Aet=n(JD);HRo=r(Aet,"RobertaForQuestionAnswering"),Aet.forEach(t),URo=r(AAe," (RoBERTa model)"),AAe.forEach(t),JRo=i(P),RT=s(P,"LI",{});var LAe=n(RT);ale=s(LAe,"STRONG",{});var Let=n(ale);YRo=r(Let,"roformer"),Let.forEach(t),KRo=r(LAe," \u2014 "),YD=s(LAe,"A",{href:!0});var Bet=n(YD);ZRo=r(Bet,"RoFormerForQuestionAnswering"),Bet.forEach(t),eSo=r(LAe," (RoFormer model)"),LAe.forEach(t),oSo=i(P),ST=s(P,"LI",{});var BAe=n(ST);sle=s(BAe,"STRONG",{});var xet=n(sle);rSo=r(xet,"splinter"),xet.forEach(t),tSo=r(BAe," \u2014 "),KD=s(BAe,"A",{href:!0});var ket=n(KD);aSo=r(ket,"SplinterForQuestionAnswering"),ket.forEach(t),sSo=r(BAe," (Splinter model)"),BAe.forEach(t),nSo=i(P),PT=s(P,"LI",{});var xAe=n(PT);nle=s(xAe,"STRONG",{});var Ret=n(nle);lSo=r(Ret,"squeezebert"),Ret.forEach(t),iSo=r(xAe," \u2014 "),ZD=s(xAe,"A",{href:!0});var Set=n(ZD);dSo=r(Set,"SqueezeBertForQuestionAnswering"),Set.forEach(t),cSo=r(xAe," (SqueezeBERT model)"),xAe.forEach(t),mSo=i(P),$T=s(P,"LI",{});var kAe=n($T);lle=s(kAe,"STRONG",{});var Pet=n(lle);fSo=r(Pet,"xlm"),Pet.forEach(t),gSo=r(kAe," \u2014 "),eN=s(kAe,"A",{href:!0});var $et=n(eN);hSo=r($et,"XLMForQuestionAnsweringSimple"),$et.forEach(t),uSo=r(kAe," (XLM model)"),kAe.forEach(t),pSo=i(P),IT=s(P,"LI",{});var RAe=n(IT);ile=s(RAe,"STRONG",{});var Iet=n(ile);_So=r(Iet,"xlm-roberta"),Iet.forEach(t),bSo=r(RAe," \u2014 "),oN=s(RAe,"A",{href:!0});var jet=n(oN);vSo=r(jet,"XLMRobertaForQuestionAnswering"),jet.forEach(t),TSo=r(RAe," (XLM-RoBERTa model)"),RAe.forEach(t),FSo=i(P),jT=s(P,"LI",{});var SAe=n(jT);dle=s(SAe,"STRONG",{});var Det=n(dle);CSo=r(Det,"xlm-roberta-xl"),Det.forEach(t),MSo=r(SAe," \u2014 "),rN=s(SAe,"A",{href:!0});var Net=n(rN);ESo=r(Net,"XLMRobertaXLForQuestionAnswering"),Net.forEach(t),ySo=r(SAe," (XLM-RoBERTa-XL model)"),SAe.forEach(t),wSo=i(P),DT=s(P,"LI",{});var PAe=n(DT);cle=s(PAe,"STRONG",{});var qet=n(cle);ASo=r(qet,"xlnet"),qet.forEach(t),LSo=r(PAe," \u2014 "),tN=s(PAe,"A",{href:!0});var Oet=n(tN);BSo=r(Oet,"XLNetForQuestionAnsweringSimple"),Oet.forEach(t),xSo=r(PAe," (XLNet model)"),PAe.forEach(t),kSo=i(P),NT=s(P,"LI",{});var $Ae=n(NT);mle=s($Ae,"STRONG",{});var Get=n(mle);RSo=r(Get,"yoso"),Get.forEach(t),SSo=r($Ae," \u2014 "),aN=s($Ae,"A",{href:!0});var Xet=n(aN);PSo=r(Xet,"YosoForQuestionAnswering"),Xet.forEach(t),$So=r($Ae," (YOSO model)"),$Ae.forEach(t),P.forEach(t),ISo=i(Ut),qT=s(Ut,"P",{});var IAe=n(qT);jSo=r(IAe,"The model is set in evaluation mode by default using "),fle=s(IAe,"CODE",{});var Vet=n(fle);DSo=r(Vet,"model.eval()"),Vet.forEach(t),NSo=r(IAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=s(IAe,"CODE",{});var zet=n(gle);qSo=r(zet,"model.train()"),zet.forEach(t),IAe.forEach(t),OSo=i(Ut),hle=s(Ut,"P",{});var Wet=n(hle);GSo=r(Wet,"Examples:"),Wet.forEach(t),XSo=i(Ut),f(Gw.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),Nxe=i(d),Ad=s(d,"H2",{class:!0});var HRe=n(Ad);OT=s(HRe,"A",{id:!0,class:!0,href:!0});var Qet=n(OT);ule=s(Qet,"SPAN",{});var Het=n(ule);f(Xw.$$.fragment,Het),Het.forEach(t),Qet.forEach(t),VSo=i(HRe),ple=s(HRe,"SPAN",{});var Uet=n(ple);zSo=r(Uet,"AutoModelForTableQuestionAnswering"),Uet.forEach(t),HRe.forEach(t),qxe=i(d),nr=s(d,"DIV",{class:!0});var gl=n(nr);f(Vw.$$.fragment,gl),WSo=i(gl),Ld=s(gl,"P",{});var zz=n(Ld);QSo=r(zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_le=s(zz,"CODE",{});var Jet=n(_le);HSo=r(Jet,"from_pretrained()"),Jet.forEach(t),USo=r(zz,"class method or the "),ble=s(zz,"CODE",{});var Yet=n(ble);JSo=r(Yet,"from_config()"),Yet.forEach(t),YSo=r(zz,`class
method.`),zz.forEach(t),KSo=i(gl),zw=s(gl,"P",{});var URe=n(zw);ZSo=r(URe,"This class cannot be instantiated directly using "),vle=s(URe,"CODE",{});var Ket=n(vle);ePo=r(Ket,"__init__()"),Ket.forEach(t),oPo=r(URe," (throws an error)."),URe.forEach(t),rPo=i(gl),et=s(gl,"DIV",{class:!0});var hl=n(et);f(Ww.$$.fragment,hl),tPo=i(hl),Tle=s(hl,"P",{});var Zet=n(Tle);aPo=r(Zet,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Zet.forEach(t),sPo=i(hl),Bd=s(hl,"P",{});var Wz=n(Bd);nPo=r(Wz,`Note:
Loading a model from its configuration file does `),Fle=s(Wz,"STRONG",{});var eot=n(Fle);lPo=r(eot,"not"),eot.forEach(t),iPo=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cle=s(Wz,"CODE",{});var oot=n(Cle);dPo=r(oot,"from_pretrained()"),oot.forEach(t),cPo=r(Wz,"to load the model weights."),Wz.forEach(t),mPo=i(hl),Mle=s(hl,"P",{});var rot=n(Mle);fPo=r(rot,"Examples:"),rot.forEach(t),gPo=i(hl),f(Qw.$$.fragment,hl),hl.forEach(t),hPo=i(gl),Qe=s(gl,"DIV",{class:!0});var Jt=n(Qe);f(Hw.$$.fragment,Jt),uPo=i(Jt),Ele=s(Jt,"P",{});var tot=n(Ele);pPo=r(tot,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tot.forEach(t),_Po=i(Jt),es=s(Jt,"P",{});var l5=n(es);bPo=r(l5,"The model class to instantiate is selected based on the "),yle=s(l5,"CODE",{});var aot=n(yle);vPo=r(aot,"model_type"),aot.forEach(t),TPo=r(l5,` property of the config object (either
passed as an argument or loaded from `),wle=s(l5,"CODE",{});var sot=n(wle);FPo=r(sot,"pretrained_model_name_or_path"),sot.forEach(t),CPo=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=s(l5,"CODE",{});var not=n(Ale);MPo=r(not,"pretrained_model_name_or_path"),not.forEach(t),EPo=r(l5,":"),l5.forEach(t),yPo=i(Jt),Lle=s(Jt,"UL",{});var lot=n(Lle);GT=s(lot,"LI",{});var jAe=n(GT);Ble=s(jAe,"STRONG",{});var iot=n(Ble);wPo=r(iot,"tapas"),iot.forEach(t),APo=r(jAe," \u2014 "),sN=s(jAe,"A",{href:!0});var dot=n(sN);LPo=r(dot,"TapasForQuestionAnswering"),dot.forEach(t),BPo=r(jAe," (TAPAS model)"),jAe.forEach(t),lot.forEach(t),xPo=i(Jt),XT=s(Jt,"P",{});var DAe=n(XT);kPo=r(DAe,"The model is set in evaluation mode by default using "),xle=s(DAe,"CODE",{});var cot=n(xle);RPo=r(cot,"model.eval()"),cot.forEach(t),SPo=r(DAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kle=s(DAe,"CODE",{});var mot=n(kle);PPo=r(mot,"model.train()"),mot.forEach(t),DAe.forEach(t),$Po=i(Jt),Rle=s(Jt,"P",{});var fot=n(Rle);IPo=r(fot,"Examples:"),fot.forEach(t),jPo=i(Jt),f(Uw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Oxe=i(d),xd=s(d,"H2",{class:!0});var JRe=n(xd);VT=s(JRe,"A",{id:!0,class:!0,href:!0});var got=n(VT);Sle=s(got,"SPAN",{});var hot=n(Sle);f(Jw.$$.fragment,hot),hot.forEach(t),got.forEach(t),DPo=i(JRe),Ple=s(JRe,"SPAN",{});var uot=n(Ple);NPo=r(uot,"AutoModelForImageClassification"),uot.forEach(t),JRe.forEach(t),Gxe=i(d),lr=s(d,"DIV",{class:!0});var ul=n(lr);f(Yw.$$.fragment,ul),qPo=i(ul),kd=s(ul,"P",{});var Qz=n(kd);OPo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$le=s(Qz,"CODE",{});var pot=n($le);GPo=r(pot,"from_pretrained()"),pot.forEach(t),XPo=r(Qz,"class method or the "),Ile=s(Qz,"CODE",{});var _ot=n(Ile);VPo=r(_ot,"from_config()"),_ot.forEach(t),zPo=r(Qz,`class
method.`),Qz.forEach(t),WPo=i(ul),Kw=s(ul,"P",{});var YRe=n(Kw);QPo=r(YRe,"This class cannot be instantiated directly using "),jle=s(YRe,"CODE",{});var bot=n(jle);HPo=r(bot,"__init__()"),bot.forEach(t),UPo=r(YRe," (throws an error)."),YRe.forEach(t),JPo=i(ul),ot=s(ul,"DIV",{class:!0});var pl=n(ot);f(Zw.$$.fragment,pl),YPo=i(pl),Dle=s(pl,"P",{});var vot=n(Dle);KPo=r(vot,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vot.forEach(t),ZPo=i(pl),Rd=s(pl,"P",{});var Hz=n(Rd);e$o=r(Hz,`Note:
Loading a model from its configuration file does `),Nle=s(Hz,"STRONG",{});var Tot=n(Nle);o$o=r(Tot,"not"),Tot.forEach(t),r$o=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),qle=s(Hz,"CODE",{});var Fot=n(qle);t$o=r(Fot,"from_pretrained()"),Fot.forEach(t),a$o=r(Hz,"to load the model weights."),Hz.forEach(t),s$o=i(pl),Ole=s(pl,"P",{});var Cot=n(Ole);n$o=r(Cot,"Examples:"),Cot.forEach(t),l$o=i(pl),f(e6.$$.fragment,pl),pl.forEach(t),i$o=i(ul),He=s(ul,"DIV",{class:!0});var Yt=n(He);f(o6.$$.fragment,Yt),d$o=i(Yt),Gle=s(Yt,"P",{});var Mot=n(Gle);c$o=r(Mot,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mot.forEach(t),m$o=i(Yt),os=s(Yt,"P",{});var i5=n(os);f$o=r(i5,"The model class to instantiate is selected based on the "),Xle=s(i5,"CODE",{});var Eot=n(Xle);g$o=r(Eot,"model_type"),Eot.forEach(t),h$o=r(i5,` property of the config object (either
passed as an argument or loaded from `),Vle=s(i5,"CODE",{});var yot=n(Vle);u$o=r(yot,"pretrained_model_name_or_path"),yot.forEach(t),p$o=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=s(i5,"CODE",{});var wot=n(zle);_$o=r(wot,"pretrained_model_name_or_path"),wot.forEach(t),b$o=r(i5,":"),i5.forEach(t),v$o=i(Yt),Ce=s(Yt,"UL",{});var no=n(Ce);zT=s(no,"LI",{});var NAe=n(zT);Wle=s(NAe,"STRONG",{});var Aot=n(Wle);T$o=r(Aot,"beit"),Aot.forEach(t),F$o=r(NAe," \u2014 "),nN=s(NAe,"A",{href:!0});var Lot=n(nN);C$o=r(Lot,"BeitForImageClassification"),Lot.forEach(t),M$o=r(NAe," (BEiT model)"),NAe.forEach(t),E$o=i(no),WT=s(no,"LI",{});var qAe=n(WT);Qle=s(qAe,"STRONG",{});var Bot=n(Qle);y$o=r(Bot,"convnext"),Bot.forEach(t),w$o=r(qAe," \u2014 "),lN=s(qAe,"A",{href:!0});var xot=n(lN);A$o=r(xot,"ConvNextForImageClassification"),xot.forEach(t),L$o=r(qAe," (ConvNext model)"),qAe.forEach(t),B$o=i(no),qn=s(no,"LI",{});var D7=n(qn);Hle=s(D7,"STRONG",{});var kot=n(Hle);x$o=r(kot,"deit"),kot.forEach(t),k$o=r(D7," \u2014 "),iN=s(D7,"A",{href:!0});var Rot=n(iN);R$o=r(Rot,"DeiTForImageClassification"),Rot.forEach(t),S$o=r(D7," or "),dN=s(D7,"A",{href:!0});var Sot=n(dN);P$o=r(Sot,"DeiTForImageClassificationWithTeacher"),Sot.forEach(t),$$o=r(D7," (DeiT model)"),D7.forEach(t),I$o=i(no),QT=s(no,"LI",{});var OAe=n(QT);Ule=s(OAe,"STRONG",{});var Pot=n(Ule);j$o=r(Pot,"imagegpt"),Pot.forEach(t),D$o=r(OAe," \u2014 "),cN=s(OAe,"A",{href:!0});var $ot=n(cN);N$o=r($ot,"ImageGPTForImageClassification"),$ot.forEach(t),q$o=r(OAe," (ImageGPT model)"),OAe.forEach(t),O$o=i(no),fa=s(no,"LI",{});var Pm=n(fa);Jle=s(Pm,"STRONG",{});var Iot=n(Jle);G$o=r(Iot,"perceiver"),Iot.forEach(t),X$o=r(Pm," \u2014 "),mN=s(Pm,"A",{href:!0});var jot=n(mN);V$o=r(jot,"PerceiverForImageClassificationLearned"),jot.forEach(t),z$o=r(Pm," or "),fN=s(Pm,"A",{href:!0});var Dot=n(fN);W$o=r(Dot,"PerceiverForImageClassificationFourier"),Dot.forEach(t),Q$o=r(Pm," or "),gN=s(Pm,"A",{href:!0});var Not=n(gN);H$o=r(Not,"PerceiverForImageClassificationConvProcessing"),Not.forEach(t),U$o=r(Pm," (Perceiver model)"),Pm.forEach(t),J$o=i(no),HT=s(no,"LI",{});var GAe=n(HT);Yle=s(GAe,"STRONG",{});var qot=n(Yle);Y$o=r(qot,"poolformer"),qot.forEach(t),K$o=r(GAe," \u2014 "),hN=s(GAe,"A",{href:!0});var Oot=n(hN);Z$o=r(Oot,"PoolFormerForImageClassification"),Oot.forEach(t),eIo=r(GAe," (PoolFormer model)"),GAe.forEach(t),oIo=i(no),UT=s(no,"LI",{});var XAe=n(UT);Kle=s(XAe,"STRONG",{});var Got=n(Kle);rIo=r(Got,"segformer"),Got.forEach(t),tIo=r(XAe," \u2014 "),uN=s(XAe,"A",{href:!0});var Xot=n(uN);aIo=r(Xot,"SegformerForImageClassification"),Xot.forEach(t),sIo=r(XAe," (SegFormer model)"),XAe.forEach(t),nIo=i(no),JT=s(no,"LI",{});var VAe=n(JT);Zle=s(VAe,"STRONG",{});var Vot=n(Zle);lIo=r(Vot,"swin"),Vot.forEach(t),iIo=r(VAe," \u2014 "),pN=s(VAe,"A",{href:!0});var zot=n(pN);dIo=r(zot,"SwinForImageClassification"),zot.forEach(t),cIo=r(VAe," (Swin model)"),VAe.forEach(t),mIo=i(no),YT=s(no,"LI",{});var zAe=n(YT);eie=s(zAe,"STRONG",{});var Wot=n(eie);fIo=r(Wot,"vit"),Wot.forEach(t),gIo=r(zAe," \u2014 "),_N=s(zAe,"A",{href:!0});var Qot=n(_N);hIo=r(Qot,"ViTForImageClassification"),Qot.forEach(t),uIo=r(zAe," (ViT model)"),zAe.forEach(t),no.forEach(t),pIo=i(Yt),KT=s(Yt,"P",{});var WAe=n(KT);_Io=r(WAe,"The model is set in evaluation mode by default using "),oie=s(WAe,"CODE",{});var Hot=n(oie);bIo=r(Hot,"model.eval()"),Hot.forEach(t),vIo=r(WAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=s(WAe,"CODE",{});var Uot=n(rie);TIo=r(Uot,"model.train()"),Uot.forEach(t),WAe.forEach(t),FIo=i(Yt),tie=s(Yt,"P",{});var Jot=n(tie);CIo=r(Jot,"Examples:"),Jot.forEach(t),MIo=i(Yt),f(r6.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),Xxe=i(d),Sd=s(d,"H2",{class:!0});var KRe=n(Sd);ZT=s(KRe,"A",{id:!0,class:!0,href:!0});var Yot=n(ZT);aie=s(Yot,"SPAN",{});var Kot=n(aie);f(t6.$$.fragment,Kot),Kot.forEach(t),Yot.forEach(t),EIo=i(KRe),sie=s(KRe,"SPAN",{});var Zot=n(sie);yIo=r(Zot,"AutoModelForVision2Seq"),Zot.forEach(t),KRe.forEach(t),Vxe=i(d),ir=s(d,"DIV",{class:!0});var _l=n(ir);f(a6.$$.fragment,_l),wIo=i(_l),Pd=s(_l,"P",{});var Uz=n(Pd);AIo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nie=s(Uz,"CODE",{});var ert=n(nie);LIo=r(ert,"from_pretrained()"),ert.forEach(t),BIo=r(Uz,"class method or the "),lie=s(Uz,"CODE",{});var ort=n(lie);xIo=r(ort,"from_config()"),ort.forEach(t),kIo=r(Uz,`class
method.`),Uz.forEach(t),RIo=i(_l),s6=s(_l,"P",{});var ZRe=n(s6);SIo=r(ZRe,"This class cannot be instantiated directly using "),iie=s(ZRe,"CODE",{});var rrt=n(iie);PIo=r(rrt,"__init__()"),rrt.forEach(t),$Io=r(ZRe," (throws an error)."),ZRe.forEach(t),IIo=i(_l),rt=s(_l,"DIV",{class:!0});var bl=n(rt);f(n6.$$.fragment,bl),jIo=i(bl),die=s(bl,"P",{});var trt=n(die);DIo=r(trt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),trt.forEach(t),NIo=i(bl),$d=s(bl,"P",{});var Jz=n($d);qIo=r(Jz,`Note:
Loading a model from its configuration file does `),cie=s(Jz,"STRONG",{});var art=n(cie);OIo=r(art,"not"),art.forEach(t),GIo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),mie=s(Jz,"CODE",{});var srt=n(mie);XIo=r(srt,"from_pretrained()"),srt.forEach(t),VIo=r(Jz,"to load the model weights."),Jz.forEach(t),zIo=i(bl),fie=s(bl,"P",{});var nrt=n(fie);WIo=r(nrt,"Examples:"),nrt.forEach(t),QIo=i(bl),f(l6.$$.fragment,bl),bl.forEach(t),HIo=i(_l),Ue=s(_l,"DIV",{class:!0});var Kt=n(Ue);f(i6.$$.fragment,Kt),UIo=i(Kt),gie=s(Kt,"P",{});var lrt=n(gie);JIo=r(lrt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lrt.forEach(t),YIo=i(Kt),rs=s(Kt,"P",{});var d5=n(rs);KIo=r(d5,"The model class to instantiate is selected based on the "),hie=s(d5,"CODE",{});var irt=n(hie);ZIo=r(irt,"model_type"),irt.forEach(t),ejo=r(d5,` property of the config object (either
passed as an argument or loaded from `),uie=s(d5,"CODE",{});var drt=n(uie);ojo=r(drt,"pretrained_model_name_or_path"),drt.forEach(t),rjo=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pie=s(d5,"CODE",{});var crt=n(pie);tjo=r(crt,"pretrained_model_name_or_path"),crt.forEach(t),ajo=r(d5,":"),d5.forEach(t),sjo=i(Kt),_ie=s(Kt,"UL",{});var mrt=n(_ie);e1=s(mrt,"LI",{});var QAe=n(e1);bie=s(QAe,"STRONG",{});var frt=n(bie);njo=r(frt,"vision-encoder-decoder"),frt.forEach(t),ljo=r(QAe," \u2014 "),bN=s(QAe,"A",{href:!0});var grt=n(bN);ijo=r(grt,"VisionEncoderDecoderModel"),grt.forEach(t),djo=r(QAe," (Vision Encoder decoder model)"),QAe.forEach(t),mrt.forEach(t),cjo=i(Kt),o1=s(Kt,"P",{});var HAe=n(o1);mjo=r(HAe,"The model is set in evaluation mode by default using "),vie=s(HAe,"CODE",{});var hrt=n(vie);fjo=r(hrt,"model.eval()"),hrt.forEach(t),gjo=r(HAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=s(HAe,"CODE",{});var urt=n(Tie);hjo=r(urt,"model.train()"),urt.forEach(t),HAe.forEach(t),ujo=i(Kt),Fie=s(Kt,"P",{});var prt=n(Fie);pjo=r(prt,"Examples:"),prt.forEach(t),_jo=i(Kt),f(d6.$$.fragment,Kt),Kt.forEach(t),_l.forEach(t),zxe=i(d),Id=s(d,"H2",{class:!0});var eSe=n(Id);r1=s(eSe,"A",{id:!0,class:!0,href:!0});var _rt=n(r1);Cie=s(_rt,"SPAN",{});var brt=n(Cie);f(c6.$$.fragment,brt),brt.forEach(t),_rt.forEach(t),bjo=i(eSe),Mie=s(eSe,"SPAN",{});var vrt=n(Mie);vjo=r(vrt,"AutoModelForAudioClassification"),vrt.forEach(t),eSe.forEach(t),Wxe=i(d),dr=s(d,"DIV",{class:!0});var vl=n(dr);f(m6.$$.fragment,vl),Tjo=i(vl),jd=s(vl,"P",{});var Yz=n(jd);Fjo=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),Eie=s(Yz,"CODE",{});var Trt=n(Eie);Cjo=r(Trt,"from_pretrained()"),Trt.forEach(t),Mjo=r(Yz,"class method or the "),yie=s(Yz,"CODE",{});var Frt=n(yie);Ejo=r(Frt,"from_config()"),Frt.forEach(t),yjo=r(Yz,`class
method.`),Yz.forEach(t),wjo=i(vl),f6=s(vl,"P",{});var oSe=n(f6);Ajo=r(oSe,"This class cannot be instantiated directly using "),wie=s(oSe,"CODE",{});var Crt=n(wie);Ljo=r(Crt,"__init__()"),Crt.forEach(t),Bjo=r(oSe," (throws an error)."),oSe.forEach(t),xjo=i(vl),tt=s(vl,"DIV",{class:!0});var Tl=n(tt);f(g6.$$.fragment,Tl),kjo=i(Tl),Aie=s(Tl,"P",{});var Mrt=n(Aie);Rjo=r(Mrt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mrt.forEach(t),Sjo=i(Tl),Dd=s(Tl,"P",{});var Kz=n(Dd);Pjo=r(Kz,`Note:
Loading a model from its configuration file does `),Lie=s(Kz,"STRONG",{});var Ert=n(Lie);$jo=r(Ert,"not"),Ert.forEach(t),Ijo=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bie=s(Kz,"CODE",{});var yrt=n(Bie);jjo=r(yrt,"from_pretrained()"),yrt.forEach(t),Djo=r(Kz,"to load the model weights."),Kz.forEach(t),Njo=i(Tl),xie=s(Tl,"P",{});var wrt=n(xie);qjo=r(wrt,"Examples:"),wrt.forEach(t),Ojo=i(Tl),f(h6.$$.fragment,Tl),Tl.forEach(t),Gjo=i(vl),Je=s(vl,"DIV",{class:!0});var Zt=n(Je);f(u6.$$.fragment,Zt),Xjo=i(Zt),kie=s(Zt,"P",{});var Art=n(kie);Vjo=r(Art,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Art.forEach(t),zjo=i(Zt),ts=s(Zt,"P",{});var c5=n(ts);Wjo=r(c5,"The model class to instantiate is selected based on the "),Rie=s(c5,"CODE",{});var Lrt=n(Rie);Qjo=r(Lrt,"model_type"),Lrt.forEach(t),Hjo=r(c5,` property of the config object (either
passed as an argument or loaded from `),Sie=s(c5,"CODE",{});var Brt=n(Sie);Ujo=r(Brt,"pretrained_model_name_or_path"),Brt.forEach(t),Jjo=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pie=s(c5,"CODE",{});var xrt=n(Pie);Yjo=r(xrt,"pretrained_model_name_or_path"),xrt.forEach(t),Kjo=r(c5,":"),c5.forEach(t),Zjo=i(Zt),xe=s(Zt,"UL",{});var qo=n(xe);t1=s(qo,"LI",{});var UAe=n(t1);$ie=s(UAe,"STRONG",{});var krt=n($ie);eDo=r(krt,"data2vec-audio"),krt.forEach(t),oDo=r(UAe," \u2014 "),vN=s(UAe,"A",{href:!0});var Rrt=n(vN);rDo=r(Rrt,"Data2VecAudioForSequenceClassification"),Rrt.forEach(t),tDo=r(UAe," (Data2VecAudio model)"),UAe.forEach(t),aDo=i(qo),a1=s(qo,"LI",{});var JAe=n(a1);Iie=s(JAe,"STRONG",{});var Srt=n(Iie);sDo=r(Srt,"hubert"),Srt.forEach(t),nDo=r(JAe," \u2014 "),TN=s(JAe,"A",{href:!0});var Prt=n(TN);lDo=r(Prt,"HubertForSequenceClassification"),Prt.forEach(t),iDo=r(JAe," (Hubert model)"),JAe.forEach(t),dDo=i(qo),s1=s(qo,"LI",{});var YAe=n(s1);jie=s(YAe,"STRONG",{});var $rt=n(jie);cDo=r($rt,"sew"),$rt.forEach(t),mDo=r(YAe," \u2014 "),FN=s(YAe,"A",{href:!0});var Irt=n(FN);fDo=r(Irt,"SEWForSequenceClassification"),Irt.forEach(t),gDo=r(YAe," (SEW model)"),YAe.forEach(t),hDo=i(qo),n1=s(qo,"LI",{});var KAe=n(n1);Die=s(KAe,"STRONG",{});var jrt=n(Die);uDo=r(jrt,"sew-d"),jrt.forEach(t),pDo=r(KAe," \u2014 "),CN=s(KAe,"A",{href:!0});var Drt=n(CN);_Do=r(Drt,"SEWDForSequenceClassification"),Drt.forEach(t),bDo=r(KAe," (SEW-D model)"),KAe.forEach(t),vDo=i(qo),l1=s(qo,"LI",{});var ZAe=n(l1);Nie=s(ZAe,"STRONG",{});var Nrt=n(Nie);TDo=r(Nrt,"unispeech"),Nrt.forEach(t),FDo=r(ZAe," \u2014 "),MN=s(ZAe,"A",{href:!0});var qrt=n(MN);CDo=r(qrt,"UniSpeechForSequenceClassification"),qrt.forEach(t),MDo=r(ZAe," (UniSpeech model)"),ZAe.forEach(t),EDo=i(qo),i1=s(qo,"LI",{});var e0e=n(i1);qie=s(e0e,"STRONG",{});var Ort=n(qie);yDo=r(Ort,"unispeech-sat"),Ort.forEach(t),wDo=r(e0e," \u2014 "),EN=s(e0e,"A",{href:!0});var Grt=n(EN);ADo=r(Grt,"UniSpeechSatForSequenceClassification"),Grt.forEach(t),LDo=r(e0e," (UniSpeechSat model)"),e0e.forEach(t),BDo=i(qo),d1=s(qo,"LI",{});var o0e=n(d1);Oie=s(o0e,"STRONG",{});var Xrt=n(Oie);xDo=r(Xrt,"wav2vec2"),Xrt.forEach(t),kDo=r(o0e," \u2014 "),yN=s(o0e,"A",{href:!0});var Vrt=n(yN);RDo=r(Vrt,"Wav2Vec2ForSequenceClassification"),Vrt.forEach(t),SDo=r(o0e," (Wav2Vec2 model)"),o0e.forEach(t),PDo=i(qo),c1=s(qo,"LI",{});var r0e=n(c1);Gie=s(r0e,"STRONG",{});var zrt=n(Gie);$Do=r(zrt,"wavlm"),zrt.forEach(t),IDo=r(r0e," \u2014 "),wN=s(r0e,"A",{href:!0});var Wrt=n(wN);jDo=r(Wrt,"WavLMForSequenceClassification"),Wrt.forEach(t),DDo=r(r0e," (WavLM model)"),r0e.forEach(t),qo.forEach(t),NDo=i(Zt),m1=s(Zt,"P",{});var t0e=n(m1);qDo=r(t0e,"The model is set in evaluation mode by default using "),Xie=s(t0e,"CODE",{});var Qrt=n(Xie);ODo=r(Qrt,"model.eval()"),Qrt.forEach(t),GDo=r(t0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vie=s(t0e,"CODE",{});var Hrt=n(Vie);XDo=r(Hrt,"model.train()"),Hrt.forEach(t),t0e.forEach(t),VDo=i(Zt),zie=s(Zt,"P",{});var Urt=n(zie);zDo=r(Urt,"Examples:"),Urt.forEach(t),WDo=i(Zt),f(p6.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Qxe=i(d),Nd=s(d,"H2",{class:!0});var rSe=n(Nd);f1=s(rSe,"A",{id:!0,class:!0,href:!0});var Jrt=n(f1);Wie=s(Jrt,"SPAN",{});var Yrt=n(Wie);f(_6.$$.fragment,Yrt),Yrt.forEach(t),Jrt.forEach(t),QDo=i(rSe),Qie=s(rSe,"SPAN",{});var Krt=n(Qie);HDo=r(Krt,"AutoModelForAudioFrameClassification"),Krt.forEach(t),rSe.forEach(t),Hxe=i(d),cr=s(d,"DIV",{class:!0});var Fl=n(cr);f(b6.$$.fragment,Fl),UDo=i(Fl),qd=s(Fl,"P",{});var Zz=n(qd);JDo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Hie=s(Zz,"CODE",{});var Zrt=n(Hie);YDo=r(Zrt,"from_pretrained()"),Zrt.forEach(t),KDo=r(Zz,"class method or the "),Uie=s(Zz,"CODE",{});var ett=n(Uie);ZDo=r(ett,"from_config()"),ett.forEach(t),eNo=r(Zz,`class
method.`),Zz.forEach(t),oNo=i(Fl),v6=s(Fl,"P",{});var tSe=n(v6);rNo=r(tSe,"This class cannot be instantiated directly using "),Jie=s(tSe,"CODE",{});var ott=n(Jie);tNo=r(ott,"__init__()"),ott.forEach(t),aNo=r(tSe," (throws an error)."),tSe.forEach(t),sNo=i(Fl),at=s(Fl,"DIV",{class:!0});var Cl=n(at);f(T6.$$.fragment,Cl),nNo=i(Cl),Yie=s(Cl,"P",{});var rtt=n(Yie);lNo=r(rtt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),rtt.forEach(t),iNo=i(Cl),Od=s(Cl,"P",{});var eW=n(Od);dNo=r(eW,`Note:
Loading a model from its configuration file does `),Kie=s(eW,"STRONG",{});var ttt=n(Kie);cNo=r(ttt,"not"),ttt.forEach(t),mNo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zie=s(eW,"CODE",{});var att=n(Zie);fNo=r(att,"from_pretrained()"),att.forEach(t),gNo=r(eW,"to load the model weights."),eW.forEach(t),hNo=i(Cl),ede=s(Cl,"P",{});var stt=n(ede);uNo=r(stt,"Examples:"),stt.forEach(t),pNo=i(Cl),f(F6.$$.fragment,Cl),Cl.forEach(t),_No=i(Fl),Ye=s(Fl,"DIV",{class:!0});var ea=n(Ye);f(C6.$$.fragment,ea),bNo=i(ea),ode=s(ea,"P",{});var ntt=n(ode);vNo=r(ntt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ntt.forEach(t),TNo=i(ea),as=s(ea,"P",{});var m5=n(as);FNo=r(m5,"The model class to instantiate is selected based on the "),rde=s(m5,"CODE",{});var ltt=n(rde);CNo=r(ltt,"model_type"),ltt.forEach(t),MNo=r(m5,` property of the config object (either
passed as an argument or loaded from `),tde=s(m5,"CODE",{});var itt=n(tde);ENo=r(itt,"pretrained_model_name_or_path"),itt.forEach(t),yNo=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=s(m5,"CODE",{});var dtt=n(ade);wNo=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),ANo=r(m5,":"),m5.forEach(t),LNo=i(ea),ss=s(ea,"UL",{});var f5=n(ss);g1=s(f5,"LI",{});var a0e=n(g1);sde=s(a0e,"STRONG",{});var ctt=n(sde);BNo=r(ctt,"data2vec-audio"),ctt.forEach(t),xNo=r(a0e," \u2014 "),AN=s(a0e,"A",{href:!0});var mtt=n(AN);kNo=r(mtt,"Data2VecAudioForAudioFrameClassification"),mtt.forEach(t),RNo=r(a0e," (Data2VecAudio model)"),a0e.forEach(t),SNo=i(f5),h1=s(f5,"LI",{});var s0e=n(h1);nde=s(s0e,"STRONG",{});var ftt=n(nde);PNo=r(ftt,"unispeech-sat"),ftt.forEach(t),$No=r(s0e," \u2014 "),LN=s(s0e,"A",{href:!0});var gtt=n(LN);INo=r(gtt,"UniSpeechSatForAudioFrameClassification"),gtt.forEach(t),jNo=r(s0e," (UniSpeechSat model)"),s0e.forEach(t),DNo=i(f5),u1=s(f5,"LI",{});var n0e=n(u1);lde=s(n0e,"STRONG",{});var htt=n(lde);NNo=r(htt,"wav2vec2"),htt.forEach(t),qNo=r(n0e," \u2014 "),BN=s(n0e,"A",{href:!0});var utt=n(BN);ONo=r(utt,"Wav2Vec2ForAudioFrameClassification"),utt.forEach(t),GNo=r(n0e," (Wav2Vec2 model)"),n0e.forEach(t),XNo=i(f5),p1=s(f5,"LI",{});var l0e=n(p1);ide=s(l0e,"STRONG",{});var ptt=n(ide);VNo=r(ptt,"wavlm"),ptt.forEach(t),zNo=r(l0e," \u2014 "),xN=s(l0e,"A",{href:!0});var _tt=n(xN);WNo=r(_tt,"WavLMForAudioFrameClassification"),_tt.forEach(t),QNo=r(l0e," (WavLM model)"),l0e.forEach(t),f5.forEach(t),HNo=i(ea),_1=s(ea,"P",{});var i0e=n(_1);UNo=r(i0e,"The model is set in evaluation mode by default using "),dde=s(i0e,"CODE",{});var btt=n(dde);JNo=r(btt,"model.eval()"),btt.forEach(t),YNo=r(i0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=s(i0e,"CODE",{});var vtt=n(cde);KNo=r(vtt,"model.train()"),vtt.forEach(t),i0e.forEach(t),ZNo=i(ea),mde=s(ea,"P",{});var Ttt=n(mde);eqo=r(Ttt,"Examples:"),Ttt.forEach(t),oqo=i(ea),f(M6.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Uxe=i(d),Gd=s(d,"H2",{class:!0});var aSe=n(Gd);b1=s(aSe,"A",{id:!0,class:!0,href:!0});var Ftt=n(b1);fde=s(Ftt,"SPAN",{});var Ctt=n(fde);f(E6.$$.fragment,Ctt),Ctt.forEach(t),Ftt.forEach(t),rqo=i(aSe),gde=s(aSe,"SPAN",{});var Mtt=n(gde);tqo=r(Mtt,"AutoModelForCTC"),Mtt.forEach(t),aSe.forEach(t),Jxe=i(d),mr=s(d,"DIV",{class:!0});var Ml=n(mr);f(y6.$$.fragment,Ml),aqo=i(Ml),Xd=s(Ml,"P",{});var oW=n(Xd);sqo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),hde=s(oW,"CODE",{});var Ett=n(hde);nqo=r(Ett,"from_pretrained()"),Ett.forEach(t),lqo=r(oW,"class method or the "),ude=s(oW,"CODE",{});var ytt=n(ude);iqo=r(ytt,"from_config()"),ytt.forEach(t),dqo=r(oW,`class
method.`),oW.forEach(t),cqo=i(Ml),w6=s(Ml,"P",{});var sSe=n(w6);mqo=r(sSe,"This class cannot be instantiated directly using "),pde=s(sSe,"CODE",{});var wtt=n(pde);fqo=r(wtt,"__init__()"),wtt.forEach(t),gqo=r(sSe," (throws an error)."),sSe.forEach(t),hqo=i(Ml),st=s(Ml,"DIV",{class:!0});var El=n(st);f(A6.$$.fragment,El),uqo=i(El),_de=s(El,"P",{});var Att=n(_de);pqo=r(Att,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Att.forEach(t),_qo=i(El),Vd=s(El,"P",{});var rW=n(Vd);bqo=r(rW,`Note:
Loading a model from its configuration file does `),bde=s(rW,"STRONG",{});var Ltt=n(bde);vqo=r(Ltt,"not"),Ltt.forEach(t),Tqo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vde=s(rW,"CODE",{});var Btt=n(vde);Fqo=r(Btt,"from_pretrained()"),Btt.forEach(t),Cqo=r(rW,"to load the model weights."),rW.forEach(t),Mqo=i(El),Tde=s(El,"P",{});var xtt=n(Tde);Eqo=r(xtt,"Examples:"),xtt.forEach(t),yqo=i(El),f(L6.$$.fragment,El),El.forEach(t),wqo=i(Ml),Ke=s(Ml,"DIV",{class:!0});var oa=n(Ke);f(B6.$$.fragment,oa),Aqo=i(oa),Fde=s(oa,"P",{});var ktt=n(Fde);Lqo=r(ktt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ktt.forEach(t),Bqo=i(oa),ns=s(oa,"P",{});var g5=n(ns);xqo=r(g5,"The model class to instantiate is selected based on the "),Cde=s(g5,"CODE",{});var Rtt=n(Cde);kqo=r(Rtt,"model_type"),Rtt.forEach(t),Rqo=r(g5,` property of the config object (either
passed as an argument or loaded from `),Mde=s(g5,"CODE",{});var Stt=n(Mde);Sqo=r(Stt,"pretrained_model_name_or_path"),Stt.forEach(t),Pqo=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ede=s(g5,"CODE",{});var Ptt=n(Ede);$qo=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),Iqo=r(g5,":"),g5.forEach(t),jqo=i(oa),ke=s(oa,"UL",{});var Oo=n(ke);v1=s(Oo,"LI",{});var d0e=n(v1);yde=s(d0e,"STRONG",{});var $tt=n(yde);Dqo=r($tt,"data2vec-audio"),$tt.forEach(t),Nqo=r(d0e," \u2014 "),kN=s(d0e,"A",{href:!0});var Itt=n(kN);qqo=r(Itt,"Data2VecAudioForCTC"),Itt.forEach(t),Oqo=r(d0e," (Data2VecAudio model)"),d0e.forEach(t),Gqo=i(Oo),T1=s(Oo,"LI",{});var c0e=n(T1);wde=s(c0e,"STRONG",{});var jtt=n(wde);Xqo=r(jtt,"hubert"),jtt.forEach(t),Vqo=r(c0e," \u2014 "),RN=s(c0e,"A",{href:!0});var Dtt=n(RN);zqo=r(Dtt,"HubertForCTC"),Dtt.forEach(t),Wqo=r(c0e," (Hubert model)"),c0e.forEach(t),Qqo=i(Oo),F1=s(Oo,"LI",{});var m0e=n(F1);Ade=s(m0e,"STRONG",{});var Ntt=n(Ade);Hqo=r(Ntt,"sew"),Ntt.forEach(t),Uqo=r(m0e," \u2014 "),SN=s(m0e,"A",{href:!0});var qtt=n(SN);Jqo=r(qtt,"SEWForCTC"),qtt.forEach(t),Yqo=r(m0e," (SEW model)"),m0e.forEach(t),Kqo=i(Oo),C1=s(Oo,"LI",{});var f0e=n(C1);Lde=s(f0e,"STRONG",{});var Ott=n(Lde);Zqo=r(Ott,"sew-d"),Ott.forEach(t),eOo=r(f0e," \u2014 "),PN=s(f0e,"A",{href:!0});var Gtt=n(PN);oOo=r(Gtt,"SEWDForCTC"),Gtt.forEach(t),rOo=r(f0e," (SEW-D model)"),f0e.forEach(t),tOo=i(Oo),M1=s(Oo,"LI",{});var g0e=n(M1);Bde=s(g0e,"STRONG",{});var Xtt=n(Bde);aOo=r(Xtt,"unispeech"),Xtt.forEach(t),sOo=r(g0e," \u2014 "),$N=s(g0e,"A",{href:!0});var Vtt=n($N);nOo=r(Vtt,"UniSpeechForCTC"),Vtt.forEach(t),lOo=r(g0e," (UniSpeech model)"),g0e.forEach(t),iOo=i(Oo),E1=s(Oo,"LI",{});var h0e=n(E1);xde=s(h0e,"STRONG",{});var ztt=n(xde);dOo=r(ztt,"unispeech-sat"),ztt.forEach(t),cOo=r(h0e," \u2014 "),IN=s(h0e,"A",{href:!0});var Wtt=n(IN);mOo=r(Wtt,"UniSpeechSatForCTC"),Wtt.forEach(t),fOo=r(h0e," (UniSpeechSat model)"),h0e.forEach(t),gOo=i(Oo),y1=s(Oo,"LI",{});var u0e=n(y1);kde=s(u0e,"STRONG",{});var Qtt=n(kde);hOo=r(Qtt,"wav2vec2"),Qtt.forEach(t),uOo=r(u0e," \u2014 "),jN=s(u0e,"A",{href:!0});var Htt=n(jN);pOo=r(Htt,"Wav2Vec2ForCTC"),Htt.forEach(t),_Oo=r(u0e," (Wav2Vec2 model)"),u0e.forEach(t),bOo=i(Oo),w1=s(Oo,"LI",{});var p0e=n(w1);Rde=s(p0e,"STRONG",{});var Utt=n(Rde);vOo=r(Utt,"wavlm"),Utt.forEach(t),TOo=r(p0e," \u2014 "),DN=s(p0e,"A",{href:!0});var Jtt=n(DN);FOo=r(Jtt,"WavLMForCTC"),Jtt.forEach(t),COo=r(p0e," (WavLM model)"),p0e.forEach(t),Oo.forEach(t),MOo=i(oa),A1=s(oa,"P",{});var _0e=n(A1);EOo=r(_0e,"The model is set in evaluation mode by default using "),Sde=s(_0e,"CODE",{});var Ytt=n(Sde);yOo=r(Ytt,"model.eval()"),Ytt.forEach(t),wOo=r(_0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=s(_0e,"CODE",{});var Ktt=n(Pde);AOo=r(Ktt,"model.train()"),Ktt.forEach(t),_0e.forEach(t),LOo=i(oa),$de=s(oa,"P",{});var Ztt=n($de);BOo=r(Ztt,"Examples:"),Ztt.forEach(t),xOo=i(oa),f(x6.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Yxe=i(d),zd=s(d,"H2",{class:!0});var nSe=n(zd);L1=s(nSe,"A",{id:!0,class:!0,href:!0});var eat=n(L1);Ide=s(eat,"SPAN",{});var oat=n(Ide);f(k6.$$.fragment,oat),oat.forEach(t),eat.forEach(t),kOo=i(nSe),jde=s(nSe,"SPAN",{});var rat=n(jde);ROo=r(rat,"AutoModelForSpeechSeq2Seq"),rat.forEach(t),nSe.forEach(t),Kxe=i(d),fr=s(d,"DIV",{class:!0});var yl=n(fr);f(R6.$$.fragment,yl),SOo=i(yl),Wd=s(yl,"P",{});var tW=n(Wd);POo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Dde=s(tW,"CODE",{});var tat=n(Dde);$Oo=r(tat,"from_pretrained()"),tat.forEach(t),IOo=r(tW,"class method or the "),Nde=s(tW,"CODE",{});var aat=n(Nde);jOo=r(aat,"from_config()"),aat.forEach(t),DOo=r(tW,`class
method.`),tW.forEach(t),NOo=i(yl),S6=s(yl,"P",{});var lSe=n(S6);qOo=r(lSe,"This class cannot be instantiated directly using "),qde=s(lSe,"CODE",{});var sat=n(qde);OOo=r(sat,"__init__()"),sat.forEach(t),GOo=r(lSe," (throws an error)."),lSe.forEach(t),XOo=i(yl),nt=s(yl,"DIV",{class:!0});var wl=n(nt);f(P6.$$.fragment,wl),VOo=i(wl),Ode=s(wl,"P",{});var nat=n(Ode);zOo=r(nat,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nat.forEach(t),WOo=i(wl),Qd=s(wl,"P",{});var aW=n(Qd);QOo=r(aW,`Note:
Loading a model from its configuration file does `),Gde=s(aW,"STRONG",{});var lat=n(Gde);HOo=r(lat,"not"),lat.forEach(t),UOo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xde=s(aW,"CODE",{});var iat=n(Xde);JOo=r(iat,"from_pretrained()"),iat.forEach(t),YOo=r(aW,"to load the model weights."),aW.forEach(t),KOo=i(wl),Vde=s(wl,"P",{});var dat=n(Vde);ZOo=r(dat,"Examples:"),dat.forEach(t),eGo=i(wl),f($6.$$.fragment,wl),wl.forEach(t),oGo=i(yl),Ze=s(yl,"DIV",{class:!0});var ra=n(Ze);f(I6.$$.fragment,ra),rGo=i(ra),zde=s(ra,"P",{});var cat=n(zde);tGo=r(cat,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cat.forEach(t),aGo=i(ra),ls=s(ra,"P",{});var h5=n(ls);sGo=r(h5,"The model class to instantiate is selected based on the "),Wde=s(h5,"CODE",{});var mat=n(Wde);nGo=r(mat,"model_type"),mat.forEach(t),lGo=r(h5,` property of the config object (either
passed as an argument or loaded from `),Qde=s(h5,"CODE",{});var fat=n(Qde);iGo=r(fat,"pretrained_model_name_or_path"),fat.forEach(t),dGo=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hde=s(h5,"CODE",{});var gat=n(Hde);cGo=r(gat,"pretrained_model_name_or_path"),gat.forEach(t),mGo=r(h5,":"),h5.forEach(t),fGo=i(ra),j6=s(ra,"UL",{});var iSe=n(j6);B1=s(iSe,"LI",{});var b0e=n(B1);Ude=s(b0e,"STRONG",{});var hat=n(Ude);gGo=r(hat,"speech-encoder-decoder"),hat.forEach(t),hGo=r(b0e," \u2014 "),NN=s(b0e,"A",{href:!0});var uat=n(NN);uGo=r(uat,"SpeechEncoderDecoderModel"),uat.forEach(t),pGo=r(b0e," (Speech Encoder decoder model)"),b0e.forEach(t),_Go=i(iSe),x1=s(iSe,"LI",{});var v0e=n(x1);Jde=s(v0e,"STRONG",{});var pat=n(Jde);bGo=r(pat,"speech_to_text"),pat.forEach(t),vGo=r(v0e," \u2014 "),qN=s(v0e,"A",{href:!0});var _at=n(qN);TGo=r(_at,"Speech2TextForConditionalGeneration"),_at.forEach(t),FGo=r(v0e," (Speech2Text model)"),v0e.forEach(t),iSe.forEach(t),CGo=i(ra),k1=s(ra,"P",{});var T0e=n(k1);MGo=r(T0e,"The model is set in evaluation mode by default using "),Yde=s(T0e,"CODE",{});var bat=n(Yde);EGo=r(bat,"model.eval()"),bat.forEach(t),yGo=r(T0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kde=s(T0e,"CODE",{});var vat=n(Kde);wGo=r(vat,"model.train()"),vat.forEach(t),T0e.forEach(t),AGo=i(ra),Zde=s(ra,"P",{});var Tat=n(Zde);LGo=r(Tat,"Examples:"),Tat.forEach(t),BGo=i(ra),f(D6.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Zxe=i(d),Hd=s(d,"H2",{class:!0});var dSe=n(Hd);R1=s(dSe,"A",{id:!0,class:!0,href:!0});var Fat=n(R1);ece=s(Fat,"SPAN",{});var Cat=n(ece);f(N6.$$.fragment,Cat),Cat.forEach(t),Fat.forEach(t),xGo=i(dSe),oce=s(dSe,"SPAN",{});var Mat=n(oce);kGo=r(Mat,"AutoModelForAudioXVector"),Mat.forEach(t),dSe.forEach(t),eke=i(d),gr=s(d,"DIV",{class:!0});var Al=n(gr);f(q6.$$.fragment,Al),RGo=i(Al),Ud=s(Al,"P",{});var sW=n(Ud);SGo=r(sW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rce=s(sW,"CODE",{});var Eat=n(rce);PGo=r(Eat,"from_pretrained()"),Eat.forEach(t),$Go=r(sW,"class method or the "),tce=s(sW,"CODE",{});var yat=n(tce);IGo=r(yat,"from_config()"),yat.forEach(t),jGo=r(sW,`class
method.`),sW.forEach(t),DGo=i(Al),O6=s(Al,"P",{});var cSe=n(O6);NGo=r(cSe,"This class cannot be instantiated directly using "),ace=s(cSe,"CODE",{});var wat=n(ace);qGo=r(wat,"__init__()"),wat.forEach(t),OGo=r(cSe," (throws an error)."),cSe.forEach(t),GGo=i(Al),lt=s(Al,"DIV",{class:!0});var Ll=n(lt);f(G6.$$.fragment,Ll),XGo=i(Ll),sce=s(Ll,"P",{});var Aat=n(sce);VGo=r(Aat,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Aat.forEach(t),zGo=i(Ll),Jd=s(Ll,"P",{});var nW=n(Jd);WGo=r(nW,`Note:
Loading a model from its configuration file does `),nce=s(nW,"STRONG",{});var Lat=n(nce);QGo=r(Lat,"not"),Lat.forEach(t),HGo=r(nW,` load the model weights. It only affects the
model\u2019s configuration. Use `),lce=s(nW,"CODE",{});var Bat=n(lce);UGo=r(Bat,"from_pretrained()"),Bat.forEach(t),JGo=r(nW,"to load the model weights."),nW.forEach(t),YGo=i(Ll),ice=s(Ll,"P",{});var xat=n(ice);KGo=r(xat,"Examples:"),xat.forEach(t),ZGo=i(Ll),f(X6.$$.fragment,Ll),Ll.forEach(t),eXo=i(Al),eo=s(Al,"DIV",{class:!0});var ta=n(eo);f(V6.$$.fragment,ta),oXo=i(ta),dce=s(ta,"P",{});var kat=n(dce);rXo=r(kat,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),kat.forEach(t),tXo=i(ta),is=s(ta,"P",{});var u5=n(is);aXo=r(u5,"The model class to instantiate is selected based on the "),cce=s(u5,"CODE",{});var Rat=n(cce);sXo=r(Rat,"model_type"),Rat.forEach(t),nXo=r(u5,` property of the config object (either
passed as an argument or loaded from `),mce=s(u5,"CODE",{});var Sat=n(mce);lXo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),iXo=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=s(u5,"CODE",{});var Pat=n(fce);dXo=r(Pat,"pretrained_model_name_or_path"),Pat.forEach(t),cXo=r(u5,":"),u5.forEach(t),mXo=i(ta),ds=s(ta,"UL",{});var p5=n(ds);S1=s(p5,"LI",{});var F0e=n(S1);gce=s(F0e,"STRONG",{});var $at=n(gce);fXo=r($at,"data2vec-audio"),$at.forEach(t),gXo=r(F0e," \u2014 "),ON=s(F0e,"A",{href:!0});var Iat=n(ON);hXo=r(Iat,"Data2VecAudioForXVector"),Iat.forEach(t),uXo=r(F0e," (Data2VecAudio model)"),F0e.forEach(t),pXo=i(p5),P1=s(p5,"LI",{});var C0e=n(P1);hce=s(C0e,"STRONG",{});var jat=n(hce);_Xo=r(jat,"unispeech-sat"),jat.forEach(t),bXo=r(C0e," \u2014 "),GN=s(C0e,"A",{href:!0});var Dat=n(GN);vXo=r(Dat,"UniSpeechSatForXVector"),Dat.forEach(t),TXo=r(C0e," (UniSpeechSat model)"),C0e.forEach(t),FXo=i(p5),$1=s(p5,"LI",{});var M0e=n($1);uce=s(M0e,"STRONG",{});var Nat=n(uce);CXo=r(Nat,"wav2vec2"),Nat.forEach(t),MXo=r(M0e," \u2014 "),XN=s(M0e,"A",{href:!0});var qat=n(XN);EXo=r(qat,"Wav2Vec2ForXVector"),qat.forEach(t),yXo=r(M0e," (Wav2Vec2 model)"),M0e.forEach(t),wXo=i(p5),I1=s(p5,"LI",{});var E0e=n(I1);pce=s(E0e,"STRONG",{});var Oat=n(pce);AXo=r(Oat,"wavlm"),Oat.forEach(t),LXo=r(E0e," \u2014 "),VN=s(E0e,"A",{href:!0});var Gat=n(VN);BXo=r(Gat,"WavLMForXVector"),Gat.forEach(t),xXo=r(E0e," (WavLM model)"),E0e.forEach(t),p5.forEach(t),kXo=i(ta),j1=s(ta,"P",{});var y0e=n(j1);RXo=r(y0e,"The model is set in evaluation mode by default using "),_ce=s(y0e,"CODE",{});var Xat=n(_ce);SXo=r(Xat,"model.eval()"),Xat.forEach(t),PXo=r(y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bce=s(y0e,"CODE",{});var Vat=n(bce);$Xo=r(Vat,"model.train()"),Vat.forEach(t),y0e.forEach(t),IXo=i(ta),vce=s(ta,"P",{});var zat=n(vce);jXo=r(zat,"Examples:"),zat.forEach(t),DXo=i(ta),f(z6.$$.fragment,ta),ta.forEach(t),Al.forEach(t),oke=i(d),Yd=s(d,"H2",{class:!0});var mSe=n(Yd);D1=s(mSe,"A",{id:!0,class:!0,href:!0});var Wat=n(D1);Tce=s(Wat,"SPAN",{});var Qat=n(Tce);f(W6.$$.fragment,Qat),Qat.forEach(t),Wat.forEach(t),NXo=i(mSe),Fce=s(mSe,"SPAN",{});var Hat=n(Fce);qXo=r(Hat,"AutoModelForMaskedImageModeling"),Hat.forEach(t),mSe.forEach(t),rke=i(d),hr=s(d,"DIV",{class:!0});var Bl=n(hr);f(Q6.$$.fragment,Bl),OXo=i(Bl),Kd=s(Bl,"P",{});var lW=n(Kd);GXo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Cce=s(lW,"CODE",{});var Uat=n(Cce);XXo=r(Uat,"from_pretrained()"),Uat.forEach(t),VXo=r(lW,"class method or the "),Mce=s(lW,"CODE",{});var Jat=n(Mce);zXo=r(Jat,"from_config()"),Jat.forEach(t),WXo=r(lW,`class
method.`),lW.forEach(t),QXo=i(Bl),H6=s(Bl,"P",{});var fSe=n(H6);HXo=r(fSe,"This class cannot be instantiated directly using "),Ece=s(fSe,"CODE",{});var Yat=n(Ece);UXo=r(Yat,"__init__()"),Yat.forEach(t),JXo=r(fSe," (throws an error)."),fSe.forEach(t),YXo=i(Bl),it=s(Bl,"DIV",{class:!0});var xl=n(it);f(U6.$$.fragment,xl),KXo=i(xl),yce=s(xl,"P",{});var Kat=n(yce);ZXo=r(Kat,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Kat.forEach(t),eVo=i(xl),Zd=s(xl,"P",{});var iW=n(Zd);oVo=r(iW,`Note:
Loading a model from its configuration file does `),wce=s(iW,"STRONG",{});var Zat=n(wce);rVo=r(Zat,"not"),Zat.forEach(t),tVo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ace=s(iW,"CODE",{});var est=n(Ace);aVo=r(est,"from_pretrained()"),est.forEach(t),sVo=r(iW,"to load the model weights."),iW.forEach(t),nVo=i(xl),Lce=s(xl,"P",{});var ost=n(Lce);lVo=r(ost,"Examples:"),ost.forEach(t),iVo=i(xl),f(J6.$$.fragment,xl),xl.forEach(t),dVo=i(Bl),oo=s(Bl,"DIV",{class:!0});var aa=n(oo);f(Y6.$$.fragment,aa),cVo=i(aa),Bce=s(aa,"P",{});var rst=n(Bce);mVo=r(rst,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rst.forEach(t),fVo=i(aa),cs=s(aa,"P",{});var _5=n(cs);gVo=r(_5,"The model class to instantiate is selected based on the "),xce=s(_5,"CODE",{});var tst=n(xce);hVo=r(tst,"model_type"),tst.forEach(t),uVo=r(_5,` property of the config object (either
passed as an argument or loaded from `),kce=s(_5,"CODE",{});var ast=n(kce);pVo=r(ast,"pretrained_model_name_or_path"),ast.forEach(t),_Vo=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rce=s(_5,"CODE",{});var sst=n(Rce);bVo=r(sst,"pretrained_model_name_or_path"),sst.forEach(t),vVo=r(_5,":"),_5.forEach(t),TVo=i(aa),ec=s(aa,"UL",{});var dW=n(ec);N1=s(dW,"LI",{});var w0e=n(N1);Sce=s(w0e,"STRONG",{});var nst=n(Sce);FVo=r(nst,"deit"),nst.forEach(t),CVo=r(w0e," \u2014 "),zN=s(w0e,"A",{href:!0});var lst=n(zN);MVo=r(lst,"DeiTForMaskedImageModeling"),lst.forEach(t),EVo=r(w0e," (DeiT model)"),w0e.forEach(t),yVo=i(dW),q1=s(dW,"LI",{});var A0e=n(q1);Pce=s(A0e,"STRONG",{});var ist=n(Pce);wVo=r(ist,"swin"),ist.forEach(t),AVo=r(A0e," \u2014 "),WN=s(A0e,"A",{href:!0});var dst=n(WN);LVo=r(dst,"SwinForMaskedImageModeling"),dst.forEach(t),BVo=r(A0e," (Swin model)"),A0e.forEach(t),xVo=i(dW),O1=s(dW,"LI",{});var L0e=n(O1);$ce=s(L0e,"STRONG",{});var cst=n($ce);kVo=r(cst,"vit"),cst.forEach(t),RVo=r(L0e," \u2014 "),QN=s(L0e,"A",{href:!0});var mst=n(QN);SVo=r(mst,"ViTForMaskedImageModeling"),mst.forEach(t),PVo=r(L0e," (ViT model)"),L0e.forEach(t),dW.forEach(t),$Vo=i(aa),G1=s(aa,"P",{});var B0e=n(G1);IVo=r(B0e,"The model is set in evaluation mode by default using "),Ice=s(B0e,"CODE",{});var fst=n(Ice);jVo=r(fst,"model.eval()"),fst.forEach(t),DVo=r(B0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jce=s(B0e,"CODE",{});var gst=n(jce);NVo=r(gst,"model.train()"),gst.forEach(t),B0e.forEach(t),qVo=i(aa),Dce=s(aa,"P",{});var hst=n(Dce);OVo=r(hst,"Examples:"),hst.forEach(t),GVo=i(aa),f(K6.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),tke=i(d),oc=s(d,"H2",{class:!0});var gSe=n(oc);X1=s(gSe,"A",{id:!0,class:!0,href:!0});var ust=n(X1);Nce=s(ust,"SPAN",{});var pst=n(Nce);f(Z6.$$.fragment,pst),pst.forEach(t),ust.forEach(t),XVo=i(gSe),qce=s(gSe,"SPAN",{});var _st=n(qce);VVo=r(_st,"AutoModelForObjectDetection"),_st.forEach(t),gSe.forEach(t),ake=i(d),ur=s(d,"DIV",{class:!0});var kl=n(ur);f(eA.$$.fragment,kl),zVo=i(kl),rc=s(kl,"P",{});var cW=n(rc);WVo=r(cW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Oce=s(cW,"CODE",{});var bst=n(Oce);QVo=r(bst,"from_pretrained()"),bst.forEach(t),HVo=r(cW,"class method or the "),Gce=s(cW,"CODE",{});var vst=n(Gce);UVo=r(vst,"from_config()"),vst.forEach(t),JVo=r(cW,`class
method.`),cW.forEach(t),YVo=i(kl),oA=s(kl,"P",{});var hSe=n(oA);KVo=r(hSe,"This class cannot be instantiated directly using "),Xce=s(hSe,"CODE",{});var Tst=n(Xce);ZVo=r(Tst,"__init__()"),Tst.forEach(t),ezo=r(hSe," (throws an error)."),hSe.forEach(t),ozo=i(kl),dt=s(kl,"DIV",{class:!0});var Rl=n(dt);f(rA.$$.fragment,Rl),rzo=i(Rl),Vce=s(Rl,"P",{});var Fst=n(Vce);tzo=r(Fst,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Fst.forEach(t),azo=i(Rl),tc=s(Rl,"P",{});var mW=n(tc);szo=r(mW,`Note:
Loading a model from its configuration file does `),zce=s(mW,"STRONG",{});var Cst=n(zce);nzo=r(Cst,"not"),Cst.forEach(t),lzo=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=s(mW,"CODE",{});var Mst=n(Wce);izo=r(Mst,"from_pretrained()"),Mst.forEach(t),dzo=r(mW,"to load the model weights."),mW.forEach(t),czo=i(Rl),Qce=s(Rl,"P",{});var Est=n(Qce);mzo=r(Est,"Examples:"),Est.forEach(t),fzo=i(Rl),f(tA.$$.fragment,Rl),Rl.forEach(t),gzo=i(kl),ro=s(kl,"DIV",{class:!0});var sa=n(ro);f(aA.$$.fragment,sa),hzo=i(sa),Hce=s(sa,"P",{});var yst=n(Hce);uzo=r(yst,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),yst.forEach(t),pzo=i(sa),ms=s(sa,"P",{});var b5=n(ms);_zo=r(b5,"The model class to instantiate is selected based on the "),Uce=s(b5,"CODE",{});var wst=n(Uce);bzo=r(wst,"model_type"),wst.forEach(t),vzo=r(b5,` property of the config object (either
passed as an argument or loaded from `),Jce=s(b5,"CODE",{});var Ast=n(Jce);Tzo=r(Ast,"pretrained_model_name_or_path"),Ast.forEach(t),Fzo=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=s(b5,"CODE",{});var Lst=n(Yce);Czo=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),Mzo=r(b5,":"),b5.forEach(t),Ezo=i(sa),Kce=s(sa,"UL",{});var Bst=n(Kce);V1=s(Bst,"LI",{});var x0e=n(V1);Zce=s(x0e,"STRONG",{});var xst=n(Zce);yzo=r(xst,"detr"),xst.forEach(t),wzo=r(x0e," \u2014 "),HN=s(x0e,"A",{href:!0});var kst=n(HN);Azo=r(kst,"DetrForObjectDetection"),kst.forEach(t),Lzo=r(x0e," (DETR model)"),x0e.forEach(t),Bst.forEach(t),Bzo=i(sa),z1=s(sa,"P",{});var k0e=n(z1);xzo=r(k0e,"The model is set in evaluation mode by default using "),eme=s(k0e,"CODE",{});var Rst=n(eme);kzo=r(Rst,"model.eval()"),Rst.forEach(t),Rzo=r(k0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=s(k0e,"CODE",{});var Sst=n(ome);Szo=r(Sst,"model.train()"),Sst.forEach(t),k0e.forEach(t),Pzo=i(sa),rme=s(sa,"P",{});var Pst=n(rme);$zo=r(Pst,"Examples:"),Pst.forEach(t),Izo=i(sa),f(sA.$$.fragment,sa),sa.forEach(t),kl.forEach(t),ske=i(d),ac=s(d,"H2",{class:!0});var uSe=n(ac);W1=s(uSe,"A",{id:!0,class:!0,href:!0});var $st=n(W1);tme=s($st,"SPAN",{});var Ist=n(tme);f(nA.$$.fragment,Ist),Ist.forEach(t),$st.forEach(t),jzo=i(uSe),ame=s(uSe,"SPAN",{});var jst=n(ame);Dzo=r(jst,"AutoModelForImageSegmentation"),jst.forEach(t),uSe.forEach(t),nke=i(d),pr=s(d,"DIV",{class:!0});var Sl=n(pr);f(lA.$$.fragment,Sl),Nzo=i(Sl),sc=s(Sl,"P",{});var fW=n(sc);qzo=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sme=s(fW,"CODE",{});var Dst=n(sme);Ozo=r(Dst,"from_pretrained()"),Dst.forEach(t),Gzo=r(fW,"class method or the "),nme=s(fW,"CODE",{});var Nst=n(nme);Xzo=r(Nst,"from_config()"),Nst.forEach(t),Vzo=r(fW,`class
method.`),fW.forEach(t),zzo=i(Sl),iA=s(Sl,"P",{});var pSe=n(iA);Wzo=r(pSe,"This class cannot be instantiated directly using "),lme=s(pSe,"CODE",{});var qst=n(lme);Qzo=r(qst,"__init__()"),qst.forEach(t),Hzo=r(pSe," (throws an error)."),pSe.forEach(t),Uzo=i(Sl),ct=s(Sl,"DIV",{class:!0});var Pl=n(ct);f(dA.$$.fragment,Pl),Jzo=i(Pl),ime=s(Pl,"P",{});var Ost=n(ime);Yzo=r(Ost,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ost.forEach(t),Kzo=i(Pl),nc=s(Pl,"P",{});var gW=n(nc);Zzo=r(gW,`Note:
Loading a model from its configuration file does `),dme=s(gW,"STRONG",{});var Gst=n(dme);eWo=r(Gst,"not"),Gst.forEach(t),oWo=r(gW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cme=s(gW,"CODE",{});var Xst=n(cme);rWo=r(Xst,"from_pretrained()"),Xst.forEach(t),tWo=r(gW,"to load the model weights."),gW.forEach(t),aWo=i(Pl),mme=s(Pl,"P",{});var Vst=n(mme);sWo=r(Vst,"Examples:"),Vst.forEach(t),nWo=i(Pl),f(cA.$$.fragment,Pl),Pl.forEach(t),lWo=i(Sl),to=s(Sl,"DIV",{class:!0});var na=n(to);f(mA.$$.fragment,na),iWo=i(na),fme=s(na,"P",{});var zst=n(fme);dWo=r(zst,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),zst.forEach(t),cWo=i(na),fs=s(na,"P",{});var v5=n(fs);mWo=r(v5,"The model class to instantiate is selected based on the "),gme=s(v5,"CODE",{});var Wst=n(gme);fWo=r(Wst,"model_type"),Wst.forEach(t),gWo=r(v5,` property of the config object (either
passed as an argument or loaded from `),hme=s(v5,"CODE",{});var Qst=n(hme);hWo=r(Qst,"pretrained_model_name_or_path"),Qst.forEach(t),uWo=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=s(v5,"CODE",{});var Hst=n(ume);pWo=r(Hst,"pretrained_model_name_or_path"),Hst.forEach(t),_Wo=r(v5,":"),v5.forEach(t),bWo=i(na),pme=s(na,"UL",{});var Ust=n(pme);Q1=s(Ust,"LI",{});var R0e=n(Q1);_me=s(R0e,"STRONG",{});var Jst=n(_me);vWo=r(Jst,"detr"),Jst.forEach(t),TWo=r(R0e," \u2014 "),UN=s(R0e,"A",{href:!0});var Yst=n(UN);FWo=r(Yst,"DetrForSegmentation"),Yst.forEach(t),CWo=r(R0e," (DETR model)"),R0e.forEach(t),Ust.forEach(t),MWo=i(na),H1=s(na,"P",{});var S0e=n(H1);EWo=r(S0e,"The model is set in evaluation mode by default using "),bme=s(S0e,"CODE",{});var Kst=n(bme);yWo=r(Kst,"model.eval()"),Kst.forEach(t),wWo=r(S0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vme=s(S0e,"CODE",{});var Zst=n(vme);AWo=r(Zst,"model.train()"),Zst.forEach(t),S0e.forEach(t),LWo=i(na),Tme=s(na,"P",{});var ent=n(Tme);BWo=r(ent,"Examples:"),ent.forEach(t),xWo=i(na),f(fA.$$.fragment,na),na.forEach(t),Sl.forEach(t),lke=i(d),lc=s(d,"H2",{class:!0});var _Se=n(lc);U1=s(_Se,"A",{id:!0,class:!0,href:!0});var ont=n(U1);Fme=s(ont,"SPAN",{});var rnt=n(Fme);f(gA.$$.fragment,rnt),rnt.forEach(t),ont.forEach(t),kWo=i(_Se),Cme=s(_Se,"SPAN",{});var tnt=n(Cme);RWo=r(tnt,"AutoModelForSemanticSegmentation"),tnt.forEach(t),_Se.forEach(t),ike=i(d),_r=s(d,"DIV",{class:!0});var $l=n(_r);f(hA.$$.fragment,$l),SWo=i($l),ic=s($l,"P",{});var hW=n(ic);PWo=r(hW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Mme=s(hW,"CODE",{});var ant=n(Mme);$Wo=r(ant,"from_pretrained()"),ant.forEach(t),IWo=r(hW,"class method or the "),Eme=s(hW,"CODE",{});var snt=n(Eme);jWo=r(snt,"from_config()"),snt.forEach(t),DWo=r(hW,`class
method.`),hW.forEach(t),NWo=i($l),uA=s($l,"P",{});var bSe=n(uA);qWo=r(bSe,"This class cannot be instantiated directly using "),yme=s(bSe,"CODE",{});var nnt=n(yme);OWo=r(nnt,"__init__()"),nnt.forEach(t),GWo=r(bSe," (throws an error)."),bSe.forEach(t),XWo=i($l),mt=s($l,"DIV",{class:!0});var Il=n(mt);f(pA.$$.fragment,Il),VWo=i(Il),wme=s(Il,"P",{});var lnt=n(wme);zWo=r(lnt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),lnt.forEach(t),WWo=i(Il),dc=s(Il,"P",{});var uW=n(dc);QWo=r(uW,`Note:
Loading a model from its configuration file does `),Ame=s(uW,"STRONG",{});var int=n(Ame);HWo=r(int,"not"),int.forEach(t),UWo=r(uW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lme=s(uW,"CODE",{});var dnt=n(Lme);JWo=r(dnt,"from_pretrained()"),dnt.forEach(t),YWo=r(uW,"to load the model weights."),uW.forEach(t),KWo=i(Il),Bme=s(Il,"P",{});var cnt=n(Bme);ZWo=r(cnt,"Examples:"),cnt.forEach(t),eQo=i(Il),f(_A.$$.fragment,Il),Il.forEach(t),oQo=i($l),ao=s($l,"DIV",{class:!0});var la=n(ao);f(bA.$$.fragment,la),rQo=i(la),xme=s(la,"P",{});var mnt=n(xme);tQo=r(mnt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mnt.forEach(t),aQo=i(la),gs=s(la,"P",{});var T5=n(gs);sQo=r(T5,"The model class to instantiate is selected based on the "),kme=s(T5,"CODE",{});var fnt=n(kme);nQo=r(fnt,"model_type"),fnt.forEach(t),lQo=r(T5,` property of the config object (either
passed as an argument or loaded from `),Rme=s(T5,"CODE",{});var gnt=n(Rme);iQo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),dQo=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sme=s(T5,"CODE",{});var hnt=n(Sme);cQo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),mQo=r(T5,":"),T5.forEach(t),fQo=i(la),vA=s(la,"UL",{});var vSe=n(vA);J1=s(vSe,"LI",{});var P0e=n(J1);Pme=s(P0e,"STRONG",{});var unt=n(Pme);gQo=r(unt,"beit"),unt.forEach(t),hQo=r(P0e," \u2014 "),JN=s(P0e,"A",{href:!0});var pnt=n(JN);uQo=r(pnt,"BeitForSemanticSegmentation"),pnt.forEach(t),pQo=r(P0e," (BEiT model)"),P0e.forEach(t),_Qo=i(vSe),Y1=s(vSe,"LI",{});var $0e=n(Y1);$me=s($0e,"STRONG",{});var _nt=n($me);bQo=r(_nt,"segformer"),_nt.forEach(t),vQo=r($0e," \u2014 "),YN=s($0e,"A",{href:!0});var bnt=n(YN);TQo=r(bnt,"SegformerForSemanticSegmentation"),bnt.forEach(t),FQo=r($0e," (SegFormer model)"),$0e.forEach(t),vSe.forEach(t),CQo=i(la),K1=s(la,"P",{});var I0e=n(K1);MQo=r(I0e,"The model is set in evaluation mode by default using "),Ime=s(I0e,"CODE",{});var vnt=n(Ime);EQo=r(vnt,"model.eval()"),vnt.forEach(t),yQo=r(I0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=s(I0e,"CODE",{});var Tnt=n(jme);wQo=r(Tnt,"model.train()"),Tnt.forEach(t),I0e.forEach(t),AQo=i(la),Dme=s(la,"P",{});var Fnt=n(Dme);LQo=r(Fnt,"Examples:"),Fnt.forEach(t),BQo=i(la),f(TA.$$.fragment,la),la.forEach(t),$l.forEach(t),dke=i(d),cc=s(d,"H2",{class:!0});var TSe=n(cc);Z1=s(TSe,"A",{id:!0,class:!0,href:!0});var Cnt=n(Z1);Nme=s(Cnt,"SPAN",{});var Mnt=n(Nme);f(FA.$$.fragment,Mnt),Mnt.forEach(t),Cnt.forEach(t),xQo=i(TSe),qme=s(TSe,"SPAN",{});var Ent=n(qme);kQo=r(Ent,"AutoModelForInstanceSegmentation"),Ent.forEach(t),TSe.forEach(t),cke=i(d),br=s(d,"DIV",{class:!0});var jl=n(br);f(CA.$$.fragment,jl),RQo=i(jl),mc=s(jl,"P",{});var pW=n(mc);SQo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ome=s(pW,"CODE",{});var ynt=n(Ome);PQo=r(ynt,"from_pretrained()"),ynt.forEach(t),$Qo=r(pW,"class method or the "),Gme=s(pW,"CODE",{});var wnt=n(Gme);IQo=r(wnt,"from_config()"),wnt.forEach(t),jQo=r(pW,`class
method.`),pW.forEach(t),DQo=i(jl),MA=s(jl,"P",{});var FSe=n(MA);NQo=r(FSe,"This class cannot be instantiated directly using "),Xme=s(FSe,"CODE",{});var Ant=n(Xme);qQo=r(Ant,"__init__()"),Ant.forEach(t),OQo=r(FSe," (throws an error)."),FSe.forEach(t),GQo=i(jl),ft=s(jl,"DIV",{class:!0});var Dl=n(ft);f(EA.$$.fragment,Dl),XQo=i(Dl),Vme=s(Dl,"P",{});var Lnt=n(Vme);VQo=r(Lnt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Lnt.forEach(t),zQo=i(Dl),fc=s(Dl,"P",{});var _W=n(fc);WQo=r(_W,`Note:
Loading a model from its configuration file does `),zme=s(_W,"STRONG",{});var Bnt=n(zme);QQo=r(Bnt,"not"),Bnt.forEach(t),HQo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wme=s(_W,"CODE",{});var xnt=n(Wme);UQo=r(xnt,"from_pretrained()"),xnt.forEach(t),JQo=r(_W,"to load the model weights."),_W.forEach(t),YQo=i(Dl),Qme=s(Dl,"P",{});var knt=n(Qme);KQo=r(knt,"Examples:"),knt.forEach(t),ZQo=i(Dl),f(yA.$$.fragment,Dl),Dl.forEach(t),eHo=i(jl),so=s(jl,"DIV",{class:!0});var ia=n(so);f(wA.$$.fragment,ia),oHo=i(ia),Hme=s(ia,"P",{});var Rnt=n(Hme);rHo=r(Rnt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rnt.forEach(t),tHo=i(ia),hs=s(ia,"P",{});var F5=n(hs);aHo=r(F5,"The model class to instantiate is selected based on the "),Ume=s(F5,"CODE",{});var Snt=n(Ume);sHo=r(Snt,"model_type"),Snt.forEach(t),nHo=r(F5,` property of the config object (either
passed as an argument or loaded from `),Jme=s(F5,"CODE",{});var Pnt=n(Jme);lHo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),iHo=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=s(F5,"CODE",{});var $nt=n(Yme);dHo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),cHo=r(F5,":"),F5.forEach(t),mHo=i(ia),Kme=s(ia,"UL",{});var Int=n(Kme);eF=s(Int,"LI",{});var j0e=n(eF);Zme=s(j0e,"STRONG",{});var jnt=n(Zme);fHo=r(jnt,"maskformer"),jnt.forEach(t),gHo=r(j0e," \u2014 "),KN=s(j0e,"A",{href:!0});var Dnt=n(KN);hHo=r(Dnt,"MaskFormerForInstanceSegmentation"),Dnt.forEach(t),uHo=r(j0e," (MaskFormer model)"),j0e.forEach(t),Int.forEach(t),pHo=i(ia),oF=s(ia,"P",{});var D0e=n(oF);_Ho=r(D0e,"The model is set in evaluation mode by default using "),efe=s(D0e,"CODE",{});var Nnt=n(efe);bHo=r(Nnt,"model.eval()"),Nnt.forEach(t),vHo=r(D0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=s(D0e,"CODE",{});var qnt=n(ofe);THo=r(qnt,"model.train()"),qnt.forEach(t),D0e.forEach(t),FHo=i(ia),rfe=s(ia,"P",{});var Ont=n(rfe);CHo=r(Ont,"Examples:"),Ont.forEach(t),MHo=i(ia),f(AA.$$.fragment,ia),ia.forEach(t),jl.forEach(t),mke=i(d),gc=s(d,"H2",{class:!0});var CSe=n(gc);rF=s(CSe,"A",{id:!0,class:!0,href:!0});var Gnt=n(rF);tfe=s(Gnt,"SPAN",{});var Xnt=n(tfe);f(LA.$$.fragment,Xnt),Xnt.forEach(t),Gnt.forEach(t),EHo=i(CSe),afe=s(CSe,"SPAN",{});var Vnt=n(afe);yHo=r(Vnt,"TFAutoModel"),Vnt.forEach(t),CSe.forEach(t),fke=i(d),vr=s(d,"DIV",{class:!0});var Nl=n(vr);f(BA.$$.fragment,Nl),wHo=i(Nl),hc=s(Nl,"P",{});var bW=n(hc);AHo=r(bW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sfe=s(bW,"CODE",{});var znt=n(sfe);LHo=r(znt,"from_pretrained()"),znt.forEach(t),BHo=r(bW,"class method or the "),nfe=s(bW,"CODE",{});var Wnt=n(nfe);xHo=r(Wnt,"from_config()"),Wnt.forEach(t),kHo=r(bW,`class
method.`),bW.forEach(t),RHo=i(Nl),xA=s(Nl,"P",{});var MSe=n(xA);SHo=r(MSe,"This class cannot be instantiated directly using "),lfe=s(MSe,"CODE",{});var Qnt=n(lfe);PHo=r(Qnt,"__init__()"),Qnt.forEach(t),$Ho=r(MSe," (throws an error)."),MSe.forEach(t),IHo=i(Nl),gt=s(Nl,"DIV",{class:!0});var ql=n(gt);f(kA.$$.fragment,ql),jHo=i(ql),ife=s(ql,"P",{});var Hnt=n(ife);DHo=r(Hnt,"Instantiates one of the base model classes of the library from a configuration."),Hnt.forEach(t),NHo=i(ql),uc=s(ql,"P",{});var vW=n(uc);qHo=r(vW,`Note:
Loading a model from its configuration file does `),dfe=s(vW,"STRONG",{});var Unt=n(dfe);OHo=r(Unt,"not"),Unt.forEach(t),GHo=r(vW,` load the model weights. It only affects the
model\u2019s configuration. Use `),cfe=s(vW,"CODE",{});var Jnt=n(cfe);XHo=r(Jnt,"from_pretrained()"),Jnt.forEach(t),VHo=r(vW,"to load the model weights."),vW.forEach(t),zHo=i(ql),mfe=s(ql,"P",{});var Ynt=n(mfe);WHo=r(Ynt,"Examples:"),Ynt.forEach(t),QHo=i(ql),f(RA.$$.fragment,ql),ql.forEach(t),HHo=i(Nl),ho=s(Nl,"DIV",{class:!0});var ua=n(ho);f(SA.$$.fragment,ua),UHo=i(ua),ffe=s(ua,"P",{});var Knt=n(ffe);JHo=r(Knt,"Instantiate one of the base model classes of the library from a pretrained model."),Knt.forEach(t),YHo=i(ua),us=s(ua,"P",{});var C5=n(us);KHo=r(C5,"The model class to instantiate is selected based on the "),gfe=s(C5,"CODE",{});var Znt=n(gfe);ZHo=r(Znt,"model_type"),Znt.forEach(t),eUo=r(C5,` property of the config object (either
passed as an argument or loaded from `),hfe=s(C5,"CODE",{});var elt=n(hfe);oUo=r(elt,"pretrained_model_name_or_path"),elt.forEach(t),rUo=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=s(C5,"CODE",{});var olt=n(ufe);tUo=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),aUo=r(C5,":"),C5.forEach(t),sUo=i(ua),B=s(ua,"UL",{});var x=n(B);tF=s(x,"LI",{});var N0e=n(tF);pfe=s(N0e,"STRONG",{});var rlt=n(pfe);nUo=r(rlt,"albert"),rlt.forEach(t),lUo=r(N0e," \u2014 "),ZN=s(N0e,"A",{href:!0});var tlt=n(ZN);iUo=r(tlt,"TFAlbertModel"),tlt.forEach(t),dUo=r(N0e," (ALBERT model)"),N0e.forEach(t),cUo=i(x),aF=s(x,"LI",{});var q0e=n(aF);_fe=s(q0e,"STRONG",{});var alt=n(_fe);mUo=r(alt,"bart"),alt.forEach(t),fUo=r(q0e," \u2014 "),eq=s(q0e,"A",{href:!0});var slt=n(eq);gUo=r(slt,"TFBartModel"),slt.forEach(t),hUo=r(q0e," (BART model)"),q0e.forEach(t),uUo=i(x),sF=s(x,"LI",{});var O0e=n(sF);bfe=s(O0e,"STRONG",{});var nlt=n(bfe);pUo=r(nlt,"bert"),nlt.forEach(t),_Uo=r(O0e," \u2014 "),oq=s(O0e,"A",{href:!0});var llt=n(oq);bUo=r(llt,"TFBertModel"),llt.forEach(t),vUo=r(O0e," (BERT model)"),O0e.forEach(t),TUo=i(x),nF=s(x,"LI",{});var G0e=n(nF);vfe=s(G0e,"STRONG",{});var ilt=n(vfe);FUo=r(ilt,"blenderbot"),ilt.forEach(t),CUo=r(G0e," \u2014 "),rq=s(G0e,"A",{href:!0});var dlt=n(rq);MUo=r(dlt,"TFBlenderbotModel"),dlt.forEach(t),EUo=r(G0e," (Blenderbot model)"),G0e.forEach(t),yUo=i(x),lF=s(x,"LI",{});var X0e=n(lF);Tfe=s(X0e,"STRONG",{});var clt=n(Tfe);wUo=r(clt,"blenderbot-small"),clt.forEach(t),AUo=r(X0e," \u2014 "),tq=s(X0e,"A",{href:!0});var mlt=n(tq);LUo=r(mlt,"TFBlenderbotSmallModel"),mlt.forEach(t),BUo=r(X0e," (BlenderbotSmall model)"),X0e.forEach(t),xUo=i(x),iF=s(x,"LI",{});var V0e=n(iF);Ffe=s(V0e,"STRONG",{});var flt=n(Ffe);kUo=r(flt,"camembert"),flt.forEach(t),RUo=r(V0e," \u2014 "),aq=s(V0e,"A",{href:!0});var glt=n(aq);SUo=r(glt,"TFCamembertModel"),glt.forEach(t),PUo=r(V0e," (CamemBERT model)"),V0e.forEach(t),$Uo=i(x),dF=s(x,"LI",{});var z0e=n(dF);Cfe=s(z0e,"STRONG",{});var hlt=n(Cfe);IUo=r(hlt,"clip"),hlt.forEach(t),jUo=r(z0e," \u2014 "),sq=s(z0e,"A",{href:!0});var ult=n(sq);DUo=r(ult,"TFCLIPModel"),ult.forEach(t),NUo=r(z0e," (CLIP model)"),z0e.forEach(t),qUo=i(x),cF=s(x,"LI",{});var W0e=n(cF);Mfe=s(W0e,"STRONG",{});var plt=n(Mfe);OUo=r(plt,"convbert"),plt.forEach(t),GUo=r(W0e," \u2014 "),nq=s(W0e,"A",{href:!0});var _lt=n(nq);XUo=r(_lt,"TFConvBertModel"),_lt.forEach(t),VUo=r(W0e," (ConvBERT model)"),W0e.forEach(t),zUo=i(x),mF=s(x,"LI",{});var Q0e=n(mF);Efe=s(Q0e,"STRONG",{});var blt=n(Efe);WUo=r(blt,"convnext"),blt.forEach(t),QUo=r(Q0e," \u2014 "),lq=s(Q0e,"A",{href:!0});var vlt=n(lq);HUo=r(vlt,"TFConvNextModel"),vlt.forEach(t),UUo=r(Q0e," (ConvNext model)"),Q0e.forEach(t),JUo=i(x),fF=s(x,"LI",{});var H0e=n(fF);yfe=s(H0e,"STRONG",{});var Tlt=n(yfe);YUo=r(Tlt,"ctrl"),Tlt.forEach(t),KUo=r(H0e," \u2014 "),iq=s(H0e,"A",{href:!0});var Flt=n(iq);ZUo=r(Flt,"TFCTRLModel"),Flt.forEach(t),eJo=r(H0e," (CTRL model)"),H0e.forEach(t),oJo=i(x),gF=s(x,"LI",{});var U0e=n(gF);wfe=s(U0e,"STRONG",{});var Clt=n(wfe);rJo=r(Clt,"deberta"),Clt.forEach(t),tJo=r(U0e," \u2014 "),dq=s(U0e,"A",{href:!0});var Mlt=n(dq);aJo=r(Mlt,"TFDebertaModel"),Mlt.forEach(t),sJo=r(U0e," (DeBERTa model)"),U0e.forEach(t),nJo=i(x),hF=s(x,"LI",{});var J0e=n(hF);Afe=s(J0e,"STRONG",{});var Elt=n(Afe);lJo=r(Elt,"deberta-v2"),Elt.forEach(t),iJo=r(J0e," \u2014 "),cq=s(J0e,"A",{href:!0});var ylt=n(cq);dJo=r(ylt,"TFDebertaV2Model"),ylt.forEach(t),cJo=r(J0e," (DeBERTa-v2 model)"),J0e.forEach(t),mJo=i(x),uF=s(x,"LI",{});var Y0e=n(uF);Lfe=s(Y0e,"STRONG",{});var wlt=n(Lfe);fJo=r(wlt,"distilbert"),wlt.forEach(t),gJo=r(Y0e," \u2014 "),mq=s(Y0e,"A",{href:!0});var Alt=n(mq);hJo=r(Alt,"TFDistilBertModel"),Alt.forEach(t),uJo=r(Y0e," (DistilBERT model)"),Y0e.forEach(t),pJo=i(x),pF=s(x,"LI",{});var K0e=n(pF);Bfe=s(K0e,"STRONG",{});var Llt=n(Bfe);_Jo=r(Llt,"dpr"),Llt.forEach(t),bJo=r(K0e," \u2014 "),fq=s(K0e,"A",{href:!0});var Blt=n(fq);vJo=r(Blt,"TFDPRQuestionEncoder"),Blt.forEach(t),TJo=r(K0e," (DPR model)"),K0e.forEach(t),FJo=i(x),_F=s(x,"LI",{});var Z0e=n(_F);xfe=s(Z0e,"STRONG",{});var xlt=n(xfe);CJo=r(xlt,"electra"),xlt.forEach(t),MJo=r(Z0e," \u2014 "),gq=s(Z0e,"A",{href:!0});var klt=n(gq);EJo=r(klt,"TFElectraModel"),klt.forEach(t),yJo=r(Z0e," (ELECTRA model)"),Z0e.forEach(t),wJo=i(x),bF=s(x,"LI",{});var eLe=n(bF);kfe=s(eLe,"STRONG",{});var Rlt=n(kfe);AJo=r(Rlt,"flaubert"),Rlt.forEach(t),LJo=r(eLe," \u2014 "),hq=s(eLe,"A",{href:!0});var Slt=n(hq);BJo=r(Slt,"TFFlaubertModel"),Slt.forEach(t),xJo=r(eLe," (FlauBERT model)"),eLe.forEach(t),kJo=i(x),On=s(x,"LI",{});var N7=n(On);Rfe=s(N7,"STRONG",{});var Plt=n(Rfe);RJo=r(Plt,"funnel"),Plt.forEach(t),SJo=r(N7," \u2014 "),uq=s(N7,"A",{href:!0});var $lt=n(uq);PJo=r($lt,"TFFunnelModel"),$lt.forEach(t),$Jo=r(N7," or "),pq=s(N7,"A",{href:!0});var Ilt=n(pq);IJo=r(Ilt,"TFFunnelBaseModel"),Ilt.forEach(t),jJo=r(N7," (Funnel Transformer model)"),N7.forEach(t),DJo=i(x),vF=s(x,"LI",{});var oLe=n(vF);Sfe=s(oLe,"STRONG",{});var jlt=n(Sfe);NJo=r(jlt,"gpt2"),jlt.forEach(t),qJo=r(oLe," \u2014 "),_q=s(oLe,"A",{href:!0});var Dlt=n(_q);OJo=r(Dlt,"TFGPT2Model"),Dlt.forEach(t),GJo=r(oLe," (OpenAI GPT-2 model)"),oLe.forEach(t),XJo=i(x),TF=s(x,"LI",{});var rLe=n(TF);Pfe=s(rLe,"STRONG",{});var Nlt=n(Pfe);VJo=r(Nlt,"hubert"),Nlt.forEach(t),zJo=r(rLe," \u2014 "),bq=s(rLe,"A",{href:!0});var qlt=n(bq);WJo=r(qlt,"TFHubertModel"),qlt.forEach(t),QJo=r(rLe," (Hubert model)"),rLe.forEach(t),HJo=i(x),FF=s(x,"LI",{});var tLe=n(FF);$fe=s(tLe,"STRONG",{});var Olt=n($fe);UJo=r(Olt,"layoutlm"),Olt.forEach(t),JJo=r(tLe," \u2014 "),vq=s(tLe,"A",{href:!0});var Glt=n(vq);YJo=r(Glt,"TFLayoutLMModel"),Glt.forEach(t),KJo=r(tLe," (LayoutLM model)"),tLe.forEach(t),ZJo=i(x),CF=s(x,"LI",{});var aLe=n(CF);Ife=s(aLe,"STRONG",{});var Xlt=n(Ife);eYo=r(Xlt,"led"),Xlt.forEach(t),oYo=r(aLe," \u2014 "),Tq=s(aLe,"A",{href:!0});var Vlt=n(Tq);rYo=r(Vlt,"TFLEDModel"),Vlt.forEach(t),tYo=r(aLe," (LED model)"),aLe.forEach(t),aYo=i(x),MF=s(x,"LI",{});var sLe=n(MF);jfe=s(sLe,"STRONG",{});var zlt=n(jfe);sYo=r(zlt,"longformer"),zlt.forEach(t),nYo=r(sLe," \u2014 "),Fq=s(sLe,"A",{href:!0});var Wlt=n(Fq);lYo=r(Wlt,"TFLongformerModel"),Wlt.forEach(t),iYo=r(sLe," (Longformer model)"),sLe.forEach(t),dYo=i(x),EF=s(x,"LI",{});var nLe=n(EF);Dfe=s(nLe,"STRONG",{});var Qlt=n(Dfe);cYo=r(Qlt,"lxmert"),Qlt.forEach(t),mYo=r(nLe," \u2014 "),Cq=s(nLe,"A",{href:!0});var Hlt=n(Cq);fYo=r(Hlt,"TFLxmertModel"),Hlt.forEach(t),gYo=r(nLe," (LXMERT model)"),nLe.forEach(t),hYo=i(x),yF=s(x,"LI",{});var lLe=n(yF);Nfe=s(lLe,"STRONG",{});var Ult=n(Nfe);uYo=r(Ult,"marian"),Ult.forEach(t),pYo=r(lLe," \u2014 "),Mq=s(lLe,"A",{href:!0});var Jlt=n(Mq);_Yo=r(Jlt,"TFMarianModel"),Jlt.forEach(t),bYo=r(lLe," (Marian model)"),lLe.forEach(t),vYo=i(x),wF=s(x,"LI",{});var iLe=n(wF);qfe=s(iLe,"STRONG",{});var Ylt=n(qfe);TYo=r(Ylt,"mbart"),Ylt.forEach(t),FYo=r(iLe," \u2014 "),Eq=s(iLe,"A",{href:!0});var Klt=n(Eq);CYo=r(Klt,"TFMBartModel"),Klt.forEach(t),MYo=r(iLe," (mBART model)"),iLe.forEach(t),EYo=i(x),AF=s(x,"LI",{});var dLe=n(AF);Ofe=s(dLe,"STRONG",{});var Zlt=n(Ofe);yYo=r(Zlt,"mobilebert"),Zlt.forEach(t),wYo=r(dLe," \u2014 "),yq=s(dLe,"A",{href:!0});var eit=n(yq);AYo=r(eit,"TFMobileBertModel"),eit.forEach(t),LYo=r(dLe," (MobileBERT model)"),dLe.forEach(t),BYo=i(x),LF=s(x,"LI",{});var cLe=n(LF);Gfe=s(cLe,"STRONG",{});var oit=n(Gfe);xYo=r(oit,"mpnet"),oit.forEach(t),kYo=r(cLe," \u2014 "),wq=s(cLe,"A",{href:!0});var rit=n(wq);RYo=r(rit,"TFMPNetModel"),rit.forEach(t),SYo=r(cLe," (MPNet model)"),cLe.forEach(t),PYo=i(x),BF=s(x,"LI",{});var mLe=n(BF);Xfe=s(mLe,"STRONG",{});var tit=n(Xfe);$Yo=r(tit,"mt5"),tit.forEach(t),IYo=r(mLe," \u2014 "),Aq=s(mLe,"A",{href:!0});var ait=n(Aq);jYo=r(ait,"TFMT5Model"),ait.forEach(t),DYo=r(mLe," (mT5 model)"),mLe.forEach(t),NYo=i(x),xF=s(x,"LI",{});var fLe=n(xF);Vfe=s(fLe,"STRONG",{});var sit=n(Vfe);qYo=r(sit,"openai-gpt"),sit.forEach(t),OYo=r(fLe," \u2014 "),Lq=s(fLe,"A",{href:!0});var nit=n(Lq);GYo=r(nit,"TFOpenAIGPTModel"),nit.forEach(t),XYo=r(fLe," (OpenAI GPT model)"),fLe.forEach(t),VYo=i(x),kF=s(x,"LI",{});var gLe=n(kF);zfe=s(gLe,"STRONG",{});var lit=n(zfe);zYo=r(lit,"pegasus"),lit.forEach(t),WYo=r(gLe," \u2014 "),Bq=s(gLe,"A",{href:!0});var iit=n(Bq);QYo=r(iit,"TFPegasusModel"),iit.forEach(t),HYo=r(gLe," (Pegasus model)"),gLe.forEach(t),UYo=i(x),RF=s(x,"LI",{});var hLe=n(RF);Wfe=s(hLe,"STRONG",{});var dit=n(Wfe);JYo=r(dit,"rembert"),dit.forEach(t),YYo=r(hLe," \u2014 "),xq=s(hLe,"A",{href:!0});var cit=n(xq);KYo=r(cit,"TFRemBertModel"),cit.forEach(t),ZYo=r(hLe," (RemBERT model)"),hLe.forEach(t),eKo=i(x),SF=s(x,"LI",{});var uLe=n(SF);Qfe=s(uLe,"STRONG",{});var mit=n(Qfe);oKo=r(mit,"roberta"),mit.forEach(t),rKo=r(uLe," \u2014 "),kq=s(uLe,"A",{href:!0});var fit=n(kq);tKo=r(fit,"TFRobertaModel"),fit.forEach(t),aKo=r(uLe," (RoBERTa model)"),uLe.forEach(t),sKo=i(x),PF=s(x,"LI",{});var pLe=n(PF);Hfe=s(pLe,"STRONG",{});var git=n(Hfe);nKo=r(git,"roformer"),git.forEach(t),lKo=r(pLe," \u2014 "),Rq=s(pLe,"A",{href:!0});var hit=n(Rq);iKo=r(hit,"TFRoFormerModel"),hit.forEach(t),dKo=r(pLe," (RoFormer model)"),pLe.forEach(t),cKo=i(x),$F=s(x,"LI",{});var _Le=n($F);Ufe=s(_Le,"STRONG",{});var uit=n(Ufe);mKo=r(uit,"speech_to_text"),uit.forEach(t),fKo=r(_Le," \u2014 "),Sq=s(_Le,"A",{href:!0});var pit=n(Sq);gKo=r(pit,"TFSpeech2TextModel"),pit.forEach(t),hKo=r(_Le," (Speech2Text model)"),_Le.forEach(t),uKo=i(x),IF=s(x,"LI",{});var bLe=n(IF);Jfe=s(bLe,"STRONG",{});var _it=n(Jfe);pKo=r(_it,"t5"),_it.forEach(t),_Ko=r(bLe," \u2014 "),Pq=s(bLe,"A",{href:!0});var bit=n(Pq);bKo=r(bit,"TFT5Model"),bit.forEach(t),vKo=r(bLe," (T5 model)"),bLe.forEach(t),TKo=i(x),jF=s(x,"LI",{});var vLe=n(jF);Yfe=s(vLe,"STRONG",{});var vit=n(Yfe);FKo=r(vit,"tapas"),vit.forEach(t),CKo=r(vLe," \u2014 "),$q=s(vLe,"A",{href:!0});var Tit=n($q);MKo=r(Tit,"TFTapasModel"),Tit.forEach(t),EKo=r(vLe," (TAPAS model)"),vLe.forEach(t),yKo=i(x),DF=s(x,"LI",{});var TLe=n(DF);Kfe=s(TLe,"STRONG",{});var Fit=n(Kfe);wKo=r(Fit,"transfo-xl"),Fit.forEach(t),AKo=r(TLe," \u2014 "),Iq=s(TLe,"A",{href:!0});var Cit=n(Iq);LKo=r(Cit,"TFTransfoXLModel"),Cit.forEach(t),BKo=r(TLe," (Transformer-XL model)"),TLe.forEach(t),xKo=i(x),NF=s(x,"LI",{});var FLe=n(NF);Zfe=s(FLe,"STRONG",{});var Mit=n(Zfe);kKo=r(Mit,"vit"),Mit.forEach(t),RKo=r(FLe," \u2014 "),jq=s(FLe,"A",{href:!0});var Eit=n(jq);SKo=r(Eit,"TFViTModel"),Eit.forEach(t),PKo=r(FLe," (ViT model)"),FLe.forEach(t),$Ko=i(x),qF=s(x,"LI",{});var CLe=n(qF);ege=s(CLe,"STRONG",{});var yit=n(ege);IKo=r(yit,"wav2vec2"),yit.forEach(t),jKo=r(CLe," \u2014 "),Dq=s(CLe,"A",{href:!0});var wit=n(Dq);DKo=r(wit,"TFWav2Vec2Model"),wit.forEach(t),NKo=r(CLe," (Wav2Vec2 model)"),CLe.forEach(t),qKo=i(x),OF=s(x,"LI",{});var MLe=n(OF);oge=s(MLe,"STRONG",{});var Ait=n(oge);OKo=r(Ait,"xlm"),Ait.forEach(t),GKo=r(MLe," \u2014 "),Nq=s(MLe,"A",{href:!0});var Lit=n(Nq);XKo=r(Lit,"TFXLMModel"),Lit.forEach(t),VKo=r(MLe," (XLM model)"),MLe.forEach(t),zKo=i(x),GF=s(x,"LI",{});var ELe=n(GF);rge=s(ELe,"STRONG",{});var Bit=n(rge);WKo=r(Bit,"xlm-roberta"),Bit.forEach(t),QKo=r(ELe," \u2014 "),qq=s(ELe,"A",{href:!0});var xit=n(qq);HKo=r(xit,"TFXLMRobertaModel"),xit.forEach(t),UKo=r(ELe," (XLM-RoBERTa model)"),ELe.forEach(t),JKo=i(x),XF=s(x,"LI",{});var yLe=n(XF);tge=s(yLe,"STRONG",{});var kit=n(tge);YKo=r(kit,"xlnet"),kit.forEach(t),KKo=r(yLe," \u2014 "),Oq=s(yLe,"A",{href:!0});var Rit=n(Oq);ZKo=r(Rit,"TFXLNetModel"),Rit.forEach(t),eZo=r(yLe," (XLNet model)"),yLe.forEach(t),x.forEach(t),oZo=i(ua),age=s(ua,"P",{});var Sit=n(age);rZo=r(Sit,"Examples:"),Sit.forEach(t),tZo=i(ua),f(PA.$$.fragment,ua),ua.forEach(t),Nl.forEach(t),gke=i(d),pc=s(d,"H2",{class:!0});var ESe=n(pc);VF=s(ESe,"A",{id:!0,class:!0,href:!0});var Pit=n(VF);sge=s(Pit,"SPAN",{});var $it=n(sge);f($A.$$.fragment,$it),$it.forEach(t),Pit.forEach(t),aZo=i(ESe),nge=s(ESe,"SPAN",{});var Iit=n(nge);sZo=r(Iit,"TFAutoModelForPreTraining"),Iit.forEach(t),ESe.forEach(t),hke=i(d),Tr=s(d,"DIV",{class:!0});var Ol=n(Tr);f(IA.$$.fragment,Ol),nZo=i(Ol),_c=s(Ol,"P",{});var TW=n(_c);lZo=r(TW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lge=s(TW,"CODE",{});var jit=n(lge);iZo=r(jit,"from_pretrained()"),jit.forEach(t),dZo=r(TW,"class method or the "),ige=s(TW,"CODE",{});var Dit=n(ige);cZo=r(Dit,"from_config()"),Dit.forEach(t),mZo=r(TW,`class
method.`),TW.forEach(t),fZo=i(Ol),jA=s(Ol,"P",{});var ySe=n(jA);gZo=r(ySe,"This class cannot be instantiated directly using "),dge=s(ySe,"CODE",{});var Nit=n(dge);hZo=r(Nit,"__init__()"),Nit.forEach(t),uZo=r(ySe," (throws an error)."),ySe.forEach(t),pZo=i(Ol),ht=s(Ol,"DIV",{class:!0});var Gl=n(ht);f(DA.$$.fragment,Gl),_Zo=i(Gl),cge=s(Gl,"P",{});var qit=n(cge);bZo=r(qit,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qit.forEach(t),vZo=i(Gl),bc=s(Gl,"P",{});var FW=n(bc);TZo=r(FW,`Note:
Loading a model from its configuration file does `),mge=s(FW,"STRONG",{});var Oit=n(mge);FZo=r(Oit,"not"),Oit.forEach(t),CZo=r(FW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fge=s(FW,"CODE",{});var Git=n(fge);MZo=r(Git,"from_pretrained()"),Git.forEach(t),EZo=r(FW,"to load the model weights."),FW.forEach(t),yZo=i(Gl),gge=s(Gl,"P",{});var Xit=n(gge);wZo=r(Xit,"Examples:"),Xit.forEach(t),AZo=i(Gl),f(NA.$$.fragment,Gl),Gl.forEach(t),LZo=i(Ol),uo=s(Ol,"DIV",{class:!0});var pa=n(uo);f(qA.$$.fragment,pa),BZo=i(pa),hge=s(pa,"P",{});var Vit=n(hge);xZo=r(Vit,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vit.forEach(t),kZo=i(pa),ps=s(pa,"P",{});var M5=n(ps);RZo=r(M5,"The model class to instantiate is selected based on the "),uge=s(M5,"CODE",{});var zit=n(uge);SZo=r(zit,"model_type"),zit.forEach(t),PZo=r(M5,` property of the config object (either
passed as an argument or loaded from `),pge=s(M5,"CODE",{});var Wit=n(pge);$Zo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),IZo=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=s(M5,"CODE",{});var Qit=n(_ge);jZo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),DZo=r(M5,":"),M5.forEach(t),NZo=i(pa),H=s(pa,"UL",{});var U=n(H);zF=s(U,"LI",{});var wLe=n(zF);bge=s(wLe,"STRONG",{});var Hit=n(bge);qZo=r(Hit,"albert"),Hit.forEach(t),OZo=r(wLe," \u2014 "),Gq=s(wLe,"A",{href:!0});var Uit=n(Gq);GZo=r(Uit,"TFAlbertForPreTraining"),Uit.forEach(t),XZo=r(wLe," (ALBERT model)"),wLe.forEach(t),VZo=i(U),WF=s(U,"LI",{});var ALe=n(WF);vge=s(ALe,"STRONG",{});var Jit=n(vge);zZo=r(Jit,"bart"),Jit.forEach(t),WZo=r(ALe," \u2014 "),Xq=s(ALe,"A",{href:!0});var Yit=n(Xq);QZo=r(Yit,"TFBartForConditionalGeneration"),Yit.forEach(t),HZo=r(ALe," (BART model)"),ALe.forEach(t),UZo=i(U),QF=s(U,"LI",{});var LLe=n(QF);Tge=s(LLe,"STRONG",{});var Kit=n(Tge);JZo=r(Kit,"bert"),Kit.forEach(t),YZo=r(LLe," \u2014 "),Vq=s(LLe,"A",{href:!0});var Zit=n(Vq);KZo=r(Zit,"TFBertForPreTraining"),Zit.forEach(t),ZZo=r(LLe," (BERT model)"),LLe.forEach(t),eer=i(U),HF=s(U,"LI",{});var BLe=n(HF);Fge=s(BLe,"STRONG",{});var edt=n(Fge);oer=r(edt,"camembert"),edt.forEach(t),rer=r(BLe," \u2014 "),zq=s(BLe,"A",{href:!0});var odt=n(zq);ter=r(odt,"TFCamembertForMaskedLM"),odt.forEach(t),aer=r(BLe," (CamemBERT model)"),BLe.forEach(t),ser=i(U),UF=s(U,"LI",{});var xLe=n(UF);Cge=s(xLe,"STRONG",{});var rdt=n(Cge);ner=r(rdt,"ctrl"),rdt.forEach(t),ler=r(xLe," \u2014 "),Wq=s(xLe,"A",{href:!0});var tdt=n(Wq);ier=r(tdt,"TFCTRLLMHeadModel"),tdt.forEach(t),der=r(xLe," (CTRL model)"),xLe.forEach(t),cer=i(U),JF=s(U,"LI",{});var kLe=n(JF);Mge=s(kLe,"STRONG",{});var adt=n(Mge);mer=r(adt,"distilbert"),adt.forEach(t),fer=r(kLe," \u2014 "),Qq=s(kLe,"A",{href:!0});var sdt=n(Qq);ger=r(sdt,"TFDistilBertForMaskedLM"),sdt.forEach(t),her=r(kLe," (DistilBERT model)"),kLe.forEach(t),uer=i(U),YF=s(U,"LI",{});var RLe=n(YF);Ege=s(RLe,"STRONG",{});var ndt=n(Ege);per=r(ndt,"electra"),ndt.forEach(t),_er=r(RLe," \u2014 "),Hq=s(RLe,"A",{href:!0});var ldt=n(Hq);ber=r(ldt,"TFElectraForPreTraining"),ldt.forEach(t),ver=r(RLe," (ELECTRA model)"),RLe.forEach(t),Ter=i(U),KF=s(U,"LI",{});var SLe=n(KF);yge=s(SLe,"STRONG",{});var idt=n(yge);Fer=r(idt,"flaubert"),idt.forEach(t),Cer=r(SLe," \u2014 "),Uq=s(SLe,"A",{href:!0});var ddt=n(Uq);Mer=r(ddt,"TFFlaubertWithLMHeadModel"),ddt.forEach(t),Eer=r(SLe," (FlauBERT model)"),SLe.forEach(t),yer=i(U),ZF=s(U,"LI",{});var PLe=n(ZF);wge=s(PLe,"STRONG",{});var cdt=n(wge);wer=r(cdt,"funnel"),cdt.forEach(t),Aer=r(PLe," \u2014 "),Jq=s(PLe,"A",{href:!0});var mdt=n(Jq);Ler=r(mdt,"TFFunnelForPreTraining"),mdt.forEach(t),Ber=r(PLe," (Funnel Transformer model)"),PLe.forEach(t),xer=i(U),eC=s(U,"LI",{});var $Le=n(eC);Age=s($Le,"STRONG",{});var fdt=n(Age);ker=r(fdt,"gpt2"),fdt.forEach(t),Rer=r($Le," \u2014 "),Yq=s($Le,"A",{href:!0});var gdt=n(Yq);Ser=r(gdt,"TFGPT2LMHeadModel"),gdt.forEach(t),Per=r($Le," (OpenAI GPT-2 model)"),$Le.forEach(t),$er=i(U),oC=s(U,"LI",{});var ILe=n(oC);Lge=s(ILe,"STRONG",{});var hdt=n(Lge);Ier=r(hdt,"layoutlm"),hdt.forEach(t),jer=r(ILe," \u2014 "),Kq=s(ILe,"A",{href:!0});var udt=n(Kq);Der=r(udt,"TFLayoutLMForMaskedLM"),udt.forEach(t),Ner=r(ILe," (LayoutLM model)"),ILe.forEach(t),qer=i(U),rC=s(U,"LI",{});var jLe=n(rC);Bge=s(jLe,"STRONG",{});var pdt=n(Bge);Oer=r(pdt,"lxmert"),pdt.forEach(t),Ger=r(jLe," \u2014 "),Zq=s(jLe,"A",{href:!0});var _dt=n(Zq);Xer=r(_dt,"TFLxmertForPreTraining"),_dt.forEach(t),Ver=r(jLe," (LXMERT model)"),jLe.forEach(t),zer=i(U),tC=s(U,"LI",{});var DLe=n(tC);xge=s(DLe,"STRONG",{});var bdt=n(xge);Wer=r(bdt,"mobilebert"),bdt.forEach(t),Qer=r(DLe," \u2014 "),eO=s(DLe,"A",{href:!0});var vdt=n(eO);Her=r(vdt,"TFMobileBertForPreTraining"),vdt.forEach(t),Uer=r(DLe," (MobileBERT model)"),DLe.forEach(t),Jer=i(U),aC=s(U,"LI",{});var NLe=n(aC);kge=s(NLe,"STRONG",{});var Tdt=n(kge);Yer=r(Tdt,"mpnet"),Tdt.forEach(t),Ker=r(NLe," \u2014 "),oO=s(NLe,"A",{href:!0});var Fdt=n(oO);Zer=r(Fdt,"TFMPNetForMaskedLM"),Fdt.forEach(t),eor=r(NLe," (MPNet model)"),NLe.forEach(t),oor=i(U),sC=s(U,"LI",{});var qLe=n(sC);Rge=s(qLe,"STRONG",{});var Cdt=n(Rge);ror=r(Cdt,"openai-gpt"),Cdt.forEach(t),tor=r(qLe," \u2014 "),rO=s(qLe,"A",{href:!0});var Mdt=n(rO);aor=r(Mdt,"TFOpenAIGPTLMHeadModel"),Mdt.forEach(t),sor=r(qLe," (OpenAI GPT model)"),qLe.forEach(t),nor=i(U),nC=s(U,"LI",{});var OLe=n(nC);Sge=s(OLe,"STRONG",{});var Edt=n(Sge);lor=r(Edt,"roberta"),Edt.forEach(t),ior=r(OLe," \u2014 "),tO=s(OLe,"A",{href:!0});var ydt=n(tO);dor=r(ydt,"TFRobertaForMaskedLM"),ydt.forEach(t),cor=r(OLe," (RoBERTa model)"),OLe.forEach(t),mor=i(U),lC=s(U,"LI",{});var GLe=n(lC);Pge=s(GLe,"STRONG",{});var wdt=n(Pge);gor=r(wdt,"t5"),wdt.forEach(t),hor=r(GLe," \u2014 "),aO=s(GLe,"A",{href:!0});var Adt=n(aO);uor=r(Adt,"TFT5ForConditionalGeneration"),Adt.forEach(t),por=r(GLe," (T5 model)"),GLe.forEach(t),_or=i(U),iC=s(U,"LI",{});var XLe=n(iC);$ge=s(XLe,"STRONG",{});var Ldt=n($ge);bor=r(Ldt,"tapas"),Ldt.forEach(t),vor=r(XLe," \u2014 "),sO=s(XLe,"A",{href:!0});var Bdt=n(sO);Tor=r(Bdt,"TFTapasForMaskedLM"),Bdt.forEach(t),For=r(XLe," (TAPAS model)"),XLe.forEach(t),Cor=i(U),dC=s(U,"LI",{});var VLe=n(dC);Ige=s(VLe,"STRONG",{});var xdt=n(Ige);Mor=r(xdt,"transfo-xl"),xdt.forEach(t),Eor=r(VLe," \u2014 "),nO=s(VLe,"A",{href:!0});var kdt=n(nO);yor=r(kdt,"TFTransfoXLLMHeadModel"),kdt.forEach(t),wor=r(VLe," (Transformer-XL model)"),VLe.forEach(t),Aor=i(U),cC=s(U,"LI",{});var zLe=n(cC);jge=s(zLe,"STRONG",{});var Rdt=n(jge);Lor=r(Rdt,"xlm"),Rdt.forEach(t),Bor=r(zLe," \u2014 "),lO=s(zLe,"A",{href:!0});var Sdt=n(lO);xor=r(Sdt,"TFXLMWithLMHeadModel"),Sdt.forEach(t),kor=r(zLe," (XLM model)"),zLe.forEach(t),Ror=i(U),mC=s(U,"LI",{});var WLe=n(mC);Dge=s(WLe,"STRONG",{});var Pdt=n(Dge);Sor=r(Pdt,"xlm-roberta"),Pdt.forEach(t),Por=r(WLe," \u2014 "),iO=s(WLe,"A",{href:!0});var $dt=n(iO);$or=r($dt,"TFXLMRobertaForMaskedLM"),$dt.forEach(t),Ior=r(WLe," (XLM-RoBERTa model)"),WLe.forEach(t),jor=i(U),fC=s(U,"LI",{});var QLe=n(fC);Nge=s(QLe,"STRONG",{});var Idt=n(Nge);Dor=r(Idt,"xlnet"),Idt.forEach(t),Nor=r(QLe," \u2014 "),dO=s(QLe,"A",{href:!0});var jdt=n(dO);qor=r(jdt,"TFXLNetLMHeadModel"),jdt.forEach(t),Oor=r(QLe," (XLNet model)"),QLe.forEach(t),U.forEach(t),Gor=i(pa),qge=s(pa,"P",{});var Ddt=n(qge);Xor=r(Ddt,"Examples:"),Ddt.forEach(t),Vor=i(pa),f(OA.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),uke=i(d),vc=s(d,"H2",{class:!0});var wSe=n(vc);gC=s(wSe,"A",{id:!0,class:!0,href:!0});var Ndt=n(gC);Oge=s(Ndt,"SPAN",{});var qdt=n(Oge);f(GA.$$.fragment,qdt),qdt.forEach(t),Ndt.forEach(t),zor=i(wSe),Gge=s(wSe,"SPAN",{});var Odt=n(Gge);Wor=r(Odt,"TFAutoModelForCausalLM"),Odt.forEach(t),wSe.forEach(t),pke=i(d),Fr=s(d,"DIV",{class:!0});var Xl=n(Fr);f(XA.$$.fragment,Xl),Qor=i(Xl),Tc=s(Xl,"P",{});var CW=n(Tc);Hor=r(CW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Xge=s(CW,"CODE",{});var Gdt=n(Xge);Uor=r(Gdt,"from_pretrained()"),Gdt.forEach(t),Jor=r(CW,"class method or the "),Vge=s(CW,"CODE",{});var Xdt=n(Vge);Yor=r(Xdt,"from_config()"),Xdt.forEach(t),Kor=r(CW,`class
method.`),CW.forEach(t),Zor=i(Xl),VA=s(Xl,"P",{});var ASe=n(VA);err=r(ASe,"This class cannot be instantiated directly using "),zge=s(ASe,"CODE",{});var Vdt=n(zge);orr=r(Vdt,"__init__()"),Vdt.forEach(t),rrr=r(ASe," (throws an error)."),ASe.forEach(t),trr=i(Xl),ut=s(Xl,"DIV",{class:!0});var Vl=n(ut);f(zA.$$.fragment,Vl),arr=i(Vl),Wge=s(Vl,"P",{});var zdt=n(Wge);srr=r(zdt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zdt.forEach(t),nrr=i(Vl),Fc=s(Vl,"P",{});var MW=n(Fc);lrr=r(MW,`Note:
Loading a model from its configuration file does `),Qge=s(MW,"STRONG",{});var Wdt=n(Qge);irr=r(Wdt,"not"),Wdt.forEach(t),drr=r(MW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hge=s(MW,"CODE",{});var Qdt=n(Hge);crr=r(Qdt,"from_pretrained()"),Qdt.forEach(t),mrr=r(MW,"to load the model weights."),MW.forEach(t),frr=i(Vl),Uge=s(Vl,"P",{});var Hdt=n(Uge);grr=r(Hdt,"Examples:"),Hdt.forEach(t),hrr=i(Vl),f(WA.$$.fragment,Vl),Vl.forEach(t),urr=i(Xl),po=s(Xl,"DIV",{class:!0});var _a=n(po);f(QA.$$.fragment,_a),prr=i(_a),Jge=s(_a,"P",{});var Udt=n(Jge);_rr=r(Udt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Udt.forEach(t),brr=i(_a),_s=s(_a,"P",{});var E5=n(_s);vrr=r(E5,"The model class to instantiate is selected based on the "),Yge=s(E5,"CODE",{});var Jdt=n(Yge);Trr=r(Jdt,"model_type"),Jdt.forEach(t),Frr=r(E5,` property of the config object (either
passed as an argument or loaded from `),Kge=s(E5,"CODE",{});var Ydt=n(Kge);Crr=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),Mrr=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zge=s(E5,"CODE",{});var Kdt=n(Zge);Err=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),yrr=r(E5,":"),E5.forEach(t),wrr=i(_a),fe=s(_a,"UL",{});var Te=n(fe);hC=s(Te,"LI",{});var HLe=n(hC);ehe=s(HLe,"STRONG",{});var Zdt=n(ehe);Arr=r(Zdt,"bert"),Zdt.forEach(t),Lrr=r(HLe," \u2014 "),cO=s(HLe,"A",{href:!0});var ect=n(cO);Brr=r(ect,"TFBertLMHeadModel"),ect.forEach(t),xrr=r(HLe," (BERT model)"),HLe.forEach(t),krr=i(Te),uC=s(Te,"LI",{});var ULe=n(uC);ohe=s(ULe,"STRONG",{});var oct=n(ohe);Rrr=r(oct,"camembert"),oct.forEach(t),Srr=r(ULe," \u2014 "),mO=s(ULe,"A",{href:!0});var rct=n(mO);Prr=r(rct,"TFCamembertForCausalLM"),rct.forEach(t),$rr=r(ULe," (CamemBERT model)"),ULe.forEach(t),Irr=i(Te),pC=s(Te,"LI",{});var JLe=n(pC);rhe=s(JLe,"STRONG",{});var tct=n(rhe);jrr=r(tct,"ctrl"),tct.forEach(t),Drr=r(JLe," \u2014 "),fO=s(JLe,"A",{href:!0});var act=n(fO);Nrr=r(act,"TFCTRLLMHeadModel"),act.forEach(t),qrr=r(JLe," (CTRL model)"),JLe.forEach(t),Orr=i(Te),_C=s(Te,"LI",{});var YLe=n(_C);the=s(YLe,"STRONG",{});var sct=n(the);Grr=r(sct,"gpt2"),sct.forEach(t),Xrr=r(YLe," \u2014 "),gO=s(YLe,"A",{href:!0});var nct=n(gO);Vrr=r(nct,"TFGPT2LMHeadModel"),nct.forEach(t),zrr=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),Wrr=i(Te),bC=s(Te,"LI",{});var KLe=n(bC);ahe=s(KLe,"STRONG",{});var lct=n(ahe);Qrr=r(lct,"openai-gpt"),lct.forEach(t),Hrr=r(KLe," \u2014 "),hO=s(KLe,"A",{href:!0});var ict=n(hO);Urr=r(ict,"TFOpenAIGPTLMHeadModel"),ict.forEach(t),Jrr=r(KLe," (OpenAI GPT model)"),KLe.forEach(t),Yrr=i(Te),vC=s(Te,"LI",{});var ZLe=n(vC);she=s(ZLe,"STRONG",{});var dct=n(she);Krr=r(dct,"rembert"),dct.forEach(t),Zrr=r(ZLe," \u2014 "),uO=s(ZLe,"A",{href:!0});var cct=n(uO);etr=r(cct,"TFRemBertForCausalLM"),cct.forEach(t),otr=r(ZLe," (RemBERT model)"),ZLe.forEach(t),rtr=i(Te),TC=s(Te,"LI",{});var e8e=n(TC);nhe=s(e8e,"STRONG",{});var mct=n(nhe);ttr=r(mct,"roberta"),mct.forEach(t),atr=r(e8e," \u2014 "),pO=s(e8e,"A",{href:!0});var fct=n(pO);str=r(fct,"TFRobertaForCausalLM"),fct.forEach(t),ntr=r(e8e," (RoBERTa model)"),e8e.forEach(t),ltr=i(Te),FC=s(Te,"LI",{});var o8e=n(FC);lhe=s(o8e,"STRONG",{});var gct=n(lhe);itr=r(gct,"roformer"),gct.forEach(t),dtr=r(o8e," \u2014 "),_O=s(o8e,"A",{href:!0});var hct=n(_O);ctr=r(hct,"TFRoFormerForCausalLM"),hct.forEach(t),mtr=r(o8e," (RoFormer model)"),o8e.forEach(t),ftr=i(Te),CC=s(Te,"LI",{});var r8e=n(CC);ihe=s(r8e,"STRONG",{});var uct=n(ihe);gtr=r(uct,"transfo-xl"),uct.forEach(t),htr=r(r8e," \u2014 "),bO=s(r8e,"A",{href:!0});var pct=n(bO);utr=r(pct,"TFTransfoXLLMHeadModel"),pct.forEach(t),ptr=r(r8e," (Transformer-XL model)"),r8e.forEach(t),_tr=i(Te),MC=s(Te,"LI",{});var t8e=n(MC);dhe=s(t8e,"STRONG",{});var _ct=n(dhe);btr=r(_ct,"xlm"),_ct.forEach(t),vtr=r(t8e," \u2014 "),vO=s(t8e,"A",{href:!0});var bct=n(vO);Ttr=r(bct,"TFXLMWithLMHeadModel"),bct.forEach(t),Ftr=r(t8e," (XLM model)"),t8e.forEach(t),Ctr=i(Te),EC=s(Te,"LI",{});var a8e=n(EC);che=s(a8e,"STRONG",{});var vct=n(che);Mtr=r(vct,"xlnet"),vct.forEach(t),Etr=r(a8e," \u2014 "),TO=s(a8e,"A",{href:!0});var Tct=n(TO);ytr=r(Tct,"TFXLNetLMHeadModel"),Tct.forEach(t),wtr=r(a8e," (XLNet model)"),a8e.forEach(t),Te.forEach(t),Atr=i(_a),mhe=s(_a,"P",{});var Fct=n(mhe);Ltr=r(Fct,"Examples:"),Fct.forEach(t),Btr=i(_a),f(HA.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),_ke=i(d),Cc=s(d,"H2",{class:!0});var LSe=n(Cc);yC=s(LSe,"A",{id:!0,class:!0,href:!0});var Cct=n(yC);fhe=s(Cct,"SPAN",{});var Mct=n(fhe);f(UA.$$.fragment,Mct),Mct.forEach(t),Cct.forEach(t),xtr=i(LSe),ghe=s(LSe,"SPAN",{});var Ect=n(ghe);ktr=r(Ect,"TFAutoModelForImageClassification"),Ect.forEach(t),LSe.forEach(t),bke=i(d),Cr=s(d,"DIV",{class:!0});var zl=n(Cr);f(JA.$$.fragment,zl),Rtr=i(zl),Mc=s(zl,"P",{});var EW=n(Mc);Str=r(EW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hhe=s(EW,"CODE",{});var yct=n(hhe);Ptr=r(yct,"from_pretrained()"),yct.forEach(t),$tr=r(EW,"class method or the "),uhe=s(EW,"CODE",{});var wct=n(uhe);Itr=r(wct,"from_config()"),wct.forEach(t),jtr=r(EW,`class
method.`),EW.forEach(t),Dtr=i(zl),YA=s(zl,"P",{});var BSe=n(YA);Ntr=r(BSe,"This class cannot be instantiated directly using "),phe=s(BSe,"CODE",{});var Act=n(phe);qtr=r(Act,"__init__()"),Act.forEach(t),Otr=r(BSe," (throws an error)."),BSe.forEach(t),Gtr=i(zl),pt=s(zl,"DIV",{class:!0});var Wl=n(pt);f(KA.$$.fragment,Wl),Xtr=i(Wl),_he=s(Wl,"P",{});var Lct=n(_he);Vtr=r(Lct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lct.forEach(t),ztr=i(Wl),Ec=s(Wl,"P",{});var yW=n(Ec);Wtr=r(yW,`Note:
Loading a model from its configuration file does `),bhe=s(yW,"STRONG",{});var Bct=n(bhe);Qtr=r(Bct,"not"),Bct.forEach(t),Htr=r(yW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vhe=s(yW,"CODE",{});var xct=n(vhe);Utr=r(xct,"from_pretrained()"),xct.forEach(t),Jtr=r(yW,"to load the model weights."),yW.forEach(t),Ytr=i(Wl),The=s(Wl,"P",{});var kct=n(The);Ktr=r(kct,"Examples:"),kct.forEach(t),Ztr=i(Wl),f(ZA.$$.fragment,Wl),Wl.forEach(t),ear=i(zl),_o=s(zl,"DIV",{class:!0});var ba=n(_o);f(e0.$$.fragment,ba),oar=i(ba),Fhe=s(ba,"P",{});var Rct=n(Fhe);rar=r(Rct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rct.forEach(t),tar=i(ba),bs=s(ba,"P",{});var y5=n(bs);aar=r(y5,"The model class to instantiate is selected based on the "),Che=s(y5,"CODE",{});var Sct=n(Che);sar=r(Sct,"model_type"),Sct.forEach(t),nar=r(y5,` property of the config object (either
passed as an argument or loaded from `),Mhe=s(y5,"CODE",{});var Pct=n(Mhe);lar=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),iar=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=s(y5,"CODE",{});var $ct=n(Ehe);dar=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),car=r(y5,":"),y5.forEach(t),mar=i(ba),o0=s(ba,"UL",{});var xSe=n(o0);wC=s(xSe,"LI",{});var s8e=n(wC);yhe=s(s8e,"STRONG",{});var Ict=n(yhe);far=r(Ict,"convnext"),Ict.forEach(t),gar=r(s8e," \u2014 "),FO=s(s8e,"A",{href:!0});var jct=n(FO);har=r(jct,"TFConvNextForImageClassification"),jct.forEach(t),uar=r(s8e," (ConvNext model)"),s8e.forEach(t),par=i(xSe),AC=s(xSe,"LI",{});var n8e=n(AC);whe=s(n8e,"STRONG",{});var Dct=n(whe);_ar=r(Dct,"vit"),Dct.forEach(t),bar=r(n8e," \u2014 "),CO=s(n8e,"A",{href:!0});var Nct=n(CO);Tar=r(Nct,"TFViTForImageClassification"),Nct.forEach(t),Far=r(n8e," (ViT model)"),n8e.forEach(t),xSe.forEach(t),Car=i(ba),Ahe=s(ba,"P",{});var qct=n(Ahe);Mar=r(qct,"Examples:"),qct.forEach(t),Ear=i(ba),f(r0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),vke=i(d),yc=s(d,"H2",{class:!0});var kSe=n(yc);LC=s(kSe,"A",{id:!0,class:!0,href:!0});var Oct=n(LC);Lhe=s(Oct,"SPAN",{});var Gct=n(Lhe);f(t0.$$.fragment,Gct),Gct.forEach(t),Oct.forEach(t),yar=i(kSe),Bhe=s(kSe,"SPAN",{});var Xct=n(Bhe);war=r(Xct,"TFAutoModelForMaskedLM"),Xct.forEach(t),kSe.forEach(t),Tke=i(d),Mr=s(d,"DIV",{class:!0});var Ql=n(Mr);f(a0.$$.fragment,Ql),Aar=i(Ql),wc=s(Ql,"P",{});var wW=n(wc);Lar=r(wW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xhe=s(wW,"CODE",{});var Vct=n(xhe);Bar=r(Vct,"from_pretrained()"),Vct.forEach(t),xar=r(wW,"class method or the "),khe=s(wW,"CODE",{});var zct=n(khe);kar=r(zct,"from_config()"),zct.forEach(t),Rar=r(wW,`class
method.`),wW.forEach(t),Sar=i(Ql),s0=s(Ql,"P",{});var RSe=n(s0);Par=r(RSe,"This class cannot be instantiated directly using "),Rhe=s(RSe,"CODE",{});var Wct=n(Rhe);$ar=r(Wct,"__init__()"),Wct.forEach(t),Iar=r(RSe," (throws an error)."),RSe.forEach(t),jar=i(Ql),_t=s(Ql,"DIV",{class:!0});var Hl=n(_t);f(n0.$$.fragment,Hl),Dar=i(Hl),She=s(Hl,"P",{});var Qct=n(She);Nar=r(Qct,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qct.forEach(t),qar=i(Hl),Ac=s(Hl,"P",{});var AW=n(Ac);Oar=r(AW,`Note:
Loading a model from its configuration file does `),Phe=s(AW,"STRONG",{});var Hct=n(Phe);Gar=r(Hct,"not"),Hct.forEach(t),Xar=r(AW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$he=s(AW,"CODE",{});var Uct=n($he);Var=r(Uct,"from_pretrained()"),Uct.forEach(t),zar=r(AW,"to load the model weights."),AW.forEach(t),War=i(Hl),Ihe=s(Hl,"P",{});var Jct=n(Ihe);Qar=r(Jct,"Examples:"),Jct.forEach(t),Har=i(Hl),f(l0.$$.fragment,Hl),Hl.forEach(t),Uar=i(Ql),bo=s(Ql,"DIV",{class:!0});var va=n(bo);f(i0.$$.fragment,va),Jar=i(va),jhe=s(va,"P",{});var Yct=n(jhe);Yar=r(Yct,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Yct.forEach(t),Kar=i(va),vs=s(va,"P",{});var w5=n(vs);Zar=r(w5,"The model class to instantiate is selected based on the "),Dhe=s(w5,"CODE",{});var Kct=n(Dhe);esr=r(Kct,"model_type"),Kct.forEach(t),osr=r(w5,` property of the config object (either
passed as an argument or loaded from `),Nhe=s(w5,"CODE",{});var Zct=n(Nhe);rsr=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),tsr=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=s(w5,"CODE",{});var emt=n(qhe);asr=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),ssr=r(w5,":"),w5.forEach(t),nsr=i(va),Y=s(va,"UL",{});var ee=n(Y);BC=s(ee,"LI",{});var l8e=n(BC);Ohe=s(l8e,"STRONG",{});var omt=n(Ohe);lsr=r(omt,"albert"),omt.forEach(t),isr=r(l8e," \u2014 "),MO=s(l8e,"A",{href:!0});var rmt=n(MO);dsr=r(rmt,"TFAlbertForMaskedLM"),rmt.forEach(t),csr=r(l8e," (ALBERT model)"),l8e.forEach(t),msr=i(ee),xC=s(ee,"LI",{});var i8e=n(xC);Ghe=s(i8e,"STRONG",{});var tmt=n(Ghe);fsr=r(tmt,"bert"),tmt.forEach(t),gsr=r(i8e," \u2014 "),EO=s(i8e,"A",{href:!0});var amt=n(EO);hsr=r(amt,"TFBertForMaskedLM"),amt.forEach(t),usr=r(i8e," (BERT model)"),i8e.forEach(t),psr=i(ee),kC=s(ee,"LI",{});var d8e=n(kC);Xhe=s(d8e,"STRONG",{});var smt=n(Xhe);_sr=r(smt,"camembert"),smt.forEach(t),bsr=r(d8e," \u2014 "),yO=s(d8e,"A",{href:!0});var nmt=n(yO);vsr=r(nmt,"TFCamembertForMaskedLM"),nmt.forEach(t),Tsr=r(d8e," (CamemBERT model)"),d8e.forEach(t),Fsr=i(ee),RC=s(ee,"LI",{});var c8e=n(RC);Vhe=s(c8e,"STRONG",{});var lmt=n(Vhe);Csr=r(lmt,"convbert"),lmt.forEach(t),Msr=r(c8e," \u2014 "),wO=s(c8e,"A",{href:!0});var imt=n(wO);Esr=r(imt,"TFConvBertForMaskedLM"),imt.forEach(t),ysr=r(c8e," (ConvBERT model)"),c8e.forEach(t),wsr=i(ee),SC=s(ee,"LI",{});var m8e=n(SC);zhe=s(m8e,"STRONG",{});var dmt=n(zhe);Asr=r(dmt,"deberta"),dmt.forEach(t),Lsr=r(m8e," \u2014 "),AO=s(m8e,"A",{href:!0});var cmt=n(AO);Bsr=r(cmt,"TFDebertaForMaskedLM"),cmt.forEach(t),xsr=r(m8e," (DeBERTa model)"),m8e.forEach(t),ksr=i(ee),PC=s(ee,"LI",{});var f8e=n(PC);Whe=s(f8e,"STRONG",{});var mmt=n(Whe);Rsr=r(mmt,"deberta-v2"),mmt.forEach(t),Ssr=r(f8e," \u2014 "),LO=s(f8e,"A",{href:!0});var fmt=n(LO);Psr=r(fmt,"TFDebertaV2ForMaskedLM"),fmt.forEach(t),$sr=r(f8e," (DeBERTa-v2 model)"),f8e.forEach(t),Isr=i(ee),$C=s(ee,"LI",{});var g8e=n($C);Qhe=s(g8e,"STRONG",{});var gmt=n(Qhe);jsr=r(gmt,"distilbert"),gmt.forEach(t),Dsr=r(g8e," \u2014 "),BO=s(g8e,"A",{href:!0});var hmt=n(BO);Nsr=r(hmt,"TFDistilBertForMaskedLM"),hmt.forEach(t),qsr=r(g8e," (DistilBERT model)"),g8e.forEach(t),Osr=i(ee),IC=s(ee,"LI",{});var h8e=n(IC);Hhe=s(h8e,"STRONG",{});var umt=n(Hhe);Gsr=r(umt,"electra"),umt.forEach(t),Xsr=r(h8e," \u2014 "),xO=s(h8e,"A",{href:!0});var pmt=n(xO);Vsr=r(pmt,"TFElectraForMaskedLM"),pmt.forEach(t),zsr=r(h8e," (ELECTRA model)"),h8e.forEach(t),Wsr=i(ee),jC=s(ee,"LI",{});var u8e=n(jC);Uhe=s(u8e,"STRONG",{});var _mt=n(Uhe);Qsr=r(_mt,"flaubert"),_mt.forEach(t),Hsr=r(u8e," \u2014 "),kO=s(u8e,"A",{href:!0});var bmt=n(kO);Usr=r(bmt,"TFFlaubertWithLMHeadModel"),bmt.forEach(t),Jsr=r(u8e," (FlauBERT model)"),u8e.forEach(t),Ysr=i(ee),DC=s(ee,"LI",{});var p8e=n(DC);Jhe=s(p8e,"STRONG",{});var vmt=n(Jhe);Ksr=r(vmt,"funnel"),vmt.forEach(t),Zsr=r(p8e," \u2014 "),RO=s(p8e,"A",{href:!0});var Tmt=n(RO);enr=r(Tmt,"TFFunnelForMaskedLM"),Tmt.forEach(t),onr=r(p8e," (Funnel Transformer model)"),p8e.forEach(t),rnr=i(ee),NC=s(ee,"LI",{});var _8e=n(NC);Yhe=s(_8e,"STRONG",{});var Fmt=n(Yhe);tnr=r(Fmt,"layoutlm"),Fmt.forEach(t),anr=r(_8e," \u2014 "),SO=s(_8e,"A",{href:!0});var Cmt=n(SO);snr=r(Cmt,"TFLayoutLMForMaskedLM"),Cmt.forEach(t),nnr=r(_8e," (LayoutLM model)"),_8e.forEach(t),lnr=i(ee),qC=s(ee,"LI",{});var b8e=n(qC);Khe=s(b8e,"STRONG",{});var Mmt=n(Khe);inr=r(Mmt,"longformer"),Mmt.forEach(t),dnr=r(b8e," \u2014 "),PO=s(b8e,"A",{href:!0});var Emt=n(PO);cnr=r(Emt,"TFLongformerForMaskedLM"),Emt.forEach(t),mnr=r(b8e," (Longformer model)"),b8e.forEach(t),fnr=i(ee),OC=s(ee,"LI",{});var v8e=n(OC);Zhe=s(v8e,"STRONG",{});var ymt=n(Zhe);gnr=r(ymt,"mobilebert"),ymt.forEach(t),hnr=r(v8e," \u2014 "),$O=s(v8e,"A",{href:!0});var wmt=n($O);unr=r(wmt,"TFMobileBertForMaskedLM"),wmt.forEach(t),pnr=r(v8e," (MobileBERT model)"),v8e.forEach(t),_nr=i(ee),GC=s(ee,"LI",{});var T8e=n(GC);eue=s(T8e,"STRONG",{});var Amt=n(eue);bnr=r(Amt,"mpnet"),Amt.forEach(t),vnr=r(T8e," \u2014 "),IO=s(T8e,"A",{href:!0});var Lmt=n(IO);Tnr=r(Lmt,"TFMPNetForMaskedLM"),Lmt.forEach(t),Fnr=r(T8e," (MPNet model)"),T8e.forEach(t),Cnr=i(ee),XC=s(ee,"LI",{});var F8e=n(XC);oue=s(F8e,"STRONG",{});var Bmt=n(oue);Mnr=r(Bmt,"rembert"),Bmt.forEach(t),Enr=r(F8e," \u2014 "),jO=s(F8e,"A",{href:!0});var xmt=n(jO);ynr=r(xmt,"TFRemBertForMaskedLM"),xmt.forEach(t),wnr=r(F8e," (RemBERT model)"),F8e.forEach(t),Anr=i(ee),VC=s(ee,"LI",{});var C8e=n(VC);rue=s(C8e,"STRONG",{});var kmt=n(rue);Lnr=r(kmt,"roberta"),kmt.forEach(t),Bnr=r(C8e," \u2014 "),DO=s(C8e,"A",{href:!0});var Rmt=n(DO);xnr=r(Rmt,"TFRobertaForMaskedLM"),Rmt.forEach(t),knr=r(C8e," (RoBERTa model)"),C8e.forEach(t),Rnr=i(ee),zC=s(ee,"LI",{});var M8e=n(zC);tue=s(M8e,"STRONG",{});var Smt=n(tue);Snr=r(Smt,"roformer"),Smt.forEach(t),Pnr=r(M8e," \u2014 "),NO=s(M8e,"A",{href:!0});var Pmt=n(NO);$nr=r(Pmt,"TFRoFormerForMaskedLM"),Pmt.forEach(t),Inr=r(M8e," (RoFormer model)"),M8e.forEach(t),jnr=i(ee),WC=s(ee,"LI",{});var E8e=n(WC);aue=s(E8e,"STRONG",{});var $mt=n(aue);Dnr=r($mt,"tapas"),$mt.forEach(t),Nnr=r(E8e," \u2014 "),qO=s(E8e,"A",{href:!0});var Imt=n(qO);qnr=r(Imt,"TFTapasForMaskedLM"),Imt.forEach(t),Onr=r(E8e," (TAPAS model)"),E8e.forEach(t),Gnr=i(ee),QC=s(ee,"LI",{});var y8e=n(QC);sue=s(y8e,"STRONG",{});var jmt=n(sue);Xnr=r(jmt,"xlm"),jmt.forEach(t),Vnr=r(y8e," \u2014 "),OO=s(y8e,"A",{href:!0});var Dmt=n(OO);znr=r(Dmt,"TFXLMWithLMHeadModel"),Dmt.forEach(t),Wnr=r(y8e," (XLM model)"),y8e.forEach(t),Qnr=i(ee),HC=s(ee,"LI",{});var w8e=n(HC);nue=s(w8e,"STRONG",{});var Nmt=n(nue);Hnr=r(Nmt,"xlm-roberta"),Nmt.forEach(t),Unr=r(w8e," \u2014 "),GO=s(w8e,"A",{href:!0});var qmt=n(GO);Jnr=r(qmt,"TFXLMRobertaForMaskedLM"),qmt.forEach(t),Ynr=r(w8e," (XLM-RoBERTa model)"),w8e.forEach(t),ee.forEach(t),Knr=i(va),lue=s(va,"P",{});var Omt=n(lue);Znr=r(Omt,"Examples:"),Omt.forEach(t),elr=i(va),f(d0.$$.fragment,va),va.forEach(t),Ql.forEach(t),Fke=i(d),Lc=s(d,"H2",{class:!0});var SSe=n(Lc);UC=s(SSe,"A",{id:!0,class:!0,href:!0});var Gmt=n(UC);iue=s(Gmt,"SPAN",{});var Xmt=n(iue);f(c0.$$.fragment,Xmt),Xmt.forEach(t),Gmt.forEach(t),olr=i(SSe),due=s(SSe,"SPAN",{});var Vmt=n(due);rlr=r(Vmt,"TFAutoModelForSeq2SeqLM"),Vmt.forEach(t),SSe.forEach(t),Cke=i(d),Er=s(d,"DIV",{class:!0});var Ul=n(Er);f(m0.$$.fragment,Ul),tlr=i(Ul),Bc=s(Ul,"P",{});var LW=n(Bc);alr=r(LW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),cue=s(LW,"CODE",{});var zmt=n(cue);slr=r(zmt,"from_pretrained()"),zmt.forEach(t),nlr=r(LW,"class method or the "),mue=s(LW,"CODE",{});var Wmt=n(mue);llr=r(Wmt,"from_config()"),Wmt.forEach(t),ilr=r(LW,`class
method.`),LW.forEach(t),dlr=i(Ul),f0=s(Ul,"P",{});var PSe=n(f0);clr=r(PSe,"This class cannot be instantiated directly using "),fue=s(PSe,"CODE",{});var Qmt=n(fue);mlr=r(Qmt,"__init__()"),Qmt.forEach(t),flr=r(PSe," (throws an error)."),PSe.forEach(t),glr=i(Ul),bt=s(Ul,"DIV",{class:!0});var Jl=n(bt);f(g0.$$.fragment,Jl),hlr=i(Jl),gue=s(Jl,"P",{});var Hmt=n(gue);ulr=r(Hmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Hmt.forEach(t),plr=i(Jl),xc=s(Jl,"P",{});var BW=n(xc);_lr=r(BW,`Note:
Loading a model from its configuration file does `),hue=s(BW,"STRONG",{});var Umt=n(hue);blr=r(Umt,"not"),Umt.forEach(t),vlr=r(BW,` load the model weights. It only affects the
model\u2019s configuration. Use `),uue=s(BW,"CODE",{});var Jmt=n(uue);Tlr=r(Jmt,"from_pretrained()"),Jmt.forEach(t),Flr=r(BW,"to load the model weights."),BW.forEach(t),Clr=i(Jl),pue=s(Jl,"P",{});var Ymt=n(pue);Mlr=r(Ymt,"Examples:"),Ymt.forEach(t),Elr=i(Jl),f(h0.$$.fragment,Jl),Jl.forEach(t),ylr=i(Ul),vo=s(Ul,"DIV",{class:!0});var Ta=n(vo);f(u0.$$.fragment,Ta),wlr=i(Ta),_ue=s(Ta,"P",{});var Kmt=n(_ue);Alr=r(Kmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Kmt.forEach(t),Llr=i(Ta),Ts=s(Ta,"P",{});var A5=n(Ts);Blr=r(A5,"The model class to instantiate is selected based on the "),bue=s(A5,"CODE",{});var Zmt=n(bue);xlr=r(Zmt,"model_type"),Zmt.forEach(t),klr=r(A5,` property of the config object (either
passed as an argument or loaded from `),vue=s(A5,"CODE",{});var eft=n(vue);Rlr=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),Slr=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=s(A5,"CODE",{});var oft=n(Tue);Plr=r(oft,"pretrained_model_name_or_path"),oft.forEach(t),$lr=r(A5,":"),A5.forEach(t),Ilr=i(Ta),pe=s(Ta,"UL",{});var Ee=n(pe);JC=s(Ee,"LI",{});var A8e=n(JC);Fue=s(A8e,"STRONG",{});var rft=n(Fue);jlr=r(rft,"bart"),rft.forEach(t),Dlr=r(A8e," \u2014 "),XO=s(A8e,"A",{href:!0});var tft=n(XO);Nlr=r(tft,"TFBartForConditionalGeneration"),tft.forEach(t),qlr=r(A8e," (BART model)"),A8e.forEach(t),Olr=i(Ee),YC=s(Ee,"LI",{});var L8e=n(YC);Cue=s(L8e,"STRONG",{});var aft=n(Cue);Glr=r(aft,"blenderbot"),aft.forEach(t),Xlr=r(L8e," \u2014 "),VO=s(L8e,"A",{href:!0});var sft=n(VO);Vlr=r(sft,"TFBlenderbotForConditionalGeneration"),sft.forEach(t),zlr=r(L8e," (Blenderbot model)"),L8e.forEach(t),Wlr=i(Ee),KC=s(Ee,"LI",{});var B8e=n(KC);Mue=s(B8e,"STRONG",{});var nft=n(Mue);Qlr=r(nft,"blenderbot-small"),nft.forEach(t),Hlr=r(B8e," \u2014 "),zO=s(B8e,"A",{href:!0});var lft=n(zO);Ulr=r(lft,"TFBlenderbotSmallForConditionalGeneration"),lft.forEach(t),Jlr=r(B8e," (BlenderbotSmall model)"),B8e.forEach(t),Ylr=i(Ee),ZC=s(Ee,"LI",{});var x8e=n(ZC);Eue=s(x8e,"STRONG",{});var ift=n(Eue);Klr=r(ift,"encoder-decoder"),ift.forEach(t),Zlr=r(x8e," \u2014 "),WO=s(x8e,"A",{href:!0});var dft=n(WO);eir=r(dft,"TFEncoderDecoderModel"),dft.forEach(t),oir=r(x8e," (Encoder decoder model)"),x8e.forEach(t),rir=i(Ee),eM=s(Ee,"LI",{});var k8e=n(eM);yue=s(k8e,"STRONG",{});var cft=n(yue);tir=r(cft,"led"),cft.forEach(t),air=r(k8e," \u2014 "),QO=s(k8e,"A",{href:!0});var mft=n(QO);sir=r(mft,"TFLEDForConditionalGeneration"),mft.forEach(t),nir=r(k8e," (LED model)"),k8e.forEach(t),lir=i(Ee),oM=s(Ee,"LI",{});var R8e=n(oM);wue=s(R8e,"STRONG",{});var fft=n(wue);iir=r(fft,"marian"),fft.forEach(t),dir=r(R8e," \u2014 "),HO=s(R8e,"A",{href:!0});var gft=n(HO);cir=r(gft,"TFMarianMTModel"),gft.forEach(t),mir=r(R8e," (Marian model)"),R8e.forEach(t),fir=i(Ee),rM=s(Ee,"LI",{});var S8e=n(rM);Aue=s(S8e,"STRONG",{});var hft=n(Aue);gir=r(hft,"mbart"),hft.forEach(t),hir=r(S8e," \u2014 "),UO=s(S8e,"A",{href:!0});var uft=n(UO);uir=r(uft,"TFMBartForConditionalGeneration"),uft.forEach(t),pir=r(S8e," (mBART model)"),S8e.forEach(t),_ir=i(Ee),tM=s(Ee,"LI",{});var P8e=n(tM);Lue=s(P8e,"STRONG",{});var pft=n(Lue);bir=r(pft,"mt5"),pft.forEach(t),vir=r(P8e," \u2014 "),JO=s(P8e,"A",{href:!0});var _ft=n(JO);Tir=r(_ft,"TFMT5ForConditionalGeneration"),_ft.forEach(t),Fir=r(P8e," (mT5 model)"),P8e.forEach(t),Cir=i(Ee),aM=s(Ee,"LI",{});var $8e=n(aM);Bue=s($8e,"STRONG",{});var bft=n(Bue);Mir=r(bft,"pegasus"),bft.forEach(t),Eir=r($8e," \u2014 "),YO=s($8e,"A",{href:!0});var vft=n(YO);yir=r(vft,"TFPegasusForConditionalGeneration"),vft.forEach(t),wir=r($8e," (Pegasus model)"),$8e.forEach(t),Air=i(Ee),sM=s(Ee,"LI",{});var I8e=n(sM);xue=s(I8e,"STRONG",{});var Tft=n(xue);Lir=r(Tft,"t5"),Tft.forEach(t),Bir=r(I8e," \u2014 "),KO=s(I8e,"A",{href:!0});var Fft=n(KO);xir=r(Fft,"TFT5ForConditionalGeneration"),Fft.forEach(t),kir=r(I8e," (T5 model)"),I8e.forEach(t),Ee.forEach(t),Rir=i(Ta),kue=s(Ta,"P",{});var Cft=n(kue);Sir=r(Cft,"Examples:"),Cft.forEach(t),Pir=i(Ta),f(p0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),Mke=i(d),kc=s(d,"H2",{class:!0});var $Se=n(kc);nM=s($Se,"A",{id:!0,class:!0,href:!0});var Mft=n(nM);Rue=s(Mft,"SPAN",{});var Eft=n(Rue);f(_0.$$.fragment,Eft),Eft.forEach(t),Mft.forEach(t),$ir=i($Se),Sue=s($Se,"SPAN",{});var yft=n(Sue);Iir=r(yft,"TFAutoModelForSequenceClassification"),yft.forEach(t),$Se.forEach(t),Eke=i(d),yr=s(d,"DIV",{class:!0});var Yl=n(yr);f(b0.$$.fragment,Yl),jir=i(Yl),Rc=s(Yl,"P",{});var xW=n(Rc);Dir=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Pue=s(xW,"CODE",{});var wft=n(Pue);Nir=r(wft,"from_pretrained()"),wft.forEach(t),qir=r(xW,"class method or the "),$ue=s(xW,"CODE",{});var Aft=n($ue);Oir=r(Aft,"from_config()"),Aft.forEach(t),Gir=r(xW,`class
method.`),xW.forEach(t),Xir=i(Yl),v0=s(Yl,"P",{});var ISe=n(v0);Vir=r(ISe,"This class cannot be instantiated directly using "),Iue=s(ISe,"CODE",{});var Lft=n(Iue);zir=r(Lft,"__init__()"),Lft.forEach(t),Wir=r(ISe," (throws an error)."),ISe.forEach(t),Qir=i(Yl),vt=s(Yl,"DIV",{class:!0});var Kl=n(vt);f(T0.$$.fragment,Kl),Hir=i(Kl),jue=s(Kl,"P",{});var Bft=n(jue);Uir=r(Bft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bft.forEach(t),Jir=i(Kl),Sc=s(Kl,"P",{});var kW=n(Sc);Yir=r(kW,`Note:
Loading a model from its configuration file does `),Due=s(kW,"STRONG",{});var xft=n(Due);Kir=r(xft,"not"),xft.forEach(t),Zir=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nue=s(kW,"CODE",{});var kft=n(Nue);edr=r(kft,"from_pretrained()"),kft.forEach(t),odr=r(kW,"to load the model weights."),kW.forEach(t),rdr=i(Kl),que=s(Kl,"P",{});var Rft=n(que);tdr=r(Rft,"Examples:"),Rft.forEach(t),adr=i(Kl),f(F0.$$.fragment,Kl),Kl.forEach(t),sdr=i(Yl),To=s(Yl,"DIV",{class:!0});var Fa=n(To);f(C0.$$.fragment,Fa),ndr=i(Fa),Oue=s(Fa,"P",{});var Sft=n(Oue);ldr=r(Sft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Sft.forEach(t),idr=i(Fa),Fs=s(Fa,"P",{});var L5=n(Fs);ddr=r(L5,"The model class to instantiate is selected based on the "),Gue=s(L5,"CODE",{});var Pft=n(Gue);cdr=r(Pft,"model_type"),Pft.forEach(t),mdr=r(L5,` property of the config object (either
passed as an argument or loaded from `),Xue=s(L5,"CODE",{});var $ft=n(Xue);fdr=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),gdr=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=s(L5,"CODE",{});var Ift=n(Vue);hdr=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),udr=r(L5,":"),L5.forEach(t),pdr=i(Fa),V=s(Fa,"UL",{});var W=n(V);lM=s(W,"LI",{});var j8e=n(lM);zue=s(j8e,"STRONG",{});var jft=n(zue);_dr=r(jft,"albert"),jft.forEach(t),bdr=r(j8e," \u2014 "),ZO=s(j8e,"A",{href:!0});var Dft=n(ZO);vdr=r(Dft,"TFAlbertForSequenceClassification"),Dft.forEach(t),Tdr=r(j8e," (ALBERT model)"),j8e.forEach(t),Fdr=i(W),iM=s(W,"LI",{});var D8e=n(iM);Wue=s(D8e,"STRONG",{});var Nft=n(Wue);Cdr=r(Nft,"bert"),Nft.forEach(t),Mdr=r(D8e," \u2014 "),eG=s(D8e,"A",{href:!0});var qft=n(eG);Edr=r(qft,"TFBertForSequenceClassification"),qft.forEach(t),ydr=r(D8e," (BERT model)"),D8e.forEach(t),wdr=i(W),dM=s(W,"LI",{});var N8e=n(dM);Que=s(N8e,"STRONG",{});var Oft=n(Que);Adr=r(Oft,"camembert"),Oft.forEach(t),Ldr=r(N8e," \u2014 "),oG=s(N8e,"A",{href:!0});var Gft=n(oG);Bdr=r(Gft,"TFCamembertForSequenceClassification"),Gft.forEach(t),xdr=r(N8e," (CamemBERT model)"),N8e.forEach(t),kdr=i(W),cM=s(W,"LI",{});var q8e=n(cM);Hue=s(q8e,"STRONG",{});var Xft=n(Hue);Rdr=r(Xft,"convbert"),Xft.forEach(t),Sdr=r(q8e," \u2014 "),rG=s(q8e,"A",{href:!0});var Vft=n(rG);Pdr=r(Vft,"TFConvBertForSequenceClassification"),Vft.forEach(t),$dr=r(q8e," (ConvBERT model)"),q8e.forEach(t),Idr=i(W),mM=s(W,"LI",{});var O8e=n(mM);Uue=s(O8e,"STRONG",{});var zft=n(Uue);jdr=r(zft,"ctrl"),zft.forEach(t),Ddr=r(O8e," \u2014 "),tG=s(O8e,"A",{href:!0});var Wft=n(tG);Ndr=r(Wft,"TFCTRLForSequenceClassification"),Wft.forEach(t),qdr=r(O8e," (CTRL model)"),O8e.forEach(t),Odr=i(W),fM=s(W,"LI",{});var G8e=n(fM);Jue=s(G8e,"STRONG",{});var Qft=n(Jue);Gdr=r(Qft,"deberta"),Qft.forEach(t),Xdr=r(G8e," \u2014 "),aG=s(G8e,"A",{href:!0});var Hft=n(aG);Vdr=r(Hft,"TFDebertaForSequenceClassification"),Hft.forEach(t),zdr=r(G8e," (DeBERTa model)"),G8e.forEach(t),Wdr=i(W),gM=s(W,"LI",{});var X8e=n(gM);Yue=s(X8e,"STRONG",{});var Uft=n(Yue);Qdr=r(Uft,"deberta-v2"),Uft.forEach(t),Hdr=r(X8e," \u2014 "),sG=s(X8e,"A",{href:!0});var Jft=n(sG);Udr=r(Jft,"TFDebertaV2ForSequenceClassification"),Jft.forEach(t),Jdr=r(X8e," (DeBERTa-v2 model)"),X8e.forEach(t),Ydr=i(W),hM=s(W,"LI",{});var V8e=n(hM);Kue=s(V8e,"STRONG",{});var Yft=n(Kue);Kdr=r(Yft,"distilbert"),Yft.forEach(t),Zdr=r(V8e," \u2014 "),nG=s(V8e,"A",{href:!0});var Kft=n(nG);ecr=r(Kft,"TFDistilBertForSequenceClassification"),Kft.forEach(t),ocr=r(V8e," (DistilBERT model)"),V8e.forEach(t),rcr=i(W),uM=s(W,"LI",{});var z8e=n(uM);Zue=s(z8e,"STRONG",{});var Zft=n(Zue);tcr=r(Zft,"electra"),Zft.forEach(t),acr=r(z8e," \u2014 "),lG=s(z8e,"A",{href:!0});var egt=n(lG);scr=r(egt,"TFElectraForSequenceClassification"),egt.forEach(t),ncr=r(z8e," (ELECTRA model)"),z8e.forEach(t),lcr=i(W),pM=s(W,"LI",{});var W8e=n(pM);epe=s(W8e,"STRONG",{});var ogt=n(epe);icr=r(ogt,"flaubert"),ogt.forEach(t),dcr=r(W8e," \u2014 "),iG=s(W8e,"A",{href:!0});var rgt=n(iG);ccr=r(rgt,"TFFlaubertForSequenceClassification"),rgt.forEach(t),mcr=r(W8e," (FlauBERT model)"),W8e.forEach(t),fcr=i(W),_M=s(W,"LI",{});var Q8e=n(_M);ope=s(Q8e,"STRONG",{});var tgt=n(ope);gcr=r(tgt,"funnel"),tgt.forEach(t),hcr=r(Q8e," \u2014 "),dG=s(Q8e,"A",{href:!0});var agt=n(dG);ucr=r(agt,"TFFunnelForSequenceClassification"),agt.forEach(t),pcr=r(Q8e," (Funnel Transformer model)"),Q8e.forEach(t),_cr=i(W),bM=s(W,"LI",{});var H8e=n(bM);rpe=s(H8e,"STRONG",{});var sgt=n(rpe);bcr=r(sgt,"gpt2"),sgt.forEach(t),vcr=r(H8e," \u2014 "),cG=s(H8e,"A",{href:!0});var ngt=n(cG);Tcr=r(ngt,"TFGPT2ForSequenceClassification"),ngt.forEach(t),Fcr=r(H8e," (OpenAI GPT-2 model)"),H8e.forEach(t),Ccr=i(W),vM=s(W,"LI",{});var U8e=n(vM);tpe=s(U8e,"STRONG",{});var lgt=n(tpe);Mcr=r(lgt,"layoutlm"),lgt.forEach(t),Ecr=r(U8e," \u2014 "),mG=s(U8e,"A",{href:!0});var igt=n(mG);ycr=r(igt,"TFLayoutLMForSequenceClassification"),igt.forEach(t),wcr=r(U8e," (LayoutLM model)"),U8e.forEach(t),Acr=i(W),TM=s(W,"LI",{});var J8e=n(TM);ape=s(J8e,"STRONG",{});var dgt=n(ape);Lcr=r(dgt,"longformer"),dgt.forEach(t),Bcr=r(J8e," \u2014 "),fG=s(J8e,"A",{href:!0});var cgt=n(fG);xcr=r(cgt,"TFLongformerForSequenceClassification"),cgt.forEach(t),kcr=r(J8e," (Longformer model)"),J8e.forEach(t),Rcr=i(W),FM=s(W,"LI",{});var Y8e=n(FM);spe=s(Y8e,"STRONG",{});var mgt=n(spe);Scr=r(mgt,"mobilebert"),mgt.forEach(t),Pcr=r(Y8e," \u2014 "),gG=s(Y8e,"A",{href:!0});var fgt=n(gG);$cr=r(fgt,"TFMobileBertForSequenceClassification"),fgt.forEach(t),Icr=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),jcr=i(W),CM=s(W,"LI",{});var K8e=n(CM);npe=s(K8e,"STRONG",{});var ggt=n(npe);Dcr=r(ggt,"mpnet"),ggt.forEach(t),Ncr=r(K8e," \u2014 "),hG=s(K8e,"A",{href:!0});var hgt=n(hG);qcr=r(hgt,"TFMPNetForSequenceClassification"),hgt.forEach(t),Ocr=r(K8e," (MPNet model)"),K8e.forEach(t),Gcr=i(W),MM=s(W,"LI",{});var Z8e=n(MM);lpe=s(Z8e,"STRONG",{});var ugt=n(lpe);Xcr=r(ugt,"openai-gpt"),ugt.forEach(t),Vcr=r(Z8e," \u2014 "),uG=s(Z8e,"A",{href:!0});var pgt=n(uG);zcr=r(pgt,"TFOpenAIGPTForSequenceClassification"),pgt.forEach(t),Wcr=r(Z8e," (OpenAI GPT model)"),Z8e.forEach(t),Qcr=i(W),EM=s(W,"LI",{});var e7e=n(EM);ipe=s(e7e,"STRONG",{});var _gt=n(ipe);Hcr=r(_gt,"rembert"),_gt.forEach(t),Ucr=r(e7e," \u2014 "),pG=s(e7e,"A",{href:!0});var bgt=n(pG);Jcr=r(bgt,"TFRemBertForSequenceClassification"),bgt.forEach(t),Ycr=r(e7e," (RemBERT model)"),e7e.forEach(t),Kcr=i(W),yM=s(W,"LI",{});var o7e=n(yM);dpe=s(o7e,"STRONG",{});var vgt=n(dpe);Zcr=r(vgt,"roberta"),vgt.forEach(t),emr=r(o7e," \u2014 "),_G=s(o7e,"A",{href:!0});var Tgt=n(_G);omr=r(Tgt,"TFRobertaForSequenceClassification"),Tgt.forEach(t),rmr=r(o7e," (RoBERTa model)"),o7e.forEach(t),tmr=i(W),wM=s(W,"LI",{});var r7e=n(wM);cpe=s(r7e,"STRONG",{});var Fgt=n(cpe);amr=r(Fgt,"roformer"),Fgt.forEach(t),smr=r(r7e," \u2014 "),bG=s(r7e,"A",{href:!0});var Cgt=n(bG);nmr=r(Cgt,"TFRoFormerForSequenceClassification"),Cgt.forEach(t),lmr=r(r7e," (RoFormer model)"),r7e.forEach(t),imr=i(W),AM=s(W,"LI",{});var t7e=n(AM);mpe=s(t7e,"STRONG",{});var Mgt=n(mpe);dmr=r(Mgt,"tapas"),Mgt.forEach(t),cmr=r(t7e," \u2014 "),vG=s(t7e,"A",{href:!0});var Egt=n(vG);mmr=r(Egt,"TFTapasForSequenceClassification"),Egt.forEach(t),fmr=r(t7e," (TAPAS model)"),t7e.forEach(t),gmr=i(W),LM=s(W,"LI",{});var a7e=n(LM);fpe=s(a7e,"STRONG",{});var ygt=n(fpe);hmr=r(ygt,"transfo-xl"),ygt.forEach(t),umr=r(a7e," \u2014 "),TG=s(a7e,"A",{href:!0});var wgt=n(TG);pmr=r(wgt,"TFTransfoXLForSequenceClassification"),wgt.forEach(t),_mr=r(a7e," (Transformer-XL model)"),a7e.forEach(t),bmr=i(W),BM=s(W,"LI",{});var s7e=n(BM);gpe=s(s7e,"STRONG",{});var Agt=n(gpe);vmr=r(Agt,"xlm"),Agt.forEach(t),Tmr=r(s7e," \u2014 "),FG=s(s7e,"A",{href:!0});var Lgt=n(FG);Fmr=r(Lgt,"TFXLMForSequenceClassification"),Lgt.forEach(t),Cmr=r(s7e," (XLM model)"),s7e.forEach(t),Mmr=i(W),xM=s(W,"LI",{});var n7e=n(xM);hpe=s(n7e,"STRONG",{});var Bgt=n(hpe);Emr=r(Bgt,"xlm-roberta"),Bgt.forEach(t),ymr=r(n7e," \u2014 "),CG=s(n7e,"A",{href:!0});var xgt=n(CG);wmr=r(xgt,"TFXLMRobertaForSequenceClassification"),xgt.forEach(t),Amr=r(n7e," (XLM-RoBERTa model)"),n7e.forEach(t),Lmr=i(W),kM=s(W,"LI",{});var l7e=n(kM);upe=s(l7e,"STRONG",{});var kgt=n(upe);Bmr=r(kgt,"xlnet"),kgt.forEach(t),xmr=r(l7e," \u2014 "),MG=s(l7e,"A",{href:!0});var Rgt=n(MG);kmr=r(Rgt,"TFXLNetForSequenceClassification"),Rgt.forEach(t),Rmr=r(l7e," (XLNet model)"),l7e.forEach(t),W.forEach(t),Smr=i(Fa),ppe=s(Fa,"P",{});var Sgt=n(ppe);Pmr=r(Sgt,"Examples:"),Sgt.forEach(t),$mr=i(Fa),f(M0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),yke=i(d),Pc=s(d,"H2",{class:!0});var jSe=n(Pc);RM=s(jSe,"A",{id:!0,class:!0,href:!0});var Pgt=n(RM);_pe=s(Pgt,"SPAN",{});var $gt=n(_pe);f(E0.$$.fragment,$gt),$gt.forEach(t),Pgt.forEach(t),Imr=i(jSe),bpe=s(jSe,"SPAN",{});var Igt=n(bpe);jmr=r(Igt,"TFAutoModelForMultipleChoice"),Igt.forEach(t),jSe.forEach(t),wke=i(d),wr=s(d,"DIV",{class:!0});var Zl=n(wr);f(y0.$$.fragment,Zl),Dmr=i(Zl),$c=s(Zl,"P",{});var RW=n($c);Nmr=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vpe=s(RW,"CODE",{});var jgt=n(vpe);qmr=r(jgt,"from_pretrained()"),jgt.forEach(t),Omr=r(RW,"class method or the "),Tpe=s(RW,"CODE",{});var Dgt=n(Tpe);Gmr=r(Dgt,"from_config()"),Dgt.forEach(t),Xmr=r(RW,`class
method.`),RW.forEach(t),Vmr=i(Zl),w0=s(Zl,"P",{});var DSe=n(w0);zmr=r(DSe,"This class cannot be instantiated directly using "),Fpe=s(DSe,"CODE",{});var Ngt=n(Fpe);Wmr=r(Ngt,"__init__()"),Ngt.forEach(t),Qmr=r(DSe," (throws an error)."),DSe.forEach(t),Hmr=i(Zl),Tt=s(Zl,"DIV",{class:!0});var ei=n(Tt);f(A0.$$.fragment,ei),Umr=i(ei),Cpe=s(ei,"P",{});var qgt=n(Cpe);Jmr=r(qgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qgt.forEach(t),Ymr=i(ei),Ic=s(ei,"P",{});var SW=n(Ic);Kmr=r(SW,`Note:
Loading a model from its configuration file does `),Mpe=s(SW,"STRONG",{});var Ogt=n(Mpe);Zmr=r(Ogt,"not"),Ogt.forEach(t),efr=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Epe=s(SW,"CODE",{});var Ggt=n(Epe);ofr=r(Ggt,"from_pretrained()"),Ggt.forEach(t),rfr=r(SW,"to load the model weights."),SW.forEach(t),tfr=i(ei),ype=s(ei,"P",{});var Xgt=n(ype);afr=r(Xgt,"Examples:"),Xgt.forEach(t),sfr=i(ei),f(L0.$$.fragment,ei),ei.forEach(t),nfr=i(Zl),Fo=s(Zl,"DIV",{class:!0});var Ca=n(Fo);f(B0.$$.fragment,Ca),lfr=i(Ca),wpe=s(Ca,"P",{});var Vgt=n(wpe);ifr=r(Vgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vgt.forEach(t),dfr=i(Ca),Cs=s(Ca,"P",{});var B5=n(Cs);cfr=r(B5,"The model class to instantiate is selected based on the "),Ape=s(B5,"CODE",{});var zgt=n(Ape);mfr=r(zgt,"model_type"),zgt.forEach(t),ffr=r(B5,` property of the config object (either
passed as an argument or loaded from `),Lpe=s(B5,"CODE",{});var Wgt=n(Lpe);gfr=r(Wgt,"pretrained_model_name_or_path"),Wgt.forEach(t),hfr=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=s(B5,"CODE",{});var Qgt=n(Bpe);ufr=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),pfr=r(B5,":"),B5.forEach(t),_fr=i(Ca),te=s(Ca,"UL",{});var ne=n(te);SM=s(ne,"LI",{});var i7e=n(SM);xpe=s(i7e,"STRONG",{});var Hgt=n(xpe);bfr=r(Hgt,"albert"),Hgt.forEach(t),vfr=r(i7e," \u2014 "),EG=s(i7e,"A",{href:!0});var Ugt=n(EG);Tfr=r(Ugt,"TFAlbertForMultipleChoice"),Ugt.forEach(t),Ffr=r(i7e," (ALBERT model)"),i7e.forEach(t),Cfr=i(ne),PM=s(ne,"LI",{});var d7e=n(PM);kpe=s(d7e,"STRONG",{});var Jgt=n(kpe);Mfr=r(Jgt,"bert"),Jgt.forEach(t),Efr=r(d7e," \u2014 "),yG=s(d7e,"A",{href:!0});var Ygt=n(yG);yfr=r(Ygt,"TFBertForMultipleChoice"),Ygt.forEach(t),wfr=r(d7e," (BERT model)"),d7e.forEach(t),Afr=i(ne),$M=s(ne,"LI",{});var c7e=n($M);Rpe=s(c7e,"STRONG",{});var Kgt=n(Rpe);Lfr=r(Kgt,"camembert"),Kgt.forEach(t),Bfr=r(c7e," \u2014 "),wG=s(c7e,"A",{href:!0});var Zgt=n(wG);xfr=r(Zgt,"TFCamembertForMultipleChoice"),Zgt.forEach(t),kfr=r(c7e," (CamemBERT model)"),c7e.forEach(t),Rfr=i(ne),IM=s(ne,"LI",{});var m7e=n(IM);Spe=s(m7e,"STRONG",{});var eht=n(Spe);Sfr=r(eht,"convbert"),eht.forEach(t),Pfr=r(m7e," \u2014 "),AG=s(m7e,"A",{href:!0});var oht=n(AG);$fr=r(oht,"TFConvBertForMultipleChoice"),oht.forEach(t),Ifr=r(m7e," (ConvBERT model)"),m7e.forEach(t),jfr=i(ne),jM=s(ne,"LI",{});var f7e=n(jM);Ppe=s(f7e,"STRONG",{});var rht=n(Ppe);Dfr=r(rht,"distilbert"),rht.forEach(t),Nfr=r(f7e," \u2014 "),LG=s(f7e,"A",{href:!0});var tht=n(LG);qfr=r(tht,"TFDistilBertForMultipleChoice"),tht.forEach(t),Ofr=r(f7e," (DistilBERT model)"),f7e.forEach(t),Gfr=i(ne),DM=s(ne,"LI",{});var g7e=n(DM);$pe=s(g7e,"STRONG",{});var aht=n($pe);Xfr=r(aht,"electra"),aht.forEach(t),Vfr=r(g7e," \u2014 "),BG=s(g7e,"A",{href:!0});var sht=n(BG);zfr=r(sht,"TFElectraForMultipleChoice"),sht.forEach(t),Wfr=r(g7e," (ELECTRA model)"),g7e.forEach(t),Qfr=i(ne),NM=s(ne,"LI",{});var h7e=n(NM);Ipe=s(h7e,"STRONG",{});var nht=n(Ipe);Hfr=r(nht,"flaubert"),nht.forEach(t),Ufr=r(h7e," \u2014 "),xG=s(h7e,"A",{href:!0});var lht=n(xG);Jfr=r(lht,"TFFlaubertForMultipleChoice"),lht.forEach(t),Yfr=r(h7e," (FlauBERT model)"),h7e.forEach(t),Kfr=i(ne),qM=s(ne,"LI",{});var u7e=n(qM);jpe=s(u7e,"STRONG",{});var iht=n(jpe);Zfr=r(iht,"funnel"),iht.forEach(t),egr=r(u7e," \u2014 "),kG=s(u7e,"A",{href:!0});var dht=n(kG);ogr=r(dht,"TFFunnelForMultipleChoice"),dht.forEach(t),rgr=r(u7e," (Funnel Transformer model)"),u7e.forEach(t),tgr=i(ne),OM=s(ne,"LI",{});var p7e=n(OM);Dpe=s(p7e,"STRONG",{});var cht=n(Dpe);agr=r(cht,"longformer"),cht.forEach(t),sgr=r(p7e," \u2014 "),RG=s(p7e,"A",{href:!0});var mht=n(RG);ngr=r(mht,"TFLongformerForMultipleChoice"),mht.forEach(t),lgr=r(p7e," (Longformer model)"),p7e.forEach(t),igr=i(ne),GM=s(ne,"LI",{});var _7e=n(GM);Npe=s(_7e,"STRONG",{});var fht=n(Npe);dgr=r(fht,"mobilebert"),fht.forEach(t),cgr=r(_7e," \u2014 "),SG=s(_7e,"A",{href:!0});var ght=n(SG);mgr=r(ght,"TFMobileBertForMultipleChoice"),ght.forEach(t),fgr=r(_7e," (MobileBERT model)"),_7e.forEach(t),ggr=i(ne),XM=s(ne,"LI",{});var b7e=n(XM);qpe=s(b7e,"STRONG",{});var hht=n(qpe);hgr=r(hht,"mpnet"),hht.forEach(t),ugr=r(b7e," \u2014 "),PG=s(b7e,"A",{href:!0});var uht=n(PG);pgr=r(uht,"TFMPNetForMultipleChoice"),uht.forEach(t),_gr=r(b7e," (MPNet model)"),b7e.forEach(t),bgr=i(ne),VM=s(ne,"LI",{});var v7e=n(VM);Ope=s(v7e,"STRONG",{});var pht=n(Ope);vgr=r(pht,"rembert"),pht.forEach(t),Tgr=r(v7e," \u2014 "),$G=s(v7e,"A",{href:!0});var _ht=n($G);Fgr=r(_ht,"TFRemBertForMultipleChoice"),_ht.forEach(t),Cgr=r(v7e," (RemBERT model)"),v7e.forEach(t),Mgr=i(ne),zM=s(ne,"LI",{});var T7e=n(zM);Gpe=s(T7e,"STRONG",{});var bht=n(Gpe);Egr=r(bht,"roberta"),bht.forEach(t),ygr=r(T7e," \u2014 "),IG=s(T7e,"A",{href:!0});var vht=n(IG);wgr=r(vht,"TFRobertaForMultipleChoice"),vht.forEach(t),Agr=r(T7e," (RoBERTa model)"),T7e.forEach(t),Lgr=i(ne),WM=s(ne,"LI",{});var F7e=n(WM);Xpe=s(F7e,"STRONG",{});var Tht=n(Xpe);Bgr=r(Tht,"roformer"),Tht.forEach(t),xgr=r(F7e," \u2014 "),jG=s(F7e,"A",{href:!0});var Fht=n(jG);kgr=r(Fht,"TFRoFormerForMultipleChoice"),Fht.forEach(t),Rgr=r(F7e," (RoFormer model)"),F7e.forEach(t),Sgr=i(ne),QM=s(ne,"LI",{});var C7e=n(QM);Vpe=s(C7e,"STRONG",{});var Cht=n(Vpe);Pgr=r(Cht,"xlm"),Cht.forEach(t),$gr=r(C7e," \u2014 "),DG=s(C7e,"A",{href:!0});var Mht=n(DG);Igr=r(Mht,"TFXLMForMultipleChoice"),Mht.forEach(t),jgr=r(C7e," (XLM model)"),C7e.forEach(t),Dgr=i(ne),HM=s(ne,"LI",{});var M7e=n(HM);zpe=s(M7e,"STRONG",{});var Eht=n(zpe);Ngr=r(Eht,"xlm-roberta"),Eht.forEach(t),qgr=r(M7e," \u2014 "),NG=s(M7e,"A",{href:!0});var yht=n(NG);Ogr=r(yht,"TFXLMRobertaForMultipleChoice"),yht.forEach(t),Ggr=r(M7e," (XLM-RoBERTa model)"),M7e.forEach(t),Xgr=i(ne),UM=s(ne,"LI",{});var E7e=n(UM);Wpe=s(E7e,"STRONG",{});var wht=n(Wpe);Vgr=r(wht,"xlnet"),wht.forEach(t),zgr=r(E7e," \u2014 "),qG=s(E7e,"A",{href:!0});var Aht=n(qG);Wgr=r(Aht,"TFXLNetForMultipleChoice"),Aht.forEach(t),Qgr=r(E7e," (XLNet model)"),E7e.forEach(t),ne.forEach(t),Hgr=i(Ca),Qpe=s(Ca,"P",{});var Lht=n(Qpe);Ugr=r(Lht,"Examples:"),Lht.forEach(t),Jgr=i(Ca),f(x0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),Ake=i(d),jc=s(d,"H2",{class:!0});var NSe=n(jc);JM=s(NSe,"A",{id:!0,class:!0,href:!0});var Bht=n(JM);Hpe=s(Bht,"SPAN",{});var xht=n(Hpe);f(k0.$$.fragment,xht),xht.forEach(t),Bht.forEach(t),Ygr=i(NSe),Upe=s(NSe,"SPAN",{});var kht=n(Upe);Kgr=r(kht,"TFAutoModelForTableQuestionAnswering"),kht.forEach(t),NSe.forEach(t),Lke=i(d),Ar=s(d,"DIV",{class:!0});var oi=n(Ar);f(R0.$$.fragment,oi),Zgr=i(oi),Dc=s(oi,"P",{});var PW=n(Dc);ehr=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Jpe=s(PW,"CODE",{});var Rht=n(Jpe);ohr=r(Rht,"from_pretrained()"),Rht.forEach(t),rhr=r(PW,"class method or the "),Ype=s(PW,"CODE",{});var Sht=n(Ype);thr=r(Sht,"from_config()"),Sht.forEach(t),ahr=r(PW,`class
method.`),PW.forEach(t),shr=i(oi),S0=s(oi,"P",{});var qSe=n(S0);nhr=r(qSe,"This class cannot be instantiated directly using "),Kpe=s(qSe,"CODE",{});var Pht=n(Kpe);lhr=r(Pht,"__init__()"),Pht.forEach(t),ihr=r(qSe," (throws an error)."),qSe.forEach(t),dhr=i(oi),Ft=s(oi,"DIV",{class:!0});var ri=n(Ft);f(P0.$$.fragment,ri),chr=i(ri),Zpe=s(ri,"P",{});var $ht=n(Zpe);mhr=r($ht,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$ht.forEach(t),fhr=i(ri),Nc=s(ri,"P",{});var $W=n(Nc);ghr=r($W,`Note:
Loading a model from its configuration file does `),e_e=s($W,"STRONG",{});var Iht=n(e_e);hhr=r(Iht,"not"),Iht.forEach(t),uhr=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),o_e=s($W,"CODE",{});var jht=n(o_e);phr=r(jht,"from_pretrained()"),jht.forEach(t),_hr=r($W,"to load the model weights."),$W.forEach(t),bhr=i(ri),r_e=s(ri,"P",{});var Dht=n(r_e);vhr=r(Dht,"Examples:"),Dht.forEach(t),Thr=i(ri),f($0.$$.fragment,ri),ri.forEach(t),Fhr=i(oi),Co=s(oi,"DIV",{class:!0});var Ma=n(Co);f(I0.$$.fragment,Ma),Chr=i(Ma),t_e=s(Ma,"P",{});var Nht=n(t_e);Mhr=r(Nht,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nht.forEach(t),Ehr=i(Ma),Ms=s(Ma,"P",{});var x5=n(Ms);yhr=r(x5,"The model class to instantiate is selected based on the "),a_e=s(x5,"CODE",{});var qht=n(a_e);whr=r(qht,"model_type"),qht.forEach(t),Ahr=r(x5,` property of the config object (either
passed as an argument or loaded from `),s_e=s(x5,"CODE",{});var Oht=n(s_e);Lhr=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),Bhr=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n_e=s(x5,"CODE",{});var Ght=n(n_e);xhr=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),khr=r(x5,":"),x5.forEach(t),Rhr=i(Ma),l_e=s(Ma,"UL",{});var Xht=n(l_e);YM=s(Xht,"LI",{});var y7e=n(YM);i_e=s(y7e,"STRONG",{});var Vht=n(i_e);Shr=r(Vht,"tapas"),Vht.forEach(t),Phr=r(y7e," \u2014 "),OG=s(y7e,"A",{href:!0});var zht=n(OG);$hr=r(zht,"TFTapasForQuestionAnswering"),zht.forEach(t),Ihr=r(y7e," (TAPAS model)"),y7e.forEach(t),Xht.forEach(t),jhr=i(Ma),d_e=s(Ma,"P",{});var Wht=n(d_e);Dhr=r(Wht,"Examples:"),Wht.forEach(t),Nhr=i(Ma),f(j0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),Bke=i(d),qc=s(d,"H2",{class:!0});var OSe=n(qc);KM=s(OSe,"A",{id:!0,class:!0,href:!0});var Qht=n(KM);c_e=s(Qht,"SPAN",{});var Hht=n(c_e);f(D0.$$.fragment,Hht),Hht.forEach(t),Qht.forEach(t),qhr=i(OSe),m_e=s(OSe,"SPAN",{});var Uht=n(m_e);Ohr=r(Uht,"TFAutoModelForTokenClassification"),Uht.forEach(t),OSe.forEach(t),xke=i(d),Lr=s(d,"DIV",{class:!0});var ti=n(Lr);f(N0.$$.fragment,ti),Ghr=i(ti),Oc=s(ti,"P",{});var IW=n(Oc);Xhr=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),f_e=s(IW,"CODE",{});var Jht=n(f_e);Vhr=r(Jht,"from_pretrained()"),Jht.forEach(t),zhr=r(IW,"class method or the "),g_e=s(IW,"CODE",{});var Yht=n(g_e);Whr=r(Yht,"from_config()"),Yht.forEach(t),Qhr=r(IW,`class
method.`),IW.forEach(t),Hhr=i(ti),q0=s(ti,"P",{});var GSe=n(q0);Uhr=r(GSe,"This class cannot be instantiated directly using "),h_e=s(GSe,"CODE",{});var Kht=n(h_e);Jhr=r(Kht,"__init__()"),Kht.forEach(t),Yhr=r(GSe," (throws an error)."),GSe.forEach(t),Khr=i(ti),Ct=s(ti,"DIV",{class:!0});var ai=n(Ct);f(O0.$$.fragment,ai),Zhr=i(ai),u_e=s(ai,"P",{});var Zht=n(u_e);eur=r(Zht,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zht.forEach(t),our=i(ai),Gc=s(ai,"P",{});var jW=n(Gc);rur=r(jW,`Note:
Loading a model from its configuration file does `),p_e=s(jW,"STRONG",{});var eut=n(p_e);tur=r(eut,"not"),eut.forEach(t),aur=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),__e=s(jW,"CODE",{});var out=n(__e);sur=r(out,"from_pretrained()"),out.forEach(t),nur=r(jW,"to load the model weights."),jW.forEach(t),lur=i(ai),b_e=s(ai,"P",{});var rut=n(b_e);iur=r(rut,"Examples:"),rut.forEach(t),dur=i(ai),f(G0.$$.fragment,ai),ai.forEach(t),cur=i(ti),Mo=s(ti,"DIV",{class:!0});var Ea=n(Mo);f(X0.$$.fragment,Ea),mur=i(Ea),v_e=s(Ea,"P",{});var tut=n(v_e);fur=r(tut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tut.forEach(t),gur=i(Ea),Es=s(Ea,"P",{});var k5=n(Es);hur=r(k5,"The model class to instantiate is selected based on the "),T_e=s(k5,"CODE",{});var aut=n(T_e);uur=r(aut,"model_type"),aut.forEach(t),pur=r(k5,` property of the config object (either
passed as an argument or loaded from `),F_e=s(k5,"CODE",{});var sut=n(F_e);_ur=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),bur=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C_e=s(k5,"CODE",{});var nut=n(C_e);vur=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),Tur=r(k5,":"),k5.forEach(t),Fur=i(Ea),K=s(Ea,"UL",{});var oe=n(K);ZM=s(oe,"LI",{});var w7e=n(ZM);M_e=s(w7e,"STRONG",{});var lut=n(M_e);Cur=r(lut,"albert"),lut.forEach(t),Mur=r(w7e," \u2014 "),GG=s(w7e,"A",{href:!0});var iut=n(GG);Eur=r(iut,"TFAlbertForTokenClassification"),iut.forEach(t),yur=r(w7e," (ALBERT model)"),w7e.forEach(t),wur=i(oe),e4=s(oe,"LI",{});var A7e=n(e4);E_e=s(A7e,"STRONG",{});var dut=n(E_e);Aur=r(dut,"bert"),dut.forEach(t),Lur=r(A7e," \u2014 "),XG=s(A7e,"A",{href:!0});var cut=n(XG);Bur=r(cut,"TFBertForTokenClassification"),cut.forEach(t),xur=r(A7e," (BERT model)"),A7e.forEach(t),kur=i(oe),o4=s(oe,"LI",{});var L7e=n(o4);y_e=s(L7e,"STRONG",{});var mut=n(y_e);Rur=r(mut,"camembert"),mut.forEach(t),Sur=r(L7e," \u2014 "),VG=s(L7e,"A",{href:!0});var fut=n(VG);Pur=r(fut,"TFCamembertForTokenClassification"),fut.forEach(t),$ur=r(L7e," (CamemBERT model)"),L7e.forEach(t),Iur=i(oe),r4=s(oe,"LI",{});var B7e=n(r4);w_e=s(B7e,"STRONG",{});var gut=n(w_e);jur=r(gut,"convbert"),gut.forEach(t),Dur=r(B7e," \u2014 "),zG=s(B7e,"A",{href:!0});var hut=n(zG);Nur=r(hut,"TFConvBertForTokenClassification"),hut.forEach(t),qur=r(B7e," (ConvBERT model)"),B7e.forEach(t),Our=i(oe),t4=s(oe,"LI",{});var x7e=n(t4);A_e=s(x7e,"STRONG",{});var uut=n(A_e);Gur=r(uut,"deberta"),uut.forEach(t),Xur=r(x7e," \u2014 "),WG=s(x7e,"A",{href:!0});var put=n(WG);Vur=r(put,"TFDebertaForTokenClassification"),put.forEach(t),zur=r(x7e," (DeBERTa model)"),x7e.forEach(t),Wur=i(oe),a4=s(oe,"LI",{});var k7e=n(a4);L_e=s(k7e,"STRONG",{});var _ut=n(L_e);Qur=r(_ut,"deberta-v2"),_ut.forEach(t),Hur=r(k7e," \u2014 "),QG=s(k7e,"A",{href:!0});var but=n(QG);Uur=r(but,"TFDebertaV2ForTokenClassification"),but.forEach(t),Jur=r(k7e," (DeBERTa-v2 model)"),k7e.forEach(t),Yur=i(oe),s4=s(oe,"LI",{});var R7e=n(s4);B_e=s(R7e,"STRONG",{});var vut=n(B_e);Kur=r(vut,"distilbert"),vut.forEach(t),Zur=r(R7e," \u2014 "),HG=s(R7e,"A",{href:!0});var Tut=n(HG);epr=r(Tut,"TFDistilBertForTokenClassification"),Tut.forEach(t),opr=r(R7e," (DistilBERT model)"),R7e.forEach(t),rpr=i(oe),n4=s(oe,"LI",{});var S7e=n(n4);x_e=s(S7e,"STRONG",{});var Fut=n(x_e);tpr=r(Fut,"electra"),Fut.forEach(t),apr=r(S7e," \u2014 "),UG=s(S7e,"A",{href:!0});var Cut=n(UG);spr=r(Cut,"TFElectraForTokenClassification"),Cut.forEach(t),npr=r(S7e," (ELECTRA model)"),S7e.forEach(t),lpr=i(oe),l4=s(oe,"LI",{});var P7e=n(l4);k_e=s(P7e,"STRONG",{});var Mut=n(k_e);ipr=r(Mut,"flaubert"),Mut.forEach(t),dpr=r(P7e," \u2014 "),JG=s(P7e,"A",{href:!0});var Eut=n(JG);cpr=r(Eut,"TFFlaubertForTokenClassification"),Eut.forEach(t),mpr=r(P7e," (FlauBERT model)"),P7e.forEach(t),fpr=i(oe),i4=s(oe,"LI",{});var $7e=n(i4);R_e=s($7e,"STRONG",{});var yut=n(R_e);gpr=r(yut,"funnel"),yut.forEach(t),hpr=r($7e," \u2014 "),YG=s($7e,"A",{href:!0});var wut=n(YG);upr=r(wut,"TFFunnelForTokenClassification"),wut.forEach(t),ppr=r($7e," (Funnel Transformer model)"),$7e.forEach(t),_pr=i(oe),d4=s(oe,"LI",{});var I7e=n(d4);S_e=s(I7e,"STRONG",{});var Aut=n(S_e);bpr=r(Aut,"layoutlm"),Aut.forEach(t),vpr=r(I7e," \u2014 "),KG=s(I7e,"A",{href:!0});var Lut=n(KG);Tpr=r(Lut,"TFLayoutLMForTokenClassification"),Lut.forEach(t),Fpr=r(I7e," (LayoutLM model)"),I7e.forEach(t),Cpr=i(oe),c4=s(oe,"LI",{});var j7e=n(c4);P_e=s(j7e,"STRONG",{});var But=n(P_e);Mpr=r(But,"longformer"),But.forEach(t),Epr=r(j7e," \u2014 "),ZG=s(j7e,"A",{href:!0});var xut=n(ZG);ypr=r(xut,"TFLongformerForTokenClassification"),xut.forEach(t),wpr=r(j7e," (Longformer model)"),j7e.forEach(t),Apr=i(oe),m4=s(oe,"LI",{});var D7e=n(m4);$_e=s(D7e,"STRONG",{});var kut=n($_e);Lpr=r(kut,"mobilebert"),kut.forEach(t),Bpr=r(D7e," \u2014 "),eX=s(D7e,"A",{href:!0});var Rut=n(eX);xpr=r(Rut,"TFMobileBertForTokenClassification"),Rut.forEach(t),kpr=r(D7e," (MobileBERT model)"),D7e.forEach(t),Rpr=i(oe),f4=s(oe,"LI",{});var N7e=n(f4);I_e=s(N7e,"STRONG",{});var Sut=n(I_e);Spr=r(Sut,"mpnet"),Sut.forEach(t),Ppr=r(N7e," \u2014 "),oX=s(N7e,"A",{href:!0});var Put=n(oX);$pr=r(Put,"TFMPNetForTokenClassification"),Put.forEach(t),Ipr=r(N7e," (MPNet model)"),N7e.forEach(t),jpr=i(oe),g4=s(oe,"LI",{});var q7e=n(g4);j_e=s(q7e,"STRONG",{});var $ut=n(j_e);Dpr=r($ut,"rembert"),$ut.forEach(t),Npr=r(q7e," \u2014 "),rX=s(q7e,"A",{href:!0});var Iut=n(rX);qpr=r(Iut,"TFRemBertForTokenClassification"),Iut.forEach(t),Opr=r(q7e," (RemBERT model)"),q7e.forEach(t),Gpr=i(oe),h4=s(oe,"LI",{});var O7e=n(h4);D_e=s(O7e,"STRONG",{});var jut=n(D_e);Xpr=r(jut,"roberta"),jut.forEach(t),Vpr=r(O7e," \u2014 "),tX=s(O7e,"A",{href:!0});var Dut=n(tX);zpr=r(Dut,"TFRobertaForTokenClassification"),Dut.forEach(t),Wpr=r(O7e," (RoBERTa model)"),O7e.forEach(t),Qpr=i(oe),u4=s(oe,"LI",{});var G7e=n(u4);N_e=s(G7e,"STRONG",{});var Nut=n(N_e);Hpr=r(Nut,"roformer"),Nut.forEach(t),Upr=r(G7e," \u2014 "),aX=s(G7e,"A",{href:!0});var qut=n(aX);Jpr=r(qut,"TFRoFormerForTokenClassification"),qut.forEach(t),Ypr=r(G7e," (RoFormer model)"),G7e.forEach(t),Kpr=i(oe),p4=s(oe,"LI",{});var X7e=n(p4);q_e=s(X7e,"STRONG",{});var Out=n(q_e);Zpr=r(Out,"xlm"),Out.forEach(t),e_r=r(X7e," \u2014 "),sX=s(X7e,"A",{href:!0});var Gut=n(sX);o_r=r(Gut,"TFXLMForTokenClassification"),Gut.forEach(t),r_r=r(X7e," (XLM model)"),X7e.forEach(t),t_r=i(oe),_4=s(oe,"LI",{});var V7e=n(_4);O_e=s(V7e,"STRONG",{});var Xut=n(O_e);a_r=r(Xut,"xlm-roberta"),Xut.forEach(t),s_r=r(V7e," \u2014 "),nX=s(V7e,"A",{href:!0});var Vut=n(nX);n_r=r(Vut,"TFXLMRobertaForTokenClassification"),Vut.forEach(t),l_r=r(V7e," (XLM-RoBERTa model)"),V7e.forEach(t),i_r=i(oe),b4=s(oe,"LI",{});var z7e=n(b4);G_e=s(z7e,"STRONG",{});var zut=n(G_e);d_r=r(zut,"xlnet"),zut.forEach(t),c_r=r(z7e," \u2014 "),lX=s(z7e,"A",{href:!0});var Wut=n(lX);m_r=r(Wut,"TFXLNetForTokenClassification"),Wut.forEach(t),f_r=r(z7e," (XLNet model)"),z7e.forEach(t),oe.forEach(t),g_r=i(Ea),X_e=s(Ea,"P",{});var Qut=n(X_e);h_r=r(Qut,"Examples:"),Qut.forEach(t),u_r=i(Ea),f(V0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),kke=i(d),Xc=s(d,"H2",{class:!0});var XSe=n(Xc);v4=s(XSe,"A",{id:!0,class:!0,href:!0});var Hut=n(v4);V_e=s(Hut,"SPAN",{});var Uut=n(V_e);f(z0.$$.fragment,Uut),Uut.forEach(t),Hut.forEach(t),p_r=i(XSe),z_e=s(XSe,"SPAN",{});var Jut=n(z_e);__r=r(Jut,"TFAutoModelForQuestionAnswering"),Jut.forEach(t),XSe.forEach(t),Rke=i(d),Br=s(d,"DIV",{class:!0});var si=n(Br);f(W0.$$.fragment,si),b_r=i(si),Vc=s(si,"P",{});var DW=n(Vc);v_r=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),W_e=s(DW,"CODE",{});var Yut=n(W_e);T_r=r(Yut,"from_pretrained()"),Yut.forEach(t),F_r=r(DW,"class method or the "),Q_e=s(DW,"CODE",{});var Kut=n(Q_e);C_r=r(Kut,"from_config()"),Kut.forEach(t),M_r=r(DW,`class
method.`),DW.forEach(t),E_r=i(si),Q0=s(si,"P",{});var VSe=n(Q0);y_r=r(VSe,"This class cannot be instantiated directly using "),H_e=s(VSe,"CODE",{});var Zut=n(H_e);w_r=r(Zut,"__init__()"),Zut.forEach(t),A_r=r(VSe," (throws an error)."),VSe.forEach(t),L_r=i(si),Mt=s(si,"DIV",{class:!0});var ni=n(Mt);f(H0.$$.fragment,ni),B_r=i(ni),U_e=s(ni,"P",{});var ept=n(U_e);x_r=r(ept,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ept.forEach(t),k_r=i(ni),zc=s(ni,"P",{});var NW=n(zc);R_r=r(NW,`Note:
Loading a model from its configuration file does `),J_e=s(NW,"STRONG",{});var opt=n(J_e);S_r=r(opt,"not"),opt.forEach(t),P_r=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Y_e=s(NW,"CODE",{});var rpt=n(Y_e);$_r=r(rpt,"from_pretrained()"),rpt.forEach(t),I_r=r(NW,"to load the model weights."),NW.forEach(t),j_r=i(ni),K_e=s(ni,"P",{});var tpt=n(K_e);D_r=r(tpt,"Examples:"),tpt.forEach(t),N_r=i(ni),f(U0.$$.fragment,ni),ni.forEach(t),q_r=i(si),Eo=s(si,"DIV",{class:!0});var ya=n(Eo);f(J0.$$.fragment,ya),O_r=i(ya),Z_e=s(ya,"P",{});var apt=n(Z_e);G_r=r(apt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),apt.forEach(t),X_r=i(ya),ys=s(ya,"P",{});var R5=n(ys);V_r=r(R5,"The model class to instantiate is selected based on the "),ebe=s(R5,"CODE",{});var spt=n(ebe);z_r=r(spt,"model_type"),spt.forEach(t),W_r=r(R5,` property of the config object (either
passed as an argument or loaded from `),obe=s(R5,"CODE",{});var npt=n(obe);Q_r=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),H_r=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=s(R5,"CODE",{});var lpt=n(rbe);U_r=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),J_r=r(R5,":"),R5.forEach(t),Y_r=i(ya),Z=s(ya,"UL",{});var re=n(Z);T4=s(re,"LI",{});var W7e=n(T4);tbe=s(W7e,"STRONG",{});var ipt=n(tbe);K_r=r(ipt,"albert"),ipt.forEach(t),Z_r=r(W7e," \u2014 "),iX=s(W7e,"A",{href:!0});var dpt=n(iX);ebr=r(dpt,"TFAlbertForQuestionAnswering"),dpt.forEach(t),obr=r(W7e," (ALBERT model)"),W7e.forEach(t),rbr=i(re),F4=s(re,"LI",{});var Q7e=n(F4);abe=s(Q7e,"STRONG",{});var cpt=n(abe);tbr=r(cpt,"bert"),cpt.forEach(t),abr=r(Q7e," \u2014 "),dX=s(Q7e,"A",{href:!0});var mpt=n(dX);sbr=r(mpt,"TFBertForQuestionAnswering"),mpt.forEach(t),nbr=r(Q7e," (BERT model)"),Q7e.forEach(t),lbr=i(re),C4=s(re,"LI",{});var H7e=n(C4);sbe=s(H7e,"STRONG",{});var fpt=n(sbe);ibr=r(fpt,"camembert"),fpt.forEach(t),dbr=r(H7e," \u2014 "),cX=s(H7e,"A",{href:!0});var gpt=n(cX);cbr=r(gpt,"TFCamembertForQuestionAnswering"),gpt.forEach(t),mbr=r(H7e," (CamemBERT model)"),H7e.forEach(t),fbr=i(re),M4=s(re,"LI",{});var U7e=n(M4);nbe=s(U7e,"STRONG",{});var hpt=n(nbe);gbr=r(hpt,"convbert"),hpt.forEach(t),hbr=r(U7e," \u2014 "),mX=s(U7e,"A",{href:!0});var upt=n(mX);ubr=r(upt,"TFConvBertForQuestionAnswering"),upt.forEach(t),pbr=r(U7e," (ConvBERT model)"),U7e.forEach(t),_br=i(re),E4=s(re,"LI",{});var J7e=n(E4);lbe=s(J7e,"STRONG",{});var ppt=n(lbe);bbr=r(ppt,"deberta"),ppt.forEach(t),vbr=r(J7e," \u2014 "),fX=s(J7e,"A",{href:!0});var _pt=n(fX);Tbr=r(_pt,"TFDebertaForQuestionAnswering"),_pt.forEach(t),Fbr=r(J7e," (DeBERTa model)"),J7e.forEach(t),Cbr=i(re),y4=s(re,"LI",{});var Y7e=n(y4);ibe=s(Y7e,"STRONG",{});var bpt=n(ibe);Mbr=r(bpt,"deberta-v2"),bpt.forEach(t),Ebr=r(Y7e," \u2014 "),gX=s(Y7e,"A",{href:!0});var vpt=n(gX);ybr=r(vpt,"TFDebertaV2ForQuestionAnswering"),vpt.forEach(t),wbr=r(Y7e," (DeBERTa-v2 model)"),Y7e.forEach(t),Abr=i(re),w4=s(re,"LI",{});var K7e=n(w4);dbe=s(K7e,"STRONG",{});var Tpt=n(dbe);Lbr=r(Tpt,"distilbert"),Tpt.forEach(t),Bbr=r(K7e," \u2014 "),hX=s(K7e,"A",{href:!0});var Fpt=n(hX);xbr=r(Fpt,"TFDistilBertForQuestionAnswering"),Fpt.forEach(t),kbr=r(K7e," (DistilBERT model)"),K7e.forEach(t),Rbr=i(re),A4=s(re,"LI",{});var Z7e=n(A4);cbe=s(Z7e,"STRONG",{});var Cpt=n(cbe);Sbr=r(Cpt,"electra"),Cpt.forEach(t),Pbr=r(Z7e," \u2014 "),uX=s(Z7e,"A",{href:!0});var Mpt=n(uX);$br=r(Mpt,"TFElectraForQuestionAnswering"),Mpt.forEach(t),Ibr=r(Z7e," (ELECTRA model)"),Z7e.forEach(t),jbr=i(re),L4=s(re,"LI",{});var e9e=n(L4);mbe=s(e9e,"STRONG",{});var Ept=n(mbe);Dbr=r(Ept,"flaubert"),Ept.forEach(t),Nbr=r(e9e," \u2014 "),pX=s(e9e,"A",{href:!0});var ypt=n(pX);qbr=r(ypt,"TFFlaubertForQuestionAnsweringSimple"),ypt.forEach(t),Obr=r(e9e," (FlauBERT model)"),e9e.forEach(t),Gbr=i(re),B4=s(re,"LI",{});var o9e=n(B4);fbe=s(o9e,"STRONG",{});var wpt=n(fbe);Xbr=r(wpt,"funnel"),wpt.forEach(t),Vbr=r(o9e," \u2014 "),_X=s(o9e,"A",{href:!0});var Apt=n(_X);zbr=r(Apt,"TFFunnelForQuestionAnswering"),Apt.forEach(t),Wbr=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),Qbr=i(re),x4=s(re,"LI",{});var r9e=n(x4);gbe=s(r9e,"STRONG",{});var Lpt=n(gbe);Hbr=r(Lpt,"longformer"),Lpt.forEach(t),Ubr=r(r9e," \u2014 "),bX=s(r9e,"A",{href:!0});var Bpt=n(bX);Jbr=r(Bpt,"TFLongformerForQuestionAnswering"),Bpt.forEach(t),Ybr=r(r9e," (Longformer model)"),r9e.forEach(t),Kbr=i(re),k4=s(re,"LI",{});var t9e=n(k4);hbe=s(t9e,"STRONG",{});var xpt=n(hbe);Zbr=r(xpt,"mobilebert"),xpt.forEach(t),e2r=r(t9e," \u2014 "),vX=s(t9e,"A",{href:!0});var kpt=n(vX);o2r=r(kpt,"TFMobileBertForQuestionAnswering"),kpt.forEach(t),r2r=r(t9e," (MobileBERT model)"),t9e.forEach(t),t2r=i(re),R4=s(re,"LI",{});var a9e=n(R4);ube=s(a9e,"STRONG",{});var Rpt=n(ube);a2r=r(Rpt,"mpnet"),Rpt.forEach(t),s2r=r(a9e," \u2014 "),TX=s(a9e,"A",{href:!0});var Spt=n(TX);n2r=r(Spt,"TFMPNetForQuestionAnswering"),Spt.forEach(t),l2r=r(a9e," (MPNet model)"),a9e.forEach(t),i2r=i(re),S4=s(re,"LI",{});var s9e=n(S4);pbe=s(s9e,"STRONG",{});var Ppt=n(pbe);d2r=r(Ppt,"rembert"),Ppt.forEach(t),c2r=r(s9e," \u2014 "),FX=s(s9e,"A",{href:!0});var $pt=n(FX);m2r=r($pt,"TFRemBertForQuestionAnswering"),$pt.forEach(t),f2r=r(s9e," (RemBERT model)"),s9e.forEach(t),g2r=i(re),P4=s(re,"LI",{});var n9e=n(P4);_be=s(n9e,"STRONG",{});var Ipt=n(_be);h2r=r(Ipt,"roberta"),Ipt.forEach(t),u2r=r(n9e," \u2014 "),CX=s(n9e,"A",{href:!0});var jpt=n(CX);p2r=r(jpt,"TFRobertaForQuestionAnswering"),jpt.forEach(t),_2r=r(n9e," (RoBERTa model)"),n9e.forEach(t),b2r=i(re),$4=s(re,"LI",{});var l9e=n($4);bbe=s(l9e,"STRONG",{});var Dpt=n(bbe);v2r=r(Dpt,"roformer"),Dpt.forEach(t),T2r=r(l9e," \u2014 "),MX=s(l9e,"A",{href:!0});var Npt=n(MX);F2r=r(Npt,"TFRoFormerForQuestionAnswering"),Npt.forEach(t),C2r=r(l9e," (RoFormer model)"),l9e.forEach(t),M2r=i(re),I4=s(re,"LI",{});var i9e=n(I4);vbe=s(i9e,"STRONG",{});var qpt=n(vbe);E2r=r(qpt,"xlm"),qpt.forEach(t),y2r=r(i9e," \u2014 "),EX=s(i9e,"A",{href:!0});var Opt=n(EX);w2r=r(Opt,"TFXLMForQuestionAnsweringSimple"),Opt.forEach(t),A2r=r(i9e," (XLM model)"),i9e.forEach(t),L2r=i(re),j4=s(re,"LI",{});var d9e=n(j4);Tbe=s(d9e,"STRONG",{});var Gpt=n(Tbe);B2r=r(Gpt,"xlm-roberta"),Gpt.forEach(t),x2r=r(d9e," \u2014 "),yX=s(d9e,"A",{href:!0});var Xpt=n(yX);k2r=r(Xpt,"TFXLMRobertaForQuestionAnswering"),Xpt.forEach(t),R2r=r(d9e," (XLM-RoBERTa model)"),d9e.forEach(t),S2r=i(re),D4=s(re,"LI",{});var c9e=n(D4);Fbe=s(c9e,"STRONG",{});var Vpt=n(Fbe);P2r=r(Vpt,"xlnet"),Vpt.forEach(t),$2r=r(c9e," \u2014 "),wX=s(c9e,"A",{href:!0});var zpt=n(wX);I2r=r(zpt,"TFXLNetForQuestionAnsweringSimple"),zpt.forEach(t),j2r=r(c9e," (XLNet model)"),c9e.forEach(t),re.forEach(t),D2r=i(ya),Cbe=s(ya,"P",{});var Wpt=n(Cbe);N2r=r(Wpt,"Examples:"),Wpt.forEach(t),q2r=i(ya),f(Y0.$$.fragment,ya),ya.forEach(t),si.forEach(t),Ske=i(d),Wc=s(d,"H2",{class:!0});var zSe=n(Wc);N4=s(zSe,"A",{id:!0,class:!0,href:!0});var Qpt=n(N4);Mbe=s(Qpt,"SPAN",{});var Hpt=n(Mbe);f(K0.$$.fragment,Hpt),Hpt.forEach(t),Qpt.forEach(t),O2r=i(zSe),Ebe=s(zSe,"SPAN",{});var Upt=n(Ebe);G2r=r(Upt,"TFAutoModelForVision2Seq"),Upt.forEach(t),zSe.forEach(t),Pke=i(d),xr=s(d,"DIV",{class:!0});var li=n(xr);f(Z0.$$.fragment,li),X2r=i(li),Qc=s(li,"P",{});var qW=n(Qc);V2r=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ybe=s(qW,"CODE",{});var Jpt=n(ybe);z2r=r(Jpt,"from_pretrained()"),Jpt.forEach(t),W2r=r(qW,"class method or the "),wbe=s(qW,"CODE",{});var Ypt=n(wbe);Q2r=r(Ypt,"from_config()"),Ypt.forEach(t),H2r=r(qW,`class
method.`),qW.forEach(t),U2r=i(li),eL=s(li,"P",{});var WSe=n(eL);J2r=r(WSe,"This class cannot be instantiated directly using "),Abe=s(WSe,"CODE",{});var Kpt=n(Abe);Y2r=r(Kpt,"__init__()"),Kpt.forEach(t),K2r=r(WSe," (throws an error)."),WSe.forEach(t),Z2r=i(li),Et=s(li,"DIV",{class:!0});var ii=n(Et);f(oL.$$.fragment,ii),evr=i(ii),Lbe=s(ii,"P",{});var Zpt=n(Lbe);ovr=r(Zpt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zpt.forEach(t),rvr=i(ii),Hc=s(ii,"P",{});var OW=n(Hc);tvr=r(OW,`Note:
Loading a model from its configuration file does `),Bbe=s(OW,"STRONG",{});var e_t=n(Bbe);avr=r(e_t,"not"),e_t.forEach(t),svr=r(OW,` load the model weights. It only affects the
model\u2019s configuration. Use `),xbe=s(OW,"CODE",{});var o_t=n(xbe);nvr=r(o_t,"from_pretrained()"),o_t.forEach(t),lvr=r(OW,"to load the model weights."),OW.forEach(t),ivr=i(ii),kbe=s(ii,"P",{});var r_t=n(kbe);dvr=r(r_t,"Examples:"),r_t.forEach(t),cvr=i(ii),f(rL.$$.fragment,ii),ii.forEach(t),mvr=i(li),yo=s(li,"DIV",{class:!0});var wa=n(yo);f(tL.$$.fragment,wa),fvr=i(wa),Rbe=s(wa,"P",{});var t_t=n(Rbe);gvr=r(t_t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),t_t.forEach(t),hvr=i(wa),ws=s(wa,"P",{});var S5=n(ws);uvr=r(S5,"The model class to instantiate is selected based on the "),Sbe=s(S5,"CODE",{});var a_t=n(Sbe);pvr=r(a_t,"model_type"),a_t.forEach(t),_vr=r(S5,` property of the config object (either
passed as an argument or loaded from `),Pbe=s(S5,"CODE",{});var s_t=n(Pbe);bvr=r(s_t,"pretrained_model_name_or_path"),s_t.forEach(t),vvr=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=s(S5,"CODE",{});var n_t=n($be);Tvr=r(n_t,"pretrained_model_name_or_path"),n_t.forEach(t),Fvr=r(S5,":"),S5.forEach(t),Cvr=i(wa),Ibe=s(wa,"UL",{});var l_t=n(Ibe);q4=s(l_t,"LI",{});var m9e=n(q4);jbe=s(m9e,"STRONG",{});var i_t=n(jbe);Mvr=r(i_t,"vision-encoder-decoder"),i_t.forEach(t),Evr=r(m9e," \u2014 "),AX=s(m9e,"A",{href:!0});var d_t=n(AX);yvr=r(d_t,"TFVisionEncoderDecoderModel"),d_t.forEach(t),wvr=r(m9e," (Vision Encoder decoder model)"),m9e.forEach(t),l_t.forEach(t),Avr=i(wa),Dbe=s(wa,"P",{});var c_t=n(Dbe);Lvr=r(c_t,"Examples:"),c_t.forEach(t),Bvr=i(wa),f(aL.$$.fragment,wa),wa.forEach(t),li.forEach(t),$ke=i(d),Uc=s(d,"H2",{class:!0});var QSe=n(Uc);O4=s(QSe,"A",{id:!0,class:!0,href:!0});var m_t=n(O4);Nbe=s(m_t,"SPAN",{});var f_t=n(Nbe);f(sL.$$.fragment,f_t),f_t.forEach(t),m_t.forEach(t),xvr=i(QSe),qbe=s(QSe,"SPAN",{});var g_t=n(qbe);kvr=r(g_t,"TFAutoModelForSpeechSeq2Seq"),g_t.forEach(t),QSe.forEach(t),Ike=i(d),kr=s(d,"DIV",{class:!0});var di=n(kr);f(nL.$$.fragment,di),Rvr=i(di),Jc=s(di,"P",{});var GW=n(Jc);Svr=r(GW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Obe=s(GW,"CODE",{});var h_t=n(Obe);Pvr=r(h_t,"from_pretrained()"),h_t.forEach(t),$vr=r(GW,"class method or the "),Gbe=s(GW,"CODE",{});var u_t=n(Gbe);Ivr=r(u_t,"from_config()"),u_t.forEach(t),jvr=r(GW,`class
method.`),GW.forEach(t),Dvr=i(di),lL=s(di,"P",{});var HSe=n(lL);Nvr=r(HSe,"This class cannot be instantiated directly using "),Xbe=s(HSe,"CODE",{});var p_t=n(Xbe);qvr=r(p_t,"__init__()"),p_t.forEach(t),Ovr=r(HSe," (throws an error)."),HSe.forEach(t),Gvr=i(di),yt=s(di,"DIV",{class:!0});var ci=n(yt);f(iL.$$.fragment,ci),Xvr=i(ci),Vbe=s(ci,"P",{});var __t=n(Vbe);Vvr=r(__t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),__t.forEach(t),zvr=i(ci),Yc=s(ci,"P",{});var XW=n(Yc);Wvr=r(XW,`Note:
Loading a model from its configuration file does `),zbe=s(XW,"STRONG",{});var b_t=n(zbe);Qvr=r(b_t,"not"),b_t.forEach(t),Hvr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wbe=s(XW,"CODE",{});var v_t=n(Wbe);Uvr=r(v_t,"from_pretrained()"),v_t.forEach(t),Jvr=r(XW,"to load the model weights."),XW.forEach(t),Yvr=i(ci),Qbe=s(ci,"P",{});var T_t=n(Qbe);Kvr=r(T_t,"Examples:"),T_t.forEach(t),Zvr=i(ci),f(dL.$$.fragment,ci),ci.forEach(t),eTr=i(di),wo=s(di,"DIV",{class:!0});var Aa=n(wo);f(cL.$$.fragment,Aa),oTr=i(Aa),Hbe=s(Aa,"P",{});var F_t=n(Hbe);rTr=r(F_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F_t.forEach(t),tTr=i(Aa),As=s(Aa,"P",{});var P5=n(As);aTr=r(P5,"The model class to instantiate is selected based on the "),Ube=s(P5,"CODE",{});var C_t=n(Ube);sTr=r(C_t,"model_type"),C_t.forEach(t),nTr=r(P5,` property of the config object (either
passed as an argument or loaded from `),Jbe=s(P5,"CODE",{});var M_t=n(Jbe);lTr=r(M_t,"pretrained_model_name_or_path"),M_t.forEach(t),iTr=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=s(P5,"CODE",{});var E_t=n(Ybe);dTr=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),cTr=r(P5,":"),P5.forEach(t),mTr=i(Aa),Kbe=s(Aa,"UL",{});var y_t=n(Kbe);G4=s(y_t,"LI",{});var f9e=n(G4);Zbe=s(f9e,"STRONG",{});var w_t=n(Zbe);fTr=r(w_t,"speech_to_text"),w_t.forEach(t),gTr=r(f9e," \u2014 "),LX=s(f9e,"A",{href:!0});var A_t=n(LX);hTr=r(A_t,"TFSpeech2TextForConditionalGeneration"),A_t.forEach(t),uTr=r(f9e," (Speech2Text model)"),f9e.forEach(t),y_t.forEach(t),pTr=i(Aa),e2e=s(Aa,"P",{});var L_t=n(e2e);_Tr=r(L_t,"Examples:"),L_t.forEach(t),bTr=i(Aa),f(mL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),jke=i(d),Kc=s(d,"H2",{class:!0});var USe=n(Kc);X4=s(USe,"A",{id:!0,class:!0,href:!0});var B_t=n(X4);o2e=s(B_t,"SPAN",{});var x_t=n(o2e);f(fL.$$.fragment,x_t),x_t.forEach(t),B_t.forEach(t),vTr=i(USe),r2e=s(USe,"SPAN",{});var k_t=n(r2e);TTr=r(k_t,"FlaxAutoModel"),k_t.forEach(t),USe.forEach(t),Dke=i(d),Rr=s(d,"DIV",{class:!0});var mi=n(Rr);f(gL.$$.fragment,mi),FTr=i(mi),Zc=s(mi,"P",{});var VW=n(Zc);CTr=r(VW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),t2e=s(VW,"CODE",{});var R_t=n(t2e);MTr=r(R_t,"from_pretrained()"),R_t.forEach(t),ETr=r(VW,"class method or the "),a2e=s(VW,"CODE",{});var S_t=n(a2e);yTr=r(S_t,"from_config()"),S_t.forEach(t),wTr=r(VW,`class
method.`),VW.forEach(t),ATr=i(mi),hL=s(mi,"P",{});var JSe=n(hL);LTr=r(JSe,"This class cannot be instantiated directly using "),s2e=s(JSe,"CODE",{});var P_t=n(s2e);BTr=r(P_t,"__init__()"),P_t.forEach(t),xTr=r(JSe," (throws an error)."),JSe.forEach(t),kTr=i(mi),wt=s(mi,"DIV",{class:!0});var fi=n(wt);f(uL.$$.fragment,fi),RTr=i(fi),n2e=s(fi,"P",{});var $_t=n(n2e);STr=r($_t,"Instantiates one of the base model classes of the library from a configuration."),$_t.forEach(t),PTr=i(fi),em=s(fi,"P",{});var zW=n(em);$Tr=r(zW,`Note:
Loading a model from its configuration file does `),l2e=s(zW,"STRONG",{});var I_t=n(l2e);ITr=r(I_t,"not"),I_t.forEach(t),jTr=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),i2e=s(zW,"CODE",{});var j_t=n(i2e);DTr=r(j_t,"from_pretrained()"),j_t.forEach(t),NTr=r(zW,"to load the model weights."),zW.forEach(t),qTr=i(fi),d2e=s(fi,"P",{});var D_t=n(d2e);OTr=r(D_t,"Examples:"),D_t.forEach(t),GTr=i(fi),f(pL.$$.fragment,fi),fi.forEach(t),XTr=i(mi),Ao=s(mi,"DIV",{class:!0});var La=n(Ao);f(_L.$$.fragment,La),VTr=i(La),c2e=s(La,"P",{});var N_t=n(c2e);zTr=r(N_t,"Instantiate one of the base model classes of the library from a pretrained model."),N_t.forEach(t),WTr=i(La),Ls=s(La,"P",{});var $5=n(Ls);QTr=r($5,"The model class to instantiate is selected based on the "),m2e=s($5,"CODE",{});var q_t=n(m2e);HTr=r(q_t,"model_type"),q_t.forEach(t),UTr=r($5,` property of the config object (either
passed as an argument or loaded from `),f2e=s($5,"CODE",{});var O_t=n(f2e);JTr=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),YTr=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=s($5,"CODE",{});var G_t=n(g2e);KTr=r(G_t,"pretrained_model_name_or_path"),G_t.forEach(t),ZTr=r($5,":"),$5.forEach(t),e1r=i(La),z=s(La,"UL",{});var Q=n(z);V4=s(Q,"LI",{});var g9e=n(V4);h2e=s(g9e,"STRONG",{});var X_t=n(h2e);o1r=r(X_t,"albert"),X_t.forEach(t),r1r=r(g9e," \u2014 "),BX=s(g9e,"A",{href:!0});var V_t=n(BX);t1r=r(V_t,"FlaxAlbertModel"),V_t.forEach(t),a1r=r(g9e," (ALBERT model)"),g9e.forEach(t),s1r=i(Q),z4=s(Q,"LI",{});var h9e=n(z4);u2e=s(h9e,"STRONG",{});var z_t=n(u2e);n1r=r(z_t,"bart"),z_t.forEach(t),l1r=r(h9e," \u2014 "),xX=s(h9e,"A",{href:!0});var W_t=n(xX);i1r=r(W_t,"FlaxBartModel"),W_t.forEach(t),d1r=r(h9e," (BART model)"),h9e.forEach(t),c1r=i(Q),W4=s(Q,"LI",{});var u9e=n(W4);p2e=s(u9e,"STRONG",{});var Q_t=n(p2e);m1r=r(Q_t,"beit"),Q_t.forEach(t),f1r=r(u9e," \u2014 "),kX=s(u9e,"A",{href:!0});var H_t=n(kX);g1r=r(H_t,"FlaxBeitModel"),H_t.forEach(t),h1r=r(u9e," (BEiT model)"),u9e.forEach(t),u1r=i(Q),Q4=s(Q,"LI",{});var p9e=n(Q4);_2e=s(p9e,"STRONG",{});var U_t=n(_2e);p1r=r(U_t,"bert"),U_t.forEach(t),_1r=r(p9e," \u2014 "),RX=s(p9e,"A",{href:!0});var J_t=n(RX);b1r=r(J_t,"FlaxBertModel"),J_t.forEach(t),v1r=r(p9e," (BERT model)"),p9e.forEach(t),T1r=i(Q),H4=s(Q,"LI",{});var _9e=n(H4);b2e=s(_9e,"STRONG",{});var Y_t=n(b2e);F1r=r(Y_t,"big_bird"),Y_t.forEach(t),C1r=r(_9e," \u2014 "),SX=s(_9e,"A",{href:!0});var K_t=n(SX);M1r=r(K_t,"FlaxBigBirdModel"),K_t.forEach(t),E1r=r(_9e," (BigBird model)"),_9e.forEach(t),y1r=i(Q),U4=s(Q,"LI",{});var b9e=n(U4);v2e=s(b9e,"STRONG",{});var Z_t=n(v2e);w1r=r(Z_t,"blenderbot"),Z_t.forEach(t),A1r=r(b9e," \u2014 "),PX=s(b9e,"A",{href:!0});var ebt=n(PX);L1r=r(ebt,"FlaxBlenderbotModel"),ebt.forEach(t),B1r=r(b9e," (Blenderbot model)"),b9e.forEach(t),x1r=i(Q),J4=s(Q,"LI",{});var v9e=n(J4);T2e=s(v9e,"STRONG",{});var obt=n(T2e);k1r=r(obt,"blenderbot-small"),obt.forEach(t),R1r=r(v9e," \u2014 "),$X=s(v9e,"A",{href:!0});var rbt=n($X);S1r=r(rbt,"FlaxBlenderbotSmallModel"),rbt.forEach(t),P1r=r(v9e," (BlenderbotSmall model)"),v9e.forEach(t),$1r=i(Q),Y4=s(Q,"LI",{});var T9e=n(Y4);F2e=s(T9e,"STRONG",{});var tbt=n(F2e);I1r=r(tbt,"clip"),tbt.forEach(t),j1r=r(T9e," \u2014 "),IX=s(T9e,"A",{href:!0});var abt=n(IX);D1r=r(abt,"FlaxCLIPModel"),abt.forEach(t),N1r=r(T9e," (CLIP model)"),T9e.forEach(t),q1r=i(Q),K4=s(Q,"LI",{});var F9e=n(K4);C2e=s(F9e,"STRONG",{});var sbt=n(C2e);O1r=r(sbt,"distilbert"),sbt.forEach(t),G1r=r(F9e," \u2014 "),jX=s(F9e,"A",{href:!0});var nbt=n(jX);X1r=r(nbt,"FlaxDistilBertModel"),nbt.forEach(t),V1r=r(F9e," (DistilBERT model)"),F9e.forEach(t),z1r=i(Q),Z4=s(Q,"LI",{});var C9e=n(Z4);M2e=s(C9e,"STRONG",{});var lbt=n(M2e);W1r=r(lbt,"electra"),lbt.forEach(t),Q1r=r(C9e," \u2014 "),DX=s(C9e,"A",{href:!0});var ibt=n(DX);H1r=r(ibt,"FlaxElectraModel"),ibt.forEach(t),U1r=r(C9e," (ELECTRA model)"),C9e.forEach(t),J1r=i(Q),eE=s(Q,"LI",{});var M9e=n(eE);E2e=s(M9e,"STRONG",{});var dbt=n(E2e);Y1r=r(dbt,"gpt2"),dbt.forEach(t),K1r=r(M9e," \u2014 "),NX=s(M9e,"A",{href:!0});var cbt=n(NX);Z1r=r(cbt,"FlaxGPT2Model"),cbt.forEach(t),eFr=r(M9e," (OpenAI GPT-2 model)"),M9e.forEach(t),oFr=i(Q),oE=s(Q,"LI",{});var E9e=n(oE);y2e=s(E9e,"STRONG",{});var mbt=n(y2e);rFr=r(mbt,"gpt_neo"),mbt.forEach(t),tFr=r(E9e," \u2014 "),qX=s(E9e,"A",{href:!0});var fbt=n(qX);aFr=r(fbt,"FlaxGPTNeoModel"),fbt.forEach(t),sFr=r(E9e," (GPT Neo model)"),E9e.forEach(t),nFr=i(Q),rE=s(Q,"LI",{});var y9e=n(rE);w2e=s(y9e,"STRONG",{});var gbt=n(w2e);lFr=r(gbt,"gptj"),gbt.forEach(t),iFr=r(y9e," \u2014 "),OX=s(y9e,"A",{href:!0});var hbt=n(OX);dFr=r(hbt,"FlaxGPTJModel"),hbt.forEach(t),cFr=r(y9e," (GPT-J model)"),y9e.forEach(t),mFr=i(Q),tE=s(Q,"LI",{});var w9e=n(tE);A2e=s(w9e,"STRONG",{});var ubt=n(A2e);fFr=r(ubt,"marian"),ubt.forEach(t),gFr=r(w9e," \u2014 "),GX=s(w9e,"A",{href:!0});var pbt=n(GX);hFr=r(pbt,"FlaxMarianModel"),pbt.forEach(t),uFr=r(w9e," (Marian model)"),w9e.forEach(t),pFr=i(Q),aE=s(Q,"LI",{});var A9e=n(aE);L2e=s(A9e,"STRONG",{});var _bt=n(L2e);_Fr=r(_bt,"mbart"),_bt.forEach(t),bFr=r(A9e," \u2014 "),XX=s(A9e,"A",{href:!0});var bbt=n(XX);vFr=r(bbt,"FlaxMBartModel"),bbt.forEach(t),TFr=r(A9e," (mBART model)"),A9e.forEach(t),FFr=i(Q),sE=s(Q,"LI",{});var L9e=n(sE);B2e=s(L9e,"STRONG",{});var vbt=n(B2e);CFr=r(vbt,"mt5"),vbt.forEach(t),MFr=r(L9e," \u2014 "),VX=s(L9e,"A",{href:!0});var Tbt=n(VX);EFr=r(Tbt,"FlaxMT5Model"),Tbt.forEach(t),yFr=r(L9e," (mT5 model)"),L9e.forEach(t),wFr=i(Q),nE=s(Q,"LI",{});var B9e=n(nE);x2e=s(B9e,"STRONG",{});var Fbt=n(x2e);AFr=r(Fbt,"pegasus"),Fbt.forEach(t),LFr=r(B9e," \u2014 "),zX=s(B9e,"A",{href:!0});var Cbt=n(zX);BFr=r(Cbt,"FlaxPegasusModel"),Cbt.forEach(t),xFr=r(B9e," (Pegasus model)"),B9e.forEach(t),kFr=i(Q),lE=s(Q,"LI",{});var x9e=n(lE);k2e=s(x9e,"STRONG",{});var Mbt=n(k2e);RFr=r(Mbt,"roberta"),Mbt.forEach(t),SFr=r(x9e," \u2014 "),WX=s(x9e,"A",{href:!0});var Ebt=n(WX);PFr=r(Ebt,"FlaxRobertaModel"),Ebt.forEach(t),$Fr=r(x9e," (RoBERTa model)"),x9e.forEach(t),IFr=i(Q),iE=s(Q,"LI",{});var k9e=n(iE);R2e=s(k9e,"STRONG",{});var ybt=n(R2e);jFr=r(ybt,"roformer"),ybt.forEach(t),DFr=r(k9e," \u2014 "),QX=s(k9e,"A",{href:!0});var wbt=n(QX);NFr=r(wbt,"FlaxRoFormerModel"),wbt.forEach(t),qFr=r(k9e," (RoFormer model)"),k9e.forEach(t),OFr=i(Q),dE=s(Q,"LI",{});var R9e=n(dE);S2e=s(R9e,"STRONG",{});var Abt=n(S2e);GFr=r(Abt,"t5"),Abt.forEach(t),XFr=r(R9e," \u2014 "),HX=s(R9e,"A",{href:!0});var Lbt=n(HX);VFr=r(Lbt,"FlaxT5Model"),Lbt.forEach(t),zFr=r(R9e," (T5 model)"),R9e.forEach(t),WFr=i(Q),cE=s(Q,"LI",{});var S9e=n(cE);P2e=s(S9e,"STRONG",{});var Bbt=n(P2e);QFr=r(Bbt,"vision-text-dual-encoder"),Bbt.forEach(t),HFr=r(S9e," \u2014 "),UX=s(S9e,"A",{href:!0});var xbt=n(UX);UFr=r(xbt,"FlaxVisionTextDualEncoderModel"),xbt.forEach(t),JFr=r(S9e," (VisionTextDualEncoder model)"),S9e.forEach(t),YFr=i(Q),mE=s(Q,"LI",{});var P9e=n(mE);$2e=s(P9e,"STRONG",{});var kbt=n($2e);KFr=r(kbt,"vit"),kbt.forEach(t),ZFr=r(P9e," \u2014 "),JX=s(P9e,"A",{href:!0});var Rbt=n(JX);eCr=r(Rbt,"FlaxViTModel"),Rbt.forEach(t),oCr=r(P9e," (ViT model)"),P9e.forEach(t),rCr=i(Q),fE=s(Q,"LI",{});var $9e=n(fE);I2e=s($9e,"STRONG",{});var Sbt=n(I2e);tCr=r(Sbt,"wav2vec2"),Sbt.forEach(t),aCr=r($9e," \u2014 "),YX=s($9e,"A",{href:!0});var Pbt=n(YX);sCr=r(Pbt,"FlaxWav2Vec2Model"),Pbt.forEach(t),nCr=r($9e," (Wav2Vec2 model)"),$9e.forEach(t),lCr=i(Q),gE=s(Q,"LI",{});var I9e=n(gE);j2e=s(I9e,"STRONG",{});var $bt=n(j2e);iCr=r($bt,"xglm"),$bt.forEach(t),dCr=r(I9e," \u2014 "),KX=s(I9e,"A",{href:!0});var Ibt=n(KX);cCr=r(Ibt,"FlaxXGLMModel"),Ibt.forEach(t),mCr=r(I9e," (XGLM model)"),I9e.forEach(t),fCr=i(Q),hE=s(Q,"LI",{});var j9e=n(hE);D2e=s(j9e,"STRONG",{});var jbt=n(D2e);gCr=r(jbt,"xlm-roberta"),jbt.forEach(t),hCr=r(j9e," \u2014 "),ZX=s(j9e,"A",{href:!0});var Dbt=n(ZX);uCr=r(Dbt,"FlaxXLMRobertaModel"),Dbt.forEach(t),pCr=r(j9e," (XLM-RoBERTa model)"),j9e.forEach(t),Q.forEach(t),_Cr=i(La),N2e=s(La,"P",{});var Nbt=n(N2e);bCr=r(Nbt,"Examples:"),Nbt.forEach(t),vCr=i(La),f(bL.$$.fragment,La),La.forEach(t),mi.forEach(t),Nke=i(d),om=s(d,"H2",{class:!0});var YSe=n(om);uE=s(YSe,"A",{id:!0,class:!0,href:!0});var qbt=n(uE);q2e=s(qbt,"SPAN",{});var Obt=n(q2e);f(vL.$$.fragment,Obt),Obt.forEach(t),qbt.forEach(t),TCr=i(YSe),O2e=s(YSe,"SPAN",{});var Gbt=n(O2e);FCr=r(Gbt,"FlaxAutoModelForCausalLM"),Gbt.forEach(t),YSe.forEach(t),qke=i(d),Sr=s(d,"DIV",{class:!0});var gi=n(Sr);f(TL.$$.fragment,gi),CCr=i(gi),rm=s(gi,"P",{});var WW=n(rm);MCr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),G2e=s(WW,"CODE",{});var Xbt=n(G2e);ECr=r(Xbt,"from_pretrained()"),Xbt.forEach(t),yCr=r(WW,"class method or the "),X2e=s(WW,"CODE",{});var Vbt=n(X2e);wCr=r(Vbt,"from_config()"),Vbt.forEach(t),ACr=r(WW,`class
method.`),WW.forEach(t),LCr=i(gi),FL=s(gi,"P",{});var KSe=n(FL);BCr=r(KSe,"This class cannot be instantiated directly using "),V2e=s(KSe,"CODE",{});var zbt=n(V2e);xCr=r(zbt,"__init__()"),zbt.forEach(t),kCr=r(KSe," (throws an error)."),KSe.forEach(t),RCr=i(gi),At=s(gi,"DIV",{class:!0});var hi=n(At);f(CL.$$.fragment,hi),SCr=i(hi),z2e=s(hi,"P",{});var Wbt=n(z2e);PCr=r(Wbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Wbt.forEach(t),$Cr=i(hi),tm=s(hi,"P",{});var QW=n(tm);ICr=r(QW,`Note:
Loading a model from its configuration file does `),W2e=s(QW,"STRONG",{});var Qbt=n(W2e);jCr=r(Qbt,"not"),Qbt.forEach(t),DCr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q2e=s(QW,"CODE",{});var Hbt=n(Q2e);NCr=r(Hbt,"from_pretrained()"),Hbt.forEach(t),qCr=r(QW,"to load the model weights."),QW.forEach(t),OCr=i(hi),H2e=s(hi,"P",{});var Ubt=n(H2e);GCr=r(Ubt,"Examples:"),Ubt.forEach(t),XCr=i(hi),f(ML.$$.fragment,hi),hi.forEach(t),VCr=i(gi),Lo=s(gi,"DIV",{class:!0});var Ba=n(Lo);f(EL.$$.fragment,Ba),zCr=i(Ba),U2e=s(Ba,"P",{});var Jbt=n(U2e);WCr=r(Jbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Jbt.forEach(t),QCr=i(Ba),Bs=s(Ba,"P",{});var I5=n(Bs);HCr=r(I5,"The model class to instantiate is selected based on the "),J2e=s(I5,"CODE",{});var Ybt=n(J2e);UCr=r(Ybt,"model_type"),Ybt.forEach(t),JCr=r(I5,` property of the config object (either
passed as an argument or loaded from `),Y2e=s(I5,"CODE",{});var Kbt=n(Y2e);YCr=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),KCr=r(I5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=s(I5,"CODE",{});var Zbt=n(K2e);ZCr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),eMr=r(I5,":"),I5.forEach(t),oMr=i(Ba),ca=s(Ba,"UL",{});var ui=n(ca);pE=s(ui,"LI",{});var D9e=n(pE);Z2e=s(D9e,"STRONG",{});var e2t=n(Z2e);rMr=r(e2t,"bart"),e2t.forEach(t),tMr=r(D9e," \u2014 "),eV=s(D9e,"A",{href:!0});var o2t=n(eV);aMr=r(o2t,"FlaxBartForCausalLM"),o2t.forEach(t),sMr=r(D9e," (BART model)"),D9e.forEach(t),nMr=i(ui),_E=s(ui,"LI",{});var N9e=n(_E);eve=s(N9e,"STRONG",{});var r2t=n(eve);lMr=r(r2t,"gpt2"),r2t.forEach(t),iMr=r(N9e," \u2014 "),oV=s(N9e,"A",{href:!0});var t2t=n(oV);dMr=r(t2t,"FlaxGPT2LMHeadModel"),t2t.forEach(t),cMr=r(N9e," (OpenAI GPT-2 model)"),N9e.forEach(t),mMr=i(ui),bE=s(ui,"LI",{});var q9e=n(bE);ove=s(q9e,"STRONG",{});var a2t=n(ove);fMr=r(a2t,"gpt_neo"),a2t.forEach(t),gMr=r(q9e," \u2014 "),rV=s(q9e,"A",{href:!0});var s2t=n(rV);hMr=r(s2t,"FlaxGPTNeoForCausalLM"),s2t.forEach(t),uMr=r(q9e," (GPT Neo model)"),q9e.forEach(t),pMr=i(ui),vE=s(ui,"LI",{});var O9e=n(vE);rve=s(O9e,"STRONG",{});var n2t=n(rve);_Mr=r(n2t,"gptj"),n2t.forEach(t),bMr=r(O9e," \u2014 "),tV=s(O9e,"A",{href:!0});var l2t=n(tV);vMr=r(l2t,"FlaxGPTJForCausalLM"),l2t.forEach(t),TMr=r(O9e," (GPT-J model)"),O9e.forEach(t),FMr=i(ui),TE=s(ui,"LI",{});var G9e=n(TE);tve=s(G9e,"STRONG",{});var i2t=n(tve);CMr=r(i2t,"xglm"),i2t.forEach(t),MMr=r(G9e," \u2014 "),aV=s(G9e,"A",{href:!0});var d2t=n(aV);EMr=r(d2t,"FlaxXGLMForCausalLM"),d2t.forEach(t),yMr=r(G9e," (XGLM model)"),G9e.forEach(t),ui.forEach(t),wMr=i(Ba),ave=s(Ba,"P",{});var c2t=n(ave);AMr=r(c2t,"Examples:"),c2t.forEach(t),LMr=i(Ba),f(yL.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),Oke=i(d),am=s(d,"H2",{class:!0});var ZSe=n(am);FE=s(ZSe,"A",{id:!0,class:!0,href:!0});var m2t=n(FE);sve=s(m2t,"SPAN",{});var f2t=n(sve);f(wL.$$.fragment,f2t),f2t.forEach(t),m2t.forEach(t),BMr=i(ZSe),nve=s(ZSe,"SPAN",{});var g2t=n(nve);xMr=r(g2t,"FlaxAutoModelForPreTraining"),g2t.forEach(t),ZSe.forEach(t),Gke=i(d),Pr=s(d,"DIV",{class:!0});var pi=n(Pr);f(AL.$$.fragment,pi),kMr=i(pi),sm=s(pi,"P",{});var HW=n(sm);RMr=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lve=s(HW,"CODE",{});var h2t=n(lve);SMr=r(h2t,"from_pretrained()"),h2t.forEach(t),PMr=r(HW,"class method or the "),ive=s(HW,"CODE",{});var u2t=n(ive);$Mr=r(u2t,"from_config()"),u2t.forEach(t),IMr=r(HW,`class
method.`),HW.forEach(t),jMr=i(pi),LL=s(pi,"P",{});var ePe=n(LL);DMr=r(ePe,"This class cannot be instantiated directly using "),dve=s(ePe,"CODE",{});var p2t=n(dve);NMr=r(p2t,"__init__()"),p2t.forEach(t),qMr=r(ePe," (throws an error)."),ePe.forEach(t),OMr=i(pi),Lt=s(pi,"DIV",{class:!0});var _i=n(Lt);f(BL.$$.fragment,_i),GMr=i(_i),cve=s(_i,"P",{});var _2t=n(cve);XMr=r(_2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_2t.forEach(t),VMr=i(_i),nm=s(_i,"P",{});var UW=n(nm);zMr=r(UW,`Note:
Loading a model from its configuration file does `),mve=s(UW,"STRONG",{});var b2t=n(mve);WMr=r(b2t,"not"),b2t.forEach(t),QMr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fve=s(UW,"CODE",{});var v2t=n(fve);HMr=r(v2t,"from_pretrained()"),v2t.forEach(t),UMr=r(UW,"to load the model weights."),UW.forEach(t),JMr=i(_i),gve=s(_i,"P",{});var T2t=n(gve);YMr=r(T2t,"Examples:"),T2t.forEach(t),KMr=i(_i),f(xL.$$.fragment,_i),_i.forEach(t),ZMr=i(pi),Bo=s(pi,"DIV",{class:!0});var xa=n(Bo);f(kL.$$.fragment,xa),e4r=i(xa),hve=s(xa,"P",{});var F2t=n(hve);o4r=r(F2t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),F2t.forEach(t),r4r=i(xa),xs=s(xa,"P",{});var j5=n(xs);t4r=r(j5,"The model class to instantiate is selected based on the "),uve=s(j5,"CODE",{});var C2t=n(uve);a4r=r(C2t,"model_type"),C2t.forEach(t),s4r=r(j5,` property of the config object (either
passed as an argument or loaded from `),pve=s(j5,"CODE",{});var M2t=n(pve);n4r=r(M2t,"pretrained_model_name_or_path"),M2t.forEach(t),l4r=r(j5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=s(j5,"CODE",{});var E2t=n(_ve);i4r=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),d4r=r(j5,":"),j5.forEach(t),c4r=i(xa),ce=s(xa,"UL",{});var ge=n(ce);CE=s(ge,"LI",{});var X9e=n(CE);bve=s(X9e,"STRONG",{});var y2t=n(bve);m4r=r(y2t,"albert"),y2t.forEach(t),f4r=r(X9e," \u2014 "),sV=s(X9e,"A",{href:!0});var w2t=n(sV);g4r=r(w2t,"FlaxAlbertForPreTraining"),w2t.forEach(t),h4r=r(X9e," (ALBERT model)"),X9e.forEach(t),u4r=i(ge),ME=s(ge,"LI",{});var V9e=n(ME);vve=s(V9e,"STRONG",{});var A2t=n(vve);p4r=r(A2t,"bart"),A2t.forEach(t),_4r=r(V9e," \u2014 "),nV=s(V9e,"A",{href:!0});var L2t=n(nV);b4r=r(L2t,"FlaxBartForConditionalGeneration"),L2t.forEach(t),v4r=r(V9e," (BART model)"),V9e.forEach(t),T4r=i(ge),EE=s(ge,"LI",{});var z9e=n(EE);Tve=s(z9e,"STRONG",{});var B2t=n(Tve);F4r=r(B2t,"bert"),B2t.forEach(t),C4r=r(z9e," \u2014 "),lV=s(z9e,"A",{href:!0});var x2t=n(lV);M4r=r(x2t,"FlaxBertForPreTraining"),x2t.forEach(t),E4r=r(z9e," (BERT model)"),z9e.forEach(t),y4r=i(ge),yE=s(ge,"LI",{});var W9e=n(yE);Fve=s(W9e,"STRONG",{});var k2t=n(Fve);w4r=r(k2t,"big_bird"),k2t.forEach(t),A4r=r(W9e," \u2014 "),iV=s(W9e,"A",{href:!0});var R2t=n(iV);L4r=r(R2t,"FlaxBigBirdForPreTraining"),R2t.forEach(t),B4r=r(W9e," (BigBird model)"),W9e.forEach(t),x4r=i(ge),wE=s(ge,"LI",{});var Q9e=n(wE);Cve=s(Q9e,"STRONG",{});var S2t=n(Cve);k4r=r(S2t,"electra"),S2t.forEach(t),R4r=r(Q9e," \u2014 "),dV=s(Q9e,"A",{href:!0});var P2t=n(dV);S4r=r(P2t,"FlaxElectraForPreTraining"),P2t.forEach(t),P4r=r(Q9e," (ELECTRA model)"),Q9e.forEach(t),$4r=i(ge),AE=s(ge,"LI",{});var H9e=n(AE);Mve=s(H9e,"STRONG",{});var $2t=n(Mve);I4r=r($2t,"mbart"),$2t.forEach(t),j4r=r(H9e," \u2014 "),cV=s(H9e,"A",{href:!0});var I2t=n(cV);D4r=r(I2t,"FlaxMBartForConditionalGeneration"),I2t.forEach(t),N4r=r(H9e," (mBART model)"),H9e.forEach(t),q4r=i(ge),LE=s(ge,"LI",{});var U9e=n(LE);Eve=s(U9e,"STRONG",{});var j2t=n(Eve);O4r=r(j2t,"mt5"),j2t.forEach(t),G4r=r(U9e," \u2014 "),mV=s(U9e,"A",{href:!0});var D2t=n(mV);X4r=r(D2t,"FlaxMT5ForConditionalGeneration"),D2t.forEach(t),V4r=r(U9e," (mT5 model)"),U9e.forEach(t),z4r=i(ge),BE=s(ge,"LI",{});var J9e=n(BE);yve=s(J9e,"STRONG",{});var N2t=n(yve);W4r=r(N2t,"roberta"),N2t.forEach(t),Q4r=r(J9e," \u2014 "),fV=s(J9e,"A",{href:!0});var q2t=n(fV);H4r=r(q2t,"FlaxRobertaForMaskedLM"),q2t.forEach(t),U4r=r(J9e," (RoBERTa model)"),J9e.forEach(t),J4r=i(ge),xE=s(ge,"LI",{});var Y9e=n(xE);wve=s(Y9e,"STRONG",{});var O2t=n(wve);Y4r=r(O2t,"roformer"),O2t.forEach(t),K4r=r(Y9e," \u2014 "),gV=s(Y9e,"A",{href:!0});var G2t=n(gV);Z4r=r(G2t,"FlaxRoFormerForMaskedLM"),G2t.forEach(t),eEr=r(Y9e," (RoFormer model)"),Y9e.forEach(t),oEr=i(ge),kE=s(ge,"LI",{});var K9e=n(kE);Ave=s(K9e,"STRONG",{});var X2t=n(Ave);rEr=r(X2t,"t5"),X2t.forEach(t),tEr=r(K9e," \u2014 "),hV=s(K9e,"A",{href:!0});var V2t=n(hV);aEr=r(V2t,"FlaxT5ForConditionalGeneration"),V2t.forEach(t),sEr=r(K9e," (T5 model)"),K9e.forEach(t),nEr=i(ge),RE=s(ge,"LI",{});var Z9e=n(RE);Lve=s(Z9e,"STRONG",{});var z2t=n(Lve);lEr=r(z2t,"wav2vec2"),z2t.forEach(t),iEr=r(Z9e," \u2014 "),uV=s(Z9e,"A",{href:!0});var W2t=n(uV);dEr=r(W2t,"FlaxWav2Vec2ForPreTraining"),W2t.forEach(t),cEr=r(Z9e," (Wav2Vec2 model)"),Z9e.forEach(t),mEr=i(ge),SE=s(ge,"LI",{});var eBe=n(SE);Bve=s(eBe,"STRONG",{});var Q2t=n(Bve);fEr=r(Q2t,"xlm-roberta"),Q2t.forEach(t),gEr=r(eBe," \u2014 "),pV=s(eBe,"A",{href:!0});var H2t=n(pV);hEr=r(H2t,"FlaxXLMRobertaForMaskedLM"),H2t.forEach(t),uEr=r(eBe," (XLM-RoBERTa model)"),eBe.forEach(t),ge.forEach(t),pEr=i(xa),xve=s(xa,"P",{});var U2t=n(xve);_Er=r(U2t,"Examples:"),U2t.forEach(t),bEr=i(xa),f(RL.$$.fragment,xa),xa.forEach(t),pi.forEach(t),Xke=i(d),lm=s(d,"H2",{class:!0});var oPe=n(lm);PE=s(oPe,"A",{id:!0,class:!0,href:!0});var J2t=n(PE);kve=s(J2t,"SPAN",{});var Y2t=n(kve);f(SL.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),vEr=i(oPe),Rve=s(oPe,"SPAN",{});var K2t=n(Rve);TEr=r(K2t,"FlaxAutoModelForMaskedLM"),K2t.forEach(t),oPe.forEach(t),Vke=i(d),$r=s(d,"DIV",{class:!0});var bi=n($r);f(PL.$$.fragment,bi),FEr=i(bi),im=s(bi,"P",{});var JW=n(im);CEr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Sve=s(JW,"CODE",{});var Z2t=n(Sve);MEr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),EEr=r(JW,"class method or the "),Pve=s(JW,"CODE",{});var evt=n(Pve);yEr=r(evt,"from_config()"),evt.forEach(t),wEr=r(JW,`class
method.`),JW.forEach(t),AEr=i(bi),$L=s(bi,"P",{});var rPe=n($L);LEr=r(rPe,"This class cannot be instantiated directly using "),$ve=s(rPe,"CODE",{});var ovt=n($ve);BEr=r(ovt,"__init__()"),ovt.forEach(t),xEr=r(rPe," (throws an error)."),rPe.forEach(t),kEr=i(bi),Bt=s(bi,"DIV",{class:!0});var vi=n(Bt);f(IL.$$.fragment,vi),REr=i(vi),Ive=s(vi,"P",{});var rvt=n(Ive);SEr=r(rvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rvt.forEach(t),PEr=i(vi),dm=s(vi,"P",{});var YW=n(dm);$Er=r(YW,`Note:
Loading a model from its configuration file does `),jve=s(YW,"STRONG",{});var tvt=n(jve);IEr=r(tvt,"not"),tvt.forEach(t),jEr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dve=s(YW,"CODE",{});var avt=n(Dve);DEr=r(avt,"from_pretrained()"),avt.forEach(t),NEr=r(YW,"to load the model weights."),YW.forEach(t),qEr=i(vi),Nve=s(vi,"P",{});var svt=n(Nve);OEr=r(svt,"Examples:"),svt.forEach(t),GEr=i(vi),f(jL.$$.fragment,vi),vi.forEach(t),XEr=i(bi),xo=s(bi,"DIV",{class:!0});var ka=n(xo);f(DL.$$.fragment,ka),VEr=i(ka),qve=s(ka,"P",{});var nvt=n(qve);zEr=r(nvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nvt.forEach(t),WEr=i(ka),ks=s(ka,"P",{});var D5=n(ks);QEr=r(D5,"The model class to instantiate is selected based on the "),Ove=s(D5,"CODE",{});var lvt=n(Ove);HEr=r(lvt,"model_type"),lvt.forEach(t),UEr=r(D5,` property of the config object (either
passed as an argument or loaded from `),Gve=s(D5,"CODE",{});var ivt=n(Gve);JEr=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),YEr=r(D5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=s(D5,"CODE",{});var dvt=n(Xve);KEr=r(dvt,"pretrained_model_name_or_path"),dvt.forEach(t),ZEr=r(D5,":"),D5.forEach(t),e3r=i(ka),_e=s(ka,"UL",{});var ye=n(_e);$E=s(ye,"LI",{});var oBe=n($E);Vve=s(oBe,"STRONG",{});var cvt=n(Vve);o3r=r(cvt,"albert"),cvt.forEach(t),r3r=r(oBe," \u2014 "),_V=s(oBe,"A",{href:!0});var mvt=n(_V);t3r=r(mvt,"FlaxAlbertForMaskedLM"),mvt.forEach(t),a3r=r(oBe," (ALBERT model)"),oBe.forEach(t),s3r=i(ye),IE=s(ye,"LI",{});var rBe=n(IE);zve=s(rBe,"STRONG",{});var fvt=n(zve);n3r=r(fvt,"bart"),fvt.forEach(t),l3r=r(rBe," \u2014 "),bV=s(rBe,"A",{href:!0});var gvt=n(bV);i3r=r(gvt,"FlaxBartForConditionalGeneration"),gvt.forEach(t),d3r=r(rBe," (BART model)"),rBe.forEach(t),c3r=i(ye),jE=s(ye,"LI",{});var tBe=n(jE);Wve=s(tBe,"STRONG",{});var hvt=n(Wve);m3r=r(hvt,"bert"),hvt.forEach(t),f3r=r(tBe," \u2014 "),vV=s(tBe,"A",{href:!0});var uvt=n(vV);g3r=r(uvt,"FlaxBertForMaskedLM"),uvt.forEach(t),h3r=r(tBe," (BERT model)"),tBe.forEach(t),u3r=i(ye),DE=s(ye,"LI",{});var aBe=n(DE);Qve=s(aBe,"STRONG",{});var pvt=n(Qve);p3r=r(pvt,"big_bird"),pvt.forEach(t),_3r=r(aBe," \u2014 "),TV=s(aBe,"A",{href:!0});var _vt=n(TV);b3r=r(_vt,"FlaxBigBirdForMaskedLM"),_vt.forEach(t),v3r=r(aBe," (BigBird model)"),aBe.forEach(t),T3r=i(ye),NE=s(ye,"LI",{});var sBe=n(NE);Hve=s(sBe,"STRONG",{});var bvt=n(Hve);F3r=r(bvt,"distilbert"),bvt.forEach(t),C3r=r(sBe," \u2014 "),FV=s(sBe,"A",{href:!0});var vvt=n(FV);M3r=r(vvt,"FlaxDistilBertForMaskedLM"),vvt.forEach(t),E3r=r(sBe," (DistilBERT model)"),sBe.forEach(t),y3r=i(ye),qE=s(ye,"LI",{});var nBe=n(qE);Uve=s(nBe,"STRONG",{});var Tvt=n(Uve);w3r=r(Tvt,"electra"),Tvt.forEach(t),A3r=r(nBe," \u2014 "),CV=s(nBe,"A",{href:!0});var Fvt=n(CV);L3r=r(Fvt,"FlaxElectraForMaskedLM"),Fvt.forEach(t),B3r=r(nBe," (ELECTRA model)"),nBe.forEach(t),x3r=i(ye),OE=s(ye,"LI",{});var lBe=n(OE);Jve=s(lBe,"STRONG",{});var Cvt=n(Jve);k3r=r(Cvt,"mbart"),Cvt.forEach(t),R3r=r(lBe," \u2014 "),MV=s(lBe,"A",{href:!0});var Mvt=n(MV);S3r=r(Mvt,"FlaxMBartForConditionalGeneration"),Mvt.forEach(t),P3r=r(lBe," (mBART model)"),lBe.forEach(t),$3r=i(ye),GE=s(ye,"LI",{});var iBe=n(GE);Yve=s(iBe,"STRONG",{});var Evt=n(Yve);I3r=r(Evt,"roberta"),Evt.forEach(t),j3r=r(iBe," \u2014 "),EV=s(iBe,"A",{href:!0});var yvt=n(EV);D3r=r(yvt,"FlaxRobertaForMaskedLM"),yvt.forEach(t),N3r=r(iBe," (RoBERTa model)"),iBe.forEach(t),q3r=i(ye),XE=s(ye,"LI",{});var dBe=n(XE);Kve=s(dBe,"STRONG",{});var wvt=n(Kve);O3r=r(wvt,"roformer"),wvt.forEach(t),G3r=r(dBe," \u2014 "),yV=s(dBe,"A",{href:!0});var Avt=n(yV);X3r=r(Avt,"FlaxRoFormerForMaskedLM"),Avt.forEach(t),V3r=r(dBe," (RoFormer model)"),dBe.forEach(t),z3r=i(ye),VE=s(ye,"LI",{});var cBe=n(VE);Zve=s(cBe,"STRONG",{});var Lvt=n(Zve);W3r=r(Lvt,"xlm-roberta"),Lvt.forEach(t),Q3r=r(cBe," \u2014 "),wV=s(cBe,"A",{href:!0});var Bvt=n(wV);H3r=r(Bvt,"FlaxXLMRobertaForMaskedLM"),Bvt.forEach(t),U3r=r(cBe," (XLM-RoBERTa model)"),cBe.forEach(t),ye.forEach(t),J3r=i(ka),eTe=s(ka,"P",{});var xvt=n(eTe);Y3r=r(xvt,"Examples:"),xvt.forEach(t),K3r=i(ka),f(NL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),zke=i(d),cm=s(d,"H2",{class:!0});var tPe=n(cm);zE=s(tPe,"A",{id:!0,class:!0,href:!0});var kvt=n(zE);oTe=s(kvt,"SPAN",{});var Rvt=n(oTe);f(qL.$$.fragment,Rvt),Rvt.forEach(t),kvt.forEach(t),Z3r=i(tPe),rTe=s(tPe,"SPAN",{});var Svt=n(rTe);e5r=r(Svt,"FlaxAutoModelForSeq2SeqLM"),Svt.forEach(t),tPe.forEach(t),Wke=i(d),Ir=s(d,"DIV",{class:!0});var Ti=n(Ir);f(OL.$$.fragment,Ti),o5r=i(Ti),mm=s(Ti,"P",{});var KW=n(mm);r5r=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tTe=s(KW,"CODE",{});var Pvt=n(tTe);t5r=r(Pvt,"from_pretrained()"),Pvt.forEach(t),a5r=r(KW,"class method or the "),aTe=s(KW,"CODE",{});var $vt=n(aTe);s5r=r($vt,"from_config()"),$vt.forEach(t),n5r=r(KW,`class
method.`),KW.forEach(t),l5r=i(Ti),GL=s(Ti,"P",{});var aPe=n(GL);i5r=r(aPe,"This class cannot be instantiated directly using "),sTe=s(aPe,"CODE",{});var Ivt=n(sTe);d5r=r(Ivt,"__init__()"),Ivt.forEach(t),c5r=r(aPe," (throws an error)."),aPe.forEach(t),m5r=i(Ti),xt=s(Ti,"DIV",{class:!0});var Fi=n(xt);f(XL.$$.fragment,Fi),f5r=i(Fi),nTe=s(Fi,"P",{});var jvt=n(nTe);g5r=r(jvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jvt.forEach(t),h5r=i(Fi),fm=s(Fi,"P",{});var ZW=n(fm);u5r=r(ZW,`Note:
Loading a model from its configuration file does `),lTe=s(ZW,"STRONG",{});var Dvt=n(lTe);p5r=r(Dvt,"not"),Dvt.forEach(t),_5r=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),iTe=s(ZW,"CODE",{});var Nvt=n(iTe);b5r=r(Nvt,"from_pretrained()"),Nvt.forEach(t),v5r=r(ZW,"to load the model weights."),ZW.forEach(t),T5r=i(Fi),dTe=s(Fi,"P",{});var qvt=n(dTe);F5r=r(qvt,"Examples:"),qvt.forEach(t),C5r=i(Fi),f(VL.$$.fragment,Fi),Fi.forEach(t),M5r=i(Ti),ko=s(Ti,"DIV",{class:!0});var Ra=n(ko);f(zL.$$.fragment,Ra),E5r=i(Ra),cTe=s(Ra,"P",{});var Ovt=n(cTe);y5r=r(Ovt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ovt.forEach(t),w5r=i(Ra),Rs=s(Ra,"P",{});var N5=n(Rs);A5r=r(N5,"The model class to instantiate is selected based on the "),mTe=s(N5,"CODE",{});var Gvt=n(mTe);L5r=r(Gvt,"model_type"),Gvt.forEach(t),B5r=r(N5,` property of the config object (either
passed as an argument or loaded from `),fTe=s(N5,"CODE",{});var Xvt=n(fTe);x5r=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),k5r=r(N5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=s(N5,"CODE",{});var Vvt=n(gTe);R5r=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),S5r=r(N5,":"),N5.forEach(t),P5r=i(Ra),Me=s(Ra,"UL",{});var lo=n(Me);WE=s(lo,"LI",{});var mBe=n(WE);hTe=s(mBe,"STRONG",{});var zvt=n(hTe);$5r=r(zvt,"bart"),zvt.forEach(t),I5r=r(mBe," \u2014 "),AV=s(mBe,"A",{href:!0});var Wvt=n(AV);j5r=r(Wvt,"FlaxBartForConditionalGeneration"),Wvt.forEach(t),D5r=r(mBe," (BART model)"),mBe.forEach(t),N5r=i(lo),QE=s(lo,"LI",{});var fBe=n(QE);uTe=s(fBe,"STRONG",{});var Qvt=n(uTe);q5r=r(Qvt,"blenderbot"),Qvt.forEach(t),O5r=r(fBe," \u2014 "),LV=s(fBe,"A",{href:!0});var Hvt=n(LV);G5r=r(Hvt,"FlaxBlenderbotForConditionalGeneration"),Hvt.forEach(t),X5r=r(fBe," (Blenderbot model)"),fBe.forEach(t),V5r=i(lo),HE=s(lo,"LI",{});var gBe=n(HE);pTe=s(gBe,"STRONG",{});var Uvt=n(pTe);z5r=r(Uvt,"blenderbot-small"),Uvt.forEach(t),W5r=r(gBe," \u2014 "),BV=s(gBe,"A",{href:!0});var Jvt=n(BV);Q5r=r(Jvt,"FlaxBlenderbotSmallForConditionalGeneration"),Jvt.forEach(t),H5r=r(gBe," (BlenderbotSmall model)"),gBe.forEach(t),U5r=i(lo),UE=s(lo,"LI",{});var hBe=n(UE);_Te=s(hBe,"STRONG",{});var Yvt=n(_Te);J5r=r(Yvt,"encoder-decoder"),Yvt.forEach(t),Y5r=r(hBe," \u2014 "),xV=s(hBe,"A",{href:!0});var Kvt=n(xV);K5r=r(Kvt,"FlaxEncoderDecoderModel"),Kvt.forEach(t),Z5r=r(hBe," (Encoder decoder model)"),hBe.forEach(t),eyr=i(lo),JE=s(lo,"LI",{});var uBe=n(JE);bTe=s(uBe,"STRONG",{});var Zvt=n(bTe);oyr=r(Zvt,"marian"),Zvt.forEach(t),ryr=r(uBe," \u2014 "),kV=s(uBe,"A",{href:!0});var eTt=n(kV);tyr=r(eTt,"FlaxMarianMTModel"),eTt.forEach(t),ayr=r(uBe," (Marian model)"),uBe.forEach(t),syr=i(lo),YE=s(lo,"LI",{});var pBe=n(YE);vTe=s(pBe,"STRONG",{});var oTt=n(vTe);nyr=r(oTt,"mbart"),oTt.forEach(t),lyr=r(pBe," \u2014 "),RV=s(pBe,"A",{href:!0});var rTt=n(RV);iyr=r(rTt,"FlaxMBartForConditionalGeneration"),rTt.forEach(t),dyr=r(pBe," (mBART model)"),pBe.forEach(t),cyr=i(lo),KE=s(lo,"LI",{});var _Be=n(KE);TTe=s(_Be,"STRONG",{});var tTt=n(TTe);myr=r(tTt,"mt5"),tTt.forEach(t),fyr=r(_Be," \u2014 "),SV=s(_Be,"A",{href:!0});var aTt=n(SV);gyr=r(aTt,"FlaxMT5ForConditionalGeneration"),aTt.forEach(t),hyr=r(_Be," (mT5 model)"),_Be.forEach(t),uyr=i(lo),ZE=s(lo,"LI",{});var bBe=n(ZE);FTe=s(bBe,"STRONG",{});var sTt=n(FTe);pyr=r(sTt,"pegasus"),sTt.forEach(t),_yr=r(bBe," \u2014 "),PV=s(bBe,"A",{href:!0});var nTt=n(PV);byr=r(nTt,"FlaxPegasusForConditionalGeneration"),nTt.forEach(t),vyr=r(bBe," (Pegasus model)"),bBe.forEach(t),Tyr=i(lo),e3=s(lo,"LI",{});var vBe=n(e3);CTe=s(vBe,"STRONG",{});var lTt=n(CTe);Fyr=r(lTt,"t5"),lTt.forEach(t),Cyr=r(vBe," \u2014 "),$V=s(vBe,"A",{href:!0});var iTt=n($V);Myr=r(iTt,"FlaxT5ForConditionalGeneration"),iTt.forEach(t),Eyr=r(vBe," (T5 model)"),vBe.forEach(t),lo.forEach(t),yyr=i(Ra),MTe=s(Ra,"P",{});var dTt=n(MTe);wyr=r(dTt,"Examples:"),dTt.forEach(t),Ayr=i(Ra),f(WL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),Qke=i(d),gm=s(d,"H2",{class:!0});var sPe=n(gm);o3=s(sPe,"A",{id:!0,class:!0,href:!0});var cTt=n(o3);ETe=s(cTt,"SPAN",{});var mTt=n(ETe);f(QL.$$.fragment,mTt),mTt.forEach(t),cTt.forEach(t),Lyr=i(sPe),yTe=s(sPe,"SPAN",{});var fTt=n(yTe);Byr=r(fTt,"FlaxAutoModelForSequenceClassification"),fTt.forEach(t),sPe.forEach(t),Hke=i(d),jr=s(d,"DIV",{class:!0});var Ci=n(jr);f(HL.$$.fragment,Ci),xyr=i(Ci),hm=s(Ci,"P",{});var eQ=n(hm);kyr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wTe=s(eQ,"CODE",{});var gTt=n(wTe);Ryr=r(gTt,"from_pretrained()"),gTt.forEach(t),Syr=r(eQ,"class method or the "),ATe=s(eQ,"CODE",{});var hTt=n(ATe);Pyr=r(hTt,"from_config()"),hTt.forEach(t),$yr=r(eQ,`class
method.`),eQ.forEach(t),Iyr=i(Ci),UL=s(Ci,"P",{});var nPe=n(UL);jyr=r(nPe,"This class cannot be instantiated directly using "),LTe=s(nPe,"CODE",{});var uTt=n(LTe);Dyr=r(uTt,"__init__()"),uTt.forEach(t),Nyr=r(nPe," (throws an error)."),nPe.forEach(t),qyr=i(Ci),kt=s(Ci,"DIV",{class:!0});var Mi=n(kt);f(JL.$$.fragment,Mi),Oyr=i(Mi),BTe=s(Mi,"P",{});var pTt=n(BTe);Gyr=r(pTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pTt.forEach(t),Xyr=i(Mi),um=s(Mi,"P",{});var oQ=n(um);Vyr=r(oQ,`Note:
Loading a model from its configuration file does `),xTe=s(oQ,"STRONG",{});var _Tt=n(xTe);zyr=r(_Tt,"not"),_Tt.forEach(t),Wyr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kTe=s(oQ,"CODE",{});var bTt=n(kTe);Qyr=r(bTt,"from_pretrained()"),bTt.forEach(t),Hyr=r(oQ,"to load the model weights."),oQ.forEach(t),Uyr=i(Mi),RTe=s(Mi,"P",{});var vTt=n(RTe);Jyr=r(vTt,"Examples:"),vTt.forEach(t),Yyr=i(Mi),f(YL.$$.fragment,Mi),Mi.forEach(t),Kyr=i(Ci),Ro=s(Ci,"DIV",{class:!0});var Sa=n(Ro);f(KL.$$.fragment,Sa),Zyr=i(Sa),STe=s(Sa,"P",{});var TTt=n(STe);ewr=r(TTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),TTt.forEach(t),owr=i(Sa),Ss=s(Sa,"P",{});var q5=n(Ss);rwr=r(q5,"The model class to instantiate is selected based on the "),PTe=s(q5,"CODE",{});var FTt=n(PTe);twr=r(FTt,"model_type"),FTt.forEach(t),awr=r(q5,` property of the config object (either
passed as an argument or loaded from `),$Te=s(q5,"CODE",{});var CTt=n($Te);swr=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),nwr=r(q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=s(q5,"CODE",{});var MTt=n(ITe);lwr=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),iwr=r(q5,":"),q5.forEach(t),dwr=i(Sa),be=s(Sa,"UL",{});var we=n(be);r3=s(we,"LI",{});var TBe=n(r3);jTe=s(TBe,"STRONG",{});var ETt=n(jTe);cwr=r(ETt,"albert"),ETt.forEach(t),mwr=r(TBe," \u2014 "),IV=s(TBe,"A",{href:!0});var yTt=n(IV);fwr=r(yTt,"FlaxAlbertForSequenceClassification"),yTt.forEach(t),gwr=r(TBe," (ALBERT model)"),TBe.forEach(t),hwr=i(we),t3=s(we,"LI",{});var FBe=n(t3);DTe=s(FBe,"STRONG",{});var wTt=n(DTe);uwr=r(wTt,"bart"),wTt.forEach(t),pwr=r(FBe," \u2014 "),jV=s(FBe,"A",{href:!0});var ATt=n(jV);_wr=r(ATt,"FlaxBartForSequenceClassification"),ATt.forEach(t),bwr=r(FBe," (BART model)"),FBe.forEach(t),vwr=i(we),a3=s(we,"LI",{});var CBe=n(a3);NTe=s(CBe,"STRONG",{});var LTt=n(NTe);Twr=r(LTt,"bert"),LTt.forEach(t),Fwr=r(CBe," \u2014 "),DV=s(CBe,"A",{href:!0});var BTt=n(DV);Cwr=r(BTt,"FlaxBertForSequenceClassification"),BTt.forEach(t),Mwr=r(CBe," (BERT model)"),CBe.forEach(t),Ewr=i(we),s3=s(we,"LI",{});var MBe=n(s3);qTe=s(MBe,"STRONG",{});var xTt=n(qTe);ywr=r(xTt,"big_bird"),xTt.forEach(t),wwr=r(MBe," \u2014 "),NV=s(MBe,"A",{href:!0});var kTt=n(NV);Awr=r(kTt,"FlaxBigBirdForSequenceClassification"),kTt.forEach(t),Lwr=r(MBe," (BigBird model)"),MBe.forEach(t),Bwr=i(we),n3=s(we,"LI",{});var EBe=n(n3);OTe=s(EBe,"STRONG",{});var RTt=n(OTe);xwr=r(RTt,"distilbert"),RTt.forEach(t),kwr=r(EBe," \u2014 "),qV=s(EBe,"A",{href:!0});var STt=n(qV);Rwr=r(STt,"FlaxDistilBertForSequenceClassification"),STt.forEach(t),Swr=r(EBe," (DistilBERT model)"),EBe.forEach(t),Pwr=i(we),l3=s(we,"LI",{});var yBe=n(l3);GTe=s(yBe,"STRONG",{});var PTt=n(GTe);$wr=r(PTt,"electra"),PTt.forEach(t),Iwr=r(yBe," \u2014 "),OV=s(yBe,"A",{href:!0});var $Tt=n(OV);jwr=r($Tt,"FlaxElectraForSequenceClassification"),$Tt.forEach(t),Dwr=r(yBe," (ELECTRA model)"),yBe.forEach(t),Nwr=i(we),i3=s(we,"LI",{});var wBe=n(i3);XTe=s(wBe,"STRONG",{});var ITt=n(XTe);qwr=r(ITt,"mbart"),ITt.forEach(t),Owr=r(wBe," \u2014 "),GV=s(wBe,"A",{href:!0});var jTt=n(GV);Gwr=r(jTt,"FlaxMBartForSequenceClassification"),jTt.forEach(t),Xwr=r(wBe," (mBART model)"),wBe.forEach(t),Vwr=i(we),d3=s(we,"LI",{});var ABe=n(d3);VTe=s(ABe,"STRONG",{});var DTt=n(VTe);zwr=r(DTt,"roberta"),DTt.forEach(t),Wwr=r(ABe," \u2014 "),XV=s(ABe,"A",{href:!0});var NTt=n(XV);Qwr=r(NTt,"FlaxRobertaForSequenceClassification"),NTt.forEach(t),Hwr=r(ABe," (RoBERTa model)"),ABe.forEach(t),Uwr=i(we),c3=s(we,"LI",{});var LBe=n(c3);zTe=s(LBe,"STRONG",{});var qTt=n(zTe);Jwr=r(qTt,"roformer"),qTt.forEach(t),Ywr=r(LBe," \u2014 "),VV=s(LBe,"A",{href:!0});var OTt=n(VV);Kwr=r(OTt,"FlaxRoFormerForSequenceClassification"),OTt.forEach(t),Zwr=r(LBe," (RoFormer model)"),LBe.forEach(t),e6r=i(we),m3=s(we,"LI",{});var BBe=n(m3);WTe=s(BBe,"STRONG",{});var GTt=n(WTe);o6r=r(GTt,"xlm-roberta"),GTt.forEach(t),r6r=r(BBe," \u2014 "),zV=s(BBe,"A",{href:!0});var XTt=n(zV);t6r=r(XTt,"FlaxXLMRobertaForSequenceClassification"),XTt.forEach(t),a6r=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),we.forEach(t),s6r=i(Sa),QTe=s(Sa,"P",{});var VTt=n(QTe);n6r=r(VTt,"Examples:"),VTt.forEach(t),l6r=i(Sa),f(ZL.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),Uke=i(d),pm=s(d,"H2",{class:!0});var lPe=n(pm);f3=s(lPe,"A",{id:!0,class:!0,href:!0});var zTt=n(f3);HTe=s(zTt,"SPAN",{});var WTt=n(HTe);f(e8.$$.fragment,WTt),WTt.forEach(t),zTt.forEach(t),i6r=i(lPe),UTe=s(lPe,"SPAN",{});var QTt=n(UTe);d6r=r(QTt,"FlaxAutoModelForQuestionAnswering"),QTt.forEach(t),lPe.forEach(t),Jke=i(d),Dr=s(d,"DIV",{class:!0});var Ei=n(Dr);f(o8.$$.fragment,Ei),c6r=i(Ei),_m=s(Ei,"P",{});var rQ=n(_m);m6r=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JTe=s(rQ,"CODE",{});var HTt=n(JTe);f6r=r(HTt,"from_pretrained()"),HTt.forEach(t),g6r=r(rQ,"class method or the "),YTe=s(rQ,"CODE",{});var UTt=n(YTe);h6r=r(UTt,"from_config()"),UTt.forEach(t),u6r=r(rQ,`class
method.`),rQ.forEach(t),p6r=i(Ei),r8=s(Ei,"P",{});var iPe=n(r8);_6r=r(iPe,"This class cannot be instantiated directly using "),KTe=s(iPe,"CODE",{});var JTt=n(KTe);b6r=r(JTt,"__init__()"),JTt.forEach(t),v6r=r(iPe," (throws an error)."),iPe.forEach(t),T6r=i(Ei),Rt=s(Ei,"DIV",{class:!0});var yi=n(Rt);f(t8.$$.fragment,yi),F6r=i(yi),ZTe=s(yi,"P",{});var YTt=n(ZTe);C6r=r(YTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),YTt.forEach(t),M6r=i(yi),bm=s(yi,"P",{});var tQ=n(bm);E6r=r(tQ,`Note:
Loading a model from its configuration file does `),e1e=s(tQ,"STRONG",{});var KTt=n(e1e);y6r=r(KTt,"not"),KTt.forEach(t),w6r=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),o1e=s(tQ,"CODE",{});var ZTt=n(o1e);A6r=r(ZTt,"from_pretrained()"),ZTt.forEach(t),L6r=r(tQ,"to load the model weights."),tQ.forEach(t),B6r=i(yi),r1e=s(yi,"P",{});var e1t=n(r1e);x6r=r(e1t,"Examples:"),e1t.forEach(t),k6r=i(yi),f(a8.$$.fragment,yi),yi.forEach(t),R6r=i(Ei),So=s(Ei,"DIV",{class:!0});var Pa=n(So);f(s8.$$.fragment,Pa),S6r=i(Pa),t1e=s(Pa,"P",{});var o1t=n(t1e);P6r=r(o1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),o1t.forEach(t),$6r=i(Pa),Ps=s(Pa,"P",{});var O5=n(Ps);I6r=r(O5,"The model class to instantiate is selected based on the "),a1e=s(O5,"CODE",{});var r1t=n(a1e);j6r=r(r1t,"model_type"),r1t.forEach(t),D6r=r(O5,` property of the config object (either
passed as an argument or loaded from `),s1e=s(O5,"CODE",{});var t1t=n(s1e);N6r=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),q6r=r(O5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=s(O5,"CODE",{});var a1t=n(n1e);O6r=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),G6r=r(O5,":"),O5.forEach(t),X6r=i(Pa),ve=s(Pa,"UL",{});var Ae=n(ve);g3=s(Ae,"LI",{});var xBe=n(g3);l1e=s(xBe,"STRONG",{});var s1t=n(l1e);V6r=r(s1t,"albert"),s1t.forEach(t),z6r=r(xBe," \u2014 "),WV=s(xBe,"A",{href:!0});var n1t=n(WV);W6r=r(n1t,"FlaxAlbertForQuestionAnswering"),n1t.forEach(t),Q6r=r(xBe," (ALBERT model)"),xBe.forEach(t),H6r=i(Ae),h3=s(Ae,"LI",{});var kBe=n(h3);i1e=s(kBe,"STRONG",{});var l1t=n(i1e);U6r=r(l1t,"bart"),l1t.forEach(t),J6r=r(kBe," \u2014 "),QV=s(kBe,"A",{href:!0});var i1t=n(QV);Y6r=r(i1t,"FlaxBartForQuestionAnswering"),i1t.forEach(t),K6r=r(kBe," (BART model)"),kBe.forEach(t),Z6r=i(Ae),u3=s(Ae,"LI",{});var RBe=n(u3);d1e=s(RBe,"STRONG",{});var d1t=n(d1e);eAr=r(d1t,"bert"),d1t.forEach(t),oAr=r(RBe," \u2014 "),HV=s(RBe,"A",{href:!0});var c1t=n(HV);rAr=r(c1t,"FlaxBertForQuestionAnswering"),c1t.forEach(t),tAr=r(RBe," (BERT model)"),RBe.forEach(t),aAr=i(Ae),p3=s(Ae,"LI",{});var SBe=n(p3);c1e=s(SBe,"STRONG",{});var m1t=n(c1e);sAr=r(m1t,"big_bird"),m1t.forEach(t),nAr=r(SBe," \u2014 "),UV=s(SBe,"A",{href:!0});var f1t=n(UV);lAr=r(f1t,"FlaxBigBirdForQuestionAnswering"),f1t.forEach(t),iAr=r(SBe," (BigBird model)"),SBe.forEach(t),dAr=i(Ae),_3=s(Ae,"LI",{});var PBe=n(_3);m1e=s(PBe,"STRONG",{});var g1t=n(m1e);cAr=r(g1t,"distilbert"),g1t.forEach(t),mAr=r(PBe," \u2014 "),JV=s(PBe,"A",{href:!0});var h1t=n(JV);fAr=r(h1t,"FlaxDistilBertForQuestionAnswering"),h1t.forEach(t),gAr=r(PBe," (DistilBERT model)"),PBe.forEach(t),hAr=i(Ae),b3=s(Ae,"LI",{});var $Be=n(b3);f1e=s($Be,"STRONG",{});var u1t=n(f1e);uAr=r(u1t,"electra"),u1t.forEach(t),pAr=r($Be," \u2014 "),YV=s($Be,"A",{href:!0});var p1t=n(YV);_Ar=r(p1t,"FlaxElectraForQuestionAnswering"),p1t.forEach(t),bAr=r($Be," (ELECTRA model)"),$Be.forEach(t),vAr=i(Ae),v3=s(Ae,"LI",{});var IBe=n(v3);g1e=s(IBe,"STRONG",{});var _1t=n(g1e);TAr=r(_1t,"mbart"),_1t.forEach(t),FAr=r(IBe," \u2014 "),KV=s(IBe,"A",{href:!0});var b1t=n(KV);CAr=r(b1t,"FlaxMBartForQuestionAnswering"),b1t.forEach(t),MAr=r(IBe," (mBART model)"),IBe.forEach(t),EAr=i(Ae),T3=s(Ae,"LI",{});var jBe=n(T3);h1e=s(jBe,"STRONG",{});var v1t=n(h1e);yAr=r(v1t,"roberta"),v1t.forEach(t),wAr=r(jBe," \u2014 "),ZV=s(jBe,"A",{href:!0});var T1t=n(ZV);AAr=r(T1t,"FlaxRobertaForQuestionAnswering"),T1t.forEach(t),LAr=r(jBe," (RoBERTa model)"),jBe.forEach(t),BAr=i(Ae),F3=s(Ae,"LI",{});var DBe=n(F3);u1e=s(DBe,"STRONG",{});var F1t=n(u1e);xAr=r(F1t,"roformer"),F1t.forEach(t),kAr=r(DBe," \u2014 "),ez=s(DBe,"A",{href:!0});var C1t=n(ez);RAr=r(C1t,"FlaxRoFormerForQuestionAnswering"),C1t.forEach(t),SAr=r(DBe," (RoFormer model)"),DBe.forEach(t),PAr=i(Ae),C3=s(Ae,"LI",{});var NBe=n(C3);p1e=s(NBe,"STRONG",{});var M1t=n(p1e);$Ar=r(M1t,"xlm-roberta"),M1t.forEach(t),IAr=r(NBe," \u2014 "),oz=s(NBe,"A",{href:!0});var E1t=n(oz);jAr=r(E1t,"FlaxXLMRobertaForQuestionAnswering"),E1t.forEach(t),DAr=r(NBe," (XLM-RoBERTa model)"),NBe.forEach(t),Ae.forEach(t),NAr=i(Pa),_1e=s(Pa,"P",{});var y1t=n(_1e);qAr=r(y1t,"Examples:"),y1t.forEach(t),OAr=i(Pa),f(n8.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),Yke=i(d),vm=s(d,"H2",{class:!0});var dPe=n(vm);M3=s(dPe,"A",{id:!0,class:!0,href:!0});var w1t=n(M3);b1e=s(w1t,"SPAN",{});var A1t=n(b1e);f(l8.$$.fragment,A1t),A1t.forEach(t),w1t.forEach(t),GAr=i(dPe),v1e=s(dPe,"SPAN",{});var L1t=n(v1e);XAr=r(L1t,"FlaxAutoModelForTokenClassification"),L1t.forEach(t),dPe.forEach(t),Kke=i(d),Nr=s(d,"DIV",{class:!0});var wi=n(Nr);f(i8.$$.fragment,wi),VAr=i(wi),Tm=s(wi,"P",{});var aQ=n(Tm);zAr=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),T1e=s(aQ,"CODE",{});var B1t=n(T1e);WAr=r(B1t,"from_pretrained()"),B1t.forEach(t),QAr=r(aQ,"class method or the "),F1e=s(aQ,"CODE",{});var x1t=n(F1e);HAr=r(x1t,"from_config()"),x1t.forEach(t),UAr=r(aQ,`class
method.`),aQ.forEach(t),JAr=i(wi),d8=s(wi,"P",{});var cPe=n(d8);YAr=r(cPe,"This class cannot be instantiated directly using "),C1e=s(cPe,"CODE",{});var k1t=n(C1e);KAr=r(k1t,"__init__()"),k1t.forEach(t),ZAr=r(cPe," (throws an error)."),cPe.forEach(t),e0r=i(wi),St=s(wi,"DIV",{class:!0});var Ai=n(St);f(c8.$$.fragment,Ai),o0r=i(Ai),M1e=s(Ai,"P",{});var R1t=n(M1e);r0r=r(R1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),R1t.forEach(t),t0r=i(Ai),Fm=s(Ai,"P",{});var sQ=n(Fm);a0r=r(sQ,`Note:
Loading a model from its configuration file does `),E1e=s(sQ,"STRONG",{});var S1t=n(E1e);s0r=r(S1t,"not"),S1t.forEach(t),n0r=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),y1e=s(sQ,"CODE",{});var P1t=n(y1e);l0r=r(P1t,"from_pretrained()"),P1t.forEach(t),i0r=r(sQ,"to load the model weights."),sQ.forEach(t),d0r=i(Ai),w1e=s(Ai,"P",{});var $1t=n(w1e);c0r=r($1t,"Examples:"),$1t.forEach(t),m0r=i(Ai),f(m8.$$.fragment,Ai),Ai.forEach(t),f0r=i(wi),Po=s(wi,"DIV",{class:!0});var $a=n(Po);f(f8.$$.fragment,$a),g0r=i($a),A1e=s($a,"P",{});var I1t=n(A1e);h0r=r(I1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),I1t.forEach(t),u0r=i($a),$s=s($a,"P",{});var G5=n($s);p0r=r(G5,"The model class to instantiate is selected based on the "),L1e=s(G5,"CODE",{});var j1t=n(L1e);_0r=r(j1t,"model_type"),j1t.forEach(t),b0r=r(G5,` property of the config object (either
passed as an argument or loaded from `),B1e=s(G5,"CODE",{});var D1t=n(B1e);v0r=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),T0r=r(G5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=s(G5,"CODE",{});var N1t=n(x1e);F0r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),C0r=r(G5,":"),G5.forEach(t),M0r=i($a),Re=s($a,"UL",{});var Go=n(Re);E3=s(Go,"LI",{});var qBe=n(E3);k1e=s(qBe,"STRONG",{});var q1t=n(k1e);E0r=r(q1t,"albert"),q1t.forEach(t),y0r=r(qBe," \u2014 "),rz=s(qBe,"A",{href:!0});var O1t=n(rz);w0r=r(O1t,"FlaxAlbertForTokenClassification"),O1t.forEach(t),A0r=r(qBe," (ALBERT model)"),qBe.forEach(t),L0r=i(Go),y3=s(Go,"LI",{});var OBe=n(y3);R1e=s(OBe,"STRONG",{});var G1t=n(R1e);B0r=r(G1t,"bert"),G1t.forEach(t),x0r=r(OBe," \u2014 "),tz=s(OBe,"A",{href:!0});var X1t=n(tz);k0r=r(X1t,"FlaxBertForTokenClassification"),X1t.forEach(t),R0r=r(OBe," (BERT model)"),OBe.forEach(t),S0r=i(Go),w3=s(Go,"LI",{});var GBe=n(w3);S1e=s(GBe,"STRONG",{});var V1t=n(S1e);P0r=r(V1t,"big_bird"),V1t.forEach(t),$0r=r(GBe," \u2014 "),az=s(GBe,"A",{href:!0});var z1t=n(az);I0r=r(z1t,"FlaxBigBirdForTokenClassification"),z1t.forEach(t),j0r=r(GBe," (BigBird model)"),GBe.forEach(t),D0r=i(Go),A3=s(Go,"LI",{});var XBe=n(A3);P1e=s(XBe,"STRONG",{});var W1t=n(P1e);N0r=r(W1t,"distilbert"),W1t.forEach(t),q0r=r(XBe," \u2014 "),sz=s(XBe,"A",{href:!0});var Q1t=n(sz);O0r=r(Q1t,"FlaxDistilBertForTokenClassification"),Q1t.forEach(t),G0r=r(XBe," (DistilBERT model)"),XBe.forEach(t),X0r=i(Go),L3=s(Go,"LI",{});var VBe=n(L3);$1e=s(VBe,"STRONG",{});var H1t=n($1e);V0r=r(H1t,"electra"),H1t.forEach(t),z0r=r(VBe," \u2014 "),nz=s(VBe,"A",{href:!0});var U1t=n(nz);W0r=r(U1t,"FlaxElectraForTokenClassification"),U1t.forEach(t),Q0r=r(VBe," (ELECTRA model)"),VBe.forEach(t),H0r=i(Go),B3=s(Go,"LI",{});var zBe=n(B3);I1e=s(zBe,"STRONG",{});var J1t=n(I1e);U0r=r(J1t,"roberta"),J1t.forEach(t),J0r=r(zBe," \u2014 "),lz=s(zBe,"A",{href:!0});var Y1t=n(lz);Y0r=r(Y1t,"FlaxRobertaForTokenClassification"),Y1t.forEach(t),K0r=r(zBe," (RoBERTa model)"),zBe.forEach(t),Z0r=i(Go),x3=s(Go,"LI",{});var WBe=n(x3);j1e=s(WBe,"STRONG",{});var K1t=n(j1e);eLr=r(K1t,"roformer"),K1t.forEach(t),oLr=r(WBe," \u2014 "),iz=s(WBe,"A",{href:!0});var Z1t=n(iz);rLr=r(Z1t,"FlaxRoFormerForTokenClassification"),Z1t.forEach(t),tLr=r(WBe," (RoFormer model)"),WBe.forEach(t),aLr=i(Go),k3=s(Go,"LI",{});var QBe=n(k3);D1e=s(QBe,"STRONG",{});var eFt=n(D1e);sLr=r(eFt,"xlm-roberta"),eFt.forEach(t),nLr=r(QBe," \u2014 "),dz=s(QBe,"A",{href:!0});var oFt=n(dz);lLr=r(oFt,"FlaxXLMRobertaForTokenClassification"),oFt.forEach(t),iLr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Go.forEach(t),dLr=i($a),N1e=s($a,"P",{});var rFt=n(N1e);cLr=r(rFt,"Examples:"),rFt.forEach(t),mLr=i($a),f(g8.$$.fragment,$a),$a.forEach(t),wi.forEach(t),Zke=i(d),Cm=s(d,"H2",{class:!0});var mPe=n(Cm);R3=s(mPe,"A",{id:!0,class:!0,href:!0});var tFt=n(R3);q1e=s(tFt,"SPAN",{});var aFt=n(q1e);f(h8.$$.fragment,aFt),aFt.forEach(t),tFt.forEach(t),fLr=i(mPe),O1e=s(mPe,"SPAN",{});var sFt=n(O1e);gLr=r(sFt,"FlaxAutoModelForMultipleChoice"),sFt.forEach(t),mPe.forEach(t),eRe=i(d),qr=s(d,"DIV",{class:!0});var Li=n(qr);f(u8.$$.fragment,Li),hLr=i(Li),Mm=s(Li,"P",{});var nQ=n(Mm);uLr=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),G1e=s(nQ,"CODE",{});var nFt=n(G1e);pLr=r(nFt,"from_pretrained()"),nFt.forEach(t),_Lr=r(nQ,"class method or the "),X1e=s(nQ,"CODE",{});var lFt=n(X1e);bLr=r(lFt,"from_config()"),lFt.forEach(t),vLr=r(nQ,`class
method.`),nQ.forEach(t),TLr=i(Li),p8=s(Li,"P",{});var fPe=n(p8);FLr=r(fPe,"This class cannot be instantiated directly using "),V1e=s(fPe,"CODE",{});var iFt=n(V1e);CLr=r(iFt,"__init__()"),iFt.forEach(t),MLr=r(fPe," (throws an error)."),fPe.forEach(t),ELr=i(Li),Pt=s(Li,"DIV",{class:!0});var Bi=n(Pt);f(_8.$$.fragment,Bi),yLr=i(Bi),z1e=s(Bi,"P",{});var dFt=n(z1e);wLr=r(dFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dFt.forEach(t),ALr=i(Bi),Em=s(Bi,"P",{});var lQ=n(Em);LLr=r(lQ,`Note:
Loading a model from its configuration file does `),W1e=s(lQ,"STRONG",{});var cFt=n(W1e);BLr=r(cFt,"not"),cFt.forEach(t),xLr=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q1e=s(lQ,"CODE",{});var mFt=n(Q1e);kLr=r(mFt,"from_pretrained()"),mFt.forEach(t),RLr=r(lQ,"to load the model weights."),lQ.forEach(t),SLr=i(Bi),H1e=s(Bi,"P",{});var fFt=n(H1e);PLr=r(fFt,"Examples:"),fFt.forEach(t),$Lr=i(Bi),f(b8.$$.fragment,Bi),Bi.forEach(t),ILr=i(Li),$o=s(Li,"DIV",{class:!0});var Ia=n($o);f(v8.$$.fragment,Ia),jLr=i(Ia),U1e=s(Ia,"P",{});var gFt=n(U1e);DLr=r(gFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gFt.forEach(t),NLr=i(Ia),Is=s(Ia,"P",{});var X5=n(Is);qLr=r(X5,"The model class to instantiate is selected based on the "),J1e=s(X5,"CODE",{});var hFt=n(J1e);OLr=r(hFt,"model_type"),hFt.forEach(t),GLr=r(X5,` property of the config object (either
passed as an argument or loaded from `),Y1e=s(X5,"CODE",{});var uFt=n(Y1e);XLr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),VLr=r(X5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=s(X5,"CODE",{});var pFt=n(K1e);zLr=r(pFt,"pretrained_model_name_or_path"),pFt.forEach(t),WLr=r(X5,":"),X5.forEach(t),QLr=i(Ia),Se=s(Ia,"UL",{});var Xo=n(Se);S3=s(Xo,"LI",{});var HBe=n(S3);Z1e=s(HBe,"STRONG",{});var _Ft=n(Z1e);HLr=r(_Ft,"albert"),_Ft.forEach(t),ULr=r(HBe," \u2014 "),cz=s(HBe,"A",{href:!0});var bFt=n(cz);JLr=r(bFt,"FlaxAlbertForMultipleChoice"),bFt.forEach(t),YLr=r(HBe," (ALBERT model)"),HBe.forEach(t),KLr=i(Xo),P3=s(Xo,"LI",{});var UBe=n(P3);eFe=s(UBe,"STRONG",{});var vFt=n(eFe);ZLr=r(vFt,"bert"),vFt.forEach(t),e8r=r(UBe," \u2014 "),mz=s(UBe,"A",{href:!0});var TFt=n(mz);o8r=r(TFt,"FlaxBertForMultipleChoice"),TFt.forEach(t),r8r=r(UBe," (BERT model)"),UBe.forEach(t),t8r=i(Xo),$3=s(Xo,"LI",{});var JBe=n($3);oFe=s(JBe,"STRONG",{});var FFt=n(oFe);a8r=r(FFt,"big_bird"),FFt.forEach(t),s8r=r(JBe," \u2014 "),fz=s(JBe,"A",{href:!0});var CFt=n(fz);n8r=r(CFt,"FlaxBigBirdForMultipleChoice"),CFt.forEach(t),l8r=r(JBe," (BigBird model)"),JBe.forEach(t),i8r=i(Xo),I3=s(Xo,"LI",{});var YBe=n(I3);rFe=s(YBe,"STRONG",{});var MFt=n(rFe);d8r=r(MFt,"distilbert"),MFt.forEach(t),c8r=r(YBe," \u2014 "),gz=s(YBe,"A",{href:!0});var EFt=n(gz);m8r=r(EFt,"FlaxDistilBertForMultipleChoice"),EFt.forEach(t),f8r=r(YBe," (DistilBERT model)"),YBe.forEach(t),g8r=i(Xo),j3=s(Xo,"LI",{});var KBe=n(j3);tFe=s(KBe,"STRONG",{});var yFt=n(tFe);h8r=r(yFt,"electra"),yFt.forEach(t),u8r=r(KBe," \u2014 "),hz=s(KBe,"A",{href:!0});var wFt=n(hz);p8r=r(wFt,"FlaxElectraForMultipleChoice"),wFt.forEach(t),_8r=r(KBe," (ELECTRA model)"),KBe.forEach(t),b8r=i(Xo),D3=s(Xo,"LI",{});var ZBe=n(D3);aFe=s(ZBe,"STRONG",{});var AFt=n(aFe);v8r=r(AFt,"roberta"),AFt.forEach(t),T8r=r(ZBe," \u2014 "),uz=s(ZBe,"A",{href:!0});var LFt=n(uz);F8r=r(LFt,"FlaxRobertaForMultipleChoice"),LFt.forEach(t),C8r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),M8r=i(Xo),N3=s(Xo,"LI",{});var exe=n(N3);sFe=s(exe,"STRONG",{});var BFt=n(sFe);E8r=r(BFt,"roformer"),BFt.forEach(t),y8r=r(exe," \u2014 "),pz=s(exe,"A",{href:!0});var xFt=n(pz);w8r=r(xFt,"FlaxRoFormerForMultipleChoice"),xFt.forEach(t),A8r=r(exe," (RoFormer model)"),exe.forEach(t),L8r=i(Xo),q3=s(Xo,"LI",{});var oxe=n(q3);nFe=s(oxe,"STRONG",{});var kFt=n(nFe);B8r=r(kFt,"xlm-roberta"),kFt.forEach(t),x8r=r(oxe," \u2014 "),_z=s(oxe,"A",{href:!0});var RFt=n(_z);k8r=r(RFt,"FlaxXLMRobertaForMultipleChoice"),RFt.forEach(t),R8r=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),Xo.forEach(t),S8r=i(Ia),lFe=s(Ia,"P",{});var SFt=n(lFe);P8r=r(SFt,"Examples:"),SFt.forEach(t),$8r=i(Ia),f(T8.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),oRe=i(d),ym=s(d,"H2",{class:!0});var gPe=n(ym);O3=s(gPe,"A",{id:!0,class:!0,href:!0});var PFt=n(O3);iFe=s(PFt,"SPAN",{});var $Ft=n(iFe);f(F8.$$.fragment,$Ft),$Ft.forEach(t),PFt.forEach(t),I8r=i(gPe),dFe=s(gPe,"SPAN",{});var IFt=n(dFe);j8r=r(IFt,"FlaxAutoModelForNextSentencePrediction"),IFt.forEach(t),gPe.forEach(t),rRe=i(d),Or=s(d,"DIV",{class:!0});var xi=n(Or);f(C8.$$.fragment,xi),D8r=i(xi),wm=s(xi,"P",{});var iQ=n(wm);N8r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cFe=s(iQ,"CODE",{});var jFt=n(cFe);q8r=r(jFt,"from_pretrained()"),jFt.forEach(t),O8r=r(iQ,"class method or the "),mFe=s(iQ,"CODE",{});var DFt=n(mFe);G8r=r(DFt,"from_config()"),DFt.forEach(t),X8r=r(iQ,`class
method.`),iQ.forEach(t),V8r=i(xi),M8=s(xi,"P",{});var hPe=n(M8);z8r=r(hPe,"This class cannot be instantiated directly using "),fFe=s(hPe,"CODE",{});var NFt=n(fFe);W8r=r(NFt,"__init__()"),NFt.forEach(t),Q8r=r(hPe," (throws an error)."),hPe.forEach(t),H8r=i(xi),$t=s(xi,"DIV",{class:!0});var ki=n($t);f(E8.$$.fragment,ki),U8r=i(ki),gFe=s(ki,"P",{});var qFt=n(gFe);J8r=r(qFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qFt.forEach(t),Y8r=i(ki),Am=s(ki,"P",{});var dQ=n(Am);K8r=r(dQ,`Note:
Loading a model from its configuration file does `),hFe=s(dQ,"STRONG",{});var OFt=n(hFe);Z8r=r(OFt,"not"),OFt.forEach(t),e7r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uFe=s(dQ,"CODE",{});var GFt=n(uFe);o7r=r(GFt,"from_pretrained()"),GFt.forEach(t),r7r=r(dQ,"to load the model weights."),dQ.forEach(t),t7r=i(ki),pFe=s(ki,"P",{});var XFt=n(pFe);a7r=r(XFt,"Examples:"),XFt.forEach(t),s7r=i(ki),f(y8.$$.fragment,ki),ki.forEach(t),n7r=i(xi),Io=s(xi,"DIV",{class:!0});var ja=n(Io);f(w8.$$.fragment,ja),l7r=i(ja),_Fe=s(ja,"P",{});var VFt=n(_Fe);i7r=r(VFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VFt.forEach(t),d7r=i(ja),js=s(ja,"P",{});var V5=n(js);c7r=r(V5,"The model class to instantiate is selected based on the "),bFe=s(V5,"CODE",{});var zFt=n(bFe);m7r=r(zFt,"model_type"),zFt.forEach(t),f7r=r(V5,` property of the config object (either
passed as an argument or loaded from `),vFe=s(V5,"CODE",{});var WFt=n(vFe);g7r=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),h7r=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=s(V5,"CODE",{});var QFt=n(TFe);u7r=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),p7r=r(V5,":"),V5.forEach(t),_7r=i(ja),FFe=s(ja,"UL",{});var HFt=n(FFe);G3=s(HFt,"LI",{});var rxe=n(G3);CFe=s(rxe,"STRONG",{});var UFt=n(CFe);b7r=r(UFt,"bert"),UFt.forEach(t),v7r=r(rxe," \u2014 "),bz=s(rxe,"A",{href:!0});var JFt=n(bz);T7r=r(JFt,"FlaxBertForNextSentencePrediction"),JFt.forEach(t),F7r=r(rxe," (BERT model)"),rxe.forEach(t),HFt.forEach(t),C7r=i(ja),MFe=s(ja,"P",{});var YFt=n(MFe);M7r=r(YFt,"Examples:"),YFt.forEach(t),E7r=i(ja),f(A8.$$.fragment,ja),ja.forEach(t),xi.forEach(t),tRe=i(d),Lm=s(d,"H2",{class:!0});var uPe=n(Lm);X3=s(uPe,"A",{id:!0,class:!0,href:!0});var KFt=n(X3);EFe=s(KFt,"SPAN",{});var ZFt=n(EFe);f(L8.$$.fragment,ZFt),ZFt.forEach(t),KFt.forEach(t),y7r=i(uPe),yFe=s(uPe,"SPAN",{});var eCt=n(yFe);w7r=r(eCt,"FlaxAutoModelForImageClassification"),eCt.forEach(t),uPe.forEach(t),aRe=i(d),Gr=s(d,"DIV",{class:!0});var Ri=n(Gr);f(B8.$$.fragment,Ri),A7r=i(Ri),Bm=s(Ri,"P",{});var cQ=n(Bm);L7r=r(cQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wFe=s(cQ,"CODE",{});var oCt=n(wFe);B7r=r(oCt,"from_pretrained()"),oCt.forEach(t),x7r=r(cQ,"class method or the "),AFe=s(cQ,"CODE",{});var rCt=n(AFe);k7r=r(rCt,"from_config()"),rCt.forEach(t),R7r=r(cQ,`class
method.`),cQ.forEach(t),S7r=i(Ri),x8=s(Ri,"P",{});var pPe=n(x8);P7r=r(pPe,"This class cannot be instantiated directly using "),LFe=s(pPe,"CODE",{});var tCt=n(LFe);$7r=r(tCt,"__init__()"),tCt.forEach(t),I7r=r(pPe," (throws an error)."),pPe.forEach(t),j7r=i(Ri),It=s(Ri,"DIV",{class:!0});var Si=n(It);f(k8.$$.fragment,Si),D7r=i(Si),BFe=s(Si,"P",{});var aCt=n(BFe);N7r=r(aCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aCt.forEach(t),q7r=i(Si),xm=s(Si,"P",{});var mQ=n(xm);O7r=r(mQ,`Note:
Loading a model from its configuration file does `),xFe=s(mQ,"STRONG",{});var sCt=n(xFe);G7r=r(sCt,"not"),sCt.forEach(t),X7r=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kFe=s(mQ,"CODE",{});var nCt=n(kFe);V7r=r(nCt,"from_pretrained()"),nCt.forEach(t),z7r=r(mQ,"to load the model weights."),mQ.forEach(t),W7r=i(Si),RFe=s(Si,"P",{});var lCt=n(RFe);Q7r=r(lCt,"Examples:"),lCt.forEach(t),H7r=i(Si),f(R8.$$.fragment,Si),Si.forEach(t),U7r=i(Ri),jo=s(Ri,"DIV",{class:!0});var Da=n(jo);f(S8.$$.fragment,Da),J7r=i(Da),SFe=s(Da,"P",{});var iCt=n(SFe);Y7r=r(iCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),iCt.forEach(t),K7r=i(Da),Ds=s(Da,"P",{});var z5=n(Ds);Z7r=r(z5,"The model class to instantiate is selected based on the "),PFe=s(z5,"CODE",{});var dCt=n(PFe);e9r=r(dCt,"model_type"),dCt.forEach(t),o9r=r(z5,` property of the config object (either
passed as an argument or loaded from `),$Fe=s(z5,"CODE",{});var cCt=n($Fe);r9r=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),t9r=r(z5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=s(z5,"CODE",{});var mCt=n(IFe);a9r=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),s9r=r(z5,":"),z5.forEach(t),n9r=i(Da),P8=s(Da,"UL",{});var _Pe=n(P8);V3=s(_Pe,"LI",{});var txe=n(V3);jFe=s(txe,"STRONG",{});var fCt=n(jFe);l9r=r(fCt,"beit"),fCt.forEach(t),i9r=r(txe," \u2014 "),vz=s(txe,"A",{href:!0});var gCt=n(vz);d9r=r(gCt,"FlaxBeitForImageClassification"),gCt.forEach(t),c9r=r(txe," (BEiT model)"),txe.forEach(t),m9r=i(_Pe),z3=s(_Pe,"LI",{});var axe=n(z3);DFe=s(axe,"STRONG",{});var hCt=n(DFe);f9r=r(hCt,"vit"),hCt.forEach(t),g9r=r(axe," \u2014 "),Tz=s(axe,"A",{href:!0});var uCt=n(Tz);h9r=r(uCt,"FlaxViTForImageClassification"),uCt.forEach(t),u9r=r(axe," (ViT model)"),axe.forEach(t),_Pe.forEach(t),p9r=i(Da),NFe=s(Da,"P",{});var pCt=n(NFe);_9r=r(pCt,"Examples:"),pCt.forEach(t),b9r=i(Da),f($8.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),sRe=i(d),km=s(d,"H2",{class:!0});var bPe=n(km);W3=s(bPe,"A",{id:!0,class:!0,href:!0});var _Ct=n(W3);qFe=s(_Ct,"SPAN",{});var bCt=n(qFe);f(I8.$$.fragment,bCt),bCt.forEach(t),_Ct.forEach(t),v9r=i(bPe),OFe=s(bPe,"SPAN",{});var vCt=n(OFe);T9r=r(vCt,"FlaxAutoModelForVision2Seq"),vCt.forEach(t),bPe.forEach(t),nRe=i(d),Xr=s(d,"DIV",{class:!0});var Pi=n(Xr);f(j8.$$.fragment,Pi),F9r=i(Pi),Rm=s(Pi,"P",{});var fQ=n(Rm);C9r=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GFe=s(fQ,"CODE",{});var TCt=n(GFe);M9r=r(TCt,"from_pretrained()"),TCt.forEach(t),E9r=r(fQ,"class method or the "),XFe=s(fQ,"CODE",{});var FCt=n(XFe);y9r=r(FCt,"from_config()"),FCt.forEach(t),w9r=r(fQ,`class
method.`),fQ.forEach(t),A9r=i(Pi),D8=s(Pi,"P",{});var vPe=n(D8);L9r=r(vPe,"This class cannot be instantiated directly using "),VFe=s(vPe,"CODE",{});var CCt=n(VFe);B9r=r(CCt,"__init__()"),CCt.forEach(t),x9r=r(vPe," (throws an error)."),vPe.forEach(t),k9r=i(Pi),jt=s(Pi,"DIV",{class:!0});var $i=n(jt);f(N8.$$.fragment,$i),R9r=i($i),zFe=s($i,"P",{});var MCt=n(zFe);S9r=r(MCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),MCt.forEach(t),P9r=i($i),Sm=s($i,"P",{});var gQ=n(Sm);$9r=r(gQ,`Note:
Loading a model from its configuration file does `),WFe=s(gQ,"STRONG",{});var ECt=n(WFe);I9r=r(ECt,"not"),ECt.forEach(t),j9r=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QFe=s(gQ,"CODE",{});var yCt=n(QFe);D9r=r(yCt,"from_pretrained()"),yCt.forEach(t),N9r=r(gQ,"to load the model weights."),gQ.forEach(t),q9r=i($i),HFe=s($i,"P",{});var wCt=n(HFe);O9r=r(wCt,"Examples:"),wCt.forEach(t),G9r=i($i),f(q8.$$.fragment,$i),$i.forEach(t),X9r=i(Pi),Do=s(Pi,"DIV",{class:!0});var Na=n(Do);f(O8.$$.fragment,Na),V9r=i(Na),UFe=s(Na,"P",{});var ACt=n(UFe);z9r=r(ACt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ACt.forEach(t),W9r=i(Na),Ns=s(Na,"P",{});var W5=n(Ns);Q9r=r(W5,"The model class to instantiate is selected based on the "),JFe=s(W5,"CODE",{});var LCt=n(JFe);H9r=r(LCt,"model_type"),LCt.forEach(t),U9r=r(W5,` property of the config object (either
passed as an argument or loaded from `),YFe=s(W5,"CODE",{});var BCt=n(YFe);J9r=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),Y9r=r(W5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=s(W5,"CODE",{});var xCt=n(KFe);K9r=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),Z9r=r(W5,":"),W5.forEach(t),eBr=i(Na),ZFe=s(Na,"UL",{});var kCt=n(ZFe);Q3=s(kCt,"LI",{});var sxe=n(Q3);eCe=s(sxe,"STRONG",{});var RCt=n(eCe);oBr=r(RCt,"vision-encoder-decoder"),RCt.forEach(t),rBr=r(sxe," \u2014 "),Fz=s(sxe,"A",{href:!0});var SCt=n(Fz);tBr=r(SCt,"FlaxVisionEncoderDecoderModel"),SCt.forEach(t),aBr=r(sxe," (Vision Encoder decoder model)"),sxe.forEach(t),kCt.forEach(t),sBr=i(Na),oCe=s(Na,"P",{});var PCt=n(oCe);nBr=r(PCt,"Examples:"),PCt.forEach(t),lBr=i(Na),f(G8.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(XCt)),c(he,"id","auto-classes"),c(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(he,"href","#auto-classes"),c(de,"class","relative group"),c(qs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig"),c(Gs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoModel"),c(Xs,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer"),c(Xi,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),c(Nm,"id","extending-the-auto-classes"),c(Nm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nm,"href","#extending-the-auto-classes"),c(Vi,"class","relative group"),c(Om,"id","transformers.AutoConfig"),c(Om,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Om,"href","#transformers.AutoConfig"),c(zi,"class","relative group"),c(W7,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Q7,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertConfig"),c(H7,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartConfig"),c(U7,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitConfig"),c(J7,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertConfig"),c(Y7,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(K7,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Z7,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(e9,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(o9,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(r9,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertConfig"),c(t9,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineConfig"),c(a9,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPConfig"),c(s9,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertConfig"),c(n9,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextConfig"),c(l9,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLConfig"),c(i9,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(d9,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(c9,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaConfig"),c(m9,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(f9,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTConfig"),c(g9,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrConfig"),c(h9,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertConfig"),c(u9,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRConfig"),c(p9,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraConfig"),c(_9,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(b9,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertConfig"),c(v9,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetConfig"),c(T9,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTConfig"),c(F9,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelConfig"),c(C9,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Config"),c(M9,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(E9,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJConfig"),c(y9,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertConfig"),c(w9,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertConfig"),c(A9,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(L9,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(B9,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(x9,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDConfig"),c(k9,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerConfig"),c(R9,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeConfig"),c(S9,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertConfig"),c(P9,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Config"),c($9,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianConfig"),c(I9,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(j9,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartConfig"),c(D9,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(N9,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(q9,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetConfig"),c(O9,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Config"),c(G9,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(X9,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(V9,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusConfig"),c(z9,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverConfig"),c(W9,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartConfig"),c(Q9,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(H9,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(U9,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(J9,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagConfig"),c(Y9,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmConfig"),c(K9,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerConfig"),c(Z9,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertConfig"),c(eB,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertConfig"),c(oB,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaConfig"),c(rB,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerConfig"),c(tB,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerConfig"),c(aB,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWConfig"),c(sB,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDConfig"),c(nB,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(lB,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(iB,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(dB,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterConfig"),c(cB,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(mB,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinConfig"),c(fB,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Config"),c(gB,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasConfig"),c(hB,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(uB,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRConfig"),c(pB,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(_B,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(bB,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltConfig"),c(vB,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(TB,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(FB,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(CB,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTConfig"),c(MB,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(EB,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(yB,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMConfig"),c(wB,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMConfig"),c(AB,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMConfig"),c(LB,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(BB,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(xB,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(kB,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetConfig"),c(RB,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoConfig"),c(fo,"class","docstring"),c(Bg,"class","docstring"),c(Wo,"class","docstring"),c(xg,"id","transformers.AutoTokenizer"),c(xg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xg,"href","#transformers.AutoTokenizer"),c(Qi,"class","relative group"),c(SB,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(PB,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizer"),c($B,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(IB,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizer"),c(jB,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartTokenizerFast"),c(DB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizer"),c(NB,"href","/docs/transformers/master/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(qB,"href","/docs/transformers/master/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(OB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),c(GB,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),c(XB,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(VB,"href","/docs/transformers/master/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(zB,"href","/docs/transformers/master/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(WB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(QB,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(HB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UB,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JB,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(YB,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(KB,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(ZB,"href","/docs/transformers/master/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(ex,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ox,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(rx,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineTokenizer"),c(tx,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizer"),c(ax,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(sx,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(nx,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lx,"href","/docs/transformers/master/en/model_doc/cpm#transformers.CpmTokenizer"),c(ix,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(dx,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizer"),c(cx,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(mx,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fx,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gx,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hx,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(ux,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(px,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizer"),c(_x,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bx,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vx,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizer"),c(Tx,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(Fx,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(Cx,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizer"),c(Mx,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(Ex,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wx,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Ax,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Lx,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Bx,"href","/docs/transformers/master/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(xx,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Rx,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Sx,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Px,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c($x,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(Ix,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(jx,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Dx,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Nx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizer"),c(qx,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDTokenizerFast"),c(Ox,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Gx,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Xx,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeTokenizer"),c(Vx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zx,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Wx,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Qx,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianTokenizer"),c(Hx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizer"),c(Ux,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Jx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(Yx,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Kx,"href","/docs/transformers/master/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Zx,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ek,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(ok,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(rk,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(tk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),c(ak,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),c(sk,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(nk,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(lk,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ik,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(dk,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ck,"href","/docs/transformers/master/en/model_doc/phobert#transformers.PhobertTokenizer"),c(mk,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fk,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(gk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizer"),c(hk,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertTokenizerFast"),c(uk,"href","/docs/transformers/master/en/model_doc/rag#transformers.RagTokenizer"),c(pk,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmTokenizer"),c(_k,"href","/docs/transformers/master/en/model_doc/realm#transformers.RealmTokenizerFast"),c(bk,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizer"),c(vk,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Tk,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Fk,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Ck,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Mk,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Ek,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yk,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wk,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Ak,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(Lk,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(Bk,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xk,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizer"),c(kk,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(Rk,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(Sk,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(Pk,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5Tokenizer"),c($k,"href","/docs/transformers/master/en/model_doc/mt5#transformers.T5TokenizerFast"),c(Ik,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasTokenizer"),c(jk,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(Dk,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(Nk,"href","/docs/transformers/master/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(qk,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizer"),c(Ok,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Gk,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMTokenizer"),c(Xk,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Vk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(zk,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Wk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Qk,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(go,"class","docstring"),c(nh,"class","docstring"),c(Qo,"class","docstring"),c(lh,"id","transformers.AutoFeatureExtractor"),c(lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lh,"href","#transformers.AutoFeatureExtractor"),c(Hi,"class","relative group"),c(Hk,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(Uk,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Jk,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Yk,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Kk,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(Zk,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oR,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(rR,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(tR,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(aR,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(sR,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(nR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(lR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dR,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c($e,"class","docstring"),c(yh,"class","docstring"),c(Ho,"class","docstring"),c(wh,"id","transformers.AutoProcessor"),c(wh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wh,"href","#transformers.AutoProcessor"),c(Ui,"class","relative group"),c(mR,"href","/docs/transformers/master/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(fR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPProcessor"),c(gR,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(hR,"href","/docs/transformers/master/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(uR,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(pR,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(_R,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRProcessor"),c(bR,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(vR,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ie,"class","docstring"),c(Ih,"class","docstring"),c(Uo,"class","docstring"),c(jh,"id","transformers.AutoModel"),c(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jh,"href","#transformers.AutoModel"),c(Yi,"class","relative group"),c(Vr,"class","docstring"),c(TR,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertModel"),c(FR,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartModel"),c(CR,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitModel"),c(MR,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertModel"),c(ER,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(yR,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdModel"),c(wR,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(AR,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(LR,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(BR,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertModel"),c(xR,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineModel"),c(kR,"href","/docs/transformers/master/en/model_doc/clip#transformers.CLIPModel"),c(RR,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertModel"),c(SR,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextModel"),c(PR,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLModel"),c($R,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(IR,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(jR,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaModel"),c(DR,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(NR,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTModel"),c(qR,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrModel"),c(OR,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertModel"),c(GR,"href","/docs/transformers/master/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(XR,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraModel"),c(VR,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertModel"),c(zR,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetModel"),c(WR,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTModel"),c(QR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelModel"),c(HR,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelBaseModel"),c(UR,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2Model"),c(JR,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(YR,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJModel"),c(KR,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertModel"),c(ZR,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertModel"),c(eS,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(oS,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(rS,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(tS,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDModel"),c(aS,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerModel"),c(sS,"href","/docs/transformers/master/en/model_doc/luke#transformers.LukeModel"),c(nS,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertModel"),c(lS,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100Model"),c(iS,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianModel"),c(dS,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerModel"),c(cS,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartModel"),c(mS,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(fS,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertModel"),c(gS,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetModel"),c(hS,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5Model"),c(uS,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerModel"),c(pS,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(_S,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusModel"),c(bS,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverModel"),c(vS,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartModel"),c(TS,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerModel"),c(FS,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(CS,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertModel"),c(MS,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModel"),c(ES,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertModel"),c(yS,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),c(wS,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaModel"),c(AS,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerModel"),c(LS,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerModel"),c(BS,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWModel"),c(xS,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDModel"),c(kS,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(RS,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterModel"),c(SS,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(PS,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinModel"),c($S,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5Model"),c(IS,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasModel"),c(jS,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(DS,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechModel"),c(NS,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qS,"href","/docs/transformers/master/en/model_doc/vilt#transformers.ViltModel"),c(OS,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(GS,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertModel"),c(XS,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTModel"),c(VS,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(zS,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(WS,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMModel"),c(QS,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMModel"),c(HS,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMModel"),c(US,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(JS,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(YS,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(KS,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetModel"),c(ZS,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoModel"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(_p,"id","transformers.AutoModelForPreTraining"),c(_p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_p,"href","#transformers.AutoModelForPreTraining"),c(ed,"class","relative group"),c(zr,"class","docstring"),c(eP,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForPreTraining"),c(tP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sP,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(lP,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(iP,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(dP,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(cP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mP,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fP,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForPreTraining"),c(gP,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hP,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uP,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(pP,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(_P,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(bP,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(vP,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(TP,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(FP,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CP,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(MP,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(EP,"href","/docs/transformers/master/en/model_doc/retribert#transformers.RetriBertModel"),c(yP,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(wP,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(AP,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(LP,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(BP,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(xP,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(kP,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(RP,"href","/docs/transformers/master/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(SP,"href","/docs/transformers/master/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(PP,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($P,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(IP,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jP,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(DP,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(De,"class","docstring"),c(Yo,"class","docstring"),c(a_,"id","transformers.AutoModelForCausalLM"),c(a_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a_,"href","#transformers.AutoModelForCausalLM"),c(td,"class","relative group"),c(Wr,"class","docstring"),c(NP,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForCausalLM"),c(qP,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertLMHeadModel"),c(OP,"href","/docs/transformers/master/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GP,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(XP,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VP,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(zP,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(WP,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(QP,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(HP,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(UP,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForCausalLM"),c(JP,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YP,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(KP,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ZP,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianForCausalLM"),c(e$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForCausalLM"),c(o$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(r$,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(t$,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(a$,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(s$,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(n$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(l$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(i$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(d$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(c$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(m$,"href","/docs/transformers/master/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(f$,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(g$,"href","/docs/transformers/master/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(h$,"href","/docs/transformers/master/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(u$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(p$,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(b$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(v$,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ne,"class","docstring"),c(Ko,"class","docstring"),c(O_,"id","transformers.AutoModelForMaskedLM"),c(O_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O_,"href","#transformers.AutoModelForMaskedLM"),c(nd,"class","relative group"),c(Qr,"class","docstring"),c(T$,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(F$,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(C$,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMaskedLM"),c(M$,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(E$,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(y$,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(w$,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(A$,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(L$,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(B$,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(x$,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(k$,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(R$,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(S$,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(P$,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($$,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(I$,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(j$,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(D$,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(N$,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(q$,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(O$,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(G$,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(X$,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(V$,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(z$,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(W$,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Q$,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(H$,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(U$,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(J$,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Y$,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(K$,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Z$,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(Eb,"id","transformers.AutoModelForSeq2SeqLM"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForSeq2SeqLM"),c(dd,"class","relative group"),c(Hr,"class","docstring"),c(eI,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oI,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(rI,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(tI,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(aI,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(sI,"href","/docs/transformers/master/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(nI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(lI,"href","/docs/transformers/master/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(iI,"href","/docs/transformers/master/en/model_doc/marian#transformers.MarianMTModel"),c(dI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(cI,"href","/docs/transformers/master/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(mI,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(fI,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(gI,"href","/docs/transformers/master/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(hI,"href","/docs/transformers/master/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(uI,"href","/docs/transformers/master/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(Gb,"id","transformers.AutoModelForSequenceClassification"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForSequenceClassification"),c(fd,"class","relative group"),c(Ur,"class","docstring"),c(pI,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(_I,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bI,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vI,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(TI,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(FI,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(CI,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MI,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(EI,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(yI,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wI,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AI,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LI,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(BI,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xI,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(kI,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(RI,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(SI,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(PI,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($I,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(II,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(jI,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(DI,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(NI,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForSequenceClassification"),c(qI,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(OI,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(GI,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(XI,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(VI,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zI,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(WI,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(QI,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(HI,"href","/docs/transformers/master/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(UI,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(JI,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(YI,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(KI,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(ZI,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ej,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(oj,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(rj,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(tj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(aj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(nj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(lj,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ge,"class","docstring"),c(or,"class","docstring"),c(I2,"id","transformers.AutoModelForMultipleChoice"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForMultipleChoice"),c(ud,"class","relative group"),c(Jr,"class","docstring"),c(ij,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(dj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForMultipleChoice"),c(cj,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(mj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(gj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(hj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(uj,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(pj,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_j,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vj,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(Tj,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(Fj,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(Cj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(Mj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(Ej,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(yj,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(wj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(Aj,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(Lj,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(Bj,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(xj,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kj,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(Rj,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(Sj,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(Pj,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c($j,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(fv,"id","transformers.AutoModelForNextSentencePrediction"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForNextSentencePrediction"),c(bd,"class","relative group"),c(Yr,"class","docstring"),c(Ij,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(jj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Dj,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(Nj,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(qj,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ve,"class","docstring"),c(tr,"class","docstring"),c(vv,"id","transformers.AutoModelForTokenClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForTokenClassification"),c(Fd,"class","relative group"),c(Kr,"class","docstring"),c(Oj,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Gj,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForTokenClassification"),c(Xj,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Vj,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(zj,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Wj,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(Qj,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(Hj,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Uj,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Jj,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Yj,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Kj,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Zj,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(eD,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(oD,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(rD,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(tD,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(aD,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(sD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(nD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(lD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(iD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(dD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(cD,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(mD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(fD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(gD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(hD,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(uD,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(pD,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(_D,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(bD,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(vD,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ze,"class","docstring"),c(ar,"class","docstring"),c(eT,"id","transformers.AutoModelForQuestionAnswering"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForQuestionAnswering"),c(Ed,"class","relative group"),c(Zr,"class","docstring"),c(TD,"href","/docs/transformers/master/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(FD,"href","/docs/transformers/master/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(CD,"href","/docs/transformers/master/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(MD,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ED,"href","/docs/transformers/master/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(yD,"href","/docs/transformers/master/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(wD,"href","/docs/transformers/master/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(AD,"href","/docs/transformers/master/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(LD,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(BD,"href","/docs/transformers/master/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(xD,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kD,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(RD,"href","/docs/transformers/master/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(SD,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PD,"href","/docs/transformers/master/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c($D,"href","/docs/transformers/master/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(ID,"href","/docs/transformers/master/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(jD,"href","/docs/transformers/master/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(DD,"href","/docs/transformers/master/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(ND,"href","/docs/transformers/master/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(qD,"href","/docs/transformers/master/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OD,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GD,"href","/docs/transformers/master/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(XD,"href","/docs/transformers/master/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VD,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(zD,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(WD,"href","/docs/transformers/master/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QD,"href","/docs/transformers/master/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(HD,"href","/docs/transformers/master/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(UD,"href","/docs/transformers/master/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(JD,"href","/docs/transformers/master/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(YD,"href","/docs/transformers/master/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(KD,"href","/docs/transformers/master/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(ZD,"href","/docs/transformers/master/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(eN,"href","/docs/transformers/master/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(oN,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(rN,"href","/docs/transformers/master/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(tN,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(aN,"href","/docs/transformers/master/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(We,"class","docstring"),c(sr,"class","docstring"),c(OT,"id","transformers.AutoModelForTableQuestionAnswering"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ad,"class","relative group"),c(et,"class","docstring"),c(sN,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(Qe,"class","docstring"),c(nr,"class","docstring"),c(VT,"id","transformers.AutoModelForImageClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.AutoModelForImageClassification"),c(xd,"class","relative group"),c(ot,"class","docstring"),c(nN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForImageClassification"),c(lN,"href","/docs/transformers/master/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(iN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassification"),c(dN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(cN,"href","/docs/transformers/master/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(mN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(gN,"href","/docs/transformers/master/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(hN,"href","/docs/transformers/master/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(uN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(pN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForImageClassification"),c(_N,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForImageClassification"),c(He,"class","docstring"),c(lr,"class","docstring"),c(ZT,"id","transformers.AutoModelForVision2Seq"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.AutoModelForVision2Seq"),c(Sd,"class","relative group"),c(rt,"class","docstring"),c(bN,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(r1,"id","transformers.AutoModelForAudioClassification"),c(r1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r1,"href","#transformers.AutoModelForAudioClassification"),c(Id,"class","relative group"),c(tt,"class","docstring"),c(vN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(TN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(FN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(CN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(MN,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(EN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(yN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(wN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(f1,"id","transformers.AutoModelForAudioFrameClassification"),c(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f1,"href","#transformers.AutoModelForAudioFrameClassification"),c(Nd,"class","relative group"),c(at,"class","docstring"),c(AN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(LN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(BN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(xN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(Ye,"class","docstring"),c(cr,"class","docstring"),c(b1,"id","transformers.AutoModelForCTC"),c(b1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b1,"href","#transformers.AutoModelForCTC"),c(Gd,"class","relative group"),c(st,"class","docstring"),c(kN,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(RN,"href","/docs/transformers/master/en/model_doc/hubert#transformers.HubertForCTC"),c(SN,"href","/docs/transformers/master/en/model_doc/sew#transformers.SEWForCTC"),c(PN,"href","/docs/transformers/master/en/model_doc/sew-d#transformers.SEWDForCTC"),c($N,"href","/docs/transformers/master/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(IN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(jN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(DN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ke,"class","docstring"),c(mr,"class","docstring"),c(L1,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L1,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(zd,"class","relative group"),c(nt,"class","docstring"),c(NN,"href","/docs/transformers/master/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qN,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(Ze,"class","docstring"),c(fr,"class","docstring"),c(R1,"id","transformers.AutoModelForAudioXVector"),c(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R1,"href","#transformers.AutoModelForAudioXVector"),c(Hd,"class","relative group"),c(lt,"class","docstring"),c(ON,"href","/docs/transformers/master/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(GN,"href","/docs/transformers/master/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XN,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(VN,"href","/docs/transformers/master/en/model_doc/wavlm#transformers.WavLMForXVector"),c(eo,"class","docstring"),c(gr,"class","docstring"),c(D1,"id","transformers.AutoModelForMaskedImageModeling"),c(D1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D1,"href","#transformers.AutoModelForMaskedImageModeling"),c(Yd,"class","relative group"),c(it,"class","docstring"),c(zN,"href","/docs/transformers/master/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(WN,"href","/docs/transformers/master/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(QN,"href","/docs/transformers/master/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(oo,"class","docstring"),c(hr,"class","docstring"),c(X1,"id","transformers.AutoModelForObjectDetection"),c(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X1,"href","#transformers.AutoModelForObjectDetection"),c(oc,"class","relative group"),c(dt,"class","docstring"),c(HN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ro,"class","docstring"),c(ur,"class","docstring"),c(W1,"id","transformers.AutoModelForImageSegmentation"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForImageSegmentation"),c(ac,"class","relative group"),c(ct,"class","docstring"),c(UN,"href","/docs/transformers/master/en/model_doc/detr#transformers.DetrForSegmentation"),c(to,"class","docstring"),c(pr,"class","docstring"),c(U1,"id","transformers.AutoModelForSemanticSegmentation"),c(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U1,"href","#transformers.AutoModelForSemanticSegmentation"),c(lc,"class","relative group"),c(mt,"class","docstring"),c(JN,"href","/docs/transformers/master/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(YN,"href","/docs/transformers/master/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ao,"class","docstring"),c(_r,"class","docstring"),c(Z1,"id","transformers.AutoModelForInstanceSegmentation"),c(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z1,"href","#transformers.AutoModelForInstanceSegmentation"),c(cc,"class","relative group"),c(ft,"class","docstring"),c(KN,"href","/docs/transformers/master/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(so,"class","docstring"),c(br,"class","docstring"),c(rF,"id","transformers.TFAutoModel"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.TFAutoModel"),c(gc,"class","relative group"),c(gt,"class","docstring"),c(ZN,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertModel"),c(eq,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartModel"),c(oq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertModel"),c(rq,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(tq,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(aq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertModel"),c(sq,"href","/docs/transformers/master/en/model_doc/clip#transformers.TFCLIPModel"),c(nq,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertModel"),c(lq,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextModel"),c(iq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLModel"),c(dq,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaModel"),c(cq,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(mq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(fq,"href","/docs/transformers/master/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(gq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraModel"),c(hq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(uq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelModel"),c(pq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(_q,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2Model"),c(bq,"href","/docs/transformers/master/en/model_doc/hubert#transformers.TFHubertModel"),c(vq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Tq,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDModel"),c(Fq,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerModel"),c(Cq,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Mq,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianModel"),c(Eq,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartModel"),c(yq,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(wq,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Aq,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5Model"),c(Lq,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Bq,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusModel"),c(xq,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertModel"),c(kq,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaModel"),c(Rq,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Sq,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Pq,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5Model"),c($q,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasModel"),c(Iq,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(jq,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTModel"),c(Dq,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Nq,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMModel"),c(qq,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Oq,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetModel"),c(ho,"class","docstring"),c(vr,"class","docstring"),c(VF,"id","transformers.TFAutoModelForPreTraining"),c(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VF,"href","#transformers.TFAutoModelForPreTraining"),c(pc,"class","relative group"),c(ht,"class","docstring"),c(Gq,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Xq,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Vq,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zq,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Wq,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Qq,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Hq,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Uq,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Jq,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Yq,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Kq,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Zq,"href","/docs/transformers/master/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eO,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rO,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aO,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(sO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(nO,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(dO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(uo,"class","docstring"),c(Tr,"class","docstring"),c(gC,"id","transformers.TFAutoModelForCausalLM"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModelForCausalLM"),c(vc,"class","relative group"),c(ut,"class","docstring"),c(cO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(mO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(fO,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(gO,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(hO,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(uO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(pO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(_O,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(bO,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(vO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TO,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(po,"class","docstring"),c(Fr,"class","docstring"),c(yC,"id","transformers.TFAutoModelForImageClassification"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.TFAutoModelForImageClassification"),c(Cc,"class","relative group"),c(pt,"class","docstring"),c(FO,"href","/docs/transformers/master/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(CO,"href","/docs/transformers/master/en/model_doc/vit#transformers.TFViTForImageClassification"),c(_o,"class","docstring"),c(Cr,"class","docstring"),c(LC,"id","transformers.TFAutoModelForMaskedLM"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForMaskedLM"),c(yc,"class","relative group"),c(_t,"class","docstring"),c(MO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(EO,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(yO,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wO,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(AO,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(LO,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BO,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(xO,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(kO,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(RO,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(SO,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(PO,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($O,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(IO,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jO,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(DO,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NO,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(qO,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OO,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GO,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bo,"class","docstring"),c(Mr,"class","docstring"),c(UC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(bt,"class","docstring"),c(XO,"href","/docs/transformers/master/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(VO,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(zO,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(WO,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QO,"href","/docs/transformers/master/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(HO,"href","/docs/transformers/master/en/model_doc/marian#transformers.TFMarianMTModel"),c(UO,"href","/docs/transformers/master/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(JO,"href","/docs/transformers/master/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(YO,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(KO,"href","/docs/transformers/master/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vo,"class","docstring"),c(Er,"class","docstring"),c(nM,"id","transformers.TFAutoModelForSequenceClassification"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.TFAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(vt,"class","docstring"),c(ZO,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(eG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(oG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(rG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(tG,"href","/docs/transformers/master/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(aG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(sG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(nG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(lG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(iG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(dG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(cG,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(fG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(uG,"href","/docs/transformers/master/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(pG,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(_G,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(TG,"href","/docs/transformers/master/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(FG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(CG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(MG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(To,"class","docstring"),c(yr,"class","docstring"),c(RM,"id","transformers.TFAutoModelForMultipleChoice"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Pc,"class","relative group"),c(Tt,"class","docstring"),c(EG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(yG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(wG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(AG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(LG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(BG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(xG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(kG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(RG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(SG,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(PG,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c($G,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(IG,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(jG,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(DG,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NG,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(qG,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Fo,"class","docstring"),c(wr,"class","docstring"),c(JM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(jc,"class","relative group"),c(Ft,"class","docstring"),c(OG,"href","/docs/transformers/master/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Co,"class","docstring"),c(Ar,"class","docstring"),c(KM,"id","transformers.TFAutoModelForTokenClassification"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForTokenClassification"),c(qc,"class","relative group"),c(Ct,"class","docstring"),c(GG,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XG,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(VG,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(zG,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WG,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QG,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(HG,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(UG,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(JG,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(YG,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(KG,"href","/docs/transformers/master/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(ZG,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(eX,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(oX,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(rX,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(tX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(aX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sX,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(nX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(lX,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Mo,"class","docstring"),c(Lr,"class","docstring"),c(v4,"id","transformers.TFAutoModelForQuestionAnswering"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(Mt,"class","docstring"),c(iX,"href","/docs/transformers/master/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(dX,"href","/docs/transformers/master/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(cX,"href","/docs/transformers/master/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(mX,"href","/docs/transformers/master/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(fX,"href","/docs/transformers/master/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(gX,"href","/docs/transformers/master/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(hX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(uX,"href","/docs/transformers/master/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(pX,"href","/docs/transformers/master/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(_X,"href","/docs/transformers/master/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(bX,"href","/docs/transformers/master/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(vX,"href","/docs/transformers/master/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(TX,"href","/docs/transformers/master/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(FX,"href","/docs/transformers/master/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(CX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(MX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(EX,"href","/docs/transformers/master/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(yX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(wX,"href","/docs/transformers/master/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Eo,"class","docstring"),c(Br,"class","docstring"),c(N4,"id","transformers.TFAutoModelForVision2Seq"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForVision2Seq"),c(Wc,"class","relative group"),c(Et,"class","docstring"),c(AX,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(yo,"class","docstring"),c(xr,"class","docstring"),c(O4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Uc,"class","relative group"),c(yt,"class","docstring"),c(LX,"href","/docs/transformers/master/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(wo,"class","docstring"),c(kr,"class","docstring"),c(X4,"id","transformers.FlaxAutoModel"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.FlaxAutoModel"),c(Kc,"class","relative group"),c(wt,"class","docstring"),c(BX,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xX,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartModel"),c(kX,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitModel"),c(RX,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertModel"),c(SX,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PX,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c($X,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(IX,"href","/docs/transformers/master/en/model_doc/clip#transformers.FlaxCLIPModel"),c(jX,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(DX,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraModel"),c(NX,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(qX,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OX,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(GX,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianModel"),c(XX,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartModel"),c(VX,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5Model"),c(zX,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(WX,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(QX,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(HX,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5Model"),c(UX,"href","/docs/transformers/master/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(JX,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTModel"),c(YX,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(KX,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(ZX,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ao,"class","docstring"),c(Rr,"class","docstring"),c(uE,"id","transformers.FlaxAutoModelForCausalLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.FlaxAutoModelForCausalLM"),c(om,"class","relative group"),c(At,"class","docstring"),c(eV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(oV,"href","/docs/transformers/master/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(rV,"href","/docs/transformers/master/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(tV,"href","/docs/transformers/master/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(aV,"href","/docs/transformers/master/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Lo,"class","docstring"),c(Sr,"class","docstring"),c(FE,"id","transformers.FlaxAutoModelForPreTraining"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModelForPreTraining"),c(am,"class","relative group"),c(Lt,"class","docstring"),c(sV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(nV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(iV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(dV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(cV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mV,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(fV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hV,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(uV,"href","/docs/transformers/master/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(pV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Bo,"class","docstring"),c(Pr,"class","docstring"),c(PE,"id","transformers.FlaxAutoModelForMaskedLM"),c(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(lm,"class","relative group"),c(Bt,"class","docstring"),c(_V,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(bV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(TV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(FV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(CV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(MV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(EV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(xo,"class","docstring"),c($r,"class","docstring"),c(zE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(cm,"class","relative group"),c(xt,"class","docstring"),c(AV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(LV,"href","/docs/transformers/master/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(BV,"href","/docs/transformers/master/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xV,"href","/docs/transformers/master/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(kV,"href","/docs/transformers/master/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SV,"href","/docs/transformers/master/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(PV,"href","/docs/transformers/master/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c($V,"href","/docs/transformers/master/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(ko,"class","docstring"),c(Ir,"class","docstring"),c(o3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(gm,"class","relative group"),c(kt,"class","docstring"),c(IV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(jV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(DV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(NV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(qV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(OV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(GV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(XV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(VV,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(zV,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Ro,"class","docstring"),c(jr,"class","docstring"),c(f3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(pm,"class","relative group"),c(Rt,"class","docstring"),c(WV,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(QV,"href","/docs/transformers/master/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(HV,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(UV,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(JV,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(YV,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(KV,"href","/docs/transformers/master/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(ZV,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(ez,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(oz,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(So,"class","docstring"),c(Dr,"class","docstring"),c(M3,"id","transformers.FlaxAutoModelForTokenClassification"),c(M3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(vm,"class","relative group"),c(St,"class","docstring"),c(rz,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(az,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(sz,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(nz,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(iz,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dz,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Po,"class","docstring"),c(Nr,"class","docstring"),c(R3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(R3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Cm,"class","relative group"),c(Pt,"class","docstring"),c(cz,"href","/docs/transformers/master/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(fz,"href","/docs/transformers/master/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(gz,"href","/docs/transformers/master/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(hz,"href","/docs/transformers/master/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(uz,"href","/docs/transformers/master/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(pz,"href","/docs/transformers/master/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(_z,"href","/docs/transformers/master/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c($o,"class","docstring"),c(qr,"class","docstring"),c(O3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(ym,"class","relative group"),c($t,"class","docstring"),c(bz,"href","/docs/transformers/master/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Io,"class","docstring"),c(Or,"class","docstring"),c(X3,"id","transformers.FlaxAutoModelForImageClassification"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForImageClassification"),c(Lm,"class","relative group"),c(It,"class","docstring"),c(vz,"href","/docs/transformers/master/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Tz,"href","/docs/transformers/master/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(jo,"class","docstring"),c(Gr,"class","docstring"),c(W3,"id","transformers.FlaxAutoModelForVision2Seq"),c(W3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(km,"class","relative group"),c(jt,"class","docstring"),c(Fz,"href","/docs/transformers/master/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Do,"class","docstring"),c(Xr,"class","docstring")},m(d,_){e(document.head,J),b(d,Pe,_),b(d,de,_),e(de,he),e(he,io),g(me,io,null),e(de,Fe),e(de,Vo),e(Vo,ji),b(d,$m,_),b(d,ma,_),e(ma,Di),e(ma,Ni),e(Ni,Q5),e(ma,Im),b(d,Le,_),b(d,co,_),e(co,qi),e(co,qs),e(qs,H5),e(co,Os),e(co,Gs),e(Gs,U5),e(co,Oi),e(co,Xs),e(Xs,J5),e(co,Gi),b(d,jm,_),g(qa,d,_),b(d,mo,_),b(d,ue,_),e(ue,q7),e(ue,Xi),e(Xi,O7),e(ue,G7),b(d,zo,_),b(d,Oa,_),e(Oa,X7),e(Oa,Dm),e(Dm,V7),e(Oa,TPe),b(d,nxe,_),b(d,Vi,_),e(Vi,Nm),e(Nm,hQ),g(Y5,hQ,null),e(Vi,FPe),e(Vi,uQ),e(uQ,CPe),b(d,lxe,_),b(d,Vs,_),e(Vs,MPe),e(Vs,pQ),e(pQ,EPe),e(Vs,yPe),e(Vs,_Q),e(_Q,wPe),e(Vs,APe),b(d,ixe,_),g(K5,d,_),b(d,dxe,_),b(d,z7,_),e(z7,LPe),b(d,cxe,_),g(qm,d,_),b(d,mxe,_),b(d,zi,_),e(zi,Om),e(Om,bQ),g(Z5,bQ,null),e(zi,BPe),e(zi,vQ),e(vQ,xPe),b(d,fxe,_),b(d,Wo,_),g(ey,Wo,null),e(Wo,kPe),e(Wo,oy),e(oy,RPe),e(oy,W7),e(W7,SPe),e(oy,PPe),e(Wo,$Pe),e(Wo,ry),e(ry,IPe),e(ry,TQ),e(TQ,jPe),e(ry,DPe),e(Wo,NPe),e(Wo,fo),g(ty,fo,null),e(fo,qPe),e(fo,FQ),e(FQ,OPe),e(fo,GPe),e(fo,Wi),e(Wi,XPe),e(Wi,CQ),e(CQ,VPe),e(Wi,zPe),e(Wi,MQ),e(MQ,WPe),e(Wi,QPe),e(fo,HPe),e(fo,v),e(v,Gm),e(Gm,EQ),e(EQ,UPe),e(Gm,JPe),e(Gm,Q7),e(Q7,YPe),e(Gm,KPe),e(v,ZPe),e(v,Xm),e(Xm,yQ),e(yQ,e$e),e(Xm,o$e),e(Xm,H7),e(H7,r$e),e(Xm,t$e),e(v,a$e),e(v,Vm),e(Vm,wQ),e(wQ,s$e),e(Vm,n$e),e(Vm,U7),e(U7,l$e),e(Vm,i$e),e(v,d$e),e(v,zm),e(zm,AQ),e(AQ,c$e),e(zm,m$e),e(zm,J7),e(J7,f$e),e(zm,g$e),e(v,h$e),e(v,Wm),e(Wm,LQ),e(LQ,u$e),e(Wm,p$e),e(Wm,Y7),e(Y7,_$e),e(Wm,b$e),e(v,v$e),e(v,Qm),e(Qm,BQ),e(BQ,T$e),e(Qm,F$e),e(Qm,K7),e(K7,C$e),e(Qm,M$e),e(v,E$e),e(v,Hm),e(Hm,xQ),e(xQ,y$e),e(Hm,w$e),e(Hm,Z7),e(Z7,A$e),e(Hm,L$e),e(v,B$e),e(v,Um),e(Um,kQ),e(kQ,x$e),e(Um,k$e),e(Um,e9),e(e9,R$e),e(Um,S$e),e(v,P$e),e(v,Jm),e(Jm,RQ),e(RQ,$$e),e(Jm,I$e),e(Jm,o9),e(o9,j$e),e(Jm,D$e),e(v,N$e),e(v,Ym),e(Ym,SQ),e(SQ,q$e),e(Ym,O$e),e(Ym,r9),e(r9,G$e),e(Ym,X$e),e(v,V$e),e(v,Km),e(Km,PQ),e(PQ,z$e),e(Km,W$e),e(Km,t9),e(t9,Q$e),e(Km,H$e),e(v,U$e),e(v,Zm),e(Zm,$Q),e($Q,J$e),e(Zm,Y$e),e(Zm,a9),e(a9,K$e),e(Zm,Z$e),e(v,eIe),e(v,ef),e(ef,IQ),e(IQ,oIe),e(ef,rIe),e(ef,s9),e(s9,tIe),e(ef,aIe),e(v,sIe),e(v,of),e(of,jQ),e(jQ,nIe),e(of,lIe),e(of,n9),e(n9,iIe),e(of,dIe),e(v,cIe),e(v,rf),e(rf,DQ),e(DQ,mIe),e(rf,fIe),e(rf,l9),e(l9,gIe),e(rf,hIe),e(v,uIe),e(v,tf),e(tf,NQ),e(NQ,pIe),e(tf,_Ie),e(tf,i9),e(i9,bIe),e(tf,vIe),e(v,TIe),e(v,af),e(af,qQ),e(qQ,FIe),e(af,CIe),e(af,d9),e(d9,MIe),e(af,EIe),e(v,yIe),e(v,sf),e(sf,OQ),e(OQ,wIe),e(sf,AIe),e(sf,c9),e(c9,LIe),e(sf,BIe),e(v,xIe),e(v,nf),e(nf,GQ),e(GQ,kIe),e(nf,RIe),e(nf,m9),e(m9,SIe),e(nf,PIe),e(v,$Ie),e(v,lf),e(lf,XQ),e(XQ,IIe),e(lf,jIe),e(lf,f9),e(f9,DIe),e(lf,NIe),e(v,qIe),e(v,df),e(df,VQ),e(VQ,OIe),e(df,GIe),e(df,g9),e(g9,XIe),e(df,VIe),e(v,zIe),e(v,cf),e(cf,zQ),e(zQ,WIe),e(cf,QIe),e(cf,h9),e(h9,HIe),e(cf,UIe),e(v,JIe),e(v,mf),e(mf,WQ),e(WQ,YIe),e(mf,KIe),e(mf,u9),e(u9,ZIe),e(mf,eje),e(v,oje),e(v,ff),e(ff,QQ),e(QQ,rje),e(ff,tje),e(ff,p9),e(p9,aje),e(ff,sje),e(v,nje),e(v,gf),e(gf,HQ),e(HQ,lje),e(gf,ije),e(gf,_9),e(_9,dje),e(gf,cje),e(v,mje),e(v,hf),e(hf,UQ),e(UQ,fje),e(hf,gje),e(hf,b9),e(b9,hje),e(hf,uje),e(v,pje),e(v,uf),e(uf,JQ),e(JQ,_je),e(uf,bje),e(uf,v9),e(v9,vje),e(uf,Tje),e(v,Fje),e(v,pf),e(pf,YQ),e(YQ,Cje),e(pf,Mje),e(pf,T9),e(T9,Eje),e(pf,yje),e(v,wje),e(v,_f),e(_f,KQ),e(KQ,Aje),e(_f,Lje),e(_f,F9),e(F9,Bje),e(_f,xje),e(v,kje),e(v,bf),e(bf,ZQ),e(ZQ,Rje),e(bf,Sje),e(bf,C9),e(C9,Pje),e(bf,$je),e(v,Ije),e(v,vf),e(vf,eH),e(eH,jje),e(vf,Dje),e(vf,M9),e(M9,Nje),e(vf,qje),e(v,Oje),e(v,Tf),e(Tf,oH),e(oH,Gje),e(Tf,Xje),e(Tf,E9),e(E9,Vje),e(Tf,zje),e(v,Wje),e(v,Ff),e(Ff,rH),e(rH,Qje),e(Ff,Hje),e(Ff,y9),e(y9,Uje),e(Ff,Jje),e(v,Yje),e(v,Cf),e(Cf,tH),e(tH,Kje),e(Cf,Zje),e(Cf,w9),e(w9,eDe),e(Cf,oDe),e(v,rDe),e(v,Mf),e(Mf,aH),e(aH,tDe),e(Mf,aDe),e(Mf,A9),e(A9,sDe),e(Mf,nDe),e(v,lDe),e(v,Ef),e(Ef,sH),e(sH,iDe),e(Ef,dDe),e(Ef,L9),e(L9,cDe),e(Ef,mDe),e(v,fDe),e(v,yf),e(yf,nH),e(nH,gDe),e(yf,hDe),e(yf,B9),e(B9,uDe),e(yf,pDe),e(v,_De),e(v,wf),e(wf,lH),e(lH,bDe),e(wf,vDe),e(wf,x9),e(x9,TDe),e(wf,FDe),e(v,CDe),e(v,Af),e(Af,iH),e(iH,MDe),e(Af,EDe),e(Af,k9),e(k9,yDe),e(Af,wDe),e(v,ADe),e(v,Lf),e(Lf,dH),e(dH,LDe),e(Lf,BDe),e(Lf,R9),e(R9,xDe),e(Lf,kDe),e(v,RDe),e(v,Bf),e(Bf,cH),e(cH,SDe),e(Bf,PDe),e(Bf,S9),e(S9,$De),e(Bf,IDe),e(v,jDe),e(v,xf),e(xf,mH),e(mH,DDe),e(xf,NDe),e(xf,P9),e(P9,qDe),e(xf,ODe),e(v,GDe),e(v,kf),e(kf,fH),e(fH,XDe),e(kf,VDe),e(kf,$9),e($9,zDe),e(kf,WDe),e(v,QDe),e(v,Rf),e(Rf,gH),e(gH,HDe),e(Rf,UDe),e(Rf,I9),e(I9,JDe),e(Rf,YDe),e(v,KDe),e(v,Sf),e(Sf,hH),e(hH,ZDe),e(Sf,eNe),e(Sf,j9),e(j9,oNe),e(Sf,rNe),e(v,tNe),e(v,Pf),e(Pf,uH),e(uH,aNe),e(Pf,sNe),e(Pf,D9),e(D9,nNe),e(Pf,lNe),e(v,iNe),e(v,$f),e($f,pH),e(pH,dNe),e($f,cNe),e($f,N9),e(N9,mNe),e($f,fNe),e(v,gNe),e(v,If),e(If,_H),e(_H,hNe),e(If,uNe),e(If,q9),e(q9,pNe),e(If,_Ne),e(v,bNe),e(v,jf),e(jf,bH),e(bH,vNe),e(jf,TNe),e(jf,O9),e(O9,FNe),e(jf,CNe),e(v,MNe),e(v,Df),e(Df,vH),e(vH,ENe),e(Df,yNe),e(Df,G9),e(G9,wNe),e(Df,ANe),e(v,LNe),e(v,Nf),e(Nf,TH),e(TH,BNe),e(Nf,xNe),e(Nf,X9),e(X9,kNe),e(Nf,RNe),e(v,SNe),e(v,qf),e(qf,FH),e(FH,PNe),e(qf,$Ne),e(qf,V9),e(V9,INe),e(qf,jNe),e(v,DNe),e(v,Of),e(Of,CH),e(CH,NNe),e(Of,qNe),e(Of,z9),e(z9,ONe),e(Of,GNe),e(v,XNe),e(v,Gf),e(Gf,MH),e(MH,VNe),e(Gf,zNe),e(Gf,W9),e(W9,WNe),e(Gf,QNe),e(v,HNe),e(v,Xf),e(Xf,EH),e(EH,UNe),e(Xf,JNe),e(Xf,Q9),e(Q9,YNe),e(Xf,KNe),e(v,ZNe),e(v,Vf),e(Vf,yH),e(yH,eqe),e(Vf,oqe),e(Vf,H9),e(H9,rqe),e(Vf,tqe),e(v,aqe),e(v,zf),e(zf,wH),e(wH,sqe),e(zf,nqe),e(zf,U9),e(U9,lqe),e(zf,iqe),e(v,dqe),e(v,Wf),e(Wf,AH),e(AH,cqe),e(Wf,mqe),e(Wf,J9),e(J9,fqe),e(Wf,gqe),e(v,hqe),e(v,Qf),e(Qf,LH),e(LH,uqe),e(Qf,pqe),e(Qf,Y9),e(Y9,_qe),e(Qf,bqe),e(v,vqe),e(v,Hf),e(Hf,BH),e(BH,Tqe),e(Hf,Fqe),e(Hf,K9),e(K9,Cqe),e(Hf,Mqe),e(v,Eqe),e(v,Uf),e(Uf,xH),e(xH,yqe),e(Uf,wqe),e(Uf,Z9),e(Z9,Aqe),e(Uf,Lqe),e(v,Bqe),e(v,Jf),e(Jf,kH),e(kH,xqe),e(Jf,kqe),e(Jf,eB),e(eB,Rqe),e(Jf,Sqe),e(v,Pqe),e(v,Yf),e(Yf,RH),e(RH,$qe),e(Yf,Iqe),e(Yf,oB),e(oB,jqe),e(Yf,Dqe),e(v,Nqe),e(v,Kf),e(Kf,SH),e(SH,qqe),e(Kf,Oqe),e(Kf,rB),e(rB,Gqe),e(Kf,Xqe),e(v,Vqe),e(v,Zf),e(Zf,PH),e(PH,zqe),e(Zf,Wqe),e(Zf,tB),e(tB,Qqe),e(Zf,Hqe),e(v,Uqe),e(v,eg),e(eg,$H),e($H,Jqe),e(eg,Yqe),e(eg,aB),e(aB,Kqe),e(eg,Zqe),e(v,eOe),e(v,og),e(og,IH),e(IH,oOe),e(og,rOe),e(og,sB),e(sB,tOe),e(og,aOe),e(v,sOe),e(v,rg),e(rg,jH),e(jH,nOe),e(rg,lOe),e(rg,nB),e(nB,iOe),e(rg,dOe),e(v,cOe),e(v,tg),e(tg,DH),e(DH,mOe),e(tg,fOe),e(tg,lB),e(lB,gOe),e(tg,hOe),e(v,uOe),e(v,ag),e(ag,NH),e(NH,pOe),e(ag,_Oe),e(ag,iB),e(iB,bOe),e(ag,vOe),e(v,TOe),e(v,sg),e(sg,qH),e(qH,FOe),e(sg,COe),e(sg,dB),e(dB,MOe),e(sg,EOe),e(v,yOe),e(v,ng),e(ng,OH),e(OH,wOe),e(ng,AOe),e(ng,cB),e(cB,LOe),e(ng,BOe),e(v,xOe),e(v,lg),e(lg,GH),e(GH,kOe),e(lg,ROe),e(lg,mB),e(mB,SOe),e(lg,POe),e(v,$Oe),e(v,ig),e(ig,XH),e(XH,IOe),e(ig,jOe),e(ig,fB),e(fB,DOe),e(ig,NOe),e(v,qOe),e(v,dg),e(dg,VH),e(VH,OOe),e(dg,GOe),e(dg,gB),e(gB,XOe),e(dg,VOe),e(v,zOe),e(v,cg),e(cg,zH),e(zH,WOe),e(cg,QOe),e(cg,hB),e(hB,HOe),e(cg,UOe),e(v,JOe),e(v,mg),e(mg,WH),e(WH,YOe),e(mg,KOe),e(mg,uB),e(uB,ZOe),e(mg,eGe),e(v,oGe),e(v,fg),e(fg,QH),e(QH,rGe),e(fg,tGe),e(fg,pB),e(pB,aGe),e(fg,sGe),e(v,nGe),e(v,gg),e(gg,HH),e(HH,lGe),e(gg,iGe),e(gg,_B),e(_B,dGe),e(gg,cGe),e(v,mGe),e(v,hg),e(hg,UH),e(UH,fGe),e(hg,gGe),e(hg,bB),e(bB,hGe),e(hg,uGe),e(v,pGe),e(v,ug),e(ug,JH),e(JH,_Ge),e(ug,bGe),e(ug,vB),e(vB,vGe),e(ug,TGe),e(v,FGe),e(v,pg),e(pg,YH),e(YH,CGe),e(pg,MGe),e(pg,TB),e(TB,EGe),e(pg,yGe),e(v,wGe),e(v,_g),e(_g,KH),e(KH,AGe),e(_g,LGe),e(_g,FB),e(FB,BGe),e(_g,xGe),e(v,kGe),e(v,bg),e(bg,ZH),e(ZH,RGe),e(bg,SGe),e(bg,CB),e(CB,PGe),e(bg,$Ge),e(v,IGe),e(v,vg),e(vg,eU),e(eU,jGe),e(vg,DGe),e(vg,MB),e(MB,NGe),e(vg,qGe),e(v,OGe),e(v,Tg),e(Tg,oU),e(oU,GGe),e(Tg,XGe),e(Tg,EB),e(EB,VGe),e(Tg,zGe),e(v,WGe),e(v,Fg),e(Fg,rU),e(rU,QGe),e(Fg,HGe),e(Fg,yB),e(yB,UGe),e(Fg,JGe),e(v,YGe),e(v,Cg),e(Cg,tU),e(tU,KGe),e(Cg,ZGe),e(Cg,wB),e(wB,eXe),e(Cg,oXe),e(v,rXe),e(v,Mg),e(Mg,aU),e(aU,tXe),e(Mg,aXe),e(Mg,AB),e(AB,sXe),e(Mg,nXe),e(v,lXe),e(v,Eg),e(Eg,sU),e(sU,iXe),e(Eg,dXe),e(Eg,LB),e(LB,cXe),e(Eg,mXe),e(v,fXe),e(v,yg),e(yg,nU),e(nU,gXe),e(yg,hXe),e(yg,BB),e(BB,uXe),e(yg,pXe),e(v,_Xe),e(v,wg),e(wg,lU),e(lU,bXe),e(wg,vXe),e(wg,xB),e(xB,TXe),e(wg,FXe),e(v,CXe),e(v,Ag),e(Ag,iU),e(iU,MXe),e(Ag,EXe),e(Ag,kB),e(kB,yXe),e(Ag,wXe),e(v,AXe),e(v,Lg),e(Lg,dU),e(dU,LXe),e(Lg,BXe),e(Lg,RB),e(RB,xXe),e(Lg,kXe),e(fo,RXe),e(fo,cU),e(cU,SXe),e(fo,PXe),g(ay,fo,null),e(Wo,$Xe),e(Wo,Bg),g(sy,Bg,null),e(Bg,IXe),e(Bg,mU),e(mU,jXe),b(d,gxe,_),b(d,Qi,_),e(Qi,xg),e(xg,fU),g(ny,fU,null),e(Qi,DXe),e(Qi,gU),e(gU,NXe),b(d,hxe,_),b(d,Qo,_),g(ly,Qo,null),e(Qo,qXe),e(Qo,iy),e(iy,OXe),e(iy,SB),e(SB,GXe),e(iy,XXe),e(Qo,VXe),e(Qo,dy),e(dy,zXe),e(dy,hU),e(hU,WXe),e(dy,QXe),e(Qo,HXe),e(Qo,go),g(cy,go,null),e(go,UXe),e(go,uU),e(uU,JXe),e(go,YXe),e(go,Ga),e(Ga,KXe),e(Ga,pU),e(pU,ZXe),e(Ga,eVe),e(Ga,_U),e(_U,oVe),e(Ga,rVe),e(Ga,bU),e(bU,tVe),e(Ga,aVe),e(go,sVe),e(go,E),e(E,zs),e(zs,vU),e(vU,nVe),e(zs,lVe),e(zs,PB),e(PB,iVe),e(zs,dVe),e(zs,$B),e($B,cVe),e(zs,mVe),e(E,fVe),e(E,Ws),e(Ws,TU),e(TU,gVe),e(Ws,hVe),e(Ws,IB),e(IB,uVe),e(Ws,pVe),e(Ws,jB),e(jB,_Ve),e(Ws,bVe),e(E,vVe),e(E,Qs),e(Qs,FU),e(FU,TVe),e(Qs,FVe),e(Qs,DB),e(DB,CVe),e(Qs,MVe),e(Qs,NB),e(NB,EVe),e(Qs,yVe),e(E,wVe),e(E,kg),e(kg,CU),e(CU,AVe),e(kg,LVe),e(kg,qB),e(qB,BVe),e(kg,xVe),e(E,kVe),e(E,Hs),e(Hs,MU),e(MU,RVe),e(Hs,SVe),e(Hs,OB),e(OB,PVe),e(Hs,$Ve),e(Hs,GB),e(GB,IVe),e(Hs,jVe),e(E,DVe),e(E,Rg),e(Rg,EU),e(EU,NVe),e(Rg,qVe),e(Rg,XB),e(XB,OVe),e(Rg,GVe),e(E,XVe),e(E,Sg),e(Sg,yU),e(yU,VVe),e(Sg,zVe),e(Sg,VB),e(VB,WVe),e(Sg,QVe),e(E,HVe),e(E,Pg),e(Pg,wU),e(wU,UVe),e(Pg,JVe),e(Pg,zB),e(zB,YVe),e(Pg,KVe),e(E,ZVe),e(E,Us),e(Us,AU),e(AU,eze),e(Us,oze),e(Us,WB),e(WB,rze),e(Us,tze),e(Us,QB),e(QB,aze),e(Us,sze),e(E,nze),e(E,Js),e(Js,LU),e(LU,lze),e(Js,ize),e(Js,HB),e(HB,dze),e(Js,cze),e(Js,UB),e(UB,mze),e(Js,fze),e(E,gze),e(E,Ys),e(Ys,BU),e(BU,hze),e(Ys,uze),e(Ys,JB),e(JB,pze),e(Ys,_ze),e(Ys,YB),e(YB,bze),e(Ys,vze),e(E,Tze),e(E,$g),e($g,xU),e(xU,Fze),e($g,Cze),e($g,KB),e(KB,Mze),e($g,Eze),e(E,yze),e(E,Ig),e(Ig,kU),e(kU,wze),e(Ig,Aze),e(Ig,ZB),e(ZB,Lze),e(Ig,Bze),e(E,xze),e(E,Ks),e(Ks,RU),e(RU,kze),e(Ks,Rze),e(Ks,ex),e(ex,Sze),e(Ks,Pze),e(Ks,ox),e(ox,$ze),e(Ks,Ize),e(E,jze),e(E,jg),e(jg,SU),e(SU,Dze),e(jg,Nze),e(jg,rx),e(rx,qze),e(jg,Oze),e(E,Gze),e(E,Zs),e(Zs,PU),e(PU,Xze),e(Zs,Vze),e(Zs,tx),e(tx,zze),e(Zs,Wze),e(Zs,ax),e(ax,Qze),e(Zs,Hze),e(E,Uze),e(E,en),e(en,$U),e($U,Jze),e(en,Yze),e(en,sx),e(sx,Kze),e(en,Zze),e(en,nx),e(nx,eWe),e(en,oWe),e(E,rWe),e(E,on),e(on,IU),e(IU,tWe),e(on,aWe),e(on,lx),e(lx,sWe),e(on,nWe),e(on,jU),e(jU,lWe),e(on,iWe),e(E,dWe),e(E,Dg),e(Dg,DU),e(DU,cWe),e(Dg,mWe),e(Dg,ix),e(ix,fWe),e(Dg,gWe),e(E,hWe),e(E,rn),e(rn,NU),e(NU,uWe),e(rn,pWe),e(rn,dx),e(dx,_We),e(rn,bWe),e(rn,cx),e(cx,vWe),e(rn,TWe),e(E,FWe),e(E,Ng),e(Ng,qU),e(qU,CWe),e(Ng,MWe),e(Ng,mx),e(mx,EWe),e(Ng,yWe),e(E,wWe),e(E,tn),e(tn,OU),e(OU,AWe),e(tn,LWe),e(tn,fx),e(fx,BWe),e(tn,xWe),e(tn,gx),e(gx,kWe),e(tn,RWe),e(E,SWe),e(E,an),e(an,GU),e(GU,PWe),e(an,$We),e(an,hx),e(hx,IWe),e(an,jWe),e(an,ux),e(ux,DWe),e(an,NWe),e(E,qWe),e(E,sn),e(sn,XU),e(XU,OWe),e(sn,GWe),e(sn,px),e(px,XWe),e(sn,VWe),e(sn,_x),e(_x,zWe),e(sn,WWe),e(E,QWe),e(E,qg),e(qg,VU),e(VU,HWe),e(qg,UWe),e(qg,bx),e(bx,JWe),e(qg,YWe),e(E,KWe),e(E,nn),e(nn,zU),e(zU,ZWe),e(nn,eQe),e(nn,vx),e(vx,oQe),e(nn,rQe),e(nn,Tx),e(Tx,tQe),e(nn,aQe),e(E,sQe),e(E,Og),e(Og,WU),e(WU,nQe),e(Og,lQe),e(Og,Fx),e(Fx,iQe),e(Og,dQe),e(E,cQe),e(E,ln),e(ln,QU),e(QU,mQe),e(ln,fQe),e(ln,Cx),e(Cx,gQe),e(ln,hQe),e(ln,Mx),e(Mx,uQe),e(ln,pQe),e(E,_Qe),e(E,dn),e(dn,HU),e(HU,bQe),e(dn,vQe),e(dn,Ex),e(Ex,TQe),e(dn,FQe),e(dn,yx),e(yx,CQe),e(dn,MQe),e(E,EQe),e(E,cn),e(cn,UU),e(UU,yQe),e(cn,wQe),e(cn,wx),e(wx,AQe),e(cn,LQe),e(cn,Ax),e(Ax,BQe),e(cn,xQe),e(E,kQe),e(E,mn),e(mn,JU),e(JU,RQe),e(mn,SQe),e(mn,Lx),e(Lx,PQe),e(mn,$Qe),e(mn,Bx),e(Bx,IQe),e(mn,jQe),e(E,DQe),e(E,Gg),e(Gg,YU),e(YU,NQe),e(Gg,qQe),e(Gg,xx),e(xx,OQe),e(Gg,GQe),e(E,XQe),e(E,fn),e(fn,KU),e(KU,VQe),e(fn,zQe),e(fn,kx),e(kx,WQe),e(fn,QQe),e(fn,Rx),e(Rx,HQe),e(fn,UQe),e(E,JQe),e(E,gn),e(gn,ZU),e(ZU,YQe),e(gn,KQe),e(gn,Sx),e(Sx,ZQe),e(gn,eHe),e(gn,Px),e(Px,oHe),e(gn,rHe),e(E,tHe),e(E,hn),e(hn,eJ),e(eJ,aHe),e(hn,sHe),e(hn,$x),e($x,nHe),e(hn,lHe),e(hn,Ix),e(Ix,iHe),e(hn,dHe),e(E,cHe),e(E,un),e(un,oJ),e(oJ,mHe),e(un,fHe),e(un,jx),e(jx,gHe),e(un,hHe),e(un,Dx),e(Dx,uHe),e(un,pHe),e(E,_He),e(E,pn),e(pn,rJ),e(rJ,bHe),e(pn,vHe),e(pn,Nx),e(Nx,THe),e(pn,FHe),e(pn,qx),e(qx,CHe),e(pn,MHe),e(E,EHe),e(E,_n),e(_n,tJ),e(tJ,yHe),e(_n,wHe),e(_n,Ox),e(Ox,AHe),e(_n,LHe),e(_n,Gx),e(Gx,BHe),e(_n,xHe),e(E,kHe),e(E,Xg),e(Xg,aJ),e(aJ,RHe),e(Xg,SHe),e(Xg,Xx),e(Xx,PHe),e(Xg,$He),e(E,IHe),e(E,bn),e(bn,sJ),e(sJ,jHe),e(bn,DHe),e(bn,Vx),e(Vx,NHe),e(bn,qHe),e(bn,zx),e(zx,OHe),e(bn,GHe),e(E,XHe),e(E,Vg),e(Vg,nJ),e(nJ,VHe),e(Vg,zHe),e(Vg,Wx),e(Wx,WHe),e(Vg,QHe),e(E,HHe),e(E,zg),e(zg,lJ),e(lJ,UHe),e(zg,JHe),e(zg,Qx),e(Qx,YHe),e(zg,KHe),e(E,ZHe),e(E,vn),e(vn,iJ),e(iJ,eUe),e(vn,oUe),e(vn,Hx),e(Hx,rUe),e(vn,tUe),e(vn,Ux),e(Ux,aUe),e(vn,sUe),e(E,nUe),e(E,Tn),e(Tn,dJ),e(dJ,lUe),e(Tn,iUe),e(Tn,Jx),e(Jx,dUe),e(Tn,cUe),e(Tn,Yx),e(Yx,mUe),e(Tn,fUe),e(E,gUe),e(E,Wg),e(Wg,cJ),e(cJ,hUe),e(Wg,uUe),e(Wg,Kx),e(Kx,pUe),e(Wg,_Ue),e(E,bUe),e(E,Fn),e(Fn,mJ),e(mJ,vUe),e(Fn,TUe),e(Fn,Zx),e(Zx,FUe),e(Fn,CUe),e(Fn,ek),e(ek,MUe),e(Fn,EUe),e(E,yUe),e(E,Cn),e(Cn,fJ),e(fJ,wUe),e(Cn,AUe),e(Cn,ok),e(ok,LUe),e(Cn,BUe),e(Cn,rk),e(rk,xUe),e(Cn,kUe),e(E,RUe),e(E,Mn),e(Mn,gJ),e(gJ,SUe),e(Mn,PUe),e(Mn,tk),e(tk,$Ue),e(Mn,IUe),e(Mn,ak),e(ak,jUe),e(Mn,DUe),e(E,NUe),e(E,En),e(En,hJ),e(hJ,qUe),e(En,OUe),e(En,sk),e(sk,GUe),e(En,XUe),e(En,nk),e(nk,VUe),e(En,zUe),e(E,WUe),e(E,yn),e(yn,uJ),e(uJ,QUe),e(yn,HUe),e(yn,lk),e(lk,UUe),e(yn,JUe),e(yn,ik),e(ik,YUe),e(yn,KUe),e(E,ZUe),e(E,Qg),e(Qg,pJ),e(pJ,eJe),e(Qg,oJe),e(Qg,dk),e(dk,rJe),e(Qg,tJe),e(E,aJe),e(E,Hg),e(Hg,_J),e(_J,sJe),e(Hg,nJe),e(Hg,ck),e(ck,lJe),e(Hg,iJe),e(E,dJe),e(E,Ug),e(Ug,bJ),e(bJ,cJe),e(Ug,mJe),e(Ug,mk),e(mk,fJe),e(Ug,gJe),e(E,hJe),e(E,Jg),e(Jg,vJ),e(vJ,uJe),e(Jg,pJe),e(Jg,fk),e(fk,_Je),e(Jg,bJe),e(E,vJe),e(E,wn),e(wn,TJ),e(TJ,TJe),e(wn,FJe),e(wn,gk),e(gk,CJe),e(wn,MJe),e(wn,hk),e(hk,EJe),e(wn,yJe),e(E,wJe),e(E,Yg),e(Yg,FJ),e(FJ,AJe),e(Yg,LJe),e(Yg,uk),e(uk,BJe),e(Yg,xJe),e(E,kJe),e(E,An),e(An,CJ),e(CJ,RJe),e(An,SJe),e(An,pk),e(pk,PJe),e(An,$Je),e(An,_k),e(_k,IJe),e(An,jJe),e(E,DJe),e(E,Ln),e(Ln,MJ),e(MJ,NJe),e(Ln,qJe),e(Ln,bk),e(bk,OJe),e(Ln,GJe),e(Ln,vk),e(vk,XJe),e(Ln,VJe),e(E,zJe),e(E,Bn),e(Bn,EJ),e(EJ,WJe),e(Bn,QJe),e(Bn,Tk),e(Tk,HJe),e(Bn,UJe),e(Bn,Fk),e(Fk,JJe),e(Bn,YJe),e(E,KJe),e(E,xn),e(xn,yJ),e(yJ,ZJe),e(xn,eYe),e(xn,Ck),e(Ck,oYe),e(xn,rYe),e(xn,Mk),e(Mk,tYe),e(xn,aYe),e(E,sYe),e(E,kn),e(kn,wJ),e(wJ,nYe),e(kn,lYe),e(kn,Ek),e(Ek,iYe),e(kn,dYe),e(kn,yk),e(yk,cYe),e(kn,mYe),e(E,fYe),e(E,Rn),e(Rn,AJ),e(AJ,gYe),e(Rn,hYe),e(Rn,wk),e(wk,uYe),e(Rn,pYe),e(Rn,Ak),e(Ak,_Ye),e(Rn,bYe),e(E,vYe),e(E,Kg),e(Kg,LJ),e(LJ,TYe),e(Kg,FYe),e(Kg,Lk),e(Lk,CYe),e(Kg,MYe),e(E,EYe),e(E,Zg),e(Zg,BJ),e(BJ,yYe),e(Zg,wYe),e(Zg,Bk),e(Bk,AYe),e(Zg,LYe),e(E,BYe),e(E,Sn),e(Sn,xJ),e(xJ,xYe),e(Sn,kYe),e(Sn,xk),e(xk,RYe),e(Sn,SYe),e(Sn,kk),e(kk,PYe),e(Sn,$Ye),e(E,IYe),e(E,Pn),e(Pn,kJ),e(kJ,jYe),e(Pn,DYe),e(Pn,Rk),e(Rk,NYe),e(Pn,qYe),e(Pn,Sk),e(Sk,OYe),e(Pn,GYe),e(E,XYe),e(E,$n),e($n,RJ),e(RJ,VYe),e($n,zYe),e($n,Pk),e(Pk,WYe),e($n,QYe),e($n,$k),e($k,HYe),e($n,UYe),e(E,JYe),e(E,eh),e(eh,SJ),e(SJ,YYe),e(eh,KYe),e(eh,Ik),e(Ik,ZYe),e(eh,eKe),e(E,oKe),e(E,oh),e(oh,PJ),e(PJ,rKe),e(oh,tKe),e(oh,jk),e(jk,aKe),e(oh,sKe),e(E,nKe),e(E,rh),e(rh,$J),e($J,lKe),e(rh,iKe),e(rh,Dk),e(Dk,dKe),e(rh,cKe),e(E,mKe),e(E,th),e(th,IJ),e(IJ,fKe),e(th,gKe),e(th,Nk),e(Nk,hKe),e(th,uKe),e(E,pKe),e(E,In),e(In,jJ),e(jJ,_Ke),e(In,bKe),e(In,qk),e(qk,vKe),e(In,TKe),e(In,Ok),e(Ok,FKe),e(In,CKe),e(E,MKe),e(E,ah),e(ah,DJ),e(DJ,EKe),e(ah,yKe),e(ah,Gk),e(Gk,wKe),e(ah,AKe),e(E,LKe),e(E,sh),e(sh,NJ),e(NJ,BKe),e(sh,xKe),e(sh,Xk),e(Xk,kKe),e(sh,RKe),e(E,SKe),e(E,jn),e(jn,qJ),e(qJ,PKe),e(jn,$Ke),e(jn,Vk),e(Vk,IKe),e(jn,jKe),e(jn,zk),e(zk,DKe),e(jn,NKe),e(E,qKe),e(E,Dn),e(Dn,OJ),e(OJ,OKe),e(Dn,GKe),e(Dn,Wk),e(Wk,XKe),e(Dn,VKe),e(Dn,Qk),e(Qk,zKe),e(Dn,WKe),e(go,QKe),e(go,GJ),e(GJ,HKe),e(go,UKe),g(my,go,null),e(Qo,JKe),e(Qo,nh),g(fy,nh,null),e(nh,YKe),e(nh,XJ),e(XJ,KKe),b(d,uxe,_),b(d,Hi,_),e(Hi,lh),e(lh,VJ),g(gy,VJ,null),e(Hi,ZKe),e(Hi,zJ),e(zJ,eZe),b(d,pxe,_),b(d,Ho,_),g(hy,Ho,null),e(Ho,oZe),e(Ho,uy),e(uy,rZe),e(uy,Hk),e(Hk,tZe),e(uy,aZe),e(Ho,sZe),e(Ho,py),e(py,nZe),e(py,WJ),e(WJ,lZe),e(py,iZe),e(Ho,dZe),e(Ho,$e),g(_y,$e,null),e($e,cZe),e($e,QJ),e(QJ,mZe),e($e,fZe),e($e,Xa),e(Xa,gZe),e(Xa,HJ),e(HJ,hZe),e(Xa,uZe),e(Xa,UJ),e(UJ,pZe),e(Xa,_Ze),e(Xa,JJ),e(JJ,bZe),e(Xa,vZe),e($e,TZe),e($e,ae),e(ae,ih),e(ih,YJ),e(YJ,FZe),e(ih,CZe),e(ih,Uk),e(Uk,MZe),e(ih,EZe),e(ae,yZe),e(ae,dh),e(dh,KJ),e(KJ,wZe),e(dh,AZe),e(dh,Jk),e(Jk,LZe),e(dh,BZe),e(ae,xZe),e(ae,ch),e(ch,ZJ),e(ZJ,kZe),e(ch,RZe),e(ch,Yk),e(Yk,SZe),e(ch,PZe),e(ae,$Ze),e(ae,mh),e(mh,eY),e(eY,IZe),e(mh,jZe),e(mh,Kk),e(Kk,DZe),e(mh,NZe),e(ae,qZe),e(ae,fh),e(fh,oY),e(oY,OZe),e(fh,GZe),e(fh,Zk),e(Zk,XZe),e(fh,VZe),e(ae,zZe),e(ae,gh),e(gh,rY),e(rY,WZe),e(gh,QZe),e(gh,eR),e(eR,HZe),e(gh,UZe),e(ae,JZe),e(ae,hh),e(hh,tY),e(tY,YZe),e(hh,KZe),e(hh,oR),e(oR,ZZe),e(hh,eeo),e(ae,oeo),e(ae,uh),e(uh,aY),e(aY,reo),e(uh,teo),e(uh,rR),e(rR,aeo),e(uh,seo),e(ae,neo),e(ae,ph),e(ph,sY),e(sY,leo),e(ph,ieo),e(ph,tR),e(tR,deo),e(ph,ceo),e(ae,meo),e(ae,_h),e(_h,nY),e(nY,feo),e(_h,geo),e(_h,aR),e(aR,heo),e(_h,ueo),e(ae,peo),e(ae,bh),e(bh,lY),e(lY,_eo),e(bh,beo),e(bh,sR),e(sR,veo),e(bh,Teo),e(ae,Feo),e(ae,vh),e(vh,iY),e(iY,Ceo),e(vh,Meo),e(vh,nR),e(nR,Eeo),e(vh,yeo),e(ae,weo),e(ae,Th),e(Th,dY),e(dY,Aeo),e(Th,Leo),e(Th,lR),e(lR,Beo),e(Th,xeo),e(ae,keo),e(ae,Fh),e(Fh,cY),e(cY,Reo),e(Fh,Seo),e(Fh,iR),e(iR,Peo),e(Fh,$eo),e(ae,Ieo),e(ae,Ch),e(Ch,mY),e(mY,jeo),e(Ch,Deo),e(Ch,dR),e(dR,Neo),e(Ch,qeo),e(ae,Oeo),e(ae,Mh),e(Mh,fY),e(fY,Geo),e(Mh,Xeo),e(Mh,cR),e(cR,Veo),e(Mh,zeo),e($e,Weo),g(Eh,$e,null),e($e,Qeo),e($e,gY),e(gY,Heo),e($e,Ueo),g(by,$e,null),e(Ho,Jeo),e(Ho,yh),g(vy,yh,null),e(yh,Yeo),e(yh,hY),e(hY,Keo),b(d,_xe,_),b(d,Ui,_),e(Ui,wh),e(wh,uY),g(Ty,uY,null),e(Ui,Zeo),e(Ui,pY),e(pY,eoo),b(d,bxe,_),b(d,Uo,_),g(Fy,Uo,null),e(Uo,ooo),e(Uo,Cy),e(Cy,roo),e(Cy,mR),e(mR,too),e(Cy,aoo),e(Uo,soo),e(Uo,My),e(My,noo),e(My,_Y),e(_Y,loo),e(My,ioo),e(Uo,doo),e(Uo,Ie),g(Ey,Ie,null),e(Ie,coo),e(Ie,bY),e(bY,moo),e(Ie,foo),e(Ie,Ji),e(Ji,goo),e(Ji,vY),e(vY,hoo),e(Ji,uoo),e(Ji,TY),e(TY,poo),e(Ji,_oo),e(Ie,boo),e(Ie,Be),e(Be,Ah),e(Ah,FY),e(FY,voo),e(Ah,Too),e(Ah,fR),e(fR,Foo),e(Ah,Coo),e(Be,Moo),e(Be,Lh),e(Lh,CY),e(CY,Eoo),e(Lh,yoo),e(Lh,gR),e(gR,woo),e(Lh,Aoo),e(Be,Loo),e(Be,Bh),e(Bh,MY),e(MY,Boo),e(Bh,xoo),e(Bh,hR),e(hR,koo),e(Bh,Roo),e(Be,Soo),e(Be,xh),e(xh,EY),e(EY,Poo),e(xh,$oo),e(xh,uR),e(uR,Ioo),e(xh,joo),e(Be,Doo),e(Be,kh),e(kh,yY),e(yY,Noo),e(kh,qoo),e(kh,pR),e(pR,Ooo),e(kh,Goo),e(Be,Xoo),e(Be,Rh),e(Rh,wY),e(wY,Voo),e(Rh,zoo),e(Rh,_R),e(_R,Woo),e(Rh,Qoo),e(Be,Hoo),e(Be,Sh),e(Sh,AY),e(AY,Uoo),e(Sh,Joo),e(Sh,bR),e(bR,Yoo),e(Sh,Koo),e(Be,Zoo),e(Be,Ph),e(Ph,LY),e(LY,ero),e(Ph,oro),e(Ph,vR),e(vR,rro),e(Ph,tro),e(Ie,aro),g($h,Ie,null),e(Ie,sro),e(Ie,BY),e(BY,nro),e(Ie,lro),g(yy,Ie,null),e(Uo,iro),e(Uo,Ih),g(wy,Ih,null),e(Ih,dro),e(Ih,xY),e(xY,cro),b(d,vxe,_),b(d,Yi,_),e(Yi,jh),e(jh,kY),g(Ay,kY,null),e(Yi,mro),e(Yi,RY),e(RY,fro),b(d,Txe,_),b(d,Jo,_),g(Ly,Jo,null),e(Jo,gro),e(Jo,Ki),e(Ki,hro),e(Ki,SY),e(SY,uro),e(Ki,pro),e(Ki,PY),e(PY,_ro),e(Ki,bro),e(Jo,vro),e(Jo,By),e(By,Tro),e(By,$Y),e($Y,Fro),e(By,Cro),e(Jo,Mro),e(Jo,Vr),g(xy,Vr,null),e(Vr,Ero),e(Vr,IY),e(IY,yro),e(Vr,wro),e(Vr,Zi),e(Zi,Aro),e(Zi,jY),e(jY,Lro),e(Zi,Bro),e(Zi,DY),e(DY,xro),e(Zi,kro),e(Vr,Rro),e(Vr,NY),e(NY,Sro),e(Vr,Pro),g(ky,Vr,null),e(Jo,$ro),e(Jo,je),g(Ry,je,null),e(je,Iro),e(je,qY),e(qY,jro),e(je,Dro),e(je,Va),e(Va,Nro),e(Va,OY),e(OY,qro),e(Va,Oro),e(Va,GY),e(GY,Gro),e(Va,Xro),e(Va,XY),e(XY,Vro),e(Va,zro),e(je,Wro),e(je,F),e(F,Dh),e(Dh,VY),e(VY,Qro),e(Dh,Hro),e(Dh,TR),e(TR,Uro),e(Dh,Jro),e(F,Yro),e(F,Nh),e(Nh,zY),e(zY,Kro),e(Nh,Zro),e(Nh,FR),e(FR,eto),e(Nh,oto),e(F,rto),e(F,qh),e(qh,WY),e(WY,tto),e(qh,ato),e(qh,CR),e(CR,sto),e(qh,nto),e(F,lto),e(F,Oh),e(Oh,QY),e(QY,ito),e(Oh,dto),e(Oh,MR),e(MR,cto),e(Oh,mto),e(F,fto),e(F,Gh),e(Gh,HY),e(HY,gto),e(Gh,hto),e(Gh,ER),e(ER,uto),e(Gh,pto),e(F,_to),e(F,Xh),e(Xh,UY),e(UY,bto),e(Xh,vto),e(Xh,yR),e(yR,Tto),e(Xh,Fto),e(F,Cto),e(F,Vh),e(Vh,JY),e(JY,Mto),e(Vh,Eto),e(Vh,wR),e(wR,yto),e(Vh,wto),e(F,Ato),e(F,zh),e(zh,YY),e(YY,Lto),e(zh,Bto),e(zh,AR),e(AR,xto),e(zh,kto),e(F,Rto),e(F,Wh),e(Wh,KY),e(KY,Sto),e(Wh,Pto),e(Wh,LR),e(LR,$to),e(Wh,Ito),e(F,jto),e(F,Qh),e(Qh,ZY),e(ZY,Dto),e(Qh,Nto),e(Qh,BR),e(BR,qto),e(Qh,Oto),e(F,Gto),e(F,Hh),e(Hh,eK),e(eK,Xto),e(Hh,Vto),e(Hh,xR),e(xR,zto),e(Hh,Wto),e(F,Qto),e(F,Uh),e(Uh,oK),e(oK,Hto),e(Uh,Uto),e(Uh,kR),e(kR,Jto),e(Uh,Yto),e(F,Kto),e(F,Jh),e(Jh,rK),e(rK,Zto),e(Jh,eao),e(Jh,RR),e(RR,oao),e(Jh,rao),e(F,tao),e(F,Yh),e(Yh,tK),e(tK,aao),e(Yh,sao),e(Yh,SR),e(SR,nao),e(Yh,lao),e(F,iao),e(F,Kh),e(Kh,aK),e(aK,dao),e(Kh,cao),e(Kh,PR),e(PR,mao),e(Kh,fao),e(F,gao),e(F,Zh),e(Zh,sK),e(sK,hao),e(Zh,uao),e(Zh,$R),e($R,pao),e(Zh,_ao),e(F,bao),e(F,eu),e(eu,nK),e(nK,vao),e(eu,Tao),e(eu,IR),e(IR,Fao),e(eu,Cao),e(F,Mao),e(F,ou),e(ou,lK),e(lK,Eao),e(ou,yao),e(ou,jR),e(jR,wao),e(ou,Aao),e(F,Lao),e(F,ru),e(ru,iK),e(iK,Bao),e(ru,xao),e(ru,DR),e(DR,kao),e(ru,Rao),e(F,Sao),e(F,tu),e(tu,dK),e(dK,Pao),e(tu,$ao),e(tu,NR),e(NR,Iao),e(tu,jao),e(F,Dao),e(F,au),e(au,cK),e(cK,Nao),e(au,qao),e(au,qR),e(qR,Oao),e(au,Gao),e(F,Xao),e(F,su),e(su,mK),e(mK,Vao),e(su,zao),e(su,OR),e(OR,Wao),e(su,Qao),e(F,Hao),e(F,nu),e(nu,fK),e(fK,Uao),e(nu,Jao),e(nu,GR),e(GR,Yao),e(nu,Kao),e(F,Zao),e(F,lu),e(lu,gK),e(gK,eso),e(lu,oso),e(lu,XR),e(XR,rso),e(lu,tso),e(F,aso),e(F,iu),e(iu,hK),e(hK,sso),e(iu,nso),e(iu,VR),e(VR,lso),e(iu,iso),e(F,dso),e(F,du),e(du,uK),e(uK,cso),e(du,mso),e(du,zR),e(zR,fso),e(du,gso),e(F,hso),e(F,cu),e(cu,pK),e(pK,uso),e(cu,pso),e(cu,WR),e(WR,_so),e(cu,bso),e(F,vso),e(F,Nn),e(Nn,_K),e(_K,Tso),e(Nn,Fso),e(Nn,QR),e(QR,Cso),e(Nn,Mso),e(Nn,HR),e(HR,Eso),e(Nn,yso),e(F,wso),e(F,mu),e(mu,bK),e(bK,Aso),e(mu,Lso),e(mu,UR),e(UR,Bso),e(mu,xso),e(F,kso),e(F,fu),e(fu,vK),e(vK,Rso),e(fu,Sso),e(fu,JR),e(JR,Pso),e(fu,$so),e(F,Iso),e(F,gu),e(gu,TK),e(TK,jso),e(gu,Dso),e(gu,YR),e(YR,Nso),e(gu,qso),e(F,Oso),e(F,hu),e(hu,FK),e(FK,Gso),e(hu,Xso),e(hu,KR),e(KR,Vso),e(hu,zso),e(F,Wso),e(F,uu),e(uu,CK),e(CK,Qso),e(uu,Hso),e(uu,ZR),e(ZR,Uso),e(uu,Jso),e(F,Yso),e(F,pu),e(pu,MK),e(MK,Kso),e(pu,Zso),e(pu,eS),e(eS,eno),e(pu,ono),e(F,rno),e(F,_u),e(_u,EK),e(EK,tno),e(_u,ano),e(_u,oS),e(oS,sno),e(_u,nno),e(F,lno),e(F,bu),e(bu,yK),e(yK,ino),e(bu,dno),e(bu,rS),e(rS,cno),e(bu,mno),e(F,fno),e(F,vu),e(vu,wK),e(wK,gno),e(vu,hno),e(vu,tS),e(tS,uno),e(vu,pno),e(F,_no),e(F,Tu),e(Tu,AK),e(AK,bno),e(Tu,vno),e(Tu,aS),e(aS,Tno),e(Tu,Fno),e(F,Cno),e(F,Fu),e(Fu,LK),e(LK,Mno),e(Fu,Eno),e(Fu,sS),e(sS,yno),e(Fu,wno),e(F,Ano),e(F,Cu),e(Cu,BK),e(BK,Lno),e(Cu,Bno),e(Cu,nS),e(nS,xno),e(Cu,kno),e(F,Rno),e(F,Mu),e(Mu,xK),e(xK,Sno),e(Mu,Pno),e(Mu,lS),e(lS,$no),e(Mu,Ino),e(F,jno),e(F,Eu),e(Eu,kK),e(kK,Dno),e(Eu,Nno),e(Eu,iS),e(iS,qno),e(Eu,Ono),e(F,Gno),e(F,yu),e(yu,RK),e(RK,Xno),e(yu,Vno),e(yu,dS),e(dS,zno),e(yu,Wno),e(F,Qno),e(F,wu),e(wu,SK),e(SK,Hno),e(wu,Uno),e(wu,cS),e(cS,Jno),e(wu,Yno),e(F,Kno),e(F,Au),e(Au,PK),e(PK,Zno),e(Au,elo),e(Au,mS),e(mS,olo),e(Au,rlo),e(F,tlo),e(F,Lu),e(Lu,$K),e($K,alo),e(Lu,slo),e(Lu,fS),e(fS,nlo),e(Lu,llo),e(F,ilo),e(F,Bu),e(Bu,IK),e(IK,dlo),e(Bu,clo),e(Bu,gS),e(gS,mlo),e(Bu,flo),e(F,glo),e(F,xu),e(xu,jK),e(jK,hlo),e(xu,ulo),e(xu,hS),e(hS,plo),e(xu,_lo),e(F,blo),e(F,ku),e(ku,DK),e(DK,vlo),e(ku,Tlo),e(ku,uS),e(uS,Flo),e(ku,Clo),e(F,Mlo),e(F,Ru),e(Ru,NK),e(NK,Elo),e(Ru,ylo),e(Ru,pS),e(pS,wlo),e(Ru,Alo),e(F,Llo),e(F,Su),e(Su,qK),e(qK,Blo),e(Su,xlo),e(Su,_S),e(_S,klo),e(Su,Rlo),e(F,Slo),e(F,Pu),e(Pu,OK),e(OK,Plo),e(Pu,$lo),e(Pu,bS),e(bS,Ilo),e(Pu,jlo),e(F,Dlo),e(F,$u),e($u,GK),e(GK,Nlo),e($u,qlo),e($u,vS),e(vS,Olo),e($u,Glo),e(F,Xlo),e(F,Iu),e(Iu,XK),e(XK,Vlo),e(Iu,zlo),e(Iu,TS),e(TS,Wlo),e(Iu,Qlo),e(F,Hlo),e(F,ju),e(ju,VK),e(VK,Ulo),e(ju,Jlo),e(ju,FS),e(FS,Ylo),e(ju,Klo),e(F,Zlo),e(F,Du),e(Du,zK),e(zK,eio),e(Du,oio),e(Du,CS),e(CS,rio),e(Du,tio),e(F,aio),e(F,Nu),e(Nu,WK),e(WK,sio),e(Nu,nio),e(Nu,MS),e(MS,lio),e(Nu,iio),e(F,dio),e(F,qu),e(qu,QK),e(QK,cio),e(qu,mio),e(qu,ES),e(ES,fio),e(qu,gio),e(F,hio),e(F,Ou),e(Ou,HK),e(HK,uio),e(Ou,pio),e(Ou,yS),e(yS,_io),e(Ou,bio),e(F,vio),e(F,Gu),e(Gu,UK),e(UK,Tio),e(Gu,Fio),e(Gu,wS),e(wS,Cio),e(Gu,Mio),e(F,Eio),e(F,Xu),e(Xu,JK),e(JK,yio),e(Xu,wio),e(Xu,AS),e(AS,Aio),e(Xu,Lio),e(F,Bio),e(F,Vu),e(Vu,YK),e(YK,xio),e(Vu,kio),e(Vu,LS),e(LS,Rio),e(Vu,Sio),e(F,Pio),e(F,zu),e(zu,KK),e(KK,$io),e(zu,Iio),e(zu,BS),e(BS,jio),e(zu,Dio),e(F,Nio),e(F,Wu),e(Wu,ZK),e(ZK,qio),e(Wu,Oio),e(Wu,xS),e(xS,Gio),e(Wu,Xio),e(F,Vio),e(F,Qu),e(Qu,eZ),e(eZ,zio),e(Qu,Wio),e(Qu,kS),e(kS,Qio),e(Qu,Hio),e(F,Uio),e(F,Hu),e(Hu,oZ),e(oZ,Jio),e(Hu,Yio),e(Hu,RS),e(RS,Kio),e(Hu,Zio),e(F,edo),e(F,Uu),e(Uu,rZ),e(rZ,odo),e(Uu,rdo),e(Uu,SS),e(SS,tdo),e(Uu,ado),e(F,sdo),e(F,Ju),e(Ju,tZ),e(tZ,ndo),e(Ju,ldo),e(Ju,PS),e(PS,ido),e(Ju,ddo),e(F,cdo),e(F,Yu),e(Yu,aZ),e(aZ,mdo),e(Yu,fdo),e(Yu,$S),e($S,gdo),e(Yu,hdo),e(F,udo),e(F,Ku),e(Ku,sZ),e(sZ,pdo),e(Ku,_do),e(Ku,IS),e(IS,bdo),e(Ku,vdo),e(F,Tdo),e(F,Zu),e(Zu,nZ),e(nZ,Fdo),e(Zu,Cdo),e(Zu,jS),e(jS,Mdo),e(Zu,Edo),e(F,ydo),e(F,ep),e(ep,lZ),e(lZ,wdo),e(ep,Ado),e(ep,DS),e(DS,Ldo),e(ep,Bdo),e(F,xdo),e(F,op),e(op,iZ),e(iZ,kdo),e(op,Rdo),e(op,NS),e(NS,Sdo),e(op,Pdo),e(F,$do),e(F,rp),e(rp,dZ),e(dZ,Ido),e(rp,jdo),e(rp,qS),e(qS,Ddo),e(rp,Ndo),e(F,qdo),e(F,tp),e(tp,cZ),e(cZ,Odo),e(tp,Gdo),e(tp,OS),e(OS,Xdo),e(tp,Vdo),e(F,zdo),e(F,ap),e(ap,mZ),e(mZ,Wdo),e(ap,Qdo),e(ap,GS),e(GS,Hdo),e(ap,Udo),e(F,Jdo),e(F,sp),e(sp,fZ),e(fZ,Ydo),e(sp,Kdo),e(sp,XS),e(XS,Zdo),e(sp,eco),e(F,oco),e(F,np),e(np,gZ),e(gZ,rco),e(np,tco),e(np,VS),e(VS,aco),e(np,sco),e(F,nco),e(F,lp),e(lp,hZ),e(hZ,lco),e(lp,ico),e(lp,zS),e(zS,dco),e(lp,cco),e(F,mco),e(F,ip),e(ip,uZ),e(uZ,fco),e(ip,gco),e(ip,WS),e(WS,hco),e(ip,uco),e(F,pco),e(F,dp),e(dp,pZ),e(pZ,_co),e(dp,bco),e(dp,QS),e(QS,vco),e(dp,Tco),e(F,Fco),e(F,cp),e(cp,_Z),e(_Z,Cco),e(cp,Mco),e(cp,HS),e(HS,Eco),e(cp,yco),e(F,wco),e(F,mp),e(mp,bZ),e(bZ,Aco),e(mp,Lco),e(mp,US),e(US,Bco),e(mp,xco),e(F,kco),e(F,fp),e(fp,vZ),e(vZ,Rco),e(fp,Sco),e(fp,JS),e(JS,Pco),e(fp,$co),e(F,Ico),e(F,gp),e(gp,TZ),e(TZ,jco),e(gp,Dco),e(gp,YS),e(YS,Nco),e(gp,qco),e(F,Oco),e(F,hp),e(hp,FZ),e(FZ,Gco),e(hp,Xco),e(hp,KS),e(KS,Vco),e(hp,zco),e(F,Wco),e(F,up),e(up,CZ),e(CZ,Qco),e(up,Hco),e(up,ZS),e(ZS,Uco),e(up,Jco),e(je,Yco),e(je,pp),e(pp,Kco),e(pp,MZ),e(MZ,Zco),e(pp,emo),e(pp,EZ),e(EZ,omo),e(je,rmo),e(je,yZ),e(yZ,tmo),e(je,amo),g(Sy,je,null),b(d,Fxe,_),b(d,ed,_),e(ed,_p),e(_p,wZ),g(Py,wZ,null),e(ed,smo),e(ed,AZ),e(AZ,nmo),b(d,Cxe,_),b(d,Yo,_),g($y,Yo,null),e(Yo,lmo),e(Yo,od),e(od,imo),e(od,LZ),e(LZ,dmo),e(od,cmo),e(od,BZ),e(BZ,mmo),e(od,fmo),e(Yo,gmo),e(Yo,Iy),e(Iy,hmo),e(Iy,xZ),e(xZ,umo),e(Iy,pmo),e(Yo,_mo),e(Yo,zr),g(jy,zr,null),e(zr,bmo),e(zr,kZ),e(kZ,vmo),e(zr,Tmo),e(zr,rd),e(rd,Fmo),e(rd,RZ),e(RZ,Cmo),e(rd,Mmo),e(rd,SZ),e(SZ,Emo),e(rd,ymo),e(zr,wmo),e(zr,PZ),e(PZ,Amo),e(zr,Lmo),g(Dy,zr,null),e(Yo,Bmo),e(Yo,De),g(Ny,De,null),e(De,xmo),e(De,$Z),e($Z,kmo),e(De,Rmo),e(De,za),e(za,Smo),e(za,IZ),e(IZ,Pmo),e(za,$mo),e(za,jZ),e(jZ,Imo),e(za,jmo),e(za,DZ),e(DZ,Dmo),e(za,Nmo),e(De,qmo),e(De,k),e(k,bp),e(bp,NZ),e(NZ,Omo),e(bp,Gmo),e(bp,eP),e(eP,Xmo),e(bp,Vmo),e(k,zmo),e(k,vp),e(vp,qZ),e(qZ,Wmo),e(vp,Qmo),e(vp,oP),e(oP,Hmo),e(vp,Umo),e(k,Jmo),e(k,Tp),e(Tp,OZ),e(OZ,Ymo),e(Tp,Kmo),e(Tp,rP),e(rP,Zmo),e(Tp,efo),e(k,ofo),e(k,Fp),e(Fp,GZ),e(GZ,rfo),e(Fp,tfo),e(Fp,tP),e(tP,afo),e(Fp,sfo),e(k,nfo),e(k,Cp),e(Cp,XZ),e(XZ,lfo),e(Cp,ifo),e(Cp,aP),e(aP,dfo),e(Cp,cfo),e(k,mfo),e(k,Mp),e(Mp,VZ),e(VZ,ffo),e(Mp,gfo),e(Mp,sP),e(sP,hfo),e(Mp,ufo),e(k,pfo),e(k,Ep),e(Ep,zZ),e(zZ,_fo),e(Ep,bfo),e(Ep,nP),e(nP,vfo),e(Ep,Tfo),e(k,Ffo),e(k,yp),e(yp,WZ),e(WZ,Cfo),e(yp,Mfo),e(yp,lP),e(lP,Efo),e(yp,yfo),e(k,wfo),e(k,wp),e(wp,QZ),e(QZ,Afo),e(wp,Lfo),e(wp,iP),e(iP,Bfo),e(wp,xfo),e(k,kfo),e(k,Ap),e(Ap,HZ),e(HZ,Rfo),e(Ap,Sfo),e(Ap,dP),e(dP,Pfo),e(Ap,$fo),e(k,Ifo),e(k,Lp),e(Lp,UZ),e(UZ,jfo),e(Lp,Dfo),e(Lp,cP),e(cP,Nfo),e(Lp,qfo),e(k,Ofo),e(k,Bp),e(Bp,JZ),e(JZ,Gfo),e(Bp,Xfo),e(Bp,mP),e(mP,Vfo),e(Bp,zfo),e(k,Wfo),e(k,xp),e(xp,YZ),e(YZ,Qfo),e(xp,Hfo),e(xp,fP),e(fP,Ufo),e(xp,Jfo),e(k,Yfo),e(k,kp),e(kp,KZ),e(KZ,Kfo),e(kp,Zfo),e(kp,gP),e(gP,ego),e(kp,ogo),e(k,rgo),e(k,Rp),e(Rp,ZZ),e(ZZ,tgo),e(Rp,ago),e(Rp,hP),e(hP,sgo),e(Rp,ngo),e(k,lgo),e(k,Sp),e(Sp,eee),e(eee,igo),e(Sp,dgo),e(Sp,uP),e(uP,cgo),e(Sp,mgo),e(k,fgo),e(k,Pp),e(Pp,oee),e(oee,ggo),e(Pp,hgo),e(Pp,pP),e(pP,ugo),e(Pp,pgo),e(k,_go),e(k,$p),e($p,ree),e(ree,bgo),e($p,vgo),e($p,_P),e(_P,Tgo),e($p,Fgo),e(k,Cgo),e(k,Ip),e(Ip,tee),e(tee,Mgo),e(Ip,Ego),e(Ip,bP),e(bP,ygo),e(Ip,wgo),e(k,Ago),e(k,jp),e(jp,aee),e(aee,Lgo),e(jp,Bgo),e(jp,vP),e(vP,xgo),e(jp,kgo),e(k,Rgo),e(k,Dp),e(Dp,see),e(see,Sgo),e(Dp,Pgo),e(Dp,TP),e(TP,$go),e(Dp,Igo),e(k,jgo),e(k,Np),e(Np,nee),e(nee,Dgo),e(Np,Ngo),e(Np,FP),e(FP,qgo),e(Np,Ogo),e(k,Ggo),e(k,qp),e(qp,lee),e(lee,Xgo),e(qp,Vgo),e(qp,CP),e(CP,zgo),e(qp,Wgo),e(k,Qgo),e(k,Op),e(Op,iee),e(iee,Hgo),e(Op,Ugo),e(Op,MP),e(MP,Jgo),e(Op,Ygo),e(k,Kgo),e(k,Gp),e(Gp,dee),e(dee,Zgo),e(Gp,eho),e(Gp,EP),e(EP,oho),e(Gp,rho),e(k,tho),e(k,Xp),e(Xp,cee),e(cee,aho),e(Xp,sho),e(Xp,yP),e(yP,nho),e(Xp,lho),e(k,iho),e(k,Vp),e(Vp,mee),e(mee,dho),e(Vp,cho),e(Vp,wP),e(wP,mho),e(Vp,fho),e(k,gho),e(k,zp),e(zp,fee),e(fee,hho),e(zp,uho),e(zp,AP),e(AP,pho),e(zp,_ho),e(k,bho),e(k,Wp),e(Wp,gee),e(gee,vho),e(Wp,Tho),e(Wp,LP),e(LP,Fho),e(Wp,Cho),e(k,Mho),e(k,Qp),e(Qp,hee),e(hee,Eho),e(Qp,yho),e(Qp,BP),e(BP,who),e(Qp,Aho),e(k,Lho),e(k,Hp),e(Hp,uee),e(uee,Bho),e(Hp,xho),e(Hp,xP),e(xP,kho),e(Hp,Rho),e(k,Sho),e(k,Up),e(Up,pee),e(pee,Pho),e(Up,$ho),e(Up,kP),e(kP,Iho),e(Up,jho),e(k,Dho),e(k,Jp),e(Jp,_ee),e(_ee,Nho),e(Jp,qho),e(Jp,RP),e(RP,Oho),e(Jp,Gho),e(k,Xho),e(k,Yp),e(Yp,bee),e(bee,Vho),e(Yp,zho),e(Yp,SP),e(SP,Who),e(Yp,Qho),e(k,Hho),e(k,Kp),e(Kp,vee),e(vee,Uho),e(Kp,Jho),e(Kp,PP),e(PP,Yho),e(Kp,Kho),e(k,Zho),e(k,Zp),e(Zp,Tee),e(Tee,euo),e(Zp,ouo),e(Zp,$P),e($P,ruo),e(Zp,tuo),e(k,auo),e(k,e_),e(e_,Fee),e(Fee,suo),e(e_,nuo),e(e_,IP),e(IP,luo),e(e_,iuo),e(k,duo),e(k,o_),e(o_,Cee),e(Cee,cuo),e(o_,muo),e(o_,jP),e(jP,fuo),e(o_,guo),e(k,huo),e(k,r_),e(r_,Mee),e(Mee,uuo),e(r_,puo),e(r_,DP),e(DP,_uo),e(r_,buo),e(De,vuo),e(De,t_),e(t_,Tuo),e(t_,Eee),e(Eee,Fuo),e(t_,Cuo),e(t_,yee),e(yee,Muo),e(De,Euo),e(De,wee),e(wee,yuo),e(De,wuo),g(qy,De,null),b(d,Mxe,_),b(d,td,_),e(td,a_),e(a_,Aee),g(Oy,Aee,null),e(td,Auo),e(td,Lee),e(Lee,Luo),b(d,Exe,_),b(d,Ko,_),g(Gy,Ko,null),e(Ko,Buo),e(Ko,ad),e(ad,xuo),e(ad,Bee),e(Bee,kuo),e(ad,Ruo),e(ad,xee),e(xee,Suo),e(ad,Puo),e(Ko,$uo),e(Ko,Xy),e(Xy,Iuo),e(Xy,kee),e(kee,juo),e(Xy,Duo),e(Ko,Nuo),e(Ko,Wr),g(Vy,Wr,null),e(Wr,quo),e(Wr,Ree),e(Ree,Ouo),e(Wr,Guo),e(Wr,sd),e(sd,Xuo),e(sd,See),e(See,Vuo),e(sd,zuo),e(sd,Pee),e(Pee,Wuo),e(sd,Quo),e(Wr,Huo),e(Wr,$ee),e($ee,Uuo),e(Wr,Juo),g(zy,Wr,null),e(Ko,Yuo),e(Ko,Ne),g(Wy,Ne,null),e(Ne,Kuo),e(Ne,Iee),e(Iee,Zuo),e(Ne,epo),e(Ne,Wa),e(Wa,opo),e(Wa,jee),e(jee,rpo),e(Wa,tpo),e(Wa,Dee),e(Dee,apo),e(Wa,spo),e(Wa,Nee),e(Nee,npo),e(Wa,lpo),e(Ne,ipo),e(Ne,$),e($,s_),e(s_,qee),e(qee,dpo),e(s_,cpo),e(s_,NP),e(NP,mpo),e(s_,fpo),e($,gpo),e($,n_),e(n_,Oee),e(Oee,hpo),e(n_,upo),e(n_,qP),e(qP,ppo),e(n_,_po),e($,bpo),e($,l_),e(l_,Gee),e(Gee,vpo),e(l_,Tpo),e(l_,OP),e(OP,Fpo),e(l_,Cpo),e($,Mpo),e($,i_),e(i_,Xee),e(Xee,Epo),e(i_,ypo),e(i_,GP),e(GP,wpo),e(i_,Apo),e($,Lpo),e($,d_),e(d_,Vee),e(Vee,Bpo),e(d_,xpo),e(d_,XP),e(XP,kpo),e(d_,Rpo),e($,Spo),e($,c_),e(c_,zee),e(zee,Ppo),e(c_,$po),e(c_,VP),e(VP,Ipo),e(c_,jpo),e($,Dpo),e($,m_),e(m_,Wee),e(Wee,Npo),e(m_,qpo),e(m_,zP),e(zP,Opo),e(m_,Gpo),e($,Xpo),e($,f_),e(f_,Qee),e(Qee,Vpo),e(f_,zpo),e(f_,WP),e(WP,Wpo),e(f_,Qpo),e($,Hpo),e($,g_),e(g_,Hee),e(Hee,Upo),e(g_,Jpo),e(g_,QP),e(QP,Ypo),e(g_,Kpo),e($,Zpo),e($,h_),e(h_,Uee),e(Uee,e_o),e(h_,o_o),e(h_,HP),e(HP,r_o),e(h_,t_o),e($,a_o),e($,u_),e(u_,Jee),e(Jee,s_o),e(u_,n_o),e(u_,UP),e(UP,l_o),e(u_,i_o),e($,d_o),e($,p_),e(p_,Yee),e(Yee,c_o),e(p_,m_o),e(p_,JP),e(JP,f_o),e(p_,g_o),e($,h_o),e($,__),e(__,Kee),e(Kee,u_o),e(__,p_o),e(__,YP),e(YP,__o),e(__,b_o),e($,v_o),e($,b_),e(b_,Zee),e(Zee,T_o),e(b_,F_o),e(b_,KP),e(KP,C_o),e(b_,M_o),e($,E_o),e($,v_),e(v_,eoe),e(eoe,y_o),e(v_,w_o),e(v_,ZP),e(ZP,A_o),e(v_,L_o),e($,B_o),e($,T_),e(T_,ooe),e(ooe,x_o),e(T_,k_o),e(T_,e$),e(e$,R_o),e(T_,S_o),e($,P_o),e($,F_),e(F_,roe),e(roe,$_o),e(F_,I_o),e(F_,o$),e(o$,j_o),e(F_,D_o),e($,N_o),e($,C_),e(C_,toe),e(toe,q_o),e(C_,O_o),e(C_,r$),e(r$,G_o),e(C_,X_o),e($,V_o),e($,M_),e(M_,aoe),e(aoe,z_o),e(M_,W_o),e(M_,t$),e(t$,Q_o),e(M_,H_o),e($,U_o),e($,E_),e(E_,soe),e(soe,J_o),e(E_,Y_o),e(E_,a$),e(a$,K_o),e(E_,Z_o),e($,ebo),e($,y_),e(y_,noe),e(noe,obo),e(y_,rbo),e(y_,s$),e(s$,tbo),e(y_,abo),e($,sbo),e($,w_),e(w_,loe),e(loe,nbo),e(w_,lbo),e(w_,n$),e(n$,ibo),e(w_,dbo),e($,cbo),e($,A_),e(A_,ioe),e(ioe,mbo),e(A_,fbo),e(A_,l$),e(l$,gbo),e(A_,hbo),e($,ubo),e($,L_),e(L_,doe),e(doe,pbo),e(L_,_bo),e(L_,i$),e(i$,bbo),e(L_,vbo),e($,Tbo),e($,B_),e(B_,coe),e(coe,Fbo),e(B_,Cbo),e(B_,d$),e(d$,Mbo),e(B_,Ebo),e($,ybo),e($,x_),e(x_,moe),e(moe,wbo),e(x_,Abo),e(x_,c$),e(c$,Lbo),e(x_,Bbo),e($,xbo),e($,k_),e(k_,foe),e(foe,kbo),e(k_,Rbo),e(k_,m$),e(m$,Sbo),e(k_,Pbo),e($,$bo),e($,R_),e(R_,goe),e(goe,Ibo),e(R_,jbo),e(R_,f$),e(f$,Dbo),e(R_,Nbo),e($,qbo),e($,S_),e(S_,hoe),e(hoe,Obo),e(S_,Gbo),e(S_,g$),e(g$,Xbo),e(S_,Vbo),e($,zbo),e($,P_),e(P_,uoe),e(uoe,Wbo),e(P_,Qbo),e(P_,h$),e(h$,Hbo),e(P_,Ubo),e($,Jbo),e($,$_),e($_,poe),e(poe,Ybo),e($_,Kbo),e($_,u$),e(u$,Zbo),e($_,e2o),e($,o2o),e($,I_),e(I_,_oe),e(_oe,r2o),e(I_,t2o),e(I_,p$),e(p$,a2o),e(I_,s2o),e($,n2o),e($,j_),e(j_,boe),e(boe,l2o),e(j_,i2o),e(j_,_$),e(_$,d2o),e(j_,c2o),e($,m2o),e($,D_),e(D_,voe),e(voe,f2o),e(D_,g2o),e(D_,b$),e(b$,h2o),e(D_,u2o),e($,p2o),e($,N_),e(N_,Toe),e(Toe,_2o),e(N_,b2o),e(N_,v$),e(v$,v2o),e(N_,T2o),e(Ne,F2o),e(Ne,q_),e(q_,C2o),e(q_,Foe),e(Foe,M2o),e(q_,E2o),e(q_,Coe),e(Coe,y2o),e(Ne,w2o),e(Ne,Moe),e(Moe,A2o),e(Ne,L2o),g(Qy,Ne,null),b(d,yxe,_),b(d,nd,_),e(nd,O_),e(O_,Eoe),g(Hy,Eoe,null),e(nd,B2o),e(nd,yoe),e(yoe,x2o),b(d,wxe,_),b(d,Zo,_),g(Uy,Zo,null),e(Zo,k2o),e(Zo,ld),e(ld,R2o),e(ld,woe),e(woe,S2o),e(ld,P2o),e(ld,Aoe),e(Aoe,$2o),e(ld,I2o),e(Zo,j2o),e(Zo,Jy),e(Jy,D2o),e(Jy,Loe),e(Loe,N2o),e(Jy,q2o),e(Zo,O2o),e(Zo,Qr),g(Yy,Qr,null),e(Qr,G2o),e(Qr,Boe),e(Boe,X2o),e(Qr,V2o),e(Qr,id),e(id,z2o),e(id,xoe),e(xoe,W2o),e(id,Q2o),e(id,koe),e(koe,H2o),e(id,U2o),e(Qr,J2o),e(Qr,Roe),e(Roe,Y2o),e(Qr,K2o),g(Ky,Qr,null),e(Zo,Z2o),e(Zo,qe),g(Zy,qe,null),e(qe,evo),e(qe,Soe),e(Soe,ovo),e(qe,rvo),e(qe,Qa),e(Qa,tvo),e(Qa,Poe),e(Poe,avo),e(Qa,svo),e(Qa,$oe),e($oe,nvo),e(Qa,lvo),e(Qa,Ioe),e(Ioe,ivo),e(Qa,dvo),e(qe,cvo),e(qe,I),e(I,G_),e(G_,joe),e(joe,mvo),e(G_,fvo),e(G_,T$),e(T$,gvo),e(G_,hvo),e(I,uvo),e(I,X_),e(X_,Doe),e(Doe,pvo),e(X_,_vo),e(X_,F$),e(F$,bvo),e(X_,vvo),e(I,Tvo),e(I,V_),e(V_,Noe),e(Noe,Fvo),e(V_,Cvo),e(V_,C$),e(C$,Mvo),e(V_,Evo),e(I,yvo),e(I,z_),e(z_,qoe),e(qoe,wvo),e(z_,Avo),e(z_,M$),e(M$,Lvo),e(z_,Bvo),e(I,xvo),e(I,W_),e(W_,Ooe),e(Ooe,kvo),e(W_,Rvo),e(W_,E$),e(E$,Svo),e(W_,Pvo),e(I,$vo),e(I,Q_),e(Q_,Goe),e(Goe,Ivo),e(Q_,jvo),e(Q_,y$),e(y$,Dvo),e(Q_,Nvo),e(I,qvo),e(I,H_),e(H_,Xoe),e(Xoe,Ovo),e(H_,Gvo),e(H_,w$),e(w$,Xvo),e(H_,Vvo),e(I,zvo),e(I,U_),e(U_,Voe),e(Voe,Wvo),e(U_,Qvo),e(U_,A$),e(A$,Hvo),e(U_,Uvo),e(I,Jvo),e(I,J_),e(J_,zoe),e(zoe,Yvo),e(J_,Kvo),e(J_,L$),e(L$,Zvo),e(J_,eTo),e(I,oTo),e(I,Y_),e(Y_,Woe),e(Woe,rTo),e(Y_,tTo),e(Y_,B$),e(B$,aTo),e(Y_,sTo),e(I,nTo),e(I,K_),e(K_,Qoe),e(Qoe,lTo),e(K_,iTo),e(K_,x$),e(x$,dTo),e(K_,cTo),e(I,mTo),e(I,Z_),e(Z_,Hoe),e(Hoe,fTo),e(Z_,gTo),e(Z_,k$),e(k$,hTo),e(Z_,uTo),e(I,pTo),e(I,eb),e(eb,Uoe),e(Uoe,_To),e(eb,bTo),e(eb,R$),e(R$,vTo),e(eb,TTo),e(I,FTo),e(I,ob),e(ob,Joe),e(Joe,CTo),e(ob,MTo),e(ob,S$),e(S$,ETo),e(ob,yTo),e(I,wTo),e(I,rb),e(rb,Yoe),e(Yoe,ATo),e(rb,LTo),e(rb,P$),e(P$,BTo),e(rb,xTo),e(I,kTo),e(I,tb),e(tb,Koe),e(Koe,RTo),e(tb,STo),e(tb,$$),e($$,PTo),e(tb,$To),e(I,ITo),e(I,ab),e(ab,Zoe),e(Zoe,jTo),e(ab,DTo),e(ab,I$),e(I$,NTo),e(ab,qTo),e(I,OTo),e(I,sb),e(sb,ere),e(ere,GTo),e(sb,XTo),e(sb,j$),e(j$,VTo),e(sb,zTo),e(I,WTo),e(I,nb),e(nb,ore),e(ore,QTo),e(nb,HTo),e(nb,D$),e(D$,UTo),e(nb,JTo),e(I,YTo),e(I,lb),e(lb,rre),e(rre,KTo),e(lb,ZTo),e(lb,N$),e(N$,e1o),e(lb,o1o),e(I,r1o),e(I,ib),e(ib,tre),e(tre,t1o),e(ib,a1o),e(ib,q$),e(q$,s1o),e(ib,n1o),e(I,l1o),e(I,db),e(db,are),e(are,i1o),e(db,d1o),e(db,O$),e(O$,c1o),e(db,m1o),e(I,f1o),e(I,cb),e(cb,sre),e(sre,g1o),e(cb,h1o),e(cb,G$),e(G$,u1o),e(cb,p1o),e(I,_1o),e(I,mb),e(mb,nre),e(nre,b1o),e(mb,v1o),e(mb,X$),e(X$,T1o),e(mb,F1o),e(I,C1o),e(I,fb),e(fb,lre),e(lre,M1o),e(fb,E1o),e(fb,V$),e(V$,y1o),e(fb,w1o),e(I,A1o),e(I,gb),e(gb,ire),e(ire,L1o),e(gb,B1o),e(gb,z$),e(z$,x1o),e(gb,k1o),e(I,R1o),e(I,hb),e(hb,dre),e(dre,S1o),e(hb,P1o),e(hb,W$),e(W$,$1o),e(hb,I1o),e(I,j1o),e(I,ub),e(ub,cre),e(cre,D1o),e(ub,N1o),e(ub,Q$),e(Q$,q1o),e(ub,O1o),e(I,G1o),e(I,pb),e(pb,mre),e(mre,X1o),e(pb,V1o),e(pb,H$),e(H$,z1o),e(pb,W1o),e(I,Q1o),e(I,_b),e(_b,fre),e(fre,H1o),e(_b,U1o),e(_b,U$),e(U$,J1o),e(_b,Y1o),e(I,K1o),e(I,bb),e(bb,gre),e(gre,Z1o),e(bb,eFo),e(bb,hre),e(hre,oFo),e(bb,rFo),e(I,tFo),e(I,vb),e(vb,ure),e(ure,aFo),e(vb,sFo),e(vb,J$),e(J$,nFo),e(vb,lFo),e(I,iFo),e(I,Tb),e(Tb,pre),e(pre,dFo),e(Tb,cFo),e(Tb,Y$),e(Y$,mFo),e(Tb,fFo),e(I,gFo),e(I,Fb),e(Fb,_re),e(_re,hFo),e(Fb,uFo),e(Fb,K$),e(K$,pFo),e(Fb,_Fo),e(I,bFo),e(I,Cb),e(Cb,bre),e(bre,vFo),e(Cb,TFo),e(Cb,Z$),e(Z$,FFo),e(Cb,CFo),e(qe,MFo),e(qe,Mb),e(Mb,EFo),e(Mb,vre),e(vre,yFo),e(Mb,wFo),e(Mb,Tre),e(Tre,AFo),e(qe,LFo),e(qe,Fre),e(Fre,BFo),e(qe,xFo),g(ew,qe,null),b(d,Axe,_),b(d,dd,_),e(dd,Eb),e(Eb,Cre),g(ow,Cre,null),e(dd,kFo),e(dd,Mre),e(Mre,RFo),b(d,Lxe,_),b(d,er,_),g(rw,er,null),e(er,SFo),e(er,cd),e(cd,PFo),e(cd,Ere),e(Ere,$Fo),e(cd,IFo),e(cd,yre),e(yre,jFo),e(cd,DFo),e(er,NFo),e(er,tw),e(tw,qFo),e(tw,wre),e(wre,OFo),e(tw,GFo),e(er,XFo),e(er,Hr),g(aw,Hr,null),e(Hr,VFo),e(Hr,Are),e(Are,zFo),e(Hr,WFo),e(Hr,md),e(md,QFo),e(md,Lre),e(Lre,HFo),e(md,UFo),e(md,Bre),e(Bre,JFo),e(md,YFo),e(Hr,KFo),e(Hr,xre),e(xre,ZFo),e(Hr,eCo),g(sw,Hr,null),e(er,oCo),e(er,Oe),g(nw,Oe,null),e(Oe,rCo),e(Oe,kre),e(kre,tCo),e(Oe,aCo),e(Oe,Ha),e(Ha,sCo),e(Ha,Rre),e(Rre,nCo),e(Ha,lCo),e(Ha,Sre),e(Sre,iCo),e(Ha,dCo),e(Ha,Pre),e(Pre,cCo),e(Ha,mCo),e(Oe,fCo),e(Oe,se),e(se,yb),e(yb,$re),e($re,gCo),e(yb,hCo),e(yb,eI),e(eI,uCo),e(yb,pCo),e(se,_Co),e(se,wb),e(wb,Ire),e(Ire,bCo),e(wb,vCo),e(wb,oI),e(oI,TCo),e(wb,FCo),e(se,CCo),e(se,Ab),e(Ab,jre),e(jre,MCo),e(Ab,ECo),e(Ab,rI),e(rI,yCo),e(Ab,wCo),e(se,ACo),e(se,Lb),e(Lb,Dre),e(Dre,LCo),e(Lb,BCo),e(Lb,tI),e(tI,xCo),e(Lb,kCo),e(se,RCo),e(se,Bb),e(Bb,Nre),e(Nre,SCo),e(Bb,PCo),e(Bb,aI),e(aI,$Co),e(Bb,ICo),e(se,jCo),e(se,xb),e(xb,qre),e(qre,DCo),e(xb,NCo),e(xb,sI),e(sI,qCo),e(xb,OCo),e(se,GCo),e(se,kb),e(kb,Ore),e(Ore,XCo),e(kb,VCo),e(kb,nI),e(nI,zCo),e(kb,WCo),e(se,QCo),e(se,Rb),e(Rb,Gre),e(Gre,HCo),e(Rb,UCo),e(Rb,lI),e(lI,JCo),e(Rb,YCo),e(se,KCo),e(se,Sb),e(Sb,Xre),e(Xre,ZCo),e(Sb,eMo),e(Sb,iI),e(iI,oMo),e(Sb,rMo),e(se,tMo),e(se,Pb),e(Pb,Vre),e(Vre,aMo),e(Pb,sMo),e(Pb,dI),e(dI,nMo),e(Pb,lMo),e(se,iMo),e(se,$b),e($b,zre),e(zre,dMo),e($b,cMo),e($b,cI),e(cI,mMo),e($b,fMo),e(se,gMo),e(se,Ib),e(Ib,Wre),e(Wre,hMo),e(Ib,uMo),e(Ib,mI),e(mI,pMo),e(Ib,_Mo),e(se,bMo),e(se,jb),e(jb,Qre),e(Qre,vMo),e(jb,TMo),e(jb,fI),e(fI,FMo),e(jb,CMo),e(se,MMo),e(se,Db),e(Db,Hre),e(Hre,EMo),e(Db,yMo),e(Db,gI),e(gI,wMo),e(Db,AMo),e(se,LMo),e(se,Nb),e(Nb,Ure),e(Ure,BMo),e(Nb,xMo),e(Nb,hI),e(hI,kMo),e(Nb,RMo),e(se,SMo),e(se,qb),e(qb,Jre),e(Jre,PMo),e(qb,$Mo),e(qb,uI),e(uI,IMo),e(qb,jMo),e(Oe,DMo),e(Oe,Ob),e(Ob,NMo),e(Ob,Yre),e(Yre,qMo),e(Ob,OMo),e(Ob,Kre),e(Kre,GMo),e(Oe,XMo),e(Oe,Zre),e(Zre,VMo),e(Oe,zMo),g(lw,Oe,null),b(d,Bxe,_),b(d,fd,_),e(fd,Gb),e(Gb,ete),g(iw,ete,null),e(fd,WMo),e(fd,ote),e(ote,QMo),b(d,xxe,_),b(d,or,_),g(dw,or,null),e(or,HMo),e(or,gd),e(gd,UMo),e(gd,rte),e(rte,JMo),e(gd,YMo),e(gd,tte),e(tte,KMo),e(gd,ZMo),e(or,e4o),e(or,cw),e(cw,o4o),e(cw,ate),e(ate,r4o),e(cw,t4o),e(or,a4o),e(or,Ur),g(mw,Ur,null),e(Ur,s4o),e(Ur,ste),e(ste,n4o),e(Ur,l4o),e(Ur,hd),e(hd,i4o),e(hd,nte),e(nte,d4o),e(hd,c4o),e(hd,lte),e(lte,m4o),e(hd,f4o),e(Ur,g4o),e(Ur,ite),e(ite,h4o),e(Ur,u4o),g(fw,Ur,null),e(or,p4o),e(or,Ge),g(gw,Ge,null),e(Ge,_4o),e(Ge,dte),e(dte,b4o),e(Ge,v4o),e(Ge,Ua),e(Ua,T4o),e(Ua,cte),e(cte,F4o),e(Ua,C4o),e(Ua,mte),e(mte,M4o),e(Ua,E4o),e(Ua,fte),e(fte,y4o),e(Ua,w4o),e(Ge,A4o),e(Ge,A),e(A,Xb),e(Xb,gte),e(gte,L4o),e(Xb,B4o),e(Xb,pI),e(pI,x4o),e(Xb,k4o),e(A,R4o),e(A,Vb),e(Vb,hte),e(hte,S4o),e(Vb,P4o),e(Vb,_I),e(_I,$4o),e(Vb,I4o),e(A,j4o),e(A,zb),e(zb,ute),e(ute,D4o),e(zb,N4o),e(zb,bI),e(bI,q4o),e(zb,O4o),e(A,G4o),e(A,Wb),e(Wb,pte),e(pte,X4o),e(Wb,V4o),e(Wb,vI),e(vI,z4o),e(Wb,W4o),e(A,Q4o),e(A,Qb),e(Qb,_te),e(_te,H4o),e(Qb,U4o),e(Qb,TI),e(TI,J4o),e(Qb,Y4o),e(A,K4o),e(A,Hb),e(Hb,bte),e(bte,Z4o),e(Hb,eEo),e(Hb,FI),e(FI,oEo),e(Hb,rEo),e(A,tEo),e(A,Ub),e(Ub,vte),e(vte,aEo),e(Ub,sEo),e(Ub,CI),e(CI,nEo),e(Ub,lEo),e(A,iEo),e(A,Jb),e(Jb,Tte),e(Tte,dEo),e(Jb,cEo),e(Jb,MI),e(MI,mEo),e(Jb,fEo),e(A,gEo),e(A,Yb),e(Yb,Fte),e(Fte,hEo),e(Yb,uEo),e(Yb,EI),e(EI,pEo),e(Yb,_Eo),e(A,bEo),e(A,Kb),e(Kb,Cte),e(Cte,vEo),e(Kb,TEo),e(Kb,yI),e(yI,FEo),e(Kb,CEo),e(A,MEo),e(A,Zb),e(Zb,Mte),e(Mte,EEo),e(Zb,yEo),e(Zb,wI),e(wI,wEo),e(Zb,AEo),e(A,LEo),e(A,e2),e(e2,Ete),e(Ete,BEo),e(e2,xEo),e(e2,AI),e(AI,kEo),e(e2,REo),e(A,SEo),e(A,o2),e(o2,yte),e(yte,PEo),e(o2,$Eo),e(o2,LI),e(LI,IEo),e(o2,jEo),e(A,DEo),e(A,r2),e(r2,wte),e(wte,NEo),e(r2,qEo),e(r2,BI),e(BI,OEo),e(r2,GEo),e(A,XEo),e(A,t2),e(t2,Ate),e(Ate,VEo),e(t2,zEo),e(t2,xI),e(xI,WEo),e(t2,QEo),e(A,HEo),e(A,a2),e(a2,Lte),e(Lte,UEo),e(a2,JEo),e(a2,kI),e(kI,YEo),e(a2,KEo),e(A,ZEo),e(A,s2),e(s2,Bte),e(Bte,e3o),e(s2,o3o),e(s2,RI),e(RI,r3o),e(s2,t3o),e(A,a3o),e(A,n2),e(n2,xte),e(xte,s3o),e(n2,n3o),e(n2,SI),e(SI,l3o),e(n2,i3o),e(A,d3o),e(A,l2),e(l2,kte),e(kte,c3o),e(l2,m3o),e(l2,PI),e(PI,f3o),e(l2,g3o),e(A,h3o),e(A,i2),e(i2,Rte),e(Rte,u3o),e(i2,p3o),e(i2,$I),e($I,_3o),e(i2,b3o),e(A,v3o),e(A,d2),e(d2,Ste),e(Ste,T3o),e(d2,F3o),e(d2,II),e(II,C3o),e(d2,M3o),e(A,E3o),e(A,c2),e(c2,Pte),e(Pte,y3o),e(c2,w3o),e(c2,jI),e(jI,A3o),e(c2,L3o),e(A,B3o),e(A,m2),e(m2,$te),e($te,x3o),e(m2,k3o),e(m2,DI),e(DI,R3o),e(m2,S3o),e(A,P3o),e(A,f2),e(f2,Ite),e(Ite,$3o),e(f2,I3o),e(f2,NI),e(NI,j3o),e(f2,D3o),e(A,N3o),e(A,g2),e(g2,jte),e(jte,q3o),e(g2,O3o),e(g2,qI),e(qI,G3o),e(g2,X3o),e(A,V3o),e(A,h2),e(h2,Dte),e(Dte,z3o),e(h2,W3o),e(h2,OI),e(OI,Q3o),e(h2,H3o),e(A,U3o),e(A,u2),e(u2,Nte),e(Nte,J3o),e(u2,Y3o),e(u2,GI),e(GI,K3o),e(u2,Z3o),e(A,e5o),e(A,p2),e(p2,qte),e(qte,o5o),e(p2,r5o),e(p2,XI),e(XI,t5o),e(p2,a5o),e(A,s5o),e(A,_2),e(_2,Ote),e(Ote,n5o),e(_2,l5o),e(_2,VI),e(VI,i5o),e(_2,d5o),e(A,c5o),e(A,b2),e(b2,Gte),e(Gte,m5o),e(b2,f5o),e(b2,zI),e(zI,g5o),e(b2,h5o),e(A,u5o),e(A,v2),e(v2,Xte),e(Xte,p5o),e(v2,_5o),e(v2,WI),e(WI,b5o),e(v2,v5o),e(A,T5o),e(A,T2),e(T2,Vte),e(Vte,F5o),e(T2,C5o),e(T2,QI),e(QI,M5o),e(T2,E5o),e(A,y5o),e(A,F2),e(F2,zte),e(zte,w5o),e(F2,A5o),e(F2,HI),e(HI,L5o),e(F2,B5o),e(A,x5o),e(A,C2),e(C2,Wte),e(Wte,k5o),e(C2,R5o),e(C2,UI),e(UI,S5o),e(C2,P5o),e(A,$5o),e(A,M2),e(M2,Qte),e(Qte,I5o),e(M2,j5o),e(M2,JI),e(JI,D5o),e(M2,N5o),e(A,q5o),e(A,E2),e(E2,Hte),e(Hte,O5o),e(E2,G5o),e(E2,YI),e(YI,X5o),e(E2,V5o),e(A,z5o),e(A,y2),e(y2,Ute),e(Ute,W5o),e(y2,Q5o),e(y2,KI),e(KI,H5o),e(y2,U5o),e(A,J5o),e(A,w2),e(w2,Jte),e(Jte,Y5o),e(w2,K5o),e(w2,ZI),e(ZI,Z5o),e(w2,eyo),e(A,oyo),e(A,A2),e(A2,Yte),e(Yte,ryo),e(A2,tyo),e(A2,ej),e(ej,ayo),e(A2,syo),e(A,nyo),e(A,L2),e(L2,Kte),e(Kte,lyo),e(L2,iyo),e(L2,oj),e(oj,dyo),e(L2,cyo),e(A,myo),e(A,B2),e(B2,Zte),e(Zte,fyo),e(B2,gyo),e(B2,rj),e(rj,hyo),e(B2,uyo),e(A,pyo),e(A,x2),e(x2,eae),e(eae,_yo),e(x2,byo),e(x2,tj),e(tj,vyo),e(x2,Tyo),e(A,Fyo),e(A,k2),e(k2,oae),e(oae,Cyo),e(k2,Myo),e(k2,aj),e(aj,Eyo),e(k2,yyo),e(A,wyo),e(A,R2),e(R2,rae),e(rae,Ayo),e(R2,Lyo),e(R2,sj),e(sj,Byo),e(R2,xyo),e(A,kyo),e(A,S2),e(S2,tae),e(tae,Ryo),e(S2,Syo),e(S2,nj),e(nj,Pyo),e(S2,$yo),e(A,Iyo),e(A,P2),e(P2,aae),e(aae,jyo),e(P2,Dyo),e(P2,lj),e(lj,Nyo),e(P2,qyo),e(Ge,Oyo),e(Ge,$2),e($2,Gyo),e($2,sae),e(sae,Xyo),e($2,Vyo),e($2,nae),e(nae,zyo),e(Ge,Wyo),e(Ge,lae),e(lae,Qyo),e(Ge,Hyo),g(hw,Ge,null),b(d,kxe,_),b(d,ud,_),e(ud,I2),e(I2,iae),g(uw,iae,null),e(ud,Uyo),e(ud,dae),e(dae,Jyo),b(d,Rxe,_),b(d,rr,_),g(pw,rr,null),e(rr,Yyo),e(rr,pd),e(pd,Kyo),e(pd,cae),e(cae,Zyo),e(pd,ewo),e(pd,mae),e(mae,owo),e(pd,rwo),e(rr,two),e(rr,_w),e(_w,awo),e(_w,fae),e(fae,swo),e(_w,nwo),e(rr,lwo),e(rr,Jr),g(bw,Jr,null),e(Jr,iwo),e(Jr,gae),e(gae,dwo),e(Jr,cwo),e(Jr,_d),e(_d,mwo),e(_d,hae),e(hae,fwo),e(_d,gwo),e(_d,uae),e(uae,hwo),e(_d,uwo),e(Jr,pwo),e(Jr,pae),e(pae,_wo),e(Jr,bwo),g(vw,Jr,null),e(rr,vwo),e(rr,Xe),g(Tw,Xe,null),e(Xe,Two),e(Xe,_ae),e(_ae,Fwo),e(Xe,Cwo),e(Xe,Ja),e(Ja,Mwo),e(Ja,bae),e(bae,Ewo),e(Ja,ywo),e(Ja,vae),e(vae,wwo),e(Ja,Awo),e(Ja,Tae),e(Tae,Lwo),e(Ja,Bwo),e(Xe,xwo),e(Xe,O),e(O,j2),e(j2,Fae),e(Fae,kwo),e(j2,Rwo),e(j2,ij),e(ij,Swo),e(j2,Pwo),e(O,$wo),e(O,D2),e(D2,Cae),e(Cae,Iwo),e(D2,jwo),e(D2,dj),e(dj,Dwo),e(D2,Nwo),e(O,qwo),e(O,N2),e(N2,Mae),e(Mae,Owo),e(N2,Gwo),e(N2,cj),e(cj,Xwo),e(N2,Vwo),e(O,zwo),e(O,q2),e(q2,Eae),e(Eae,Wwo),e(q2,Qwo),e(q2,mj),e(mj,Hwo),e(q2,Uwo),e(O,Jwo),e(O,O2),e(O2,yae),e(yae,Ywo),e(O2,Kwo),e(O2,fj),e(fj,Zwo),e(O2,e6o),e(O,o6o),e(O,G2),e(G2,wae),e(wae,r6o),e(G2,t6o),e(G2,gj),e(gj,a6o),e(G2,s6o),e(O,n6o),e(O,X2),e(X2,Aae),e(Aae,l6o),e(X2,i6o),e(X2,hj),e(hj,d6o),e(X2,c6o),e(O,m6o),e(O,V2),e(V2,Lae),e(Lae,f6o),e(V2,g6o),e(V2,uj),e(uj,h6o),e(V2,u6o),e(O,p6o),e(O,z2),e(z2,Bae),e(Bae,_6o),e(z2,b6o),e(z2,pj),e(pj,v6o),e(z2,T6o),e(O,F6o),e(O,W2),e(W2,xae),e(xae,C6o),e(W2,M6o),e(W2,_j),e(_j,E6o),e(W2,y6o),e(O,w6o),e(O,Q2),e(Q2,kae),e(kae,A6o),e(Q2,L6o),e(Q2,bj),e(bj,B6o),e(Q2,x6o),e(O,k6o),e(O,H2),e(H2,Rae),e(Rae,R6o),e(H2,S6o),e(H2,vj),e(vj,P6o),e(H2,$6o),e(O,I6o),e(O,U2),e(U2,Sae),e(Sae,j6o),e(U2,D6o),e(U2,Tj),e(Tj,N6o),e(U2,q6o),e(O,O6o),e(O,J2),e(J2,Pae),e(Pae,G6o),e(J2,X6o),e(J2,Fj),e(Fj,V6o),e(J2,z6o),e(O,W6o),e(O,Y2),e(Y2,$ae),e($ae,Q6o),e(Y2,H6o),e(Y2,Cj),e(Cj,U6o),e(Y2,J6o),e(O,Y6o),e(O,K2),e(K2,Iae),e(Iae,K6o),e(K2,Z6o),e(K2,Mj),e(Mj,eAo),e(K2,oAo),e(O,rAo),e(O,Z2),e(Z2,jae),e(jae,tAo),e(Z2,aAo),e(Z2,Ej),e(Ej,sAo),e(Z2,nAo),e(O,lAo),e(O,ev),e(ev,Dae),e(Dae,iAo),e(ev,dAo),e(ev,yj),e(yj,cAo),e(ev,mAo),e(O,fAo),e(O,ov),e(ov,Nae),e(Nae,gAo),e(ov,hAo),e(ov,wj),e(wj,uAo),e(ov,pAo),e(O,_Ao),e(O,rv),e(rv,qae),e(qae,bAo),e(rv,vAo),e(rv,Aj),e(Aj,TAo),e(rv,FAo),e(O,CAo),e(O,tv),e(tv,Oae),e(Oae,MAo),e(tv,EAo),e(tv,Lj),e(Lj,yAo),e(tv,wAo),e(O,AAo),e(O,av),e(av,Gae),e(Gae,LAo),e(av,BAo),e(av,Bj),e(Bj,xAo),e(av,kAo),e(O,RAo),e(O,sv),e(sv,Xae),e(Xae,SAo),e(sv,PAo),e(sv,xj),e(xj,$Ao),e(sv,IAo),e(O,jAo),e(O,nv),e(nv,Vae),e(Vae,DAo),e(nv,NAo),e(nv,kj),e(kj,qAo),e(nv,OAo),e(O,GAo),e(O,lv),e(lv,zae),e(zae,XAo),e(lv,VAo),e(lv,Rj),e(Rj,zAo),e(lv,WAo),e(O,QAo),e(O,iv),e(iv,Wae),e(Wae,HAo),e(iv,UAo),e(iv,Sj),e(Sj,JAo),e(iv,YAo),e(O,KAo),e(O,dv),e(dv,Qae),e(Qae,ZAo),e(dv,e0o),e(dv,Pj),e(Pj,o0o),e(dv,r0o),e(O,t0o),e(O,cv),e(cv,Hae),e(Hae,a0o),e(cv,s0o),e(cv,$j),e($j,n0o),e(cv,l0o),e(Xe,i0o),e(Xe,mv),e(mv,d0o),e(mv,Uae),e(Uae,c0o),e(mv,m0o),e(mv,Jae),e(Jae,f0o),e(Xe,g0o),e(Xe,Yae),e(Yae,h0o),e(Xe,u0o),g(Fw,Xe,null),b(d,Sxe,_),b(d,bd,_),e(bd,fv),e(fv,Kae),g(Cw,Kae,null),e(bd,p0o),e(bd,Zae),e(Zae,_0o),b(d,Pxe,_),b(d,tr,_),g(Mw,tr,null),e(tr,b0o),e(tr,vd),e(vd,v0o),e(vd,ese),e(ese,T0o),e(vd,F0o),e(vd,ose),e(ose,C0o),e(vd,M0o),e(tr,E0o),e(tr,Ew),e(Ew,y0o),e(Ew,rse),e(rse,w0o),e(Ew,A0o),e(tr,L0o),e(tr,Yr),g(yw,Yr,null),e(Yr,B0o),e(Yr,tse),e(tse,x0o),e(Yr,k0o),e(Yr,Td),e(Td,R0o),e(Td,ase),e(ase,S0o),e(Td,P0o),e(Td,sse),e(sse,$0o),e(Td,I0o),e(Yr,j0o),e(Yr,nse),e(nse,D0o),e(Yr,N0o),g(ww,Yr,null),e(tr,q0o),e(tr,Ve),g(Aw,Ve,null),e(Ve,O0o),e(Ve,lse),e(lse,G0o),e(Ve,X0o),e(Ve,Ya),e(Ya,V0o),e(Ya,ise),e(ise,z0o),e(Ya,W0o),e(Ya,dse),e(dse,Q0o),e(Ya,H0o),e(Ya,cse),e(cse,U0o),e(Ya,J0o),e(Ve,Y0o),e(Ve,da),e(da,gv),e(gv,mse),e(mse,K0o),e(gv,Z0o),e(gv,Ij),e(Ij,eLo),e(gv,oLo),e(da,rLo),e(da,hv),e(hv,fse),e(fse,tLo),e(hv,aLo),e(hv,jj),e(jj,sLo),e(hv,nLo),e(da,lLo),e(da,uv),e(uv,gse),e(gse,iLo),e(uv,dLo),e(uv,Dj),e(Dj,cLo),e(uv,mLo),e(da,fLo),e(da,pv),e(pv,hse),e(hse,gLo),e(pv,hLo),e(pv,Nj),e(Nj,uLo),e(pv,pLo),e(da,_Lo),e(da,_v),e(_v,use),e(use,bLo),e(_v,vLo),e(_v,qj),e(qj,TLo),e(_v,FLo),e(Ve,CLo),e(Ve,bv),e(bv,MLo),e(bv,pse),e(pse,ELo),e(bv,yLo),e(bv,_se),e(_se,wLo),e(Ve,ALo),e(Ve,bse),e(bse,LLo),e(Ve,BLo),g(Lw,Ve,null),b(d,$xe,_),b(d,Fd,_),e(Fd,vv),e(vv,vse),g(Bw,vse,null),e(Fd,xLo),e(Fd,Tse),e(Tse,kLo),b(d,Ixe,_),b(d,ar,_),g(xw,ar,null),e(ar,RLo),e(ar,Cd),e(Cd,SLo),e(Cd,Fse),e(Fse,PLo),e(Cd,$Lo),e(Cd,Cse),e(Cse,ILo),e(Cd,jLo),e(ar,DLo),e(ar,kw),e(kw,NLo),e(kw,Mse),e(Mse,qLo),e(kw,OLo),e(ar,GLo),e(ar,Kr),g(Rw,Kr,null),e(Kr,XLo),e(Kr,Ese),e(Ese,VLo),e(Kr,zLo),e(Kr,Md),e(Md,WLo),e(Md,yse),e(yse,QLo),e(Md,HLo),e(Md,wse),e(wse,ULo),e(Md,JLo),e(Kr,YLo),e(Kr,Ase),e(Ase,KLo),e(Kr,ZLo),g(Sw,Kr,null),e(ar,e8o),e(ar,ze),g(Pw,ze,null),e(ze,o8o),e(ze,Lse),e(Lse,r8o),e(ze,t8o),e(ze,Ka),e(Ka,a8o),e(Ka,Bse),e(Bse,s8o),e(Ka,n8o),e(Ka,xse),e(xse,l8o),e(Ka,i8o),e(Ka,kse),e(kse,d8o),e(Ka,c8o),e(ze,m8o),e(ze,N),e(N,Tv),e(Tv,Rse),e(Rse,f8o),e(Tv,g8o),e(Tv,Oj),e(Oj,h8o),e(Tv,u8o),e(N,p8o),e(N,Fv),e(Fv,Sse),e(Sse,_8o),e(Fv,b8o),e(Fv,Gj),e(Gj,v8o),e(Fv,T8o),e(N,F8o),e(N,Cv),e(Cv,Pse),e(Pse,C8o),e(Cv,M8o),e(Cv,Xj),e(Xj,E8o),e(Cv,y8o),e(N,w8o),e(N,Mv),e(Mv,$se),e($se,A8o),e(Mv,L8o),e(Mv,Vj),e(Vj,B8o),e(Mv,x8o),e(N,k8o),e(N,Ev),e(Ev,Ise),e(Ise,R8o),e(Ev,S8o),e(Ev,zj),e(zj,P8o),e(Ev,$8o),e(N,I8o),e(N,yv),e(yv,jse),e(jse,j8o),e(yv,D8o),e(yv,Wj),e(Wj,N8o),e(yv,q8o),e(N,O8o),e(N,wv),e(wv,Dse),e(Dse,G8o),e(wv,X8o),e(wv,Qj),e(Qj,V8o),e(wv,z8o),e(N,W8o),e(N,Av),e(Av,Nse),e(Nse,Q8o),e(Av,H8o),e(Av,Hj),e(Hj,U8o),e(Av,J8o),e(N,Y8o),e(N,Lv),e(Lv,qse),e(qse,K8o),e(Lv,Z8o),e(Lv,Uj),e(Uj,e7o),e(Lv,o7o),e(N,r7o),e(N,Bv),e(Bv,Ose),e(Ose,t7o),e(Bv,a7o),e(Bv,Jj),e(Jj,s7o),e(Bv,n7o),e(N,l7o),e(N,xv),e(xv,Gse),e(Gse,i7o),e(xv,d7o),e(xv,Yj),e(Yj,c7o),e(xv,m7o),e(N,f7o),e(N,kv),e(kv,Xse),e(Xse,g7o),e(kv,h7o),e(kv,Kj),e(Kj,u7o),e(kv,p7o),e(N,_7o),e(N,Rv),e(Rv,Vse),e(Vse,b7o),e(Rv,v7o),e(Rv,Zj),e(Zj,T7o),e(Rv,F7o),e(N,C7o),e(N,Sv),e(Sv,zse),e(zse,M7o),e(Sv,E7o),e(Sv,eD),e(eD,y7o),e(Sv,w7o),e(N,A7o),e(N,Pv),e(Pv,Wse),e(Wse,L7o),e(Pv,B7o),e(Pv,oD),e(oD,x7o),e(Pv,k7o),e(N,R7o),e(N,$v),e($v,Qse),e(Qse,S7o),e($v,P7o),e($v,rD),e(rD,$7o),e($v,I7o),e(N,j7o),e(N,Iv),e(Iv,Hse),e(Hse,D7o),e(Iv,N7o),e(Iv,tD),e(tD,q7o),e(Iv,O7o),e(N,G7o),e(N,jv),e(jv,Use),e(Use,X7o),e(jv,V7o),e(jv,aD),e(aD,z7o),e(jv,W7o),e(N,Q7o),e(N,Dv),e(Dv,Jse),e(Jse,H7o),e(Dv,U7o),e(Dv,sD),e(sD,J7o),e(Dv,Y7o),e(N,K7o),e(N,Nv),e(Nv,Yse),e(Yse,Z7o),e(Nv,e9o),e(Nv,nD),e(nD,o9o),e(Nv,r9o),e(N,t9o),e(N,qv),e(qv,Kse),e(Kse,a9o),e(qv,s9o),e(qv,lD),e(lD,n9o),e(qv,l9o),e(N,i9o),e(N,Ov),e(Ov,Zse),e(Zse,d9o),e(Ov,c9o),e(Ov,iD),e(iD,m9o),e(Ov,f9o),e(N,g9o),e(N,Gv),e(Gv,ene),e(ene,h9o),e(Gv,u9o),e(Gv,dD),e(dD,p9o),e(Gv,_9o),e(N,b9o),e(N,Xv),e(Xv,one),e(one,v9o),e(Xv,T9o),e(Xv,cD),e(cD,F9o),e(Xv,C9o),e(N,M9o),e(N,Vv),e(Vv,rne),e(rne,E9o),e(Vv,y9o),e(Vv,mD),e(mD,w9o),e(Vv,A9o),e(N,L9o),e(N,zv),e(zv,tne),e(tne,B9o),e(zv,x9o),e(zv,fD),e(fD,k9o),e(zv,R9o),e(N,S9o),e(N,Wv),e(Wv,ane),e(ane,P9o),e(Wv,$9o),e(Wv,gD),e(gD,I9o),e(Wv,j9o),e(N,D9o),e(N,Qv),e(Qv,sne),e(sne,N9o),e(Qv,q9o),e(Qv,hD),e(hD,O9o),e(Qv,G9o),e(N,X9o),e(N,Hv),e(Hv,nne),e(nne,V9o),e(Hv,z9o),e(Hv,uD),e(uD,W9o),e(Hv,Q9o),e(N,H9o),e(N,Uv),e(Uv,lne),e(lne,U9o),e(Uv,J9o),e(Uv,pD),e(pD,Y9o),e(Uv,K9o),e(N,Z9o),e(N,Jv),e(Jv,ine),e(ine,eBo),e(Jv,oBo),e(Jv,_D),e(_D,rBo),e(Jv,tBo),e(N,aBo),e(N,Yv),e(Yv,dne),e(dne,sBo),e(Yv,nBo),e(Yv,bD),e(bD,lBo),e(Yv,iBo),e(N,dBo),e(N,Kv),e(Kv,cne),e(cne,cBo),e(Kv,mBo),e(Kv,vD),e(vD,fBo),e(Kv,gBo),e(ze,hBo),e(ze,Zv),e(Zv,uBo),e(Zv,mne),e(mne,pBo),e(Zv,_Bo),e(Zv,fne),e(fne,bBo),e(ze,vBo),e(ze,gne),e(gne,TBo),e(ze,FBo),g($w,ze,null),b(d,jxe,_),b(d,Ed,_),e(Ed,eT),e(eT,hne),g(Iw,hne,null),e(Ed,CBo),e(Ed,une),e(une,MBo),b(d,Dxe,_),b(d,sr,_),g(jw,sr,null),e(sr,EBo),e(sr,yd),e(yd,yBo),e(yd,pne),e(pne,wBo),e(yd,ABo),e(yd,_ne),e(_ne,LBo),e(yd,BBo),e(sr,xBo),e(sr,Dw),e(Dw,kBo),e(Dw,bne),e(bne,RBo),e(Dw,SBo),e(sr,PBo),e(sr,Zr),g(Nw,Zr,null),e(Zr,$Bo),e(Zr,vne),e(vne,IBo),e(Zr,jBo),e(Zr,wd),e(wd,DBo),e(wd,Tne),e(Tne,NBo),e(wd,qBo),e(wd,Fne),e(Fne,OBo),e(wd,GBo),e(Zr,XBo),e(Zr,Cne),e(Cne,VBo),e(Zr,zBo),g(qw,Zr,null),e(sr,WBo),e(sr,We),g(Ow,We,null),e(We,QBo),e(We,Mne),e(Mne,HBo),e(We,UBo),e(We,Za),e(Za,JBo),e(Za,Ene),e(Ene,YBo),e(Za,KBo),e(Za,yne),e(yne,ZBo),e(Za,exo),e(Za,wne),e(wne,oxo),e(Za,rxo),e(We,txo),e(We,R),e(R,oT),e(oT,Ane),e(Ane,axo),e(oT,sxo),e(oT,TD),e(TD,nxo),e(oT,lxo),e(R,ixo),e(R,rT),e(rT,Lne),e(Lne,dxo),e(rT,cxo),e(rT,FD),e(FD,mxo),e(rT,fxo),e(R,gxo),e(R,tT),e(tT,Bne),e(Bne,hxo),e(tT,uxo),e(tT,CD),e(CD,pxo),e(tT,_xo),e(R,bxo),e(R,aT),e(aT,xne),e(xne,vxo),e(aT,Txo),e(aT,MD),e(MD,Fxo),e(aT,Cxo),e(R,Mxo),e(R,sT),e(sT,kne),e(kne,Exo),e(sT,yxo),e(sT,ED),e(ED,wxo),e(sT,Axo),e(R,Lxo),e(R,nT),e(nT,Rne),e(Rne,Bxo),e(nT,xxo),e(nT,yD),e(yD,kxo),e(nT,Rxo),e(R,Sxo),e(R,lT),e(lT,Sne),e(Sne,Pxo),e(lT,$xo),e(lT,wD),e(wD,Ixo),e(lT,jxo),e(R,Dxo),e(R,iT),e(iT,Pne),e(Pne,Nxo),e(iT,qxo),e(iT,AD),e(AD,Oxo),e(iT,Gxo),e(R,Xxo),e(R,dT),e(dT,$ne),e($ne,Vxo),e(dT,zxo),e(dT,LD),e(LD,Wxo),e(dT,Qxo),e(R,Hxo),e(R,cT),e(cT,Ine),e(Ine,Uxo),e(cT,Jxo),e(cT,BD),e(BD,Yxo),e(cT,Kxo),e(R,Zxo),e(R,mT),e(mT,jne),e(jne,eko),e(mT,oko),e(mT,xD),e(xD,rko),e(mT,tko),e(R,ako),e(R,fT),e(fT,Dne),e(Dne,sko),e(fT,nko),e(fT,kD),e(kD,lko),e(fT,iko),e(R,dko),e(R,gT),e(gT,Nne),e(Nne,cko),e(gT,mko),e(gT,RD),e(RD,fko),e(gT,gko),e(R,hko),e(R,hT),e(hT,qne),e(qne,uko),e(hT,pko),e(hT,SD),e(SD,_ko),e(hT,bko),e(R,vko),e(R,uT),e(uT,One),e(One,Tko),e(uT,Fko),e(uT,PD),e(PD,Cko),e(uT,Mko),e(R,Eko),e(R,pT),e(pT,Gne),e(Gne,yko),e(pT,wko),e(pT,$D),e($D,Ako),e(pT,Lko),e(R,Bko),e(R,_T),e(_T,Xne),e(Xne,xko),e(_T,kko),e(_T,ID),e(ID,Rko),e(_T,Sko),e(R,Pko),e(R,bT),e(bT,Vne),e(Vne,$ko),e(bT,Iko),e(bT,jD),e(jD,jko),e(bT,Dko),e(R,Nko),e(R,vT),e(vT,zne),e(zne,qko),e(vT,Oko),e(vT,DD),e(DD,Gko),e(vT,Xko),e(R,Vko),e(R,TT),e(TT,Wne),e(Wne,zko),e(TT,Wko),e(TT,ND),e(ND,Qko),e(TT,Hko),e(R,Uko),e(R,FT),e(FT,Qne),e(Qne,Jko),e(FT,Yko),e(FT,qD),e(qD,Kko),e(FT,Zko),e(R,eRo),e(R,CT),e(CT,Hne),e(Hne,oRo),e(CT,rRo),e(CT,OD),e(OD,tRo),e(CT,aRo),e(R,sRo),e(R,MT),e(MT,Une),e(Une,nRo),e(MT,lRo),e(MT,GD),e(GD,iRo),e(MT,dRo),e(R,cRo),e(R,ET),e(ET,Jne),e(Jne,mRo),e(ET,fRo),e(ET,XD),e(XD,gRo),e(ET,hRo),e(R,uRo),e(R,yT),e(yT,Yne),e(Yne,pRo),e(yT,_Ro),e(yT,VD),e(VD,bRo),e(yT,vRo),e(R,TRo),e(R,wT),e(wT,Kne),e(Kne,FRo),e(wT,CRo),e(wT,zD),e(zD,MRo),e(wT,ERo),e(R,yRo),e(R,AT),e(AT,Zne),e(Zne,wRo),e(AT,ARo),e(AT,WD),e(WD,LRo),e(AT,BRo),e(R,xRo),e(R,LT),e(LT,ele),e(ele,kRo),e(LT,RRo),e(LT,QD),e(QD,SRo),e(LT,PRo),e(R,$Ro),e(R,BT),e(BT,ole),e(ole,IRo),e(BT,jRo),e(BT,HD),e(HD,DRo),e(BT,NRo),e(R,qRo),e(R,xT),e(xT,rle),e(rle,ORo),e(xT,GRo),e(xT,UD),e(UD,XRo),e(xT,VRo),e(R,zRo),e(R,kT),e(kT,tle),e(tle,WRo),e(kT,QRo),e(kT,JD),e(JD,HRo),e(kT,URo),e(R,JRo),e(R,RT),e(RT,ale),e(ale,YRo),e(RT,KRo),e(RT,YD),e(YD,ZRo),e(RT,eSo),e(R,oSo),e(R,ST),e(ST,sle),e(sle,rSo),e(ST,tSo),e(ST,KD),e(KD,aSo),e(ST,sSo),e(R,nSo),e(R,PT),e(PT,nle),e(nle,lSo),e(PT,iSo),e(PT,ZD),e(ZD,dSo),e(PT,cSo),e(R,mSo),e(R,$T),e($T,lle),e(lle,fSo),e($T,gSo),e($T,eN),e(eN,hSo),e($T,uSo),e(R,pSo),e(R,IT),e(IT,ile),e(ile,_So),e(IT,bSo),e(IT,oN),e(oN,vSo),e(IT,TSo),e(R,FSo),e(R,jT),e(jT,dle),e(dle,CSo),e(jT,MSo),e(jT,rN),e(rN,ESo),e(jT,ySo),e(R,wSo),e(R,DT),e(DT,cle),e(cle,ASo),e(DT,LSo),e(DT,tN),e(tN,BSo),e(DT,xSo),e(R,kSo),e(R,NT),e(NT,mle),e(mle,RSo),e(NT,SSo),e(NT,aN),e(aN,PSo),e(NT,$So),e(We,ISo),e(We,qT),e(qT,jSo),e(qT,fle),e(fle,DSo),e(qT,NSo),e(qT,gle),e(gle,qSo),e(We,OSo),e(We,hle),e(hle,GSo),e(We,XSo),g(Gw,We,null),b(d,Nxe,_),b(d,Ad,_),e(Ad,OT),e(OT,ule),g(Xw,ule,null),e(Ad,VSo),e(Ad,ple),e(ple,zSo),b(d,qxe,_),b(d,nr,_),g(Vw,nr,null),e(nr,WSo),e(nr,Ld),e(Ld,QSo),e(Ld,_le),e(_le,HSo),e(Ld,USo),e(Ld,ble),e(ble,JSo),e(Ld,YSo),e(nr,KSo),e(nr,zw),e(zw,ZSo),e(zw,vle),e(vle,ePo),e(zw,oPo),e(nr,rPo),e(nr,et),g(Ww,et,null),e(et,tPo),e(et,Tle),e(Tle,aPo),e(et,sPo),e(et,Bd),e(Bd,nPo),e(Bd,Fle),e(Fle,lPo),e(Bd,iPo),e(Bd,Cle),e(Cle,dPo),e(Bd,cPo),e(et,mPo),e(et,Mle),e(Mle,fPo),e(et,gPo),g(Qw,et,null),e(nr,hPo),e(nr,Qe),g(Hw,Qe,null),e(Qe,uPo),e(Qe,Ele),e(Ele,pPo),e(Qe,_Po),e(Qe,es),e(es,bPo),e(es,yle),e(yle,vPo),e(es,TPo),e(es,wle),e(wle,FPo),e(es,CPo),e(es,Ale),e(Ale,MPo),e(es,EPo),e(Qe,yPo),e(Qe,Lle),e(Lle,GT),e(GT,Ble),e(Ble,wPo),e(GT,APo),e(GT,sN),e(sN,LPo),e(GT,BPo),e(Qe,xPo),e(Qe,XT),e(XT,kPo),e(XT,xle),e(xle,RPo),e(XT,SPo),e(XT,kle),e(kle,PPo),e(Qe,$Po),e(Qe,Rle),e(Rle,IPo),e(Qe,jPo),g(Uw,Qe,null),b(d,Oxe,_),b(d,xd,_),e(xd,VT),e(VT,Sle),g(Jw,Sle,null),e(xd,DPo),e(xd,Ple),e(Ple,NPo),b(d,Gxe,_),b(d,lr,_),g(Yw,lr,null),e(lr,qPo),e(lr,kd),e(kd,OPo),e(kd,$le),e($le,GPo),e(kd,XPo),e(kd,Ile),e(Ile,VPo),e(kd,zPo),e(lr,WPo),e(lr,Kw),e(Kw,QPo),e(Kw,jle),e(jle,HPo),e(Kw,UPo),e(lr,JPo),e(lr,ot),g(Zw,ot,null),e(ot,YPo),e(ot,Dle),e(Dle,KPo),e(ot,ZPo),e(ot,Rd),e(Rd,e$o),e(Rd,Nle),e(Nle,o$o),e(Rd,r$o),e(Rd,qle),e(qle,t$o),e(Rd,a$o),e(ot,s$o),e(ot,Ole),e(Ole,n$o),e(ot,l$o),g(e6,ot,null),e(lr,i$o),e(lr,He),g(o6,He,null),e(He,d$o),e(He,Gle),e(Gle,c$o),e(He,m$o),e(He,os),e(os,f$o),e(os,Xle),e(Xle,g$o),e(os,h$o),e(os,Vle),e(Vle,u$o),e(os,p$o),e(os,zle),e(zle,_$o),e(os,b$o),e(He,v$o),e(He,Ce),e(Ce,zT),e(zT,Wle),e(Wle,T$o),e(zT,F$o),e(zT,nN),e(nN,C$o),e(zT,M$o),e(Ce,E$o),e(Ce,WT),e(WT,Qle),e(Qle,y$o),e(WT,w$o),e(WT,lN),e(lN,A$o),e(WT,L$o),e(Ce,B$o),e(Ce,qn),e(qn,Hle),e(Hle,x$o),e(qn,k$o),e(qn,iN),e(iN,R$o),e(qn,S$o),e(qn,dN),e(dN,P$o),e(qn,$$o),e(Ce,I$o),e(Ce,QT),e(QT,Ule),e(Ule,j$o),e(QT,D$o),e(QT,cN),e(cN,N$o),e(QT,q$o),e(Ce,O$o),e(Ce,fa),e(fa,Jle),e(Jle,G$o),e(fa,X$o),e(fa,mN),e(mN,V$o),e(fa,z$o),e(fa,fN),e(fN,W$o),e(fa,Q$o),e(fa,gN),e(gN,H$o),e(fa,U$o),e(Ce,J$o),e(Ce,HT),e(HT,Yle),e(Yle,Y$o),e(HT,K$o),e(HT,hN),e(hN,Z$o),e(HT,eIo),e(Ce,oIo),e(Ce,UT),e(UT,Kle),e(Kle,rIo),e(UT,tIo),e(UT,uN),e(uN,aIo),e(UT,sIo),e(Ce,nIo),e(Ce,JT),e(JT,Zle),e(Zle,lIo),e(JT,iIo),e(JT,pN),e(pN,dIo),e(JT,cIo),e(Ce,mIo),e(Ce,YT),e(YT,eie),e(eie,fIo),e(YT,gIo),e(YT,_N),e(_N,hIo),e(YT,uIo),e(He,pIo),e(He,KT),e(KT,_Io),e(KT,oie),e(oie,bIo),e(KT,vIo),e(KT,rie),e(rie,TIo),e(He,FIo),e(He,tie),e(tie,CIo),e(He,MIo),g(r6,He,null),b(d,Xxe,_),b(d,Sd,_),e(Sd,ZT),e(ZT,aie),g(t6,aie,null),e(Sd,EIo),e(Sd,sie),e(sie,yIo),b(d,Vxe,_),b(d,ir,_),g(a6,ir,null),e(ir,wIo),e(ir,Pd),e(Pd,AIo),e(Pd,nie),e(nie,LIo),e(Pd,BIo),e(Pd,lie),e(lie,xIo),e(Pd,kIo),e(ir,RIo),e(ir,s6),e(s6,SIo),e(s6,iie),e(iie,PIo),e(s6,$Io),e(ir,IIo),e(ir,rt),g(n6,rt,null),e(rt,jIo),e(rt,die),e(die,DIo),e(rt,NIo),e(rt,$d),e($d,qIo),e($d,cie),e(cie,OIo),e($d,GIo),e($d,mie),e(mie,XIo),e($d,VIo),e(rt,zIo),e(rt,fie),e(fie,WIo),e(rt,QIo),g(l6,rt,null),e(ir,HIo),e(ir,Ue),g(i6,Ue,null),e(Ue,UIo),e(Ue,gie),e(gie,JIo),e(Ue,YIo),e(Ue,rs),e(rs,KIo),e(rs,hie),e(hie,ZIo),e(rs,ejo),e(rs,uie),e(uie,ojo),e(rs,rjo),e(rs,pie),e(pie,tjo),e(rs,ajo),e(Ue,sjo),e(Ue,_ie),e(_ie,e1),e(e1,bie),e(bie,njo),e(e1,ljo),e(e1,bN),e(bN,ijo),e(e1,djo),e(Ue,cjo),e(Ue,o1),e(o1,mjo),e(o1,vie),e(vie,fjo),e(o1,gjo),e(o1,Tie),e(Tie,hjo),e(Ue,ujo),e(Ue,Fie),e(Fie,pjo),e(Ue,_jo),g(d6,Ue,null),b(d,zxe,_),b(d,Id,_),e(Id,r1),e(r1,Cie),g(c6,Cie,null),e(Id,bjo),e(Id,Mie),e(Mie,vjo),b(d,Wxe,_),b(d,dr,_),g(m6,dr,null),e(dr,Tjo),e(dr,jd),e(jd,Fjo),e(jd,Eie),e(Eie,Cjo),e(jd,Mjo),e(jd,yie),e(yie,Ejo),e(jd,yjo),e(dr,wjo),e(dr,f6),e(f6,Ajo),e(f6,wie),e(wie,Ljo),e(f6,Bjo),e(dr,xjo),e(dr,tt),g(g6,tt,null),e(tt,kjo),e(tt,Aie),e(Aie,Rjo),e(tt,Sjo),e(tt,Dd),e(Dd,Pjo),e(Dd,Lie),e(Lie,$jo),e(Dd,Ijo),e(Dd,Bie),e(Bie,jjo),e(Dd,Djo),e(tt,Njo),e(tt,xie),e(xie,qjo),e(tt,Ojo),g(h6,tt,null),e(dr,Gjo),e(dr,Je),g(u6,Je,null),e(Je,Xjo),e(Je,kie),e(kie,Vjo),e(Je,zjo),e(Je,ts),e(ts,Wjo),e(ts,Rie),e(Rie,Qjo),e(ts,Hjo),e(ts,Sie),e(Sie,Ujo),e(ts,Jjo),e(ts,Pie),e(Pie,Yjo),e(ts,Kjo),e(Je,Zjo),e(Je,xe),e(xe,t1),e(t1,$ie),e($ie,eDo),e(t1,oDo),e(t1,vN),e(vN,rDo),e(t1,tDo),e(xe,aDo),e(xe,a1),e(a1,Iie),e(Iie,sDo),e(a1,nDo),e(a1,TN),e(TN,lDo),e(a1,iDo),e(xe,dDo),e(xe,s1),e(s1,jie),e(jie,cDo),e(s1,mDo),e(s1,FN),e(FN,fDo),e(s1,gDo),e(xe,hDo),e(xe,n1),e(n1,Die),e(Die,uDo),e(n1,pDo),e(n1,CN),e(CN,_Do),e(n1,bDo),e(xe,vDo),e(xe,l1),e(l1,Nie),e(Nie,TDo),e(l1,FDo),e(l1,MN),e(MN,CDo),e(l1,MDo),e(xe,EDo),e(xe,i1),e(i1,qie),e(qie,yDo),e(i1,wDo),e(i1,EN),e(EN,ADo),e(i1,LDo),e(xe,BDo),e(xe,d1),e(d1,Oie),e(Oie,xDo),e(d1,kDo),e(d1,yN),e(yN,RDo),e(d1,SDo),e(xe,PDo),e(xe,c1),e(c1,Gie),e(Gie,$Do),e(c1,IDo),e(c1,wN),e(wN,jDo),e(c1,DDo),e(Je,NDo),e(Je,m1),e(m1,qDo),e(m1,Xie),e(Xie,ODo),e(m1,GDo),e(m1,Vie),e(Vie,XDo),e(Je,VDo),e(Je,zie),e(zie,zDo),e(Je,WDo),g(p6,Je,null),b(d,Qxe,_),b(d,Nd,_),e(Nd,f1),e(f1,Wie),g(_6,Wie,null),e(Nd,QDo),e(Nd,Qie),e(Qie,HDo),b(d,Hxe,_),b(d,cr,_),g(b6,cr,null),e(cr,UDo),e(cr,qd),e(qd,JDo),e(qd,Hie),e(Hie,YDo),e(qd,KDo),e(qd,Uie),e(Uie,ZDo),e(qd,eNo),e(cr,oNo),e(cr,v6),e(v6,rNo),e(v6,Jie),e(Jie,tNo),e(v6,aNo),e(cr,sNo),e(cr,at),g(T6,at,null),e(at,nNo),e(at,Yie),e(Yie,lNo),e(at,iNo),e(at,Od),e(Od,dNo),e(Od,Kie),e(Kie,cNo),e(Od,mNo),e(Od,Zie),e(Zie,fNo),e(Od,gNo),e(at,hNo),e(at,ede),e(ede,uNo),e(at,pNo),g(F6,at,null),e(cr,_No),e(cr,Ye),g(C6,Ye,null),e(Ye,bNo),e(Ye,ode),e(ode,vNo),e(Ye,TNo),e(Ye,as),e(as,FNo),e(as,rde),e(rde,CNo),e(as,MNo),e(as,tde),e(tde,ENo),e(as,yNo),e(as,ade),e(ade,wNo),e(as,ANo),e(Ye,LNo),e(Ye,ss),e(ss,g1),e(g1,sde),e(sde,BNo),e(g1,xNo),e(g1,AN),e(AN,kNo),e(g1,RNo),e(ss,SNo),e(ss,h1),e(h1,nde),e(nde,PNo),e(h1,$No),e(h1,LN),e(LN,INo),e(h1,jNo),e(ss,DNo),e(ss,u1),e(u1,lde),e(lde,NNo),e(u1,qNo),e(u1,BN),e(BN,ONo),e(u1,GNo),e(ss,XNo),e(ss,p1),e(p1,ide),e(ide,VNo),e(p1,zNo),e(p1,xN),e(xN,WNo),e(p1,QNo),e(Ye,HNo),e(Ye,_1),e(_1,UNo),e(_1,dde),e(dde,JNo),e(_1,YNo),e(_1,cde),e(cde,KNo),e(Ye,ZNo),e(Ye,mde),e(mde,eqo),e(Ye,oqo),g(M6,Ye,null),b(d,Uxe,_),b(d,Gd,_),e(Gd,b1),e(b1,fde),g(E6,fde,null),e(Gd,rqo),e(Gd,gde),e(gde,tqo),b(d,Jxe,_),b(d,mr,_),g(y6,mr,null),e(mr,aqo),e(mr,Xd),e(Xd,sqo),e(Xd,hde),e(hde,nqo),e(Xd,lqo),e(Xd,ude),e(ude,iqo),e(Xd,dqo),e(mr,cqo),e(mr,w6),e(w6,mqo),e(w6,pde),e(pde,fqo),e(w6,gqo),e(mr,hqo),e(mr,st),g(A6,st,null),e(st,uqo),e(st,_de),e(_de,pqo),e(st,_qo),e(st,Vd),e(Vd,bqo),e(Vd,bde),e(bde,vqo),e(Vd,Tqo),e(Vd,vde),e(vde,Fqo),e(Vd,Cqo),e(st,Mqo),e(st,Tde),e(Tde,Eqo),e(st,yqo),g(L6,st,null),e(mr,wqo),e(mr,Ke),g(B6,Ke,null),e(Ke,Aqo),e(Ke,Fde),e(Fde,Lqo),e(Ke,Bqo),e(Ke,ns),e(ns,xqo),e(ns,Cde),e(Cde,kqo),e(ns,Rqo),e(ns,Mde),e(Mde,Sqo),e(ns,Pqo),e(ns,Ede),e(Ede,$qo),e(ns,Iqo),e(Ke,jqo),e(Ke,ke),e(ke,v1),e(v1,yde),e(yde,Dqo),e(v1,Nqo),e(v1,kN),e(kN,qqo),e(v1,Oqo),e(ke,Gqo),e(ke,T1),e(T1,wde),e(wde,Xqo),e(T1,Vqo),e(T1,RN),e(RN,zqo),e(T1,Wqo),e(ke,Qqo),e(ke,F1),e(F1,Ade),e(Ade,Hqo),e(F1,Uqo),e(F1,SN),e(SN,Jqo),e(F1,Yqo),e(ke,Kqo),e(ke,C1),e(C1,Lde),e(Lde,Zqo),e(C1,eOo),e(C1,PN),e(PN,oOo),e(C1,rOo),e(ke,tOo),e(ke,M1),e(M1,Bde),e(Bde,aOo),e(M1,sOo),e(M1,$N),e($N,nOo),e(M1,lOo),e(ke,iOo),e(ke,E1),e(E1,xde),e(xde,dOo),e(E1,cOo),e(E1,IN),e(IN,mOo),e(E1,fOo),e(ke,gOo),e(ke,y1),e(y1,kde),e(kde,hOo),e(y1,uOo),e(y1,jN),e(jN,pOo),e(y1,_Oo),e(ke,bOo),e(ke,w1),e(w1,Rde),e(Rde,vOo),e(w1,TOo),e(w1,DN),e(DN,FOo),e(w1,COo),e(Ke,MOo),e(Ke,A1),e(A1,EOo),e(A1,Sde),e(Sde,yOo),e(A1,wOo),e(A1,Pde),e(Pde,AOo),e(Ke,LOo),e(Ke,$de),e($de,BOo),e(Ke,xOo),g(x6,Ke,null),b(d,Yxe,_),b(d,zd,_),e(zd,L1),e(L1,Ide),g(k6,Ide,null),e(zd,kOo),e(zd,jde),e(jde,ROo),b(d,Kxe,_),b(d,fr,_),g(R6,fr,null),e(fr,SOo),e(fr,Wd),e(Wd,POo),e(Wd,Dde),e(Dde,$Oo),e(Wd,IOo),e(Wd,Nde),e(Nde,jOo),e(Wd,DOo),e(fr,NOo),e(fr,S6),e(S6,qOo),e(S6,qde),e(qde,OOo),e(S6,GOo),e(fr,XOo),e(fr,nt),g(P6,nt,null),e(nt,VOo),e(nt,Ode),e(Ode,zOo),e(nt,WOo),e(nt,Qd),e(Qd,QOo),e(Qd,Gde),e(Gde,HOo),e(Qd,UOo),e(Qd,Xde),e(Xde,JOo),e(Qd,YOo),e(nt,KOo),e(nt,Vde),e(Vde,ZOo),e(nt,eGo),g($6,nt,null),e(fr,oGo),e(fr,Ze),g(I6,Ze,null),e(Ze,rGo),e(Ze,zde),e(zde,tGo),e(Ze,aGo),e(Ze,ls),e(ls,sGo),e(ls,Wde),e(Wde,nGo),e(ls,lGo),e(ls,Qde),e(Qde,iGo),e(ls,dGo),e(ls,Hde),e(Hde,cGo),e(ls,mGo),e(Ze,fGo),e(Ze,j6),e(j6,B1),e(B1,Ude),e(Ude,gGo),e(B1,hGo),e(B1,NN),e(NN,uGo),e(B1,pGo),e(j6,_Go),e(j6,x1),e(x1,Jde),e(Jde,bGo),e(x1,vGo),e(x1,qN),e(qN,TGo),e(x1,FGo),e(Ze,CGo),e(Ze,k1),e(k1,MGo),e(k1,Yde),e(Yde,EGo),e(k1,yGo),e(k1,Kde),e(Kde,wGo),e(Ze,AGo),e(Ze,Zde),e(Zde,LGo),e(Ze,BGo),g(D6,Ze,null),b(d,Zxe,_),b(d,Hd,_),e(Hd,R1),e(R1,ece),g(N6,ece,null),e(Hd,xGo),e(Hd,oce),e(oce,kGo),b(d,eke,_),b(d,gr,_),g(q6,gr,null),e(gr,RGo),e(gr,Ud),e(Ud,SGo),e(Ud,rce),e(rce,PGo),e(Ud,$Go),e(Ud,tce),e(tce,IGo),e(Ud,jGo),e(gr,DGo),e(gr,O6),e(O6,NGo),e(O6,ace),e(ace,qGo),e(O6,OGo),e(gr,GGo),e(gr,lt),g(G6,lt,null),e(lt,XGo),e(lt,sce),e(sce,VGo),e(lt,zGo),e(lt,Jd),e(Jd,WGo),e(Jd,nce),e(nce,QGo),e(Jd,HGo),e(Jd,lce),e(lce,UGo),e(Jd,JGo),e(lt,YGo),e(lt,ice),e(ice,KGo),e(lt,ZGo),g(X6,lt,null),e(gr,eXo),e(gr,eo),g(V6,eo,null),e(eo,oXo),e(eo,dce),e(dce,rXo),e(eo,tXo),e(eo,is),e(is,aXo),e(is,cce),e(cce,sXo),e(is,nXo),e(is,mce),e(mce,lXo),e(is,iXo),e(is,fce),e(fce,dXo),e(is,cXo),e(eo,mXo),e(eo,ds),e(ds,S1),e(S1,gce),e(gce,fXo),e(S1,gXo),e(S1,ON),e(ON,hXo),e(S1,uXo),e(ds,pXo),e(ds,P1),e(P1,hce),e(hce,_Xo),e(P1,bXo),e(P1,GN),e(GN,vXo),e(P1,TXo),e(ds,FXo),e(ds,$1),e($1,uce),e(uce,CXo),e($1,MXo),e($1,XN),e(XN,EXo),e($1,yXo),e(ds,wXo),e(ds,I1),e(I1,pce),e(pce,AXo),e(I1,LXo),e(I1,VN),e(VN,BXo),e(I1,xXo),e(eo,kXo),e(eo,j1),e(j1,RXo),e(j1,_ce),e(_ce,SXo),e(j1,PXo),e(j1,bce),e(bce,$Xo),e(eo,IXo),e(eo,vce),e(vce,jXo),e(eo,DXo),g(z6,eo,null),b(d,oke,_),b(d,Yd,_),e(Yd,D1),e(D1,Tce),g(W6,Tce,null),e(Yd,NXo),e(Yd,Fce),e(Fce,qXo),b(d,rke,_),b(d,hr,_),g(Q6,hr,null),e(hr,OXo),e(hr,Kd),e(Kd,GXo),e(Kd,Cce),e(Cce,XXo),e(Kd,VXo),e(Kd,Mce),e(Mce,zXo),e(Kd,WXo),e(hr,QXo),e(hr,H6),e(H6,HXo),e(H6,Ece),e(Ece,UXo),e(H6,JXo),e(hr,YXo),e(hr,it),g(U6,it,null),e(it,KXo),e(it,yce),e(yce,ZXo),e(it,eVo),e(it,Zd),e(Zd,oVo),e(Zd,wce),e(wce,rVo),e(Zd,tVo),e(Zd,Ace),e(Ace,aVo),e(Zd,sVo),e(it,nVo),e(it,Lce),e(Lce,lVo),e(it,iVo),g(J6,it,null),e(hr,dVo),e(hr,oo),g(Y6,oo,null),e(oo,cVo),e(oo,Bce),e(Bce,mVo),e(oo,fVo),e(oo,cs),e(cs,gVo),e(cs,xce),e(xce,hVo),e(cs,uVo),e(cs,kce),e(kce,pVo),e(cs,_Vo),e(cs,Rce),e(Rce,bVo),e(cs,vVo),e(oo,TVo),e(oo,ec),e(ec,N1),e(N1,Sce),e(Sce,FVo),e(N1,CVo),e(N1,zN),e(zN,MVo),e(N1,EVo),e(ec,yVo),e(ec,q1),e(q1,Pce),e(Pce,wVo),e(q1,AVo),e(q1,WN),e(WN,LVo),e(q1,BVo),e(ec,xVo),e(ec,O1),e(O1,$ce),e($ce,kVo),e(O1,RVo),e(O1,QN),e(QN,SVo),e(O1,PVo),e(oo,$Vo),e(oo,G1),e(G1,IVo),e(G1,Ice),e(Ice,jVo),e(G1,DVo),e(G1,jce),e(jce,NVo),e(oo,qVo),e(oo,Dce),e(Dce,OVo),e(oo,GVo),g(K6,oo,null),b(d,tke,_),b(d,oc,_),e(oc,X1),e(X1,Nce),g(Z6,Nce,null),e(oc,XVo),e(oc,qce),e(qce,VVo),b(d,ake,_),b(d,ur,_),g(eA,ur,null),e(ur,zVo),e(ur,rc),e(rc,WVo),e(rc,Oce),e(Oce,QVo),e(rc,HVo),e(rc,Gce),e(Gce,UVo),e(rc,JVo),e(ur,YVo),e(ur,oA),e(oA,KVo),e(oA,Xce),e(Xce,ZVo),e(oA,ezo),e(ur,ozo),e(ur,dt),g(rA,dt,null),e(dt,rzo),e(dt,Vce),e(Vce,tzo),e(dt,azo),e(dt,tc),e(tc,szo),e(tc,zce),e(zce,nzo),e(tc,lzo),e(tc,Wce),e(Wce,izo),e(tc,dzo),e(dt,czo),e(dt,Qce),e(Qce,mzo),e(dt,fzo),g(tA,dt,null),e(ur,gzo),e(ur,ro),g(aA,ro,null),e(ro,hzo),e(ro,Hce),e(Hce,uzo),e(ro,pzo),e(ro,ms),e(ms,_zo),e(ms,Uce),e(Uce,bzo),e(ms,vzo),e(ms,Jce),e(Jce,Tzo),e(ms,Fzo),e(ms,Yce),e(Yce,Czo),e(ms,Mzo),e(ro,Ezo),e(ro,Kce),e(Kce,V1),e(V1,Zce),e(Zce,yzo),e(V1,wzo),e(V1,HN),e(HN,Azo),e(V1,Lzo),e(ro,Bzo),e(ro,z1),e(z1,xzo),e(z1,eme),e(eme,kzo),e(z1,Rzo),e(z1,ome),e(ome,Szo),e(ro,Pzo),e(ro,rme),e(rme,$zo),e(ro,Izo),g(sA,ro,null),b(d,ske,_),b(d,ac,_),e(ac,W1),e(W1,tme),g(nA,tme,null),e(ac,jzo),e(ac,ame),e(ame,Dzo),b(d,nke,_),b(d,pr,_),g(lA,pr,null),e(pr,Nzo),e(pr,sc),e(sc,qzo),e(sc,sme),e(sme,Ozo),e(sc,Gzo),e(sc,nme),e(nme,Xzo),e(sc,Vzo),e(pr,zzo),e(pr,iA),e(iA,Wzo),e(iA,lme),e(lme,Qzo),e(iA,Hzo),e(pr,Uzo),e(pr,ct),g(dA,ct,null),e(ct,Jzo),e(ct,ime),e(ime,Yzo),e(ct,Kzo),e(ct,nc),e(nc,Zzo),e(nc,dme),e(dme,eWo),e(nc,oWo),e(nc,cme),e(cme,rWo),e(nc,tWo),e(ct,aWo),e(ct,mme),e(mme,sWo),e(ct,nWo),g(cA,ct,null),e(pr,lWo),e(pr,to),g(mA,to,null),e(to,iWo),e(to,fme),e(fme,dWo),e(to,cWo),e(to,fs),e(fs,mWo),e(fs,gme),e(gme,fWo),e(fs,gWo),e(fs,hme),e(hme,hWo),e(fs,uWo),e(fs,ume),e(ume,pWo),e(fs,_Wo),e(to,bWo),e(to,pme),e(pme,Q1),e(Q1,_me),e(_me,vWo),e(Q1,TWo),e(Q1,UN),e(UN,FWo),e(Q1,CWo),e(to,MWo),e(to,H1),e(H1,EWo),e(H1,bme),e(bme,yWo),e(H1,wWo),e(H1,vme),e(vme,AWo),e(to,LWo),e(to,Tme),e(Tme,BWo),e(to,xWo),g(fA,to,null),b(d,lke,_),b(d,lc,_),e(lc,U1),e(U1,Fme),g(gA,Fme,null),e(lc,kWo),e(lc,Cme),e(Cme,RWo),b(d,ike,_),b(d,_r,_),g(hA,_r,null),e(_r,SWo),e(_r,ic),e(ic,PWo),e(ic,Mme),e(Mme,$Wo),e(ic,IWo),e(ic,Eme),e(Eme,jWo),e(ic,DWo),e(_r,NWo),e(_r,uA),e(uA,qWo),e(uA,yme),e(yme,OWo),e(uA,GWo),e(_r,XWo),e(_r,mt),g(pA,mt,null),e(mt,VWo),e(mt,wme),e(wme,zWo),e(mt,WWo),e(mt,dc),e(dc,QWo),e(dc,Ame),e(Ame,HWo),e(dc,UWo),e(dc,Lme),e(Lme,JWo),e(dc,YWo),e(mt,KWo),e(mt,Bme),e(Bme,ZWo),e(mt,eQo),g(_A,mt,null),e(_r,oQo),e(_r,ao),g(bA,ao,null),e(ao,rQo),e(ao,xme),e(xme,tQo),e(ao,aQo),e(ao,gs),e(gs,sQo),e(gs,kme),e(kme,nQo),e(gs,lQo),e(gs,Rme),e(Rme,iQo),e(gs,dQo),e(gs,Sme),e(Sme,cQo),e(gs,mQo),e(ao,fQo),e(ao,vA),e(vA,J1),e(J1,Pme),e(Pme,gQo),e(J1,hQo),e(J1,JN),e(JN,uQo),e(J1,pQo),e(vA,_Qo),e(vA,Y1),e(Y1,$me),e($me,bQo),e(Y1,vQo),e(Y1,YN),e(YN,TQo),e(Y1,FQo),e(ao,CQo),e(ao,K1),e(K1,MQo),e(K1,Ime),e(Ime,EQo),e(K1,yQo),e(K1,jme),e(jme,wQo),e(ao,AQo),e(ao,Dme),e(Dme,LQo),e(ao,BQo),g(TA,ao,null),b(d,dke,_),b(d,cc,_),e(cc,Z1),e(Z1,Nme),g(FA,Nme,null),e(cc,xQo),e(cc,qme),e(qme,kQo),b(d,cke,_),b(d,br,_),g(CA,br,null),e(br,RQo),e(br,mc),e(mc,SQo),e(mc,Ome),e(Ome,PQo),e(mc,$Qo),e(mc,Gme),e(Gme,IQo),e(mc,jQo),e(br,DQo),e(br,MA),e(MA,NQo),e(MA,Xme),e(Xme,qQo),e(MA,OQo),e(br,GQo),e(br,ft),g(EA,ft,null),e(ft,XQo),e(ft,Vme),e(Vme,VQo),e(ft,zQo),e(ft,fc),e(fc,WQo),e(fc,zme),e(zme,QQo),e(fc,HQo),e(fc,Wme),e(Wme,UQo),e(fc,JQo),e(ft,YQo),e(ft,Qme),e(Qme,KQo),e(ft,ZQo),g(yA,ft,null),e(br,eHo),e(br,so),g(wA,so,null),e(so,oHo),e(so,Hme),e(Hme,rHo),e(so,tHo),e(so,hs),e(hs,aHo),e(hs,Ume),e(Ume,sHo),e(hs,nHo),e(hs,Jme),e(Jme,lHo),e(hs,iHo),e(hs,Yme),e(Yme,dHo),e(hs,cHo),e(so,mHo),e(so,Kme),e(Kme,eF),e(eF,Zme),e(Zme,fHo),e(eF,gHo),e(eF,KN),e(KN,hHo),e(eF,uHo),e(so,pHo),e(so,oF),e(oF,_Ho),e(oF,efe),e(efe,bHo),e(oF,vHo),e(oF,ofe),e(ofe,THo),e(so,FHo),e(so,rfe),e(rfe,CHo),e(so,MHo),g(AA,so,null),b(d,mke,_),b(d,gc,_),e(gc,rF),e(rF,tfe),g(LA,tfe,null),e(gc,EHo),e(gc,afe),e(afe,yHo),b(d,fke,_),b(d,vr,_),g(BA,vr,null),e(vr,wHo),e(vr,hc),e(hc,AHo),e(hc,sfe),e(sfe,LHo),e(hc,BHo),e(hc,nfe),e(nfe,xHo),e(hc,kHo),e(vr,RHo),e(vr,xA),e(xA,SHo),e(xA,lfe),e(lfe,PHo),e(xA,$Ho),e(vr,IHo),e(vr,gt),g(kA,gt,null),e(gt,jHo),e(gt,ife),e(ife,DHo),e(gt,NHo),e(gt,uc),e(uc,qHo),e(uc,dfe),e(dfe,OHo),e(uc,GHo),e(uc,cfe),e(cfe,XHo),e(uc,VHo),e(gt,zHo),e(gt,mfe),e(mfe,WHo),e(gt,QHo),g(RA,gt,null),e(vr,HHo),e(vr,ho),g(SA,ho,null),e(ho,UHo),e(ho,ffe),e(ffe,JHo),e(ho,YHo),e(ho,us),e(us,KHo),e(us,gfe),e(gfe,ZHo),e(us,eUo),e(us,hfe),e(hfe,oUo),e(us,rUo),e(us,ufe),e(ufe,tUo),e(us,aUo),e(ho,sUo),e(ho,B),e(B,tF),e(tF,pfe),e(pfe,nUo),e(tF,lUo),e(tF,ZN),e(ZN,iUo),e(tF,dUo),e(B,cUo),e(B,aF),e(aF,_fe),e(_fe,mUo),e(aF,fUo),e(aF,eq),e(eq,gUo),e(aF,hUo),e(B,uUo),e(B,sF),e(sF,bfe),e(bfe,pUo),e(sF,_Uo),e(sF,oq),e(oq,bUo),e(sF,vUo),e(B,TUo),e(B,nF),e(nF,vfe),e(vfe,FUo),e(nF,CUo),e(nF,rq),e(rq,MUo),e(nF,EUo),e(B,yUo),e(B,lF),e(lF,Tfe),e(Tfe,wUo),e(lF,AUo),e(lF,tq),e(tq,LUo),e(lF,BUo),e(B,xUo),e(B,iF),e(iF,Ffe),e(Ffe,kUo),e(iF,RUo),e(iF,aq),e(aq,SUo),e(iF,PUo),e(B,$Uo),e(B,dF),e(dF,Cfe),e(Cfe,IUo),e(dF,jUo),e(dF,sq),e(sq,DUo),e(dF,NUo),e(B,qUo),e(B,cF),e(cF,Mfe),e(Mfe,OUo),e(cF,GUo),e(cF,nq),e(nq,XUo),e(cF,VUo),e(B,zUo),e(B,mF),e(mF,Efe),e(Efe,WUo),e(mF,QUo),e(mF,lq),e(lq,HUo),e(mF,UUo),e(B,JUo),e(B,fF),e(fF,yfe),e(yfe,YUo),e(fF,KUo),e(fF,iq),e(iq,ZUo),e(fF,eJo),e(B,oJo),e(B,gF),e(gF,wfe),e(wfe,rJo),e(gF,tJo),e(gF,dq),e(dq,aJo),e(gF,sJo),e(B,nJo),e(B,hF),e(hF,Afe),e(Afe,lJo),e(hF,iJo),e(hF,cq),e(cq,dJo),e(hF,cJo),e(B,mJo),e(B,uF),e(uF,Lfe),e(Lfe,fJo),e(uF,gJo),e(uF,mq),e(mq,hJo),e(uF,uJo),e(B,pJo),e(B,pF),e(pF,Bfe),e(Bfe,_Jo),e(pF,bJo),e(pF,fq),e(fq,vJo),e(pF,TJo),e(B,FJo),e(B,_F),e(_F,xfe),e(xfe,CJo),e(_F,MJo),e(_F,gq),e(gq,EJo),e(_F,yJo),e(B,wJo),e(B,bF),e(bF,kfe),e(kfe,AJo),e(bF,LJo),e(bF,hq),e(hq,BJo),e(bF,xJo),e(B,kJo),e(B,On),e(On,Rfe),e(Rfe,RJo),e(On,SJo),e(On,uq),e(uq,PJo),e(On,$Jo),e(On,pq),e(pq,IJo),e(On,jJo),e(B,DJo),e(B,vF),e(vF,Sfe),e(Sfe,NJo),e(vF,qJo),e(vF,_q),e(_q,OJo),e(vF,GJo),e(B,XJo),e(B,TF),e(TF,Pfe),e(Pfe,VJo),e(TF,zJo),e(TF,bq),e(bq,WJo),e(TF,QJo),e(B,HJo),e(B,FF),e(FF,$fe),e($fe,UJo),e(FF,JJo),e(FF,vq),e(vq,YJo),e(FF,KJo),e(B,ZJo),e(B,CF),e(CF,Ife),e(Ife,eYo),e(CF,oYo),e(CF,Tq),e(Tq,rYo),e(CF,tYo),e(B,aYo),e(B,MF),e(MF,jfe),e(jfe,sYo),e(MF,nYo),e(MF,Fq),e(Fq,lYo),e(MF,iYo),e(B,dYo),e(B,EF),e(EF,Dfe),e(Dfe,cYo),e(EF,mYo),e(EF,Cq),e(Cq,fYo),e(EF,gYo),e(B,hYo),e(B,yF),e(yF,Nfe),e(Nfe,uYo),e(yF,pYo),e(yF,Mq),e(Mq,_Yo),e(yF,bYo),e(B,vYo),e(B,wF),e(wF,qfe),e(qfe,TYo),e(wF,FYo),e(wF,Eq),e(Eq,CYo),e(wF,MYo),e(B,EYo),e(B,AF),e(AF,Ofe),e(Ofe,yYo),e(AF,wYo),e(AF,yq),e(yq,AYo),e(AF,LYo),e(B,BYo),e(B,LF),e(LF,Gfe),e(Gfe,xYo),e(LF,kYo),e(LF,wq),e(wq,RYo),e(LF,SYo),e(B,PYo),e(B,BF),e(BF,Xfe),e(Xfe,$Yo),e(BF,IYo),e(BF,Aq),e(Aq,jYo),e(BF,DYo),e(B,NYo),e(B,xF),e(xF,Vfe),e(Vfe,qYo),e(xF,OYo),e(xF,Lq),e(Lq,GYo),e(xF,XYo),e(B,VYo),e(B,kF),e(kF,zfe),e(zfe,zYo),e(kF,WYo),e(kF,Bq),e(Bq,QYo),e(kF,HYo),e(B,UYo),e(B,RF),e(RF,Wfe),e(Wfe,JYo),e(RF,YYo),e(RF,xq),e(xq,KYo),e(RF,ZYo),e(B,eKo),e(B,SF),e(SF,Qfe),e(Qfe,oKo),e(SF,rKo),e(SF,kq),e(kq,tKo),e(SF,aKo),e(B,sKo),e(B,PF),e(PF,Hfe),e(Hfe,nKo),e(PF,lKo),e(PF,Rq),e(Rq,iKo),e(PF,dKo),e(B,cKo),e(B,$F),e($F,Ufe),e(Ufe,mKo),e($F,fKo),e($F,Sq),e(Sq,gKo),e($F,hKo),e(B,uKo),e(B,IF),e(IF,Jfe),e(Jfe,pKo),e(IF,_Ko),e(IF,Pq),e(Pq,bKo),e(IF,vKo),e(B,TKo),e(B,jF),e(jF,Yfe),e(Yfe,FKo),e(jF,CKo),e(jF,$q),e($q,MKo),e(jF,EKo),e(B,yKo),e(B,DF),e(DF,Kfe),e(Kfe,wKo),e(DF,AKo),e(DF,Iq),e(Iq,LKo),e(DF,BKo),e(B,xKo),e(B,NF),e(NF,Zfe),e(Zfe,kKo),e(NF,RKo),e(NF,jq),e(jq,SKo),e(NF,PKo),e(B,$Ko),e(B,qF),e(qF,ege),e(ege,IKo),e(qF,jKo),e(qF,Dq),e(Dq,DKo),e(qF,NKo),e(B,qKo),e(B,OF),e(OF,oge),e(oge,OKo),e(OF,GKo),e(OF,Nq),e(Nq,XKo),e(OF,VKo),e(B,zKo),e(B,GF),e(GF,rge),e(rge,WKo),e(GF,QKo),e(GF,qq),e(qq,HKo),e(GF,UKo),e(B,JKo),e(B,XF),e(XF,tge),e(tge,YKo),e(XF,KKo),e(XF,Oq),e(Oq,ZKo),e(XF,eZo),e(ho,oZo),e(ho,age),e(age,rZo),e(ho,tZo),g(PA,ho,null),b(d,gke,_),b(d,pc,_),e(pc,VF),e(VF,sge),g($A,sge,null),e(pc,aZo),e(pc,nge),e(nge,sZo),b(d,hke,_),b(d,Tr,_),g(IA,Tr,null),e(Tr,nZo),e(Tr,_c),e(_c,lZo),e(_c,lge),e(lge,iZo),e(_c,dZo),e(_c,ige),e(ige,cZo),e(_c,mZo),e(Tr,fZo),e(Tr,jA),e(jA,gZo),e(jA,dge),e(dge,hZo),e(jA,uZo),e(Tr,pZo),e(Tr,ht),g(DA,ht,null),e(ht,_Zo),e(ht,cge),e(cge,bZo),e(ht,vZo),e(ht,bc),e(bc,TZo),e(bc,mge),e(mge,FZo),e(bc,CZo),e(bc,fge),e(fge,MZo),e(bc,EZo),e(ht,yZo),e(ht,gge),e(gge,wZo),e(ht,AZo),g(NA,ht,null),e(Tr,LZo),e(Tr,uo),g(qA,uo,null),e(uo,BZo),e(uo,hge),e(hge,xZo),e(uo,kZo),e(uo,ps),e(ps,RZo),e(ps,uge),e(uge,SZo),e(ps,PZo),e(ps,pge),e(pge,$Zo),e(ps,IZo),e(ps,_ge),e(_ge,jZo),e(ps,DZo),e(uo,NZo),e(uo,H),e(H,zF),e(zF,bge),e(bge,qZo),e(zF,OZo),e(zF,Gq),e(Gq,GZo),e(zF,XZo),e(H,VZo),e(H,WF),e(WF,vge),e(vge,zZo),e(WF,WZo),e(WF,Xq),e(Xq,QZo),e(WF,HZo),e(H,UZo),e(H,QF),e(QF,Tge),e(Tge,JZo),e(QF,YZo),e(QF,Vq),e(Vq,KZo),e(QF,ZZo),e(H,eer),e(H,HF),e(HF,Fge),e(Fge,oer),e(HF,rer),e(HF,zq),e(zq,ter),e(HF,aer),e(H,ser),e(H,UF),e(UF,Cge),e(Cge,ner),e(UF,ler),e(UF,Wq),e(Wq,ier),e(UF,der),e(H,cer),e(H,JF),e(JF,Mge),e(Mge,mer),e(JF,fer),e(JF,Qq),e(Qq,ger),e(JF,her),e(H,uer),e(H,YF),e(YF,Ege),e(Ege,per),e(YF,_er),e(YF,Hq),e(Hq,ber),e(YF,ver),e(H,Ter),e(H,KF),e(KF,yge),e(yge,Fer),e(KF,Cer),e(KF,Uq),e(Uq,Mer),e(KF,Eer),e(H,yer),e(H,ZF),e(ZF,wge),e(wge,wer),e(ZF,Aer),e(ZF,Jq),e(Jq,Ler),e(ZF,Ber),e(H,xer),e(H,eC),e(eC,Age),e(Age,ker),e(eC,Rer),e(eC,Yq),e(Yq,Ser),e(eC,Per),e(H,$er),e(H,oC),e(oC,Lge),e(Lge,Ier),e(oC,jer),e(oC,Kq),e(Kq,Der),e(oC,Ner),e(H,qer),e(H,rC),e(rC,Bge),e(Bge,Oer),e(rC,Ger),e(rC,Zq),e(Zq,Xer),e(rC,Ver),e(H,zer),e(H,tC),e(tC,xge),e(xge,Wer),e(tC,Qer),e(tC,eO),e(eO,Her),e(tC,Uer),e(H,Jer),e(H,aC),e(aC,kge),e(kge,Yer),e(aC,Ker),e(aC,oO),e(oO,Zer),e(aC,eor),e(H,oor),e(H,sC),e(sC,Rge),e(Rge,ror),e(sC,tor),e(sC,rO),e(rO,aor),e(sC,sor),e(H,nor),e(H,nC),e(nC,Sge),e(Sge,lor),e(nC,ior),e(nC,tO),e(tO,dor),e(nC,cor),e(H,mor),e(H,lC),e(lC,Pge),e(Pge,gor),e(lC,hor),e(lC,aO),e(aO,uor),e(lC,por),e(H,_or),e(H,iC),e(iC,$ge),e($ge,bor),e(iC,vor),e(iC,sO),e(sO,Tor),e(iC,For),e(H,Cor),e(H,dC),e(dC,Ige),e(Ige,Mor),e(dC,Eor),e(dC,nO),e(nO,yor),e(dC,wor),e(H,Aor),e(H,cC),e(cC,jge),e(jge,Lor),e(cC,Bor),e(cC,lO),e(lO,xor),e(cC,kor),e(H,Ror),e(H,mC),e(mC,Dge),e(Dge,Sor),e(mC,Por),e(mC,iO),e(iO,$or),e(mC,Ior),e(H,jor),e(H,fC),e(fC,Nge),e(Nge,Dor),e(fC,Nor),e(fC,dO),e(dO,qor),e(fC,Oor),e(uo,Gor),e(uo,qge),e(qge,Xor),e(uo,Vor),g(OA,uo,null),b(d,uke,_),b(d,vc,_),e(vc,gC),e(gC,Oge),g(GA,Oge,null),e(vc,zor),e(vc,Gge),e(Gge,Wor),b(d,pke,_),b(d,Fr,_),g(XA,Fr,null),e(Fr,Qor),e(Fr,Tc),e(Tc,Hor),e(Tc,Xge),e(Xge,Uor),e(Tc,Jor),e(Tc,Vge),e(Vge,Yor),e(Tc,Kor),e(Fr,Zor),e(Fr,VA),e(VA,err),e(VA,zge),e(zge,orr),e(VA,rrr),e(Fr,trr),e(Fr,ut),g(zA,ut,null),e(ut,arr),e(ut,Wge),e(Wge,srr),e(ut,nrr),e(ut,Fc),e(Fc,lrr),e(Fc,Qge),e(Qge,irr),e(Fc,drr),e(Fc,Hge),e(Hge,crr),e(Fc,mrr),e(ut,frr),e(ut,Uge),e(Uge,grr),e(ut,hrr),g(WA,ut,null),e(Fr,urr),e(Fr,po),g(QA,po,null),e(po,prr),e(po,Jge),e(Jge,_rr),e(po,brr),e(po,_s),e(_s,vrr),e(_s,Yge),e(Yge,Trr),e(_s,Frr),e(_s,Kge),e(Kge,Crr),e(_s,Mrr),e(_s,Zge),e(Zge,Err),e(_s,yrr),e(po,wrr),e(po,fe),e(fe,hC),e(hC,ehe),e(ehe,Arr),e(hC,Lrr),e(hC,cO),e(cO,Brr),e(hC,xrr),e(fe,krr),e(fe,uC),e(uC,ohe),e(ohe,Rrr),e(uC,Srr),e(uC,mO),e(mO,Prr),e(uC,$rr),e(fe,Irr),e(fe,pC),e(pC,rhe),e(rhe,jrr),e(pC,Drr),e(pC,fO),e(fO,Nrr),e(pC,qrr),e(fe,Orr),e(fe,_C),e(_C,the),e(the,Grr),e(_C,Xrr),e(_C,gO),e(gO,Vrr),e(_C,zrr),e(fe,Wrr),e(fe,bC),e(bC,ahe),e(ahe,Qrr),e(bC,Hrr),e(bC,hO),e(hO,Urr),e(bC,Jrr),e(fe,Yrr),e(fe,vC),e(vC,she),e(she,Krr),e(vC,Zrr),e(vC,uO),e(uO,etr),e(vC,otr),e(fe,rtr),e(fe,TC),e(TC,nhe),e(nhe,ttr),e(TC,atr),e(TC,pO),e(pO,str),e(TC,ntr),e(fe,ltr),e(fe,FC),e(FC,lhe),e(lhe,itr),e(FC,dtr),e(FC,_O),e(_O,ctr),e(FC,mtr),e(fe,ftr),e(fe,CC),e(CC,ihe),e(ihe,gtr),e(CC,htr),e(CC,bO),e(bO,utr),e(CC,ptr),e(fe,_tr),e(fe,MC),e(MC,dhe),e(dhe,btr),e(MC,vtr),e(MC,vO),e(vO,Ttr),e(MC,Ftr),e(fe,Ctr),e(fe,EC),e(EC,che),e(che,Mtr),e(EC,Etr),e(EC,TO),e(TO,ytr),e(EC,wtr),e(po,Atr),e(po,mhe),e(mhe,Ltr),e(po,Btr),g(HA,po,null),b(d,_ke,_),b(d,Cc,_),e(Cc,yC),e(yC,fhe),g(UA,fhe,null),e(Cc,xtr),e(Cc,ghe),e(ghe,ktr),b(d,bke,_),b(d,Cr,_),g(JA,Cr,null),e(Cr,Rtr),e(Cr,Mc),e(Mc,Str),e(Mc,hhe),e(hhe,Ptr),e(Mc,$tr),e(Mc,uhe),e(uhe,Itr),e(Mc,jtr),e(Cr,Dtr),e(Cr,YA),e(YA,Ntr),e(YA,phe),e(phe,qtr),e(YA,Otr),e(Cr,Gtr),e(Cr,pt),g(KA,pt,null),e(pt,Xtr),e(pt,_he),e(_he,Vtr),e(pt,ztr),e(pt,Ec),e(Ec,Wtr),e(Ec,bhe),e(bhe,Qtr),e(Ec,Htr),e(Ec,vhe),e(vhe,Utr),e(Ec,Jtr),e(pt,Ytr),e(pt,The),e(The,Ktr),e(pt,Ztr),g(ZA,pt,null),e(Cr,ear),e(Cr,_o),g(e0,_o,null),e(_o,oar),e(_o,Fhe),e(Fhe,rar),e(_o,tar),e(_o,bs),e(bs,aar),e(bs,Che),e(Che,sar),e(bs,nar),e(bs,Mhe),e(Mhe,lar),e(bs,iar),e(bs,Ehe),e(Ehe,dar),e(bs,car),e(_o,mar),e(_o,o0),e(o0,wC),e(wC,yhe),e(yhe,far),e(wC,gar),e(wC,FO),e(FO,har),e(wC,uar),e(o0,par),e(o0,AC),e(AC,whe),e(whe,_ar),e(AC,bar),e(AC,CO),e(CO,Tar),e(AC,Far),e(_o,Car),e(_o,Ahe),e(Ahe,Mar),e(_o,Ear),g(r0,_o,null),b(d,vke,_),b(d,yc,_),e(yc,LC),e(LC,Lhe),g(t0,Lhe,null),e(yc,yar),e(yc,Bhe),e(Bhe,war),b(d,Tke,_),b(d,Mr,_),g(a0,Mr,null),e(Mr,Aar),e(Mr,wc),e(wc,Lar),e(wc,xhe),e(xhe,Bar),e(wc,xar),e(wc,khe),e(khe,kar),e(wc,Rar),e(Mr,Sar),e(Mr,s0),e(s0,Par),e(s0,Rhe),e(Rhe,$ar),e(s0,Iar),e(Mr,jar),e(Mr,_t),g(n0,_t,null),e(_t,Dar),e(_t,She),e(She,Nar),e(_t,qar),e(_t,Ac),e(Ac,Oar),e(Ac,Phe),e(Phe,Gar),e(Ac,Xar),e(Ac,$he),e($he,Var),e(Ac,zar),e(_t,War),e(_t,Ihe),e(Ihe,Qar),e(_t,Har),g(l0,_t,null),e(Mr,Uar),e(Mr,bo),g(i0,bo,null),e(bo,Jar),e(bo,jhe),e(jhe,Yar),e(bo,Kar),e(bo,vs),e(vs,Zar),e(vs,Dhe),e(Dhe,esr),e(vs,osr),e(vs,Nhe),e(Nhe,rsr),e(vs,tsr),e(vs,qhe),e(qhe,asr),e(vs,ssr),e(bo,nsr),e(bo,Y),e(Y,BC),e(BC,Ohe),e(Ohe,lsr),e(BC,isr),e(BC,MO),e(MO,dsr),e(BC,csr),e(Y,msr),e(Y,xC),e(xC,Ghe),e(Ghe,fsr),e(xC,gsr),e(xC,EO),e(EO,hsr),e(xC,usr),e(Y,psr),e(Y,kC),e(kC,Xhe),e(Xhe,_sr),e(kC,bsr),e(kC,yO),e(yO,vsr),e(kC,Tsr),e(Y,Fsr),e(Y,RC),e(RC,Vhe),e(Vhe,Csr),e(RC,Msr),e(RC,wO),e(wO,Esr),e(RC,ysr),e(Y,wsr),e(Y,SC),e(SC,zhe),e(zhe,Asr),e(SC,Lsr),e(SC,AO),e(AO,Bsr),e(SC,xsr),e(Y,ksr),e(Y,PC),e(PC,Whe),e(Whe,Rsr),e(PC,Ssr),e(PC,LO),e(LO,Psr),e(PC,$sr),e(Y,Isr),e(Y,$C),e($C,Qhe),e(Qhe,jsr),e($C,Dsr),e($C,BO),e(BO,Nsr),e($C,qsr),e(Y,Osr),e(Y,IC),e(IC,Hhe),e(Hhe,Gsr),e(IC,Xsr),e(IC,xO),e(xO,Vsr),e(IC,zsr),e(Y,Wsr),e(Y,jC),e(jC,Uhe),e(Uhe,Qsr),e(jC,Hsr),e(jC,kO),e(kO,Usr),e(jC,Jsr),e(Y,Ysr),e(Y,DC),e(DC,Jhe),e(Jhe,Ksr),e(DC,Zsr),e(DC,RO),e(RO,enr),e(DC,onr),e(Y,rnr),e(Y,NC),e(NC,Yhe),e(Yhe,tnr),e(NC,anr),e(NC,SO),e(SO,snr),e(NC,nnr),e(Y,lnr),e(Y,qC),e(qC,Khe),e(Khe,inr),e(qC,dnr),e(qC,PO),e(PO,cnr),e(qC,mnr),e(Y,fnr),e(Y,OC),e(OC,Zhe),e(Zhe,gnr),e(OC,hnr),e(OC,$O),e($O,unr),e(OC,pnr),e(Y,_nr),e(Y,GC),e(GC,eue),e(eue,bnr),e(GC,vnr),e(GC,IO),e(IO,Tnr),e(GC,Fnr),e(Y,Cnr),e(Y,XC),e(XC,oue),e(oue,Mnr),e(XC,Enr),e(XC,jO),e(jO,ynr),e(XC,wnr),e(Y,Anr),e(Y,VC),e(VC,rue),e(rue,Lnr),e(VC,Bnr),e(VC,DO),e(DO,xnr),e(VC,knr),e(Y,Rnr),e(Y,zC),e(zC,tue),e(tue,Snr),e(zC,Pnr),e(zC,NO),e(NO,$nr),e(zC,Inr),e(Y,jnr),e(Y,WC),e(WC,aue),e(aue,Dnr),e(WC,Nnr),e(WC,qO),e(qO,qnr),e(WC,Onr),e(Y,Gnr),e(Y,QC),e(QC,sue),e(sue,Xnr),e(QC,Vnr),e(QC,OO),e(OO,znr),e(QC,Wnr),e(Y,Qnr),e(Y,HC),e(HC,nue),e(nue,Hnr),e(HC,Unr),e(HC,GO),e(GO,Jnr),e(HC,Ynr),e(bo,Knr),e(bo,lue),e(lue,Znr),e(bo,elr),g(d0,bo,null),b(d,Fke,_),b(d,Lc,_),e(Lc,UC),e(UC,iue),g(c0,iue,null),e(Lc,olr),e(Lc,due),e(due,rlr),b(d,Cke,_),b(d,Er,_),g(m0,Er,null),e(Er,tlr),e(Er,Bc),e(Bc,alr),e(Bc,cue),e(cue,slr),e(Bc,nlr),e(Bc,mue),e(mue,llr),e(Bc,ilr),e(Er,dlr),e(Er,f0),e(f0,clr),e(f0,fue),e(fue,mlr),e(f0,flr),e(Er,glr),e(Er,bt),g(g0,bt,null),e(bt,hlr),e(bt,gue),e(gue,ulr),e(bt,plr),e(bt,xc),e(xc,_lr),e(xc,hue),e(hue,blr),e(xc,vlr),e(xc,uue),e(uue,Tlr),e(xc,Flr),e(bt,Clr),e(bt,pue),e(pue,Mlr),e(bt,Elr),g(h0,bt,null),e(Er,ylr),e(Er,vo),g(u0,vo,null),e(vo,wlr),e(vo,_ue),e(_ue,Alr),e(vo,Llr),e(vo,Ts),e(Ts,Blr),e(Ts,bue),e(bue,xlr),e(Ts,klr),e(Ts,vue),e(vue,Rlr),e(Ts,Slr),e(Ts,Tue),e(Tue,Plr),e(Ts,$lr),e(vo,Ilr),e(vo,pe),e(pe,JC),e(JC,Fue),e(Fue,jlr),e(JC,Dlr),e(JC,XO),e(XO,Nlr),e(JC,qlr),e(pe,Olr),e(pe,YC),e(YC,Cue),e(Cue,Glr),e(YC,Xlr),e(YC,VO),e(VO,Vlr),e(YC,zlr),e(pe,Wlr),e(pe,KC),e(KC,Mue),e(Mue,Qlr),e(KC,Hlr),e(KC,zO),e(zO,Ulr),e(KC,Jlr),e(pe,Ylr),e(pe,ZC),e(ZC,Eue),e(Eue,Klr),e(ZC,Zlr),e(ZC,WO),e(WO,eir),e(ZC,oir),e(pe,rir),e(pe,eM),e(eM,yue),e(yue,tir),e(eM,air),e(eM,QO),e(QO,sir),e(eM,nir),e(pe,lir),e(pe,oM),e(oM,wue),e(wue,iir),e(oM,dir),e(oM,HO),e(HO,cir),e(oM,mir),e(pe,fir),e(pe,rM),e(rM,Aue),e(Aue,gir),e(rM,hir),e(rM,UO),e(UO,uir),e(rM,pir),e(pe,_ir),e(pe,tM),e(tM,Lue),e(Lue,bir),e(tM,vir),e(tM,JO),e(JO,Tir),e(tM,Fir),e(pe,Cir),e(pe,aM),e(aM,Bue),e(Bue,Mir),e(aM,Eir),e(aM,YO),e(YO,yir),e(aM,wir),e(pe,Air),e(pe,sM),e(sM,xue),e(xue,Lir),e(sM,Bir),e(sM,KO),e(KO,xir),e(sM,kir),e(vo,Rir),e(vo,kue),e(kue,Sir),e(vo,Pir),g(p0,vo,null),b(d,Mke,_),b(d,kc,_),e(kc,nM),e(nM,Rue),g(_0,Rue,null),e(kc,$ir),e(kc,Sue),e(Sue,Iir),b(d,Eke,_),b(d,yr,_),g(b0,yr,null),e(yr,jir),e(yr,Rc),e(Rc,Dir),e(Rc,Pue),e(Pue,Nir),e(Rc,qir),e(Rc,$ue),e($ue,Oir),e(Rc,Gir),e(yr,Xir),e(yr,v0),e(v0,Vir),e(v0,Iue),e(Iue,zir),e(v0,Wir),e(yr,Qir),e(yr,vt),g(T0,vt,null),e(vt,Hir),e(vt,jue),e(jue,Uir),e(vt,Jir),e(vt,Sc),e(Sc,Yir),e(Sc,Due),e(Due,Kir),e(Sc,Zir),e(Sc,Nue),e(Nue,edr),e(Sc,odr),e(vt,rdr),e(vt,que),e(que,tdr),e(vt,adr),g(F0,vt,null),e(yr,sdr),e(yr,To),g(C0,To,null),e(To,ndr),e(To,Oue),e(Oue,ldr),e(To,idr),e(To,Fs),e(Fs,ddr),e(Fs,Gue),e(Gue,cdr),e(Fs,mdr),e(Fs,Xue),e(Xue,fdr),e(Fs,gdr),e(Fs,Vue),e(Vue,hdr),e(Fs,udr),e(To,pdr),e(To,V),e(V,lM),e(lM,zue),e(zue,_dr),e(lM,bdr),e(lM,ZO),e(ZO,vdr),e(lM,Tdr),e(V,Fdr),e(V,iM),e(iM,Wue),e(Wue,Cdr),e(iM,Mdr),e(iM,eG),e(eG,Edr),e(iM,ydr),e(V,wdr),e(V,dM),e(dM,Que),e(Que,Adr),e(dM,Ldr),e(dM,oG),e(oG,Bdr),e(dM,xdr),e(V,kdr),e(V,cM),e(cM,Hue),e(Hue,Rdr),e(cM,Sdr),e(cM,rG),e(rG,Pdr),e(cM,$dr),e(V,Idr),e(V,mM),e(mM,Uue),e(Uue,jdr),e(mM,Ddr),e(mM,tG),e(tG,Ndr),e(mM,qdr),e(V,Odr),e(V,fM),e(fM,Jue),e(Jue,Gdr),e(fM,Xdr),e(fM,aG),e(aG,Vdr),e(fM,zdr),e(V,Wdr),e(V,gM),e(gM,Yue),e(Yue,Qdr),e(gM,Hdr),e(gM,sG),e(sG,Udr),e(gM,Jdr),e(V,Ydr),e(V,hM),e(hM,Kue),e(Kue,Kdr),e(hM,Zdr),e(hM,nG),e(nG,ecr),e(hM,ocr),e(V,rcr),e(V,uM),e(uM,Zue),e(Zue,tcr),e(uM,acr),e(uM,lG),e(lG,scr),e(uM,ncr),e(V,lcr),e(V,pM),e(pM,epe),e(epe,icr),e(pM,dcr),e(pM,iG),e(iG,ccr),e(pM,mcr),e(V,fcr),e(V,_M),e(_M,ope),e(ope,gcr),e(_M,hcr),e(_M,dG),e(dG,ucr),e(_M,pcr),e(V,_cr),e(V,bM),e(bM,rpe),e(rpe,bcr),e(bM,vcr),e(bM,cG),e(cG,Tcr),e(bM,Fcr),e(V,Ccr),e(V,vM),e(vM,tpe),e(tpe,Mcr),e(vM,Ecr),e(vM,mG),e(mG,ycr),e(vM,wcr),e(V,Acr),e(V,TM),e(TM,ape),e(ape,Lcr),e(TM,Bcr),e(TM,fG),e(fG,xcr),e(TM,kcr),e(V,Rcr),e(V,FM),e(FM,spe),e(spe,Scr),e(FM,Pcr),e(FM,gG),e(gG,$cr),e(FM,Icr),e(V,jcr),e(V,CM),e(CM,npe),e(npe,Dcr),e(CM,Ncr),e(CM,hG),e(hG,qcr),e(CM,Ocr),e(V,Gcr),e(V,MM),e(MM,lpe),e(lpe,Xcr),e(MM,Vcr),e(MM,uG),e(uG,zcr),e(MM,Wcr),e(V,Qcr),e(V,EM),e(EM,ipe),e(ipe,Hcr),e(EM,Ucr),e(EM,pG),e(pG,Jcr),e(EM,Ycr),e(V,Kcr),e(V,yM),e(yM,dpe),e(dpe,Zcr),e(yM,emr),e(yM,_G),e(_G,omr),e(yM,rmr),e(V,tmr),e(V,wM),e(wM,cpe),e(cpe,amr),e(wM,smr),e(wM,bG),e(bG,nmr),e(wM,lmr),e(V,imr),e(V,AM),e(AM,mpe),e(mpe,dmr),e(AM,cmr),e(AM,vG),e(vG,mmr),e(AM,fmr),e(V,gmr),e(V,LM),e(LM,fpe),e(fpe,hmr),e(LM,umr),e(LM,TG),e(TG,pmr),e(LM,_mr),e(V,bmr),e(V,BM),e(BM,gpe),e(gpe,vmr),e(BM,Tmr),e(BM,FG),e(FG,Fmr),e(BM,Cmr),e(V,Mmr),e(V,xM),e(xM,hpe),e(hpe,Emr),e(xM,ymr),e(xM,CG),e(CG,wmr),e(xM,Amr),e(V,Lmr),e(V,kM),e(kM,upe),e(upe,Bmr),e(kM,xmr),e(kM,MG),e(MG,kmr),e(kM,Rmr),e(To,Smr),e(To,ppe),e(ppe,Pmr),e(To,$mr),g(M0,To,null),b(d,yke,_),b(d,Pc,_),e(Pc,RM),e(RM,_pe),g(E0,_pe,null),e(Pc,Imr),e(Pc,bpe),e(bpe,jmr),b(d,wke,_),b(d,wr,_),g(y0,wr,null),e(wr,Dmr),e(wr,$c),e($c,Nmr),e($c,vpe),e(vpe,qmr),e($c,Omr),e($c,Tpe),e(Tpe,Gmr),e($c,Xmr),e(wr,Vmr),e(wr,w0),e(w0,zmr),e(w0,Fpe),e(Fpe,Wmr),e(w0,Qmr),e(wr,Hmr),e(wr,Tt),g(A0,Tt,null),e(Tt,Umr),e(Tt,Cpe),e(Cpe,Jmr),e(Tt,Ymr),e(Tt,Ic),e(Ic,Kmr),e(Ic,Mpe),e(Mpe,Zmr),e(Ic,efr),e(Ic,Epe),e(Epe,ofr),e(Ic,rfr),e(Tt,tfr),e(Tt,ype),e(ype,afr),e(Tt,sfr),g(L0,Tt,null),e(wr,nfr),e(wr,Fo),g(B0,Fo,null),e(Fo,lfr),e(Fo,wpe),e(wpe,ifr),e(Fo,dfr),e(Fo,Cs),e(Cs,cfr),e(Cs,Ape),e(Ape,mfr),e(Cs,ffr),e(Cs,Lpe),e(Lpe,gfr),e(Cs,hfr),e(Cs,Bpe),e(Bpe,ufr),e(Cs,pfr),e(Fo,_fr),e(Fo,te),e(te,SM),e(SM,xpe),e(xpe,bfr),e(SM,vfr),e(SM,EG),e(EG,Tfr),e(SM,Ffr),e(te,Cfr),e(te,PM),e(PM,kpe),e(kpe,Mfr),e(PM,Efr),e(PM,yG),e(yG,yfr),e(PM,wfr),e(te,Afr),e(te,$M),e($M,Rpe),e(Rpe,Lfr),e($M,Bfr),e($M,wG),e(wG,xfr),e($M,kfr),e(te,Rfr),e(te,IM),e(IM,Spe),e(Spe,Sfr),e(IM,Pfr),e(IM,AG),e(AG,$fr),e(IM,Ifr),e(te,jfr),e(te,jM),e(jM,Ppe),e(Ppe,Dfr),e(jM,Nfr),e(jM,LG),e(LG,qfr),e(jM,Ofr),e(te,Gfr),e(te,DM),e(DM,$pe),e($pe,Xfr),e(DM,Vfr),e(DM,BG),e(BG,zfr),e(DM,Wfr),e(te,Qfr),e(te,NM),e(NM,Ipe),e(Ipe,Hfr),e(NM,Ufr),e(NM,xG),e(xG,Jfr),e(NM,Yfr),e(te,Kfr),e(te,qM),e(qM,jpe),e(jpe,Zfr),e(qM,egr),e(qM,kG),e(kG,ogr),e(qM,rgr),e(te,tgr),e(te,OM),e(OM,Dpe),e(Dpe,agr),e(OM,sgr),e(OM,RG),e(RG,ngr),e(OM,lgr),e(te,igr),e(te,GM),e(GM,Npe),e(Npe,dgr),e(GM,cgr),e(GM,SG),e(SG,mgr),e(GM,fgr),e(te,ggr),e(te,XM),e(XM,qpe),e(qpe,hgr),e(XM,ugr),e(XM,PG),e(PG,pgr),e(XM,_gr),e(te,bgr),e(te,VM),e(VM,Ope),e(Ope,vgr),e(VM,Tgr),e(VM,$G),e($G,Fgr),e(VM,Cgr),e(te,Mgr),e(te,zM),e(zM,Gpe),e(Gpe,Egr),e(zM,ygr),e(zM,IG),e(IG,wgr),e(zM,Agr),e(te,Lgr),e(te,WM),e(WM,Xpe),e(Xpe,Bgr),e(WM,xgr),e(WM,jG),e(jG,kgr),e(WM,Rgr),e(te,Sgr),e(te,QM),e(QM,Vpe),e(Vpe,Pgr),e(QM,$gr),e(QM,DG),e(DG,Igr),e(QM,jgr),e(te,Dgr),e(te,HM),e(HM,zpe),e(zpe,Ngr),e(HM,qgr),e(HM,NG),e(NG,Ogr),e(HM,Ggr),e(te,Xgr),e(te,UM),e(UM,Wpe),e(Wpe,Vgr),e(UM,zgr),e(UM,qG),e(qG,Wgr),e(UM,Qgr),e(Fo,Hgr),e(Fo,Qpe),e(Qpe,Ugr),e(Fo,Jgr),g(x0,Fo,null),b(d,Ake,_),b(d,jc,_),e(jc,JM),e(JM,Hpe),g(k0,Hpe,null),e(jc,Ygr),e(jc,Upe),e(Upe,Kgr),b(d,Lke,_),b(d,Ar,_),g(R0,Ar,null),e(Ar,Zgr),e(Ar,Dc),e(Dc,ehr),e(Dc,Jpe),e(Jpe,ohr),e(Dc,rhr),e(Dc,Ype),e(Ype,thr),e(Dc,ahr),e(Ar,shr),e(Ar,S0),e(S0,nhr),e(S0,Kpe),e(Kpe,lhr),e(S0,ihr),e(Ar,dhr),e(Ar,Ft),g(P0,Ft,null),e(Ft,chr),e(Ft,Zpe),e(Zpe,mhr),e(Ft,fhr),e(Ft,Nc),e(Nc,ghr),e(Nc,e_e),e(e_e,hhr),e(Nc,uhr),e(Nc,o_e),e(o_e,phr),e(Nc,_hr),e(Ft,bhr),e(Ft,r_e),e(r_e,vhr),e(Ft,Thr),g($0,Ft,null),e(Ar,Fhr),e(Ar,Co),g(I0,Co,null),e(Co,Chr),e(Co,t_e),e(t_e,Mhr),e(Co,Ehr),e(Co,Ms),e(Ms,yhr),e(Ms,a_e),e(a_e,whr),e(Ms,Ahr),e(Ms,s_e),e(s_e,Lhr),e(Ms,Bhr),e(Ms,n_e),e(n_e,xhr),e(Ms,khr),e(Co,Rhr),e(Co,l_e),e(l_e,YM),e(YM,i_e),e(i_e,Shr),e(YM,Phr),e(YM,OG),e(OG,$hr),e(YM,Ihr),e(Co,jhr),e(Co,d_e),e(d_e,Dhr),e(Co,Nhr),g(j0,Co,null),b(d,Bke,_),b(d,qc,_),e(qc,KM),e(KM,c_e),g(D0,c_e,null),e(qc,qhr),e(qc,m_e),e(m_e,Ohr),b(d,xke,_),b(d,Lr,_),g(N0,Lr,null),e(Lr,Ghr),e(Lr,Oc),e(Oc,Xhr),e(Oc,f_e),e(f_e,Vhr),e(Oc,zhr),e(Oc,g_e),e(g_e,Whr),e(Oc,Qhr),e(Lr,Hhr),e(Lr,q0),e(q0,Uhr),e(q0,h_e),e(h_e,Jhr),e(q0,Yhr),e(Lr,Khr),e(Lr,Ct),g(O0,Ct,null),e(Ct,Zhr),e(Ct,u_e),e(u_e,eur),e(Ct,our),e(Ct,Gc),e(Gc,rur),e(Gc,p_e),e(p_e,tur),e(Gc,aur),e(Gc,__e),e(__e,sur),e(Gc,nur),e(Ct,lur),e(Ct,b_e),e(b_e,iur),e(Ct,dur),g(G0,Ct,null),e(Lr,cur),e(Lr,Mo),g(X0,Mo,null),e(Mo,mur),e(Mo,v_e),e(v_e,fur),e(Mo,gur),e(Mo,Es),e(Es,hur),e(Es,T_e),e(T_e,uur),e(Es,pur),e(Es,F_e),e(F_e,_ur),e(Es,bur),e(Es,C_e),e(C_e,vur),e(Es,Tur),e(Mo,Fur),e(Mo,K),e(K,ZM),e(ZM,M_e),e(M_e,Cur),e(ZM,Mur),e(ZM,GG),e(GG,Eur),e(ZM,yur),e(K,wur),e(K,e4),e(e4,E_e),e(E_e,Aur),e(e4,Lur),e(e4,XG),e(XG,Bur),e(e4,xur),e(K,kur),e(K,o4),e(o4,y_e),e(y_e,Rur),e(o4,Sur),e(o4,VG),e(VG,Pur),e(o4,$ur),e(K,Iur),e(K,r4),e(r4,w_e),e(w_e,jur),e(r4,Dur),e(r4,zG),e(zG,Nur),e(r4,qur),e(K,Our),e(K,t4),e(t4,A_e),e(A_e,Gur),e(t4,Xur),e(t4,WG),e(WG,Vur),e(t4,zur),e(K,Wur),e(K,a4),e(a4,L_e),e(L_e,Qur),e(a4,Hur),e(a4,QG),e(QG,Uur),e(a4,Jur),e(K,Yur),e(K,s4),e(s4,B_e),e(B_e,Kur),e(s4,Zur),e(s4,HG),e(HG,epr),e(s4,opr),e(K,rpr),e(K,n4),e(n4,x_e),e(x_e,tpr),e(n4,apr),e(n4,UG),e(UG,spr),e(n4,npr),e(K,lpr),e(K,l4),e(l4,k_e),e(k_e,ipr),e(l4,dpr),e(l4,JG),e(JG,cpr),e(l4,mpr),e(K,fpr),e(K,i4),e(i4,R_e),e(R_e,gpr),e(i4,hpr),e(i4,YG),e(YG,upr),e(i4,ppr),e(K,_pr),e(K,d4),e(d4,S_e),e(S_e,bpr),e(d4,vpr),e(d4,KG),e(KG,Tpr),e(d4,Fpr),e(K,Cpr),e(K,c4),e(c4,P_e),e(P_e,Mpr),e(c4,Epr),e(c4,ZG),e(ZG,ypr),e(c4,wpr),e(K,Apr),e(K,m4),e(m4,$_e),e($_e,Lpr),e(m4,Bpr),e(m4,eX),e(eX,xpr),e(m4,kpr),e(K,Rpr),e(K,f4),e(f4,I_e),e(I_e,Spr),e(f4,Ppr),e(f4,oX),e(oX,$pr),e(f4,Ipr),e(K,jpr),e(K,g4),e(g4,j_e),e(j_e,Dpr),e(g4,Npr),e(g4,rX),e(rX,qpr),e(g4,Opr),e(K,Gpr),e(K,h4),e(h4,D_e),e(D_e,Xpr),e(h4,Vpr),e(h4,tX),e(tX,zpr),e(h4,Wpr),e(K,Qpr),e(K,u4),e(u4,N_e),e(N_e,Hpr),e(u4,Upr),e(u4,aX),e(aX,Jpr),e(u4,Ypr),e(K,Kpr),e(K,p4),e(p4,q_e),e(q_e,Zpr),e(p4,e_r),e(p4,sX),e(sX,o_r),e(p4,r_r),e(K,t_r),e(K,_4),e(_4,O_e),e(O_e,a_r),e(_4,s_r),e(_4,nX),e(nX,n_r),e(_4,l_r),e(K,i_r),e(K,b4),e(b4,G_e),e(G_e,d_r),e(b4,c_r),e(b4,lX),e(lX,m_r),e(b4,f_r),e(Mo,g_r),e(Mo,X_e),e(X_e,h_r),e(Mo,u_r),g(V0,Mo,null),b(d,kke,_),b(d,Xc,_),e(Xc,v4),e(v4,V_e),g(z0,V_e,null),e(Xc,p_r),e(Xc,z_e),e(z_e,__r),b(d,Rke,_),b(d,Br,_),g(W0,Br,null),e(Br,b_r),e(Br,Vc),e(Vc,v_r),e(Vc,W_e),e(W_e,T_r),e(Vc,F_r),e(Vc,Q_e),e(Q_e,C_r),e(Vc,M_r),e(Br,E_r),e(Br,Q0),e(Q0,y_r),e(Q0,H_e),e(H_e,w_r),e(Q0,A_r),e(Br,L_r),e(Br,Mt),g(H0,Mt,null),e(Mt,B_r),e(Mt,U_e),e(U_e,x_r),e(Mt,k_r),e(Mt,zc),e(zc,R_r),e(zc,J_e),e(J_e,S_r),e(zc,P_r),e(zc,Y_e),e(Y_e,$_r),e(zc,I_r),e(Mt,j_r),e(Mt,K_e),e(K_e,D_r),e(Mt,N_r),g(U0,Mt,null),e(Br,q_r),e(Br,Eo),g(J0,Eo,null),e(Eo,O_r),e(Eo,Z_e),e(Z_e,G_r),e(Eo,X_r),e(Eo,ys),e(ys,V_r),e(ys,ebe),e(ebe,z_r),e(ys,W_r),e(ys,obe),e(obe,Q_r),e(ys,H_r),e(ys,rbe),e(rbe,U_r),e(ys,J_r),e(Eo,Y_r),e(Eo,Z),e(Z,T4),e(T4,tbe),e(tbe,K_r),e(T4,Z_r),e(T4,iX),e(iX,ebr),e(T4,obr),e(Z,rbr),e(Z,F4),e(F4,abe),e(abe,tbr),e(F4,abr),e(F4,dX),e(dX,sbr),e(F4,nbr),e(Z,lbr),e(Z,C4),e(C4,sbe),e(sbe,ibr),e(C4,dbr),e(C4,cX),e(cX,cbr),e(C4,mbr),e(Z,fbr),e(Z,M4),e(M4,nbe),e(nbe,gbr),e(M4,hbr),e(M4,mX),e(mX,ubr),e(M4,pbr),e(Z,_br),e(Z,E4),e(E4,lbe),e(lbe,bbr),e(E4,vbr),e(E4,fX),e(fX,Tbr),e(E4,Fbr),e(Z,Cbr),e(Z,y4),e(y4,ibe),e(ibe,Mbr),e(y4,Ebr),e(y4,gX),e(gX,ybr),e(y4,wbr),e(Z,Abr),e(Z,w4),e(w4,dbe),e(dbe,Lbr),e(w4,Bbr),e(w4,hX),e(hX,xbr),e(w4,kbr),e(Z,Rbr),e(Z,A4),e(A4,cbe),e(cbe,Sbr),e(A4,Pbr),e(A4,uX),e(uX,$br),e(A4,Ibr),e(Z,jbr),e(Z,L4),e(L4,mbe),e(mbe,Dbr),e(L4,Nbr),e(L4,pX),e(pX,qbr),e(L4,Obr),e(Z,Gbr),e(Z,B4),e(B4,fbe),e(fbe,Xbr),e(B4,Vbr),e(B4,_X),e(_X,zbr),e(B4,Wbr),e(Z,Qbr),e(Z,x4),e(x4,gbe),e(gbe,Hbr),e(x4,Ubr),e(x4,bX),e(bX,Jbr),e(x4,Ybr),e(Z,Kbr),e(Z,k4),e(k4,hbe),e(hbe,Zbr),e(k4,e2r),e(k4,vX),e(vX,o2r),e(k4,r2r),e(Z,t2r),e(Z,R4),e(R4,ube),e(ube,a2r),e(R4,s2r),e(R4,TX),e(TX,n2r),e(R4,l2r),e(Z,i2r),e(Z,S4),e(S4,pbe),e(pbe,d2r),e(S4,c2r),e(S4,FX),e(FX,m2r),e(S4,f2r),e(Z,g2r),e(Z,P4),e(P4,_be),e(_be,h2r),e(P4,u2r),e(P4,CX),e(CX,p2r),e(P4,_2r),e(Z,b2r),e(Z,$4),e($4,bbe),e(bbe,v2r),e($4,T2r),e($4,MX),e(MX,F2r),e($4,C2r),e(Z,M2r),e(Z,I4),e(I4,vbe),e(vbe,E2r),e(I4,y2r),e(I4,EX),e(EX,w2r),e(I4,A2r),e(Z,L2r),e(Z,j4),e(j4,Tbe),e(Tbe,B2r),e(j4,x2r),e(j4,yX),e(yX,k2r),e(j4,R2r),e(Z,S2r),e(Z,D4),e(D4,Fbe),e(Fbe,P2r),e(D4,$2r),e(D4,wX),e(wX,I2r),e(D4,j2r),e(Eo,D2r),e(Eo,Cbe),e(Cbe,N2r),e(Eo,q2r),g(Y0,Eo,null),b(d,Ske,_),b(d,Wc,_),e(Wc,N4),e(N4,Mbe),g(K0,Mbe,null),e(Wc,O2r),e(Wc,Ebe),e(Ebe,G2r),b(d,Pke,_),b(d,xr,_),g(Z0,xr,null),e(xr,X2r),e(xr,Qc),e(Qc,V2r),e(Qc,ybe),e(ybe,z2r),e(Qc,W2r),e(Qc,wbe),e(wbe,Q2r),e(Qc,H2r),e(xr,U2r),e(xr,eL),e(eL,J2r),e(eL,Abe),e(Abe,Y2r),e(eL,K2r),e(xr,Z2r),e(xr,Et),g(oL,Et,null),e(Et,evr),e(Et,Lbe),e(Lbe,ovr),e(Et,rvr),e(Et,Hc),e(Hc,tvr),e(Hc,Bbe),e(Bbe,avr),e(Hc,svr),e(Hc,xbe),e(xbe,nvr),e(Hc,lvr),e(Et,ivr),e(Et,kbe),e(kbe,dvr),e(Et,cvr),g(rL,Et,null),e(xr,mvr),e(xr,yo),g(tL,yo,null),e(yo,fvr),e(yo,Rbe),e(Rbe,gvr),e(yo,hvr),e(yo,ws),e(ws,uvr),e(ws,Sbe),e(Sbe,pvr),e(ws,_vr),e(ws,Pbe),e(Pbe,bvr),e(ws,vvr),e(ws,$be),e($be,Tvr),e(ws,Fvr),e(yo,Cvr),e(yo,Ibe),e(Ibe,q4),e(q4,jbe),e(jbe,Mvr),e(q4,Evr),e(q4,AX),e(AX,yvr),e(q4,wvr),e(yo,Avr),e(yo,Dbe),e(Dbe,Lvr),e(yo,Bvr),g(aL,yo,null),b(d,$ke,_),b(d,Uc,_),e(Uc,O4),e(O4,Nbe),g(sL,Nbe,null),e(Uc,xvr),e(Uc,qbe),e(qbe,kvr),b(d,Ike,_),b(d,kr,_),g(nL,kr,null),e(kr,Rvr),e(kr,Jc),e(Jc,Svr),e(Jc,Obe),e(Obe,Pvr),e(Jc,$vr),e(Jc,Gbe),e(Gbe,Ivr),e(Jc,jvr),e(kr,Dvr),e(kr,lL),e(lL,Nvr),e(lL,Xbe),e(Xbe,qvr),e(lL,Ovr),e(kr,Gvr),e(kr,yt),g(iL,yt,null),e(yt,Xvr),e(yt,Vbe),e(Vbe,Vvr),e(yt,zvr),e(yt,Yc),e(Yc,Wvr),e(Yc,zbe),e(zbe,Qvr),e(Yc,Hvr),e(Yc,Wbe),e(Wbe,Uvr),e(Yc,Jvr),e(yt,Yvr),e(yt,Qbe),e(Qbe,Kvr),e(yt,Zvr),g(dL,yt,null),e(kr,eTr),e(kr,wo),g(cL,wo,null),e(wo,oTr),e(wo,Hbe),e(Hbe,rTr),e(wo,tTr),e(wo,As),e(As,aTr),e(As,Ube),e(Ube,sTr),e(As,nTr),e(As,Jbe),e(Jbe,lTr),e(As,iTr),e(As,Ybe),e(Ybe,dTr),e(As,cTr),e(wo,mTr),e(wo,Kbe),e(Kbe,G4),e(G4,Zbe),e(Zbe,fTr),e(G4,gTr),e(G4,LX),e(LX,hTr),e(G4,uTr),e(wo,pTr),e(wo,e2e),e(e2e,_Tr),e(wo,bTr),g(mL,wo,null),b(d,jke,_),b(d,Kc,_),e(Kc,X4),e(X4,o2e),g(fL,o2e,null),e(Kc,vTr),e(Kc,r2e),e(r2e,TTr),b(d,Dke,_),b(d,Rr,_),g(gL,Rr,null),e(Rr,FTr),e(Rr,Zc),e(Zc,CTr),e(Zc,t2e),e(t2e,MTr),e(Zc,ETr),e(Zc,a2e),e(a2e,yTr),e(Zc,wTr),e(Rr,ATr),e(Rr,hL),e(hL,LTr),e(hL,s2e),e(s2e,BTr),e(hL,xTr),e(Rr,kTr),e(Rr,wt),g(uL,wt,null),e(wt,RTr),e(wt,n2e),e(n2e,STr),e(wt,PTr),e(wt,em),e(em,$Tr),e(em,l2e),e(l2e,ITr),e(em,jTr),e(em,i2e),e(i2e,DTr),e(em,NTr),e(wt,qTr),e(wt,d2e),e(d2e,OTr),e(wt,GTr),g(pL,wt,null),e(Rr,XTr),e(Rr,Ao),g(_L,Ao,null),e(Ao,VTr),e(Ao,c2e),e(c2e,zTr),e(Ao,WTr),e(Ao,Ls),e(Ls,QTr),e(Ls,m2e),e(m2e,HTr),e(Ls,UTr),e(Ls,f2e),e(f2e,JTr),e(Ls,YTr),e(Ls,g2e),e(g2e,KTr),e(Ls,ZTr),e(Ao,e1r),e(Ao,z),e(z,V4),e(V4,h2e),e(h2e,o1r),e(V4,r1r),e(V4,BX),e(BX,t1r),e(V4,a1r),e(z,s1r),e(z,z4),e(z4,u2e),e(u2e,n1r),e(z4,l1r),e(z4,xX),e(xX,i1r),e(z4,d1r),e(z,c1r),e(z,W4),e(W4,p2e),e(p2e,m1r),e(W4,f1r),e(W4,kX),e(kX,g1r),e(W4,h1r),e(z,u1r),e(z,Q4),e(Q4,_2e),e(_2e,p1r),e(Q4,_1r),e(Q4,RX),e(RX,b1r),e(Q4,v1r),e(z,T1r),e(z,H4),e(H4,b2e),e(b2e,F1r),e(H4,C1r),e(H4,SX),e(SX,M1r),e(H4,E1r),e(z,y1r),e(z,U4),e(U4,v2e),e(v2e,w1r),e(U4,A1r),e(U4,PX),e(PX,L1r),e(U4,B1r),e(z,x1r),e(z,J4),e(J4,T2e),e(T2e,k1r),e(J4,R1r),e(J4,$X),e($X,S1r),e(J4,P1r),e(z,$1r),e(z,Y4),e(Y4,F2e),e(F2e,I1r),e(Y4,j1r),e(Y4,IX),e(IX,D1r),e(Y4,N1r),e(z,q1r),e(z,K4),e(K4,C2e),e(C2e,O1r),e(K4,G1r),e(K4,jX),e(jX,X1r),e(K4,V1r),e(z,z1r),e(z,Z4),e(Z4,M2e),e(M2e,W1r),e(Z4,Q1r),e(Z4,DX),e(DX,H1r),e(Z4,U1r),e(z,J1r),e(z,eE),e(eE,E2e),e(E2e,Y1r),e(eE,K1r),e(eE,NX),e(NX,Z1r),e(eE,eFr),e(z,oFr),e(z,oE),e(oE,y2e),e(y2e,rFr),e(oE,tFr),e(oE,qX),e(qX,aFr),e(oE,sFr),e(z,nFr),e(z,rE),e(rE,w2e),e(w2e,lFr),e(rE,iFr),e(rE,OX),e(OX,dFr),e(rE,cFr),e(z,mFr),e(z,tE),e(tE,A2e),e(A2e,fFr),e(tE,gFr),e(tE,GX),e(GX,hFr),e(tE,uFr),e(z,pFr),e(z,aE),e(aE,L2e),e(L2e,_Fr),e(aE,bFr),e(aE,XX),e(XX,vFr),e(aE,TFr),e(z,FFr),e(z,sE),e(sE,B2e),e(B2e,CFr),e(sE,MFr),e(sE,VX),e(VX,EFr),e(sE,yFr),e(z,wFr),e(z,nE),e(nE,x2e),e(x2e,AFr),e(nE,LFr),e(nE,zX),e(zX,BFr),e(nE,xFr),e(z,kFr),e(z,lE),e(lE,k2e),e(k2e,RFr),e(lE,SFr),e(lE,WX),e(WX,PFr),e(lE,$Fr),e(z,IFr),e(z,iE),e(iE,R2e),e(R2e,jFr),e(iE,DFr),e(iE,QX),e(QX,NFr),e(iE,qFr),e(z,OFr),e(z,dE),e(dE,S2e),e(S2e,GFr),e(dE,XFr),e(dE,HX),e(HX,VFr),e(dE,zFr),e(z,WFr),e(z,cE),e(cE,P2e),e(P2e,QFr),e(cE,HFr),e(cE,UX),e(UX,UFr),e(cE,JFr),e(z,YFr),e(z,mE),e(mE,$2e),e($2e,KFr),e(mE,ZFr),e(mE,JX),e(JX,eCr),e(mE,oCr),e(z,rCr),e(z,fE),e(fE,I2e),e(I2e,tCr),e(fE,aCr),e(fE,YX),e(YX,sCr),e(fE,nCr),e(z,lCr),e(z,gE),e(gE,j2e),e(j2e,iCr),e(gE,dCr),e(gE,KX),e(KX,cCr),e(gE,mCr),e(z,fCr),e(z,hE),e(hE,D2e),e(D2e,gCr),e(hE,hCr),e(hE,ZX),e(ZX,uCr),e(hE,pCr),e(Ao,_Cr),e(Ao,N2e),e(N2e,bCr),e(Ao,vCr),g(bL,Ao,null),b(d,Nke,_),b(d,om,_),e(om,uE),e(uE,q2e),g(vL,q2e,null),e(om,TCr),e(om,O2e),e(O2e,FCr),b(d,qke,_),b(d,Sr,_),g(TL,Sr,null),e(Sr,CCr),e(Sr,rm),e(rm,MCr),e(rm,G2e),e(G2e,ECr),e(rm,yCr),e(rm,X2e),e(X2e,wCr),e(rm,ACr),e(Sr,LCr),e(Sr,FL),e(FL,BCr),e(FL,V2e),e(V2e,xCr),e(FL,kCr),e(Sr,RCr),e(Sr,At),g(CL,At,null),e(At,SCr),e(At,z2e),e(z2e,PCr),e(At,$Cr),e(At,tm),e(tm,ICr),e(tm,W2e),e(W2e,jCr),e(tm,DCr),e(tm,Q2e),e(Q2e,NCr),e(tm,qCr),e(At,OCr),e(At,H2e),e(H2e,GCr),e(At,XCr),g(ML,At,null),e(Sr,VCr),e(Sr,Lo),g(EL,Lo,null),e(Lo,zCr),e(Lo,U2e),e(U2e,WCr),e(Lo,QCr),e(Lo,Bs),e(Bs,HCr),e(Bs,J2e),e(J2e,UCr),e(Bs,JCr),e(Bs,Y2e),e(Y2e,YCr),e(Bs,KCr),e(Bs,K2e),e(K2e,ZCr),e(Bs,eMr),e(Lo,oMr),e(Lo,ca),e(ca,pE),e(pE,Z2e),e(Z2e,rMr),e(pE,tMr),e(pE,eV),e(eV,aMr),e(pE,sMr),e(ca,nMr),e(ca,_E),e(_E,eve),e(eve,lMr),e(_E,iMr),e(_E,oV),e(oV,dMr),e(_E,cMr),e(ca,mMr),e(ca,bE),e(bE,ove),e(ove,fMr),e(bE,gMr),e(bE,rV),e(rV,hMr),e(bE,uMr),e(ca,pMr),e(ca,vE),e(vE,rve),e(rve,_Mr),e(vE,bMr),e(vE,tV),e(tV,vMr),e(vE,TMr),e(ca,FMr),e(ca,TE),e(TE,tve),e(tve,CMr),e(TE,MMr),e(TE,aV),e(aV,EMr),e(TE,yMr),e(Lo,wMr),e(Lo,ave),e(ave,AMr),e(Lo,LMr),g(yL,Lo,null),b(d,Oke,_),b(d,am,_),e(am,FE),e(FE,sve),g(wL,sve,null),e(am,BMr),e(am,nve),e(nve,xMr),b(d,Gke,_),b(d,Pr,_),g(AL,Pr,null),e(Pr,kMr),e(Pr,sm),e(sm,RMr),e(sm,lve),e(lve,SMr),e(sm,PMr),e(sm,ive),e(ive,$Mr),e(sm,IMr),e(Pr,jMr),e(Pr,LL),e(LL,DMr),e(LL,dve),e(dve,NMr),e(LL,qMr),e(Pr,OMr),e(Pr,Lt),g(BL,Lt,null),e(Lt,GMr),e(Lt,cve),e(cve,XMr),e(Lt,VMr),e(Lt,nm),e(nm,zMr),e(nm,mve),e(mve,WMr),e(nm,QMr),e(nm,fve),e(fve,HMr),e(nm,UMr),e(Lt,JMr),e(Lt,gve),e(gve,YMr),e(Lt,KMr),g(xL,Lt,null),e(Pr,ZMr),e(Pr,Bo),g(kL,Bo,null),e(Bo,e4r),e(Bo,hve),e(hve,o4r),e(Bo,r4r),e(Bo,xs),e(xs,t4r),e(xs,uve),e(uve,a4r),e(xs,s4r),e(xs,pve),e(pve,n4r),e(xs,l4r),e(xs,_ve),e(_ve,i4r),e(xs,d4r),e(Bo,c4r),e(Bo,ce),e(ce,CE),e(CE,bve),e(bve,m4r),e(CE,f4r),e(CE,sV),e(sV,g4r),e(CE,h4r),e(ce,u4r),e(ce,ME),e(ME,vve),e(vve,p4r),e(ME,_4r),e(ME,nV),e(nV,b4r),e(ME,v4r),e(ce,T4r),e(ce,EE),e(EE,Tve),e(Tve,F4r),e(EE,C4r),e(EE,lV),e(lV,M4r),e(EE,E4r),e(ce,y4r),e(ce,yE),e(yE,Fve),e(Fve,w4r),e(yE,A4r),e(yE,iV),e(iV,L4r),e(yE,B4r),e(ce,x4r),e(ce,wE),e(wE,Cve),e(Cve,k4r),e(wE,R4r),e(wE,dV),e(dV,S4r),e(wE,P4r),e(ce,$4r),e(ce,AE),e(AE,Mve),e(Mve,I4r),e(AE,j4r),e(AE,cV),e(cV,D4r),e(AE,N4r),e(ce,q4r),e(ce,LE),e(LE,Eve),e(Eve,O4r),e(LE,G4r),e(LE,mV),e(mV,X4r),e(LE,V4r),e(ce,z4r),e(ce,BE),e(BE,yve),e(yve,W4r),e(BE,Q4r),e(BE,fV),e(fV,H4r),e(BE,U4r),e(ce,J4r),e(ce,xE),e(xE,wve),e(wve,Y4r),e(xE,K4r),e(xE,gV),e(gV,Z4r),e(xE,eEr),e(ce,oEr),e(ce,kE),e(kE,Ave),e(Ave,rEr),e(kE,tEr),e(kE,hV),e(hV,aEr),e(kE,sEr),e(ce,nEr),e(ce,RE),e(RE,Lve),e(Lve,lEr),e(RE,iEr),e(RE,uV),e(uV,dEr),e(RE,cEr),e(ce,mEr),e(ce,SE),e(SE,Bve),e(Bve,fEr),e(SE,gEr),e(SE,pV),e(pV,hEr),e(SE,uEr),e(Bo,pEr),e(Bo,xve),e(xve,_Er),e(Bo,bEr),g(RL,Bo,null),b(d,Xke,_),b(d,lm,_),e(lm,PE),e(PE,kve),g(SL,kve,null),e(lm,vEr),e(lm,Rve),e(Rve,TEr),b(d,Vke,_),b(d,$r,_),g(PL,$r,null),e($r,FEr),e($r,im),e(im,CEr),e(im,Sve),e(Sve,MEr),e(im,EEr),e(im,Pve),e(Pve,yEr),e(im,wEr),e($r,AEr),e($r,$L),e($L,LEr),e($L,$ve),e($ve,BEr),e($L,xEr),e($r,kEr),e($r,Bt),g(IL,Bt,null),e(Bt,REr),e(Bt,Ive),e(Ive,SEr),e(Bt,PEr),e(Bt,dm),e(dm,$Er),e(dm,jve),e(jve,IEr),e(dm,jEr),e(dm,Dve),e(Dve,DEr),e(dm,NEr),e(Bt,qEr),e(Bt,Nve),e(Nve,OEr),e(Bt,GEr),g(jL,Bt,null),e($r,XEr),e($r,xo),g(DL,xo,null),e(xo,VEr),e(xo,qve),e(qve,zEr),e(xo,WEr),e(xo,ks),e(ks,QEr),e(ks,Ove),e(Ove,HEr),e(ks,UEr),e(ks,Gve),e(Gve,JEr),e(ks,YEr),e(ks,Xve),e(Xve,KEr),e(ks,ZEr),e(xo,e3r),e(xo,_e),e(_e,$E),e($E,Vve),e(Vve,o3r),e($E,r3r),e($E,_V),e(_V,t3r),e($E,a3r),e(_e,s3r),e(_e,IE),e(IE,zve),e(zve,n3r),e(IE,l3r),e(IE,bV),e(bV,i3r),e(IE,d3r),e(_e,c3r),e(_e,jE),e(jE,Wve),e(Wve,m3r),e(jE,f3r),e(jE,vV),e(vV,g3r),e(jE,h3r),e(_e,u3r),e(_e,DE),e(DE,Qve),e(Qve,p3r),e(DE,_3r),e(DE,TV),e(TV,b3r),e(DE,v3r),e(_e,T3r),e(_e,NE),e(NE,Hve),e(Hve,F3r),e(NE,C3r),e(NE,FV),e(FV,M3r),e(NE,E3r),e(_e,y3r),e(_e,qE),e(qE,Uve),e(Uve,w3r),e(qE,A3r),e(qE,CV),e(CV,L3r),e(qE,B3r),e(_e,x3r),e(_e,OE),e(OE,Jve),e(Jve,k3r),e(OE,R3r),e(OE,MV),e(MV,S3r),e(OE,P3r),e(_e,$3r),e(_e,GE),e(GE,Yve),e(Yve,I3r),e(GE,j3r),e(GE,EV),e(EV,D3r),e(GE,N3r),e(_e,q3r),e(_e,XE),e(XE,Kve),e(Kve,O3r),e(XE,G3r),e(XE,yV),e(yV,X3r),e(XE,V3r),e(_e,z3r),e(_e,VE),e(VE,Zve),e(Zve,W3r),e(VE,Q3r),e(VE,wV),e(wV,H3r),e(VE,U3r),e(xo,J3r),e(xo,eTe),e(eTe,Y3r),e(xo,K3r),g(NL,xo,null),b(d,zke,_),b(d,cm,_),e(cm,zE),e(zE,oTe),g(qL,oTe,null),e(cm,Z3r),e(cm,rTe),e(rTe,e5r),b(d,Wke,_),b(d,Ir,_),g(OL,Ir,null),e(Ir,o5r),e(Ir,mm),e(mm,r5r),e(mm,tTe),e(tTe,t5r),e(mm,a5r),e(mm,aTe),e(aTe,s5r),e(mm,n5r),e(Ir,l5r),e(Ir,GL),e(GL,i5r),e(GL,sTe),e(sTe,d5r),e(GL,c5r),e(Ir,m5r),e(Ir,xt),g(XL,xt,null),e(xt,f5r),e(xt,nTe),e(nTe,g5r),e(xt,h5r),e(xt,fm),e(fm,u5r),e(fm,lTe),e(lTe,p5r),e(fm,_5r),e(fm,iTe),e(iTe,b5r),e(fm,v5r),e(xt,T5r),e(xt,dTe),e(dTe,F5r),e(xt,C5r),g(VL,xt,null),e(Ir,M5r),e(Ir,ko),g(zL,ko,null),e(ko,E5r),e(ko,cTe),e(cTe,y5r),e(ko,w5r),e(ko,Rs),e(Rs,A5r),e(Rs,mTe),e(mTe,L5r),e(Rs,B5r),e(Rs,fTe),e(fTe,x5r),e(Rs,k5r),e(Rs,gTe),e(gTe,R5r),e(Rs,S5r),e(ko,P5r),e(ko,Me),e(Me,WE),e(WE,hTe),e(hTe,$5r),e(WE,I5r),e(WE,AV),e(AV,j5r),e(WE,D5r),e(Me,N5r),e(Me,QE),e(QE,uTe),e(uTe,q5r),e(QE,O5r),e(QE,LV),e(LV,G5r),e(QE,X5r),e(Me,V5r),e(Me,HE),e(HE,pTe),e(pTe,z5r),e(HE,W5r),e(HE,BV),e(BV,Q5r),e(HE,H5r),e(Me,U5r),e(Me,UE),e(UE,_Te),e(_Te,J5r),e(UE,Y5r),e(UE,xV),e(xV,K5r),e(UE,Z5r),e(Me,eyr),e(Me,JE),e(JE,bTe),e(bTe,oyr),e(JE,ryr),e(JE,kV),e(kV,tyr),e(JE,ayr),e(Me,syr),e(Me,YE),e(YE,vTe),e(vTe,nyr),e(YE,lyr),e(YE,RV),e(RV,iyr),e(YE,dyr),e(Me,cyr),e(Me,KE),e(KE,TTe),e(TTe,myr),e(KE,fyr),e(KE,SV),e(SV,gyr),e(KE,hyr),e(Me,uyr),e(Me,ZE),e(ZE,FTe),e(FTe,pyr),e(ZE,_yr),e(ZE,PV),e(PV,byr),e(ZE,vyr),e(Me,Tyr),e(Me,e3),e(e3,CTe),e(CTe,Fyr),e(e3,Cyr),e(e3,$V),e($V,Myr),e(e3,Eyr),e(ko,yyr),e(ko,MTe),e(MTe,wyr),e(ko,Ayr),g(WL,ko,null),b(d,Qke,_),b(d,gm,_),e(gm,o3),e(o3,ETe),g(QL,ETe,null),e(gm,Lyr),e(gm,yTe),e(yTe,Byr),b(d,Hke,_),b(d,jr,_),g(HL,jr,null),e(jr,xyr),e(jr,hm),e(hm,kyr),e(hm,wTe),e(wTe,Ryr),e(hm,Syr),e(hm,ATe),e(ATe,Pyr),e(hm,$yr),e(jr,Iyr),e(jr,UL),e(UL,jyr),e(UL,LTe),e(LTe,Dyr),e(UL,Nyr),e(jr,qyr),e(jr,kt),g(JL,kt,null),e(kt,Oyr),e(kt,BTe),e(BTe,Gyr),e(kt,Xyr),e(kt,um),e(um,Vyr),e(um,xTe),e(xTe,zyr),e(um,Wyr),e(um,kTe),e(kTe,Qyr),e(um,Hyr),e(kt,Uyr),e(kt,RTe),e(RTe,Jyr),e(kt,Yyr),g(YL,kt,null),e(jr,Kyr),e(jr,Ro),g(KL,Ro,null),e(Ro,Zyr),e(Ro,STe),e(STe,ewr),e(Ro,owr),e(Ro,Ss),e(Ss,rwr),e(Ss,PTe),e(PTe,twr),e(Ss,awr),e(Ss,$Te),e($Te,swr),e(Ss,nwr),e(Ss,ITe),e(ITe,lwr),e(Ss,iwr),e(Ro,dwr),e(Ro,be),e(be,r3),e(r3,jTe),e(jTe,cwr),e(r3,mwr),e(r3,IV),e(IV,fwr),e(r3,gwr),e(be,hwr),e(be,t3),e(t3,DTe),e(DTe,uwr),e(t3,pwr),e(t3,jV),e(jV,_wr),e(t3,bwr),e(be,vwr),e(be,a3),e(a3,NTe),e(NTe,Twr),e(a3,Fwr),e(a3,DV),e(DV,Cwr),e(a3,Mwr),e(be,Ewr),e(be,s3),e(s3,qTe),e(qTe,ywr),e(s3,wwr),e(s3,NV),e(NV,Awr),e(s3,Lwr),e(be,Bwr),e(be,n3),e(n3,OTe),e(OTe,xwr),e(n3,kwr),e(n3,qV),e(qV,Rwr),e(n3,Swr),e(be,Pwr),e(be,l3),e(l3,GTe),e(GTe,$wr),e(l3,Iwr),e(l3,OV),e(OV,jwr),e(l3,Dwr),e(be,Nwr),e(be,i3),e(i3,XTe),e(XTe,qwr),e(i3,Owr),e(i3,GV),e(GV,Gwr),e(i3,Xwr),e(be,Vwr),e(be,d3),e(d3,VTe),e(VTe,zwr),e(d3,Wwr),e(d3,XV),e(XV,Qwr),e(d3,Hwr),e(be,Uwr),e(be,c3),e(c3,zTe),e(zTe,Jwr),e(c3,Ywr),e(c3,VV),e(VV,Kwr),e(c3,Zwr),e(be,e6r),e(be,m3),e(m3,WTe),e(WTe,o6r),e(m3,r6r),e(m3,zV),e(zV,t6r),e(m3,a6r),e(Ro,s6r),e(Ro,QTe),e(QTe,n6r),e(Ro,l6r),g(ZL,Ro,null),b(d,Uke,_),b(d,pm,_),e(pm,f3),e(f3,HTe),g(e8,HTe,null),e(pm,i6r),e(pm,UTe),e(UTe,d6r),b(d,Jke,_),b(d,Dr,_),g(o8,Dr,null),e(Dr,c6r),e(Dr,_m),e(_m,m6r),e(_m,JTe),e(JTe,f6r),e(_m,g6r),e(_m,YTe),e(YTe,h6r),e(_m,u6r),e(Dr,p6r),e(Dr,r8),e(r8,_6r),e(r8,KTe),e(KTe,b6r),e(r8,v6r),e(Dr,T6r),e(Dr,Rt),g(t8,Rt,null),e(Rt,F6r),e(Rt,ZTe),e(ZTe,C6r),e(Rt,M6r),e(Rt,bm),e(bm,E6r),e(bm,e1e),e(e1e,y6r),e(bm,w6r),e(bm,o1e),e(o1e,A6r),e(bm,L6r),e(Rt,B6r),e(Rt,r1e),e(r1e,x6r),e(Rt,k6r),g(a8,Rt,null),e(Dr,R6r),e(Dr,So),g(s8,So,null),e(So,S6r),e(So,t1e),e(t1e,P6r),e(So,$6r),e(So,Ps),e(Ps,I6r),e(Ps,a1e),e(a1e,j6r),e(Ps,D6r),e(Ps,s1e),e(s1e,N6r),e(Ps,q6r),e(Ps,n1e),e(n1e,O6r),e(Ps,G6r),e(So,X6r),e(So,ve),e(ve,g3),e(g3,l1e),e(l1e,V6r),e(g3,z6r),e(g3,WV),e(WV,W6r),e(g3,Q6r),e(ve,H6r),e(ve,h3),e(h3,i1e),e(i1e,U6r),e(h3,J6r),e(h3,QV),e(QV,Y6r),e(h3,K6r),e(ve,Z6r),e(ve,u3),e(u3,d1e),e(d1e,eAr),e(u3,oAr),e(u3,HV),e(HV,rAr),e(u3,tAr),e(ve,aAr),e(ve,p3),e(p3,c1e),e(c1e,sAr),e(p3,nAr),e(p3,UV),e(UV,lAr),e(p3,iAr),e(ve,dAr),e(ve,_3),e(_3,m1e),e(m1e,cAr),e(_3,mAr),e(_3,JV),e(JV,fAr),e(_3,gAr),e(ve,hAr),e(ve,b3),e(b3,f1e),e(f1e,uAr),e(b3,pAr),e(b3,YV),e(YV,_Ar),e(b3,bAr),e(ve,vAr),e(ve,v3),e(v3,g1e),e(g1e,TAr),e(v3,FAr),e(v3,KV),e(KV,CAr),e(v3,MAr),e(ve,EAr),e(ve,T3),e(T3,h1e),e(h1e,yAr),e(T3,wAr),e(T3,ZV),e(ZV,AAr),e(T3,LAr),e(ve,BAr),e(ve,F3),e(F3,u1e),e(u1e,xAr),e(F3,kAr),e(F3,ez),e(ez,RAr),e(F3,SAr),e(ve,PAr),e(ve,C3),e(C3,p1e),e(p1e,$Ar),e(C3,IAr),e(C3,oz),e(oz,jAr),e(C3,DAr),e(So,NAr),e(So,_1e),e(_1e,qAr),e(So,OAr),g(n8,So,null),b(d,Yke,_),b(d,vm,_),e(vm,M3),e(M3,b1e),g(l8,b1e,null),e(vm,GAr),e(vm,v1e),e(v1e,XAr),b(d,Kke,_),b(d,Nr,_),g(i8,Nr,null),e(Nr,VAr),e(Nr,Tm),e(Tm,zAr),e(Tm,T1e),e(T1e,WAr),e(Tm,QAr),e(Tm,F1e),e(F1e,HAr),e(Tm,UAr),e(Nr,JAr),e(Nr,d8),e(d8,YAr),e(d8,C1e),e(C1e,KAr),e(d8,ZAr),e(Nr,e0r),e(Nr,St),g(c8,St,null),e(St,o0r),e(St,M1e),e(M1e,r0r),e(St,t0r),e(St,Fm),e(Fm,a0r),e(Fm,E1e),e(E1e,s0r),e(Fm,n0r),e(Fm,y1e),e(y1e,l0r),e(Fm,i0r),e(St,d0r),e(St,w1e),e(w1e,c0r),e(St,m0r),g(m8,St,null),e(Nr,f0r),e(Nr,Po),g(f8,Po,null),e(Po,g0r),e(Po,A1e),e(A1e,h0r),e(Po,u0r),e(Po,$s),e($s,p0r),e($s,L1e),e(L1e,_0r),e($s,b0r),e($s,B1e),e(B1e,v0r),e($s,T0r),e($s,x1e),e(x1e,F0r),e($s,C0r),e(Po,M0r),e(Po,Re),e(Re,E3),e(E3,k1e),e(k1e,E0r),e(E3,y0r),e(E3,rz),e(rz,w0r),e(E3,A0r),e(Re,L0r),e(Re,y3),e(y3,R1e),e(R1e,B0r),e(y3,x0r),e(y3,tz),e(tz,k0r),e(y3,R0r),e(Re,S0r),e(Re,w3),e(w3,S1e),e(S1e,P0r),e(w3,$0r),e(w3,az),e(az,I0r),e(w3,j0r),e(Re,D0r),e(Re,A3),e(A3,P1e),e(P1e,N0r),e(A3,q0r),e(A3,sz),e(sz,O0r),e(A3,G0r),e(Re,X0r),e(Re,L3),e(L3,$1e),e($1e,V0r),e(L3,z0r),e(L3,nz),e(nz,W0r),e(L3,Q0r),e(Re,H0r),e(Re,B3),e(B3,I1e),e(I1e,U0r),e(B3,J0r),e(B3,lz),e(lz,Y0r),e(B3,K0r),e(Re,Z0r),e(Re,x3),e(x3,j1e),e(j1e,eLr),e(x3,oLr),e(x3,iz),e(iz,rLr),e(x3,tLr),e(Re,aLr),e(Re,k3),e(k3,D1e),e(D1e,sLr),e(k3,nLr),e(k3,dz),e(dz,lLr),e(k3,iLr),e(Po,dLr),e(Po,N1e),e(N1e,cLr),e(Po,mLr),g(g8,Po,null),b(d,Zke,_),b(d,Cm,_),e(Cm,R3),e(R3,q1e),g(h8,q1e,null),e(Cm,fLr),e(Cm,O1e),e(O1e,gLr),b(d,eRe,_),b(d,qr,_),g(u8,qr,null),e(qr,hLr),e(qr,Mm),e(Mm,uLr),e(Mm,G1e),e(G1e,pLr),e(Mm,_Lr),e(Mm,X1e),e(X1e,bLr),e(Mm,vLr),e(qr,TLr),e(qr,p8),e(p8,FLr),e(p8,V1e),e(V1e,CLr),e(p8,MLr),e(qr,ELr),e(qr,Pt),g(_8,Pt,null),e(Pt,yLr),e(Pt,z1e),e(z1e,wLr),e(Pt,ALr),e(Pt,Em),e(Em,LLr),e(Em,W1e),e(W1e,BLr),e(Em,xLr),e(Em,Q1e),e(Q1e,kLr),e(Em,RLr),e(Pt,SLr),e(Pt,H1e),e(H1e,PLr),e(Pt,$Lr),g(b8,Pt,null),e(qr,ILr),e(qr,$o),g(v8,$o,null),e($o,jLr),e($o,U1e),e(U1e,DLr),e($o,NLr),e($o,Is),e(Is,qLr),e(Is,J1e),e(J1e,OLr),e(Is,GLr),e(Is,Y1e),e(Y1e,XLr),e(Is,VLr),e(Is,K1e),e(K1e,zLr),e(Is,WLr),e($o,QLr),e($o,Se),e(Se,S3),e(S3,Z1e),e(Z1e,HLr),e(S3,ULr),e(S3,cz),e(cz,JLr),e(S3,YLr),e(Se,KLr),e(Se,P3),e(P3,eFe),e(eFe,ZLr),e(P3,e8r),e(P3,mz),e(mz,o8r),e(P3,r8r),e(Se,t8r),e(Se,$3),e($3,oFe),e(oFe,a8r),e($3,s8r),e($3,fz),e(fz,n8r),e($3,l8r),e(Se,i8r),e(Se,I3),e(I3,rFe),e(rFe,d8r),e(I3,c8r),e(I3,gz),e(gz,m8r),e(I3,f8r),e(Se,g8r),e(Se,j3),e(j3,tFe),e(tFe,h8r),e(j3,u8r),e(j3,hz),e(hz,p8r),e(j3,_8r),e(Se,b8r),e(Se,D3),e(D3,aFe),e(aFe,v8r),e(D3,T8r),e(D3,uz),e(uz,F8r),e(D3,C8r),e(Se,M8r),e(Se,N3),e(N3,sFe),e(sFe,E8r),e(N3,y8r),e(N3,pz),e(pz,w8r),e(N3,A8r),e(Se,L8r),e(Se,q3),e(q3,nFe),e(nFe,B8r),e(q3,x8r),e(q3,_z),e(_z,k8r),e(q3,R8r),e($o,S8r),e($o,lFe),e(lFe,P8r),e($o,$8r),g(T8,$o,null),b(d,oRe,_),b(d,ym,_),e(ym,O3),e(O3,iFe),g(F8,iFe,null),e(ym,I8r),e(ym,dFe),e(dFe,j8r),b(d,rRe,_),b(d,Or,_),g(C8,Or,null),e(Or,D8r),e(Or,wm),e(wm,N8r),e(wm,cFe),e(cFe,q8r),e(wm,O8r),e(wm,mFe),e(mFe,G8r),e(wm,X8r),e(Or,V8r),e(Or,M8),e(M8,z8r),e(M8,fFe),e(fFe,W8r),e(M8,Q8r),e(Or,H8r),e(Or,$t),g(E8,$t,null),e($t,U8r),e($t,gFe),e(gFe,J8r),e($t,Y8r),e($t,Am),e(Am,K8r),e(Am,hFe),e(hFe,Z8r),e(Am,e7r),e(Am,uFe),e(uFe,o7r),e(Am,r7r),e($t,t7r),e($t,pFe),e(pFe,a7r),e($t,s7r),g(y8,$t,null),e(Or,n7r),e(Or,Io),g(w8,Io,null),e(Io,l7r),e(Io,_Fe),e(_Fe,i7r),e(Io,d7r),e(Io,js),e(js,c7r),e(js,bFe),e(bFe,m7r),e(js,f7r),e(js,vFe),e(vFe,g7r),e(js,h7r),e(js,TFe),e(TFe,u7r),e(js,p7r),e(Io,_7r),e(Io,FFe),e(FFe,G3),e(G3,CFe),e(CFe,b7r),e(G3,v7r),e(G3,bz),e(bz,T7r),e(G3,F7r),e(Io,C7r),e(Io,MFe),e(MFe,M7r),e(Io,E7r),g(A8,Io,null),b(d,tRe,_),b(d,Lm,_),e(Lm,X3),e(X3,EFe),g(L8,EFe,null),e(Lm,y7r),e(Lm,yFe),e(yFe,w7r),b(d,aRe,_),b(d,Gr,_),g(B8,Gr,null),e(Gr,A7r),e(Gr,Bm),e(Bm,L7r),e(Bm,wFe),e(wFe,B7r),e(Bm,x7r),e(Bm,AFe),e(AFe,k7r),e(Bm,R7r),e(Gr,S7r),e(Gr,x8),e(x8,P7r),e(x8,LFe),e(LFe,$7r),e(x8,I7r),e(Gr,j7r),e(Gr,It),g(k8,It,null),e(It,D7r),e(It,BFe),e(BFe,N7r),e(It,q7r),e(It,xm),e(xm,O7r),e(xm,xFe),e(xFe,G7r),e(xm,X7r),e(xm,kFe),e(kFe,V7r),e(xm,z7r),e(It,W7r),e(It,RFe),e(RFe,Q7r),e(It,H7r),g(R8,It,null),e(Gr,U7r),e(Gr,jo),g(S8,jo,null),e(jo,J7r),e(jo,SFe),e(SFe,Y7r),e(jo,K7r),e(jo,Ds),e(Ds,Z7r),e(Ds,PFe),e(PFe,e9r),e(Ds,o9r),e(Ds,$Fe),e($Fe,r9r),e(Ds,t9r),e(Ds,IFe),e(IFe,a9r),e(Ds,s9r),e(jo,n9r),e(jo,P8),e(P8,V3),e(V3,jFe),e(jFe,l9r),e(V3,i9r),e(V3,vz),e(vz,d9r),e(V3,c9r),e(P8,m9r),e(P8,z3),e(z3,DFe),e(DFe,f9r),e(z3,g9r),e(z3,Tz),e(Tz,h9r),e(z3,u9r),e(jo,p9r),e(jo,NFe),e(NFe,_9r),e(jo,b9r),g($8,jo,null),b(d,sRe,_),b(d,km,_),e(km,W3),e(W3,qFe),g(I8,qFe,null),e(km,v9r),e(km,OFe),e(OFe,T9r),b(d,nRe,_),b(d,Xr,_),g(j8,Xr,null),e(Xr,F9r),e(Xr,Rm),e(Rm,C9r),e(Rm,GFe),e(GFe,M9r),e(Rm,E9r),e(Rm,XFe),e(XFe,y9r),e(Rm,w9r),e(Xr,A9r),e(Xr,D8),e(D8,L9r),e(D8,VFe),e(VFe,B9r),e(D8,x9r),e(Xr,k9r),e(Xr,jt),g(N8,jt,null),e(jt,R9r),e(jt,zFe),e(zFe,S9r),e(jt,P9r),e(jt,Sm),e(Sm,$9r),e(Sm,WFe),e(WFe,I9r),e(Sm,j9r),e(Sm,QFe),e(QFe,D9r),e(Sm,N9r),e(jt,q9r),e(jt,HFe),e(HFe,O9r),e(jt,G9r),g(q8,jt,null),e(Xr,X9r),e(Xr,Do),g(O8,Do,null),e(Do,V9r),e(Do,UFe),e(UFe,z9r),e(Do,W9r),e(Do,Ns),e(Ns,Q9r),e(Ns,JFe),e(JFe,H9r),e(Ns,U9r),e(Ns,YFe),e(YFe,J9r),e(Ns,Y9r),e(Ns,KFe),e(KFe,K9r),e(Ns,Z9r),e(Do,eBr),e(Do,ZFe),e(ZFe,Q3),e(Q3,eCe),e(eCe,oBr),e(Q3,rBr),e(Q3,Fz),e(Fz,tBr),e(Q3,aBr),e(Do,sBr),e(Do,oCe),e(oCe,nBr),e(Do,lBr),g(G8,Do,null),lRe=!0},p(d,[_]){const X8={};_&2&&(X8.$$scope={dirty:_,ctx:d}),qm.$set(X8);const rCe={};_&2&&(rCe.$$scope={dirty:_,ctx:d}),Eh.$set(rCe);const tCe={};_&2&&(tCe.$$scope={dirty:_,ctx:d}),$h.$set(tCe)},i(d){lRe||(h(me.$$.fragment,d),h(qa.$$.fragment,d),h(Y5.$$.fragment,d),h(K5.$$.fragment,d),h(qm.$$.fragment,d),h(Z5.$$.fragment,d),h(ey.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(sy.$$.fragment,d),h(ny.$$.fragment,d),h(ly.$$.fragment,d),h(cy.$$.fragment,d),h(my.$$.fragment,d),h(fy.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(_y.$$.fragment,d),h(Eh.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Ey.$$.fragment,d),h($h.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(xy.$$.fragment,d),h(ky.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(jy.$$.fragment,d),h(Dy.$$.fragment,d),h(Ny.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Gy.$$.fragment,d),h(Vy.$$.fragment,d),h(zy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Yy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(aw.$$.fragment,d),h(sw.$$.fragment,d),h(nw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(mw.$$.fragment,d),h(fw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(uw.$$.fragment,d),h(pw.$$.fragment,d),h(bw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(yw.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(xw.$$.fragment,d),h(Rw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(Vw.$$.fragment,d),h(Ww.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Zw.$$.fragment,d),h(e6.$$.fragment,d),h(o6.$$.fragment,d),h(r6.$$.fragment,d),h(t6.$$.fragment,d),h(a6.$$.fragment,d),h(n6.$$.fragment,d),h(l6.$$.fragment,d),h(i6.$$.fragment,d),h(d6.$$.fragment,d),h(c6.$$.fragment,d),h(m6.$$.fragment,d),h(g6.$$.fragment,d),h(h6.$$.fragment,d),h(u6.$$.fragment,d),h(p6.$$.fragment,d),h(_6.$$.fragment,d),h(b6.$$.fragment,d),h(T6.$$.fragment,d),h(F6.$$.fragment,d),h(C6.$$.fragment,d),h(M6.$$.fragment,d),h(E6.$$.fragment,d),h(y6.$$.fragment,d),h(A6.$$.fragment,d),h(L6.$$.fragment,d),h(B6.$$.fragment,d),h(x6.$$.fragment,d),h(k6.$$.fragment,d),h(R6.$$.fragment,d),h(P6.$$.fragment,d),h($6.$$.fragment,d),h(I6.$$.fragment,d),h(D6.$$.fragment,d),h(N6.$$.fragment,d),h(q6.$$.fragment,d),h(G6.$$.fragment,d),h(X6.$$.fragment,d),h(V6.$$.fragment,d),h(z6.$$.fragment,d),h(W6.$$.fragment,d),h(Q6.$$.fragment,d),h(U6.$$.fragment,d),h(J6.$$.fragment,d),h(Y6.$$.fragment,d),h(K6.$$.fragment,d),h(Z6.$$.fragment,d),h(eA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(sA.$$.fragment,d),h(nA.$$.fragment,d),h(lA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(mA.$$.fragment,d),h(fA.$$.fragment,d),h(gA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(bA.$$.fragment,d),h(TA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(AA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(kA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h(PA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(DA.$$.fragment,d),h(NA.$$.fragment,d),h(qA.$$.fragment,d),h(OA.$$.fragment,d),h(GA.$$.fragment,d),h(XA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(UA.$$.fragment,d),h(JA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),h(e0.$$.fragment,d),h(r0.$$.fragment,d),h(t0.$$.fragment,d),h(a0.$$.fragment,d),h(n0.$$.fragment,d),h(l0.$$.fragment,d),h(i0.$$.fragment,d),h(d0.$$.fragment,d),h(c0.$$.fragment,d),h(m0.$$.fragment,d),h(g0.$$.fragment,d),h(h0.$$.fragment,d),h(u0.$$.fragment,d),h(p0.$$.fragment,d),h(_0.$$.fragment,d),h(b0.$$.fragment,d),h(T0.$$.fragment,d),h(F0.$$.fragment,d),h(C0.$$.fragment,d),h(M0.$$.fragment,d),h(E0.$$.fragment,d),h(y0.$$.fragment,d),h(A0.$$.fragment,d),h(L0.$$.fragment,d),h(B0.$$.fragment,d),h(x0.$$.fragment,d),h(k0.$$.fragment,d),h(R0.$$.fragment,d),h(P0.$$.fragment,d),h($0.$$.fragment,d),h(I0.$$.fragment,d),h(j0.$$.fragment,d),h(D0.$$.fragment,d),h(N0.$$.fragment,d),h(O0.$$.fragment,d),h(G0.$$.fragment,d),h(X0.$$.fragment,d),h(V0.$$.fragment,d),h(z0.$$.fragment,d),h(W0.$$.fragment,d),h(H0.$$.fragment,d),h(U0.$$.fragment,d),h(J0.$$.fragment,d),h(Y0.$$.fragment,d),h(K0.$$.fragment,d),h(Z0.$$.fragment,d),h(oL.$$.fragment,d),h(rL.$$.fragment,d),h(tL.$$.fragment,d),h(aL.$$.fragment,d),h(sL.$$.fragment,d),h(nL.$$.fragment,d),h(iL.$$.fragment,d),h(dL.$$.fragment,d),h(cL.$$.fragment,d),h(mL.$$.fragment,d),h(fL.$$.fragment,d),h(gL.$$.fragment,d),h(uL.$$.fragment,d),h(pL.$$.fragment,d),h(_L.$$.fragment,d),h(bL.$$.fragment,d),h(vL.$$.fragment,d),h(TL.$$.fragment,d),h(CL.$$.fragment,d),h(ML.$$.fragment,d),h(EL.$$.fragment,d),h(yL.$$.fragment,d),h(wL.$$.fragment,d),h(AL.$$.fragment,d),h(BL.$$.fragment,d),h(xL.$$.fragment,d),h(kL.$$.fragment,d),h(RL.$$.fragment,d),h(SL.$$.fragment,d),h(PL.$$.fragment,d),h(IL.$$.fragment,d),h(jL.$$.fragment,d),h(DL.$$.fragment,d),h(NL.$$.fragment,d),h(qL.$$.fragment,d),h(OL.$$.fragment,d),h(XL.$$.fragment,d),h(VL.$$.fragment,d),h(zL.$$.fragment,d),h(WL.$$.fragment,d),h(QL.$$.fragment,d),h(HL.$$.fragment,d),h(JL.$$.fragment,d),h(YL.$$.fragment,d),h(KL.$$.fragment,d),h(ZL.$$.fragment,d),h(e8.$$.fragment,d),h(o8.$$.fragment,d),h(t8.$$.fragment,d),h(a8.$$.fragment,d),h(s8.$$.fragment,d),h(n8.$$.fragment,d),h(l8.$$.fragment,d),h(i8.$$.fragment,d),h(c8.$$.fragment,d),h(m8.$$.fragment,d),h(f8.$$.fragment,d),h(g8.$$.fragment,d),h(h8.$$.fragment,d),h(u8.$$.fragment,d),h(_8.$$.fragment,d),h(b8.$$.fragment,d),h(v8.$$.fragment,d),h(T8.$$.fragment,d),h(F8.$$.fragment,d),h(C8.$$.fragment,d),h(E8.$$.fragment,d),h(y8.$$.fragment,d),h(w8.$$.fragment,d),h(A8.$$.fragment,d),h(L8.$$.fragment,d),h(B8.$$.fragment,d),h(k8.$$.fragment,d),h(R8.$$.fragment,d),h(S8.$$.fragment,d),h($8.$$.fragment,d),h(I8.$$.fragment,d),h(j8.$$.fragment,d),h(N8.$$.fragment,d),h(q8.$$.fragment,d),h(O8.$$.fragment,d),h(G8.$$.fragment,d),lRe=!0)},o(d){u(me.$$.fragment,d),u(qa.$$.fragment,d),u(Y5.$$.fragment,d),u(K5.$$.fragment,d),u(qm.$$.fragment,d),u(Z5.$$.fragment,d),u(ey.$$.fragment,d),u(ty.$$.fragment,d),u(ay.$$.fragment,d),u(sy.$$.fragment,d),u(ny.$$.fragment,d),u(ly.$$.fragment,d),u(cy.$$.fragment,d),u(my.$$.fragment,d),u(fy.$$.fragment,d),u(gy.$$.fragment,d),u(hy.$$.fragment,d),u(_y.$$.fragment,d),u(Eh.$$.fragment,d),u(by.$$.fragment,d),u(vy.$$.fragment,d),u(Ty.$$.fragment,d),u(Fy.$$.fragment,d),u(Ey.$$.fragment,d),u($h.$$.fragment,d),u(yy.$$.fragment,d),u(wy.$$.fragment,d),u(Ay.$$.fragment,d),u(Ly.$$.fragment,d),u(xy.$$.fragment,d),u(ky.$$.fragment,d),u(Ry.$$.fragment,d),u(Sy.$$.fragment,d),u(Py.$$.fragment,d),u($y.$$.fragment,d),u(jy.$$.fragment,d),u(Dy.$$.fragment,d),u(Ny.$$.fragment,d),u(qy.$$.fragment,d),u(Oy.$$.fragment,d),u(Gy.$$.fragment,d),u(Vy.$$.fragment,d),u(zy.$$.fragment,d),u(Wy.$$.fragment,d),u(Qy.$$.fragment,d),u(Hy.$$.fragment,d),u(Uy.$$.fragment,d),u(Yy.$$.fragment,d),u(Ky.$$.fragment,d),u(Zy.$$.fragment,d),u(ew.$$.fragment,d),u(ow.$$.fragment,d),u(rw.$$.fragment,d),u(aw.$$.fragment,d),u(sw.$$.fragment,d),u(nw.$$.fragment,d),u(lw.$$.fragment,d),u(iw.$$.fragment,d),u(dw.$$.fragment,d),u(mw.$$.fragment,d),u(fw.$$.fragment,d),u(gw.$$.fragment,d),u(hw.$$.fragment,d),u(uw.$$.fragment,d),u(pw.$$.fragment,d),u(bw.$$.fragment,d),u(vw.$$.fragment,d),u(Tw.$$.fragment,d),u(Fw.$$.fragment,d),u(Cw.$$.fragment,d),u(Mw.$$.fragment,d),u(yw.$$.fragment,d),u(ww.$$.fragment,d),u(Aw.$$.fragment,d),u(Lw.$$.fragment,d),u(Bw.$$.fragment,d),u(xw.$$.fragment,d),u(Rw.$$.fragment,d),u(Sw.$$.fragment,d),u(Pw.$$.fragment,d),u($w.$$.fragment,d),u(Iw.$$.fragment,d),u(jw.$$.fragment,d),u(Nw.$$.fragment,d),u(qw.$$.fragment,d),u(Ow.$$.fragment,d),u(Gw.$$.fragment,d),u(Xw.$$.fragment,d),u(Vw.$$.fragment,d),u(Ww.$$.fragment,d),u(Qw.$$.fragment,d),u(Hw.$$.fragment,d),u(Uw.$$.fragment,d),u(Jw.$$.fragment,d),u(Yw.$$.fragment,d),u(Zw.$$.fragment,d),u(e6.$$.fragment,d),u(o6.$$.fragment,d),u(r6.$$.fragment,d),u(t6.$$.fragment,d),u(a6.$$.fragment,d),u(n6.$$.fragment,d),u(l6.$$.fragment,d),u(i6.$$.fragment,d),u(d6.$$.fragment,d),u(c6.$$.fragment,d),u(m6.$$.fragment,d),u(g6.$$.fragment,d),u(h6.$$.fragment,d),u(u6.$$.fragment,d),u(p6.$$.fragment,d),u(_6.$$.fragment,d),u(b6.$$.fragment,d),u(T6.$$.fragment,d),u(F6.$$.fragment,d),u(C6.$$.fragment,d),u(M6.$$.fragment,d),u(E6.$$.fragment,d),u(y6.$$.fragment,d),u(A6.$$.fragment,d),u(L6.$$.fragment,d),u(B6.$$.fragment,d),u(x6.$$.fragment,d),u(k6.$$.fragment,d),u(R6.$$.fragment,d),u(P6.$$.fragment,d),u($6.$$.fragment,d),u(I6.$$.fragment,d),u(D6.$$.fragment,d),u(N6.$$.fragment,d),u(q6.$$.fragment,d),u(G6.$$.fragment,d),u(X6.$$.fragment,d),u(V6.$$.fragment,d),u(z6.$$.fragment,d),u(W6.$$.fragment,d),u(Q6.$$.fragment,d),u(U6.$$.fragment,d),u(J6.$$.fragment,d),u(Y6.$$.fragment,d),u(K6.$$.fragment,d),u(Z6.$$.fragment,d),u(eA.$$.fragment,d),u(rA.$$.fragment,d),u(tA.$$.fragment,d),u(aA.$$.fragment,d),u(sA.$$.fragment,d),u(nA.$$.fragment,d),u(lA.$$.fragment,d),u(dA.$$.fragment,d),u(cA.$$.fragment,d),u(mA.$$.fragment,d),u(fA.$$.fragment,d),u(gA.$$.fragment,d),u(hA.$$.fragment,d),u(pA.$$.fragment,d),u(_A.$$.fragment,d),u(bA.$$.fragment,d),u(TA.$$.fragment,d),u(FA.$$.fragment,d),u(CA.$$.fragment,d),u(EA.$$.fragment,d),u(yA.$$.fragment,d),u(wA.$$.fragment,d),u(AA.$$.fragment,d),u(LA.$$.fragment,d),u(BA.$$.fragment,d),u(kA.$$.fragment,d),u(RA.$$.fragment,d),u(SA.$$.fragment,d),u(PA.$$.fragment,d),u($A.$$.fragment,d),u(IA.$$.fragment,d),u(DA.$$.fragment,d),u(NA.$$.fragment,d),u(qA.$$.fragment,d),u(OA.$$.fragment,d),u(GA.$$.fragment,d),u(XA.$$.fragment,d),u(zA.$$.fragment,d),u(WA.$$.fragment,d),u(QA.$$.fragment,d),u(HA.$$.fragment,d),u(UA.$$.fragment,d),u(JA.$$.fragment,d),u(KA.$$.fragment,d),u(ZA.$$.fragment,d),u(e0.$$.fragment,d),u(r0.$$.fragment,d),u(t0.$$.fragment,d),u(a0.$$.fragment,d),u(n0.$$.fragment,d),u(l0.$$.fragment,d),u(i0.$$.fragment,d),u(d0.$$.fragment,d),u(c0.$$.fragment,d),u(m0.$$.fragment,d),u(g0.$$.fragment,d),u(h0.$$.fragment,d),u(u0.$$.fragment,d),u(p0.$$.fragment,d),u(_0.$$.fragment,d),u(b0.$$.fragment,d),u(T0.$$.fragment,d),u(F0.$$.fragment,d),u(C0.$$.fragment,d),u(M0.$$.fragment,d),u(E0.$$.fragment,d),u(y0.$$.fragment,d),u(A0.$$.fragment,d),u(L0.$$.fragment,d),u(B0.$$.fragment,d),u(x0.$$.fragment,d),u(k0.$$.fragment,d),u(R0.$$.fragment,d),u(P0.$$.fragment,d),u($0.$$.fragment,d),u(I0.$$.fragment,d),u(j0.$$.fragment,d),u(D0.$$.fragment,d),u(N0.$$.fragment,d),u(O0.$$.fragment,d),u(G0.$$.fragment,d),u(X0.$$.fragment,d),u(V0.$$.fragment,d),u(z0.$$.fragment,d),u(W0.$$.fragment,d),u(H0.$$.fragment,d),u(U0.$$.fragment,d),u(J0.$$.fragment,d),u(Y0.$$.fragment,d),u(K0.$$.fragment,d),u(Z0.$$.fragment,d),u(oL.$$.fragment,d),u(rL.$$.fragment,d),u(tL.$$.fragment,d),u(aL.$$.fragment,d),u(sL.$$.fragment,d),u(nL.$$.fragment,d),u(iL.$$.fragment,d),u(dL.$$.fragment,d),u(cL.$$.fragment,d),u(mL.$$.fragment,d),u(fL.$$.fragment,d),u(gL.$$.fragment,d),u(uL.$$.fragment,d),u(pL.$$.fragment,d),u(_L.$$.fragment,d),u(bL.$$.fragment,d),u(vL.$$.fragment,d),u(TL.$$.fragment,d),u(CL.$$.fragment,d),u(ML.$$.fragment,d),u(EL.$$.fragment,d),u(yL.$$.fragment,d),u(wL.$$.fragment,d),u(AL.$$.fragment,d),u(BL.$$.fragment,d),u(xL.$$.fragment,d),u(kL.$$.fragment,d),u(RL.$$.fragment,d),u(SL.$$.fragment,d),u(PL.$$.fragment,d),u(IL.$$.fragment,d),u(jL.$$.fragment,d),u(DL.$$.fragment,d),u(NL.$$.fragment,d),u(qL.$$.fragment,d),u(OL.$$.fragment,d),u(XL.$$.fragment,d),u(VL.$$.fragment,d),u(zL.$$.fragment,d),u(WL.$$.fragment,d),u(QL.$$.fragment,d),u(HL.$$.fragment,d),u(JL.$$.fragment,d),u(YL.$$.fragment,d),u(KL.$$.fragment,d),u(ZL.$$.fragment,d),u(e8.$$.fragment,d),u(o8.$$.fragment,d),u(t8.$$.fragment,d),u(a8.$$.fragment,d),u(s8.$$.fragment,d),u(n8.$$.fragment,d),u(l8.$$.fragment,d),u(i8.$$.fragment,d),u(c8.$$.fragment,d),u(m8.$$.fragment,d),u(f8.$$.fragment,d),u(g8.$$.fragment,d),u(h8.$$.fragment,d),u(u8.$$.fragment,d),u(_8.$$.fragment,d),u(b8.$$.fragment,d),u(v8.$$.fragment,d),u(T8.$$.fragment,d),u(F8.$$.fragment,d),u(C8.$$.fragment,d),u(E8.$$.fragment,d),u(y8.$$.fragment,d),u(w8.$$.fragment,d),u(A8.$$.fragment,d),u(L8.$$.fragment,d),u(B8.$$.fragment,d),u(k8.$$.fragment,d),u(R8.$$.fragment,d),u(S8.$$.fragment,d),u($8.$$.fragment,d),u(I8.$$.fragment,d),u(j8.$$.fragment,d),u(N8.$$.fragment,d),u(q8.$$.fragment,d),u(O8.$$.fragment,d),u(G8.$$.fragment,d),lRe=!1},d(d){t(J),d&&t(Pe),d&&t(de),p(me),d&&t($m),d&&t(ma),d&&t(Le),d&&t(co),d&&t(jm),p(qa,d),d&&t(mo),d&&t(ue),d&&t(zo),d&&t(Oa),d&&t(nxe),d&&t(Vi),p(Y5),d&&t(lxe),d&&t(Vs),d&&t(ixe),p(K5,d),d&&t(dxe),d&&t(z7),d&&t(cxe),p(qm,d),d&&t(mxe),d&&t(zi),p(Z5),d&&t(fxe),d&&t(Wo),p(ey),p(ty),p(ay),p(sy),d&&t(gxe),d&&t(Qi),p(ny),d&&t(hxe),d&&t(Qo),p(ly),p(cy),p(my),p(fy),d&&t(uxe),d&&t(Hi),p(gy),d&&t(pxe),d&&t(Ho),p(hy),p(_y),p(Eh),p(by),p(vy),d&&t(_xe),d&&t(Ui),p(Ty),d&&t(bxe),d&&t(Uo),p(Fy),p(Ey),p($h),p(yy),p(wy),d&&t(vxe),d&&t(Yi),p(Ay),d&&t(Txe),d&&t(Jo),p(Ly),p(xy),p(ky),p(Ry),p(Sy),d&&t(Fxe),d&&t(ed),p(Py),d&&t(Cxe),d&&t(Yo),p($y),p(jy),p(Dy),p(Ny),p(qy),d&&t(Mxe),d&&t(td),p(Oy),d&&t(Exe),d&&t(Ko),p(Gy),p(Vy),p(zy),p(Wy),p(Qy),d&&t(yxe),d&&t(nd),p(Hy),d&&t(wxe),d&&t(Zo),p(Uy),p(Yy),p(Ky),p(Zy),p(ew),d&&t(Axe),d&&t(dd),p(ow),d&&t(Lxe),d&&t(er),p(rw),p(aw),p(sw),p(nw),p(lw),d&&t(Bxe),d&&t(fd),p(iw),d&&t(xxe),d&&t(or),p(dw),p(mw),p(fw),p(gw),p(hw),d&&t(kxe),d&&t(ud),p(uw),d&&t(Rxe),d&&t(rr),p(pw),p(bw),p(vw),p(Tw),p(Fw),d&&t(Sxe),d&&t(bd),p(Cw),d&&t(Pxe),d&&t(tr),p(Mw),p(yw),p(ww),p(Aw),p(Lw),d&&t($xe),d&&t(Fd),p(Bw),d&&t(Ixe),d&&t(ar),p(xw),p(Rw),p(Sw),p(Pw),p($w),d&&t(jxe),d&&t(Ed),p(Iw),d&&t(Dxe),d&&t(sr),p(jw),p(Nw),p(qw),p(Ow),p(Gw),d&&t(Nxe),d&&t(Ad),p(Xw),d&&t(qxe),d&&t(nr),p(Vw),p(Ww),p(Qw),p(Hw),p(Uw),d&&t(Oxe),d&&t(xd),p(Jw),d&&t(Gxe),d&&t(lr),p(Yw),p(Zw),p(e6),p(o6),p(r6),d&&t(Xxe),d&&t(Sd),p(t6),d&&t(Vxe),d&&t(ir),p(a6),p(n6),p(l6),p(i6),p(d6),d&&t(zxe),d&&t(Id),p(c6),d&&t(Wxe),d&&t(dr),p(m6),p(g6),p(h6),p(u6),p(p6),d&&t(Qxe),d&&t(Nd),p(_6),d&&t(Hxe),d&&t(cr),p(b6),p(T6),p(F6),p(C6),p(M6),d&&t(Uxe),d&&t(Gd),p(E6),d&&t(Jxe),d&&t(mr),p(y6),p(A6),p(L6),p(B6),p(x6),d&&t(Yxe),d&&t(zd),p(k6),d&&t(Kxe),d&&t(fr),p(R6),p(P6),p($6),p(I6),p(D6),d&&t(Zxe),d&&t(Hd),p(N6),d&&t(eke),d&&t(gr),p(q6),p(G6),p(X6),p(V6),p(z6),d&&t(oke),d&&t(Yd),p(W6),d&&t(rke),d&&t(hr),p(Q6),p(U6),p(J6),p(Y6),p(K6),d&&t(tke),d&&t(oc),p(Z6),d&&t(ake),d&&t(ur),p(eA),p(rA),p(tA),p(aA),p(sA),d&&t(ske),d&&t(ac),p(nA),d&&t(nke),d&&t(pr),p(lA),p(dA),p(cA),p(mA),p(fA),d&&t(lke),d&&t(lc),p(gA),d&&t(ike),d&&t(_r),p(hA),p(pA),p(_A),p(bA),p(TA),d&&t(dke),d&&t(cc),p(FA),d&&t(cke),d&&t(br),p(CA),p(EA),p(yA),p(wA),p(AA),d&&t(mke),d&&t(gc),p(LA),d&&t(fke),d&&t(vr),p(BA),p(kA),p(RA),p(SA),p(PA),d&&t(gke),d&&t(pc),p($A),d&&t(hke),d&&t(Tr),p(IA),p(DA),p(NA),p(qA),p(OA),d&&t(uke),d&&t(vc),p(GA),d&&t(pke),d&&t(Fr),p(XA),p(zA),p(WA),p(QA),p(HA),d&&t(_ke),d&&t(Cc),p(UA),d&&t(bke),d&&t(Cr),p(JA),p(KA),p(ZA),p(e0),p(r0),d&&t(vke),d&&t(yc),p(t0),d&&t(Tke),d&&t(Mr),p(a0),p(n0),p(l0),p(i0),p(d0),d&&t(Fke),d&&t(Lc),p(c0),d&&t(Cke),d&&t(Er),p(m0),p(g0),p(h0),p(u0),p(p0),d&&t(Mke),d&&t(kc),p(_0),d&&t(Eke),d&&t(yr),p(b0),p(T0),p(F0),p(C0),p(M0),d&&t(yke),d&&t(Pc),p(E0),d&&t(wke),d&&t(wr),p(y0),p(A0),p(L0),p(B0),p(x0),d&&t(Ake),d&&t(jc),p(k0),d&&t(Lke),d&&t(Ar),p(R0),p(P0),p($0),p(I0),p(j0),d&&t(Bke),d&&t(qc),p(D0),d&&t(xke),d&&t(Lr),p(N0),p(O0),p(G0),p(X0),p(V0),d&&t(kke),d&&t(Xc),p(z0),d&&t(Rke),d&&t(Br),p(W0),p(H0),p(U0),p(J0),p(Y0),d&&t(Ske),d&&t(Wc),p(K0),d&&t(Pke),d&&t(xr),p(Z0),p(oL),p(rL),p(tL),p(aL),d&&t($ke),d&&t(Uc),p(sL),d&&t(Ike),d&&t(kr),p(nL),p(iL),p(dL),p(cL),p(mL),d&&t(jke),d&&t(Kc),p(fL),d&&t(Dke),d&&t(Rr),p(gL),p(uL),p(pL),p(_L),p(bL),d&&t(Nke),d&&t(om),p(vL),d&&t(qke),d&&t(Sr),p(TL),p(CL),p(ML),p(EL),p(yL),d&&t(Oke),d&&t(am),p(wL),d&&t(Gke),d&&t(Pr),p(AL),p(BL),p(xL),p(kL),p(RL),d&&t(Xke),d&&t(lm),p(SL),d&&t(Vke),d&&t($r),p(PL),p(IL),p(jL),p(DL),p(NL),d&&t(zke),d&&t(cm),p(qL),d&&t(Wke),d&&t(Ir),p(OL),p(XL),p(VL),p(zL),p(WL),d&&t(Qke),d&&t(gm),p(QL),d&&t(Hke),d&&t(jr),p(HL),p(JL),p(YL),p(KL),p(ZL),d&&t(Uke),d&&t(pm),p(e8),d&&t(Jke),d&&t(Dr),p(o8),p(t8),p(a8),p(s8),p(n8),d&&t(Yke),d&&t(vm),p(l8),d&&t(Kke),d&&t(Nr),p(i8),p(c8),p(m8),p(f8),p(g8),d&&t(Zke),d&&t(Cm),p(h8),d&&t(eRe),d&&t(qr),p(u8),p(_8),p(b8),p(v8),p(T8),d&&t(oRe),d&&t(ym),p(F8),d&&t(rRe),d&&t(Or),p(C8),p(E8),p(y8),p(w8),p(A8),d&&t(tRe),d&&t(Lm),p(L8),d&&t(aRe),d&&t(Gr),p(B8),p(k8),p(R8),p(S8),p($8),d&&t(sRe),d&&t(km),p(I8),d&&t(nRe),d&&t(Xr),p(j8),p(N8),p(q8),p(O8),p(G8)}}}const XCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function VCt(Ii,J,Pe){let{fw:de}=J;return Ii.$$set=he=>{"fw"in he&&Pe(0,de=he.fw)},[de]}class YCt extends $Ct{constructor(J){super();ICt(this,J,VCt,GCt,jCt,{fw:0})}}export{YCt as default,XCt as metadata};
