import{S as XT,i as qT,s as KT,e as r,k as d,w as p,t as i,M as WT,c as a,d as t,m as f,a as o,x as u,h as s,b as n,G as e,g as c,y as v,L as YT,q as m,o as _,B as w,v as QT}from"../chunks/vendor-hf-doc-builder.js";import{I as E}from"../chunks/IconCopyLink-hf-doc-builder.js";function ZT(EN){let be,t1,Ae,Ht,Hn,kr,q0,jn,K0,l1,ye,jt,zn,Ir,W0,Gn,Y0,r1,yi,zt,Q0,xr,Z0,em,Sr,tm,a1,Ne,Gt,Jn,Pr,lm,Xn,rm,o1,re,Jt,am,qn,om,im,Kn,Wn,sm,nm,K,dm,Tr,fm,hm,Yn,cm,pm,Qn,um,vm,mm,ae,_m,Dr,wm,Em,Rr,gm,bm,Zn,oe,ed,Am,ym,td,Nm,Lm,ld,$m,km,i1,Le,Xt,rd,Mr,Im,ad,xm,s1,Ni,ie,Sm,od,Pm,Tm,Cr,Dm,Rm,Ur,Mm,n1,$e,qt,id,Vr,Cm,sd,Um,d1,g,Or,Vm,Fr,Om,H,Li,Fm,Br,Bm,Hm,ke,jm,Hr,zm,Gm,jr,Jm,Xm,qm,$i,Km,nd,W,Wm,dd,Ym,Qm,fd,Zm,e3,hd,t3,l3,r3,zr,cd,a3,o3,pd,i3,s3,ud,n3,d3,Gr,f3,vd,h3,c3,p3,Jr,u3,Xr,v3,m3,_3,qr,w3,md,E3,g3,b3,ki,A3,Kr,y3,N3,Ii,L3,Wr,_d,$3,k3,wd,I3,x3,Ed,S3,P3,gd,T3,D3,bd,R3,f1,Ie,Kt,Ad,Yr,M3,yd,C3,h1,Wt,Nd,U3,V3,xi,O3,Qr,Ld,F3,B3,$d,H3,c1,xe,Yt,kd,Zr,j3,Id,z3,p1,se,xd,G3,J3,Sd,X3,q3,ea,K3,Pd,W3,Y3,u1,Se,Qt,Td,ta,Q3,Dd,Z3,v1,Si,Zt,e_,la,t_,l_,D,Pi,r_,Rd,a_,o_,Ti,i_,Md,s_,n_,Di,d_,Cd,f_,h_,el,c_,Ud,p_,u_,Vd,v_,m_,tl,__,Od,w_,E_,Fd,g_,b_,ra,A_,Bd,y_,N_,m1,Pe,ll,Hd,aa,L_,jd,$_,_1,b,Ri,k_,oa,I_,x_,Mi,S_,ia,P_,T_,rl,D_,sa,R_,M_,na,C_,U_,Ci,V_,da,O_,F_,Ui,B_,fa,H_,j_,Vi,z_,ha,G_,J_,Oi,X_,Te,zd,q_,K_,Fi,W_,Gd,Y_,Q_,Jd,Z_,e5,Xd,t5,l5,qd,r5,w1,De,al,Kd,ca,a5,Wd,o5,E1,Bi,Hi,i5,pa,s5,g1,Re,ol,Yd,ua,n5,Qd,d5,b1,G,Zd,f5,h5,ef,c5,p5,ji,u5,Me,zi,v5,va,m5,_5,Gi,w5,ma,E5,g5,Ji,b5,_a,A5,y5,tf,N5,A1,Ce,il,lf,wa,L5,rf,$5,y1,N,Ue,k5,af,I5,x5,of,S5,P5,T5,sl,D5,Ea,R5,M5,ga,sf,C5,U5,ba,V5,nf,O5,F5,B5,Xi,H5,j,df,j5,z5,ff,G5,J5,hf,X5,q5,cf,K5,W5,pf,Y5,Q5,Aa,Z5,ya,ew,tw,lw,uf,rw,aw,Ve,ow,vf,iw,sw,mf,nw,dw,fw,_f,hw,N1,Oe,nl,wf,Na,cw,Ef,pw,L1,dl,gf,uw,vw,bf,mw,$1,Fe,fl,Af,La,_w,yf,ww,k1,qi,hl,Ew,$a,gw,bw,Y,ka,Aw,Nf,yw,Nw,Lw,Ia,$w,Lf,kw,Iw,xw,$f,Sw,Pw,Ki,Tw,I,Wi,kf,Dw,Rw,Mw,Yi,If,Cw,Uw,Vw,Qi,xf,Ow,Fw,Bw,Zi,Sf,Hw,jw,zw,es,Pf,Gw,Jw,Xw,ts,Tf,qw,Kw,Ww,ls,Df,Yw,Qw,I1,Be,cl,Rf,xa,Zw,Mf,eE,x1,rs,pl,tE,Sa,lE,rE,Q,as,aE,Cf,oE,iE,os,sE,Uf,nE,dE,is,fE,Vf,hE,cE,Of,pE,S1,He,ul,Ff,Pa,uE,Bf,vE,P1,ss,Ta,mE,Da,_E,wE,T1,je,vl,Hf,Ra,EE,jf,gE,D1,J,ns,bE,ze,ml,AE,Ma,yE,NE,zf,LE,$E,_l,kE,Ca,IE,xE,Gf,SE,PE,Ua,TE,Jf,DE,RE,ME,Xf,CE,UE,Ge,VE,qf,OE,FE,Kf,BE,HE,jE,Wf,zE,R1,Je,wl,Yf,Va,GE,Qf,JE,M1,ne,ds,XE,Xe,fs,Zf,qE,KE,WE,hs,eh,YE,QE,ZE,cs,th,eg,tg,lg,x,rg,lh,ag,og,rh,ig,sg,ah,ng,dg,oh,fg,hg,ih,cg,pg,sh,ug,vg,mg,qe,_g,nh,wg,Eg,dh,gg,bg,C1,Ke,El,fh,Oa,Ag,hh,yg,U1,ps,us,Ng,Fa,Lg,V1,We,gl,ch,Ba,$g,ph,kg,O1,A,vs,Ig,Ha,xg,Sg,ms,Pg,ja,Tg,Dg,_s,Rg,uh,vh,Mg,Cg,ws,Ug,za,Vg,Og,mh,Fg,Bg,Es,Hg,_h,gs,jg,wh,zg,Gg,bs,Jg,Eh,As,Xg,gh,qg,Kg,bh,Wg,F1,Ye,bl,Ah,Ga,Yg,yh,Qg,B1,Al,ys,Zg,Ja,Nh,e8,t8,Lh,l8,r8,$h,a8,H1,Qe,yl,kh,Xa,o8,Ih,i8,j1,Ns,Ls,s8,Ze,xh,n8,d8,Sh,f8,h8,Ph,c8,z1,et,Nl,Th,qa,p8,Dh,u8,G1,de,Rh,v8,m8,Mh,_8,w8,Ch,E8,J1,tt,Ll,Uh,Ka,g8,Vh,b8,X1,R,Oh,A8,y8,Fh,N8,L8,Bh,$8,k8,Hh,I8,x8,jh,S8,q1,lt,$l,zh,Wa,P8,Gh,T8,K1,kl,$s,D8,Ya,R8,M8,ks,C8,Z,Jh,U8,V8,Xh,O8,F8,qh,B8,H8,Kh,j8,W1,rt,Il,Wh,Qa,z8,Yh,G8,Y1,Is,Za,J8,eo,X8,q8,Q1,at,xl,Qh,to,K8,Zh,W8,Z1,X,ec,Y8,Q8,tc,Z8,e4,lo,t4,lc,l4,r4,a4,rc,o4,eu,ot,Sl,ac,ro,i4,oc,s4,tu,Pl,ic,n4,d4,sc,f4,lu,it,Tl,nc,ao,h4,dc,c4,ru,fe,xs,p4,oo,fc,u4,v4,hc,m4,_4,ee,w4,cc,E4,g4,pc,b4,A4,uc,y4,N4,L4,vc,$4,au,st,Dl,mc,io,k4,_c,I4,ou,he,Ss,x4,nt,wc,S4,P4,Ec,T4,D4,gc,R4,M4,so,C4,no,U4,V4,O4,fo,F4,bc,B4,H4,iu,dt,Rl,Ac,ho,j4,yc,z4,su,Ps,G4,nu,y,ft,J4,Nc,X4,q4,Lc,K4,W4,Y4,Ts,Q4,ht,$c,Z4,e6,kc,t6,l6,Ic,r6,a6,Ds,o6,z,xc,i6,s6,Sc,n6,d6,Pc,f6,h6,Tc,c6,p6,co,u6,po,v6,m6,_6,Rs,w6,Ms,Dc,E6,g6,Cs,b6,uo,A6,y6,Rc,N6,L6,Us,$6,vo,k6,I6,Vs,x6,mo,S6,du,ct,Ml,Mc,_o,P6,Cc,T6,fu,Os,D6,hu,L,Uc,R6,M6,Vc,C6,U6,Fs,V6,pt,Oc,O6,F6,Fc,B6,H6,Bc,j6,z6,Hc,G6,J6,jc,X6,q6,zc,K6,W6,Gc,Y6,cu,ut,Cl,Jc,wo,Q6,Xc,Z6,pu,Bs,vt,e7,Eo,t7,l7,go,r7,a7,uu,mt,Ul,qc,bo,o7,Kc,i7,vu,Hs,Vl,s7,Ao,n7,d7,yo,f7,mu,_t,Ol,Wc,No,h7,Yc,c7,_u,Fl,js,p7,wt,Lo,u7,$o,v7,m7,_7,zs,w7,ko,E7,g7,Bl,b7,Io,A7,y7,xo,N7,L7,Qc,$7,wu,Et,Hl,Zc,So,k7,e2,I7,Eu,Gs,Js,x7,te,t2,S7,P7,l2,T7,D7,r2,R7,M7,a2,C7,gu,gt,jl,o2,Po,U7,i2,V7,bu,zl,Xs,O7,To,F7,B7,Do,H7,Ro,j7,z7,Au,bt,Gl,s2,Mo,G7,n2,J7,yu,qs,Ks,X7,le,d2,q7,K7,f2,W7,Y7,h2,Q7,Z7,c2,eb,Nu,At,Jl,p2,Co,tb,u2,lb,Lu,Xl,Ws,rb,Uo,ab,ob,Vo,ib,Oo,sb,nb,$u,yt,ql,v2,Fo,db,m2,fb,ku,ce,_2,hb,cb,Ys,pb,Nt,w2,ub,vb,E2,mb,_b,Lt,wb,g2,Eb,gb,b2,bb,Ab,yb,A2,Nb,Iu,$t,Kl,y2,Bo,Lb,N2,$b,xu,Wl,Yl,kb,Ho,Ib,xb,S,kt,Sb,L2,Pb,Tb,$2,Db,Rb,Mb,k2,Cb,Ub,Qs,Vb,It,I2,Ob,Fb,x2,Bb,Hb,S2,jb,zb,Zs,Gb,jo,Jb,Xb,P2,qb,Kb,zo,Wb,T2,Yb,Qb,Zb,D2,eA,tA,R2,lA,Su,xt,Ql,M2,Go,rA,C2,aA,Pu,en,tn,oA,Jo,iA,Tu,St,Zl,U2,Xo,sA,V2,nA,Du,ln,qo,dA,Ko,fA,hA,Ru,Pt,er,O2,Wo,cA,F2,pA,Mu,pe,B2,uA,vA,H2,mA,_A,j2,wA,Cu,Tt,tr,z2,Yo,EA,G2,gA,Uu,rn,J2,bA,Vu,Dt,lr,X2,Qo,AA,q2,yA,Ou,M,K2,NA,LA,W2,$A,kA,Y2,IA,xA,Q2,SA,PA,an,Z2,TA,DA,Fu,Rt,rr,ep,Zo,RA,tp,MA,Bu,ar,ei,CA,ti,UA,VA,OA,li,FA,lp,BA,HA,Hu,Mt,or,rp,ri,jA,ap,zA,ju,on,ir,GA,ai,JA,XA,oi,qA,zu,Ct,sr,op,ii,KA,ip,WA,Gu,sn,nn,YA,Ut,si,sp,QA,ZA,np,dp,ey,ty,ni,fp,ly,ry,di,hp,ay,oy,cp,iy,sy,fi,pp,ny,dy,hi,up,fy,hy,vp,cy,Ju,Vt,nr,mp,ci,py,_p,uy,Xu,dr,wp,vy,my,dn,Ep,_y,wy,qu,Ot,fr,gp,pi,Ey,bp,gy,Ku,fn,Ap,by,Wu,Ft,hr,yp,ui,Ay,Np,yy,Yu,C,cr,Ny,vi,Ly,$y,mi,Lp,ky,Iy,$p,xy,Sy,kp,Py,Ty,hn,Dy,_i,Ry,My,ue,Cy,Ip,Uy,Vy,xp,Oy,Fy,Sp,cn,Pp,By,Hy,jy,Tp,zy,Qu,Bt,pr,Dp,wi,Gy,Rp,Jy,Zu,ur,Mp,Xy,qy,vr,Cp,Ky,Wy,Up,Yy,Qy,ev;return kr=new E({}),Ir=new E({}),Pr=new E({}),Mr=new E({}),Vr=new E({}),Yr=new E({}),Zr=new E({}),ta=new E({}),aa=new E({}),ca=new E({}),ua=new E({}),wa=new E({}),Na=new E({}),La=new E({}),xa=new E({}),Pa=new E({}),Ra=new E({}),Va=new E({}),Oa=new E({}),Ba=new E({}),Ga=new E({}),Xa=new E({}),qa=new E({}),Ka=new E({}),Wa=new E({}),Qa=new E({}),to=new E({}),ro=new E({}),ao=new E({}),io=new E({}),ho=new E({}),_o=new E({}),wo=new E({}),bo=new E({}),No=new E({}),So=new E({}),Po=new E({}),Mo=new E({}),Co=new E({}),Fo=new E({}),Bo=new E({}),Go=new E({}),Xo=new E({}),Wo=new E({}),Yo=new E({}),Qo=new E({}),Zo=new E({}),ri=new E({}),ii=new E({}),ci=new E({}),pi=new E({}),ui=new E({}),wi=new E({}),{c(){be=r("meta"),t1=d(),Ae=r("h1"),Ht=r("a"),Hn=r("span"),p(kr.$$.fragment),q0=d(),jn=r("span"),K0=i("Archived Changes"),l1=d(),ye=r("h3"),jt=r("a"),zn=r("span"),p(Ir.$$.fragment),W0=d(),Gn=r("span"),Y0=i("July 12, 2021"),r1=d(),yi=r("ul"),zt=r("li"),Q0=i("Add XCiT models from "),xr=r("a"),Z0=i("official facebook impl"),em=i(". Contributed by "),Sr=r("a"),tm=i("Alexander Soare"),a1=d(),Ne=r("h3"),Gt=r("a"),Jn=r("span"),p(Pr.$$.fragment),lm=d(),Xn=r("span"),rm=i("July 5-9, 2021"),o1=d(),re=r("ul"),Jt=r("li"),am=i("Add "),qn=r("code"),om=i("efficientnetv2_rw_t"),im=i(" weights, a custom \u2018tiny\u2019 13.6M param variant that is a bit better than (non NoisyStudent) B3 models. Both faster and better accuracy (at same or lower res)"),Kn=r("ul"),Wn=r("li"),sm=i("top-1 82.34 @ 288x288 and 82.54 @ 320x320"),nm=d(),K=r("li"),dm=i("Add "),Tr=r("a"),fm=i("SAM pretrained"),hm=i(" in1k weight for ViT B/16 ("),Yn=r("code"),cm=i("vit_base_patch16_sam_224"),pm=i(") and B/32 ("),Qn=r("code"),um=i("vit_base_patch32_sam_224"),vm=i(")  models."),mm=d(),ae=r("li"),_m=i("Add \u2018Aggregating Nested Transformer\u2019 (NesT) w/ weights converted from official "),Dr=r("a"),wm=i("Flax impl"),Em=i(". Contributed by "),Rr=r("a"),gm=i("Alexander Soare"),bm=i("."),Zn=r("ul"),oe=r("li"),ed=r("code"),Am=i("jx_nest_base"),ym=i(" - 83.534, "),td=r("code"),Nm=i("jx_nest_small"),Lm=i(" - 83.120, "),ld=r("code"),$m=i("jx_nest_tiny"),km=i(" - 81.426"),i1=d(),Le=r("h3"),Xt=r("a"),rd=r("span"),p(Mr.$$.fragment),Im=d(),ad=r("span"),xm=i("June 23, 2021"),s1=d(),Ni=r("ul"),ie=r("li"),Sm=i("Reproduce gMLP model training, "),od=r("code"),Pm=i("gmlp_s16_224"),Tm=i(" trained to 79.6 top-1, matching "),Cr=r("a"),Dm=i("paper"),Rm=i(". Hparams for this and other recent MLP training "),Ur=r("a"),Mm=i("here"),n1=d(),$e=r("h3"),qt=r("a"),id=r("span"),p(Vr.$$.fragment),Cm=d(),sd=r("span"),Um=i("June 20, 2021"),d1=d(),g=r("ul"),Or=r("li"),Vm=i("Release Vision Transformer \u2018AugReg\u2019 weights from "),Fr=r("a"),Om=i("How to train your ViT? Data, Augmentation, and Regularization in Vision Transformers"),H=r("ul"),Li=r("li"),Fm=i(".npz weight loading support added, can load any of the 50K+ weights from the "),Br=r("a"),Bm=i("AugReg series"),Hm=d(),ke=r("li"),jm=i("See "),Hr=r("a"),zm=i("example notebook"),Gm=i(" from "),jr=r("a"),Jm=i("official impl"),Xm=i(" for navigating the augreg weights"),qm=d(),$i=r("li"),Km=i("Replaced all default weights w/ best AugReg variant (if possible). All AugReg 21k classifiers work."),nd=r("ul"),W=r("li"),Wm=i("Highlights: "),dd=r("code"),Ym=i("vit_large_patch16_384"),Qm=i(" (87.1 top-1), "),fd=r("code"),Zm=i("vit_large_r50_s32_384"),e3=i(" (86.2 top-1), "),hd=r("code"),t3=i("vit_base_patch16_384"),l3=i(" (86.0 top-1)"),r3=d(),zr=r("li"),cd=r("code"),a3=i("vit_deit_*"),o3=i(" renamed to just "),pd=r("code"),i3=i("deit_*"),s3=d(),ud=r("li"),n3=i("Remove my old small model, replace with DeiT compatible small w/ AugReg weights"),d3=d(),Gr=r("li"),f3=i("Add 1st training of my "),vd=r("code"),h3=i("gmixer_24_224"),c3=i(" MLP /w GLU, 78.1 top-1 w/ 25M params."),p3=d(),Jr=r("li"),u3=i("Add weights from official ResMLP release ("),Xr=r("a"),v3=i("https://github.com/facebookresearch/deit"),m3=i(")"),_3=d(),qr=r("li"),w3=i("Add "),md=r("code"),E3=i("eca_nfnet_l2"),g3=i(" weights from my \u2018lightweight\u2019 series. 84.7 top-1 at 384x384."),b3=d(),ki=r("li"),A3=i("Add distilled BiT 50x1 student and 152x2 Teacher weights from  "),Kr=r("a"),y3=i("Knowledge distillation: A good teacher is patient and consistent"),N3=d(),Ii=r("li"),L3=i("NFNets and ResNetV2-BiT models work w/ Pytorch XLA now"),Wr=r("ul"),_d=r("li"),$3=i("weight standardization uses F.batch_norm instead of std_mean (std_mean wasn\u2019t lowered)"),k3=d(),wd=r("li"),I3=i("eps values adjusted, will be slight differences but should be quite close"),x3=d(),Ed=r("li"),S3=i("Improve test coverage and classifier interface of non-conv (vision transformer and mlp) models"),P3=d(),gd=r("li"),T3=i("Cleanup a few classifier / flatten details for models w/ conv classifiers or early global pool"),D3=d(),bd=r("li"),R3=i("Please report any regressions, this PR touched quite a few models."),f1=d(),Ie=r("h3"),Kt=r("a"),Ad=r("span"),p(Yr.$$.fragment),M3=d(),yd=r("span"),C3=i("June 8, 2021"),h1=d(),Wt=r("ul"),Nd=r("li"),U3=i("Add first ResMLP weights, trained in PyTorch XLA on TPU-VM w/ my XLA branch. 24 block variant, 79.2 top-1."),V3=d(),xi=r("li"),O3=i("Add ResNet51-Q model w/ pretrained weights at 82.36 top-1."),Qr=r("ul"),Ld=r("li"),F3=i("NFNet inspired block layout with quad layer stem and no maxpool"),B3=d(),$d=r("li"),H3=i("Same param count (35.7M) and throughput as ResNetRS-50 but +1.5 top-1 @ 224x224 and +2.5 top-1 at 288x288"),c1=d(),xe=r("h3"),Yt=r("a"),kd=r("span"),p(Zr.$$.fragment),j3=d(),Id=r("span"),z3=i("May 25, 2021"),p1=d(),se=r("ul"),xd=r("li"),G3=i("Add LeViT, Visformer, Convit (PR by Aman Arora), Twins (PR by paper authors) transformer models"),J3=d(),Sd=r("li"),X3=i("Cleanup input_size/img_size override handling and testing for all vision transformer models"),q3=d(),ea=r("li"),K3=i("Add "),Pd=r("code"),W3=i("efficientnetv2_rw_m"),Y3=i(" model and weights (started training before official code). 84.8 top-1, 53M params."),u1=d(),Se=r("h3"),Qt=r("a"),Td=r("span"),p(ta.$$.fragment),Q3=d(),Dd=r("span"),Z3=i("May 14, 2021"),v1=d(),Si=r("ul"),Zt=r("li"),e_=i("Add EfficientNet-V2 official model defs w/ ported weights from official "),la=r("a"),t_=i("Tensorflow/Keras"),l_=i(" impl."),D=r("ul"),Pi=r("li"),r_=i("1k trained variants: "),Rd=r("code"),a_=i("tf_efficientnetv2_s/m/l"),o_=d(),Ti=r("li"),i_=i("21k trained variants: "),Md=r("code"),s_=i("tf_efficientnetv2_s/m/l_in21k"),n_=d(),Di=r("li"),d_=i("21k pretrained -> 1k fine-tuned: "),Cd=r("code"),f_=i("tf_efficientnetv2_s/m/l_in21ft1k"),h_=d(),el=r("li"),c_=i("v2 models w/ v1 scaling: "),Ud=r("code"),p_=i("tf_efficientnetv2_b0"),u_=i(" through "),Vd=r("code"),v_=i("b3"),m_=d(),tl=r("li"),__=i("Rename my prev V2 guess "),Od=r("code"),w_=i("efficientnet_v2s"),E_=i(" -> "),Fd=r("code"),g_=i("efficientnetv2_rw_s"),b_=d(),ra=r("li"),A_=i("Some blank "),Bd=r("code"),y_=i("efficientnetv2_*"),N_=i(" models in-place for future native PyTorch training"),m1=d(),Pe=r("h3"),ll=r("a"),Hd=r("span"),p(aa.$$.fragment),L_=d(),jd=r("span"),$_=i("May 5, 2021"),_1=d(),b=r("ul"),Ri=r("li"),k_=i("Add MLP-Mixer models and port pretrained weights from "),oa=r("a"),I_=i("Google JAX impl"),x_=d(),Mi=r("li"),S_=i("Add CaiT models and pretrained weights from "),ia=r("a"),P_=i("FB"),T_=d(),rl=r("li"),D_=i("Add ResNet-RS models and weights from "),sa=r("a"),R_=i("TF"),M_=i(". Thanks "),na=r("a"),C_=i("Aman Arora"),U_=d(),Ci=r("li"),V_=i("Add CoaT models and weights. Thanks "),da=r("a"),O_=i("Mohammed Rizin"),F_=d(),Ui=r("li"),B_=i("Add new ImageNet-21k weights & finetuned weights for TResNet, MobileNet-V3, ViT models. Thanks "),fa=r("a"),H_=i("mrT"),j_=d(),Vi=r("li"),z_=i("Add GhostNet models and weights. Thanks "),ha=r("a"),G_=i("Kai Han"),J_=d(),Oi=r("li"),X_=i("Update ByoaNet attention modles"),Te=r("ul"),zd=r("li"),q_=i("Improve SA module inits"),K_=d(),Fi=r("li"),W_=i("Hack together experimental stand-alone Swin based attn module and "),Gd=r("code"),Y_=i("swinnet"),Q_=d(),Jd=r("li"),Z_=i("Consistent \u201826t\u2019 model defs for experiments."),e5=d(),Xd=r("li"),t5=i("Add improved Efficientnet-V2S (prelim model def) weights. 83.8 top-1."),l5=d(),qd=r("li"),r5=i("WandB logging support"),w1=d(),De=r("h3"),al=r("a"),Kd=r("span"),p(ca.$$.fragment),a5=d(),Wd=r("span"),o5=i("April 13, 2021"),E1=d(),Bi=r("ul"),Hi=r("li"),i5=i("Add Swin Transformer models and weights from "),pa=r("a"),s5=i("https://github.com/microsoft/Swin-Transformer"),g1=d(),Re=r("h3"),ol=r("a"),Yd=r("span"),p(ua.$$.fragment),n5=d(),Qd=r("span"),d5=i("April 12, 2021"),b1=d(),G=r("ul"),Zd=r("li"),f5=i("Add ECA-NFNet-L1 (slimmed down F1 w/ SiLU, 41M params) trained with this code. 84% top-1 @ 320x320. Trained at 256x256."),h5=d(),ef=r("li"),c5=i("Add EfficientNet-V2S model (unverified model definition) weights. 83.3 top-1 @ 288x288. Only trained single res 224. Working on progressive training."),p5=d(),ji=r("li"),u5=i("Add ByoaNet model definition (Bring-your-own-attention) w/ SelfAttention block and corresponding SA/SA-like modules and model defs"),Me=r("ul"),zi=r("li"),v5=i("Lambda Networks - "),va=r("a"),m5=i("https://arxiv.org/abs/2102.08602"),_5=d(),Gi=r("li"),w5=i("Bottleneck Transformers - "),ma=r("a"),E5=i("https://arxiv.org/abs/2101.11605"),g5=d(),Ji=r("li"),b5=i("Halo Nets - "),_a=r("a"),A5=i("https://arxiv.org/abs/2103.12731"),y5=d(),tf=r("li"),N5=i("Adabelief optimizer contributed by Juntang Zhuang"),A1=d(),Ce=r("h3"),il=r("a"),lf=r("span"),p(wa.$$.fragment),L5=d(),rf=r("span"),$5=i("April 1, 2021"),y1=d(),N=r("ul"),Ue=r("li"),k5=i("Add snazzy "),af=r("code"),I5=i("benchmark.py"),x5=i(" script for bulk "),of=r("code"),S5=i("timm"),P5=i(" model benchmarking of train and/or inference"),T5=d(),sl=r("li"),D5=i("Add Pooling-based Vision Transformer (PiT) models (from "),Ea=r("a"),R5=i("https://github.com/naver-ai/pit"),M5=i(")"),ga=r("ul"),sf=r("li"),C5=i("Merged distilled variant into main for torchscript compatibility"),U5=d(),ba=r("li"),V5=i("Some "),nf=r("code"),O5=i("timm"),F5=i(" cleanup/style tweaks and weights have hub download support"),B5=d(),Xi=r("li"),H5=i("Cleanup Vision Transformer (ViT) models"),j=r("ul"),df=r("li"),j5=i("Merge distilled (DeiT) model into main so that torchscript can work"),z5=d(),ff=r("li"),G5=i("Support updated weight init (defaults to old still) that closer matches original JAX impl (possibly better training from scratch)"),J5=d(),hf=r("li"),X5=i("Separate hybrid model defs into different file and add several new model defs to fiddle with, support patch_size != 1 for hybrids"),q5=d(),cf=r("li"),K5=i("Fix fine-tuning num_class changes (PiT and ViT) and pos_embed resizing (Vit) with distilled variants"),W5=d(),pf=r("li"),Y5=i("nn.Sequential for block stack (does not break downstream compat)"),Q5=d(),Aa=r("li"),Z5=i("TnT (Transformer-in-Transformer) models contributed by author (from "),ya=r("a"),ew=i("https://gitee.com/mindspore/mindspore/tree/master/model_zoo/research/cv/TNT"),tw=i(")"),lw=d(),uf=r("li"),rw=i("Add RegNetY-160 weights from DeiT teacher model"),aw=d(),Ve=r("li"),ow=i("Add new NFNet-L0 w/ SE attn (rename "),vf=r("code"),iw=i("nfnet_l0b"),sw=i("->"),mf=r("code"),nw=i("nfnet_l0"),dw=i(") weights 82.75 top-1 @ 288x288"),fw=d(),_f=r("li"),hw=i("Some fixes/improvements for TFDS dataset wrapper"),N1=d(),Oe=r("h3"),nl=r("a"),wf=r("span"),p(Na.$$.fragment),cw=d(),Ef=r("span"),pw=i("March 7, 2021"),L1=d(),dl=r("ul"),gf=r("li"),uw=i("First 0.4.x PyPi release w/ NFNets (& related), ByoB (GPU-Efficient, RepVGG, etc)."),vw=d(),bf=r("li"),mw=i("Change feature extraction for pre-activation nets (NFNets, ResNetV2) to return features before activation."),$1=d(),Fe=r("h3"),fl=r("a"),Af=r("span"),p(La.$$.fragment),_w=d(),yf=r("span"),ww=i("Feb 18, 2021"),k1=d(),qi=r("ul"),hl=r("li"),Ew=i("Add pretrained weights and model variants for NFNet-F* models from "),$a=r("a"),gw=i("DeepMind Haiku impl"),bw=i("."),Y=r("ul"),ka=r("li"),Aw=i("Models are prefixed with "),Nf=r("code"),yw=i("dm_"),Nw=i(". They require SAME padding conv, skipinit enabled, and activation gains applied in act fn."),Lw=d(),Ia=r("li"),$w=i("These models are big, expect to run out of GPU memory. With the GELU activiation + other options, they are roughly 1/2 the inference speed of my SiLU PyTorch optimized "),Lf=r("code"),kw=i("s"),Iw=i(" variants."),xw=d(),$f=r("li"),Sw=i("Original model results are based on pre-processing that is not the same as all other models so you\u2019ll see different results in the results csv (once updated)."),Pw=d(),Ki=r("li"),Tw=i("Matching the original pre-processing as closely as possible I get these results:"),I=r("ul"),Wi=r("li"),kf=r("code"),Dw=i("dm_nfnet_f6"),Rw=i(" - 86.352"),Mw=d(),Yi=r("li"),If=r("code"),Cw=i("dm_nfnet_f5"),Uw=i(" - 86.100"),Vw=d(),Qi=r("li"),xf=r("code"),Ow=i("dm_nfnet_f4"),Fw=i(" - 85.834"),Bw=d(),Zi=r("li"),Sf=r("code"),Hw=i("dm_nfnet_f3"),jw=i(" - 85.676"),zw=d(),es=r("li"),Pf=r("code"),Gw=i("dm_nfnet_f2"),Jw=i(" - 85.178"),Xw=d(),ts=r("li"),Tf=r("code"),qw=i("dm_nfnet_f1"),Kw=i(" - 84.696"),Ww=d(),ls=r("li"),Df=r("code"),Yw=i("dm_nfnet_f0"),Qw=i(" - 83.464"),I1=d(),Be=r("h3"),cl=r("a"),Rf=r("span"),p(xa.$$.fragment),Zw=d(),Mf=r("span"),eE=i("Feb 16, 2021"),x1=d(),rs=r("ul"),pl=r("li"),tE=i("Add Adaptive Gradient Clipping (AGC) as per "),Sa=r("a"),lE=i("https://arxiv.org/abs/2102.06171"),rE=i(". Integrated w/ PyTorch gradient clipping via mode arg that defaults to prev \u2018norm\u2019 mode. For backward arg compat, clip-grad arg must be specified to enable when using train.py."),Q=r("ul"),as=r("li"),aE=i("AGC w/ default clipping factor "),Cf=r("code"),oE=i("--clip-grad .01 --clip-mode agc"),iE=d(),os=r("li"),sE=i("PyTorch global norm of 1.0 (old behaviour, always norm), "),Uf=r("code"),nE=i("--clip-grad 1.0"),dE=d(),is=r("li"),fE=i("PyTorch value clipping of 10, "),Vf=r("code"),hE=i("--clip-grad 10. --clip-mode value"),cE=d(),Of=r("li"),pE=i("AGC performance is definitely sensitive to the clipping factor. More experimentation needed to determine good values for smaller batch sizes and optimizers besides those in paper. So far I\u2019ve found .001-.005 is necessary for stable RMSProp training w/ NFNet/NF-ResNet."),S1=d(),He=r("h3"),ul=r("a"),Ff=r("span"),p(Pa.$$.fragment),uE=d(),Bf=r("span"),vE=i("Feb 12, 2021"),P1=d(),ss=r("ul"),Ta=r("li"),mE=i("Update Normalization-Free nets to include new NFNet-F ("),Da=r("a"),_E=i("https://arxiv.org/abs/2102.06171"),wE=i(") model defs"),T1=d(),je=r("h3"),vl=r("a"),Hf=r("span"),p(Ra.$$.fragment),EE=d(),jf=r("span"),gE=i("Feb 10, 2021"),D1=d(),J=r("ul"),ns=r("li"),bE=i("More model archs, incl a flexible ByobNet backbone (\u2018Bring-your-own-blocks\u2019)"),ze=r("ul"),ml=r("li"),AE=i("GPU-Efficient-Networks ("),Ma=r("a"),yE=i("https://github.com/idstcv/GPU-Efficient-Networks"),NE=i("), impl in "),zf=r("code"),LE=i("byobnet.py"),$E=d(),_l=r("li"),kE=i("RepVGG ("),Ca=r("a"),IE=i("https://github.com/DingXiaoH/RepVGG"),xE=i("), impl in "),Gf=r("code"),SE=i("byobnet.py"),PE=d(),Ua=r("li"),TE=i("classic VGG (from torchvision, impl in "),Jf=r("code"),DE=i("vgg"),RE=i(")"),ME=d(),Xf=r("li"),CE=i("Refinements to normalizer layer arg handling and normalizer+act layer handling in some models"),UE=d(),Ge=r("li"),VE=i("Default AMP mode changed to native PyTorch AMP instead of APEX. Issues not being fixed with APEX. Native works with "),qf=r("code"),OE=i("--channels-last"),FE=i(" and "),Kf=r("code"),BE=i("--torchscript"),HE=i(" model training, APEX does not."),jE=d(),Wf=r("li"),zE=i("Fix a few bugs introduced since last pypi release"),R1=d(),Je=r("h3"),wl=r("a"),Yf=r("span"),p(Va.$$.fragment),GE=d(),Qf=r("span"),JE=i("Feb 8, 2021"),M1=d(),ne=r("ul"),ds=r("li"),XE=i("Add several ResNet weights with ECA attention. 26t & 50t trained @ 256, test @ 320. 269d train @ 256, fine-tune @320, test @ 352."),Xe=r("ul"),fs=r("li"),Zf=r("code"),qE=i("ecaresnet26t"),KE=i(" - 79.88 top-1 @ 320x320, 79.08 @ 256x256"),WE=d(),hs=r("li"),eh=r("code"),YE=i("ecaresnet50t"),QE=i(" - 82.35 top-1 @ 320x320, 81.52 @ 256x256"),ZE=d(),cs=r("li"),th=r("code"),eg=i("ecaresnet269d"),tg=i(" - 84.93 top-1 @ 352x352, 84.87 @ 320x320"),lg=d(),x=r("li"),rg=i("Remove separate tiered ("),lh=r("code"),ag=i("t"),og=i(") vs tiered_narrow ("),rh=r("code"),ig=i("tn"),sg=i(") ResNet model defs, all "),ah=r("code"),ng=i("tn"),dg=i(" changed to "),oh=r("code"),fg=i("t"),hg=i(" and "),ih=r("code"),cg=i("t"),pg=i(" models removed ("),sh=r("code"),ug=i("seresnext26t_32x4d"),vg=i(" only model w/ weights that was removed)."),mg=d(),qe=r("li"),_g=i("Support model default_cfgs with separate train vs test resolution "),nh=r("code"),wg=i("test_input_size"),Eg=i(" and remove extra "),dh=r("code"),gg=i("_320"),bg=i(" suffix ResNet model defs that were just for test."),C1=d(),Ke=r("h3"),El=r("a"),fh=r("span"),p(Oa.$$.fragment),Ag=d(),hh=r("span"),yg=i("Jan 30, 2021"),U1=d(),ps=r("ul"),us=r("li"),Ng=i("Add initial \u201CNormalization Free\u201D NF-RegNet-B* and NF-ResNet model definitions based on "),Fa=r("a"),Lg=i("paper"),V1=d(),We=r("h3"),gl=r("a"),ch=r("span"),p(Ba.$$.fragment),$g=d(),ph=r("span"),kg=i("Jan 25, 2021"),O1=d(),A=r("ul"),vs=r("li"),Ig=i("Add ResNetV2 Big Transfer (BiT) models w/ ImageNet-1k and 21k weights from "),Ha=r("a"),xg=i("https://github.com/google-research/big_transfer"),Sg=d(),ms=r("li"),Pg=i("Add official R50+ViT-B/16 hybrid models + weights from "),ja=r("a"),Tg=i("https://github.com/google-research/vision_transformer"),Dg=d(),_s=r("li"),Rg=i("ImageNet-21k ViT weights are added w/ model defs and representation layer (pre logits) support"),uh=r("ul"),vh=r("li"),Mg=i("NOTE: ImageNet-21k classifier heads were zero\u2019d in original weights, they are only useful for transfer learning"),Cg=d(),ws=r("li"),Ug=i("Add model defs and weights for DeiT Vision Transformer models from "),za=r("a"),Vg=i("https://github.com/facebookresearch/deit"),Og=d(),mh=r("li"),Fg=i("Refactor dataset classes into ImageDataset/IterableImageDataset + dataset specific parser classes"),Bg=d(),Es=r("li"),Hg=i("Add Tensorflow-Datasets (TFDS) wrapper to allow use of TFDS image classification sets with train script"),_h=r("ul"),gs=r("li"),jg=i("Ex: "),wh=r("code"),zg=i("train.py /data/tfds --dataset tfds/oxford_iiit_pet --val-split test --model resnet50 -b 256 --amp --num-classes 37 --opt adamw --lr 3e-4 --weight-decay .001 --pretrained -j 2"),Gg=d(),bs=r("li"),Jg=i("Add improved .tar dataset parser that reads images from .tar, folder of .tar files, or .tar within .tar"),Eh=r("ul"),As=r("li"),Xg=i("Run validation on full ImageNet-21k directly from tar w/ BiT model: "),gh=r("code"),qg=i("validate.py /data/fall11_whole.tar --model resnetv2_50x1_bitm_in21k --amp"),Kg=d(),bh=r("li"),Wg=i("Models in this update should be stable w/ possible exception of ViT/BiT, possibility of some regressions with train/val scripts and dataset handling"),F1=d(),Ye=r("h3"),bl=r("a"),Ah=r("span"),p(Ga.$$.fragment),Yg=d(),yh=r("span"),Qg=i("Jan 3, 2021"),B1=d(),Al=r("ul"),ys=r("li"),Zg=i("Add SE-ResNet-152D weights"),Ja=r("ul"),Nh=r("li"),e8=i("256x256 val, 0.94 crop top-1 - 83.75"),t8=d(),Lh=r("li"),l8=i("320x320 val, 1.0 crop - 84.36"),r8=d(),$h=r("li"),a8=i("Update results files"),H1=d(),Qe=r("h3"),yl=r("a"),kh=r("span"),p(Xa.$$.fragment),o8=d(),Ih=r("span"),i8=i("Dec 18, 2020"),j1=d(),Ns=r("ul"),Ls=r("li"),s8=i("Add ResNet-101D, ResNet-152D, and ResNet-200D weights trained @ 256x256"),Ze=r("ul"),xh=r("li"),n8=i("256x256 val, 0.94 crop (top-1) - 101D (82.33), 152D (83.08), 200D (83.25)"),d8=d(),Sh=r("li"),f8=i("288x288 val, 1.0 crop - 101D (82.64), 152D (83.48), 200D (83.76)"),h8=d(),Ph=r("li"),c8=i("320x320 val, 1.0 crop - 101D (83.00), 152D (83.66), 200D (84.01)"),z1=d(),et=r("h3"),Nl=r("a"),Th=r("span"),p(qa.$$.fragment),p8=d(),Dh=r("span"),u8=i("Dec 7, 2020"),G1=d(),de=r("ul"),Rh=r("li"),v8=i("Simplify EMA module (ModelEmaV2), compatible with fully torchscripted models"),m8=d(),Mh=r("li"),_8=i("Misc fixes for SiLU ONNX export, default_cfg missing from Feature extraction models, Linear layer w/ AMP + torchscript"),w8=d(),Ch=r("li"),E8=i("PyPi release @ 0.3.2 (needed by EfficientDet)"),J1=d(),tt=r("h3"),Ll=r("a"),Uh=r("span"),p(Ka.$$.fragment),g8=d(),Vh=r("span"),b8=i("Oct 30, 2020"),X1=d(),R=r("ul"),Oh=r("li"),A8=i("Test with PyTorch 1.7 and fix a small top-n metric view vs reshape issue."),y8=d(),Fh=r("li"),N8=i("Convert newly added 224x224 Vision Transformer weights from official JAX repo. 81.8 top-1 for B/16, 83.1 L/16."),L8=d(),Bh=r("li"),$8=i("Support PyTorch 1.7 optimized, native SiLU (aka Swish) activation. Add mapping to \u2018silu\u2019 name, custom swish will eventually be deprecated."),k8=d(),Hh=r("li"),I8=i("Fix regression for loading pretrained classifier via direct model entrypoint functions. Didn\u2019t impact create_model() factory usage."),x8=d(),jh=r("li"),S8=i("PyPi release @ 0.3.0 version!"),q1=d(),lt=r("h3"),$l=r("a"),zh=r("span"),p(Wa.$$.fragment),P8=d(),Gh=r("span"),T8=i("Oct 26, 2020"),K1=d(),kl=r("ul"),$s=r("li"),D8=i("Update Vision Transformer models to be compatible with official code release at "),Ya=r("a"),R8=i("https://github.com/google-research/vision_transformer"),M8=d(),ks=r("li"),C8=i("Add Vision Transformer weights (ImageNet-21k pretrain) for 384x384 base and large models converted from official jax impl"),Z=r("ul"),Jh=r("li"),U8=i("ViT-B/16 - 84.2"),V8=d(),Xh=r("li"),O8=i("ViT-B/32 - 81.7"),F8=d(),qh=r("li"),B8=i("ViT-L/16 - 85.2"),H8=d(),Kh=r("li"),j8=i("ViT-L/32 - 81.5"),W1=d(),rt=r("h3"),Il=r("a"),Wh=r("span"),p(Qa.$$.fragment),z8=d(),Yh=r("span"),G8=i("Oct 21, 2020"),Y1=d(),Is=r("ul"),Za=r("li"),J8=i("Weights added for Vision Transformer (ViT) models. 77.86 top-1 for \u2018small\u2019 and 79.35 for \u2018base\u2019. Thanks to "),eo=r("a"),X8=i("Christof"),q8=i(" for training the base model w/ lots of GPUs."),Q1=d(),at=r("h3"),xl=r("a"),Qh=r("span"),p(to.$$.fragment),K8=d(),Zh=r("span"),W8=i("Oct 13, 2020"),Z1=d(),X=r("ul"),ec=r("li"),Y8=i("Initial impl of Vision Transformer models. Both patch and hybrid (CNN backbone) variants. Currently trying to train\u2026"),Q8=d(),tc=r("li"),Z8=i("Adafactor and AdaHessian (FP32 only, no AMP) optimizers"),e4=d(),lo=r("li"),t4=i("EdgeTPU-M ("),lc=r("code"),l4=i("efficientnet_em"),r4=i(") model trained in PyTorch, 79.3 top-1"),a4=d(),rc=r("li"),o4=i("Pip release, doc updates pending a few more changes\u2026"),eu=d(),ot=r("h3"),Sl=r("a"),ac=r("span"),p(ro.$$.fragment),i4=d(),oc=r("span"),s4=i("Sept 18, 2020"),tu=d(),Pl=r("ul"),ic=r("li"),n4=i("New ResNet \u2018D\u2019 weights. 72.7 (top-1) ResNet-18-D, 77.1 ResNet-34-D, 80.5 ResNet-50-D"),d4=d(),sc=r("li"),f4=i("Added a few untrained defs for other ResNet models (66D, 101D, 152D, 200/200D)"),lu=d(),it=r("h3"),Tl=r("a"),nc=r("span"),p(ao.$$.fragment),h4=d(),dc=r("span"),c4=i("Sept 3, 2020"),ru=d(),fe=r("ul"),xs=r("li"),p4=i("New weights"),oo=r("ul"),fc=r("li"),u4=i("Wide-ResNet50 - 81.5 top-1 (vs 78.5 torchvision)"),v4=d(),hc=r("li"),m4=i("SEResNeXt50-32x4d - 81.3 top-1 (vs 79.1 cadene)"),_4=d(),ee=r("li"),w4=i("Support for native Torch AMP and channels_last memory format added to train/validate scripts ("),cc=r("code"),E4=i("--channels-last"),g4=i(", "),pc=r("code"),b4=i("--native-amp"),A4=i(" vs "),uc=r("code"),y4=i("--apex-amp"),N4=i(")"),L4=d(),vc=r("li"),$4=i("Models tested with channels_last on latest NGC 20.08 container. AdaptiveAvgPool in attn layers changed to mean((2,3)) to work around bug with NHWC kernel."),au=d(),st=r("h3"),Dl=r("a"),mc=r("span"),p(io.$$.fragment),k4=d(),_c=r("span"),I4=i("Aug 12, 2020"),ou=d(),he=r("ul"),Ss=r("li"),x4=i("New/updated weights from training experiments"),nt=r("ul"),wc=r("li"),S4=i("EfficientNet-B3 - 82.1 top-1 (vs 81.6 for official with AA and 81.9 for AdvProp)"),P4=d(),Ec=r("li"),T4=i("RegNetY-3.2GF - 82.0 top-1 (78.9 from official ver)"),D4=d(),gc=r("li"),R4=i("CSPResNet50 - 79.6 top-1 (76.6 from official ver)"),M4=d(),so=r("li"),C4=i("Add CutMix integrated w/ Mixup. See "),no=r("a"),U4=i("pull request"),V4=i(" for some usage examples"),O4=d(),fo=r("li"),F4=i("Some fixes for using pretrained weights with "),bc=r("code"),B4=i("in_chans"),H4=i(" != 3 on several models."),iu=d(),dt=r("h3"),Rl=r("a"),Ac=r("span"),p(ho.$$.fragment),j4=d(),yc=r("span"),z4=i("Aug 5, 2020"),su=d(),Ps=r("p"),G4=i("Universal feature extraction, new models, new weights, new test sets."),nu=d(),y=r("ul"),ft=r("li"),J4=i("All models support the "),Nc=r("code"),X4=i("features_only=True"),q4=i(" argument for "),Lc=r("code"),K4=i("create_model"),W4=i(" call to return a network that extracts feature maps from the deepest layer at each stride."),Y4=d(),Ts=r("li"),Q4=i("New models"),ht=r("ul"),$c=r("li"),Z4=i("CSPResNet, CSPResNeXt, CSPDarkNet, DarkNet"),e6=d(),kc=r("li"),t6=i("ReXNet"),l6=d(),Ic=r("li"),r6=i("(Modified Aligned) Xception41/65/71 (a proper port of TF models)"),a6=d(),Ds=r("li"),o6=i("New trained weights"),z=r("ul"),xc=r("li"),i6=i("SEResNet50 - 80.3 top-1"),s6=d(),Sc=r("li"),n6=i("CSPDarkNet53 - 80.1 top-1"),d6=d(),Pc=r("li"),f6=i("CSPResNeXt50 - 80.0 top-1"),h6=d(),Tc=r("li"),c6=i("DPN68b - 79.2 top-1"),p6=d(),co=r("li"),u6=i("EfficientNet-Lite0 (non-TF ver) - 75.5 (submitted by "),po=r("a"),v6=i("@hal-314"),m6=i(")"),_6=d(),Rs=r("li"),w6=i("Add \u2018real\u2019 labels for ImageNet and ImageNet-Renditions test set, see "),Ms=r("a"),Dc=r("code"),E6=i("results/README.md"),g6=d(),Cs=r("li"),b6=i("Test set ranking/top-n diff script by "),uo=r("a"),A6=i("@KushajveerSingh"),y6=d(),Rc=r("li"),N6=i("Train script and loader/transform tweaks to punch through more aug arguments"),L6=d(),Us=r("li"),$6=i("README and documentation overhaul. See initial (WIP) documentation at "),vo=r("a"),k6=i("https://rwightman.github.io/pytorch-image-models/"),I6=d(),Vs=r("li"),x6=i("adamp and sgdp optimizers added by "),mo=r("a"),S6=i("@hellbell"),du=d(),ct=r("h3"),Ml=r("a"),Mc=r("span"),p(_o.$$.fragment),P6=d(),Cc=r("span"),T6=i("June 11, 2020"),fu=d(),Os=r("p"),D6=i("Bunch of changes:"),hu=d(),L=r("ul"),Uc=r("li"),R6=i("DenseNet models updated with memory efficient addition from torchvision (fixed a bug), blur pooling and deep stem additions"),M6=d(),Vc=r("li"),C6=i("VoVNet V1 and V2 models added, 39 V2 variant (ese_vovnet_39b) trained to 79.3 top-1"),U6=d(),Fs=r("li"),V6=i("Activation factory added along with new activations:"),pt=r("ul"),Oc=r("li"),O6=i("select act at model creation time for more flexibility in using activations compatible with scripting or tracing (ONNX export)"),F6=d(),Fc=r("li"),B6=i("hard_mish (experimental) added with memory-efficient grad, along with ME hard_swish"),H6=d(),Bc=r("li"),j6=i("context mgr for setting exportable/scriptable/no_jit states"),z6=d(),Hc=r("li"),G6=i("Norm + Activation combo layers added with initial trial support in DenseNet and VoVNet along with impl of EvoNorm and InplaceAbn wrapper that fit the interface"),J6=d(),jc=r("li"),X6=i("Torchscript works for all but two of the model types as long as using Pytorch 1.5+, tests added for this"),q6=d(),zc=r("li"),K6=i("Some import cleanup and classifier reset changes, all models will have classifier reset to nn.Identity on reset_classifer(0) call"),W6=d(),Gc=r("li"),Y6=i("Prep for 0.1.28 pip release"),cu=d(),ut=r("h3"),Cl=r("a"),Jc=r("span"),p(wo.$$.fragment),Q6=d(),Xc=r("span"),Z6=i("May 12, 2020"),pu=d(),Bs=r("ul"),vt=r("li"),e7=i("Add ResNeSt models (code adapted from "),Eo=r("a"),t7=i("https://github.com/zhanghang1989/ResNeSt"),l7=i(", paper "),go=r("a"),r7=i("https://arxiv.org/abs/2004.08955"),a7=i("))"),uu=d(),mt=r("h3"),Ul=r("a"),qc=r("span"),p(bo.$$.fragment),o7=d(),Kc=r("span"),i7=i("May 3, 2020"),vu=d(),Hs=r("ul"),Vl=r("li"),s7=i("Pruned EfficientNet B1, B2, and B3 ("),Ao=r("a"),n7=i("https://arxiv.org/abs/2002.08258"),d7=i(") contributed by "),yo=r("a"),f7=i("Yonathan Aflalo"),mu=d(),_t=r("h3"),Ol=r("a"),Wc=r("span"),p(No.$$.fragment),h7=d(),Yc=r("span"),c7=i("May 1, 2020"),_u=d(),Fl=r("ul"),js=r("li"),p7=i("Merged a number of execellent contributions in the ResNet model family over the past month"),wt=r("ul"),Lo=r("li"),u7=i("BlurPool2D and resnetblur models initiated by "),$o=r("a"),v7=i("Chris Ha"),m7=i(", I trained resnetblur50 to 79.3."),_7=d(),zs=r("li"),w7=i("TResNet models and SpaceToDepth, AntiAliasDownsampleLayer layers by "),ko=r("a"),E7=i("mrT23"),g7=d(),Bl=r("li"),b7=i("ecaresnet (50d, 101d, light) models and two pruned variants using pruning as per ("),Io=r("a"),A7=i("https://arxiv.org/abs/2002.08258"),y7=i(") by "),xo=r("a"),N7=i("Yonathan Aflalo"),L7=d(),Qc=r("li"),$7=i("200 pretrained models in total now with updated results csv in results folder"),wu=d(),Et=r("h3"),Hl=r("a"),Zc=r("span"),p(So.$$.fragment),k7=d(),e2=r("span"),I7=i("April 5, 2020"),Eu=d(),Gs=r("ul"),Js=r("li"),x7=i("Add some newly trained MobileNet-V2 models trained with latest h-params, rand augment. They compare quite favourably to EfficientNet-Lite"),te=r("ul"),t2=r("li"),S7=i("3.5M param MobileNet-V2 100 @ 73%"),P7=d(),l2=r("li"),T7=i("4.5M param MobileNet-V2 110d @ 75%"),D7=d(),r2=r("li"),R7=i("6.1M param MobileNet-V2 140 @ 76.5%"),M7=d(),a2=r("li"),C7=i("5.8M param MobileNet-V2 120d @ 77.3%"),gu=d(),gt=r("h3"),jl=r("a"),o2=r("span"),p(Po.$$.fragment),U7=d(),i2=r("span"),V7=i("March 18, 2020"),bu=d(),zl=r("ul"),Xs=r("li"),O7=i("Add EfficientNet-Lite models w/ weights ported from "),To=r("a"),F7=i("Tensorflow TPU"),B7=d(),Do=r("li"),H7=i("Add RandAugment trained ResNeXt-50 32x4d weights with 79.8 top-1. Trained by "),Ro=r("a"),j7=i("Andrew Lavin"),z7=i(" (see Training section for hparams)"),Au=d(),bt=r("h3"),Gl=r("a"),s2=r("span"),p(Mo.$$.fragment),G7=d(),n2=r("span"),J7=i("April 5, 2020"),yu=d(),qs=r("ul"),Ks=r("li"),X7=i("Add some newly trained MobileNet-V2 models trained with latest h-params, rand augment. They compare quite favourably to EfficientNet-Lite"),le=r("ul"),d2=r("li"),q7=i("3.5M param MobileNet-V2 100 @ 73%"),K7=d(),f2=r("li"),W7=i("4.5M param MobileNet-V2 110d @ 75%"),Y7=d(),h2=r("li"),Q7=i("6.1M param MobileNet-V2 140 @ 76.5%"),Z7=d(),c2=r("li"),eb=i("5.8M param MobileNet-V2 120d @ 77.3%"),Nu=d(),At=r("h3"),Jl=r("a"),p2=r("span"),p(Co.$$.fragment),tb=d(),u2=r("span"),lb=i("March 18, 2020"),Lu=d(),Xl=r("ul"),Ws=r("li"),rb=i("Add EfficientNet-Lite models w/ weights ported from "),Uo=r("a"),ab=i("Tensorflow TPU"),ob=d(),Vo=r("li"),ib=i("Add RandAugment trained ResNeXt-50 32x4d weights with 79.8 top-1. Trained by "),Oo=r("a"),sb=i("Andrew Lavin"),nb=i(" (see Training section for hparams)"),$u=d(),yt=r("h3"),ql=r("a"),v2=r("span"),p(Fo.$$.fragment),db=d(),m2=r("span"),fb=i("Feb 29, 2020"),ku=d(),ce=r("ul"),_2=r("li"),hb=i("New MobileNet-V3 Large weights trained from stratch with this code to 75.77% top-1"),cb=d(),Ys=r("li"),pb=i("IMPORTANT CHANGE - default weight init changed for all MobilenetV3 / EfficientNet / related models"),Nt=r("ul"),w2=r("li"),ub=i("overall results similar to a bit better training from scratch on a few smaller models tried"),vb=d(),E2=r("li"),mb=i("performance early in training seems consistently improved but less difference by end"),_b=d(),Lt=r("li"),wb=i("set "),g2=r("code"),Eb=i("fix_group_fanout=False"),gb=i(" in "),b2=r("code"),bb=i("_init_weight_goog"),Ab=i(" fn if you need to reproducte past behaviour"),yb=d(),A2=r("li"),Nb=i("Experimental LR noise feature added applies a random perturbation to LR each epoch in specified range of training"),Iu=d(),$t=r("h3"),Kl=r("a"),y2=r("span"),p(Bo.$$.fragment),Lb=d(),N2=r("span"),$b=i("Feb 18, 2020"),xu=d(),Wl=r("ul"),Yl=r("li"),kb=i("Big refactor of model layers and addition of several attention mechanisms. Several additions motivated by \u2018Compounding the Performance Improvements\u2026\u2019 ("),Ho=r("a"),Ib=i("https://arxiv.org/abs/2001.06268"),xb=i("):"),S=r("ul"),kt=r("li"),Sb=i("Move layer/module impl into "),L2=r("code"),Pb=i("layers"),Tb=i(" subfolder/module of "),$2=r("code"),Db=i("models"),Rb=i(" and organize in a more granular fashion"),Mb=d(),k2=r("li"),Cb=i("ResNet downsample paths now properly support dilation (output stride != 32) for avg_pool (\u2018D\u2019 variant) and 3x3 (SENets) networks"),Ub=d(),Qs=r("li"),Vb=i("Add Selective Kernel Nets on top of ResNet base, pretrained weights"),It=r("ul"),I2=r("li"),Ob=i("skresnet18 - 73% top-1"),Fb=d(),x2=r("li"),Bb=i("skresnet34 - 76.9% top-1"),Hb=d(),S2=r("li"),jb=i("skresnext50_32x4d (equiv to SKNet50) - 80.2% top-1"),zb=d(),Zs=r("li"),Gb=i("ECA and CECA (circular padding) attention layer contributed by "),jo=r("a"),Jb=i("Chris Ha"),Xb=d(),P2=r("li"),qb=i("CBAM attention experiment (not the best results so far, may remove)"),Kb=d(),zo=r("li"),Wb=i("Attention factory to allow dynamically selecting one of SE, ECA, CBAM in the "),T2=r("code"),Yb=i(".se"),Qb=i(" position for all ResNets"),Zb=d(),D2=r("li"),eA=i("Add DropBlock and DropPath (formerly DropConnect for EfficientNet/MobileNetv3) support to all ResNet variants"),tA=d(),R2=r("li"),lA=i("Full dataset results updated that incl NoisyStudent weights and 2 of the 3 SK weights"),Su=d(),xt=r("h3"),Ql=r("a"),M2=r("span"),p(Go.$$.fragment),rA=d(),C2=r("span"),aA=i("Feb 12, 2020"),Pu=d(),en=r("ul"),tn=r("li"),oA=i("Add EfficientNet-L2 and B0-B7 NoisyStudent weights ported from "),Jo=r("a"),iA=i("Tensorflow TPU"),Tu=d(),St=r("h3"),Zl=r("a"),U2=r("span"),p(Xo.$$.fragment),sA=d(),V2=r("span"),nA=i("Feb 6, 2020"),Du=d(),ln=r("ul"),qo=r("li"),dA=i("Add RandAugment trained EfficientNet-ES (EdgeTPU-Small) weights with 78.1 top-1. Trained by "),Ko=r("a"),fA=i("Andrew Lavin"),hA=i(" (see Training section for hparams)"),Ru=d(),Pt=r("h3"),er=r("a"),O2=r("span"),p(Wo.$$.fragment),cA=d(),F2=r("span"),pA=i("Feb 1/2, 2020"),Mu=d(),pe=r("ul"),B2=r("li"),uA=i("Port new EfficientNet-B8 (RandAugment) weights, these are different than the B8 AdvProp, different input normalization."),vA=d(),H2=r("li"),mA=i("Update results csv files on all models for ImageNet validation and three other test sets"),_A=d(),j2=r("li"),wA=i("Push PyPi package update"),Cu=d(),Tt=r("h3"),tr=r("a"),z2=r("span"),p(Yo.$$.fragment),EA=d(),G2=r("span"),gA=i("Jan 31, 2020"),Uu=d(),rn=r("ul"),J2=r("li"),bA=i("Update ResNet50 weights with a new 79.038 result from further JSD / AugMix experiments. Full command line for reproduction in training section below."),Vu=d(),Dt=r("h3"),lr=r("a"),X2=r("span"),p(Qo.$$.fragment),AA=d(),q2=r("span"),yA=i("Jan 11/12, 2020"),Ou=d(),M=r("ul"),K2=r("li"),NA=i("Master may be a bit unstable wrt to training, these changes have been tested but not all combos"),LA=d(),W2=r("li"),$A=i("Implementations of AugMix added to existing RA and AA. Including numerous supporting pieces like JSD loss (Jensen-Shannon divergence + CE), and AugMixDataset"),kA=d(),Y2=r("li"),IA=i("SplitBatchNorm adaptation layer added for implementing Auxiliary BN as per AdvProp paper"),xA=d(),Q2=r("li"),SA=i("ResNet-50 AugMix trained model w/ 79% top-1 added"),PA=d(),an=r("li"),Z2=r("code"),TA=i("seresnext26tn_32x4d"),DA=i(" - 77.99 top-1, 93.75 top-5 added to tiered experiment, higher img/s than \u2018t\u2019 and \u2018d\u2019"),Fu=d(),Rt=r("h3"),rr=r("a"),ep=r("span"),p(Zo.$$.fragment),RA=d(),tp=r("span"),MA=i("Jan 3, 2020"),Bu=d(),ar=r("ul"),ei=r("li"),CA=i("Add RandAugment trained EfficientNet-B0 weight with 77.7 top-1. Trained by "),ti=r("a"),UA=i("Michael Klachko"),VA=i(" with this code and recent hparams (see Training section)"),OA=d(),li=r("li"),FA=i("Add "),lp=r("code"),BA=i("avg_checkpoints.py"),HA=i(" script for post training weight averaging and update all scripts with header docstrings and shebangs."),Hu=d(),Mt=r("h3"),or=r("a"),rp=r("span"),p(ri.$$.fragment),jA=d(),ap=r("span"),zA=i("Dec 30, 2019"),ju=d(),on=r("ul"),ir=r("li"),GA=i("Merge "),ai=r("a"),JA=i("Dushyant Mehta\u2019s"),XA=i(" PR for SelecSLS (Selective Short and Long Range Skip Connections) networks. Good GPU memory consumption and throughput. Original: "),oi=r("a"),qA=i("https://github.com/mehtadushy/SelecSLS-Pytorch"),zu=d(),Ct=r("h3"),sr=r("a"),op=r("span"),p(ii.$$.fragment),KA=d(),ip=r("span"),WA=i("Dec 28, 2019"),Gu=d(),sn=r("ul"),nn=r("li"),YA=i("Add new model weights and training hparams (see Training Hparams section)"),Ut=r("ul"),si=r("li"),sp=r("code"),QA=i("efficientnet_b3"),ZA=i(" - 81.5 top-1, 95.7 top-5 at default res/crop, 81.9, 95.8 at 320x320 1.0 crop-pct"),np=r("ul"),dp=r("li"),ey=i("trained with RandAugment, ended up with an interesting but less than perfect result (see training section)"),ty=d(),ni=r("li"),fp=r("code"),ly=i("seresnext26d_32x4d"),ry=i("- 77.6 top-1, 93.6 top-5"),di=r("ul"),hp=r("li"),ay=i("deep stem (32, 32, 64), avgpool downsample"),oy=d(),cp=r("li"),iy=i("stem/dowsample from bag-of-tricks paper"),sy=d(),fi=r("li"),pp=r("code"),ny=i("seresnext26t_32x4d"),dy=i("- 78.0 top-1, 93.7 top-5"),hi=r("ul"),up=r("li"),fy=i("deep tiered stem (24, 48, 64), avgpool downsample (a modified \u2018D\u2019 variant)"),hy=d(),vp=r("li"),cy=i("stem sizing mods from Jeremy Howard and fastai devs discussing ResNet architecture experiments"),Ju=d(),Vt=r("h3"),nr=r("a"),mp=r("span"),p(ci.$$.fragment),py=d(),_p=r("span"),uy=i("Dec 23, 2019"),Xu=d(),dr=r("ul"),wp=r("li"),vy=i("Add RandAugment trained MixNet-XL weights with 80.48 top-1."),my=d(),dn=r("li"),Ep=r("code"),_y=i("--dist-bn"),wy=i(" argument added to train.py, will distribute BN stats between nodes after each train epoch, before eval"),qu=d(),Ot=r("h3"),fr=r("a"),gp=r("span"),p(pi.$$.fragment),Ey=d(),bp=r("span"),gy=i("Dec 4, 2019"),Ku=d(),fn=r("ul"),Ap=r("li"),by=i("Added weights from the first training from scratch of an EfficientNet (B2) with my new RandAugment implementation. Much better than my previous B2 and very close to the official AdvProp ones (80.4 top-1, 95.08 top-5)."),Wu=d(),Ft=r("h3"),hr=r("a"),yp=r("span"),p(ui.$$.fragment),Ay=d(),Np=r("span"),yy=i("Nov 29, 2019"),Yu=d(),C=r("ul"),cr=r("li"),Ny=i("Brought EfficientNet and MobileNetV3 up to date with my "),vi=r("a"),Ly=i("https://github.com/rwightman/gen-efficientnet-pytorch"),$y=i(" code. Torchscript and ONNX export compat excluded."),mi=r("ul"),Lp=r("li"),ky=i("AdvProp weights added"),Iy=d(),$p=r("li"),xy=i("Official TF MobileNetv3 weights added"),Sy=d(),kp=r("li"),Py=i("EfficientNet and MobileNetV3 hook based \u2018feature extraction\u2019 classes added. Will serve as basis for using models as backbones in obj detection/segmentation tasks. Lots more to be done here\u2026"),Ty=d(),hn=r("li"),Dy=i("HRNet classification models and weights added from "),_i=r("a"),Ry=i("https://github.com/HRNet/HRNet-Image-Classification"),My=d(),ue=r("li"),Cy=i("Consistency in global pooling, "),Ip=r("code"),Uy=i("reset_classifer"),Vy=i(", and "),xp=r("code"),Oy=i("forward_features"),Fy=i(" across models"),Sp=r("ul"),cn=r("li"),Pp=r("code"),By=i("forward_features"),Hy=i(" always returns unpooled feature maps now"),jy=d(),Tp=r("li"),zy=i("Reasonable chance I broke something\u2026 let me know"),Qu=d(),Bt=r("h3"),pr=r("a"),Dp=r("span"),p(wi.$$.fragment),Gy=d(),Rp=r("span"),Jy=i("Nov 22, 2019"),Zu=d(),ur=r("ul"),Mp=r("li"),Xy=i("Add ImageNet training RandAugment implementation alongside AutoAugment. PyTorch Transform compatible format, using PIL. Currently training two EfficientNet models from scratch with promising results\u2026 will update."),qy=d(),vr=r("li"),Cp=r("code"),Ky=i("drop-connect"),Wy=i(" cmd line arg finally added to "),Up=r("code"),Yy=i("train.py"),Qy=i(", no need to hack model fns. Works for efficientnet/mobilenetv3 based models, ignored otherwise."),this.h()},l(l){const h=WT('[data-svelte="svelte-1phssyn"]',document.head);be=a(h,"META",{name:!0,content:!0}),h.forEach(t),t1=f(l),Ae=a(l,"H1",{class:!0});var tv=o(Ae);Ht=a(tv,"A",{id:!0,class:!0,href:!0});var gN=o(Ht);Hn=a(gN,"SPAN",{});var bN=o(Hn);u(kr.$$.fragment,bN),bN.forEach(t),gN.forEach(t),q0=f(tv),jn=a(tv,"SPAN",{});var AN=o(jn);K0=s(AN,"Archived Changes"),AN.forEach(t),tv.forEach(t),l1=f(l),ye=a(l,"H3",{class:!0});var lv=o(ye);jt=a(lv,"A",{id:!0,class:!0,href:!0});var yN=o(jt);zn=a(yN,"SPAN",{});var NN=o(zn);u(Ir.$$.fragment,NN),NN.forEach(t),yN.forEach(t),W0=f(lv),Gn=a(lv,"SPAN",{});var LN=o(Gn);Y0=s(LN,"July 12, 2021"),LN.forEach(t),lv.forEach(t),r1=f(l),yi=a(l,"UL",{});var $N=o(yi);zt=a($N,"LI",{});var Vp=o(zt);Q0=s(Vp,"Add XCiT models from "),xr=a(Vp,"A",{href:!0,rel:!0});var kN=o(xr);Z0=s(kN,"official facebook impl"),kN.forEach(t),em=s(Vp,". Contributed by "),Sr=a(Vp,"A",{href:!0,rel:!0});var IN=o(Sr);tm=s(IN,"Alexander Soare"),IN.forEach(t),Vp.forEach(t),$N.forEach(t),a1=f(l),Ne=a(l,"H3",{class:!0});var rv=o(Ne);Gt=a(rv,"A",{id:!0,class:!0,href:!0});var xN=o(Gt);Jn=a(xN,"SPAN",{});var SN=o(Jn);u(Pr.$$.fragment,SN),SN.forEach(t),xN.forEach(t),lm=f(rv),Xn=a(rv,"SPAN",{});var PN=o(Xn);rm=s(PN,"July 5-9, 2021"),PN.forEach(t),rv.forEach(t),o1=f(l),re=a(l,"UL",{});var pn=o(re);Jt=a(pn,"LI",{});var Op=o(Jt);am=s(Op,"Add "),qn=a(Op,"CODE",{});var TN=o(qn);om=s(TN,"efficientnetv2_rw_t"),TN.forEach(t),im=s(Op," weights, a custom \u2018tiny\u2019 13.6M param variant that is a bit better than (non NoisyStudent) B3 models. Both faster and better accuracy (at same or lower res)"),Kn=a(Op,"UL",{});var DN=o(Kn);Wn=a(DN,"LI",{});var RN=o(Wn);sm=s(RN,"top-1 82.34 @ 288x288 and 82.54 @ 320x320"),RN.forEach(t),DN.forEach(t),Op.forEach(t),nm=f(pn),K=a(pn,"LI",{});var mr=o(K);dm=s(mr,"Add "),Tr=a(mr,"A",{href:!0,rel:!0});var MN=o(Tr);fm=s(MN,"SAM pretrained"),MN.forEach(t),hm=s(mr," in1k weight for ViT B/16 ("),Yn=a(mr,"CODE",{});var CN=o(Yn);cm=s(CN,"vit_base_patch16_sam_224"),CN.forEach(t),pm=s(mr,") and B/32 ("),Qn=a(mr,"CODE",{});var UN=o(Qn);um=s(UN,"vit_base_patch32_sam_224"),UN.forEach(t),vm=s(mr,")  models."),mr.forEach(t),mm=f(pn),ae=a(pn,"LI",{});var Ei=o(ae);_m=s(Ei,"Add \u2018Aggregating Nested Transformer\u2019 (NesT) w/ weights converted from official "),Dr=a(Ei,"A",{href:!0,rel:!0});var VN=o(Dr);wm=s(VN,"Flax impl"),VN.forEach(t),Em=s(Ei,". Contributed by "),Rr=a(Ei,"A",{href:!0,rel:!0});var ON=o(Rr);gm=s(ON,"Alexander Soare"),ON.forEach(t),bm=s(Ei,"."),Zn=a(Ei,"UL",{});var FN=o(Zn);oe=a(FN,"LI",{});var gi=o(oe);ed=a(gi,"CODE",{});var BN=o(ed);Am=s(BN,"jx_nest_base"),BN.forEach(t),ym=s(gi," - 83.534, "),td=a(gi,"CODE",{});var HN=o(td);Nm=s(HN,"jx_nest_small"),HN.forEach(t),Lm=s(gi," - 83.120, "),ld=a(gi,"CODE",{});var jN=o(ld);$m=s(jN,"jx_nest_tiny"),jN.forEach(t),km=s(gi," - 81.426"),gi.forEach(t),FN.forEach(t),Ei.forEach(t),pn.forEach(t),i1=f(l),Le=a(l,"H3",{class:!0});var av=o(Le);Xt=a(av,"A",{id:!0,class:!0,href:!0});var zN=o(Xt);rd=a(zN,"SPAN",{});var GN=o(rd);u(Mr.$$.fragment,GN),GN.forEach(t),zN.forEach(t),Im=f(av),ad=a(av,"SPAN",{});var JN=o(ad);xm=s(JN,"June 23, 2021"),JN.forEach(t),av.forEach(t),s1=f(l),Ni=a(l,"UL",{});var XN=o(Ni);ie=a(XN,"LI",{});var bi=o(ie);Sm=s(bi,"Reproduce gMLP model training, "),od=a(bi,"CODE",{});var qN=o(od);Pm=s(qN,"gmlp_s16_224"),qN.forEach(t),Tm=s(bi," trained to 79.6 top-1, matching "),Cr=a(bi,"A",{href:!0,rel:!0});var KN=o(Cr);Dm=s(KN,"paper"),KN.forEach(t),Rm=s(bi,". Hparams for this and other recent MLP training "),Ur=a(bi,"A",{href:!0,rel:!0});var WN=o(Ur);Mm=s(WN,"here"),WN.forEach(t),bi.forEach(t),XN.forEach(t),n1=f(l),$e=a(l,"H3",{class:!0});var ov=o($e);qt=a(ov,"A",{id:!0,class:!0,href:!0});var YN=o(qt);id=a(YN,"SPAN",{});var QN=o(id);u(Vr.$$.fragment,QN),QN.forEach(t),YN.forEach(t),Cm=f(ov),sd=a(ov,"SPAN",{});var ZN=o(sd);Um=s(ZN,"June 20, 2021"),ZN.forEach(t),ov.forEach(t),d1=f(l),g=a(l,"UL",{});var $=o(g);Or=a($,"LI",{});var iv=o(Or);Vm=s(iv,"Release Vision Transformer \u2018AugReg\u2019 weights from "),Fr=a(iv,"A",{href:!0,rel:!0});var eL=o(Fr);Om=s(eL,"How to train your ViT? Data, Augmentation, and Regularization in Vision Transformers"),eL.forEach(t),H=a(iv,"UL",{});var ve=o(H);Li=a(ve,"LI",{});var Zy=o(Li);Fm=s(Zy,".npz weight loading support added, can load any of the 50K+ weights from the "),Br=a(Zy,"A",{href:!0,rel:!0});var tL=o(Br);Bm=s(tL,"AugReg series"),tL.forEach(t),Zy.forEach(t),Hm=f(ve),ke=a(ve,"LI",{});var un=o(ke);jm=s(un,"See "),Hr=a(un,"A",{href:!0,rel:!0});var lL=o(Hr);zm=s(lL,"example notebook"),lL.forEach(t),Gm=s(un," from "),jr=a(un,"A",{href:!0,rel:!0});var rL=o(jr);Jm=s(rL,"official impl"),rL.forEach(t),Xm=s(un," for navigating the augreg weights"),un.forEach(t),qm=f(ve),$i=a(ve,"LI",{});var e9=o($i);Km=s(e9,"Replaced all default weights w/ best AugReg variant (if possible). All AugReg 21k classifiers work."),nd=a(e9,"UL",{});var aL=o(nd);W=a(aL,"LI",{});var _r=o(W);Wm=s(_r,"Highlights: "),dd=a(_r,"CODE",{});var oL=o(dd);Ym=s(oL,"vit_large_patch16_384"),oL.forEach(t),Qm=s(_r," (87.1 top-1), "),fd=a(_r,"CODE",{});var iL=o(fd);Zm=s(iL,"vit_large_r50_s32_384"),iL.forEach(t),e3=s(_r," (86.2 top-1), "),hd=a(_r,"CODE",{});var sL=o(hd);t3=s(sL,"vit_base_patch16_384"),sL.forEach(t),l3=s(_r," (86.0 top-1)"),_r.forEach(t),aL.forEach(t),e9.forEach(t),r3=f(ve),zr=a(ve,"LI",{});var sv=o(zr);cd=a(sv,"CODE",{});var nL=o(cd);a3=s(nL,"vit_deit_*"),nL.forEach(t),o3=s(sv," renamed to just "),pd=a(sv,"CODE",{});var dL=o(pd);i3=s(dL,"deit_*"),dL.forEach(t),sv.forEach(t),s3=f(ve),ud=a(ve,"LI",{});var fL=o(ud);n3=s(fL,"Remove my old small model, replace with DeiT compatible small w/ AugReg weights"),fL.forEach(t),ve.forEach(t),iv.forEach(t),d3=f($),Gr=a($,"LI",{});var nv=o(Gr);f3=s(nv,"Add 1st training of my "),vd=a(nv,"CODE",{});var hL=o(vd);h3=s(hL,"gmixer_24_224"),hL.forEach(t),c3=s(nv," MLP /w GLU, 78.1 top-1 w/ 25M params."),nv.forEach(t),p3=f($),Jr=a($,"LI",{});var dv=o(Jr);u3=s(dv,"Add weights from official ResMLP release ("),Xr=a(dv,"A",{href:!0,rel:!0});var cL=o(Xr);v3=s(cL,"https://github.com/facebookresearch/deit"),cL.forEach(t),m3=s(dv,")"),dv.forEach(t),_3=f($),qr=a($,"LI",{});var fv=o(qr);w3=s(fv,"Add "),md=a(fv,"CODE",{});var pL=o(md);E3=s(pL,"eca_nfnet_l2"),pL.forEach(t),g3=s(fv," weights from my \u2018lightweight\u2019 series. 84.7 top-1 at 384x384."),fv.forEach(t),b3=f($),ki=a($,"LI",{});var t9=o(ki);A3=s(t9,"Add distilled BiT 50x1 student and 152x2 Teacher weights from  "),Kr=a(t9,"A",{href:!0,rel:!0});var uL=o(Kr);y3=s(uL,"Knowledge distillation: A good teacher is patient and consistent"),uL.forEach(t),t9.forEach(t),N3=f($),Ii=a($,"LI",{});var l9=o(Ii);L3=s(l9,"NFNets and ResNetV2-BiT models work w/ Pytorch XLA now"),Wr=a(l9,"UL",{});var hv=o(Wr);_d=a(hv,"LI",{});var vL=o(_d);$3=s(vL,"weight standardization uses F.batch_norm instead of std_mean (std_mean wasn\u2019t lowered)"),vL.forEach(t),k3=f(hv),wd=a(hv,"LI",{});var mL=o(wd);I3=s(mL,"eps values adjusted, will be slight differences but should be quite close"),mL.forEach(t),hv.forEach(t),l9.forEach(t),x3=f($),Ed=a($,"LI",{});var _L=o(Ed);S3=s(_L,"Improve test coverage and classifier interface of non-conv (vision transformer and mlp) models"),_L.forEach(t),P3=f($),gd=a($,"LI",{});var wL=o(gd);T3=s(wL,"Cleanup a few classifier / flatten details for models w/ conv classifiers or early global pool"),wL.forEach(t),D3=f($),bd=a($,"LI",{});var EL=o(bd);R3=s(EL,"Please report any regressions, this PR touched quite a few models."),EL.forEach(t),$.forEach(t),f1=f(l),Ie=a(l,"H3",{class:!0});var cv=o(Ie);Kt=a(cv,"A",{id:!0,class:!0,href:!0});var gL=o(Kt);Ad=a(gL,"SPAN",{});var bL=o(Ad);u(Yr.$$.fragment,bL),bL.forEach(t),gL.forEach(t),M3=f(cv),yd=a(cv,"SPAN",{});var AL=o(yd);C3=s(AL,"June 8, 2021"),AL.forEach(t),cv.forEach(t),h1=f(l),Wt=a(l,"UL",{});var pv=o(Wt);Nd=a(pv,"LI",{});var yL=o(Nd);U3=s(yL,"Add first ResMLP weights, trained in PyTorch XLA on TPU-VM w/ my XLA branch. 24 block variant, 79.2 top-1."),yL.forEach(t),V3=f(pv),xi=a(pv,"LI",{});var r9=o(xi);O3=s(r9,"Add ResNet51-Q model w/ pretrained weights at 82.36 top-1."),Qr=a(r9,"UL",{});var uv=o(Qr);Ld=a(uv,"LI",{});var NL=o(Ld);F3=s(NL,"NFNet inspired block layout with quad layer stem and no maxpool"),NL.forEach(t),B3=f(uv),$d=a(uv,"LI",{});var LL=o($d);H3=s(LL,"Same param count (35.7M) and throughput as ResNetRS-50 but +1.5 top-1 @ 224x224 and +2.5 top-1 at 288x288"),LL.forEach(t),uv.forEach(t),r9.forEach(t),pv.forEach(t),c1=f(l),xe=a(l,"H3",{class:!0});var vv=o(xe);Yt=a(vv,"A",{id:!0,class:!0,href:!0});var $L=o(Yt);kd=a($L,"SPAN",{});var kL=o(kd);u(Zr.$$.fragment,kL),kL.forEach(t),$L.forEach(t),j3=f(vv),Id=a(vv,"SPAN",{});var IL=o(Id);z3=s(IL,"May 25, 2021"),IL.forEach(t),vv.forEach(t),p1=f(l),se=a(l,"UL",{});var vn=o(se);xd=a(vn,"LI",{});var xL=o(xd);G3=s(xL,"Add LeViT, Visformer, Convit (PR by Aman Arora), Twins (PR by paper authors) transformer models"),xL.forEach(t),J3=f(vn),Sd=a(vn,"LI",{});var SL=o(Sd);X3=s(SL,"Cleanup input_size/img_size override handling and testing for all vision transformer models"),SL.forEach(t),q3=f(vn),ea=a(vn,"LI",{});var mv=o(ea);K3=s(mv,"Add "),Pd=a(mv,"CODE",{});var PL=o(Pd);W3=s(PL,"efficientnetv2_rw_m"),PL.forEach(t),Y3=s(mv," model and weights (started training before official code). 84.8 top-1, 53M params."),mv.forEach(t),vn.forEach(t),u1=f(l),Se=a(l,"H3",{class:!0});var _v=o(Se);Qt=a(_v,"A",{id:!0,class:!0,href:!0});var TL=o(Qt);Td=a(TL,"SPAN",{});var DL=o(Td);u(ta.$$.fragment,DL),DL.forEach(t),TL.forEach(t),Q3=f(_v),Dd=a(_v,"SPAN",{});var RL=o(Dd);Z3=s(RL,"May 14, 2021"),RL.forEach(t),_v.forEach(t),v1=f(l),Si=a(l,"UL",{});var ML=o(Si);Zt=a(ML,"LI",{});var Fp=o(Zt);e_=s(Fp,"Add EfficientNet-V2 official model defs w/ ported weights from official "),la=a(Fp,"A",{href:!0,rel:!0});var CL=o(la);t_=s(CL,"Tensorflow/Keras"),CL.forEach(t),l_=s(Fp," impl."),D=a(Fp,"UL",{});var q=o(D);Pi=a(q,"LI",{});var a9=o(Pi);r_=s(a9,"1k trained variants: "),Rd=a(a9,"CODE",{});var UL=o(Rd);a_=s(UL,"tf_efficientnetv2_s/m/l"),UL.forEach(t),a9.forEach(t),o_=f(q),Ti=a(q,"LI",{});var o9=o(Ti);i_=s(o9,"21k trained variants: "),Md=a(o9,"CODE",{});var VL=o(Md);s_=s(VL,"tf_efficientnetv2_s/m/l_in21k"),VL.forEach(t),o9.forEach(t),n_=f(q),Di=a(q,"LI",{});var i9=o(Di);d_=s(i9,"21k pretrained -> 1k fine-tuned: "),Cd=a(i9,"CODE",{});var OL=o(Cd);f_=s(OL,"tf_efficientnetv2_s/m/l_in21ft1k"),OL.forEach(t),i9.forEach(t),h_=f(q),el=a(q,"LI",{});var Bp=o(el);c_=s(Bp,"v2 models w/ v1 scaling: "),Ud=a(Bp,"CODE",{});var FL=o(Ud);p_=s(FL,"tf_efficientnetv2_b0"),FL.forEach(t),u_=s(Bp," through "),Vd=a(Bp,"CODE",{});var BL=o(Vd);v_=s(BL,"b3"),BL.forEach(t),Bp.forEach(t),m_=f(q),tl=a(q,"LI",{});var Hp=o(tl);__=s(Hp,"Rename my prev V2 guess "),Od=a(Hp,"CODE",{});var HL=o(Od);w_=s(HL,"efficientnet_v2s"),HL.forEach(t),E_=s(Hp," -> "),Fd=a(Hp,"CODE",{});var jL=o(Fd);g_=s(jL,"efficientnetv2_rw_s"),jL.forEach(t),Hp.forEach(t),b_=f(q),ra=a(q,"LI",{});var wv=o(ra);A_=s(wv,"Some blank "),Bd=a(wv,"CODE",{});var zL=o(Bd);y_=s(zL,"efficientnetv2_*"),zL.forEach(t),N_=s(wv," models in-place for future native PyTorch training"),wv.forEach(t),q.forEach(t),Fp.forEach(t),ML.forEach(t),m1=f(l),Pe=a(l,"H3",{class:!0});var Ev=o(Pe);ll=a(Ev,"A",{id:!0,class:!0,href:!0});var GL=o(ll);Hd=a(GL,"SPAN",{});var JL=o(Hd);u(aa.$$.fragment,JL),JL.forEach(t),GL.forEach(t),L_=f(Ev),jd=a(Ev,"SPAN",{});var XL=o(jd);$_=s(XL,"May 5, 2021"),XL.forEach(t),Ev.forEach(t),_1=f(l),b=a(l,"UL",{});var k=o(b);Ri=a(k,"LI",{});var s9=o(Ri);k_=s(s9,"Add MLP-Mixer models and port pretrained weights from "),oa=a(s9,"A",{href:!0,rel:!0});var qL=o(oa);I_=s(qL,"Google JAX impl"),qL.forEach(t),s9.forEach(t),x_=f(k),Mi=a(k,"LI",{});var n9=o(Mi);S_=s(n9,"Add CaiT models and pretrained weights from "),ia=a(n9,"A",{href:!0,rel:!0});var KL=o(ia);P_=s(KL,"FB"),KL.forEach(t),n9.forEach(t),T_=f(k),rl=a(k,"LI",{});var jp=o(rl);D_=s(jp,"Add ResNet-RS models and weights from "),sa=a(jp,"A",{href:!0,rel:!0});var WL=o(sa);R_=s(WL,"TF"),WL.forEach(t),M_=s(jp,". Thanks "),na=a(jp,"A",{href:!0,rel:!0});var YL=o(na);C_=s(YL,"Aman Arora"),YL.forEach(t),jp.forEach(t),U_=f(k),Ci=a(k,"LI",{});var d9=o(Ci);V_=s(d9,"Add CoaT models and weights. Thanks "),da=a(d9,"A",{href:!0,rel:!0});var QL=o(da);O_=s(QL,"Mohammed Rizin"),QL.forEach(t),d9.forEach(t),F_=f(k),Ui=a(k,"LI",{});var f9=o(Ui);B_=s(f9,"Add new ImageNet-21k weights & finetuned weights for TResNet, MobileNet-V3, ViT models. Thanks "),fa=a(f9,"A",{href:!0,rel:!0});var ZL=o(fa);H_=s(ZL,"mrT"),ZL.forEach(t),f9.forEach(t),j_=f(k),Vi=a(k,"LI",{});var h9=o(Vi);z_=s(h9,"Add GhostNet models and weights. Thanks "),ha=a(h9,"A",{href:!0,rel:!0});var e$=o(ha);G_=s(e$,"Kai Han"),e$.forEach(t),h9.forEach(t),J_=f(k),Oi=a(k,"LI",{});var c9=o(Oi);X_=s(c9,"Update ByoaNet attention modles"),Te=a(c9,"UL",{});var mn=o(Te);zd=a(mn,"LI",{});var t$=o(zd);q_=s(t$,"Improve SA module inits"),t$.forEach(t),K_=f(mn),Fi=a(mn,"LI",{});var p9=o(Fi);W_=s(p9,"Hack together experimental stand-alone Swin based attn module and "),Gd=a(p9,"CODE",{});var l$=o(Gd);Y_=s(l$,"swinnet"),l$.forEach(t),p9.forEach(t),Q_=f(mn),Jd=a(mn,"LI",{});var r$=o(Jd);Z_=s(r$,"Consistent \u201826t\u2019 model defs for experiments."),r$.forEach(t),mn.forEach(t),c9.forEach(t),e5=f(k),Xd=a(k,"LI",{});var a$=o(Xd);t5=s(a$,"Add improved Efficientnet-V2S (prelim model def) weights. 83.8 top-1."),a$.forEach(t),l5=f(k),qd=a(k,"LI",{});var o$=o(qd);r5=s(o$,"WandB logging support"),o$.forEach(t),k.forEach(t),w1=f(l),De=a(l,"H3",{class:!0});var gv=o(De);al=a(gv,"A",{id:!0,class:!0,href:!0});var i$=o(al);Kd=a(i$,"SPAN",{});var s$=o(Kd);u(ca.$$.fragment,s$),s$.forEach(t),i$.forEach(t),a5=f(gv),Wd=a(gv,"SPAN",{});var n$=o(Wd);o5=s(n$,"April 13, 2021"),n$.forEach(t),gv.forEach(t),E1=f(l),Bi=a(l,"UL",{});var d$=o(Bi);Hi=a(d$,"LI",{});var u9=o(Hi);i5=s(u9,"Add Swin Transformer models and weights from "),pa=a(u9,"A",{href:!0,rel:!0});var f$=o(pa);s5=s(f$,"https://github.com/microsoft/Swin-Transformer"),f$.forEach(t),u9.forEach(t),d$.forEach(t),g1=f(l),Re=a(l,"H3",{class:!0});var bv=o(Re);ol=a(bv,"A",{id:!0,class:!0,href:!0});var h$=o(ol);Yd=a(h$,"SPAN",{});var c$=o(Yd);u(ua.$$.fragment,c$),c$.forEach(t),h$.forEach(t),n5=f(bv),Qd=a(bv,"SPAN",{});var p$=o(Qd);d5=s(p$,"April 12, 2021"),p$.forEach(t),bv.forEach(t),b1=f(l),G=a(l,"UL",{});var wr=o(G);Zd=a(wr,"LI",{});var u$=o(Zd);f5=s(u$,"Add ECA-NFNet-L1 (slimmed down F1 w/ SiLU, 41M params) trained with this code. 84% top-1 @ 320x320. Trained at 256x256."),u$.forEach(t),h5=f(wr),ef=a(wr,"LI",{});var v$=o(ef);c5=s(v$,"Add EfficientNet-V2S model (unverified model definition) weights. 83.3 top-1 @ 288x288. Only trained single res 224. Working on progressive training."),v$.forEach(t),p5=f(wr),ji=a(wr,"LI",{});var v9=o(ji);u5=s(v9,"Add ByoaNet model definition (Bring-your-own-attention) w/ SelfAttention block and corresponding SA/SA-like modules and model defs"),Me=a(v9,"UL",{});var _n=o(Me);zi=a(_n,"LI",{});var m9=o(zi);v5=s(m9,"Lambda Networks - "),va=a(m9,"A",{href:!0,rel:!0});var m$=o(va);m5=s(m$,"https://arxiv.org/abs/2102.08602"),m$.forEach(t),m9.forEach(t),_5=f(_n),Gi=a(_n,"LI",{});var _9=o(Gi);w5=s(_9,"Bottleneck Transformers - "),ma=a(_9,"A",{href:!0,rel:!0});var _$=o(ma);E5=s(_$,"https://arxiv.org/abs/2101.11605"),_$.forEach(t),_9.forEach(t),g5=f(_n),Ji=a(_n,"LI",{});var w9=o(Ji);b5=s(w9,"Halo Nets - "),_a=a(w9,"A",{href:!0,rel:!0});var w$=o(_a);A5=s(w$,"https://arxiv.org/abs/2103.12731"),w$.forEach(t),w9.forEach(t),_n.forEach(t),v9.forEach(t),y5=f(wr),tf=a(wr,"LI",{});var E$=o(tf);N5=s(E$,"Adabelief optimizer contributed by Juntang Zhuang"),E$.forEach(t),wr.forEach(t),A1=f(l),Ce=a(l,"H3",{class:!0});var Av=o(Ce);il=a(Av,"A",{id:!0,class:!0,href:!0});var g$=o(il);lf=a(g$,"SPAN",{});var b$=o(lf);u(wa.$$.fragment,b$),b$.forEach(t),g$.forEach(t),L5=f(Av),rf=a(Av,"SPAN",{});var A$=o(rf);$5=s(A$,"April 1, 2021"),A$.forEach(t),Av.forEach(t),y1=f(l),N=a(l,"UL",{});var U=o(N);Ue=a(U,"LI",{});var wn=o(Ue);k5=s(wn,"Add snazzy "),af=a(wn,"CODE",{});var y$=o(af);I5=s(y$,"benchmark.py"),y$.forEach(t),x5=s(wn," script for bulk "),of=a(wn,"CODE",{});var N$=o(of);S5=s(N$,"timm"),N$.forEach(t),P5=s(wn," model benchmarking of train and/or inference"),wn.forEach(t),T5=f(U),sl=a(U,"LI",{});var zp=o(sl);D5=s(zp,"Add Pooling-based Vision Transformer (PiT) models (from "),Ea=a(zp,"A",{href:!0,rel:!0});var L$=o(Ea);R5=s(L$,"https://github.com/naver-ai/pit"),L$.forEach(t),M5=s(zp,")"),ga=a(zp,"UL",{});var yv=o(ga);sf=a(yv,"LI",{});var $$=o(sf);C5=s($$,"Merged distilled variant into main for torchscript compatibility"),$$.forEach(t),U5=f(yv),ba=a(yv,"LI",{});var Nv=o(ba);V5=s(Nv,"Some "),nf=a(Nv,"CODE",{});var k$=o(nf);O5=s(k$,"timm"),k$.forEach(t),F5=s(Nv," cleanup/style tweaks and weights have hub download support"),Nv.forEach(t),yv.forEach(t),zp.forEach(t),B5=f(U),Xi=a(U,"LI",{});var E9=o(Xi);H5=s(E9,"Cleanup Vision Transformer (ViT) models"),j=a(E9,"UL",{});var me=o(j);df=a(me,"LI",{});var I$=o(df);j5=s(I$,"Merge distilled (DeiT) model into main so that torchscript can work"),I$.forEach(t),z5=f(me),ff=a(me,"LI",{});var x$=o(ff);G5=s(x$,"Support updated weight init (defaults to old still) that closer matches original JAX impl (possibly better training from scratch)"),x$.forEach(t),J5=f(me),hf=a(me,"LI",{});var S$=o(hf);X5=s(S$,"Separate hybrid model defs into different file and add several new model defs to fiddle with, support patch_size != 1 for hybrids"),S$.forEach(t),q5=f(me),cf=a(me,"LI",{});var P$=o(cf);K5=s(P$,"Fix fine-tuning num_class changes (PiT and ViT) and pos_embed resizing (Vit) with distilled variants"),P$.forEach(t),W5=f(me),pf=a(me,"LI",{});var T$=o(pf);Y5=s(T$,"nn.Sequential for block stack (does not break downstream compat)"),T$.forEach(t),me.forEach(t),E9.forEach(t),Q5=f(U),Aa=a(U,"LI",{});var Lv=o(Aa);Z5=s(Lv,"TnT (Transformer-in-Transformer) models contributed by author (from "),ya=a(Lv,"A",{href:!0,rel:!0});var D$=o(ya);ew=s(D$,"https://gitee.com/mindspore/mindspore/tree/master/model_zoo/research/cv/TNT"),D$.forEach(t),tw=s(Lv,")"),Lv.forEach(t),lw=f(U),uf=a(U,"LI",{});var R$=o(uf);rw=s(R$,"Add RegNetY-160 weights from DeiT teacher model"),R$.forEach(t),aw=f(U),Ve=a(U,"LI",{});var En=o(Ve);ow=s(En,"Add new NFNet-L0 w/ SE attn (rename "),vf=a(En,"CODE",{});var M$=o(vf);iw=s(M$,"nfnet_l0b"),M$.forEach(t),sw=s(En,"->"),mf=a(En,"CODE",{});var C$=o(mf);nw=s(C$,"nfnet_l0"),C$.forEach(t),dw=s(En,") weights 82.75 top-1 @ 288x288"),En.forEach(t),fw=f(U),_f=a(U,"LI",{});var U$=o(_f);hw=s(U$,"Some fixes/improvements for TFDS dataset wrapper"),U$.forEach(t),U.forEach(t),N1=f(l),Oe=a(l,"H3",{class:!0});var $v=o(Oe);nl=a($v,"A",{id:!0,class:!0,href:!0});var V$=o(nl);wf=a(V$,"SPAN",{});var O$=o(wf);u(Na.$$.fragment,O$),O$.forEach(t),V$.forEach(t),cw=f($v),Ef=a($v,"SPAN",{});var F$=o(Ef);pw=s(F$,"March 7, 2021"),F$.forEach(t),$v.forEach(t),L1=f(l),dl=a(l,"UL",{});var kv=o(dl);gf=a(kv,"LI",{});var B$=o(gf);uw=s(B$,"First 0.4.x PyPi release w/ NFNets (& related), ByoB (GPU-Efficient, RepVGG, etc)."),B$.forEach(t),vw=f(kv),bf=a(kv,"LI",{});var H$=o(bf);mw=s(H$,"Change feature extraction for pre-activation nets (NFNets, ResNetV2) to return features before activation."),H$.forEach(t),kv.forEach(t),$1=f(l),Fe=a(l,"H3",{class:!0});var Iv=o(Fe);fl=a(Iv,"A",{id:!0,class:!0,href:!0});var j$=o(fl);Af=a(j$,"SPAN",{});var z$=o(Af);u(La.$$.fragment,z$),z$.forEach(t),j$.forEach(t),_w=f(Iv),yf=a(Iv,"SPAN",{});var G$=o(yf);ww=s(G$,"Feb 18, 2021"),G$.forEach(t),Iv.forEach(t),k1=f(l),qi=a(l,"UL",{});var J$=o(qi);hl=a(J$,"LI",{});var Gp=o(hl);Ew=s(Gp,"Add pretrained weights and model variants for NFNet-F* models from "),$a=a(Gp,"A",{href:!0,rel:!0});var X$=o($a);gw=s(X$,"DeepMind Haiku impl"),X$.forEach(t),bw=s(Gp,"."),Y=a(Gp,"UL",{});var Er=o(Y);ka=a(Er,"LI",{});var xv=o(ka);Aw=s(xv,"Models are prefixed with "),Nf=a(xv,"CODE",{});var q$=o(Nf);yw=s(q$,"dm_"),q$.forEach(t),Nw=s(xv,". They require SAME padding conv, skipinit enabled, and activation gains applied in act fn."),xv.forEach(t),Lw=f(Er),Ia=a(Er,"LI",{});var Sv=o(Ia);$w=s(Sv,"These models are big, expect to run out of GPU memory. With the GELU activiation + other options, they are roughly 1/2 the inference speed of my SiLU PyTorch optimized "),Lf=a(Sv,"CODE",{});var K$=o(Lf);kw=s(K$,"s"),K$.forEach(t),Iw=s(Sv," variants."),Sv.forEach(t),xw=f(Er),$f=a(Er,"LI",{});var W$=o($f);Sw=s(W$,"Original model results are based on pre-processing that is not the same as all other models so you\u2019ll see different results in the results csv (once updated)."),W$.forEach(t),Pw=f(Er),Ki=a(Er,"LI",{});var g9=o(Ki);Tw=s(g9,"Matching the original pre-processing as closely as possible I get these results:"),I=a(g9,"UL",{});var V=o(I);Wi=a(V,"LI",{});var b9=o(Wi);kf=a(b9,"CODE",{});var Y$=o(kf);Dw=s(Y$,"dm_nfnet_f6"),Y$.forEach(t),Rw=s(b9," - 86.352"),b9.forEach(t),Mw=f(V),Yi=a(V,"LI",{});var A9=o(Yi);If=a(A9,"CODE",{});var Q$=o(If);Cw=s(Q$,"dm_nfnet_f5"),Q$.forEach(t),Uw=s(A9," - 86.100"),A9.forEach(t),Vw=f(V),Qi=a(V,"LI",{});var y9=o(Qi);xf=a(y9,"CODE",{});var Z$=o(xf);Ow=s(Z$,"dm_nfnet_f4"),Z$.forEach(t),Fw=s(y9," - 85.834"),y9.forEach(t),Bw=f(V),Zi=a(V,"LI",{});var N9=o(Zi);Sf=a(N9,"CODE",{});var ek=o(Sf);Hw=s(ek,"dm_nfnet_f3"),ek.forEach(t),jw=s(N9," - 85.676"),N9.forEach(t),zw=f(V),es=a(V,"LI",{});var L9=o(es);Pf=a(L9,"CODE",{});var tk=o(Pf);Gw=s(tk,"dm_nfnet_f2"),tk.forEach(t),Jw=s(L9," - 85.178"),L9.forEach(t),Xw=f(V),ts=a(V,"LI",{});var $9=o(ts);Tf=a($9,"CODE",{});var lk=o(Tf);qw=s(lk,"dm_nfnet_f1"),lk.forEach(t),Kw=s($9," - 84.696"),$9.forEach(t),Ww=f(V),ls=a(V,"LI",{});var k9=o(ls);Df=a(k9,"CODE",{});var rk=o(Df);Yw=s(rk,"dm_nfnet_f0"),rk.forEach(t),Qw=s(k9," - 83.464"),k9.forEach(t),V.forEach(t),g9.forEach(t),Er.forEach(t),Gp.forEach(t),J$.forEach(t),I1=f(l),Be=a(l,"H3",{class:!0});var Pv=o(Be);cl=a(Pv,"A",{id:!0,class:!0,href:!0});var ak=o(cl);Rf=a(ak,"SPAN",{});var ok=o(Rf);u(xa.$$.fragment,ok),ok.forEach(t),ak.forEach(t),Zw=f(Pv),Mf=a(Pv,"SPAN",{});var ik=o(Mf);eE=s(ik,"Feb 16, 2021"),ik.forEach(t),Pv.forEach(t),x1=f(l),rs=a(l,"UL",{});var sk=o(rs);pl=a(sk,"LI",{});var Jp=o(pl);tE=s(Jp,"Add Adaptive Gradient Clipping (AGC) as per "),Sa=a(Jp,"A",{href:!0,rel:!0});var nk=o(Sa);lE=s(nk,"https://arxiv.org/abs/2102.06171"),nk.forEach(t),rE=s(Jp,". Integrated w/ PyTorch gradient clipping via mode arg that defaults to prev \u2018norm\u2019 mode. For backward arg compat, clip-grad arg must be specified to enable when using train.py."),Q=a(Jp,"UL",{});var gr=o(Q);as=a(gr,"LI",{});var I9=o(as);aE=s(I9,"AGC w/ default clipping factor "),Cf=a(I9,"CODE",{});var dk=o(Cf);oE=s(dk,"--clip-grad .01 --clip-mode agc"),dk.forEach(t),I9.forEach(t),iE=f(gr),os=a(gr,"LI",{});var x9=o(os);sE=s(x9,"PyTorch global norm of 1.0 (old behaviour, always norm), "),Uf=a(x9,"CODE",{});var fk=o(Uf);nE=s(fk,"--clip-grad 1.0"),fk.forEach(t),x9.forEach(t),dE=f(gr),is=a(gr,"LI",{});var S9=o(is);fE=s(S9,"PyTorch value clipping of 10, "),Vf=a(S9,"CODE",{});var hk=o(Vf);hE=s(hk,"--clip-grad 10. --clip-mode value"),hk.forEach(t),S9.forEach(t),cE=f(gr),Of=a(gr,"LI",{});var ck=o(Of);pE=s(ck,"AGC performance is definitely sensitive to the clipping factor. More experimentation needed to determine good values for smaller batch sizes and optimizers besides those in paper. So far I\u2019ve found .001-.005 is necessary for stable RMSProp training w/ NFNet/NF-ResNet."),ck.forEach(t),gr.forEach(t),Jp.forEach(t),sk.forEach(t),S1=f(l),He=a(l,"H3",{class:!0});var Tv=o(He);ul=a(Tv,"A",{id:!0,class:!0,href:!0});var pk=o(ul);Ff=a(pk,"SPAN",{});var uk=o(Ff);u(Pa.$$.fragment,uk),uk.forEach(t),pk.forEach(t),uE=f(Tv),Bf=a(Tv,"SPAN",{});var vk=o(Bf);vE=s(vk,"Feb 12, 2021"),vk.forEach(t),Tv.forEach(t),P1=f(l),ss=a(l,"UL",{});var mk=o(ss);Ta=a(mk,"LI",{});var Dv=o(Ta);mE=s(Dv,"Update Normalization-Free nets to include new NFNet-F ("),Da=a(Dv,"A",{href:!0,rel:!0});var _k=o(Da);_E=s(_k,"https://arxiv.org/abs/2102.06171"),_k.forEach(t),wE=s(Dv,") model defs"),Dv.forEach(t),mk.forEach(t),T1=f(l),je=a(l,"H3",{class:!0});var Rv=o(je);vl=a(Rv,"A",{id:!0,class:!0,href:!0});var wk=o(vl);Hf=a(wk,"SPAN",{});var Ek=o(Hf);u(Ra.$$.fragment,Ek),Ek.forEach(t),wk.forEach(t),EE=f(Rv),jf=a(Rv,"SPAN",{});var gk=o(jf);gE=s(gk,"Feb 10, 2021"),gk.forEach(t),Rv.forEach(t),D1=f(l),J=a(l,"UL",{});var br=o(J);ns=a(br,"LI",{});var P9=o(ns);bE=s(P9,"More model archs, incl a flexible ByobNet backbone (\u2018Bring-your-own-blocks\u2019)"),ze=a(P9,"UL",{});var gn=o(ze);ml=a(gn,"LI",{});var Xp=o(ml);AE=s(Xp,"GPU-Efficient-Networks ("),Ma=a(Xp,"A",{href:!0,rel:!0});var bk=o(Ma);yE=s(bk,"https://github.com/idstcv/GPU-Efficient-Networks"),bk.forEach(t),NE=s(Xp,"), impl in "),zf=a(Xp,"CODE",{});var Ak=o(zf);LE=s(Ak,"byobnet.py"),Ak.forEach(t),Xp.forEach(t),$E=f(gn),_l=a(gn,"LI",{});var qp=o(_l);kE=s(qp,"RepVGG ("),Ca=a(qp,"A",{href:!0,rel:!0});var yk=o(Ca);IE=s(yk,"https://github.com/DingXiaoH/RepVGG"),yk.forEach(t),xE=s(qp,"), impl in "),Gf=a(qp,"CODE",{});var Nk=o(Gf);SE=s(Nk,"byobnet.py"),Nk.forEach(t),qp.forEach(t),PE=f(gn),Ua=a(gn,"LI",{});var Mv=o(Ua);TE=s(Mv,"classic VGG (from torchvision, impl in "),Jf=a(Mv,"CODE",{});var Lk=o(Jf);DE=s(Lk,"vgg"),Lk.forEach(t),RE=s(Mv,")"),Mv.forEach(t),gn.forEach(t),P9.forEach(t),ME=f(br),Xf=a(br,"LI",{});var $k=o(Xf);CE=s($k,"Refinements to normalizer layer arg handling and normalizer+act layer handling in some models"),$k.forEach(t),UE=f(br),Ge=a(br,"LI",{});var bn=o(Ge);VE=s(bn,"Default AMP mode changed to native PyTorch AMP instead of APEX. Issues not being fixed with APEX. Native works with "),qf=a(bn,"CODE",{});var kk=o(qf);OE=s(kk,"--channels-last"),kk.forEach(t),FE=s(bn," and "),Kf=a(bn,"CODE",{});var Ik=o(Kf);BE=s(Ik,"--torchscript"),Ik.forEach(t),HE=s(bn," model training, APEX does not."),bn.forEach(t),jE=f(br),Wf=a(br,"LI",{});var xk=o(Wf);zE=s(xk,"Fix a few bugs introduced since last pypi release"),xk.forEach(t),br.forEach(t),R1=f(l),Je=a(l,"H3",{class:!0});var Cv=o(Je);wl=a(Cv,"A",{id:!0,class:!0,href:!0});var Sk=o(wl);Yf=a(Sk,"SPAN",{});var Pk=o(Yf);u(Va.$$.fragment,Pk),Pk.forEach(t),Sk.forEach(t),GE=f(Cv),Qf=a(Cv,"SPAN",{});var Tk=o(Qf);JE=s(Tk,"Feb 8, 2021"),Tk.forEach(t),Cv.forEach(t),M1=f(l),ne=a(l,"UL",{});var An=o(ne);ds=a(An,"LI",{});var T9=o(ds);XE=s(T9,"Add several ResNet weights with ECA attention. 26t & 50t trained @ 256, test @ 320. 269d train @ 256, fine-tune @320, test @ 352."),Xe=a(T9,"UL",{});var yn=o(Xe);fs=a(yn,"LI",{});var D9=o(fs);Zf=a(D9,"CODE",{});var Dk=o(Zf);qE=s(Dk,"ecaresnet26t"),Dk.forEach(t),KE=s(D9," - 79.88 top-1 @ 320x320, 79.08 @ 256x256"),D9.forEach(t),WE=f(yn),hs=a(yn,"LI",{});var R9=o(hs);eh=a(R9,"CODE",{});var Rk=o(eh);YE=s(Rk,"ecaresnet50t"),Rk.forEach(t),QE=s(R9," - 82.35 top-1 @ 320x320, 81.52 @ 256x256"),R9.forEach(t),ZE=f(yn),cs=a(yn,"LI",{});var M9=o(cs);th=a(M9,"CODE",{});var Mk=o(th);eg=s(Mk,"ecaresnet269d"),Mk.forEach(t),tg=s(M9," - 84.93 top-1 @ 352x352, 84.87 @ 320x320"),M9.forEach(t),yn.forEach(t),T9.forEach(t),lg=f(An),x=a(An,"LI",{});var O=o(x);rg=s(O,"Remove separate tiered ("),lh=a(O,"CODE",{});var Ck=o(lh);ag=s(Ck,"t"),Ck.forEach(t),og=s(O,") vs tiered_narrow ("),rh=a(O,"CODE",{});var Uk=o(rh);ig=s(Uk,"tn"),Uk.forEach(t),sg=s(O,") ResNet model defs, all "),ah=a(O,"CODE",{});var Vk=o(ah);ng=s(Vk,"tn"),Vk.forEach(t),dg=s(O," changed to "),oh=a(O,"CODE",{});var Ok=o(oh);fg=s(Ok,"t"),Ok.forEach(t),hg=s(O," and "),ih=a(O,"CODE",{});var Fk=o(ih);cg=s(Fk,"t"),Fk.forEach(t),pg=s(O," models removed ("),sh=a(O,"CODE",{});var Bk=o(sh);ug=s(Bk,"seresnext26t_32x4d"),Bk.forEach(t),vg=s(O," only model w/ weights that was removed)."),O.forEach(t),mg=f(An),qe=a(An,"LI",{});var Nn=o(qe);_g=s(Nn,"Support model default_cfgs with separate train vs test resolution "),nh=a(Nn,"CODE",{});var Hk=o(nh);wg=s(Hk,"test_input_size"),Hk.forEach(t),Eg=s(Nn," and remove extra "),dh=a(Nn,"CODE",{});var jk=o(dh);gg=s(jk,"_320"),jk.forEach(t),bg=s(Nn," suffix ResNet model defs that were just for test."),Nn.forEach(t),An.forEach(t),C1=f(l),Ke=a(l,"H3",{class:!0});var Uv=o(Ke);El=a(Uv,"A",{id:!0,class:!0,href:!0});var zk=o(El);fh=a(zk,"SPAN",{});var Gk=o(fh);u(Oa.$$.fragment,Gk),Gk.forEach(t),zk.forEach(t),Ag=f(Uv),hh=a(Uv,"SPAN",{});var Jk=o(hh);yg=s(Jk,"Jan 30, 2021"),Jk.forEach(t),Uv.forEach(t),U1=f(l),ps=a(l,"UL",{});var Xk=o(ps);us=a(Xk,"LI",{});var C9=o(us);Ng=s(C9,"Add initial \u201CNormalization Free\u201D NF-RegNet-B* and NF-ResNet model definitions based on "),Fa=a(C9,"A",{href:!0,rel:!0});var qk=o(Fa);Lg=s(qk,"paper"),qk.forEach(t),C9.forEach(t),Xk.forEach(t),V1=f(l),We=a(l,"H3",{class:!0});var Vv=o(We);gl=a(Vv,"A",{id:!0,class:!0,href:!0});var Kk=o(gl);ch=a(Kk,"SPAN",{});var Wk=o(ch);u(Ba.$$.fragment,Wk),Wk.forEach(t),Kk.forEach(t),$g=f(Vv),ph=a(Vv,"SPAN",{});var Yk=o(ph);kg=s(Yk,"Jan 25, 2021"),Yk.forEach(t),Vv.forEach(t),O1=f(l),A=a(l,"UL",{});var P=o(A);vs=a(P,"LI",{});var U9=o(vs);Ig=s(U9,"Add ResNetV2 Big Transfer (BiT) models w/ ImageNet-1k and 21k weights from "),Ha=a(U9,"A",{href:!0,rel:!0});var Qk=o(Ha);xg=s(Qk,"https://github.com/google-research/big_transfer"),Qk.forEach(t),U9.forEach(t),Sg=f(P),ms=a(P,"LI",{});var V9=o(ms);Pg=s(V9,"Add official R50+ViT-B/16 hybrid models + weights from "),ja=a(V9,"A",{href:!0,rel:!0});var Zk=o(ja);Tg=s(Zk,"https://github.com/google-research/vision_transformer"),Zk.forEach(t),V9.forEach(t),Dg=f(P),_s=a(P,"LI",{});var O9=o(_s);Rg=s(O9,"ImageNet-21k ViT weights are added w/ model defs and representation layer (pre logits) support"),uh=a(O9,"UL",{});var eI=o(uh);vh=a(eI,"LI",{});var tI=o(vh);Mg=s(tI,"NOTE: ImageNet-21k classifier heads were zero\u2019d in original weights, they are only useful for transfer learning"),tI.forEach(t),eI.forEach(t),O9.forEach(t),Cg=f(P),ws=a(P,"LI",{});var F9=o(ws);Ug=s(F9,"Add model defs and weights for DeiT Vision Transformer models from "),za=a(F9,"A",{href:!0,rel:!0});var lI=o(za);Vg=s(lI,"https://github.com/facebookresearch/deit"),lI.forEach(t),F9.forEach(t),Og=f(P),mh=a(P,"LI",{});var rI=o(mh);Fg=s(rI,"Refactor dataset classes into ImageDataset/IterableImageDataset + dataset specific parser classes"),rI.forEach(t),Bg=f(P),Es=a(P,"LI",{});var B9=o(Es);Hg=s(B9,"Add Tensorflow-Datasets (TFDS) wrapper to allow use of TFDS image classification sets with train script"),_h=a(B9,"UL",{});var aI=o(_h);gs=a(aI,"LI",{});var H9=o(gs);jg=s(H9,"Ex: "),wh=a(H9,"CODE",{});var oI=o(wh);zg=s(oI,"train.py /data/tfds --dataset tfds/oxford_iiit_pet --val-split test --model resnet50 -b 256 --amp --num-classes 37 --opt adamw --lr 3e-4 --weight-decay .001 --pretrained -j 2"),oI.forEach(t),H9.forEach(t),aI.forEach(t),B9.forEach(t),Gg=f(P),bs=a(P,"LI",{});var j9=o(bs);Jg=s(j9,"Add improved .tar dataset parser that reads images from .tar, folder of .tar files, or .tar within .tar"),Eh=a(j9,"UL",{});var iI=o(Eh);As=a(iI,"LI",{});var z9=o(As);Xg=s(z9,"Run validation on full ImageNet-21k directly from tar w/ BiT model: "),gh=a(z9,"CODE",{});var sI=o(gh);qg=s(sI,"validate.py /data/fall11_whole.tar --model resnetv2_50x1_bitm_in21k --amp"),sI.forEach(t),z9.forEach(t),iI.forEach(t),j9.forEach(t),Kg=f(P),bh=a(P,"LI",{});var nI=o(bh);Wg=s(nI,"Models in this update should be stable w/ possible exception of ViT/BiT, possibility of some regressions with train/val scripts and dataset handling"),nI.forEach(t),P.forEach(t),F1=f(l),Ye=a(l,"H3",{class:!0});var Ov=o(Ye);bl=a(Ov,"A",{id:!0,class:!0,href:!0});var dI=o(bl);Ah=a(dI,"SPAN",{});var fI=o(Ah);u(Ga.$$.fragment,fI),fI.forEach(t),dI.forEach(t),Yg=f(Ov),yh=a(Ov,"SPAN",{});var hI=o(yh);Qg=s(hI,"Jan 3, 2021"),hI.forEach(t),Ov.forEach(t),B1=f(l),Al=a(l,"UL",{});var Fv=o(Al);ys=a(Fv,"LI",{});var G9=o(ys);Zg=s(G9,"Add SE-ResNet-152D weights"),Ja=a(G9,"UL",{});var Bv=o(Ja);Nh=a(Bv,"LI",{});var cI=o(Nh);e8=s(cI,"256x256 val, 0.94 crop top-1 - 83.75"),cI.forEach(t),t8=f(Bv),Lh=a(Bv,"LI",{});var pI=o(Lh);l8=s(pI,"320x320 val, 1.0 crop - 84.36"),pI.forEach(t),Bv.forEach(t),G9.forEach(t),r8=f(Fv),$h=a(Fv,"LI",{});var uI=o($h);a8=s(uI,"Update results files"),uI.forEach(t),Fv.forEach(t),H1=f(l),Qe=a(l,"H3",{class:!0});var Hv=o(Qe);yl=a(Hv,"A",{id:!0,class:!0,href:!0});var vI=o(yl);kh=a(vI,"SPAN",{});var mI=o(kh);u(Xa.$$.fragment,mI),mI.forEach(t),vI.forEach(t),o8=f(Hv),Ih=a(Hv,"SPAN",{});var _I=o(Ih);i8=s(_I,"Dec 18, 2020"),_I.forEach(t),Hv.forEach(t),j1=f(l),Ns=a(l,"UL",{});var wI=o(Ns);Ls=a(wI,"LI",{});var J9=o(Ls);s8=s(J9,"Add ResNet-101D, ResNet-152D, and ResNet-200D weights trained @ 256x256"),Ze=a(J9,"UL",{});var Ln=o(Ze);xh=a(Ln,"LI",{});var EI=o(xh);n8=s(EI,"256x256 val, 0.94 crop (top-1) - 101D (82.33), 152D (83.08), 200D (83.25)"),EI.forEach(t),d8=f(Ln),Sh=a(Ln,"LI",{});var gI=o(Sh);f8=s(gI,"288x288 val, 1.0 crop - 101D (82.64), 152D (83.48), 200D (83.76)"),gI.forEach(t),h8=f(Ln),Ph=a(Ln,"LI",{});var bI=o(Ph);c8=s(bI,"320x320 val, 1.0 crop - 101D (83.00), 152D (83.66), 200D (84.01)"),bI.forEach(t),Ln.forEach(t),J9.forEach(t),wI.forEach(t),z1=f(l),et=a(l,"H3",{class:!0});var jv=o(et);Nl=a(jv,"A",{id:!0,class:!0,href:!0});var AI=o(Nl);Th=a(AI,"SPAN",{});var yI=o(Th);u(qa.$$.fragment,yI),yI.forEach(t),AI.forEach(t),p8=f(jv),Dh=a(jv,"SPAN",{});var NI=o(Dh);u8=s(NI,"Dec 7, 2020"),NI.forEach(t),jv.forEach(t),G1=f(l),de=a(l,"UL",{});var $n=o(de);Rh=a($n,"LI",{});var LI=o(Rh);v8=s(LI,"Simplify EMA module (ModelEmaV2), compatible with fully torchscripted models"),LI.forEach(t),m8=f($n),Mh=a($n,"LI",{});var $I=o(Mh);_8=s($I,"Misc fixes for SiLU ONNX export, default_cfg missing from Feature extraction models, Linear layer w/ AMP + torchscript"),$I.forEach(t),w8=f($n),Ch=a($n,"LI",{});var kI=o(Ch);E8=s(kI,"PyPi release @ 0.3.2 (needed by EfficientDet)"),kI.forEach(t),$n.forEach(t),J1=f(l),tt=a(l,"H3",{class:!0});var zv=o(tt);Ll=a(zv,"A",{id:!0,class:!0,href:!0});var II=o(Ll);Uh=a(II,"SPAN",{});var xI=o(Uh);u(Ka.$$.fragment,xI),xI.forEach(t),II.forEach(t),g8=f(zv),Vh=a(zv,"SPAN",{});var SI=o(Vh);b8=s(SI,"Oct 30, 2020"),SI.forEach(t),zv.forEach(t),X1=f(l),R=a(l,"UL",{});var _e=o(R);Oh=a(_e,"LI",{});var PI=o(Oh);A8=s(PI,"Test with PyTorch 1.7 and fix a small top-n metric view vs reshape issue."),PI.forEach(t),y8=f(_e),Fh=a(_e,"LI",{});var TI=o(Fh);N8=s(TI,"Convert newly added 224x224 Vision Transformer weights from official JAX repo. 81.8 top-1 for B/16, 83.1 L/16."),TI.forEach(t),L8=f(_e),Bh=a(_e,"LI",{});var DI=o(Bh);$8=s(DI,"Support PyTorch 1.7 optimized, native SiLU (aka Swish) activation. Add mapping to \u2018silu\u2019 name, custom swish will eventually be deprecated."),DI.forEach(t),k8=f(_e),Hh=a(_e,"LI",{});var RI=o(Hh);I8=s(RI,"Fix regression for loading pretrained classifier via direct model entrypoint functions. Didn\u2019t impact create_model() factory usage."),RI.forEach(t),x8=f(_e),jh=a(_e,"LI",{});var MI=o(jh);S8=s(MI,"PyPi release @ 0.3.0 version!"),MI.forEach(t),_e.forEach(t),q1=f(l),lt=a(l,"H3",{class:!0});var Gv=o(lt);$l=a(Gv,"A",{id:!0,class:!0,href:!0});var CI=o($l);zh=a(CI,"SPAN",{});var UI=o(zh);u(Wa.$$.fragment,UI),UI.forEach(t),CI.forEach(t),P8=f(Gv),Gh=a(Gv,"SPAN",{});var VI=o(Gh);T8=s(VI,"Oct 26, 2020"),VI.forEach(t),Gv.forEach(t),K1=f(l),kl=a(l,"UL",{});var Jv=o(kl);$s=a(Jv,"LI",{});var X9=o($s);D8=s(X9,"Update Vision Transformer models to be compatible with official code release at "),Ya=a(X9,"A",{href:!0,rel:!0});var OI=o(Ya);R8=s(OI,"https://github.com/google-research/vision_transformer"),OI.forEach(t),X9.forEach(t),M8=f(Jv),ks=a(Jv,"LI",{});var q9=o(ks);C8=s(q9,"Add Vision Transformer weights (ImageNet-21k pretrain) for 384x384 base and large models converted from official jax impl"),Z=a(q9,"UL",{});var Ar=o(Z);Jh=a(Ar,"LI",{});var FI=o(Jh);U8=s(FI,"ViT-B/16 - 84.2"),FI.forEach(t),V8=f(Ar),Xh=a(Ar,"LI",{});var BI=o(Xh);O8=s(BI,"ViT-B/32 - 81.7"),BI.forEach(t),F8=f(Ar),qh=a(Ar,"LI",{});var HI=o(qh);B8=s(HI,"ViT-L/16 - 85.2"),HI.forEach(t),H8=f(Ar),Kh=a(Ar,"LI",{});var jI=o(Kh);j8=s(jI,"ViT-L/32 - 81.5"),jI.forEach(t),Ar.forEach(t),q9.forEach(t),Jv.forEach(t),W1=f(l),rt=a(l,"H3",{class:!0});var Xv=o(rt);Il=a(Xv,"A",{id:!0,class:!0,href:!0});var zI=o(Il);Wh=a(zI,"SPAN",{});var GI=o(Wh);u(Qa.$$.fragment,GI),GI.forEach(t),zI.forEach(t),z8=f(Xv),Yh=a(Xv,"SPAN",{});var JI=o(Yh);G8=s(JI,"Oct 21, 2020"),JI.forEach(t),Xv.forEach(t),Y1=f(l),Is=a(l,"UL",{});var XI=o(Is);Za=a(XI,"LI",{});var qv=o(Za);J8=s(qv,"Weights added for Vision Transformer (ViT) models. 77.86 top-1 for \u2018small\u2019 and 79.35 for \u2018base\u2019. Thanks to "),eo=a(qv,"A",{href:!0,rel:!0});var qI=o(eo);X8=s(qI,"Christof"),qI.forEach(t),q8=s(qv," for training the base model w/ lots of GPUs."),qv.forEach(t),XI.forEach(t),Q1=f(l),at=a(l,"H3",{class:!0});var Kv=o(at);xl=a(Kv,"A",{id:!0,class:!0,href:!0});var KI=o(xl);Qh=a(KI,"SPAN",{});var WI=o(Qh);u(to.$$.fragment,WI),WI.forEach(t),KI.forEach(t),K8=f(Kv),Zh=a(Kv,"SPAN",{});var YI=o(Zh);W8=s(YI,"Oct 13, 2020"),YI.forEach(t),Kv.forEach(t),Z1=f(l),X=a(l,"UL",{});var yr=o(X);ec=a(yr,"LI",{});var QI=o(ec);Y8=s(QI,"Initial impl of Vision Transformer models. Both patch and hybrid (CNN backbone) variants. Currently trying to train\u2026"),QI.forEach(t),Q8=f(yr),tc=a(yr,"LI",{});var ZI=o(tc);Z8=s(ZI,"Adafactor and AdaHessian (FP32 only, no AMP) optimizers"),ZI.forEach(t),e4=f(yr),lo=a(yr,"LI",{});var Wv=o(lo);t4=s(Wv,"EdgeTPU-M ("),lc=a(Wv,"CODE",{});var ex=o(lc);l4=s(ex,"efficientnet_em"),ex.forEach(t),r4=s(Wv,") model trained in PyTorch, 79.3 top-1"),Wv.forEach(t),a4=f(yr),rc=a(yr,"LI",{});var tx=o(rc);o4=s(tx,"Pip release, doc updates pending a few more changes\u2026"),tx.forEach(t),yr.forEach(t),eu=f(l),ot=a(l,"H3",{class:!0});var Yv=o(ot);Sl=a(Yv,"A",{id:!0,class:!0,href:!0});var lx=o(Sl);ac=a(lx,"SPAN",{});var rx=o(ac);u(ro.$$.fragment,rx),rx.forEach(t),lx.forEach(t),i4=f(Yv),oc=a(Yv,"SPAN",{});var ax=o(oc);s4=s(ax,"Sept 18, 2020"),ax.forEach(t),Yv.forEach(t),tu=f(l),Pl=a(l,"UL",{});var Qv=o(Pl);ic=a(Qv,"LI",{});var ox=o(ic);n4=s(ox,"New ResNet \u2018D\u2019 weights. 72.7 (top-1) ResNet-18-D, 77.1 ResNet-34-D, 80.5 ResNet-50-D"),ox.forEach(t),d4=f(Qv),sc=a(Qv,"LI",{});var ix=o(sc);f4=s(ix,"Added a few untrained defs for other ResNet models (66D, 101D, 152D, 200/200D)"),ix.forEach(t),Qv.forEach(t),lu=f(l),it=a(l,"H3",{class:!0});var Zv=o(it);Tl=a(Zv,"A",{id:!0,class:!0,href:!0});var sx=o(Tl);nc=a(sx,"SPAN",{});var nx=o(nc);u(ao.$$.fragment,nx),nx.forEach(t),sx.forEach(t),h4=f(Zv),dc=a(Zv,"SPAN",{});var dx=o(dc);c4=s(dx,"Sept 3, 2020"),dx.forEach(t),Zv.forEach(t),ru=f(l),fe=a(l,"UL",{});var kn=o(fe);xs=a(kn,"LI",{});var K9=o(xs);p4=s(K9,"New weights"),oo=a(K9,"UL",{});var e0=o(oo);fc=a(e0,"LI",{});var fx=o(fc);u4=s(fx,"Wide-ResNet50 - 81.5 top-1 (vs 78.5 torchvision)"),fx.forEach(t),v4=f(e0),hc=a(e0,"LI",{});var hx=o(hc);m4=s(hx,"SEResNeXt50-32x4d - 81.3 top-1 (vs 79.1 cadene)"),hx.forEach(t),e0.forEach(t),K9.forEach(t),_4=f(kn),ee=a(kn,"LI",{});var Nr=o(ee);w4=s(Nr,"Support for native Torch AMP and channels_last memory format added to train/validate scripts ("),cc=a(Nr,"CODE",{});var cx=o(cc);E4=s(cx,"--channels-last"),cx.forEach(t),g4=s(Nr,", "),pc=a(Nr,"CODE",{});var px=o(pc);b4=s(px,"--native-amp"),px.forEach(t),A4=s(Nr," vs "),uc=a(Nr,"CODE",{});var ux=o(uc);y4=s(ux,"--apex-amp"),ux.forEach(t),N4=s(Nr,")"),Nr.forEach(t),L4=f(kn),vc=a(kn,"LI",{});var vx=o(vc);$4=s(vx,"Models tested with channels_last on latest NGC 20.08 container. AdaptiveAvgPool in attn layers changed to mean((2,3)) to work around bug with NHWC kernel."),vx.forEach(t),kn.forEach(t),au=f(l),st=a(l,"H3",{class:!0});var t0=o(st);Dl=a(t0,"A",{id:!0,class:!0,href:!0});var mx=o(Dl);mc=a(mx,"SPAN",{});var _x=o(mc);u(io.$$.fragment,_x),_x.forEach(t),mx.forEach(t),k4=f(t0),_c=a(t0,"SPAN",{});var wx=o(_c);I4=s(wx,"Aug 12, 2020"),wx.forEach(t),t0.forEach(t),ou=f(l),he=a(l,"UL",{});var In=o(he);Ss=a(In,"LI",{});var W9=o(Ss);x4=s(W9,"New/updated weights from training experiments"),nt=a(W9,"UL",{});var xn=o(nt);wc=a(xn,"LI",{});var Ex=o(wc);S4=s(Ex,"EfficientNet-B3 - 82.1 top-1 (vs 81.6 for official with AA and 81.9 for AdvProp)"),Ex.forEach(t),P4=f(xn),Ec=a(xn,"LI",{});var gx=o(Ec);T4=s(gx,"RegNetY-3.2GF - 82.0 top-1 (78.9 from official ver)"),gx.forEach(t),D4=f(xn),gc=a(xn,"LI",{});var bx=o(gc);R4=s(bx,"CSPResNet50 - 79.6 top-1 (76.6 from official ver)"),bx.forEach(t),xn.forEach(t),W9.forEach(t),M4=f(In),so=a(In,"LI",{});var l0=o(so);C4=s(l0,"Add CutMix integrated w/ Mixup. See "),no=a(l0,"A",{href:!0,rel:!0});var Ax=o(no);U4=s(Ax,"pull request"),Ax.forEach(t),V4=s(l0," for some usage examples"),l0.forEach(t),O4=f(In),fo=a(In,"LI",{});var r0=o(fo);F4=s(r0,"Some fixes for using pretrained weights with "),bc=a(r0,"CODE",{});var yx=o(bc);B4=s(yx,"in_chans"),yx.forEach(t),H4=s(r0," != 3 on several models."),r0.forEach(t),In.forEach(t),iu=f(l),dt=a(l,"H3",{class:!0});var a0=o(dt);Rl=a(a0,"A",{id:!0,class:!0,href:!0});var Nx=o(Rl);Ac=a(Nx,"SPAN",{});var Lx=o(Ac);u(ho.$$.fragment,Lx),Lx.forEach(t),Nx.forEach(t),j4=f(a0),yc=a(a0,"SPAN",{});var $x=o(yc);z4=s($x,"Aug 5, 2020"),$x.forEach(t),a0.forEach(t),su=f(l),Ps=a(l,"P",{});var kx=o(Ps);G4=s(kx,"Universal feature extraction, new models, new weights, new test sets."),kx.forEach(t),nu=f(l),y=a(l,"UL",{});var T=o(y);ft=a(T,"LI",{});var Sn=o(ft);J4=s(Sn,"All models support the "),Nc=a(Sn,"CODE",{});var Ix=o(Nc);X4=s(Ix,"features_only=True"),Ix.forEach(t),q4=s(Sn," argument for "),Lc=a(Sn,"CODE",{});var xx=o(Lc);K4=s(xx,"create_model"),xx.forEach(t),W4=s(Sn," call to return a network that extracts feature maps from the deepest layer at each stride."),Sn.forEach(t),Y4=f(T),Ts=a(T,"LI",{});var Y9=o(Ts);Q4=s(Y9,"New models"),ht=a(Y9,"UL",{});var Pn=o(ht);$c=a(Pn,"LI",{});var Sx=o($c);Z4=s(Sx,"CSPResNet, CSPResNeXt, CSPDarkNet, DarkNet"),Sx.forEach(t),e6=f(Pn),kc=a(Pn,"LI",{});var Px=o(kc);t6=s(Px,"ReXNet"),Px.forEach(t),l6=f(Pn),Ic=a(Pn,"LI",{});var Tx=o(Ic);r6=s(Tx,"(Modified Aligned) Xception41/65/71 (a proper port of TF models)"),Tx.forEach(t),Pn.forEach(t),Y9.forEach(t),a6=f(T),Ds=a(T,"LI",{});var Q9=o(Ds);o6=s(Q9,"New trained weights"),z=a(Q9,"UL",{});var we=o(z);xc=a(we,"LI",{});var Dx=o(xc);i6=s(Dx,"SEResNet50 - 80.3 top-1"),Dx.forEach(t),s6=f(we),Sc=a(we,"LI",{});var Rx=o(Sc);n6=s(Rx,"CSPDarkNet53 - 80.1 top-1"),Rx.forEach(t),d6=f(we),Pc=a(we,"LI",{});var Mx=o(Pc);f6=s(Mx,"CSPResNeXt50 - 80.0 top-1"),Mx.forEach(t),h6=f(we),Tc=a(we,"LI",{});var Cx=o(Tc);c6=s(Cx,"DPN68b - 79.2 top-1"),Cx.forEach(t),p6=f(we),co=a(we,"LI",{});var o0=o(co);u6=s(o0,"EfficientNet-Lite0 (non-TF ver) - 75.5 (submitted by "),po=a(o0,"A",{href:!0,rel:!0});var Ux=o(po);v6=s(Ux,"@hal-314"),Ux.forEach(t),m6=s(o0,")"),o0.forEach(t),we.forEach(t),Q9.forEach(t),_6=f(T),Rs=a(T,"LI",{});var Z9=o(Rs);w6=s(Z9,"Add \u2018real\u2019 labels for ImageNet and ImageNet-Renditions test set, see "),Ms=a(Z9,"A",{href:!0});var Vx=o(Ms);Dc=a(Vx,"CODE",{});var Ox=o(Dc);E6=s(Ox,"results/README.md"),Ox.forEach(t),Vx.forEach(t),Z9.forEach(t),g6=f(T),Cs=a(T,"LI",{});var eN=o(Cs);b6=s(eN,"Test set ranking/top-n diff script by "),uo=a(eN,"A",{href:!0,rel:!0});var Fx=o(uo);A6=s(Fx,"@KushajveerSingh"),Fx.forEach(t),eN.forEach(t),y6=f(T),Rc=a(T,"LI",{});var Bx=o(Rc);N6=s(Bx,"Train script and loader/transform tweaks to punch through more aug arguments"),Bx.forEach(t),L6=f(T),Us=a(T,"LI",{});var tN=o(Us);$6=s(tN,"README and documentation overhaul. See initial (WIP) documentation at "),vo=a(tN,"A",{href:!0,rel:!0});var Hx=o(vo);k6=s(Hx,"https://rwightman.github.io/pytorch-image-models/"),Hx.forEach(t),tN.forEach(t),I6=f(T),Vs=a(T,"LI",{});var lN=o(Vs);x6=s(lN,"adamp and sgdp optimizers added by "),mo=a(lN,"A",{href:!0,rel:!0});var jx=o(mo);S6=s(jx,"@hellbell"),jx.forEach(t),lN.forEach(t),T.forEach(t),du=f(l),ct=a(l,"H3",{class:!0});var i0=o(ct);Ml=a(i0,"A",{id:!0,class:!0,href:!0});var zx=o(Ml);Mc=a(zx,"SPAN",{});var Gx=o(Mc);u(_o.$$.fragment,Gx),Gx.forEach(t),zx.forEach(t),P6=f(i0),Cc=a(i0,"SPAN",{});var Jx=o(Cc);T6=s(Jx,"June 11, 2020"),Jx.forEach(t),i0.forEach(t),fu=f(l),Os=a(l,"P",{});var Xx=o(Os);D6=s(Xx,"Bunch of changes:"),Xx.forEach(t),hu=f(l),L=a(l,"UL",{});var F=o(L);Uc=a(F,"LI",{});var qx=o(Uc);R6=s(qx,"DenseNet models updated with memory efficient addition from torchvision (fixed a bug), blur pooling and deep stem additions"),qx.forEach(t),M6=f(F),Vc=a(F,"LI",{});var Kx=o(Vc);C6=s(Kx,"VoVNet V1 and V2 models added, 39 V2 variant (ese_vovnet_39b) trained to 79.3 top-1"),Kx.forEach(t),U6=f(F),Fs=a(F,"LI",{});var rN=o(Fs);V6=s(rN,"Activation factory added along with new activations:"),pt=a(rN,"UL",{});var Tn=o(pt);Oc=a(Tn,"LI",{});var Wx=o(Oc);O6=s(Wx,"select act at model creation time for more flexibility in using activations compatible with scripting or tracing (ONNX export)"),Wx.forEach(t),F6=f(Tn),Fc=a(Tn,"LI",{});var Yx=o(Fc);B6=s(Yx,"hard_mish (experimental) added with memory-efficient grad, along with ME hard_swish"),Yx.forEach(t),H6=f(Tn),Bc=a(Tn,"LI",{});var Qx=o(Bc);j6=s(Qx,"context mgr for setting exportable/scriptable/no_jit states"),Qx.forEach(t),Tn.forEach(t),rN.forEach(t),z6=f(F),Hc=a(F,"LI",{});var Zx=o(Hc);G6=s(Zx,"Norm + Activation combo layers added with initial trial support in DenseNet and VoVNet along with impl of EvoNorm and InplaceAbn wrapper that fit the interface"),Zx.forEach(t),J6=f(F),jc=a(F,"LI",{});var eS=o(jc);X6=s(eS,"Torchscript works for all but two of the model types as long as using Pytorch 1.5+, tests added for this"),eS.forEach(t),q6=f(F),zc=a(F,"LI",{});var tS=o(zc);K6=s(tS,"Some import cleanup and classifier reset changes, all models will have classifier reset to nn.Identity on reset_classifer(0) call"),tS.forEach(t),W6=f(F),Gc=a(F,"LI",{});var lS=o(Gc);Y6=s(lS,"Prep for 0.1.28 pip release"),lS.forEach(t),F.forEach(t),cu=f(l),ut=a(l,"H3",{class:!0});var s0=o(ut);Cl=a(s0,"A",{id:!0,class:!0,href:!0});var rS=o(Cl);Jc=a(rS,"SPAN",{});var aS=o(Jc);u(wo.$$.fragment,aS),aS.forEach(t),rS.forEach(t),Q6=f(s0),Xc=a(s0,"SPAN",{});var oS=o(Xc);Z6=s(oS,"May 12, 2020"),oS.forEach(t),s0.forEach(t),pu=f(l),Bs=a(l,"UL",{});var iS=o(Bs);vt=a(iS,"LI",{});var Dn=o(vt);e7=s(Dn,"Add ResNeSt models (code adapted from "),Eo=a(Dn,"A",{href:!0,rel:!0});var sS=o(Eo);t7=s(sS,"https://github.com/zhanghang1989/ResNeSt"),sS.forEach(t),l7=s(Dn,", paper "),go=a(Dn,"A",{href:!0,rel:!0});var nS=o(go);r7=s(nS,"https://arxiv.org/abs/2004.08955"),nS.forEach(t),a7=s(Dn,"))"),Dn.forEach(t),iS.forEach(t),uu=f(l),mt=a(l,"H3",{class:!0});var n0=o(mt);Ul=a(n0,"A",{id:!0,class:!0,href:!0});var dS=o(Ul);qc=a(dS,"SPAN",{});var fS=o(qc);u(bo.$$.fragment,fS),fS.forEach(t),dS.forEach(t),o7=f(n0),Kc=a(n0,"SPAN",{});var hS=o(Kc);i7=s(hS,"May 3, 2020"),hS.forEach(t),n0.forEach(t),vu=f(l),Hs=a(l,"UL",{});var cS=o(Hs);Vl=a(cS,"LI",{});var Kp=o(Vl);s7=s(Kp,"Pruned EfficientNet B1, B2, and B3 ("),Ao=a(Kp,"A",{href:!0,rel:!0});var pS=o(Ao);n7=s(pS,"https://arxiv.org/abs/2002.08258"),pS.forEach(t),d7=s(Kp,") contributed by "),yo=a(Kp,"A",{href:!0,rel:!0});var uS=o(yo);f7=s(uS,"Yonathan Aflalo"),uS.forEach(t),Kp.forEach(t),cS.forEach(t),mu=f(l),_t=a(l,"H3",{class:!0});var d0=o(_t);Ol=a(d0,"A",{id:!0,class:!0,href:!0});var vS=o(Ol);Wc=a(vS,"SPAN",{});var mS=o(Wc);u(No.$$.fragment,mS),mS.forEach(t),vS.forEach(t),h7=f(d0),Yc=a(d0,"SPAN",{});var _S=o(Yc);c7=s(_S,"May 1, 2020"),_S.forEach(t),d0.forEach(t),_u=f(l),Fl=a(l,"UL",{});var f0=o(Fl);js=a(f0,"LI",{});var aN=o(js);p7=s(aN,"Merged a number of execellent contributions in the ResNet model family over the past month"),wt=a(aN,"UL",{});var Rn=o(wt);Lo=a(Rn,"LI",{});var h0=o(Lo);u7=s(h0,"BlurPool2D and resnetblur models initiated by "),$o=a(h0,"A",{href:!0,rel:!0});var wS=o($o);v7=s(wS,"Chris Ha"),wS.forEach(t),m7=s(h0,", I trained resnetblur50 to 79.3."),h0.forEach(t),_7=f(Rn),zs=a(Rn,"LI",{});var oN=o(zs);w7=s(oN,"TResNet models and SpaceToDepth, AntiAliasDownsampleLayer layers by "),ko=a(oN,"A",{href:!0,rel:!0});var ES=o(ko);E7=s(ES,"mrT23"),ES.forEach(t),oN.forEach(t),g7=f(Rn),Bl=a(Rn,"LI",{});var Wp=o(Bl);b7=s(Wp,"ecaresnet (50d, 101d, light) models and two pruned variants using pruning as per ("),Io=a(Wp,"A",{href:!0,rel:!0});var gS=o(Io);A7=s(gS,"https://arxiv.org/abs/2002.08258"),gS.forEach(t),y7=s(Wp,") by "),xo=a(Wp,"A",{href:!0,rel:!0});var bS=o(xo);N7=s(bS,"Yonathan Aflalo"),bS.forEach(t),Wp.forEach(t),Rn.forEach(t),aN.forEach(t),L7=f(f0),Qc=a(f0,"LI",{});var AS=o(Qc);$7=s(AS,"200 pretrained models in total now with updated results csv in results folder"),AS.forEach(t),f0.forEach(t),wu=f(l),Et=a(l,"H3",{class:!0});var c0=o(Et);Hl=a(c0,"A",{id:!0,class:!0,href:!0});var yS=o(Hl);Zc=a(yS,"SPAN",{});var NS=o(Zc);u(So.$$.fragment,NS),NS.forEach(t),yS.forEach(t),k7=f(c0),e2=a(c0,"SPAN",{});var LS=o(e2);I7=s(LS,"April 5, 2020"),LS.forEach(t),c0.forEach(t),Eu=f(l),Gs=a(l,"UL",{});var $S=o(Gs);Js=a($S,"LI",{});var iN=o(Js);x7=s(iN,"Add some newly trained MobileNet-V2 models trained with latest h-params, rand augment. They compare quite favourably to EfficientNet-Lite"),te=a(iN,"UL",{});var Lr=o(te);t2=a(Lr,"LI",{});var kS=o(t2);S7=s(kS,"3.5M param MobileNet-V2 100 @ 73%"),kS.forEach(t),P7=f(Lr),l2=a(Lr,"LI",{});var IS=o(l2);T7=s(IS,"4.5M param MobileNet-V2 110d @ 75%"),IS.forEach(t),D7=f(Lr),r2=a(Lr,"LI",{});var xS=o(r2);R7=s(xS,"6.1M param MobileNet-V2 140 @ 76.5%"),xS.forEach(t),M7=f(Lr),a2=a(Lr,"LI",{});var SS=o(a2);C7=s(SS,"5.8M param MobileNet-V2 120d @ 77.3%"),SS.forEach(t),Lr.forEach(t),iN.forEach(t),$S.forEach(t),gu=f(l),gt=a(l,"H3",{class:!0});var p0=o(gt);jl=a(p0,"A",{id:!0,class:!0,href:!0});var PS=o(jl);o2=a(PS,"SPAN",{});var TS=o(o2);u(Po.$$.fragment,TS),TS.forEach(t),PS.forEach(t),U7=f(p0),i2=a(p0,"SPAN",{});var DS=o(i2);V7=s(DS,"March 18, 2020"),DS.forEach(t),p0.forEach(t),bu=f(l),zl=a(l,"UL",{});var u0=o(zl);Xs=a(u0,"LI",{});var sN=o(Xs);O7=s(sN,"Add EfficientNet-Lite models w/ weights ported from "),To=a(sN,"A",{href:!0,rel:!0});var RS=o(To);F7=s(RS,"Tensorflow TPU"),RS.forEach(t),sN.forEach(t),B7=f(u0),Do=a(u0,"LI",{});var v0=o(Do);H7=s(v0,"Add RandAugment trained ResNeXt-50 32x4d weights with 79.8 top-1. Trained by "),Ro=a(v0,"A",{href:!0,rel:!0});var MS=o(Ro);j7=s(MS,"Andrew Lavin"),MS.forEach(t),z7=s(v0," (see Training section for hparams)"),v0.forEach(t),u0.forEach(t),Au=f(l),bt=a(l,"H3",{class:!0});var m0=o(bt);Gl=a(m0,"A",{id:!0,class:!0,href:!0});var CS=o(Gl);s2=a(CS,"SPAN",{});var US=o(s2);u(Mo.$$.fragment,US),US.forEach(t),CS.forEach(t),G7=f(m0),n2=a(m0,"SPAN",{});var VS=o(n2);J7=s(VS,"April 5, 2020"),VS.forEach(t),m0.forEach(t),yu=f(l),qs=a(l,"UL",{});var OS=o(qs);Ks=a(OS,"LI",{});var nN=o(Ks);X7=s(nN,"Add some newly trained MobileNet-V2 models trained with latest h-params, rand augment. They compare quite favourably to EfficientNet-Lite"),le=a(nN,"UL",{});var $r=o(le);d2=a($r,"LI",{});var FS=o(d2);q7=s(FS,"3.5M param MobileNet-V2 100 @ 73%"),FS.forEach(t),K7=f($r),f2=a($r,"LI",{});var BS=o(f2);W7=s(BS,"4.5M param MobileNet-V2 110d @ 75%"),BS.forEach(t),Y7=f($r),h2=a($r,"LI",{});var HS=o(h2);Q7=s(HS,"6.1M param MobileNet-V2 140 @ 76.5%"),HS.forEach(t),Z7=f($r),c2=a($r,"LI",{});var jS=o(c2);eb=s(jS,"5.8M param MobileNet-V2 120d @ 77.3%"),jS.forEach(t),$r.forEach(t),nN.forEach(t),OS.forEach(t),Nu=f(l),At=a(l,"H3",{class:!0});var _0=o(At);Jl=a(_0,"A",{id:!0,class:!0,href:!0});var zS=o(Jl);p2=a(zS,"SPAN",{});var GS=o(p2);u(Co.$$.fragment,GS),GS.forEach(t),zS.forEach(t),tb=f(_0),u2=a(_0,"SPAN",{});var JS=o(u2);lb=s(JS,"March 18, 2020"),JS.forEach(t),_0.forEach(t),Lu=f(l),Xl=a(l,"UL",{});var w0=o(Xl);Ws=a(w0,"LI",{});var dN=o(Ws);rb=s(dN,"Add EfficientNet-Lite models w/ weights ported from "),Uo=a(dN,"A",{href:!0,rel:!0});var XS=o(Uo);ab=s(XS,"Tensorflow TPU"),XS.forEach(t),dN.forEach(t),ob=f(w0),Vo=a(w0,"LI",{});var E0=o(Vo);ib=s(E0,"Add RandAugment trained ResNeXt-50 32x4d weights with 79.8 top-1. Trained by "),Oo=a(E0,"A",{href:!0,rel:!0});var qS=o(Oo);sb=s(qS,"Andrew Lavin"),qS.forEach(t),nb=s(E0," (see Training section for hparams)"),E0.forEach(t),w0.forEach(t),$u=f(l),yt=a(l,"H3",{class:!0});var g0=o(yt);ql=a(g0,"A",{id:!0,class:!0,href:!0});var KS=o(ql);v2=a(KS,"SPAN",{});var WS=o(v2);u(Fo.$$.fragment,WS),WS.forEach(t),KS.forEach(t),db=f(g0),m2=a(g0,"SPAN",{});var YS=o(m2);fb=s(YS,"Feb 29, 2020"),YS.forEach(t),g0.forEach(t),ku=f(l),ce=a(l,"UL",{});var Mn=o(ce);_2=a(Mn,"LI",{});var QS=o(_2);hb=s(QS,"New MobileNet-V3 Large weights trained from stratch with this code to 75.77% top-1"),QS.forEach(t),cb=f(Mn),Ys=a(Mn,"LI",{});var fN=o(Ys);pb=s(fN,"IMPORTANT CHANGE - default weight init changed for all MobilenetV3 / EfficientNet / related models"),Nt=a(fN,"UL",{});var Cn=o(Nt);w2=a(Cn,"LI",{});var ZS=o(w2);ub=s(ZS,"overall results similar to a bit better training from scratch on a few smaller models tried"),ZS.forEach(t),vb=f(Cn),E2=a(Cn,"LI",{});var eP=o(E2);mb=s(eP,"performance early in training seems consistently improved but less difference by end"),eP.forEach(t),_b=f(Cn),Lt=a(Cn,"LI",{});var Un=o(Lt);wb=s(Un,"set "),g2=a(Un,"CODE",{});var tP=o(g2);Eb=s(tP,"fix_group_fanout=False"),tP.forEach(t),gb=s(Un," in "),b2=a(Un,"CODE",{});var lP=o(b2);bb=s(lP,"_init_weight_goog"),lP.forEach(t),Ab=s(Un," fn if you need to reproducte past behaviour"),Un.forEach(t),Cn.forEach(t),fN.forEach(t),yb=f(Mn),A2=a(Mn,"LI",{});var rP=o(A2);Nb=s(rP,"Experimental LR noise feature added applies a random perturbation to LR each epoch in specified range of training"),rP.forEach(t),Mn.forEach(t),Iu=f(l),$t=a(l,"H3",{class:!0});var b0=o($t);Kl=a(b0,"A",{id:!0,class:!0,href:!0});var aP=o(Kl);y2=a(aP,"SPAN",{});var oP=o(y2);u(Bo.$$.fragment,oP),oP.forEach(t),aP.forEach(t),Lb=f(b0),N2=a(b0,"SPAN",{});var iP=o(N2);$b=s(iP,"Feb 18, 2020"),iP.forEach(t),b0.forEach(t),xu=f(l),Wl=a(l,"UL",{});var A0=o(Wl);Yl=a(A0,"LI",{});var Yp=o(Yl);kb=s(Yp,"Big refactor of model layers and addition of several attention mechanisms. Several additions motivated by \u2018Compounding the Performance Improvements\u2026\u2019 ("),Ho=a(Yp,"A",{href:!0,rel:!0});var sP=o(Ho);Ib=s(sP,"https://arxiv.org/abs/2001.06268"),sP.forEach(t),xb=s(Yp,"):"),S=a(Yp,"UL",{});var B=o(S);kt=a(B,"LI",{});var Vn=o(kt);Sb=s(Vn,"Move layer/module impl into "),L2=a(Vn,"CODE",{});var nP=o(L2);Pb=s(nP,"layers"),nP.forEach(t),Tb=s(Vn," subfolder/module of "),$2=a(Vn,"CODE",{});var dP=o($2);Db=s(dP,"models"),dP.forEach(t),Rb=s(Vn," and organize in a more granular fashion"),Vn.forEach(t),Mb=f(B),k2=a(B,"LI",{});var fP=o(k2);Cb=s(fP,"ResNet downsample paths now properly support dilation (output stride != 32) for avg_pool (\u2018D\u2019 variant) and 3x3 (SENets) networks"),fP.forEach(t),Ub=f(B),Qs=a(B,"LI",{});var hN=o(Qs);Vb=s(hN,"Add Selective Kernel Nets on top of ResNet base, pretrained weights"),It=a(hN,"UL",{});var On=o(It);I2=a(On,"LI",{});var hP=o(I2);Ob=s(hP,"skresnet18 - 73% top-1"),hP.forEach(t),Fb=f(On),x2=a(On,"LI",{});var cP=o(x2);Bb=s(cP,"skresnet34 - 76.9% top-1"),cP.forEach(t),Hb=f(On),S2=a(On,"LI",{});var pP=o(S2);jb=s(pP,"skresnext50_32x4d (equiv to SKNet50) - 80.2% top-1"),pP.forEach(t),On.forEach(t),hN.forEach(t),zb=f(B),Zs=a(B,"LI",{});var cN=o(Zs);Gb=s(cN,"ECA and CECA (circular padding) attention layer contributed by "),jo=a(cN,"A",{href:!0,rel:!0});var uP=o(jo);Jb=s(uP,"Chris Ha"),uP.forEach(t),cN.forEach(t),Xb=f(B),P2=a(B,"LI",{});var vP=o(P2);qb=s(vP,"CBAM attention experiment (not the best results so far, may remove)"),vP.forEach(t),Kb=f(B),zo=a(B,"LI",{});var y0=o(zo);Wb=s(y0,"Attention factory to allow dynamically selecting one of SE, ECA, CBAM in the "),T2=a(y0,"CODE",{});var mP=o(T2);Yb=s(mP,".se"),mP.forEach(t),Qb=s(y0," position for all ResNets"),y0.forEach(t),Zb=f(B),D2=a(B,"LI",{});var _P=o(D2);eA=s(_P,"Add DropBlock and DropPath (formerly DropConnect for EfficientNet/MobileNetv3) support to all ResNet variants"),_P.forEach(t),B.forEach(t),Yp.forEach(t),tA=f(A0),R2=a(A0,"LI",{});var wP=o(R2);lA=s(wP,"Full dataset results updated that incl NoisyStudent weights and 2 of the 3 SK weights"),wP.forEach(t),A0.forEach(t),Su=f(l),xt=a(l,"H3",{class:!0});var N0=o(xt);Ql=a(N0,"A",{id:!0,class:!0,href:!0});var EP=o(Ql);M2=a(EP,"SPAN",{});var gP=o(M2);u(Go.$$.fragment,gP),gP.forEach(t),EP.forEach(t),rA=f(N0),C2=a(N0,"SPAN",{});var bP=o(C2);aA=s(bP,"Feb 12, 2020"),bP.forEach(t),N0.forEach(t),Pu=f(l),en=a(l,"UL",{});var AP=o(en);tn=a(AP,"LI",{});var pN=o(tn);oA=s(pN,"Add EfficientNet-L2 and B0-B7 NoisyStudent weights ported from "),Jo=a(pN,"A",{href:!0,rel:!0});var yP=o(Jo);iA=s(yP,"Tensorflow TPU"),yP.forEach(t),pN.forEach(t),AP.forEach(t),Tu=f(l),St=a(l,"H3",{class:!0});var L0=o(St);Zl=a(L0,"A",{id:!0,class:!0,href:!0});var NP=o(Zl);U2=a(NP,"SPAN",{});var LP=o(U2);u(Xo.$$.fragment,LP),LP.forEach(t),NP.forEach(t),sA=f(L0),V2=a(L0,"SPAN",{});var $P=o(V2);nA=s($P,"Feb 6, 2020"),$P.forEach(t),L0.forEach(t),Du=f(l),ln=a(l,"UL",{});var kP=o(ln);qo=a(kP,"LI",{});var $0=o(qo);dA=s($0,"Add RandAugment trained EfficientNet-ES (EdgeTPU-Small) weights with 78.1 top-1. Trained by "),Ko=a($0,"A",{href:!0,rel:!0});var IP=o(Ko);fA=s(IP,"Andrew Lavin"),IP.forEach(t),hA=s($0," (see Training section for hparams)"),$0.forEach(t),kP.forEach(t),Ru=f(l),Pt=a(l,"H3",{class:!0});var k0=o(Pt);er=a(k0,"A",{id:!0,class:!0,href:!0});var xP=o(er);O2=a(xP,"SPAN",{});var SP=o(O2);u(Wo.$$.fragment,SP),SP.forEach(t),xP.forEach(t),cA=f(k0),F2=a(k0,"SPAN",{});var PP=o(F2);pA=s(PP,"Feb 1/2, 2020"),PP.forEach(t),k0.forEach(t),Mu=f(l),pe=a(l,"UL",{});var Fn=o(pe);B2=a(Fn,"LI",{});var TP=o(B2);uA=s(TP,"Port new EfficientNet-B8 (RandAugment) weights, these are different than the B8 AdvProp, different input normalization."),TP.forEach(t),vA=f(Fn),H2=a(Fn,"LI",{});var DP=o(H2);mA=s(DP,"Update results csv files on all models for ImageNet validation and three other test sets"),DP.forEach(t),_A=f(Fn),j2=a(Fn,"LI",{});var RP=o(j2);wA=s(RP,"Push PyPi package update"),RP.forEach(t),Fn.forEach(t),Cu=f(l),Tt=a(l,"H3",{class:!0});var I0=o(Tt);tr=a(I0,"A",{id:!0,class:!0,href:!0});var MP=o(tr);z2=a(MP,"SPAN",{});var CP=o(z2);u(Yo.$$.fragment,CP),CP.forEach(t),MP.forEach(t),EA=f(I0),G2=a(I0,"SPAN",{});var UP=o(G2);gA=s(UP,"Jan 31, 2020"),UP.forEach(t),I0.forEach(t),Uu=f(l),rn=a(l,"UL",{});var VP=o(rn);J2=a(VP,"LI",{});var OP=o(J2);bA=s(OP,"Update ResNet50 weights with a new 79.038 result from further JSD / AugMix experiments. Full command line for reproduction in training section below."),OP.forEach(t),VP.forEach(t),Vu=f(l),Dt=a(l,"H3",{class:!0});var x0=o(Dt);lr=a(x0,"A",{id:!0,class:!0,href:!0});var FP=o(lr);X2=a(FP,"SPAN",{});var BP=o(X2);u(Qo.$$.fragment,BP),BP.forEach(t),FP.forEach(t),AA=f(x0),q2=a(x0,"SPAN",{});var HP=o(q2);yA=s(HP,"Jan 11/12, 2020"),HP.forEach(t),x0.forEach(t),Ou=f(l),M=a(l,"UL",{});var Ee=o(M);K2=a(Ee,"LI",{});var jP=o(K2);NA=s(jP,"Master may be a bit unstable wrt to training, these changes have been tested but not all combos"),jP.forEach(t),LA=f(Ee),W2=a(Ee,"LI",{});var zP=o(W2);$A=s(zP,"Implementations of AugMix added to existing RA and AA. Including numerous supporting pieces like JSD loss (Jensen-Shannon divergence + CE), and AugMixDataset"),zP.forEach(t),kA=f(Ee),Y2=a(Ee,"LI",{});var GP=o(Y2);IA=s(GP,"SplitBatchNorm adaptation layer added for implementing Auxiliary BN as per AdvProp paper"),GP.forEach(t),xA=f(Ee),Q2=a(Ee,"LI",{});var JP=o(Q2);SA=s(JP,"ResNet-50 AugMix trained model w/ 79% top-1 added"),JP.forEach(t),PA=f(Ee),an=a(Ee,"LI",{});var uN=o(an);Z2=a(uN,"CODE",{});var XP=o(Z2);TA=s(XP,"seresnext26tn_32x4d"),XP.forEach(t),DA=s(uN," - 77.99 top-1, 93.75 top-5 added to tiered experiment, higher img/s than \u2018t\u2019 and \u2018d\u2019"),uN.forEach(t),Ee.forEach(t),Fu=f(l),Rt=a(l,"H3",{class:!0});var S0=o(Rt);rr=a(S0,"A",{id:!0,class:!0,href:!0});var qP=o(rr);ep=a(qP,"SPAN",{});var KP=o(ep);u(Zo.$$.fragment,KP),KP.forEach(t),qP.forEach(t),RA=f(S0),tp=a(S0,"SPAN",{});var WP=o(tp);MA=s(WP,"Jan 3, 2020"),WP.forEach(t),S0.forEach(t),Bu=f(l),ar=a(l,"UL",{});var P0=o(ar);ei=a(P0,"LI",{});var T0=o(ei);CA=s(T0,"Add RandAugment trained EfficientNet-B0 weight with 77.7 top-1. Trained by "),ti=a(T0,"A",{href:!0,rel:!0});var YP=o(ti);UA=s(YP,"Michael Klachko"),YP.forEach(t),VA=s(T0," with this code and recent hparams (see Training section)"),T0.forEach(t),OA=f(P0),li=a(P0,"LI",{});var D0=o(li);FA=s(D0,"Add "),lp=a(D0,"CODE",{});var QP=o(lp);BA=s(QP,"avg_checkpoints.py"),QP.forEach(t),HA=s(D0," script for post training weight averaging and update all scripts with header docstrings and shebangs."),D0.forEach(t),P0.forEach(t),Hu=f(l),Mt=a(l,"H3",{class:!0});var R0=o(Mt);or=a(R0,"A",{id:!0,class:!0,href:!0});var ZP=o(or);rp=a(ZP,"SPAN",{});var eT=o(rp);u(ri.$$.fragment,eT),eT.forEach(t),ZP.forEach(t),jA=f(R0),ap=a(R0,"SPAN",{});var tT=o(ap);zA=s(tT,"Dec 30, 2019"),tT.forEach(t),R0.forEach(t),ju=f(l),on=a(l,"UL",{});var lT=o(on);ir=a(lT,"LI",{});var Qp=o(ir);GA=s(Qp,"Merge "),ai=a(Qp,"A",{href:!0,rel:!0});var rT=o(ai);JA=s(rT,"Dushyant Mehta\u2019s"),rT.forEach(t),XA=s(Qp," PR for SelecSLS (Selective Short and Long Range Skip Connections) networks. Good GPU memory consumption and throughput. Original: "),oi=a(Qp,"A",{href:!0,rel:!0});var aT=o(oi);qA=s(aT,"https://github.com/mehtadushy/SelecSLS-Pytorch"),aT.forEach(t),Qp.forEach(t),lT.forEach(t),zu=f(l),Ct=a(l,"H3",{class:!0});var M0=o(Ct);sr=a(M0,"A",{id:!0,class:!0,href:!0});var oT=o(sr);op=a(oT,"SPAN",{});var iT=o(op);u(ii.$$.fragment,iT),iT.forEach(t),oT.forEach(t),KA=f(M0),ip=a(M0,"SPAN",{});var sT=o(ip);WA=s(sT,"Dec 28, 2019"),sT.forEach(t),M0.forEach(t),Gu=f(l),sn=a(l,"UL",{});var nT=o(sn);nn=a(nT,"LI",{});var vN=o(nn);YA=s(vN,"Add new model weights and training hparams (see Training Hparams section)"),Ut=a(vN,"UL",{});var Bn=o(Ut);si=a(Bn,"LI",{});var C0=o(si);sp=a(C0,"CODE",{});var dT=o(sp);QA=s(dT,"efficientnet_b3"),dT.forEach(t),ZA=s(C0," - 81.5 top-1, 95.7 top-5 at default res/crop, 81.9, 95.8 at 320x320 1.0 crop-pct"),np=a(C0,"UL",{});var fT=o(np);dp=a(fT,"LI",{});var hT=o(dp);ey=s(hT,"trained with RandAugment, ended up with an interesting but less than perfect result (see training section)"),hT.forEach(t),fT.forEach(t),C0.forEach(t),ty=f(Bn),ni=a(Bn,"LI",{});var U0=o(ni);fp=a(U0,"CODE",{});var cT=o(fp);ly=s(cT,"seresnext26d_32x4d"),cT.forEach(t),ry=s(U0,"- 77.6 top-1, 93.6 top-5"),di=a(U0,"UL",{});var V0=o(di);hp=a(V0,"LI",{});var pT=o(hp);ay=s(pT,"deep stem (32, 32, 64), avgpool downsample"),pT.forEach(t),oy=f(V0),cp=a(V0,"LI",{});var uT=o(cp);iy=s(uT,"stem/dowsample from bag-of-tricks paper"),uT.forEach(t),V0.forEach(t),U0.forEach(t),sy=f(Bn),fi=a(Bn,"LI",{});var O0=o(fi);pp=a(O0,"CODE",{});var vT=o(pp);ny=s(vT,"seresnext26t_32x4d"),vT.forEach(t),dy=s(O0,"- 78.0 top-1, 93.7 top-5"),hi=a(O0,"UL",{});var F0=o(hi);up=a(F0,"LI",{});var mT=o(up);fy=s(mT,"deep tiered stem (24, 48, 64), avgpool downsample (a modified \u2018D\u2019 variant)"),mT.forEach(t),hy=f(F0),vp=a(F0,"LI",{});var _T=o(vp);cy=s(_T,"stem sizing mods from Jeremy Howard and fastai devs discussing ResNet architecture experiments"),_T.forEach(t),F0.forEach(t),O0.forEach(t),Bn.forEach(t),vN.forEach(t),nT.forEach(t),Ju=f(l),Vt=a(l,"H3",{class:!0});var B0=o(Vt);nr=a(B0,"A",{id:!0,class:!0,href:!0});var wT=o(nr);mp=a(wT,"SPAN",{});var ET=o(mp);u(ci.$$.fragment,ET),ET.forEach(t),wT.forEach(t),py=f(B0),_p=a(B0,"SPAN",{});var gT=o(_p);uy=s(gT,"Dec 23, 2019"),gT.forEach(t),B0.forEach(t),Xu=f(l),dr=a(l,"UL",{});var H0=o(dr);wp=a(H0,"LI",{});var bT=o(wp);vy=s(bT,"Add RandAugment trained MixNet-XL weights with 80.48 top-1."),bT.forEach(t),my=f(H0),dn=a(H0,"LI",{});var mN=o(dn);Ep=a(mN,"CODE",{});var AT=o(Ep);_y=s(AT,"--dist-bn"),AT.forEach(t),wy=s(mN," argument added to train.py, will distribute BN stats between nodes after each train epoch, before eval"),mN.forEach(t),H0.forEach(t),qu=f(l),Ot=a(l,"H3",{class:!0});var j0=o(Ot);fr=a(j0,"A",{id:!0,class:!0,href:!0});var yT=o(fr);gp=a(yT,"SPAN",{});var NT=o(gp);u(pi.$$.fragment,NT),NT.forEach(t),yT.forEach(t),Ey=f(j0),bp=a(j0,"SPAN",{});var LT=o(bp);gy=s(LT,"Dec 4, 2019"),LT.forEach(t),j0.forEach(t),Ku=f(l),fn=a(l,"UL",{});var $T=o(fn);Ap=a($T,"LI",{});var kT=o(Ap);by=s(kT,"Added weights from the first training from scratch of an EfficientNet (B2) with my new RandAugment implementation. Much better than my previous B2 and very close to the official AdvProp ones (80.4 top-1, 95.08 top-5)."),kT.forEach(t),$T.forEach(t),Wu=f(l),Ft=a(l,"H3",{class:!0});var z0=o(Ft);hr=a(z0,"A",{id:!0,class:!0,href:!0});var IT=o(hr);yp=a(IT,"SPAN",{});var xT=o(yp);u(ui.$$.fragment,xT),xT.forEach(t),IT.forEach(t),Ay=f(z0),Np=a(z0,"SPAN",{});var ST=o(Np);yy=s(ST,"Nov 29, 2019"),ST.forEach(t),z0.forEach(t),Yu=f(l),C=a(l,"UL",{});var ge=o(C);cr=a(ge,"LI",{});var Zp=o(cr);Ny=s(Zp,"Brought EfficientNet and MobileNetV3 up to date with my "),vi=a(Zp,"A",{href:!0,rel:!0});var PT=o(vi);Ly=s(PT,"https://github.com/rwightman/gen-efficientnet-pytorch"),PT.forEach(t),$y=s(Zp," code. Torchscript and ONNX export compat excluded."),mi=a(Zp,"UL",{});var G0=o(mi);Lp=a(G0,"LI",{});var TT=o(Lp);ky=s(TT,"AdvProp weights added"),TT.forEach(t),Iy=f(G0),$p=a(G0,"LI",{});var DT=o($p);xy=s(DT,"Official TF MobileNetv3 weights added"),DT.forEach(t),G0.forEach(t),Zp.forEach(t),Sy=f(ge),kp=a(ge,"LI",{});var RT=o(kp);Py=s(RT,"EfficientNet and MobileNetV3 hook based \u2018feature extraction\u2019 classes added. Will serve as basis for using models as backbones in obj detection/segmentation tasks. Lots more to be done here\u2026"),RT.forEach(t),Ty=f(ge),hn=a(ge,"LI",{});var _N=o(hn);Dy=s(_N,"HRNet classification models and weights added from "),_i=a(_N,"A",{href:!0,rel:!0});var MT=o(_i);Ry=s(MT,"https://github.com/HRNet/HRNet-Image-Classification"),MT.forEach(t),_N.forEach(t),My=f(ge),ue=a(ge,"LI",{});var Ai=o(ue);Cy=s(Ai,"Consistency in global pooling, "),Ip=a(Ai,"CODE",{});var CT=o(Ip);Uy=s(CT,"reset_classifer"),CT.forEach(t),Vy=s(Ai,", and "),xp=a(Ai,"CODE",{});var UT=o(xp);Oy=s(UT,"forward_features"),UT.forEach(t),Fy=s(Ai," across models"),Sp=a(Ai,"UL",{});var VT=o(Sp);cn=a(VT,"LI",{});var wN=o(cn);Pp=a(wN,"CODE",{});var OT=o(Pp);By=s(OT,"forward_features"),OT.forEach(t),Hy=s(wN," always returns unpooled feature maps now"),wN.forEach(t),VT.forEach(t),Ai.forEach(t),jy=f(ge),Tp=a(ge,"LI",{});var FT=o(Tp);zy=s(FT,"Reasonable chance I broke something\u2026 let me know"),FT.forEach(t),ge.forEach(t),Qu=f(l),Bt=a(l,"H3",{class:!0});var J0=o(Bt);pr=a(J0,"A",{id:!0,class:!0,href:!0});var BT=o(pr);Dp=a(BT,"SPAN",{});var HT=o(Dp);u(wi.$$.fragment,HT),HT.forEach(t),BT.forEach(t),Gy=f(J0),Rp=a(J0,"SPAN",{});var jT=o(Rp);Jy=s(jT,"Nov 22, 2019"),jT.forEach(t),J0.forEach(t),Zu=f(l),ur=a(l,"UL",{});var X0=o(ur);Mp=a(X0,"LI",{});var zT=o(Mp);Xy=s(zT,"Add ImageNet training RandAugment implementation alongside AutoAugment. PyTorch Transform compatible format, using PIL. Currently training two EfficientNet models from scratch with promising results\u2026 will update."),zT.forEach(t),qy=f(X0),vr=a(X0,"LI",{});var e1=o(vr);Cp=a(e1,"CODE",{});var GT=o(Cp);Ky=s(GT,"drop-connect"),GT.forEach(t),Wy=s(e1," cmd line arg finally added to "),Up=a(e1,"CODE",{});var JT=o(Up);Yy=s(JT,"train.py"),JT.forEach(t),Qy=s(e1,", no need to hack model fns. Works for efficientnet/mobilenetv3 based models, ignored otherwise."),e1.forEach(t),X0.forEach(t),this.h()},h(){n(be,"name","hf:doc:metadata"),n(be,"content",JSON.stringify(eD)),n(Ht,"id","archived-changes"),n(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Ht,"href","#archived-changes"),n(Ae,"class","relative group"),n(jt,"id","july-12-2021"),n(jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(jt,"href","#july-12-2021"),n(ye,"class","relative group"),n(xr,"href","https://github.com/facebookresearch/xcit"),n(xr,"rel","nofollow"),n(Sr,"href","https://github.com/alexander-soare"),n(Sr,"rel","nofollow"),n(Gt,"id","july-59-2021"),n(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Gt,"href","#july-59-2021"),n(Ne,"class","relative group"),n(Tr,"href","https://arxiv.org/abs/2106.01548"),n(Tr,"rel","nofollow"),n(Dr,"href","https://github.com/google-research/nested-transformer"),n(Dr,"rel","nofollow"),n(Rr,"href","https://github.com/alexander-soare"),n(Rr,"rel","nofollow"),n(Xt,"id","june-23-2021"),n(Xt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Xt,"href","#june-23-2021"),n(Le,"class","relative group"),n(Cr,"href","https://arxiv.org/abs/2105.08050"),n(Cr,"rel","nofollow"),n(Ur,"href","https://gist.github.com/rwightman/d6c264a9001f9167e06c209f630b2cc6"),n(Ur,"rel","nofollow"),n(qt,"id","june-20-2021"),n(qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(qt,"href","#june-20-2021"),n($e,"class","relative group"),n(Fr,"href","https://arxiv.org/abs/2106.10270"),n(Fr,"rel","nofollow"),n(Br,"href","https://console.cloud.google.com/storage/browser/vit_models/augreg"),n(Br,"rel","nofollow"),n(Hr,"href","https://colab.research.google.com/github/google-research/vision_transformer/blob/master/vit_jax_augreg.ipynb"),n(Hr,"rel","nofollow"),n(jr,"href","https://github.com/google-research/vision_transformer/"),n(jr,"rel","nofollow"),n(Xr,"href","https://github.com/facebookresearch/deit"),n(Xr,"rel","nofollow"),n(Kr,"href","https://arxiv.org/abs/2106.05237"),n(Kr,"rel","nofollow"),n(Kt,"id","june-8-2021"),n(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Kt,"href","#june-8-2021"),n(Ie,"class","relative group"),n(Yt,"id","may-25-2021"),n(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Yt,"href","#may-25-2021"),n(xe,"class","relative group"),n(Qt,"id","may-14-2021"),n(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Qt,"href","#may-14-2021"),n(Se,"class","relative group"),n(la,"href","https://github.com/google/automl/tree/master/efficientnetv2"),n(la,"rel","nofollow"),n(ll,"id","may-5-2021"),n(ll,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(ll,"href","#may-5-2021"),n(Pe,"class","relative group"),n(oa,"href","https://github.com/google-research/vision_transformer/tree/linen"),n(oa,"rel","nofollow"),n(ia,"href","https://github.com/facebookresearch/deit"),n(ia,"rel","nofollow"),n(sa,"href","https://github.com/tensorflow/tpu/tree/master/models/official/resnet/resnet_rs"),n(sa,"rel","nofollow"),n(na,"href","https://github.com/amaarora"),n(na,"rel","nofollow"),n(da,"href","https://github.com/morizin"),n(da,"rel","nofollow"),n(fa,"href","https://github.com/mrT23"),n(fa,"rel","nofollow"),n(ha,"href","https://github.com/iamhankai"),n(ha,"rel","nofollow"),n(al,"id","april-13-2021"),n(al,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(al,"href","#april-13-2021"),n(De,"class","relative group"),n(pa,"href","https://github.com/microsoft/Swin-Transformer"),n(pa,"rel","nofollow"),n(ol,"id","april-12-2021"),n(ol,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(ol,"href","#april-12-2021"),n(Re,"class","relative group"),n(va,"href","https://arxiv.org/abs/2102.08602"),n(va,"rel","nofollow"),n(ma,"href","https://arxiv.org/abs/2101.11605"),n(ma,"rel","nofollow"),n(_a,"href","https://arxiv.org/abs/2103.12731"),n(_a,"rel","nofollow"),n(il,"id","april-1-2021"),n(il,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(il,"href","#april-1-2021"),n(Ce,"class","relative group"),n(Ea,"href","https://github.com/naver-ai/pit"),n(Ea,"rel","nofollow"),n(ya,"href","https://gitee.com/mindspore/mindspore/tree/master/model_zoo/research/cv/TNT"),n(ya,"rel","nofollow"),n(nl,"id","march-7-2021"),n(nl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(nl,"href","#march-7-2021"),n(Oe,"class","relative group"),n(fl,"id","feb-18-2021"),n(fl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(fl,"href","#feb-18-2021"),n(Fe,"class","relative group"),n($a,"href","https://github.com/deepmind/deepmind-research/tree/master/nfnets"),n($a,"rel","nofollow"),n(cl,"id","feb-16-2021"),n(cl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(cl,"href","#feb-16-2021"),n(Be,"class","relative group"),n(Sa,"href","https://arxiv.org/abs/2102.06171"),n(Sa,"rel","nofollow"),n(ul,"id","feb-12-2021"),n(ul,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(ul,"href","#feb-12-2021"),n(He,"class","relative group"),n(Da,"href","https://arxiv.org/abs/2102.06171"),n(Da,"rel","nofollow"),n(vl,"id","feb-10-2021"),n(vl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(vl,"href","#feb-10-2021"),n(je,"class","relative group"),n(Ma,"href","https://github.com/idstcv/GPU-Efficient-Networks"),n(Ma,"rel","nofollow"),n(Ca,"href","https://github.com/DingXiaoH/RepVGG"),n(Ca,"rel","nofollow"),n(wl,"id","feb-8-2021"),n(wl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(wl,"href","#feb-8-2021"),n(Je,"class","relative group"),n(El,"id","jan-30-2021"),n(El,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(El,"href","#jan-30-2021"),n(Ke,"class","relative group"),n(Fa,"href","https://arxiv.org/abs/2101.08692"),n(Fa,"rel","nofollow"),n(gl,"id","jan-25-2021"),n(gl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(gl,"href","#jan-25-2021"),n(We,"class","relative group"),n(Ha,"href","https://github.com/google-research/big_transfer"),n(Ha,"rel","nofollow"),n(ja,"href","https://github.com/google-research/vision_transformer"),n(ja,"rel","nofollow"),n(za,"href","https://github.com/facebookresearch/deit"),n(za,"rel","nofollow"),n(bl,"id","jan-3-2021"),n(bl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(bl,"href","#jan-3-2021"),n(Ye,"class","relative group"),n(yl,"id","dec-18-2020"),n(yl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(yl,"href","#dec-18-2020"),n(Qe,"class","relative group"),n(Nl,"id","dec-7-2020"),n(Nl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Nl,"href","#dec-7-2020"),n(et,"class","relative group"),n(Ll,"id","oct-30-2020"),n(Ll,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Ll,"href","#oct-30-2020"),n(tt,"class","relative group"),n($l,"id","oct-26-2020"),n($l,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n($l,"href","#oct-26-2020"),n(lt,"class","relative group"),n(Ya,"href","https://github.com/google-research/vision_transformer"),n(Ya,"rel","nofollow"),n(Il,"id","oct-21-2020"),n(Il,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Il,"href","#oct-21-2020"),n(rt,"class","relative group"),n(eo,"href","https://www.kaggle.com/christofhenkel"),n(eo,"rel","nofollow"),n(xl,"id","oct-13-2020"),n(xl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(xl,"href","#oct-13-2020"),n(at,"class","relative group"),n(Sl,"id","sept-18-2020"),n(Sl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Sl,"href","#sept-18-2020"),n(ot,"class","relative group"),n(Tl,"id","sept-3-2020"),n(Tl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Tl,"href","#sept-3-2020"),n(it,"class","relative group"),n(Dl,"id","aug-12-2020"),n(Dl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Dl,"href","#aug-12-2020"),n(st,"class","relative group"),n(no,"href","https://github.com/rwightman/pytorch-image-models/pull/218"),n(no,"rel","nofollow"),n(Rl,"id","aug-5-2020"),n(Rl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Rl,"href","#aug-5-2020"),n(dt,"class","relative group"),n(po,"href","https://github.com/hal-314"),n(po,"rel","nofollow"),n(Ms,"href","results/README.md"),n(uo,"href","https://github.com/KushajveerSingh"),n(uo,"rel","nofollow"),n(vo,"href","https://rwightman.github.io/pytorch-image-models/"),n(vo,"rel","nofollow"),n(mo,"href","https://github.com/hellbell"),n(mo,"rel","nofollow"),n(Ml,"id","june-11-2020"),n(Ml,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Ml,"href","#june-11-2020"),n(ct,"class","relative group"),n(Cl,"id","may-12-2020"),n(Cl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Cl,"href","#may-12-2020"),n(ut,"class","relative group"),n(Eo,"href","https://github.com/zhanghang1989/ResNeSt"),n(Eo,"rel","nofollow"),n(go,"href","https://arxiv.org/abs/2004.08955"),n(go,"rel","nofollow"),n(Ul,"id","may-3-2020"),n(Ul,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Ul,"href","#may-3-2020"),n(mt,"class","relative group"),n(Ao,"href","https://arxiv.org/abs/2002.08258"),n(Ao,"rel","nofollow"),n(yo,"href","https://github.com/yoniaflalo"),n(yo,"rel","nofollow"),n(Ol,"id","may-1-2020"),n(Ol,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Ol,"href","#may-1-2020"),n(_t,"class","relative group"),n($o,"href","https://github.com/VRandme"),n($o,"rel","nofollow"),n(ko,"href","https://github.com/mrT23"),n(ko,"rel","nofollow"),n(Io,"href","https://arxiv.org/abs/2002.08258"),n(Io,"rel","nofollow"),n(xo,"href","https://github.com/yoniaflalo"),n(xo,"rel","nofollow"),n(Hl,"id","april-5-2020"),n(Hl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Hl,"href","#april-5-2020"),n(Et,"class","relative group"),n(jl,"id","march-18-2020"),n(jl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(jl,"href","#march-18-2020"),n(gt,"class","relative group"),n(To,"href","https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/lite"),n(To,"rel","nofollow"),n(Ro,"href","https://github.com/andravin"),n(Ro,"rel","nofollow"),n(Gl,"id","april-5-2020"),n(Gl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Gl,"href","#april-5-2020"),n(bt,"class","relative group"),n(Jl,"id","march-18-2020"),n(Jl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Jl,"href","#march-18-2020"),n(At,"class","relative group"),n(Uo,"href","https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet/lite"),n(Uo,"rel","nofollow"),n(Oo,"href","https://github.com/andravin"),n(Oo,"rel","nofollow"),n(ql,"id","feb-29-2020"),n(ql,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(ql,"href","#feb-29-2020"),n(yt,"class","relative group"),n(Kl,"id","feb-18-2020"),n(Kl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Kl,"href","#feb-18-2020"),n($t,"class","relative group"),n(Ho,"href","https://arxiv.org/abs/2001.06268"),n(Ho,"rel","nofollow"),n(jo,"href","https://github.com/VRandme"),n(jo,"rel","nofollow"),n(Ql,"id","feb-12-2020"),n(Ql,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Ql,"href","#feb-12-2020"),n(xt,"class","relative group"),n(Jo,"href","https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet"),n(Jo,"rel","nofollow"),n(Zl,"id","feb-6-2020"),n(Zl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(Zl,"href","#feb-6-2020"),n(St,"class","relative group"),n(Ko,"href","https://github.com/andravin"),n(Ko,"rel","nofollow"),n(er,"id","feb-12-2020"),n(er,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(er,"href","#feb-12-2020"),n(Pt,"class","relative group"),n(tr,"id","jan-31-2020"),n(tr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(tr,"href","#jan-31-2020"),n(Tt,"class","relative group"),n(lr,"id","jan-1112-2020"),n(lr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(lr,"href","#jan-1112-2020"),n(Dt,"class","relative group"),n(rr,"id","jan-3-2020"),n(rr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(rr,"href","#jan-3-2020"),n(Rt,"class","relative group"),n(ti,"href","https://github.com/michaelklachko"),n(ti,"rel","nofollow"),n(or,"id","dec-30-2019"),n(or,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(or,"href","#dec-30-2019"),n(Mt,"class","relative group"),n(ai,"href","https://github.com/mehtadushy"),n(ai,"rel","nofollow"),n(oi,"href","https://github.com/mehtadushy/SelecSLS-Pytorch"),n(oi,"rel","nofollow"),n(sr,"id","dec-28-2019"),n(sr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(sr,"href","#dec-28-2019"),n(Ct,"class","relative group"),n(nr,"id","dec-23-2019"),n(nr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(nr,"href","#dec-23-2019"),n(Vt,"class","relative group"),n(fr,"id","dec-4-2019"),n(fr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(fr,"href","#dec-4-2019"),n(Ot,"class","relative group"),n(hr,"id","nov-29-2019"),n(hr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(hr,"href","#nov-29-2019"),n(Ft,"class","relative group"),n(vi,"href","https://github.com/rwightman/gen-efficientnet-pytorch"),n(vi,"rel","nofollow"),n(_i,"href","https://github.com/HRNet/HRNet-Image-Classification"),n(_i,"rel","nofollow"),n(pr,"id","nov-22-2019"),n(pr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(pr,"href","#nov-22-2019"),n(Bt,"class","relative group")},m(l,h){e(document.head,be),c(l,t1,h),c(l,Ae,h),e(Ae,Ht),e(Ht,Hn),v(kr,Hn,null),e(Ae,q0),e(Ae,jn),e(jn,K0),c(l,l1,h),c(l,ye,h),e(ye,jt),e(jt,zn),v(Ir,zn,null),e(ye,W0),e(ye,Gn),e(Gn,Y0),c(l,r1,h),c(l,yi,h),e(yi,zt),e(zt,Q0),e(zt,xr),e(xr,Z0),e(zt,em),e(zt,Sr),e(Sr,tm),c(l,a1,h),c(l,Ne,h),e(Ne,Gt),e(Gt,Jn),v(Pr,Jn,null),e(Ne,lm),e(Ne,Xn),e(Xn,rm),c(l,o1,h),c(l,re,h),e(re,Jt),e(Jt,am),e(Jt,qn),e(qn,om),e(Jt,im),e(Jt,Kn),e(Kn,Wn),e(Wn,sm),e(re,nm),e(re,K),e(K,dm),e(K,Tr),e(Tr,fm),e(K,hm),e(K,Yn),e(Yn,cm),e(K,pm),e(K,Qn),e(Qn,um),e(K,vm),e(re,mm),e(re,ae),e(ae,_m),e(ae,Dr),e(Dr,wm),e(ae,Em),e(ae,Rr),e(Rr,gm),e(ae,bm),e(ae,Zn),e(Zn,oe),e(oe,ed),e(ed,Am),e(oe,ym),e(oe,td),e(td,Nm),e(oe,Lm),e(oe,ld),e(ld,$m),e(oe,km),c(l,i1,h),c(l,Le,h),e(Le,Xt),e(Xt,rd),v(Mr,rd,null),e(Le,Im),e(Le,ad),e(ad,xm),c(l,s1,h),c(l,Ni,h),e(Ni,ie),e(ie,Sm),e(ie,od),e(od,Pm),e(ie,Tm),e(ie,Cr),e(Cr,Dm),e(ie,Rm),e(ie,Ur),e(Ur,Mm),c(l,n1,h),c(l,$e,h),e($e,qt),e(qt,id),v(Vr,id,null),e($e,Cm),e($e,sd),e(sd,Um),c(l,d1,h),c(l,g,h),e(g,Or),e(Or,Vm),e(Or,Fr),e(Fr,Om),e(Or,H),e(H,Li),e(Li,Fm),e(Li,Br),e(Br,Bm),e(H,Hm),e(H,ke),e(ke,jm),e(ke,Hr),e(Hr,zm),e(ke,Gm),e(ke,jr),e(jr,Jm),e(ke,Xm),e(H,qm),e(H,$i),e($i,Km),e($i,nd),e(nd,W),e(W,Wm),e(W,dd),e(dd,Ym),e(W,Qm),e(W,fd),e(fd,Zm),e(W,e3),e(W,hd),e(hd,t3),e(W,l3),e(H,r3),e(H,zr),e(zr,cd),e(cd,a3),e(zr,o3),e(zr,pd),e(pd,i3),e(H,s3),e(H,ud),e(ud,n3),e(g,d3),e(g,Gr),e(Gr,f3),e(Gr,vd),e(vd,h3),e(Gr,c3),e(g,p3),e(g,Jr),e(Jr,u3),e(Jr,Xr),e(Xr,v3),e(Jr,m3),e(g,_3),e(g,qr),e(qr,w3),e(qr,md),e(md,E3),e(qr,g3),e(g,b3),e(g,ki),e(ki,A3),e(ki,Kr),e(Kr,y3),e(g,N3),e(g,Ii),e(Ii,L3),e(Ii,Wr),e(Wr,_d),e(_d,$3),e(Wr,k3),e(Wr,wd),e(wd,I3),e(g,x3),e(g,Ed),e(Ed,S3),e(g,P3),e(g,gd),e(gd,T3),e(g,D3),e(g,bd),e(bd,R3),c(l,f1,h),c(l,Ie,h),e(Ie,Kt),e(Kt,Ad),v(Yr,Ad,null),e(Ie,M3),e(Ie,yd),e(yd,C3),c(l,h1,h),c(l,Wt,h),e(Wt,Nd),e(Nd,U3),e(Wt,V3),e(Wt,xi),e(xi,O3),e(xi,Qr),e(Qr,Ld),e(Ld,F3),e(Qr,B3),e(Qr,$d),e($d,H3),c(l,c1,h),c(l,xe,h),e(xe,Yt),e(Yt,kd),v(Zr,kd,null),e(xe,j3),e(xe,Id),e(Id,z3),c(l,p1,h),c(l,se,h),e(se,xd),e(xd,G3),e(se,J3),e(se,Sd),e(Sd,X3),e(se,q3),e(se,ea),e(ea,K3),e(ea,Pd),e(Pd,W3),e(ea,Y3),c(l,u1,h),c(l,Se,h),e(Se,Qt),e(Qt,Td),v(ta,Td,null),e(Se,Q3),e(Se,Dd),e(Dd,Z3),c(l,v1,h),c(l,Si,h),e(Si,Zt),e(Zt,e_),e(Zt,la),e(la,t_),e(Zt,l_),e(Zt,D),e(D,Pi),e(Pi,r_),e(Pi,Rd),e(Rd,a_),e(D,o_),e(D,Ti),e(Ti,i_),e(Ti,Md),e(Md,s_),e(D,n_),e(D,Di),e(Di,d_),e(Di,Cd),e(Cd,f_),e(D,h_),e(D,el),e(el,c_),e(el,Ud),e(Ud,p_),e(el,u_),e(el,Vd),e(Vd,v_),e(D,m_),e(D,tl),e(tl,__),e(tl,Od),e(Od,w_),e(tl,E_),e(tl,Fd),e(Fd,g_),e(D,b_),e(D,ra),e(ra,A_),e(ra,Bd),e(Bd,y_),e(ra,N_),c(l,m1,h),c(l,Pe,h),e(Pe,ll),e(ll,Hd),v(aa,Hd,null),e(Pe,L_),e(Pe,jd),e(jd,$_),c(l,_1,h),c(l,b,h),e(b,Ri),e(Ri,k_),e(Ri,oa),e(oa,I_),e(b,x_),e(b,Mi),e(Mi,S_),e(Mi,ia),e(ia,P_),e(b,T_),e(b,rl),e(rl,D_),e(rl,sa),e(sa,R_),e(rl,M_),e(rl,na),e(na,C_),e(b,U_),e(b,Ci),e(Ci,V_),e(Ci,da),e(da,O_),e(b,F_),e(b,Ui),e(Ui,B_),e(Ui,fa),e(fa,H_),e(b,j_),e(b,Vi),e(Vi,z_),e(Vi,ha),e(ha,G_),e(b,J_),e(b,Oi),e(Oi,X_),e(Oi,Te),e(Te,zd),e(zd,q_),e(Te,K_),e(Te,Fi),e(Fi,W_),e(Fi,Gd),e(Gd,Y_),e(Te,Q_),e(Te,Jd),e(Jd,Z_),e(b,e5),e(b,Xd),e(Xd,t5),e(b,l5),e(b,qd),e(qd,r5),c(l,w1,h),c(l,De,h),e(De,al),e(al,Kd),v(ca,Kd,null),e(De,a5),e(De,Wd),e(Wd,o5),c(l,E1,h),c(l,Bi,h),e(Bi,Hi),e(Hi,i5),e(Hi,pa),e(pa,s5),c(l,g1,h),c(l,Re,h),e(Re,ol),e(ol,Yd),v(ua,Yd,null),e(Re,n5),e(Re,Qd),e(Qd,d5),c(l,b1,h),c(l,G,h),e(G,Zd),e(Zd,f5),e(G,h5),e(G,ef),e(ef,c5),e(G,p5),e(G,ji),e(ji,u5),e(ji,Me),e(Me,zi),e(zi,v5),e(zi,va),e(va,m5),e(Me,_5),e(Me,Gi),e(Gi,w5),e(Gi,ma),e(ma,E5),e(Me,g5),e(Me,Ji),e(Ji,b5),e(Ji,_a),e(_a,A5),e(G,y5),e(G,tf),e(tf,N5),c(l,A1,h),c(l,Ce,h),e(Ce,il),e(il,lf),v(wa,lf,null),e(Ce,L5),e(Ce,rf),e(rf,$5),c(l,y1,h),c(l,N,h),e(N,Ue),e(Ue,k5),e(Ue,af),e(af,I5),e(Ue,x5),e(Ue,of),e(of,S5),e(Ue,P5),e(N,T5),e(N,sl),e(sl,D5),e(sl,Ea),e(Ea,R5),e(sl,M5),e(sl,ga),e(ga,sf),e(sf,C5),e(ga,U5),e(ga,ba),e(ba,V5),e(ba,nf),e(nf,O5),e(ba,F5),e(N,B5),e(N,Xi),e(Xi,H5),e(Xi,j),e(j,df),e(df,j5),e(j,z5),e(j,ff),e(ff,G5),e(j,J5),e(j,hf),e(hf,X5),e(j,q5),e(j,cf),e(cf,K5),e(j,W5),e(j,pf),e(pf,Y5),e(N,Q5),e(N,Aa),e(Aa,Z5),e(Aa,ya),e(ya,ew),e(Aa,tw),e(N,lw),e(N,uf),e(uf,rw),e(N,aw),e(N,Ve),e(Ve,ow),e(Ve,vf),e(vf,iw),e(Ve,sw),e(Ve,mf),e(mf,nw),e(Ve,dw),e(N,fw),e(N,_f),e(_f,hw),c(l,N1,h),c(l,Oe,h),e(Oe,nl),e(nl,wf),v(Na,wf,null),e(Oe,cw),e(Oe,Ef),e(Ef,pw),c(l,L1,h),c(l,dl,h),e(dl,gf),e(gf,uw),e(dl,vw),e(dl,bf),e(bf,mw),c(l,$1,h),c(l,Fe,h),e(Fe,fl),e(fl,Af),v(La,Af,null),e(Fe,_w),e(Fe,yf),e(yf,ww),c(l,k1,h),c(l,qi,h),e(qi,hl),e(hl,Ew),e(hl,$a),e($a,gw),e(hl,bw),e(hl,Y),e(Y,ka),e(ka,Aw),e(ka,Nf),e(Nf,yw),e(ka,Nw),e(Y,Lw),e(Y,Ia),e(Ia,$w),e(Ia,Lf),e(Lf,kw),e(Ia,Iw),e(Y,xw),e(Y,$f),e($f,Sw),e(Y,Pw),e(Y,Ki),e(Ki,Tw),e(Ki,I),e(I,Wi),e(Wi,kf),e(kf,Dw),e(Wi,Rw),e(I,Mw),e(I,Yi),e(Yi,If),e(If,Cw),e(Yi,Uw),e(I,Vw),e(I,Qi),e(Qi,xf),e(xf,Ow),e(Qi,Fw),e(I,Bw),e(I,Zi),e(Zi,Sf),e(Sf,Hw),e(Zi,jw),e(I,zw),e(I,es),e(es,Pf),e(Pf,Gw),e(es,Jw),e(I,Xw),e(I,ts),e(ts,Tf),e(Tf,qw),e(ts,Kw),e(I,Ww),e(I,ls),e(ls,Df),e(Df,Yw),e(ls,Qw),c(l,I1,h),c(l,Be,h),e(Be,cl),e(cl,Rf),v(xa,Rf,null),e(Be,Zw),e(Be,Mf),e(Mf,eE),c(l,x1,h),c(l,rs,h),e(rs,pl),e(pl,tE),e(pl,Sa),e(Sa,lE),e(pl,rE),e(pl,Q),e(Q,as),e(as,aE),e(as,Cf),e(Cf,oE),e(Q,iE),e(Q,os),e(os,sE),e(os,Uf),e(Uf,nE),e(Q,dE),e(Q,is),e(is,fE),e(is,Vf),e(Vf,hE),e(Q,cE),e(Q,Of),e(Of,pE),c(l,S1,h),c(l,He,h),e(He,ul),e(ul,Ff),v(Pa,Ff,null),e(He,uE),e(He,Bf),e(Bf,vE),c(l,P1,h),c(l,ss,h),e(ss,Ta),e(Ta,mE),e(Ta,Da),e(Da,_E),e(Ta,wE),c(l,T1,h),c(l,je,h),e(je,vl),e(vl,Hf),v(Ra,Hf,null),e(je,EE),e(je,jf),e(jf,gE),c(l,D1,h),c(l,J,h),e(J,ns),e(ns,bE),e(ns,ze),e(ze,ml),e(ml,AE),e(ml,Ma),e(Ma,yE),e(ml,NE),e(ml,zf),e(zf,LE),e(ze,$E),e(ze,_l),e(_l,kE),e(_l,Ca),e(Ca,IE),e(_l,xE),e(_l,Gf),e(Gf,SE),e(ze,PE),e(ze,Ua),e(Ua,TE),e(Ua,Jf),e(Jf,DE),e(Ua,RE),e(J,ME),e(J,Xf),e(Xf,CE),e(J,UE),e(J,Ge),e(Ge,VE),e(Ge,qf),e(qf,OE),e(Ge,FE),e(Ge,Kf),e(Kf,BE),e(Ge,HE),e(J,jE),e(J,Wf),e(Wf,zE),c(l,R1,h),c(l,Je,h),e(Je,wl),e(wl,Yf),v(Va,Yf,null),e(Je,GE),e(Je,Qf),e(Qf,JE),c(l,M1,h),c(l,ne,h),e(ne,ds),e(ds,XE),e(ds,Xe),e(Xe,fs),e(fs,Zf),e(Zf,qE),e(fs,KE),e(Xe,WE),e(Xe,hs),e(hs,eh),e(eh,YE),e(hs,QE),e(Xe,ZE),e(Xe,cs),e(cs,th),e(th,eg),e(cs,tg),e(ne,lg),e(ne,x),e(x,rg),e(x,lh),e(lh,ag),e(x,og),e(x,rh),e(rh,ig),e(x,sg),e(x,ah),e(ah,ng),e(x,dg),e(x,oh),e(oh,fg),e(x,hg),e(x,ih),e(ih,cg),e(x,pg),e(x,sh),e(sh,ug),e(x,vg),e(ne,mg),e(ne,qe),e(qe,_g),e(qe,nh),e(nh,wg),e(qe,Eg),e(qe,dh),e(dh,gg),e(qe,bg),c(l,C1,h),c(l,Ke,h),e(Ke,El),e(El,fh),v(Oa,fh,null),e(Ke,Ag),e(Ke,hh),e(hh,yg),c(l,U1,h),c(l,ps,h),e(ps,us),e(us,Ng),e(us,Fa),e(Fa,Lg),c(l,V1,h),c(l,We,h),e(We,gl),e(gl,ch),v(Ba,ch,null),e(We,$g),e(We,ph),e(ph,kg),c(l,O1,h),c(l,A,h),e(A,vs),e(vs,Ig),e(vs,Ha),e(Ha,xg),e(A,Sg),e(A,ms),e(ms,Pg),e(ms,ja),e(ja,Tg),e(A,Dg),e(A,_s),e(_s,Rg),e(_s,uh),e(uh,vh),e(vh,Mg),e(A,Cg),e(A,ws),e(ws,Ug),e(ws,za),e(za,Vg),e(A,Og),e(A,mh),e(mh,Fg),e(A,Bg),e(A,Es),e(Es,Hg),e(Es,_h),e(_h,gs),e(gs,jg),e(gs,wh),e(wh,zg),e(A,Gg),e(A,bs),e(bs,Jg),e(bs,Eh),e(Eh,As),e(As,Xg),e(As,gh),e(gh,qg),e(A,Kg),e(A,bh),e(bh,Wg),c(l,F1,h),c(l,Ye,h),e(Ye,bl),e(bl,Ah),v(Ga,Ah,null),e(Ye,Yg),e(Ye,yh),e(yh,Qg),c(l,B1,h),c(l,Al,h),e(Al,ys),e(ys,Zg),e(ys,Ja),e(Ja,Nh),e(Nh,e8),e(Ja,t8),e(Ja,Lh),e(Lh,l8),e(Al,r8),e(Al,$h),e($h,a8),c(l,H1,h),c(l,Qe,h),e(Qe,yl),e(yl,kh),v(Xa,kh,null),e(Qe,o8),e(Qe,Ih),e(Ih,i8),c(l,j1,h),c(l,Ns,h),e(Ns,Ls),e(Ls,s8),e(Ls,Ze),e(Ze,xh),e(xh,n8),e(Ze,d8),e(Ze,Sh),e(Sh,f8),e(Ze,h8),e(Ze,Ph),e(Ph,c8),c(l,z1,h),c(l,et,h),e(et,Nl),e(Nl,Th),v(qa,Th,null),e(et,p8),e(et,Dh),e(Dh,u8),c(l,G1,h),c(l,de,h),e(de,Rh),e(Rh,v8),e(de,m8),e(de,Mh),e(Mh,_8),e(de,w8),e(de,Ch),e(Ch,E8),c(l,J1,h),c(l,tt,h),e(tt,Ll),e(Ll,Uh),v(Ka,Uh,null),e(tt,g8),e(tt,Vh),e(Vh,b8),c(l,X1,h),c(l,R,h),e(R,Oh),e(Oh,A8),e(R,y8),e(R,Fh),e(Fh,N8),e(R,L8),e(R,Bh),e(Bh,$8),e(R,k8),e(R,Hh),e(Hh,I8),e(R,x8),e(R,jh),e(jh,S8),c(l,q1,h),c(l,lt,h),e(lt,$l),e($l,zh),v(Wa,zh,null),e(lt,P8),e(lt,Gh),e(Gh,T8),c(l,K1,h),c(l,kl,h),e(kl,$s),e($s,D8),e($s,Ya),e(Ya,R8),e(kl,M8),e(kl,ks),e(ks,C8),e(ks,Z),e(Z,Jh),e(Jh,U8),e(Z,V8),e(Z,Xh),e(Xh,O8),e(Z,F8),e(Z,qh),e(qh,B8),e(Z,H8),e(Z,Kh),e(Kh,j8),c(l,W1,h),c(l,rt,h),e(rt,Il),e(Il,Wh),v(Qa,Wh,null),e(rt,z8),e(rt,Yh),e(Yh,G8),c(l,Y1,h),c(l,Is,h),e(Is,Za),e(Za,J8),e(Za,eo),e(eo,X8),e(Za,q8),c(l,Q1,h),c(l,at,h),e(at,xl),e(xl,Qh),v(to,Qh,null),e(at,K8),e(at,Zh),e(Zh,W8),c(l,Z1,h),c(l,X,h),e(X,ec),e(ec,Y8),e(X,Q8),e(X,tc),e(tc,Z8),e(X,e4),e(X,lo),e(lo,t4),e(lo,lc),e(lc,l4),e(lo,r4),e(X,a4),e(X,rc),e(rc,o4),c(l,eu,h),c(l,ot,h),e(ot,Sl),e(Sl,ac),v(ro,ac,null),e(ot,i4),e(ot,oc),e(oc,s4),c(l,tu,h),c(l,Pl,h),e(Pl,ic),e(ic,n4),e(Pl,d4),e(Pl,sc),e(sc,f4),c(l,lu,h),c(l,it,h),e(it,Tl),e(Tl,nc),v(ao,nc,null),e(it,h4),e(it,dc),e(dc,c4),c(l,ru,h),c(l,fe,h),e(fe,xs),e(xs,p4),e(xs,oo),e(oo,fc),e(fc,u4),e(oo,v4),e(oo,hc),e(hc,m4),e(fe,_4),e(fe,ee),e(ee,w4),e(ee,cc),e(cc,E4),e(ee,g4),e(ee,pc),e(pc,b4),e(ee,A4),e(ee,uc),e(uc,y4),e(ee,N4),e(fe,L4),e(fe,vc),e(vc,$4),c(l,au,h),c(l,st,h),e(st,Dl),e(Dl,mc),v(io,mc,null),e(st,k4),e(st,_c),e(_c,I4),c(l,ou,h),c(l,he,h),e(he,Ss),e(Ss,x4),e(Ss,nt),e(nt,wc),e(wc,S4),e(nt,P4),e(nt,Ec),e(Ec,T4),e(nt,D4),e(nt,gc),e(gc,R4),e(he,M4),e(he,so),e(so,C4),e(so,no),e(no,U4),e(so,V4),e(he,O4),e(he,fo),e(fo,F4),e(fo,bc),e(bc,B4),e(fo,H4),c(l,iu,h),c(l,dt,h),e(dt,Rl),e(Rl,Ac),v(ho,Ac,null),e(dt,j4),e(dt,yc),e(yc,z4),c(l,su,h),c(l,Ps,h),e(Ps,G4),c(l,nu,h),c(l,y,h),e(y,ft),e(ft,J4),e(ft,Nc),e(Nc,X4),e(ft,q4),e(ft,Lc),e(Lc,K4),e(ft,W4),e(y,Y4),e(y,Ts),e(Ts,Q4),e(Ts,ht),e(ht,$c),e($c,Z4),e(ht,e6),e(ht,kc),e(kc,t6),e(ht,l6),e(ht,Ic),e(Ic,r6),e(y,a6),e(y,Ds),e(Ds,o6),e(Ds,z),e(z,xc),e(xc,i6),e(z,s6),e(z,Sc),e(Sc,n6),e(z,d6),e(z,Pc),e(Pc,f6),e(z,h6),e(z,Tc),e(Tc,c6),e(z,p6),e(z,co),e(co,u6),e(co,po),e(po,v6),e(co,m6),e(y,_6),e(y,Rs),e(Rs,w6),e(Rs,Ms),e(Ms,Dc),e(Dc,E6),e(y,g6),e(y,Cs),e(Cs,b6),e(Cs,uo),e(uo,A6),e(y,y6),e(y,Rc),e(Rc,N6),e(y,L6),e(y,Us),e(Us,$6),e(Us,vo),e(vo,k6),e(y,I6),e(y,Vs),e(Vs,x6),e(Vs,mo),e(mo,S6),c(l,du,h),c(l,ct,h),e(ct,Ml),e(Ml,Mc),v(_o,Mc,null),e(ct,P6),e(ct,Cc),e(Cc,T6),c(l,fu,h),c(l,Os,h),e(Os,D6),c(l,hu,h),c(l,L,h),e(L,Uc),e(Uc,R6),e(L,M6),e(L,Vc),e(Vc,C6),e(L,U6),e(L,Fs),e(Fs,V6),e(Fs,pt),e(pt,Oc),e(Oc,O6),e(pt,F6),e(pt,Fc),e(Fc,B6),e(pt,H6),e(pt,Bc),e(Bc,j6),e(L,z6),e(L,Hc),e(Hc,G6),e(L,J6),e(L,jc),e(jc,X6),e(L,q6),e(L,zc),e(zc,K6),e(L,W6),e(L,Gc),e(Gc,Y6),c(l,cu,h),c(l,ut,h),e(ut,Cl),e(Cl,Jc),v(wo,Jc,null),e(ut,Q6),e(ut,Xc),e(Xc,Z6),c(l,pu,h),c(l,Bs,h),e(Bs,vt),e(vt,e7),e(vt,Eo),e(Eo,t7),e(vt,l7),e(vt,go),e(go,r7),e(vt,a7),c(l,uu,h),c(l,mt,h),e(mt,Ul),e(Ul,qc),v(bo,qc,null),e(mt,o7),e(mt,Kc),e(Kc,i7),c(l,vu,h),c(l,Hs,h),e(Hs,Vl),e(Vl,s7),e(Vl,Ao),e(Ao,n7),e(Vl,d7),e(Vl,yo),e(yo,f7),c(l,mu,h),c(l,_t,h),e(_t,Ol),e(Ol,Wc),v(No,Wc,null),e(_t,h7),e(_t,Yc),e(Yc,c7),c(l,_u,h),c(l,Fl,h),e(Fl,js),e(js,p7),e(js,wt),e(wt,Lo),e(Lo,u7),e(Lo,$o),e($o,v7),e(Lo,m7),e(wt,_7),e(wt,zs),e(zs,w7),e(zs,ko),e(ko,E7),e(wt,g7),e(wt,Bl),e(Bl,b7),e(Bl,Io),e(Io,A7),e(Bl,y7),e(Bl,xo),e(xo,N7),e(Fl,L7),e(Fl,Qc),e(Qc,$7),c(l,wu,h),c(l,Et,h),e(Et,Hl),e(Hl,Zc),v(So,Zc,null),e(Et,k7),e(Et,e2),e(e2,I7),c(l,Eu,h),c(l,Gs,h),e(Gs,Js),e(Js,x7),e(Js,te),e(te,t2),e(t2,S7),e(te,P7),e(te,l2),e(l2,T7),e(te,D7),e(te,r2),e(r2,R7),e(te,M7),e(te,a2),e(a2,C7),c(l,gu,h),c(l,gt,h),e(gt,jl),e(jl,o2),v(Po,o2,null),e(gt,U7),e(gt,i2),e(i2,V7),c(l,bu,h),c(l,zl,h),e(zl,Xs),e(Xs,O7),e(Xs,To),e(To,F7),e(zl,B7),e(zl,Do),e(Do,H7),e(Do,Ro),e(Ro,j7),e(Do,z7),c(l,Au,h),c(l,bt,h),e(bt,Gl),e(Gl,s2),v(Mo,s2,null),e(bt,G7),e(bt,n2),e(n2,J7),c(l,yu,h),c(l,qs,h),e(qs,Ks),e(Ks,X7),e(Ks,le),e(le,d2),e(d2,q7),e(le,K7),e(le,f2),e(f2,W7),e(le,Y7),e(le,h2),e(h2,Q7),e(le,Z7),e(le,c2),e(c2,eb),c(l,Nu,h),c(l,At,h),e(At,Jl),e(Jl,p2),v(Co,p2,null),e(At,tb),e(At,u2),e(u2,lb),c(l,Lu,h),c(l,Xl,h),e(Xl,Ws),e(Ws,rb),e(Ws,Uo),e(Uo,ab),e(Xl,ob),e(Xl,Vo),e(Vo,ib),e(Vo,Oo),e(Oo,sb),e(Vo,nb),c(l,$u,h),c(l,yt,h),e(yt,ql),e(ql,v2),v(Fo,v2,null),e(yt,db),e(yt,m2),e(m2,fb),c(l,ku,h),c(l,ce,h),e(ce,_2),e(_2,hb),e(ce,cb),e(ce,Ys),e(Ys,pb),e(Ys,Nt),e(Nt,w2),e(w2,ub),e(Nt,vb),e(Nt,E2),e(E2,mb),e(Nt,_b),e(Nt,Lt),e(Lt,wb),e(Lt,g2),e(g2,Eb),e(Lt,gb),e(Lt,b2),e(b2,bb),e(Lt,Ab),e(ce,yb),e(ce,A2),e(A2,Nb),c(l,Iu,h),c(l,$t,h),e($t,Kl),e(Kl,y2),v(Bo,y2,null),e($t,Lb),e($t,N2),e(N2,$b),c(l,xu,h),c(l,Wl,h),e(Wl,Yl),e(Yl,kb),e(Yl,Ho),e(Ho,Ib),e(Yl,xb),e(Yl,S),e(S,kt),e(kt,Sb),e(kt,L2),e(L2,Pb),e(kt,Tb),e(kt,$2),e($2,Db),e(kt,Rb),e(S,Mb),e(S,k2),e(k2,Cb),e(S,Ub),e(S,Qs),e(Qs,Vb),e(Qs,It),e(It,I2),e(I2,Ob),e(It,Fb),e(It,x2),e(x2,Bb),e(It,Hb),e(It,S2),e(S2,jb),e(S,zb),e(S,Zs),e(Zs,Gb),e(Zs,jo),e(jo,Jb),e(S,Xb),e(S,P2),e(P2,qb),e(S,Kb),e(S,zo),e(zo,Wb),e(zo,T2),e(T2,Yb),e(zo,Qb),e(S,Zb),e(S,D2),e(D2,eA),e(Wl,tA),e(Wl,R2),e(R2,lA),c(l,Su,h),c(l,xt,h),e(xt,Ql),e(Ql,M2),v(Go,M2,null),e(xt,rA),e(xt,C2),e(C2,aA),c(l,Pu,h),c(l,en,h),e(en,tn),e(tn,oA),e(tn,Jo),e(Jo,iA),c(l,Tu,h),c(l,St,h),e(St,Zl),e(Zl,U2),v(Xo,U2,null),e(St,sA),e(St,V2),e(V2,nA),c(l,Du,h),c(l,ln,h),e(ln,qo),e(qo,dA),e(qo,Ko),e(Ko,fA),e(qo,hA),c(l,Ru,h),c(l,Pt,h),e(Pt,er),e(er,O2),v(Wo,O2,null),e(Pt,cA),e(Pt,F2),e(F2,pA),c(l,Mu,h),c(l,pe,h),e(pe,B2),e(B2,uA),e(pe,vA),e(pe,H2),e(H2,mA),e(pe,_A),e(pe,j2),e(j2,wA),c(l,Cu,h),c(l,Tt,h),e(Tt,tr),e(tr,z2),v(Yo,z2,null),e(Tt,EA),e(Tt,G2),e(G2,gA),c(l,Uu,h),c(l,rn,h),e(rn,J2),e(J2,bA),c(l,Vu,h),c(l,Dt,h),e(Dt,lr),e(lr,X2),v(Qo,X2,null),e(Dt,AA),e(Dt,q2),e(q2,yA),c(l,Ou,h),c(l,M,h),e(M,K2),e(K2,NA),e(M,LA),e(M,W2),e(W2,$A),e(M,kA),e(M,Y2),e(Y2,IA),e(M,xA),e(M,Q2),e(Q2,SA),e(M,PA),e(M,an),e(an,Z2),e(Z2,TA),e(an,DA),c(l,Fu,h),c(l,Rt,h),e(Rt,rr),e(rr,ep),v(Zo,ep,null),e(Rt,RA),e(Rt,tp),e(tp,MA),c(l,Bu,h),c(l,ar,h),e(ar,ei),e(ei,CA),e(ei,ti),e(ti,UA),e(ei,VA),e(ar,OA),e(ar,li),e(li,FA),e(li,lp),e(lp,BA),e(li,HA),c(l,Hu,h),c(l,Mt,h),e(Mt,or),e(or,rp),v(ri,rp,null),e(Mt,jA),e(Mt,ap),e(ap,zA),c(l,ju,h),c(l,on,h),e(on,ir),e(ir,GA),e(ir,ai),e(ai,JA),e(ir,XA),e(ir,oi),e(oi,qA),c(l,zu,h),c(l,Ct,h),e(Ct,sr),e(sr,op),v(ii,op,null),e(Ct,KA),e(Ct,ip),e(ip,WA),c(l,Gu,h),c(l,sn,h),e(sn,nn),e(nn,YA),e(nn,Ut),e(Ut,si),e(si,sp),e(sp,QA),e(si,ZA),e(si,np),e(np,dp),e(dp,ey),e(Ut,ty),e(Ut,ni),e(ni,fp),e(fp,ly),e(ni,ry),e(ni,di),e(di,hp),e(hp,ay),e(di,oy),e(di,cp),e(cp,iy),e(Ut,sy),e(Ut,fi),e(fi,pp),e(pp,ny),e(fi,dy),e(fi,hi),e(hi,up),e(up,fy),e(hi,hy),e(hi,vp),e(vp,cy),c(l,Ju,h),c(l,Vt,h),e(Vt,nr),e(nr,mp),v(ci,mp,null),e(Vt,py),e(Vt,_p),e(_p,uy),c(l,Xu,h),c(l,dr,h),e(dr,wp),e(wp,vy),e(dr,my),e(dr,dn),e(dn,Ep),e(Ep,_y),e(dn,wy),c(l,qu,h),c(l,Ot,h),e(Ot,fr),e(fr,gp),v(pi,gp,null),e(Ot,Ey),e(Ot,bp),e(bp,gy),c(l,Ku,h),c(l,fn,h),e(fn,Ap),e(Ap,by),c(l,Wu,h),c(l,Ft,h),e(Ft,hr),e(hr,yp),v(ui,yp,null),e(Ft,Ay),e(Ft,Np),e(Np,yy),c(l,Yu,h),c(l,C,h),e(C,cr),e(cr,Ny),e(cr,vi),e(vi,Ly),e(cr,$y),e(cr,mi),e(mi,Lp),e(Lp,ky),e(mi,Iy),e(mi,$p),e($p,xy),e(C,Sy),e(C,kp),e(kp,Py),e(C,Ty),e(C,hn),e(hn,Dy),e(hn,_i),e(_i,Ry),e(C,My),e(C,ue),e(ue,Cy),e(ue,Ip),e(Ip,Uy),e(ue,Vy),e(ue,xp),e(xp,Oy),e(ue,Fy),e(ue,Sp),e(Sp,cn),e(cn,Pp),e(Pp,By),e(cn,Hy),e(C,jy),e(C,Tp),e(Tp,zy),c(l,Qu,h),c(l,Bt,h),e(Bt,pr),e(pr,Dp),v(wi,Dp,null),e(Bt,Gy),e(Bt,Rp),e(Rp,Jy),c(l,Zu,h),c(l,ur,h),e(ur,Mp),e(Mp,Xy),e(ur,qy),e(ur,vr),e(vr,Cp),e(Cp,Ky),e(vr,Wy),e(vr,Up),e(Up,Yy),e(vr,Qy),ev=!0},p:YT,i(l){ev||(m(kr.$$.fragment,l),m(Ir.$$.fragment,l),m(Pr.$$.fragment,l),m(Mr.$$.fragment,l),m(Vr.$$.fragment,l),m(Yr.$$.fragment,l),m(Zr.$$.fragment,l),m(ta.$$.fragment,l),m(aa.$$.fragment,l),m(ca.$$.fragment,l),m(ua.$$.fragment,l),m(wa.$$.fragment,l),m(Na.$$.fragment,l),m(La.$$.fragment,l),m(xa.$$.fragment,l),m(Pa.$$.fragment,l),m(Ra.$$.fragment,l),m(Va.$$.fragment,l),m(Oa.$$.fragment,l),m(Ba.$$.fragment,l),m(Ga.$$.fragment,l),m(Xa.$$.fragment,l),m(qa.$$.fragment,l),m(Ka.$$.fragment,l),m(Wa.$$.fragment,l),m(Qa.$$.fragment,l),m(to.$$.fragment,l),m(ro.$$.fragment,l),m(ao.$$.fragment,l),m(io.$$.fragment,l),m(ho.$$.fragment,l),m(_o.$$.fragment,l),m(wo.$$.fragment,l),m(bo.$$.fragment,l),m(No.$$.fragment,l),m(So.$$.fragment,l),m(Po.$$.fragment,l),m(Mo.$$.fragment,l),m(Co.$$.fragment,l),m(Fo.$$.fragment,l),m(Bo.$$.fragment,l),m(Go.$$.fragment,l),m(Xo.$$.fragment,l),m(Wo.$$.fragment,l),m(Yo.$$.fragment,l),m(Qo.$$.fragment,l),m(Zo.$$.fragment,l),m(ri.$$.fragment,l),m(ii.$$.fragment,l),m(ci.$$.fragment,l),m(pi.$$.fragment,l),m(ui.$$.fragment,l),m(wi.$$.fragment,l),ev=!0)},o(l){_(kr.$$.fragment,l),_(Ir.$$.fragment,l),_(Pr.$$.fragment,l),_(Mr.$$.fragment,l),_(Vr.$$.fragment,l),_(Yr.$$.fragment,l),_(Zr.$$.fragment,l),_(ta.$$.fragment,l),_(aa.$$.fragment,l),_(ca.$$.fragment,l),_(ua.$$.fragment,l),_(wa.$$.fragment,l),_(Na.$$.fragment,l),_(La.$$.fragment,l),_(xa.$$.fragment,l),_(Pa.$$.fragment,l),_(Ra.$$.fragment,l),_(Va.$$.fragment,l),_(Oa.$$.fragment,l),_(Ba.$$.fragment,l),_(Ga.$$.fragment,l),_(Xa.$$.fragment,l),_(qa.$$.fragment,l),_(Ka.$$.fragment,l),_(Wa.$$.fragment,l),_(Qa.$$.fragment,l),_(to.$$.fragment,l),_(ro.$$.fragment,l),_(ao.$$.fragment,l),_(io.$$.fragment,l),_(ho.$$.fragment,l),_(_o.$$.fragment,l),_(wo.$$.fragment,l),_(bo.$$.fragment,l),_(No.$$.fragment,l),_(So.$$.fragment,l),_(Po.$$.fragment,l),_(Mo.$$.fragment,l),_(Co.$$.fragment,l),_(Fo.$$.fragment,l),_(Bo.$$.fragment,l),_(Go.$$.fragment,l),_(Xo.$$.fragment,l),_(Wo.$$.fragment,l),_(Yo.$$.fragment,l),_(Qo.$$.fragment,l),_(Zo.$$.fragment,l),_(ri.$$.fragment,l),_(ii.$$.fragment,l),_(ci.$$.fragment,l),_(pi.$$.fragment,l),_(ui.$$.fragment,l),_(wi.$$.fragment,l),ev=!1},d(l){t(be),l&&t(t1),l&&t(Ae),w(kr),l&&t(l1),l&&t(ye),w(Ir),l&&t(r1),l&&t(yi),l&&t(a1),l&&t(Ne),w(Pr),l&&t(o1),l&&t(re),l&&t(i1),l&&t(Le),w(Mr),l&&t(s1),l&&t(Ni),l&&t(n1),l&&t($e),w(Vr),l&&t(d1),l&&t(g),l&&t(f1),l&&t(Ie),w(Yr),l&&t(h1),l&&t(Wt),l&&t(c1),l&&t(xe),w(Zr),l&&t(p1),l&&t(se),l&&t(u1),l&&t(Se),w(ta),l&&t(v1),l&&t(Si),l&&t(m1),l&&t(Pe),w(aa),l&&t(_1),l&&t(b),l&&t(w1),l&&t(De),w(ca),l&&t(E1),l&&t(Bi),l&&t(g1),l&&t(Re),w(ua),l&&t(b1),l&&t(G),l&&t(A1),l&&t(Ce),w(wa),l&&t(y1),l&&t(N),l&&t(N1),l&&t(Oe),w(Na),l&&t(L1),l&&t(dl),l&&t($1),l&&t(Fe),w(La),l&&t(k1),l&&t(qi),l&&t(I1),l&&t(Be),w(xa),l&&t(x1),l&&t(rs),l&&t(S1),l&&t(He),w(Pa),l&&t(P1),l&&t(ss),l&&t(T1),l&&t(je),w(Ra),l&&t(D1),l&&t(J),l&&t(R1),l&&t(Je),w(Va),l&&t(M1),l&&t(ne),l&&t(C1),l&&t(Ke),w(Oa),l&&t(U1),l&&t(ps),l&&t(V1),l&&t(We),w(Ba),l&&t(O1),l&&t(A),l&&t(F1),l&&t(Ye),w(Ga),l&&t(B1),l&&t(Al),l&&t(H1),l&&t(Qe),w(Xa),l&&t(j1),l&&t(Ns),l&&t(z1),l&&t(et),w(qa),l&&t(G1),l&&t(de),l&&t(J1),l&&t(tt),w(Ka),l&&t(X1),l&&t(R),l&&t(q1),l&&t(lt),w(Wa),l&&t(K1),l&&t(kl),l&&t(W1),l&&t(rt),w(Qa),l&&t(Y1),l&&t(Is),l&&t(Q1),l&&t(at),w(to),l&&t(Z1),l&&t(X),l&&t(eu),l&&t(ot),w(ro),l&&t(tu),l&&t(Pl),l&&t(lu),l&&t(it),w(ao),l&&t(ru),l&&t(fe),l&&t(au),l&&t(st),w(io),l&&t(ou),l&&t(he),l&&t(iu),l&&t(dt),w(ho),l&&t(su),l&&t(Ps),l&&t(nu),l&&t(y),l&&t(du),l&&t(ct),w(_o),l&&t(fu),l&&t(Os),l&&t(hu),l&&t(L),l&&t(cu),l&&t(ut),w(wo),l&&t(pu),l&&t(Bs),l&&t(uu),l&&t(mt),w(bo),l&&t(vu),l&&t(Hs),l&&t(mu),l&&t(_t),w(No),l&&t(_u),l&&t(Fl),l&&t(wu),l&&t(Et),w(So),l&&t(Eu),l&&t(Gs),l&&t(gu),l&&t(gt),w(Po),l&&t(bu),l&&t(zl),l&&t(Au),l&&t(bt),w(Mo),l&&t(yu),l&&t(qs),l&&t(Nu),l&&t(At),w(Co),l&&t(Lu),l&&t(Xl),l&&t($u),l&&t(yt),w(Fo),l&&t(ku),l&&t(ce),l&&t(Iu),l&&t($t),w(Bo),l&&t(xu),l&&t(Wl),l&&t(Su),l&&t(xt),w(Go),l&&t(Pu),l&&t(en),l&&t(Tu),l&&t(St),w(Xo),l&&t(Du),l&&t(ln),l&&t(Ru),l&&t(Pt),w(Wo),l&&t(Mu),l&&t(pe),l&&t(Cu),l&&t(Tt),w(Yo),l&&t(Uu),l&&t(rn),l&&t(Vu),l&&t(Dt),w(Qo),l&&t(Ou),l&&t(M),l&&t(Fu),l&&t(Rt),w(Zo),l&&t(Bu),l&&t(ar),l&&t(Hu),l&&t(Mt),w(ri),l&&t(ju),l&&t(on),l&&t(zu),l&&t(Ct),w(ii),l&&t(Gu),l&&t(sn),l&&t(Ju),l&&t(Vt),w(ci),l&&t(Xu),l&&t(dr),l&&t(qu),l&&t(Ot),w(pi),l&&t(Ku),l&&t(fn),l&&t(Wu),l&&t(Ft),w(ui),l&&t(Yu),l&&t(C),l&&t(Qu),l&&t(Bt),w(wi),l&&t(Zu),l&&t(ur)}}}const eD={local:"archived-changes",sections:[{local:"july-12-2021",title:"July 12, 2021"},{local:"july-59-2021",title:"July 5-9, 2021"},{local:"june-23-2021",title:"June 23, 2021"},{local:"june-20-2021",title:"June 20, 2021"},{local:"june-8-2021",title:"June 8, 2021"},{local:"may-25-2021",title:"May 25, 2021"},{local:"may-14-2021",title:"May 14, 2021"},{local:"may-5-2021",title:"May 5, 2021"},{local:"april-13-2021",title:"April 13, 2021"},{local:"april-12-2021",title:"April 12, 2021"},{local:"april-1-2021",title:"April 1, 2021"},{local:"march-7-2021",title:"March 7, 2021"},{local:"feb-18-2021",title:"Feb 18, 2021"},{local:"feb-16-2021",title:"Feb 16, 2021"},{local:"feb-12-2021",title:"Feb 12, 2021"},{local:"feb-10-2021",title:"Feb 10, 2021"},{local:"feb-8-2021",title:"Feb 8, 2021"},{local:"jan-30-2021",title:"Jan 30, 2021"},{local:"jan-25-2021",title:"Jan 25, 2021"},{local:"jan-3-2021",title:"Jan 3, 2021"},{local:"dec-18-2020",title:"Dec 18, 2020"},{local:"dec-7-2020",title:"Dec 7, 2020"},{local:"oct-30-2020",title:"Oct 30, 2020"},{local:"oct-26-2020",title:"Oct 26, 2020"},{local:"oct-21-2020",title:"Oct 21, 2020"},{local:"oct-13-2020",title:"Oct 13, 2020"},{local:"sept-18-2020",title:"Sept 18, 2020"},{local:"sept-3-2020",title:"Sept 3, 2020"},{local:"aug-12-2020",title:"Aug 12, 2020"},{local:"aug-5-2020",title:"Aug 5, 2020"},{local:"june-11-2020",title:"June 11, 2020"},{local:"may-12-2020",title:"May 12, 2020"},{local:"may-3-2020",title:"May 3, 2020"},{local:"may-1-2020",title:"May 1, 2020"},{local:"april-5-2020",title:"April 5, 2020"},{local:"march-18-2020",title:"March 18, 2020"},{local:"april-5-2020",title:"April 5, 2020"},{local:"march-18-2020",title:"March 18, 2020"},{local:"feb-29-2020",title:"Feb 29, 2020"},{local:"feb-18-2020",title:"Feb 18, 2020"},{local:"feb-12-2020",title:"Feb 12, 2020"},{local:"feb-6-2020",title:"Feb 6, 2020"},{local:"feb-12-2020",title:"Feb 1/2, 2020"},{local:"jan-31-2020",title:"Jan 31, 2020"},{local:"jan-1112-2020",title:"Jan 11/12, 2020"},{local:"jan-3-2020",title:"Jan 3, 2020"},{local:"dec-30-2019",title:"Dec 30, 2019"},{local:"dec-28-2019",title:"Dec 28, 2019"},{local:"dec-23-2019",title:"Dec 23, 2019"},{local:"dec-4-2019",title:"Dec 4, 2019"},{local:"nov-29-2019",title:"Nov 29, 2019"},{local:"nov-22-2019",title:"Nov 22, 2019"}],title:"Archived Changes"};function tD(EN){return QT(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class aD extends XT{constructor(be){super();qT(this,be,tD,ZT,KT,{})}}export{aD as default,eD as metadata};
