import{S as fa,i as ua,s as da,e as n,k as h,w as f,t as r,M as ga,c as i,d as t,m as c,a as o,x as u,h as p,b as m,G as a,g as l,y as d,L as wa,q as g,o as w,B as v,v as va}from"../../chunks/vendor-hf-doc-builder.js";import{I as $e}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as ie}from"../../chunks/CodeBlock-hf-doc-builder.js";function ba(zt){let $,_e,_,N,oe,M,et,le,tt,ye,y,re,at,st,pe,nt,it,je,J,ot,ke,b,lt,z,rt,pt,L,mt,ht,Ee,j,P,me,G,ct,he,ft,xe,K,ut,Ne,R,Pe,W,dt,Se,U,Te,Z,gt,qe,B,Ae,ee,wt,Ie,Y,Ce,S,vt,ce,bt,$t,He,T,_t,te,yt,jt,Me,k,q,fe,F,kt,ue,Et,ze,ae,xt,Le,V,Ge,A,Nt,D,Pt,St,Re,E,I,de,O,Tt,ge,qt,Ue,C,At,se,It,Ct,Be,x,H,we,Q,Ht,ve,Mt,Ye,X,Fe;return M=new $e({}),G=new $e({}),R=new ie({props:{code:`import timm
model = timm.create_model('efficientnet_b0', pretrained=True)
model.eval()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> timm
<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;efficientnet_b0&#x27;</span>, pretrained=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()`}}),U=new ie({props:{code:`import urllib
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-meta">&gt;&gt;&gt; </span>config = resolve_data_config({}, model=model)
<span class="hljs-meta">&gt;&gt;&gt; </span>transform = create_transform(**config)

<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://github.com/pytorch/hub/raw/master/images/dog.jpg&quot;</span>, <span class="hljs-string">&quot;dog.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(filename).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tensor = transform(img).unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-comment"># transform and add batch dimension</span>`}}),B=new ie({props:{code:`import torch
with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
print(probabilities.shape)
# prints: torch.Size([1000])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    out = model(tensor)
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(probabilities.shape)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints: torch.Size([1000])</span>`}}),Y=new ie({props:{code:`# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
# prints class names and probabilities like:
# [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get imagenet class mappings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>    categories = [s.strip() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> f.readlines()]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Print top categories per image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>top5_prob, top5_catid = torch.topk(probabilities, <span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top5_prob.size(<span class="hljs-number">0</span>)):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(categories[top5_catid[i]], top5_prob[i].item())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints class names and probabilities like:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [(&#x27;Samoyed&#x27;, 0.6425196528434753), (&#x27;Pomeranian&#x27;, 0.04062102362513542), (&#x27;keeshond&#x27;, 0.03186424449086189), (&#x27;white wolf&#x27;, 0.01739676296710968), (&#x27;Eskimo dog&#x27;, 0.011717947199940681)]</span>`}}),F=new $e({}),V=new ie({props:{code:"model = timm.create_model('efficientnet_b0', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;efficientnet_b0&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=NUM_FINETUNE_CLASSES)'}}),O=new $e({}),Q=new $e({}),X=new ie({props:{code:`@misc{tan2020efficientnet,
      title={EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks}, 
      author={Mingxing Tan and Quoc V. Le},
      year={2020},
      eprint={1905.11946},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}`,highlighted:`<span class="language-xml">@misc</span><span class="hljs-template-variable">{tan2020efficientnet,
      title={EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks}</span><span class="language-xml">, 
      author=</span><span class="hljs-template-variable">{Mingxing Tan and Quoc V. Le}</span><span class="language-xml">,
      year=</span><span class="hljs-template-variable">{2020}</span><span class="language-xml">,
      eprint=</span><span class="hljs-template-variable">{1905.11946}</span><span class="language-xml">,
      archivePrefix=</span><span class="hljs-template-variable">{arXiv}</span><span class="language-xml">,
      primaryClass=</span><span class="hljs-template-variable">{cs.LG}</span><span class="language-xml">
}</span>`}}),{c(){$=n("meta"),_e=h(),_=n("h1"),N=n("a"),oe=n("span"),f(M.$$.fragment),et=h(),le=n("span"),tt=r("EfficientNet"),ye=h(),y=n("p"),re=n("strong"),at=r("EfficientNet"),st=r(" is a convolutional neural network architecture and scaling method that uniformly scales all dimensions of depth/width/resolution using a "),pe=n("em"),nt=r("compound coefficient"),it=r(". Unlike conventional practice that arbitrary scales  these factors, the EfficientNet scaling method uniformly scales network width, depth, and resolution with a set of fixed scaling coefficients. For example, if we want to use $2^N$ times more computational resources, then we can simply increase the network depth by $\\alpha ^ N$,  width by $\\beta ^ N$, and image size by $\\gamma ^ N$, where $\\alpha, \\beta, \\gamma$ are constant coefficients determined by a small grid search on the original small model. EfficientNet uses a compound coefficient $\\phi$ to uniformly scales network width, depth, and resolution in a  principled way."),je=h(),J=n("p"),ot=r("The compound scaling method is justified by the intuition that if the input image is bigger, then the network needs more layers to increase the receptive field and more channels to capture more fine-grained patterns on the bigger image."),ke=h(),b=n("p"),lt=r("The base EfficientNet-B0 network is based on the inverted bottleneck residual blocks of "),z=n("a"),rt=r("MobileNetV2"),pt=r(", in addition to "),L=n("a"),mt=r("squeeze-and-excitation blocks"),ht=r("."),Ee=h(),j=n("h2"),P=n("a"),me=n("span"),f(G.$$.fragment),ct=h(),he=n("span"),ft=r("How do I use this model on an image?"),xe=h(),K=n("p"),ut=r("To load a pretrained model:"),Ne=h(),f(R.$$.fragment),Pe=h(),W=n("p"),dt=r("To load and preprocess the image:"),Se=h(),f(U.$$.fragment),Te=h(),Z=n("p"),gt=r("To get the model predictions:"),qe=h(),f(B.$$.fragment),Ae=h(),ee=n("p"),wt=r("To get the top-5 predictions class names:"),Ie=h(),f(Y.$$.fragment),Ce=h(),S=n("p"),vt=r("Replace the model name with the variant you want to use, e.g. "),ce=n("code"),bt=r("efficientnet_b0"),$t=r(". You can find the IDs in the model summaries at the top of this page."),He=h(),T=n("p"),_t=r("To extract image features with this model, follow the "),te=n("a"),yt=r("timm feature extraction examples"),jt=r(", just change the name of the model you want to use."),Me=h(),k=n("h2"),q=n("a"),fe=n("span"),f(F.$$.fragment),kt=h(),ue=n("span"),Et=r("How do I finetune this model?"),ze=h(),ae=n("p"),xt=r("You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Le=h(),f(V.$$.fragment),Ge=h(),A=n("p"),Nt=r("To finetune on your own dataset, you have to write a training loop or adapt "),D=n("a"),Pt=r(`timm\u2019s training
script`),St=r(" to use your dataset."),Re=h(),E=n("h2"),I=n("a"),de=n("span"),f(O.$$.fragment),Tt=h(),ge=n("span"),qt=r("How do I train this model?"),Ue=h(),C=n("p"),At=r("You can follow the "),se=n("a"),It=r("timm recipe scripts"),Ct=r(" for training a new model afresh."),Be=h(),x=n("h2"),H=n("a"),we=n("span"),f(Q.$$.fragment),Ht=h(),ve=n("span"),Mt=r("Citation"),Ye=h(),f(X.$$.fragment),this.h()},l(e){const s=ga('[data-svelte="svelte-1phssyn"]',document.head);$=i(s,"META",{name:!0,content:!0}),s.forEach(t),_e=c(e),_=i(e,"H1",{class:!0});var Ve=o(_);N=i(Ve,"A",{id:!0,class:!0,href:!0});var Lt=o(N);oe=i(Lt,"SPAN",{});var Gt=o(oe);u(M.$$.fragment,Gt),Gt.forEach(t),Lt.forEach(t),et=c(Ve),le=i(Ve,"SPAN",{});var Rt=o(le);tt=p(Rt,"EfficientNet"),Rt.forEach(t),Ve.forEach(t),ye=c(e),y=i(e,"P",{});var be=o(y);re=i(be,"STRONG",{});var Ut=o(re);at=p(Ut,"EfficientNet"),Ut.forEach(t),st=p(be," is a convolutional neural network architecture and scaling method that uniformly scales all dimensions of depth/width/resolution using a "),pe=i(be,"EM",{});var Bt=o(pe);nt=p(Bt,"compound coefficient"),Bt.forEach(t),it=p(be,". Unlike conventional practice that arbitrary scales  these factors, the EfficientNet scaling method uniformly scales network width, depth, and resolution with a set of fixed scaling coefficients. For example, if we want to use $2^N$ times more computational resources, then we can simply increase the network depth by $\\alpha ^ N$,  width by $\\beta ^ N$, and image size by $\\gamma ^ N$, where $\\alpha, \\beta, \\gamma$ are constant coefficients determined by a small grid search on the original small model. EfficientNet uses a compound coefficient $\\phi$ to uniformly scales network width, depth, and resolution in a  principled way."),be.forEach(t),je=c(e),J=i(e,"P",{});var Yt=o(J);ot=p(Yt,"The compound scaling method is justified by the intuition that if the input image is bigger, then the network needs more layers to increase the receptive field and more channels to capture more fine-grained patterns on the bigger image."),Yt.forEach(t),ke=c(e),b=i(e,"P",{});var ne=o(b);lt=p(ne,"The base EfficientNet-B0 network is based on the inverted bottleneck residual blocks of "),z=i(ne,"A",{href:!0,rel:!0});var Ft=o(z);rt=p(Ft,"MobileNetV2"),Ft.forEach(t),pt=p(ne,", in addition to "),L=i(ne,"A",{href:!0,rel:!0});var Vt=o(L);mt=p(Vt,"squeeze-and-excitation blocks"),Vt.forEach(t),ht=p(ne,"."),ne.forEach(t),Ee=c(e),j=i(e,"H2",{class:!0});var De=o(j);P=i(De,"A",{id:!0,class:!0,href:!0});var Dt=o(P);me=i(Dt,"SPAN",{});var Ot=o(me);u(G.$$.fragment,Ot),Ot.forEach(t),Dt.forEach(t),ct=c(De),he=i(De,"SPAN",{});var Qt=o(he);ft=p(Qt,"How do I use this model on an image?"),Qt.forEach(t),De.forEach(t),xe=c(e),K=i(e,"P",{});var Xt=o(K);ut=p(Xt,"To load a pretrained model:"),Xt.forEach(t),Ne=c(e),u(R.$$.fragment,e),Pe=c(e),W=i(e,"P",{});var Jt=o(W);dt=p(Jt,"To load and preprocess the image:"),Jt.forEach(t),Se=c(e),u(U.$$.fragment,e),Te=c(e),Z=i(e,"P",{});var Kt=o(Z);gt=p(Kt,"To get the model predictions:"),Kt.forEach(t),qe=c(e),u(B.$$.fragment,e),Ae=c(e),ee=i(e,"P",{});var Wt=o(ee);wt=p(Wt,"To get the top-5 predictions class names:"),Wt.forEach(t),Ie=c(e),u(Y.$$.fragment,e),Ce=c(e),S=i(e,"P",{});var Oe=o(S);vt=p(Oe,"Replace the model name with the variant you want to use, e.g. "),ce=i(Oe,"CODE",{});var Zt=o(ce);bt=p(Zt,"efficientnet_b0"),Zt.forEach(t),$t=p(Oe,". You can find the IDs in the model summaries at the top of this page."),Oe.forEach(t),He=c(e),T=i(e,"P",{});var Qe=o(T);_t=p(Qe,"To extract image features with this model, follow the "),te=i(Qe,"A",{href:!0});var ea=o(te);yt=p(ea,"timm feature extraction examples"),ea.forEach(t),jt=p(Qe,", just change the name of the model you want to use."),Qe.forEach(t),Me=c(e),k=i(e,"H2",{class:!0});var Xe=o(k);q=i(Xe,"A",{id:!0,class:!0,href:!0});var ta=o(q);fe=i(ta,"SPAN",{});var aa=o(fe);u(F.$$.fragment,aa),aa.forEach(t),ta.forEach(t),kt=c(Xe),ue=i(Xe,"SPAN",{});var sa=o(ue);Et=p(sa,"How do I finetune this model?"),sa.forEach(t),Xe.forEach(t),ze=c(e),ae=i(e,"P",{});var na=o(ae);xt=p(na,"You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),na.forEach(t),Le=c(e),u(V.$$.fragment,e),Ge=c(e),A=i(e,"P",{});var Je=o(A);Nt=p(Je,"To finetune on your own dataset, you have to write a training loop or adapt "),D=i(Je,"A",{href:!0,rel:!0});var ia=o(D);Pt=p(ia,`timm\u2019s training
script`),ia.forEach(t),St=p(Je," to use your dataset."),Je.forEach(t),Re=c(e),E=i(e,"H2",{class:!0});var Ke=o(E);I=i(Ke,"A",{id:!0,class:!0,href:!0});var oa=o(I);de=i(oa,"SPAN",{});var la=o(de);u(O.$$.fragment,la),la.forEach(t),oa.forEach(t),Tt=c(Ke),ge=i(Ke,"SPAN",{});var ra=o(ge);qt=p(ra,"How do I train this model?"),ra.forEach(t),Ke.forEach(t),Ue=c(e),C=i(e,"P",{});var We=o(C);At=p(We,"You can follow the "),se=i(We,"A",{href:!0});var pa=o(se);It=p(pa,"timm recipe scripts"),pa.forEach(t),Ct=p(We," for training a new model afresh."),We.forEach(t),Be=c(e),x=i(e,"H2",{class:!0});var Ze=o(x);H=i(Ze,"A",{id:!0,class:!0,href:!0});var ma=o(H);we=i(ma,"SPAN",{});var ha=o(we);u(Q.$$.fragment,ha),ha.forEach(t),ma.forEach(t),Ht=c(Ze),ve=i(Ze,"SPAN",{});var ca=o(ve);Mt=p(ca,"Citation"),ca.forEach(t),Ze.forEach(t),Ye=c(e),u(X.$$.fragment,e),this.h()},h(){m($,"name","hf:doc:metadata"),m($,"content",JSON.stringify($a)),m(N,"id","efficientnet"),m(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(N,"href","#efficientnet"),m(_,"class","relative group"),m(z,"href","https://paperswithcode.com/method/mobilenetv2"),m(z,"rel","nofollow"),m(L,"href","https://paperswithcode.com/method/squeeze-and-excitation-block"),m(L,"rel","nofollow"),m(P,"id","how-do-i-use-this-model-on-an-image"),m(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(P,"href","#how-do-i-use-this-model-on-an-image"),m(j,"class","relative group"),m(te,"href","../feature_extraction"),m(q,"id","how-do-i-finetune-this-model"),m(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(q,"href","#how-do-i-finetune-this-model"),m(k,"class","relative group"),m(D,"href","https://github.com/rwightman/pytorch-image-models/blob/master/train.py"),m(D,"rel","nofollow"),m(I,"id","how-do-i-train-this-model"),m(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(I,"href","#how-do-i-train-this-model"),m(E,"class","relative group"),m(se,"href","../scripts"),m(H,"id","citation"),m(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(H,"href","#citation"),m(x,"class","relative group")},m(e,s){a(document.head,$),l(e,_e,s),l(e,_,s),a(_,N),a(N,oe),d(M,oe,null),a(_,et),a(_,le),a(le,tt),l(e,ye,s),l(e,y,s),a(y,re),a(re,at),a(y,st),a(y,pe),a(pe,nt),a(y,it),l(e,je,s),l(e,J,s),a(J,ot),l(e,ke,s),l(e,b,s),a(b,lt),a(b,z),a(z,rt),a(b,pt),a(b,L),a(L,mt),a(b,ht),l(e,Ee,s),l(e,j,s),a(j,P),a(P,me),d(G,me,null),a(j,ct),a(j,he),a(he,ft),l(e,xe,s),l(e,K,s),a(K,ut),l(e,Ne,s),d(R,e,s),l(e,Pe,s),l(e,W,s),a(W,dt),l(e,Se,s),d(U,e,s),l(e,Te,s),l(e,Z,s),a(Z,gt),l(e,qe,s),d(B,e,s),l(e,Ae,s),l(e,ee,s),a(ee,wt),l(e,Ie,s),d(Y,e,s),l(e,Ce,s),l(e,S,s),a(S,vt),a(S,ce),a(ce,bt),a(S,$t),l(e,He,s),l(e,T,s),a(T,_t),a(T,te),a(te,yt),a(T,jt),l(e,Me,s),l(e,k,s),a(k,q),a(q,fe),d(F,fe,null),a(k,kt),a(k,ue),a(ue,Et),l(e,ze,s),l(e,ae,s),a(ae,xt),l(e,Le,s),d(V,e,s),l(e,Ge,s),l(e,A,s),a(A,Nt),a(A,D),a(D,Pt),a(A,St),l(e,Re,s),l(e,E,s),a(E,I),a(I,de),d(O,de,null),a(E,Tt),a(E,ge),a(ge,qt),l(e,Ue,s),l(e,C,s),a(C,At),a(C,se),a(se,It),a(C,Ct),l(e,Be,s),l(e,x,s),a(x,H),a(H,we),d(Q,we,null),a(x,Ht),a(x,ve),a(ve,Mt),l(e,Ye,s),d(X,e,s),Fe=!0},p:wa,i(e){Fe||(g(M.$$.fragment,e),g(G.$$.fragment,e),g(R.$$.fragment,e),g(U.$$.fragment,e),g(B.$$.fragment,e),g(Y.$$.fragment,e),g(F.$$.fragment,e),g(V.$$.fragment,e),g(O.$$.fragment,e),g(Q.$$.fragment,e),g(X.$$.fragment,e),Fe=!0)},o(e){w(M.$$.fragment,e),w(G.$$.fragment,e),w(R.$$.fragment,e),w(U.$$.fragment,e),w(B.$$.fragment,e),w(Y.$$.fragment,e),w(F.$$.fragment,e),w(V.$$.fragment,e),w(O.$$.fragment,e),w(Q.$$.fragment,e),w(X.$$.fragment,e),Fe=!1},d(e){t($),e&&t(_e),e&&t(_),v(M),e&&t(ye),e&&t(y),e&&t(je),e&&t(J),e&&t(ke),e&&t(b),e&&t(Ee),e&&t(j),v(G),e&&t(xe),e&&t(K),e&&t(Ne),v(R,e),e&&t(Pe),e&&t(W),e&&t(Se),v(U,e),e&&t(Te),e&&t(Z),e&&t(qe),v(B,e),e&&t(Ae),e&&t(ee),e&&t(Ie),v(Y,e),e&&t(Ce),e&&t(S),e&&t(He),e&&t(T),e&&t(Me),e&&t(k),v(F),e&&t(ze),e&&t(ae),e&&t(Le),v(V,e),e&&t(Ge),e&&t(A),e&&t(Re),e&&t(E),v(O),e&&t(Ue),e&&t(C),e&&t(Be),e&&t(x),v(Q),e&&t(Ye),v(X,e)}}}const $a={local:"efficientnet",sections:[{local:"how-do-i-use-this-model-on-an-image",title:"How do I use this model on an image?"},{local:"how-do-i-finetune-this-model",title:"How do I finetune this model?"},{local:"how-do-i-train-this-model",title:"How do I train this model?"},{local:"citation",title:"Citation"}],title:"EfficientNet"};function _a(zt){return va(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ea extends fa{constructor($){super();ua(this,$,_a,ba,da,{})}}export{Ea as default,$a as metadata};
