import{S as ts,i as ss,s as as,e as n,k as h,w as u,t as p,M as ns,c as o,d as t,m as c,a as l,x as d,h as m,b as i,G as s,g as r,y as g,L as os,q as w,o as _,B as v,v as ls}from"../../chunks/vendor-hf-doc-builder.js";import{I as ge}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as ae}from"../../chunks/CodeBlock-hf-doc-builder.js";function rs(St){let j,we,$,E,ne,C,Fe,oe,Ve,_e,f,le,We,Ke,z,Qe,Ze,R,et,tt,ve,b,S,re,L,st,ie,at,je,W,nt,$e,G,be,K,ot,ye,X,xe,Q,lt,ke,Y,Ee,Z,rt,Se,M,Pe,P,it,pe,pt,mt,qe,q,ht,ee,ct,ft,Ne,y,N,me,U,ut,he,dt,Ae,te,gt,Ie,B,Te,A,wt,D,_t,vt,He,x,I,ce,J,jt,fe,$t,Ce,T,bt,se,yt,xt,ze,k,H,ue,O,kt,de,Et,Re,F,Le;return C=new ge({}),L=new ge({}),G=new ae({props:{code:`import timm
model = timm.create_model('seresnext26d_32x4d', pretrained=True)
model.eval()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> timm
<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;seresnext26d_32x4d&#x27;</span>, pretrained=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()`}}),X=new ae({props:{code:`import urllib
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-meta">&gt;&gt;&gt; </span>config = resolve_data_config({}, model=model)
<span class="hljs-meta">&gt;&gt;&gt; </span>transform = create_transform(**config)

<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://github.com/pytorch/hub/raw/master/images/dog.jpg&quot;</span>, <span class="hljs-string">&quot;dog.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(filename).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tensor = transform(img).unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-comment"># transform and add batch dimension</span>`}}),Y=new ae({props:{code:`import torch
with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
print(probabilities.shape)
# prints: torch.Size([1000])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    out = model(tensor)
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(probabilities.shape)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints: torch.Size([1000])</span>`}}),M=new ae({props:{code:`# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
# prints class names and probabilities like:
# [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get imagenet class mappings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>    categories = [s.strip() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> f.readlines()]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Print top categories per image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>top5_prob, top5_catid = torch.topk(probabilities, <span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top5_prob.size(<span class="hljs-number">0</span>)):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(categories[top5_catid[i]], top5_prob[i].item())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints class names and probabilities like:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [(&#x27;Samoyed&#x27;, 0.6425196528434753), (&#x27;Pomeranian&#x27;, 0.04062102362513542), (&#x27;keeshond&#x27;, 0.03186424449086189), (&#x27;white wolf&#x27;, 0.01739676296710968), (&#x27;Eskimo dog&#x27;, 0.011717947199940681)]</span>`}}),U=new ge({}),B=new ae({props:{code:"model = timm.create_model('seresnext26d_32x4d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;seresnext26d_32x4d&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=NUM_FINETUNE_CLASSES)'}}),J=new ge({}),O=new ge({}),F=new ae({props:{code:`@misc{hu2019squeezeandexcitation,
      title={Squeeze-and-Excitation Networks}, 
      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},
      year={2019},
      eprint={1709.01507},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}`,highlighted:`@misc{hu2019squeezeandexcitation,
      title={Squeeze-<span class="hljs-keyword">and-Excitation </span>Networks}, 
      author={<span class="hljs-keyword">Jie </span>Hu <span class="hljs-keyword">and </span>Li <span class="hljs-keyword">Shen </span><span class="hljs-keyword">and </span>Samuel Albanie <span class="hljs-keyword">and </span>Gang Sun <span class="hljs-keyword">and </span>Enhua Wu},
      year={<span class="hljs-number">2019</span>},
      eprint={<span class="hljs-number">1709</span>.<span class="hljs-number">01507</span>},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}`}}),{c(){j=n("meta"),we=h(),$=n("h1"),E=n("a"),ne=n("span"),u(C.$$.fragment),Fe=h(),oe=n("span"),Ve=p("SE-ResNeXt"),_e=h(),f=n("p"),le=n("strong"),We=p("SE ResNeXt"),Ke=p(" is a variant of a "),z=n("a"),Qe=p("ResNext"),Ze=p(" that employs "),R=n("a"),et=p("squeeze-and-excitation blocks"),tt=p(" to enable the network to perform dynamic channel-wise feature recalibration."),ve=h(),b=n("h2"),S=n("a"),re=n("span"),u(L.$$.fragment),st=h(),ie=n("span"),at=p("How do I use this model on an image?"),je=h(),W=n("p"),nt=p("To load a pretrained model:"),$e=h(),u(G.$$.fragment),be=h(),K=n("p"),ot=p("To load and preprocess the image:"),ye=h(),u(X.$$.fragment),xe=h(),Q=n("p"),lt=p("To get the model predictions:"),ke=h(),u(Y.$$.fragment),Ee=h(),Z=n("p"),rt=p("To get the top-5 predictions class names:"),Se=h(),u(M.$$.fragment),Pe=h(),P=n("p"),it=p("Replace the model name with the variant you want to use, e.g. "),pe=n("code"),pt=p("seresnext26d_32x4d"),mt=p(". You can find the IDs in the model summaries at the top of this page."),qe=h(),q=n("p"),ht=p("To extract image features with this model, follow the "),ee=n("a"),ct=p("timm feature extraction examples"),ft=p(", just change the name of the model you want to use."),Ne=h(),y=n("h2"),N=n("a"),me=n("span"),u(U.$$.fragment),ut=h(),he=n("span"),dt=p("How do I finetune this model?"),Ae=h(),te=n("p"),gt=p("You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Ie=h(),u(B.$$.fragment),Te=h(),A=n("p"),wt=p("To finetune on your own dataset, you have to write a training loop or adapt "),D=n("a"),_t=p(`timm\u2019s training
script`),vt=p(" to use your dataset."),He=h(),x=n("h2"),I=n("a"),ce=n("span"),u(J.$$.fragment),jt=h(),fe=n("span"),$t=p("How do I train this model?"),Ce=h(),T=n("p"),bt=p("You can follow the "),se=n("a"),yt=p("timm recipe scripts"),xt=p(" for training a new model afresh."),ze=h(),k=n("h2"),H=n("a"),ue=n("span"),u(O.$$.fragment),kt=h(),de=n("span"),Et=p("Citation"),Re=h(),u(F.$$.fragment),this.h()},l(e){const a=ns('[data-svelte="svelte-1phssyn"]',document.head);j=o(a,"META",{name:!0,content:!0}),a.forEach(t),we=c(e),$=o(e,"H1",{class:!0});var Ge=l($);E=o(Ge,"A",{id:!0,class:!0,href:!0});var Pt=l(E);ne=o(Pt,"SPAN",{});var qt=l(ne);d(C.$$.fragment,qt),qt.forEach(t),Pt.forEach(t),Fe=c(Ge),oe=o(Ge,"SPAN",{});var Nt=l(oe);Ve=m(Nt,"SE-ResNeXt"),Nt.forEach(t),Ge.forEach(t),_e=c(e),f=o(e,"P",{});var V=l(f);le=o(V,"STRONG",{});var At=l(le);We=m(At,"SE ResNeXt"),At.forEach(t),Ke=m(V," is a variant of a "),z=o(V,"A",{href:!0,rel:!0});var It=l(z);Qe=m(It,"ResNext"),It.forEach(t),Ze=m(V," that employs "),R=o(V,"A",{href:!0,rel:!0});var Tt=l(R);et=m(Tt,"squeeze-and-excitation blocks"),Tt.forEach(t),tt=m(V," to enable the network to perform dynamic channel-wise feature recalibration."),V.forEach(t),ve=c(e),b=o(e,"H2",{class:!0});var Xe=l(b);S=o(Xe,"A",{id:!0,class:!0,href:!0});var Ht=l(S);re=o(Ht,"SPAN",{});var Ct=l(re);d(L.$$.fragment,Ct),Ct.forEach(t),Ht.forEach(t),st=c(Xe),ie=o(Xe,"SPAN",{});var zt=l(ie);at=m(zt,"How do I use this model on an image?"),zt.forEach(t),Xe.forEach(t),je=c(e),W=o(e,"P",{});var Rt=l(W);nt=m(Rt,"To load a pretrained model:"),Rt.forEach(t),$e=c(e),d(G.$$.fragment,e),be=c(e),K=o(e,"P",{});var Lt=l(K);ot=m(Lt,"To load and preprocess the image:"),Lt.forEach(t),ye=c(e),d(X.$$.fragment,e),xe=c(e),Q=o(e,"P",{});var Gt=l(Q);lt=m(Gt,"To get the model predictions:"),Gt.forEach(t),ke=c(e),d(Y.$$.fragment,e),Ee=c(e),Z=o(e,"P",{});var Xt=l(Z);rt=m(Xt,"To get the top-5 predictions class names:"),Xt.forEach(t),Se=c(e),d(M.$$.fragment,e),Pe=c(e),P=o(e,"P",{});var Ye=l(P);it=m(Ye,"Replace the model name with the variant you want to use, e.g. "),pe=o(Ye,"CODE",{});var Yt=l(pe);pt=m(Yt,"seresnext26d_32x4d"),Yt.forEach(t),mt=m(Ye,". You can find the IDs in the model summaries at the top of this page."),Ye.forEach(t),qe=c(e),q=o(e,"P",{});var Me=l(q);ht=m(Me,"To extract image features with this model, follow the "),ee=o(Me,"A",{href:!0});var Mt=l(ee);ct=m(Mt,"timm feature extraction examples"),Mt.forEach(t),ft=m(Me,", just change the name of the model you want to use."),Me.forEach(t),Ne=c(e),y=o(e,"H2",{class:!0});var Ue=l(y);N=o(Ue,"A",{id:!0,class:!0,href:!0});var Ut=l(N);me=o(Ut,"SPAN",{});var Bt=l(me);d(U.$$.fragment,Bt),Bt.forEach(t),Ut.forEach(t),ut=c(Ue),he=o(Ue,"SPAN",{});var Dt=l(he);dt=m(Dt,"How do I finetune this model?"),Dt.forEach(t),Ue.forEach(t),Ae=c(e),te=o(e,"P",{});var Jt=l(te);gt=m(Jt,"You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Jt.forEach(t),Ie=c(e),d(B.$$.fragment,e),Te=c(e),A=o(e,"P",{});var Be=l(A);wt=m(Be,"To finetune on your own dataset, you have to write a training loop or adapt "),D=o(Be,"A",{href:!0,rel:!0});var Ot=l(D);_t=m(Ot,`timm\u2019s training
script`),Ot.forEach(t),vt=m(Be," to use your dataset."),Be.forEach(t),He=c(e),x=o(e,"H2",{class:!0});var De=l(x);I=o(De,"A",{id:!0,class:!0,href:!0});var Ft=l(I);ce=o(Ft,"SPAN",{});var Vt=l(ce);d(J.$$.fragment,Vt),Vt.forEach(t),Ft.forEach(t),jt=c(De),fe=o(De,"SPAN",{});var Wt=l(fe);$t=m(Wt,"How do I train this model?"),Wt.forEach(t),De.forEach(t),Ce=c(e),T=o(e,"P",{});var Je=l(T);bt=m(Je,"You can follow the "),se=o(Je,"A",{href:!0});var Kt=l(se);yt=m(Kt,"timm recipe scripts"),Kt.forEach(t),xt=m(Je," for training a new model afresh."),Je.forEach(t),ze=c(e),k=o(e,"H2",{class:!0});var Oe=l(k);H=o(Oe,"A",{id:!0,class:!0,href:!0});var Qt=l(H);ue=o(Qt,"SPAN",{});var Zt=l(ue);d(O.$$.fragment,Zt),Zt.forEach(t),Qt.forEach(t),kt=c(Oe),de=o(Oe,"SPAN",{});var es=l(de);Et=m(es,"Citation"),es.forEach(t),Oe.forEach(t),Re=c(e),d(F.$$.fragment,e),this.h()},h(){i(j,"name","hf:doc:metadata"),i(j,"content",JSON.stringify(is)),i(E,"id","seresnext"),i(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(E,"href","#seresnext"),i($,"class","relative group"),i(z,"href","https://www.paperswithcode.com/method/resneXt"),i(z,"rel","nofollow"),i(R,"href","https://paperswithcode.com/method/squeeze-and-excitation-block"),i(R,"rel","nofollow"),i(S,"id","how-do-i-use-this-model-on-an-image"),i(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(S,"href","#how-do-i-use-this-model-on-an-image"),i(b,"class","relative group"),i(ee,"href","../feature_extraction"),i(N,"id","how-do-i-finetune-this-model"),i(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(N,"href","#how-do-i-finetune-this-model"),i(y,"class","relative group"),i(D,"href","https://github.com/rwightman/pytorch-image-models/blob/master/train.py"),i(D,"rel","nofollow"),i(I,"id","how-do-i-train-this-model"),i(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(I,"href","#how-do-i-train-this-model"),i(x,"class","relative group"),i(se,"href","../scripts"),i(H,"id","citation"),i(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(H,"href","#citation"),i(k,"class","relative group")},m(e,a){s(document.head,j),r(e,we,a),r(e,$,a),s($,E),s(E,ne),g(C,ne,null),s($,Fe),s($,oe),s(oe,Ve),r(e,_e,a),r(e,f,a),s(f,le),s(le,We),s(f,Ke),s(f,z),s(z,Qe),s(f,Ze),s(f,R),s(R,et),s(f,tt),r(e,ve,a),r(e,b,a),s(b,S),s(S,re),g(L,re,null),s(b,st),s(b,ie),s(ie,at),r(e,je,a),r(e,W,a),s(W,nt),r(e,$e,a),g(G,e,a),r(e,be,a),r(e,K,a),s(K,ot),r(e,ye,a),g(X,e,a),r(e,xe,a),r(e,Q,a),s(Q,lt),r(e,ke,a),g(Y,e,a),r(e,Ee,a),r(e,Z,a),s(Z,rt),r(e,Se,a),g(M,e,a),r(e,Pe,a),r(e,P,a),s(P,it),s(P,pe),s(pe,pt),s(P,mt),r(e,qe,a),r(e,q,a),s(q,ht),s(q,ee),s(ee,ct),s(q,ft),r(e,Ne,a),r(e,y,a),s(y,N),s(N,me),g(U,me,null),s(y,ut),s(y,he),s(he,dt),r(e,Ae,a),r(e,te,a),s(te,gt),r(e,Ie,a),g(B,e,a),r(e,Te,a),r(e,A,a),s(A,wt),s(A,D),s(D,_t),s(A,vt),r(e,He,a),r(e,x,a),s(x,I),s(I,ce),g(J,ce,null),s(x,jt),s(x,fe),s(fe,$t),r(e,Ce,a),r(e,T,a),s(T,bt),s(T,se),s(se,yt),s(T,xt),r(e,ze,a),r(e,k,a),s(k,H),s(H,ue),g(O,ue,null),s(k,kt),s(k,de),s(de,Et),r(e,Re,a),g(F,e,a),Le=!0},p:os,i(e){Le||(w(C.$$.fragment,e),w(L.$$.fragment,e),w(G.$$.fragment,e),w(X.$$.fragment,e),w(Y.$$.fragment,e),w(M.$$.fragment,e),w(U.$$.fragment,e),w(B.$$.fragment,e),w(J.$$.fragment,e),w(O.$$.fragment,e),w(F.$$.fragment,e),Le=!0)},o(e){_(C.$$.fragment,e),_(L.$$.fragment,e),_(G.$$.fragment,e),_(X.$$.fragment,e),_(Y.$$.fragment,e),_(M.$$.fragment,e),_(U.$$.fragment,e),_(B.$$.fragment,e),_(J.$$.fragment,e),_(O.$$.fragment,e),_(F.$$.fragment,e),Le=!1},d(e){t(j),e&&t(we),e&&t($),v(C),e&&t(_e),e&&t(f),e&&t(ve),e&&t(b),v(L),e&&t(je),e&&t(W),e&&t($e),v(G,e),e&&t(be),e&&t(K),e&&t(ye),v(X,e),e&&t(xe),e&&t(Q),e&&t(ke),v(Y,e),e&&t(Ee),e&&t(Z),e&&t(Se),v(M,e),e&&t(Pe),e&&t(P),e&&t(qe),e&&t(q),e&&t(Ne),e&&t(y),v(U),e&&t(Ae),e&&t(te),e&&t(Ie),v(B,e),e&&t(Te),e&&t(A),e&&t(He),e&&t(x),v(J),e&&t(Ce),e&&t(T),e&&t(ze),e&&t(k),v(O),e&&t(Re),v(F,e)}}}const is={local:"seresnext",sections:[{local:"how-do-i-use-this-model-on-an-image",title:"How do I use this model on an image?"},{local:"how-do-i-finetune-this-model",title:"How do I finetune this model?"},{local:"how-do-i-train-this-model",title:"How do I train this model?"},{local:"citation",title:"Citation"}],title:"SE-ResNeXt"};function ps(St){return ls(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fs extends ts{constructor(j){super();ss(this,j,ps,rs,as,{})}}export{fs as default,is as metadata};
