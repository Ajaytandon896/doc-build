import{S as ja,i as Xa,s as Ma,e as s,k as l,w as f,t as d,M as Ba,c as o,d as t,m as h,a as i,x as c,h as m,b as n,G as a,g as p,y as u,L as La,q as g,o as w,B as v,v as Ua}from"../chunks/vendor-hf-doc-builder.js";import{I as b}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as D}from"../chunks/CodeBlock-hf-doc-builder.js";function Ha(Ft){let $,Me,_,P,ue,G,vt,ge,bt,Be,y,I,we,K,$t,ve,_t,Le,he,yt,Ue,C,He,x,j,be,J,xt,$e,Et,Ve,de,At,ze,q,De,E,X,_e,O,Nt,ye,kt,Ge,me,Rt,Ke,F,Ce,A,M,xe,Q,St,Ee,Tt,Je,fe,Pt,qe,N,B,Ae,W,It,Ne,jt,Oe,Y,Z,Xt,Mt,Fe,ee,Qe,k,L,ke,te,Bt,Re,Lt,We,ce,Ut,Ye,ae,Ze,R,U,Se,re,Ht,Te,Vt,et,H,zt,se,Dt,Gt,tt,oe,at,S,V,Pe,ie,Kt,Ie,Ct,rt,ne,st,T,z,je,pe,Jt,Xe,qt,ot,le,it;return G=new b({}),K=new b({}),C=new D({props:{code:"./distributed_train.sh 2 /imagenet/ --model efficientnet_b2 -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.3 --drop-path 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .016",highlighted:'./distributed_train.sh 2 /imagenet/ --model efficientnet_b2 -b 128 --<span class="hljs-built_in">sched</span> step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.3 --drop-path 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .016'}}),J=new b({}),q=new D({props:{code:"./distributed_train.sh 2 /imagenet/ --model mixnet_xl -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .969 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.3 --drop-path 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.3 --amp --lr .016 --dist-bn reduce",highlighted:'./distributed_train.sh 2 /imagenet/ --model mixnet_xl -b 128 --<span class="hljs-built_in">sched</span> step --epochs 450 --decay-epochs 2.4 --decay-rate .969 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.3 --drop-path 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.3 --amp --lr .016 --dist-bn reduce'}}),O=new b({}),F=new D({props:{code:"./distributed_train.sh 2 /imagenet/ --model seresnext26t_32x4d --lr 0.1 --warmup-epochs 5 --epochs 160 --weight-decay 1e-4 --sched cosine --reprob 0.4 --remode pixel -b 112",highlighted:'./distributed_train.sh 2 /imagenet/ --model seresnext26t_32x4d --lr 0.1 --warmup-epochs 5 --epochs 160 --weight-decay 1e-4 --<span class="hljs-built_in">sched</span> cosine --reprob 0.4 --remode pixel -b 112'}}),Q=new b({}),W=new b({}),ee=new D({props:{code:"./distributed_train.sh 2 /imagenet/ --model efficientnet_b0 -b 384 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-path 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .048",highlighted:'./distributed_train.sh 2 /imagenet/ --model efficientnet_b0 -b 384 --<span class="hljs-built_in">sched</span> step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-path 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .048'}}),te=new b({}),ae=new D({props:{code:"./distributed_train.sh 2 /imagenet -b 64 --model resnet50 --sched cosine --epochs 200 --lr 0.05 --amp --remode pixel --reprob 0.6 --aug-splits 3 --aa rand-m9-mstd0.5-inc1 --resplit --split-bn --jsd --dist-bn reduce",highlighted:'./distributed_train.sh 2 /imagenet -b 64 --model resnet50 --<span class="hljs-built_in">sched</span> cosine --epochs 200 --lr 0.05 --amp --remode pixel --reprob 0.6 --aug-splits 3 --aa rand-m9-mstd0.5-inc1 --resplit --split-bn --jsd --dist-bn reduce'}}),re=new b({}),oe=new D({props:{code:"./distributed_train.sh 8 /imagenet --model efficientnet_es -b 128 --sched step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-path 0.2  --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .064",highlighted:'./distributed_train.sh 8 /imagenet --model efficientnet_es -b 128 --<span class="hljs-built_in">sched</span> step --epochs 450 --decay-epochs 2.4 --decay-rate .97 --opt rmsproptf --opt-eps .001 -j 8 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-path 0.2  --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .064'}}),ie=new b({}),ne=new D({props:{code:"./distributed_train.sh 2 /imagenet/ --model mobilenetv3_large_100 -b 512 --sched step --epochs 600 --decay-epochs 2.4 --decay-rate .973 --opt rmsproptf --opt-eps .001 -j 7 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-path 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .064 --lr-noise 0.42 0.9",highlighted:'./distributed_train.sh 2 /imagenet/ --model mobilenetv3_large_100 -b 512 --<span class="hljs-built_in">sched</span> step --epochs 600 --decay-epochs 2.4 --decay-rate .973 --opt rmsproptf --opt-eps .001 -j 7 --warmup-lr 1e-6 --weight-decay 1e-5 --drop 0.2 --drop-path 0.2 --model-ema --model-ema-decay 0.9999 --aa rand-m9-mstd0.5 --remode pixel --reprob 0.2 --amp --lr .064 --lr-noise 0.42 0.9'}}),pe=new b({}),le=new D({props:{code:"./distributed_train.sh 8 /imagenet --model resnext50_32x4d --lr 0.6 --warmup-epochs 5 --epochs 240 --weight-decay 1e-4 --sched cosine --reprob 0.4 --recount 3 --remode pixel --aa rand-m7-mstd0.5-inc1 -b 192 -j 6 --amp --dist-bn reduce",highlighted:'./distributed_train.sh 8 /imagenet --model resnext50_32x4d --lr 0.6 --warmup-epochs 5 --epochs 240 --weight-decay 1e-4 --<span class="hljs-built_in">sched</span> cosine --reprob 0.4 --recount 3 --remode pixel --aa rand-m7-mstd0.5-inc1 -b 192 -j 6 --amp --dist-bn reduce'}}),{c(){$=s("meta"),Me=l(),_=s("h1"),P=s("a"),ue=s("span"),f(G.$$.fragment),vt=l(),ge=s("span"),bt=d("Training Examples"),Be=l(),y=s("h2"),I=s("a"),we=s("span"),f(K.$$.fragment),$t=l(),ve=s("span"),_t=d("EfficientNet-B2 with RandAugment - 80.4 top-1, 95.1 top-5"),Le=l(),he=s("p"),yt=d("These params are for dual Titan RTX cards with NVIDIA Apex installed:"),Ue=l(),f(C.$$.fragment),He=l(),x=s("h2"),j=s("a"),be=s("span"),f(J.$$.fragment),xt=l(),$e=s("span"),Et=d("MixNet-XL with RandAugment - 80.5 top-1, 94.9 top-5"),Ve=l(),de=s("p"),At=d("This params are for dual Titan RTX cards with NVIDIA Apex installed:"),ze=l(),f(q.$$.fragment),De=l(),E=s("h2"),X=s("a"),_e=s("span"),f(O.$$.fragment),Nt=l(),ye=s("span"),kt=d("SE-ResNeXt-26-D and SE-ResNeXt-26-T"),Ge=l(),me=s("p"),Rt=d("These hparams (or similar) work well for a wide range of ResNet architecture, generally a good idea to increase the epoch # as the model size increases\u2026 ie approx 180-200 for ResNe(X)t50, and 220+ for larger. Increase batch size and LR proportionally for better GPUs or with AMP enabled. These params were for 2 1080Ti cards:"),Ke=l(),f(F.$$.fragment),Ce=l(),A=s("h2"),M=s("a"),xe=s("span"),f(Q.$$.fragment),St=l(),Ee=s("span"),Tt=d("EfficientNet-B3 with RandAugment - 81.5 top-1, 95.7 top-5"),Je=l(),fe=s("p"),Pt=d("The training of this model started with the same command line as EfficientNet-B2 w/ RA above. After almost three weeks of training the process crashed. The results weren\u2019t looking amazing so I resumed the training several times with tweaks to a few params (increase RE prob, decrease rand-aug, increase ema-decay). Nothing looked great. I ended up averaging the best checkpoints from all restarts. The result is mediocre at default res/crop but oddly performs much better with a full image test crop of 1.0."),qe=l(),N=s("h2"),B=s("a"),Ae=s("span"),f(W.$$.fragment),It=l(),Ne=s("span"),jt=d("EfficientNet-B0 with RandAugment - 77.7 top-1, 95.3 top-5"),Oe=l(),Y=s("p"),Z=s("a"),Xt=d("Michael Klachko"),Mt=d(" achieved these results with the command line for B2 adapted for larger batch size, with the recommended B0 dropout rate of 0.2."),Fe=l(),f(ee.$$.fragment),Qe=l(),k=s("h2"),L=s("a"),ke=s("span"),f(te.$$.fragment),Bt=l(),Re=s("span"),Lt=d("ResNet50 with JSD loss and RandAugment (clean + 2x RA augs) - 79.04 top-1, 94.39 top-5"),We=l(),ce=s("p"),Ut=d("Trained on two older 1080Ti cards, this took a while. Only slightly, non statistically better ImageNet validation result than my first good AugMix training of 78.99. However, these weights are more robust on tests with ImageNetV2, ImageNet-Sketch, etc. Unlike my first AugMix runs, I\u2019ve enabled SplitBatchNorm, disabled random erasing on the clean split, and cranked up random erasing prob on the 2 augmented paths."),Ye=l(),f(ae.$$.fragment),Ze=l(),R=s("h2"),U=s("a"),Se=s("span"),f(re.$$.fragment),Ht=l(),Te=s("span"),Vt=d("EfficientNet-ES (EdgeTPU-Small) with RandAugment - 78.066 top-1, 93.926 top-5"),et=l(),H=s("p"),zt=d("Trained by "),se=s("a"),Dt=d("Andrew Lavin"),Gt=d(" with 8 V100 cards. Model EMA was not used, final checkpoint is the average of 8 best checkpoints during training."),tt=l(),f(oe.$$.fragment),at=l(),S=s("h2"),V=s("a"),Pe=s("span"),f(ie.$$.fragment),Kt=l(),Ie=s("span"),Ct=d("MobileNetV3-Large-100 - 75.766 top-1, 92,542 top-5"),rt=l(),f(ne.$$.fragment),st=l(),T=s("h2"),z=s("a"),je=s("span"),f(pe.$$.fragment),Jt=l(),Xe=s("span"),qt=d("ResNeXt-50 32x4d w/ RandAugment - 79.762 top-1, 94.60 top-5"),ot=d(`

These params will also work well for SE-ResNeXt-50 and SK-ResNeXt-50 and likely 101. I used them for the SK-ResNeXt-50 32x4d that I trained with 2 GPU using a slightly higher LR per effective batch size (lr=0.18, b=192 per GPU). The cmd line below are tuned for 8 GPU training.

	`),f(le.$$.fragment),this.h()},l(e){const r=Ba('[data-svelte="svelte-1phssyn"]',document.head);$=o(r,"META",{name:!0,content:!0}),r.forEach(t),Me=h(e),_=o(e,"H1",{class:!0});var nt=i(_);P=o(nt,"A",{id:!0,class:!0,href:!0});var Qt=i(P);ue=o(Qt,"SPAN",{});var Wt=i(ue);c(G.$$.fragment,Wt),Wt.forEach(t),Qt.forEach(t),vt=h(nt),ge=o(nt,"SPAN",{});var Yt=i(ge);bt=m(Yt,"Training Examples"),Yt.forEach(t),nt.forEach(t),Be=h(e),y=o(e,"H2",{class:!0});var pt=i(y);I=o(pt,"A",{id:!0,class:!0,href:!0});var Zt=i(I);we=o(Zt,"SPAN",{});var ea=i(we);c(K.$$.fragment,ea),ea.forEach(t),Zt.forEach(t),$t=h(pt),ve=o(pt,"SPAN",{});var ta=i(ve);_t=m(ta,"EfficientNet-B2 with RandAugment - 80.4 top-1, 95.1 top-5"),ta.forEach(t),pt.forEach(t),Le=h(e),he=o(e,"P",{});var aa=i(he);yt=m(aa,"These params are for dual Titan RTX cards with NVIDIA Apex installed:"),aa.forEach(t),Ue=h(e),c(C.$$.fragment,e),He=h(e),x=o(e,"H2",{class:!0});var lt=i(x);j=o(lt,"A",{id:!0,class:!0,href:!0});var ra=i(j);be=o(ra,"SPAN",{});var sa=i(be);c(J.$$.fragment,sa),sa.forEach(t),ra.forEach(t),xt=h(lt),$e=o(lt,"SPAN",{});var oa=i($e);Et=m(oa,"MixNet-XL with RandAugment - 80.5 top-1, 94.9 top-5"),oa.forEach(t),lt.forEach(t),Ve=h(e),de=o(e,"P",{});var ia=i(de);At=m(ia,"This params are for dual Titan RTX cards with NVIDIA Apex installed:"),ia.forEach(t),ze=h(e),c(q.$$.fragment,e),De=h(e),E=o(e,"H2",{class:!0});var ht=i(E);X=o(ht,"A",{id:!0,class:!0,href:!0});var na=i(X);_e=o(na,"SPAN",{});var pa=i(_e);c(O.$$.fragment,pa),pa.forEach(t),na.forEach(t),Nt=h(ht),ye=o(ht,"SPAN",{});var la=i(ye);kt=m(la,"SE-ResNeXt-26-D and SE-ResNeXt-26-T"),la.forEach(t),ht.forEach(t),Ge=h(e),me=o(e,"P",{});var ha=i(me);Rt=m(ha,"These hparams (or similar) work well for a wide range of ResNet architecture, generally a good idea to increase the epoch # as the model size increases\u2026 ie approx 180-200 for ResNe(X)t50, and 220+ for larger. Increase batch size and LR proportionally for better GPUs or with AMP enabled. These params were for 2 1080Ti cards:"),ha.forEach(t),Ke=h(e),c(F.$$.fragment,e),Ce=h(e),A=o(e,"H2",{class:!0});var dt=i(A);M=o(dt,"A",{id:!0,class:!0,href:!0});var da=i(M);xe=o(da,"SPAN",{});var ma=i(xe);c(Q.$$.fragment,ma),ma.forEach(t),da.forEach(t),St=h(dt),Ee=o(dt,"SPAN",{});var fa=i(Ee);Tt=m(fa,"EfficientNet-B3 with RandAugment - 81.5 top-1, 95.7 top-5"),fa.forEach(t),dt.forEach(t),Je=h(e),fe=o(e,"P",{});var ca=i(fe);Pt=m(ca,"The training of this model started with the same command line as EfficientNet-B2 w/ RA above. After almost three weeks of training the process crashed. The results weren\u2019t looking amazing so I resumed the training several times with tweaks to a few params (increase RE prob, decrease rand-aug, increase ema-decay). Nothing looked great. I ended up averaging the best checkpoints from all restarts. The result is mediocre at default res/crop but oddly performs much better with a full image test crop of 1.0."),ca.forEach(t),qe=h(e),N=o(e,"H2",{class:!0});var mt=i(N);B=o(mt,"A",{id:!0,class:!0,href:!0});var ua=i(B);Ae=o(ua,"SPAN",{});var ga=i(Ae);c(W.$$.fragment,ga),ga.forEach(t),ua.forEach(t),It=h(mt),Ne=o(mt,"SPAN",{});var wa=i(Ne);jt=m(wa,"EfficientNet-B0 with RandAugment - 77.7 top-1, 95.3 top-5"),wa.forEach(t),mt.forEach(t),Oe=h(e),Y=o(e,"P",{});var Ot=i(Y);Z=o(Ot,"A",{href:!0,rel:!0});var va=i(Z);Xt=m(va,"Michael Klachko"),va.forEach(t),Mt=m(Ot," achieved these results with the command line for B2 adapted for larger batch size, with the recommended B0 dropout rate of 0.2."),Ot.forEach(t),Fe=h(e),c(ee.$$.fragment,e),Qe=h(e),k=o(e,"H2",{class:!0});var ft=i(k);L=o(ft,"A",{id:!0,class:!0,href:!0});var ba=i(L);ke=o(ba,"SPAN",{});var $a=i(ke);c(te.$$.fragment,$a),$a.forEach(t),ba.forEach(t),Bt=h(ft),Re=o(ft,"SPAN",{});var _a=i(Re);Lt=m(_a,"ResNet50 with JSD loss and RandAugment (clean + 2x RA augs) - 79.04 top-1, 94.39 top-5"),_a.forEach(t),ft.forEach(t),We=h(e),ce=o(e,"P",{});var ya=i(ce);Ut=m(ya,"Trained on two older 1080Ti cards, this took a while. Only slightly, non statistically better ImageNet validation result than my first good AugMix training of 78.99. However, these weights are more robust on tests with ImageNetV2, ImageNet-Sketch, etc. Unlike my first AugMix runs, I\u2019ve enabled SplitBatchNorm, disabled random erasing on the clean split, and cranked up random erasing prob on the 2 augmented paths."),ya.forEach(t),Ye=h(e),c(ae.$$.fragment,e),Ze=h(e),R=o(e,"H2",{class:!0});var ct=i(R);U=o(ct,"A",{id:!0,class:!0,href:!0});var xa=i(U);Se=o(xa,"SPAN",{});var Ea=i(Se);c(re.$$.fragment,Ea),Ea.forEach(t),xa.forEach(t),Ht=h(ct),Te=o(ct,"SPAN",{});var Aa=i(Te);Vt=m(Aa,"EfficientNet-ES (EdgeTPU-Small) with RandAugment - 78.066 top-1, 93.926 top-5"),Aa.forEach(t),ct.forEach(t),et=h(e),H=o(e,"P",{});var ut=i(H);zt=m(ut,"Trained by "),se=o(ut,"A",{href:!0,rel:!0});var Na=i(se);Dt=m(Na,"Andrew Lavin"),Na.forEach(t),Gt=m(ut," with 8 V100 cards. Model EMA was not used, final checkpoint is the average of 8 best checkpoints during training."),ut.forEach(t),tt=h(e),c(oe.$$.fragment,e),at=h(e),S=o(e,"H2",{class:!0});var gt=i(S);V=o(gt,"A",{id:!0,class:!0,href:!0});var ka=i(V);Pe=o(ka,"SPAN",{});var Ra=i(Pe);c(ie.$$.fragment,Ra),Ra.forEach(t),ka.forEach(t),Kt=h(gt),Ie=o(gt,"SPAN",{});var Sa=i(Ie);Ct=m(Sa,"MobileNetV3-Large-100 - 75.766 top-1, 92,542 top-5"),Sa.forEach(t),gt.forEach(t),rt=h(e),c(ne.$$.fragment,e),st=h(e),T=o(e,"H2",{class:!0});var wt=i(T);z=o(wt,"A",{id:!0,class:!0,href:!0});var Ta=i(z);je=o(Ta,"SPAN",{});var Pa=i(je);c(pe.$$.fragment,Pa),Pa.forEach(t),Ta.forEach(t),Jt=h(wt),Xe=o(wt,"SPAN",{});var Ia=i(Xe);qt=m(Ia,"ResNeXt-50 32x4d w/ RandAugment - 79.762 top-1, 94.60 top-5"),Ia.forEach(t),wt.forEach(t),ot=m(e,`

These params will also work well for SE-ResNeXt-50 and SK-ResNeXt-50 and likely 101. I used them for the SK-ResNeXt-50 32x4d that I trained with 2 GPU using a slightly higher LR per effective batch size (lr=0.18, b=192 per GPU). The cmd line below are tuned for 8 GPU training.

	`),c(le.$$.fragment,e),this.h()},h(){n($,"name","hf:doc:metadata"),n($,"content",JSON.stringify(Va)),n(P,"id","training-examples"),n(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(P,"href","#training-examples"),n(_,"class","relative group"),n(I,"id","efficientnetb2-with-randaugment-804-top1-951-top5"),n(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(I,"href","#efficientnetb2-with-randaugment-804-top1-951-top5"),n(y,"class","relative group"),n(j,"id","mixnetxl-with-randaugment-805-top1-949-top5"),n(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(j,"href","#mixnetxl-with-randaugment-805-top1-949-top5"),n(x,"class","relative group"),n(X,"id","seresnext26d-and-seresnext26t"),n(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(X,"href","#seresnext26d-and-seresnext26t"),n(E,"class","relative group"),n(M,"id","efficientnetb3-with-randaugment-815-top1-957-top5"),n(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(M,"href","#efficientnetb3-with-randaugment-815-top1-957-top5"),n(A,"class","relative group"),n(B,"id","efficientnetb0-with-randaugment-777-top1-953-top5"),n(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(B,"href","#efficientnetb0-with-randaugment-777-top1-953-top5"),n(N,"class","relative group"),n(Z,"href","https://github.com/michaelklachko"),n(Z,"rel","nofollow"),n(L,"id","resnet50-with-jsd-loss-and-randaugment-clean-2x-ra-augs-7904-top1-9439-top5"),n(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(L,"href","#resnet50-with-jsd-loss-and-randaugment-clean-2x-ra-augs-7904-top1-9439-top5"),n(k,"class","relative group"),n(U,"id","efficientnetes-edgetpusmall-with-randaugment-78066-top1-93926-top5"),n(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(U,"href","#efficientnetes-edgetpusmall-with-randaugment-78066-top1-93926-top5"),n(R,"class","relative group"),n(se,"href","https://github.com/andravin"),n(se,"rel","nofollow"),n(V,"id","mobilenetv3large100-75766-top1-92542-top5"),n(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(V,"href","#mobilenetv3large100-75766-top1-92542-top5"),n(S,"class","relative group"),n(z,"id","resnext50-32x4d-w-randaugment-79762-top1-9460-top5"),n(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(z,"href","#resnext50-32x4d-w-randaugment-79762-top1-9460-top5"),n(T,"class","relative group")},m(e,r){a(document.head,$),p(e,Me,r),p(e,_,r),a(_,P),a(P,ue),u(G,ue,null),a(_,vt),a(_,ge),a(ge,bt),p(e,Be,r),p(e,y,r),a(y,I),a(I,we),u(K,we,null),a(y,$t),a(y,ve),a(ve,_t),p(e,Le,r),p(e,he,r),a(he,yt),p(e,Ue,r),u(C,e,r),p(e,He,r),p(e,x,r),a(x,j),a(j,be),u(J,be,null),a(x,xt),a(x,$e),a($e,Et),p(e,Ve,r),p(e,de,r),a(de,At),p(e,ze,r),u(q,e,r),p(e,De,r),p(e,E,r),a(E,X),a(X,_e),u(O,_e,null),a(E,Nt),a(E,ye),a(ye,kt),p(e,Ge,r),p(e,me,r),a(me,Rt),p(e,Ke,r),u(F,e,r),p(e,Ce,r),p(e,A,r),a(A,M),a(M,xe),u(Q,xe,null),a(A,St),a(A,Ee),a(Ee,Tt),p(e,Je,r),p(e,fe,r),a(fe,Pt),p(e,qe,r),p(e,N,r),a(N,B),a(B,Ae),u(W,Ae,null),a(N,It),a(N,Ne),a(Ne,jt),p(e,Oe,r),p(e,Y,r),a(Y,Z),a(Z,Xt),a(Y,Mt),p(e,Fe,r),u(ee,e,r),p(e,Qe,r),p(e,k,r),a(k,L),a(L,ke),u(te,ke,null),a(k,Bt),a(k,Re),a(Re,Lt),p(e,We,r),p(e,ce,r),a(ce,Ut),p(e,Ye,r),u(ae,e,r),p(e,Ze,r),p(e,R,r),a(R,U),a(U,Se),u(re,Se,null),a(R,Ht),a(R,Te),a(Te,Vt),p(e,et,r),p(e,H,r),a(H,zt),a(H,se),a(se,Dt),a(H,Gt),p(e,tt,r),u(oe,e,r),p(e,at,r),p(e,S,r),a(S,V),a(V,Pe),u(ie,Pe,null),a(S,Kt),a(S,Ie),a(Ie,Ct),p(e,rt,r),u(ne,e,r),p(e,st,r),p(e,T,r),a(T,z),a(z,je),u(pe,je,null),a(T,Jt),a(T,Xe),a(Xe,qt),p(e,ot,r),u(le,e,r),it=!0},p:La,i(e){it||(g(G.$$.fragment,e),g(K.$$.fragment,e),g(C.$$.fragment,e),g(J.$$.fragment,e),g(q.$$.fragment,e),g(O.$$.fragment,e),g(F.$$.fragment,e),g(Q.$$.fragment,e),g(W.$$.fragment,e),g(ee.$$.fragment,e),g(te.$$.fragment,e),g(ae.$$.fragment,e),g(re.$$.fragment,e),g(oe.$$.fragment,e),g(ie.$$.fragment,e),g(ne.$$.fragment,e),g(pe.$$.fragment,e),g(le.$$.fragment,e),it=!0)},o(e){w(G.$$.fragment,e),w(K.$$.fragment,e),w(C.$$.fragment,e),w(J.$$.fragment,e),w(q.$$.fragment,e),w(O.$$.fragment,e),w(F.$$.fragment,e),w(Q.$$.fragment,e),w(W.$$.fragment,e),w(ee.$$.fragment,e),w(te.$$.fragment,e),w(ae.$$.fragment,e),w(re.$$.fragment,e),w(oe.$$.fragment,e),w(ie.$$.fragment,e),w(ne.$$.fragment,e),w(pe.$$.fragment,e),w(le.$$.fragment,e),it=!1},d(e){t($),e&&t(Me),e&&t(_),v(G),e&&t(Be),e&&t(y),v(K),e&&t(Le),e&&t(he),e&&t(Ue),v(C,e),e&&t(He),e&&t(x),v(J),e&&t(Ve),e&&t(de),e&&t(ze),v(q,e),e&&t(De),e&&t(E),v(O),e&&t(Ge),e&&t(me),e&&t(Ke),v(F,e),e&&t(Ce),e&&t(A),v(Q),e&&t(Je),e&&t(fe),e&&t(qe),e&&t(N),v(W),e&&t(Oe),e&&t(Y),e&&t(Fe),v(ee,e),e&&t(Qe),e&&t(k),v(te),e&&t(We),e&&t(ce),e&&t(Ye),v(ae,e),e&&t(Ze),e&&t(R),v(re),e&&t(et),e&&t(H),e&&t(tt),v(oe,e),e&&t(at),e&&t(S),v(ie),e&&t(rt),v(ne,e),e&&t(st),e&&t(T),v(pe),e&&t(ot),v(le,e)}}}const Va={local:"training-examples",sections:[{local:"efficientnetb2-with-randaugment-804-top1-951-top5",title:"EfficientNet-B2 with RandAugment - 80.4 top-1, 95.1 top-5"},{local:"mixnetxl-with-randaugment-805-top1-949-top5",title:"MixNet-XL with RandAugment - 80.5 top-1, 94.9 top-5"},{local:"seresnext26d-and-seresnext26t",title:"SE-ResNeXt-26-D and SE-ResNeXt-26-T"},{local:"efficientnetb3-with-randaugment-815-top1-957-top5",title:"EfficientNet-B3 with RandAugment - 81.5 top-1, 95.7 top-5"},{local:"efficientnetb0-with-randaugment-777-top1-953-top5",title:"EfficientNet-B0 with RandAugment - 77.7 top-1, 95.3 top-5"},{local:"resnet50-with-jsd-loss-and-randaugment-clean-2x-ra-augs-7904-top1-9439-top5",title:"ResNet50 with JSD loss and RandAugment (clean + 2x RA augs) - 79.04 top-1, 94.39 top-5"},{local:"efficientnetes-edgetpusmall-with-randaugment-78066-top1-93926-top5",title:"EfficientNet-ES (EdgeTPU-Small) with RandAugment - 78.066 top-1, 93.926 top-5"},{local:"mobilenetv3large100-75766-top1-92542-top5",title:"MobileNetV3-Large-100 - 75.766 top-1, 92,542 top-5"},{local:"resnext50-32x4d-w-randaugment-79762-top1-9460-top5",title:"ResNeXt-50 32x4d w/ RandAugment - 79.762 top-1, 94.60 top-5"}],title:"Training Examples"};function za(Ft){return Ua(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ca extends ja{constructor($){super();Xa(this,$,za,Ha,Ma,{})}}export{Ca as default,Va as metadata};
