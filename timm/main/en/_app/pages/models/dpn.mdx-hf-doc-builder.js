import{S as ls,i as rs,s as is,e as n,k as m,w as f,t as i,M as ps,c as o,d as t,m as c,a as l,x as u,h as p,b as h,G as s,g as r,y as d,L as hs,q as g,o as w,B as v,v as ms}from"../../chunks/vendor-hf-doc-builder.js";import{I as we}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as ne}from"../../chunks/CodeBlock-hf-doc-builder.js";function cs(Dt){let j,ve,b,E,oe,H,Qe,le,We,_e,_,Ze,re,et,tt,Y,st,at,je,P,nt,L,ot,lt,be,$,N,ie,R,rt,pe,it,$e,K,pt,ye,J,ke,Q,ht,xe,z,Ee,W,mt,Pe,B,Ne,Z,ct,Se,G,Te,S,ft,he,ut,dt,Ae,T,gt,ee,wt,vt,De,y,A,me,X,_t,ce,jt,qe,te,bt,Ie,M,Ce,D,$t,U,yt,kt,He,k,q,fe,F,xt,ue,Et,Ye,I,Pt,se,Nt,St,Le,x,C,de,O,Tt,ge,At,Re,V,Je;return H=new we({}),R=new we({}),J=new ne({props:{code:`import timm
model = timm.create_model('dpn107', pretrained=True)
model.eval()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> timm
<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;dpn107&#x27;</span>, pretrained=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()`}}),z=new ne({props:{code:`import urllib
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-meta">&gt;&gt;&gt; </span>config = resolve_data_config({}, model=model)
<span class="hljs-meta">&gt;&gt;&gt; </span>transform = create_transform(**config)

<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://github.com/pytorch/hub/raw/master/images/dog.jpg&quot;</span>, <span class="hljs-string">&quot;dog.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(filename).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tensor = transform(img).unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-comment"># transform and add batch dimension</span>`}}),B=new ne({props:{code:`import torch
with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
print(probabilities.shape)
# prints: torch.Size([1000])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    out = model(tensor)
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(probabilities.shape)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints: torch.Size([1000])</span>`}}),G=new ne({props:{code:`# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
# prints class names and probabilities like:
# [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get imagenet class mappings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>    categories = [s.strip() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> f.readlines()]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Print top categories per image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>top5_prob, top5_catid = torch.topk(probabilities, <span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top5_prob.size(<span class="hljs-number">0</span>)):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(categories[top5_catid[i]], top5_prob[i].item())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints class names and probabilities like:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [(&#x27;Samoyed&#x27;, 0.6425196528434753), (&#x27;Pomeranian&#x27;, 0.04062102362513542), (&#x27;keeshond&#x27;, 0.03186424449086189), (&#x27;white wolf&#x27;, 0.01739676296710968), (&#x27;Eskimo dog&#x27;, 0.011717947199940681)]</span>`}}),X=new we({}),M=new ne({props:{code:"model = timm.create_model('dpn107', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;dpn107&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=NUM_FINETUNE_CLASSES)'}}),F=new we({}),O=new we({}),V=new ne({props:{code:`@misc{chen2017dual,
      title={Dual Path Networks}, 
      author={Yunpeng Chen and Jianan Li and Huaxin Xiao and Xiaojie Jin and Shuicheng Yan and Jiashi Feng},
      year={2017},
      eprint={1707.01629},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}`,highlighted:`@misc{chen2017dual,
      title={Dual Path Networks}, 
      author={Yunpeng Chen <span class="hljs-keyword">and </span><span class="hljs-keyword">Jianan </span>Li <span class="hljs-keyword">and </span>Huaxin Xiao <span class="hljs-keyword">and </span>Xiaojie <span class="hljs-keyword">Jin </span><span class="hljs-keyword">and </span><span class="hljs-keyword">Shuicheng </span>Yan <span class="hljs-keyword">and </span><span class="hljs-keyword">Jiashi </span>Feng},
      year={<span class="hljs-number">2017</span>},
      eprint={<span class="hljs-number">1707</span>.<span class="hljs-number">01629</span>},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}`}}),{c(){j=n("meta"),ve=m(),b=n("h1"),E=n("a"),oe=n("span"),f(H.$$.fragment),Qe=m(),le=n("span"),We=i("Dual Path Network (DPN)"),_e=m(),_=n("p"),Ze=i("A "),re=n("strong"),et=i("Dual Path Network (DPN)"),tt=i(" is a convolutional neural network which presents a new topology of connection paths internally. The intuition is that "),Y=n("a"),st=i("ResNets"),at=i(" enables feature re-usage while DenseNet enables new feature exploration, and both are important for learning good representations. To enjoy the benefits from both path topologies, Dual Path Networks share common features while maintaining the flexibility to explore new features through dual path architectures."),je=m(),P=n("p"),nt=i("The principal building block is an "),L=n("a"),ot=i("DPN Block"),lt=i("."),be=m(),$=n("h2"),N=n("a"),ie=n("span"),f(R.$$.fragment),rt=m(),pe=n("span"),it=i("How do I use this model on an image?"),$e=m(),K=n("p"),pt=i("To load a pretrained model:"),ye=m(),f(J.$$.fragment),ke=m(),Q=n("p"),ht=i("To load and preprocess the image:"),xe=m(),f(z.$$.fragment),Ee=m(),W=n("p"),mt=i("To get the model predictions:"),Pe=m(),f(B.$$.fragment),Ne=m(),Z=n("p"),ct=i("To get the top-5 predictions class names:"),Se=m(),f(G.$$.fragment),Te=m(),S=n("p"),ft=i("Replace the model name with the variant you want to use, e.g. "),he=n("code"),ut=i("dpn107"),dt=i(". You can find the IDs in the model summaries at the top of this page."),Ae=m(),T=n("p"),gt=i("To extract image features with this model, follow the "),ee=n("a"),wt=i("timm feature extraction examples"),vt=i(", just change the name of the model you want to use."),De=m(),y=n("h2"),A=n("a"),me=n("span"),f(X.$$.fragment),_t=m(),ce=n("span"),jt=i("How do I finetune this model?"),qe=m(),te=n("p"),bt=i("You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Ie=m(),f(M.$$.fragment),Ce=m(),D=n("p"),$t=i("To finetune on your own dataset, you have to write a training loop or adapt "),U=n("a"),yt=i(`timm\u2019s training
script`),kt=i(" to use your dataset."),He=m(),k=n("h2"),q=n("a"),fe=n("span"),f(F.$$.fragment),xt=m(),ue=n("span"),Et=i("How do I train this model?"),Ye=m(),I=n("p"),Pt=i("You can follow the "),se=n("a"),Nt=i("timm recipe scripts"),St=i(" for training a new model afresh."),Le=m(),x=n("h2"),C=n("a"),de=n("span"),f(O.$$.fragment),Tt=m(),ge=n("span"),At=i("Citation"),Re=m(),f(V.$$.fragment),this.h()},l(e){const a=ps('[data-svelte="svelte-1phssyn"]',document.head);j=o(a,"META",{name:!0,content:!0}),a.forEach(t),ve=c(e),b=o(e,"H1",{class:!0});var ze=l(b);E=o(ze,"A",{id:!0,class:!0,href:!0});var qt=l(E);oe=o(qt,"SPAN",{});var It=l(oe);u(H.$$.fragment,It),It.forEach(t),qt.forEach(t),Qe=c(ze),le=o(ze,"SPAN",{});var Ct=l(le);We=p(Ct,"Dual Path Network (DPN)"),Ct.forEach(t),ze.forEach(t),_e=c(e),_=o(e,"P",{});var ae=l(_);Ze=p(ae,"A "),re=o(ae,"STRONG",{});var Ht=l(re);et=p(Ht,"Dual Path Network (DPN)"),Ht.forEach(t),tt=p(ae," is a convolutional neural network which presents a new topology of connection paths internally. The intuition is that "),Y=o(ae,"A",{href:!0,rel:!0});var Yt=l(Y);st=p(Yt,"ResNets"),Yt.forEach(t),at=p(ae," enables feature re-usage while DenseNet enables new feature exploration, and both are important for learning good representations. To enjoy the benefits from both path topologies, Dual Path Networks share common features while maintaining the flexibility to explore new features through dual path architectures."),ae.forEach(t),je=c(e),P=o(e,"P",{});var Be=l(P);nt=p(Be,"The principal building block is an "),L=o(Be,"A",{href:!0,rel:!0});var Lt=l(L);ot=p(Lt,"DPN Block"),Lt.forEach(t),lt=p(Be,"."),Be.forEach(t),be=c(e),$=o(e,"H2",{class:!0});var Ge=l($);N=o(Ge,"A",{id:!0,class:!0,href:!0});var Rt=l(N);ie=o(Rt,"SPAN",{});var Jt=l(ie);u(R.$$.fragment,Jt),Jt.forEach(t),Rt.forEach(t),rt=c(Ge),pe=o(Ge,"SPAN",{});var zt=l(pe);it=p(zt,"How do I use this model on an image?"),zt.forEach(t),Ge.forEach(t),$e=c(e),K=o(e,"P",{});var Bt=l(K);pt=p(Bt,"To load a pretrained model:"),Bt.forEach(t),ye=c(e),u(J.$$.fragment,e),ke=c(e),Q=o(e,"P",{});var Gt=l(Q);ht=p(Gt,"To load and preprocess the image:"),Gt.forEach(t),xe=c(e),u(z.$$.fragment,e),Ee=c(e),W=o(e,"P",{});var Xt=l(W);mt=p(Xt,"To get the model predictions:"),Xt.forEach(t),Pe=c(e),u(B.$$.fragment,e),Ne=c(e),Z=o(e,"P",{});var Mt=l(Z);ct=p(Mt,"To get the top-5 predictions class names:"),Mt.forEach(t),Se=c(e),u(G.$$.fragment,e),Te=c(e),S=o(e,"P",{});var Xe=l(S);ft=p(Xe,"Replace the model name with the variant you want to use, e.g. "),he=o(Xe,"CODE",{});var Ut=l(he);ut=p(Ut,"dpn107"),Ut.forEach(t),dt=p(Xe,". You can find the IDs in the model summaries at the top of this page."),Xe.forEach(t),Ae=c(e),T=o(e,"P",{});var Me=l(T);gt=p(Me,"To extract image features with this model, follow the "),ee=o(Me,"A",{href:!0});var Ft=l(ee);wt=p(Ft,"timm feature extraction examples"),Ft.forEach(t),vt=p(Me,", just change the name of the model you want to use."),Me.forEach(t),De=c(e),y=o(e,"H2",{class:!0});var Ue=l(y);A=o(Ue,"A",{id:!0,class:!0,href:!0});var Ot=l(A);me=o(Ot,"SPAN",{});var Vt=l(me);u(X.$$.fragment,Vt),Vt.forEach(t),Ot.forEach(t),_t=c(Ue),ce=o(Ue,"SPAN",{});var Kt=l(ce);jt=p(Kt,"How do I finetune this model?"),Kt.forEach(t),Ue.forEach(t),qe=c(e),te=o(e,"P",{});var Qt=l(te);bt=p(Qt,"You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Qt.forEach(t),Ie=c(e),u(M.$$.fragment,e),Ce=c(e),D=o(e,"P",{});var Fe=l(D);$t=p(Fe,"To finetune on your own dataset, you have to write a training loop or adapt "),U=o(Fe,"A",{href:!0,rel:!0});var Wt=l(U);yt=p(Wt,`timm\u2019s training
script`),Wt.forEach(t),kt=p(Fe," to use your dataset."),Fe.forEach(t),He=c(e),k=o(e,"H2",{class:!0});var Oe=l(k);q=o(Oe,"A",{id:!0,class:!0,href:!0});var Zt=l(q);fe=o(Zt,"SPAN",{});var es=l(fe);u(F.$$.fragment,es),es.forEach(t),Zt.forEach(t),xt=c(Oe),ue=o(Oe,"SPAN",{});var ts=l(ue);Et=p(ts,"How do I train this model?"),ts.forEach(t),Oe.forEach(t),Ye=c(e),I=o(e,"P",{});var Ve=l(I);Pt=p(Ve,"You can follow the "),se=o(Ve,"A",{href:!0});var ss=l(se);Nt=p(ss,"timm recipe scripts"),ss.forEach(t),St=p(Ve," for training a new model afresh."),Ve.forEach(t),Le=c(e),x=o(e,"H2",{class:!0});var Ke=l(x);C=o(Ke,"A",{id:!0,class:!0,href:!0});var as=l(C);de=o(as,"SPAN",{});var ns=l(de);u(O.$$.fragment,ns),ns.forEach(t),as.forEach(t),Tt=c(Ke),ge=o(Ke,"SPAN",{});var os=l(ge);At=p(os,"Citation"),os.forEach(t),Ke.forEach(t),Re=c(e),u(V.$$.fragment,e),this.h()},h(){h(j,"name","hf:doc:metadata"),h(j,"content",JSON.stringify(fs)),h(E,"id","dual-path-network-dpn"),h(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(E,"href","#dual-path-network-dpn"),h(b,"class","relative group"),h(Y,"href","https://paperswithcode.com/method/resnet"),h(Y,"rel","nofollow"),h(L,"href","https://paperswithcode.com/method/dpn-block"),h(L,"rel","nofollow"),h(N,"id","how-do-i-use-this-model-on-an-image"),h(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(N,"href","#how-do-i-use-this-model-on-an-image"),h($,"class","relative group"),h(ee,"href","../feature_extraction"),h(A,"id","how-do-i-finetune-this-model"),h(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(A,"href","#how-do-i-finetune-this-model"),h(y,"class","relative group"),h(U,"href","https://github.com/rwightman/pytorch-image-models/blob/master/train.py"),h(U,"rel","nofollow"),h(q,"id","how-do-i-train-this-model"),h(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(q,"href","#how-do-i-train-this-model"),h(k,"class","relative group"),h(se,"href","../scripts"),h(C,"id","citation"),h(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(C,"href","#citation"),h(x,"class","relative group")},m(e,a){s(document.head,j),r(e,ve,a),r(e,b,a),s(b,E),s(E,oe),d(H,oe,null),s(b,Qe),s(b,le),s(le,We),r(e,_e,a),r(e,_,a),s(_,Ze),s(_,re),s(re,et),s(_,tt),s(_,Y),s(Y,st),s(_,at),r(e,je,a),r(e,P,a),s(P,nt),s(P,L),s(L,ot),s(P,lt),r(e,be,a),r(e,$,a),s($,N),s(N,ie),d(R,ie,null),s($,rt),s($,pe),s(pe,it),r(e,$e,a),r(e,K,a),s(K,pt),r(e,ye,a),d(J,e,a),r(e,ke,a),r(e,Q,a),s(Q,ht),r(e,xe,a),d(z,e,a),r(e,Ee,a),r(e,W,a),s(W,mt),r(e,Pe,a),d(B,e,a),r(e,Ne,a),r(e,Z,a),s(Z,ct),r(e,Se,a),d(G,e,a),r(e,Te,a),r(e,S,a),s(S,ft),s(S,he),s(he,ut),s(S,dt),r(e,Ae,a),r(e,T,a),s(T,gt),s(T,ee),s(ee,wt),s(T,vt),r(e,De,a),r(e,y,a),s(y,A),s(A,me),d(X,me,null),s(y,_t),s(y,ce),s(ce,jt),r(e,qe,a),r(e,te,a),s(te,bt),r(e,Ie,a),d(M,e,a),r(e,Ce,a),r(e,D,a),s(D,$t),s(D,U),s(U,yt),s(D,kt),r(e,He,a),r(e,k,a),s(k,q),s(q,fe),d(F,fe,null),s(k,xt),s(k,ue),s(ue,Et),r(e,Ye,a),r(e,I,a),s(I,Pt),s(I,se),s(se,Nt),s(I,St),r(e,Le,a),r(e,x,a),s(x,C),s(C,de),d(O,de,null),s(x,Tt),s(x,ge),s(ge,At),r(e,Re,a),d(V,e,a),Je=!0},p:hs,i(e){Je||(g(H.$$.fragment,e),g(R.$$.fragment,e),g(J.$$.fragment,e),g(z.$$.fragment,e),g(B.$$.fragment,e),g(G.$$.fragment,e),g(X.$$.fragment,e),g(M.$$.fragment,e),g(F.$$.fragment,e),g(O.$$.fragment,e),g(V.$$.fragment,e),Je=!0)},o(e){w(H.$$.fragment,e),w(R.$$.fragment,e),w(J.$$.fragment,e),w(z.$$.fragment,e),w(B.$$.fragment,e),w(G.$$.fragment,e),w(X.$$.fragment,e),w(M.$$.fragment,e),w(F.$$.fragment,e),w(O.$$.fragment,e),w(V.$$.fragment,e),Je=!1},d(e){t(j),e&&t(ve),e&&t(b),v(H),e&&t(_e),e&&t(_),e&&t(je),e&&t(P),e&&t(be),e&&t($),v(R),e&&t($e),e&&t(K),e&&t(ye),v(J,e),e&&t(ke),e&&t(Q),e&&t(xe),v(z,e),e&&t(Ee),e&&t(W),e&&t(Pe),v(B,e),e&&t(Ne),e&&t(Z),e&&t(Se),v(G,e),e&&t(Te),e&&t(S),e&&t(Ae),e&&t(T),e&&t(De),e&&t(y),v(X),e&&t(qe),e&&t(te),e&&t(Ie),v(M,e),e&&t(Ce),e&&t(D),e&&t(He),e&&t(k),v(F),e&&t(Ye),e&&t(I),e&&t(Le),e&&t(x),v(O),e&&t(Re),v(V,e)}}}const fs={local:"dual-path-network-dpn",sections:[{local:"how-do-i-use-this-model-on-an-image",title:"How do I use this model on an image?"},{local:"how-do-i-finetune-this-model",title:"How do I finetune this model?"},{local:"how-do-i-train-this-model",title:"How do I train this model?"},{local:"citation",title:"Citation"}],title:"Dual Path Network (DPN)"};function us(Dt){return ms(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vs extends ls{constructor(j){super();rs(this,j,us,cs,is,{})}}export{vs as default,fs as metadata};
