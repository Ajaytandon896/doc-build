import{S as et,i as tt,s as at,e as n,k as f,w as M,t as l,M as it,c as r,d as t,m as d,a as s,x as C,h as p,b as c,G as a,g as o,y as V,q as U,o as X,B as G,v as nt}from"../chunks/vendor-hf-doc-builder.js";import{T as rt}from"../chunks/Tip-hf-doc-builder.js";import{I as Ve}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as Ue}from"../chunks/CodeBlock-hf-doc-builder.js";function ot(Z){let h;return{c(){h=l("It is recommended to use PyTorch 1.9+ w/ PyTorch native AMP and DDP instead of APEX AMP. --amp defaults to native AMP as of timm ver 0.4.3.  --apex-amp will force use of APEX components if they are installed.")},l(u){h=p(u,"It is recommended to use PyTorch 1.9+ w/ PyTorch native AMP and DDP instead of APEX AMP. --amp defaults to native AMP as of timm ver 0.4.3.  --apex-amp will force use of APEX components if they are installed.")},m(u,m){o(u,h,m)},d(u){u&&t(h)}}}function st(Z){let h,u,m,y,B,E,ue,F,ve,ee,v,$e,A,ge,_e,x,ye,we,te,g,w,L,S,be,J,Pe,ae,$,Ee,K,Ae,xe,Q,Se,ke,ie,O,Te,ne,k,re,b,oe,_,P,W,T,Ie,Y,Ne,se,j,De,le,q,Me,pe,I,ce,H,Ce,fe,N,de;return E=new Ve({}),S=new Ve({}),k=new Ue({props:{code:"./distributed_train.sh 4 /data/imagenet --model seresnet34 --sched cosine --epochs 150 --warmup-epochs 5 --lr 0.4 --reprob 0.5 --remode pixel --batch-size 256 --amp -j 4",highlighted:'./distributed_train.sh 4 /data/imagenet --model seresnet34 --<span class="hljs-built_in">sched</span> cosine --epochs 150 --warmup-epochs 5 --lr 0.4 --reprob 0.5 --remode pixel --batch-size 256 --amp -j 4'}}),b=new rt({props:{$$slots:{default:[ot]},$$scope:{ctx:Z}}}),T=new Ve({}),I=new Ue({props:{code:"python validate.py /imagenet/validation/ --model seresnext26_32x4d --pretrained",highlighted:"python validate.py /imagenet/validation/ --model seresnext26_32x4d --pretrained"}}),N=new Ue({props:{code:"python inference.py /imagenet/validation/ --model mobilenetv3_large_100 --checkpoint ./output/train/model_best.pth.tar",highlighted:"python inference.py /imagenet/validation/ --model mobilenetv3_large_100 --checkpoint ./output/train/model_best.pth.tar"}}),{c(){h=n("meta"),u=f(),m=n("h1"),y=n("a"),B=n("span"),M(E.$$.fragment),ue=f(),F=n("span"),ve=l("Scripts"),ee=l(`

A train, validation, inference, and checkpoint cleaning script included in the github root folder. Scripts are not currently packaged in the pip release.
`),v=n("p"),$e=l("The training and validation scripts evolved from early versions of the "),A=n("a"),ge=l("PyTorch Imagenet Examples"),_e=l(`. I have added significant functionality over time, including CUDA specific performance enhancements based on
`),x=n("a"),ye=l("NVIDIA\u2019s APEX Examples"),we=l("."),te=f(),g=n("h2"),w=n("a"),L=n("span"),M(S.$$.fragment),be=f(),J=n("span"),Pe=l("Training Script"),ae=f(),$=n("p"),Ee=l("The variety of training args is large and not all combinations of options (or even options) have been fully tested. For the training dataset folder, specify the folder to the base that contains a "),K=n("code"),Ae=l("train"),xe=l(" and "),Q=n("code"),Se=l("validation"),ke=l(" folder."),ie=f(),O=n("p"),Te=l("To train an SE-ResNet34 on ImageNet, locally distributed, 4 GPUs, one process per GPU w/ cosine schedule, random-erasing prob of 50% and per-pixel random value:"),ne=f(),M(k.$$.fragment),re=f(),M(b.$$.fragment),oe=f(),_=n("h2"),P=n("a"),W=n("span"),M(T.$$.fragment),Ie=f(),Y=n("span"),Ne=l("Validation / Inference Scripts"),se=f(),j=n("p"),De=l("Validation and inference scripts are similar in usage. One outputs metrics on a validation set and the other outputs topk class ids in a csv. Specify the folder containing validation images, not the base as in training script."),le=f(),q=n("p"),Me=l("To validate with the model\u2019s pretrained weights (if they exist):"),pe=f(),M(I.$$.fragment),ce=f(),H=n("p"),Ce=l("To run inference from a checkpoint:"),fe=f(),M(N.$$.fragment),this.h()},l(e){const i=it('[data-svelte="svelte-1phssyn"]',document.head);h=r(i,"META",{name:!0,content:!0}),i.forEach(t),u=d(e),m=r(e,"H1",{class:!0});var D=s(m);y=r(D,"A",{id:!0,class:!0,href:!0});var Xe=s(y);B=r(Xe,"SPAN",{});var Ge=s(B);C(E.$$.fragment,Ge),Ge.forEach(t),Xe.forEach(t),ue=d(D),F=r(D,"SPAN",{});var Oe=s(F);ve=p(Oe,"Scripts"),Oe.forEach(t),D.forEach(t),ee=p(e,`

A train, validation, inference, and checkpoint cleaning script included in the github root folder. Scripts are not currently packaged in the pip release.
`),v=r(e,"P",{});var R=s(v);$e=p(R,"The training and validation scripts evolved from early versions of the "),A=r(R,"A",{href:!0,rel:!0});var je=s(A);ge=p(je,"PyTorch Imagenet Examples"),je.forEach(t),_e=p(R,`. I have added significant functionality over time, including CUDA specific performance enhancements based on
`),x=r(R,"A",{href:!0,rel:!0});var qe=s(x);ye=p(qe,"NVIDIA\u2019s APEX Examples"),qe.forEach(t),we=p(R,"."),R.forEach(t),te=d(e),g=r(e,"H2",{class:!0});var he=s(g);w=r(he,"A",{id:!0,class:!0,href:!0});var He=s(w);L=r(He,"SPAN",{});var Re=s(L);C(S.$$.fragment,Re),Re.forEach(t),He.forEach(t),be=d(he),J=r(he,"SPAN",{});var ze=s(J);Pe=p(ze,"Training Script"),ze.forEach(t),he.forEach(t),ae=d(e),$=r(e,"P",{});var z=s($);Ee=p(z,"The variety of training args is large and not all combinations of options (or even options) have been fully tested. For the training dataset folder, specify the folder to the base that contains a "),K=r(z,"CODE",{});var Be=s(K);Ae=p(Be,"train"),Be.forEach(t),xe=p(z," and "),Q=r(z,"CODE",{});var Fe=s(Q);Se=p(Fe,"validation"),Fe.forEach(t),ke=p(z," folder."),z.forEach(t),ie=d(e),O=r(e,"P",{});var Le=s(O);Te=p(Le,"To train an SE-ResNet34 on ImageNet, locally distributed, 4 GPUs, one process per GPU w/ cosine schedule, random-erasing prob of 50% and per-pixel random value:"),Le.forEach(t),ne=d(e),C(k.$$.fragment,e),re=d(e),C(b.$$.fragment,e),oe=d(e),_=r(e,"H2",{class:!0});var me=s(_);P=r(me,"A",{id:!0,class:!0,href:!0});var Je=s(P);W=r(Je,"SPAN",{});var Ke=s(W);C(T.$$.fragment,Ke),Ke.forEach(t),Je.forEach(t),Ie=d(me),Y=r(me,"SPAN",{});var Qe=s(Y);Ne=p(Qe,"Validation / Inference Scripts"),Qe.forEach(t),me.forEach(t),se=d(e),j=r(e,"P",{});var We=s(j);De=p(We,"Validation and inference scripts are similar in usage. One outputs metrics on a validation set and the other outputs topk class ids in a csv. Specify the folder containing validation images, not the base as in training script."),We.forEach(t),le=d(e),q=r(e,"P",{});var Ye=s(q);Me=p(Ye,"To validate with the model\u2019s pretrained weights (if they exist):"),Ye.forEach(t),pe=d(e),C(I.$$.fragment,e),ce=d(e),H=r(e,"P",{});var Ze=s(H);Ce=p(Ze,"To run inference from a checkpoint:"),Ze.forEach(t),fe=d(e),C(N.$$.fragment,e),this.h()},h(){c(h,"name","hf:doc:metadata"),c(h,"content",JSON.stringify(lt)),c(y,"id","scripts"),c(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y,"href","#scripts"),c(m,"class","relative group"),c(A,"href","https://github.com/pytorch/examples"),c(A,"rel","nofollow"),c(x,"href","https://github.com/NVIDIA/apex/tree/master/examples"),c(x,"rel","nofollow"),c(w,"id","training-script"),c(w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w,"href","#training-script"),c(g,"class","relative group"),c(P,"id","validation-inference-scripts"),c(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P,"href","#validation-inference-scripts"),c(_,"class","relative group")},m(e,i){a(document.head,h),o(e,u,i),o(e,m,i),a(m,y),a(y,B),V(E,B,null),a(m,ue),a(m,F),a(F,ve),o(e,ee,i),o(e,v,i),a(v,$e),a(v,A),a(A,ge),a(v,_e),a(v,x),a(x,ye),a(v,we),o(e,te,i),o(e,g,i),a(g,w),a(w,L),V(S,L,null),a(g,be),a(g,J),a(J,Pe),o(e,ae,i),o(e,$,i),a($,Ee),a($,K),a(K,Ae),a($,xe),a($,Q),a(Q,Se),a($,ke),o(e,ie,i),o(e,O,i),a(O,Te),o(e,ne,i),V(k,e,i),o(e,re,i),V(b,e,i),o(e,oe,i),o(e,_,i),a(_,P),a(P,W),V(T,W,null),a(_,Ie),a(_,Y),a(Y,Ne),o(e,se,i),o(e,j,i),a(j,De),o(e,le,i),o(e,q,i),a(q,Me),o(e,pe,i),V(I,e,i),o(e,ce,i),o(e,H,i),a(H,Ce),o(e,fe,i),V(N,e,i),de=!0},p(e,[i]){const D={};i&2&&(D.$$scope={dirty:i,ctx:e}),b.$set(D)},i(e){de||(U(E.$$.fragment,e),U(S.$$.fragment,e),U(k.$$.fragment,e),U(b.$$.fragment,e),U(T.$$.fragment,e),U(I.$$.fragment,e),U(N.$$.fragment,e),de=!0)},o(e){X(E.$$.fragment,e),X(S.$$.fragment,e),X(k.$$.fragment,e),X(b.$$.fragment,e),X(T.$$.fragment,e),X(I.$$.fragment,e),X(N.$$.fragment,e),de=!1},d(e){t(h),e&&t(u),e&&t(m),G(E),e&&t(ee),e&&t(v),e&&t(te),e&&t(g),G(S),e&&t(ae),e&&t($),e&&t(ie),e&&t(O),e&&t(ne),G(k,e),e&&t(re),G(b,e),e&&t(oe),e&&t(_),G(T),e&&t(se),e&&t(j),e&&t(le),e&&t(q),e&&t(pe),G(I,e),e&&t(ce),e&&t(H),e&&t(fe),G(N,e)}}}const lt={local:"scripts",sections:[{local:"training-script",title:"Training Script"},{local:"validation-inference-scripts",title:"Validation / Inference Scripts"}],title:"Scripts"};function pt(Z){return nt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mt extends et{constructor(h){super();tt(this,h,pt,st,at,{})}}export{mt as default,lt as metadata};
