import{S as us,i as gs,s as _s,e as n,k as r,w as d,t as m,M as ws,c as i,d as e,m as p,a as o,x as c,h,b as f,G as s,g as l,y as u,L as vs,q as g,o as _,B as w,v as bs}from"../../chunks/vendor-hf-doc-builder.js";import{I as bt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as nt}from"../../chunks/CodeBlock-hf-doc-builder.js";function js(Ge){let b,jt,j,x,it,H,ee,lt,se,$t,C,ot,ae,ne,yt,v,rt,ie,le,pt,oe,re,mt,pe,Et,D,me,kt,V,he,xt,$,S,ht,z,fe,ft,de,St,J,ce,Nt,G,Pt,K,ue,It,R,Tt,W,ge,qt,M,At,Z,_e,Lt,Y,Ht,N,we,dt,ve,be,Ct,P,je,tt,$e,ye,zt,y,I,ct,U,Ee,ut,ke,Gt,et,xe,Rt,B,Mt,T,Se,F,Ne,Pe,Yt,E,q,gt,O,Ie,_t,Te,Ut,A,qe,st,Ae,Le,Bt,k,L,wt,Q,He,vt,Ce,Ft,X,Ot;return H=new bt({}),z=new bt({}),G=new nt({props:{code:`import timm
model = timm.create_model('tf_efficientnet_b0_ns', pretrained=True)
model.eval()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> timm
<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;tf_efficientnet_b0_ns&#x27;</span>, pretrained=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()`}}),R=new nt({props:{code:`import urllib
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-meta">&gt;&gt;&gt; </span>config = resolve_data_config({}, model=model)
<span class="hljs-meta">&gt;&gt;&gt; </span>transform = create_transform(**config)

<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://github.com/pytorch/hub/raw/master/images/dog.jpg&quot;</span>, <span class="hljs-string">&quot;dog.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(filename).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tensor = transform(img).unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-comment"># transform and add batch dimension</span>`}}),M=new nt({props:{code:`import torch
with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
print(probabilities.shape)
# prints: torch.Size([1000])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    out = model(tensor)
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(probabilities.shape)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints: torch.Size([1000])</span>`}}),Y=new nt({props:{code:`# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
# prints class names and probabilities like:
# [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get imagenet class mappings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>    categories = [s.strip() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> f.readlines()]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Print top categories per image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>top5_prob, top5_catid = torch.topk(probabilities, <span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top5_prob.size(<span class="hljs-number">0</span>)):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(categories[top5_catid[i]], top5_prob[i].item())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints class names and probabilities like:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [(&#x27;Samoyed&#x27;, 0.6425196528434753), (&#x27;Pomeranian&#x27;, 0.04062102362513542), (&#x27;keeshond&#x27;, 0.03186424449086189), (&#x27;white wolf&#x27;, 0.01739676296710968), (&#x27;Eskimo dog&#x27;, 0.011717947199940681)]</span>`}}),U=new bt({}),B=new nt({props:{code:"model = timm.create_model('tf_efficientnet_b0_ns', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;tf_efficientnet_b0_ns&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=NUM_FINETUNE_CLASSES)'}}),O=new bt({}),Q=new bt({}),X=new nt({props:{code:`@misc{xie2020selftraining,
      title={Self-training with Noisy Student improves ImageNet classification}, 
      author={Qizhe Xie and Minh-Thang Luong and Eduard Hovy and Quoc V. Le},
      year={2020},
      eprint={1911.04252},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}`,highlighted:`@misc{xie2020selftraining,
      <span class="hljs-attr">title={Self-training</span> <span class="hljs-keyword">with</span> Noisy Student improves ImageNet classification}, 
      <span class="hljs-attr">author={Qizhe</span> Xie <span class="hljs-literal">and</span> Minh-Thang Luong <span class="hljs-literal">and</span> Eduard Hovy <span class="hljs-literal">and</span> Quoc V. Le},
      <span class="hljs-attr">year={2020},</span>
      <span class="hljs-attr">eprint={1911.04252},</span>
      <span class="hljs-attr">archivePrefix={arXiv},</span>
      <span class="hljs-attr">primaryClass={cs.LG}</span>
}`}}),{c(){b=n("meta"),jt=r(),j=n("h1"),x=n("a"),it=n("span"),d(H.$$.fragment),ee=r(),lt=n("span"),se=m("Noisy Student (EfficientNet)"),$t=r(),C=n("p"),ot=n("strong"),ae=m("Noisy Student Training"),ne=m(` is a semi-supervised learning approach. It extends the idea of self-training
and distillation with the use of equal-or-larger student models and noise added to the student during learning. It has three main steps:`),yt=r(),v=n("ol"),rt=n("li"),ie=m("train a teacher model on labeled images"),le=r(),pt=n("li"),oe=m("use the teacher to generate pseudo labels on unlabeled images"),re=r(),mt=n("li"),pe=m("train a student model on the combination of labeled images and pseudo labeled images."),Et=r(),D=n("p"),me=m("The algorithm is iterated a few times by treating the student as a teacher to relabel the unlabeled data and training a new student."),kt=r(),V=n("p"),he=m("Noisy Student Training seeks to improve on self-training and distillation in two ways. First, it makes the student larger than, or at least equal to, the teacher so the student can better learn from a larger dataset. Second, it adds noise to the student so the noised student is forced to learn harder from the pseudo labels. To noise the student, it uses input noise such as RandAugment data augmentation, and model noise such as dropout and stochastic depth during training."),xt=r(),$=n("h2"),S=n("a"),ht=n("span"),d(z.$$.fragment),fe=r(),ft=n("span"),de=m("How do I use this model on an image?"),St=r(),J=n("p"),ce=m("To load a pretrained model:"),Nt=r(),d(G.$$.fragment),Pt=r(),K=n("p"),ue=m("To load and preprocess the image:"),It=r(),d(R.$$.fragment),Tt=r(),W=n("p"),ge=m("To get the model predictions:"),qt=r(),d(M.$$.fragment),At=r(),Z=n("p"),_e=m("To get the top-5 predictions class names:"),Lt=r(),d(Y.$$.fragment),Ht=r(),N=n("p"),we=m("Replace the model name with the variant you want to use, e.g. "),dt=n("code"),ve=m("tf_efficientnet_b0_ns"),be=m(". You can find the IDs in the model summaries at the top of this page."),Ct=r(),P=n("p"),je=m("To extract image features with this model, follow the "),tt=n("a"),$e=m("timm feature extraction examples"),ye=m(", just change the name of the model you want to use."),zt=r(),y=n("h2"),I=n("a"),ct=n("span"),d(U.$$.fragment),Ee=r(),ut=n("span"),ke=m("How do I finetune this model?"),Gt=r(),et=n("p"),xe=m("You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Rt=r(),d(B.$$.fragment),Mt=r(),T=n("p"),Se=m("To finetune on your own dataset, you have to write a training loop or adapt "),F=n("a"),Ne=m(`timm\u2019s training
script`),Pe=m(" to use your dataset."),Yt=r(),E=n("h2"),q=n("a"),gt=n("span"),d(O.$$.fragment),Ie=r(),_t=n("span"),Te=m("How do I train this model?"),Ut=r(),A=n("p"),qe=m("You can follow the "),st=n("a"),Ae=m("timm recipe scripts"),Le=m(" for training a new model afresh."),Bt=r(),k=n("h2"),L=n("a"),wt=n("span"),d(Q.$$.fragment),He=r(),vt=n("span"),Ce=m("Citation"),Ft=r(),d(X.$$.fragment),this.h()},l(t){const a=ws('[data-svelte="svelte-1phssyn"]',document.head);b=i(a,"META",{name:!0,content:!0}),a.forEach(e),jt=p(t),j=i(t,"H1",{class:!0});var Qt=o(j);x=i(Qt,"A",{id:!0,class:!0,href:!0});var Re=o(x);it=i(Re,"SPAN",{});var Me=o(it);c(H.$$.fragment,Me),Me.forEach(e),Re.forEach(e),ee=p(Qt),lt=i(Qt,"SPAN",{});var Ye=o(lt);se=h(Ye,"Noisy Student (EfficientNet)"),Ye.forEach(e),Qt.forEach(e),$t=p(t),C=i(t,"P",{});var ze=o(C);ot=i(ze,"STRONG",{});var Ue=o(ot);ae=h(Ue,"Noisy Student Training"),Ue.forEach(e),ne=h(ze,` is a semi-supervised learning approach. It extends the idea of self-training
and distillation with the use of equal-or-larger student models and noise added to the student during learning. It has three main steps:`),ze.forEach(e),yt=p(t),v=i(t,"OL",{});var at=o(v);rt=i(at,"LI",{});var Be=o(rt);ie=h(Be,"train a teacher model on labeled images"),Be.forEach(e),le=p(at),pt=i(at,"LI",{});var Fe=o(pt);oe=h(Fe,"use the teacher to generate pseudo labels on unlabeled images"),Fe.forEach(e),re=p(at),mt=i(at,"LI",{});var Oe=o(mt);pe=h(Oe,"train a student model on the combination of labeled images and pseudo labeled images."),Oe.forEach(e),at.forEach(e),Et=p(t),D=i(t,"P",{});var Qe=o(D);me=h(Qe,"The algorithm is iterated a few times by treating the student as a teacher to relabel the unlabeled data and training a new student."),Qe.forEach(e),kt=p(t),V=i(t,"P",{});var Xe=o(V);he=h(Xe,"Noisy Student Training seeks to improve on self-training and distillation in two ways. First, it makes the student larger than, or at least equal to, the teacher so the student can better learn from a larger dataset. Second, it adds noise to the student so the noised student is forced to learn harder from the pseudo labels. To noise the student, it uses input noise such as RandAugment data augmentation, and model noise such as dropout and stochastic depth during training."),Xe.forEach(e),xt=p(t),$=i(t,"H2",{class:!0});var Xt=o($);S=i(Xt,"A",{id:!0,class:!0,href:!0});var De=o(S);ht=i(De,"SPAN",{});var Ve=o(ht);c(z.$$.fragment,Ve),Ve.forEach(e),De.forEach(e),fe=p(Xt),ft=i(Xt,"SPAN",{});var Je=o(ft);de=h(Je,"How do I use this model on an image?"),Je.forEach(e),Xt.forEach(e),St=p(t),J=i(t,"P",{});var Ke=o(J);ce=h(Ke,"To load a pretrained model:"),Ke.forEach(e),Nt=p(t),c(G.$$.fragment,t),Pt=p(t),K=i(t,"P",{});var We=o(K);ue=h(We,"To load and preprocess the image:"),We.forEach(e),It=p(t),c(R.$$.fragment,t),Tt=p(t),W=i(t,"P",{});var Ze=o(W);ge=h(Ze,"To get the model predictions:"),Ze.forEach(e),qt=p(t),c(M.$$.fragment,t),At=p(t),Z=i(t,"P",{});var ts=o(Z);_e=h(ts,"To get the top-5 predictions class names:"),ts.forEach(e),Lt=p(t),c(Y.$$.fragment,t),Ht=p(t),N=i(t,"P",{});var Dt=o(N);we=h(Dt,"Replace the model name with the variant you want to use, e.g. "),dt=i(Dt,"CODE",{});var es=o(dt);ve=h(es,"tf_efficientnet_b0_ns"),es.forEach(e),be=h(Dt,". You can find the IDs in the model summaries at the top of this page."),Dt.forEach(e),Ct=p(t),P=i(t,"P",{});var Vt=o(P);je=h(Vt,"To extract image features with this model, follow the "),tt=i(Vt,"A",{href:!0});var ss=o(tt);$e=h(ss,"timm feature extraction examples"),ss.forEach(e),ye=h(Vt,", just change the name of the model you want to use."),Vt.forEach(e),zt=p(t),y=i(t,"H2",{class:!0});var Jt=o(y);I=i(Jt,"A",{id:!0,class:!0,href:!0});var as=o(I);ct=i(as,"SPAN",{});var ns=o(ct);c(U.$$.fragment,ns),ns.forEach(e),as.forEach(e),Ee=p(Jt),ut=i(Jt,"SPAN",{});var is=o(ut);ke=h(is,"How do I finetune this model?"),is.forEach(e),Jt.forEach(e),Gt=p(t),et=i(t,"P",{});var ls=o(et);xe=h(ls,"You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),ls.forEach(e),Rt=p(t),c(B.$$.fragment,t),Mt=p(t),T=i(t,"P",{});var Kt=o(T);Se=h(Kt,"To finetune on your own dataset, you have to write a training loop or adapt "),F=i(Kt,"A",{href:!0,rel:!0});var os=o(F);Ne=h(os,`timm\u2019s training
script`),os.forEach(e),Pe=h(Kt," to use your dataset."),Kt.forEach(e),Yt=p(t),E=i(t,"H2",{class:!0});var Wt=o(E);q=i(Wt,"A",{id:!0,class:!0,href:!0});var rs=o(q);gt=i(rs,"SPAN",{});var ps=o(gt);c(O.$$.fragment,ps),ps.forEach(e),rs.forEach(e),Ie=p(Wt),_t=i(Wt,"SPAN",{});var ms=o(_t);Te=h(ms,"How do I train this model?"),ms.forEach(e),Wt.forEach(e),Ut=p(t),A=i(t,"P",{});var Zt=o(A);qe=h(Zt,"You can follow the "),st=i(Zt,"A",{href:!0});var hs=o(st);Ae=h(hs,"timm recipe scripts"),hs.forEach(e),Le=h(Zt," for training a new model afresh."),Zt.forEach(e),Bt=p(t),k=i(t,"H2",{class:!0});var te=o(k);L=i(te,"A",{id:!0,class:!0,href:!0});var fs=o(L);wt=i(fs,"SPAN",{});var ds=o(wt);c(Q.$$.fragment,ds),ds.forEach(e),fs.forEach(e),He=p(te),vt=i(te,"SPAN",{});var cs=o(vt);Ce=h(cs,"Citation"),cs.forEach(e),te.forEach(e),Ft=p(t),c(X.$$.fragment,t),this.h()},h(){f(b,"name","hf:doc:metadata"),f(b,"content",JSON.stringify($s)),f(x,"id","noisy-student-efficientnet"),f(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(x,"href","#noisy-student-efficientnet"),f(j,"class","relative group"),f(S,"id","how-do-i-use-this-model-on-an-image"),f(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(S,"href","#how-do-i-use-this-model-on-an-image"),f($,"class","relative group"),f(tt,"href","../feature_extraction"),f(I,"id","how-do-i-finetune-this-model"),f(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(I,"href","#how-do-i-finetune-this-model"),f(y,"class","relative group"),f(F,"href","https://github.com/rwightman/pytorch-image-models/blob/master/train.py"),f(F,"rel","nofollow"),f(q,"id","how-do-i-train-this-model"),f(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(q,"href","#how-do-i-train-this-model"),f(E,"class","relative group"),f(st,"href","../scripts"),f(L,"id","citation"),f(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(L,"href","#citation"),f(k,"class","relative group")},m(t,a){s(document.head,b),l(t,jt,a),l(t,j,a),s(j,x),s(x,it),u(H,it,null),s(j,ee),s(j,lt),s(lt,se),l(t,$t,a),l(t,C,a),s(C,ot),s(ot,ae),s(C,ne),l(t,yt,a),l(t,v,a),s(v,rt),s(rt,ie),s(v,le),s(v,pt),s(pt,oe),s(v,re),s(v,mt),s(mt,pe),l(t,Et,a),l(t,D,a),s(D,me),l(t,kt,a),l(t,V,a),s(V,he),l(t,xt,a),l(t,$,a),s($,S),s(S,ht),u(z,ht,null),s($,fe),s($,ft),s(ft,de),l(t,St,a),l(t,J,a),s(J,ce),l(t,Nt,a),u(G,t,a),l(t,Pt,a),l(t,K,a),s(K,ue),l(t,It,a),u(R,t,a),l(t,Tt,a),l(t,W,a),s(W,ge),l(t,qt,a),u(M,t,a),l(t,At,a),l(t,Z,a),s(Z,_e),l(t,Lt,a),u(Y,t,a),l(t,Ht,a),l(t,N,a),s(N,we),s(N,dt),s(dt,ve),s(N,be),l(t,Ct,a),l(t,P,a),s(P,je),s(P,tt),s(tt,$e),s(P,ye),l(t,zt,a),l(t,y,a),s(y,I),s(I,ct),u(U,ct,null),s(y,Ee),s(y,ut),s(ut,ke),l(t,Gt,a),l(t,et,a),s(et,xe),l(t,Rt,a),u(B,t,a),l(t,Mt,a),l(t,T,a),s(T,Se),s(T,F),s(F,Ne),s(T,Pe),l(t,Yt,a),l(t,E,a),s(E,q),s(q,gt),u(O,gt,null),s(E,Ie),s(E,_t),s(_t,Te),l(t,Ut,a),l(t,A,a),s(A,qe),s(A,st),s(st,Ae),s(A,Le),l(t,Bt,a),l(t,k,a),s(k,L),s(L,wt),u(Q,wt,null),s(k,He),s(k,vt),s(vt,Ce),l(t,Ft,a),u(X,t,a),Ot=!0},p:vs,i(t){Ot||(g(H.$$.fragment,t),g(z.$$.fragment,t),g(G.$$.fragment,t),g(R.$$.fragment,t),g(M.$$.fragment,t),g(Y.$$.fragment,t),g(U.$$.fragment,t),g(B.$$.fragment,t),g(O.$$.fragment,t),g(Q.$$.fragment,t),g(X.$$.fragment,t),Ot=!0)},o(t){_(H.$$.fragment,t),_(z.$$.fragment,t),_(G.$$.fragment,t),_(R.$$.fragment,t),_(M.$$.fragment,t),_(Y.$$.fragment,t),_(U.$$.fragment,t),_(B.$$.fragment,t),_(O.$$.fragment,t),_(Q.$$.fragment,t),_(X.$$.fragment,t),Ot=!1},d(t){e(b),t&&e(jt),t&&e(j),w(H),t&&e($t),t&&e(C),t&&e(yt),t&&e(v),t&&e(Et),t&&e(D),t&&e(kt),t&&e(V),t&&e(xt),t&&e($),w(z),t&&e(St),t&&e(J),t&&e(Nt),w(G,t),t&&e(Pt),t&&e(K),t&&e(It),w(R,t),t&&e(Tt),t&&e(W),t&&e(qt),w(M,t),t&&e(At),t&&e(Z),t&&e(Lt),w(Y,t),t&&e(Ht),t&&e(N),t&&e(Ct),t&&e(P),t&&e(zt),t&&e(y),w(U),t&&e(Gt),t&&e(et),t&&e(Rt),w(B,t),t&&e(Mt),t&&e(T),t&&e(Yt),t&&e(E),w(O),t&&e(Ut),t&&e(A),t&&e(Bt),t&&e(k),w(Q),t&&e(Ft),w(X,t)}}}const $s={local:"noisy-student-efficientnet",sections:[{local:"how-do-i-use-this-model-on-an-image",title:"How do I use this model on an image?"},{local:"how-do-i-finetune-this-model",title:"How do I finetune this model?"},{local:"how-do-i-train-this-model",title:"How do I train this model?"},{local:"citation",title:"Citation"}],title:"Noisy Student (EfficientNet)"};function ys(Ge){return bs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ss extends us{constructor(b){super();gs(this,b,ys,js,_s,{})}}export{Ss as default,$s as metadata};
