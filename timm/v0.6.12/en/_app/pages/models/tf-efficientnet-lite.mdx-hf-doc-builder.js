import{S as Ts,i as Ss,s as As,e as n,k as f,w as c,t as r,M as qs,c as i,d as t,m as h,a as o,x as u,h as p,b as m,G as s,g as l,y as d,L as Is,q as g,o as w,B as v,v as Ls}from"../../chunks/vendor-hf-doc-builder.js";import{I as ke}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as pe}from"../../chunks/CodeBlock-hf-doc-builder.js";function Cs(Kt){let b,Ee,$,N,me,z,rt,fe,pt,xe,y,he,mt,ft,ce,ht,ct,Ne,ee,ut,Pe,P,dt,U,gt,wt,Te,_,vt,R,_t,bt,G,$t,yt,Se,T,jt,B,kt,Et,Ae,j,S,ue,Y,xt,de,Nt,qe,te,Pt,Ie,F,Le,se,Tt,Ce,V,He,ae,St,Me,D,ze,ne,At,Ue,O,Re,A,qt,ge,It,Lt,Ge,q,Ct,ie,Ht,Mt,Be,k,I,we,Q,zt,ve,Ut,Ye,oe,Rt,Fe,X,Ve,L,Gt,J,Bt,Yt,De,E,C,_e,K,Ft,be,Vt,Oe,H,Dt,le,Ot,Qt,Qe,x,M,$e,W,Xt,ye,Jt,Xe,Z,Je;return z=new ke({}),Y=new ke({}),F=new pe({props:{code:`import timm
model = timm.create_model('tf_efficientnet_lite0', pretrained=True)
model.eval()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> timm
<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;tf_efficientnet_lite0&#x27;</span>, pretrained=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()`}}),V=new pe({props:{code:`import urllib
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-meta">&gt;&gt;&gt; </span>config = resolve_data_config({}, model=model)
<span class="hljs-meta">&gt;&gt;&gt; </span>transform = create_transform(**config)

<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://github.com/pytorch/hub/raw/master/images/dog.jpg&quot;</span>, <span class="hljs-string">&quot;dog.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(filename).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tensor = transform(img).unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-comment"># transform and add batch dimension</span>`}}),D=new pe({props:{code:`import torch
with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
print(probabilities.shape)
# prints: torch.Size([1000])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    out = model(tensor)
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(probabilities.shape)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints: torch.Size([1000])</span>`}}),O=new pe({props:{code:`# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
# prints class names and probabilities like:
# [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get imagenet class mappings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>    categories = [s.strip() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> f.readlines()]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Print top categories per image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>top5_prob, top5_catid = torch.topk(probabilities, <span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top5_prob.size(<span class="hljs-number">0</span>)):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(categories[top5_catid[i]], top5_prob[i].item())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints class names and probabilities like:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [(&#x27;Samoyed&#x27;, 0.6425196528434753), (&#x27;Pomeranian&#x27;, 0.04062102362513542), (&#x27;keeshond&#x27;, 0.03186424449086189), (&#x27;white wolf&#x27;, 0.01739676296710968), (&#x27;Eskimo dog&#x27;, 0.011717947199940681)]</span>`}}),Q=new ke({}),X=new pe({props:{code:"model = timm.create_model('tf_efficientnet_lite0', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;tf_efficientnet_lite0&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=NUM_FINETUNE_CLASSES)'}}),K=new ke({}),W=new ke({}),Z=new pe({props:{code:`@misc{tan2020efficientnet,
      title={EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks}, 
      author={Mingxing Tan and Quoc V. Le},
      year={2020},
      eprint={1905.11946},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}`,highlighted:`<span class="language-xml">@misc</span><span class="hljs-template-variable">{tan2020efficientnet,
      title={EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks}</span><span class="language-xml">, 
      author=</span><span class="hljs-template-variable">{Mingxing Tan and Quoc V. Le}</span><span class="language-xml">,
      year=</span><span class="hljs-template-variable">{2020}</span><span class="language-xml">,
      eprint=</span><span class="hljs-template-variable">{1905.11946}</span><span class="language-xml">,
      archivePrefix=</span><span class="hljs-template-variable">{arXiv}</span><span class="language-xml">,
      primaryClass=</span><span class="hljs-template-variable">{cs.LG}</span><span class="language-xml">
}</span>`}}),{c(){b=n("meta"),Ee=f(),$=n("h1"),N=n("a"),me=n("span"),c(z.$$.fragment),rt=f(),fe=n("span"),pt=r("(Tensorflow) EfficientNet Lite"),xe=f(),y=n("p"),he=n("strong"),mt=r("EfficientNet"),ft=r(" is a convolutional neural network architecture and scaling method that uniformly scales all dimensions of depth/width/resolution using a "),ce=n("em"),ht=r("compound coefficient"),ct=r(". Unlike conventional practice that arbitrary scales  these factors, the EfficientNet scaling method uniformly scales network width, depth, and resolution with a set of fixed scaling coefficients. For example, if we want to use $2^N$ times more computational resources, then we can simply increase the network depth by $\\alpha ^ N$,  width by $\\beta ^ N$, and image size by $\\gamma ^ N$, where $\\alpha, \\beta, \\gamma$ are constant coefficients determined by a small grid search on the original small model. EfficientNet uses a compound coefficient $\\phi$ to uniformly scales network width, depth, and resolution in a  principled way."),Ne=f(),ee=n("p"),ut=r("The compound scaling method is justified by the intuition that if the input image is bigger, then the network needs more layers to increase the receptive field and more channels to capture more fine-grained patterns on the bigger image."),Pe=f(),P=n("p"),dt=r("The base EfficientNet-B0 network is based on the inverted bottleneck residual blocks of "),U=n("a"),gt=r("MobileNetV2"),wt=r("."),Te=f(),_=n("p"),vt=r("EfficientNet-Lite makes EfficientNet more suitable for mobile devices by introducing "),R=n("a"),_t=r("ReLU6"),bt=r(" activation functions and removing "),G=n("a"),$t=r("squeeze-and-excitation blocks"),yt=r("."),Se=f(),T=n("p"),jt=r("The weights from this model were ported from "),B=n("a"),kt=r("Tensorflow/TPU"),Et=r("."),Ae=f(),j=n("h2"),S=n("a"),ue=n("span"),c(Y.$$.fragment),xt=f(),de=n("span"),Nt=r("How do I use this model on an image?"),qe=f(),te=n("p"),Pt=r("To load a pretrained model:"),Ie=f(),c(F.$$.fragment),Le=f(),se=n("p"),Tt=r("To load and preprocess the image:"),Ce=f(),c(V.$$.fragment),He=f(),ae=n("p"),St=r("To get the model predictions:"),Me=f(),c(D.$$.fragment),ze=f(),ne=n("p"),At=r("To get the top-5 predictions class names:"),Ue=f(),c(O.$$.fragment),Re=f(),A=n("p"),qt=r("Replace the model name with the variant you want to use, e.g. "),ge=n("code"),It=r("tf_efficientnet_lite0"),Lt=r(". You can find the IDs in the model summaries at the top of this page."),Ge=f(),q=n("p"),Ct=r("To extract image features with this model, follow the "),ie=n("a"),Ht=r("timm feature extraction examples"),Mt=r(", just change the name of the model you want to use."),Be=f(),k=n("h2"),I=n("a"),we=n("span"),c(Q.$$.fragment),zt=f(),ve=n("span"),Ut=r("How do I finetune this model?"),Ye=f(),oe=n("p"),Rt=r("You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Fe=f(),c(X.$$.fragment),Ve=f(),L=n("p"),Gt=r("To finetune on your own dataset, you have to write a training loop or adapt "),J=n("a"),Bt=r(`timm\u2019s training
script`),Yt=r(" to use your dataset."),De=f(),E=n("h2"),C=n("a"),_e=n("span"),c(K.$$.fragment),Ft=f(),be=n("span"),Vt=r("How do I train this model?"),Oe=f(),H=n("p"),Dt=r("You can follow the "),le=n("a"),Ot=r("timm recipe scripts"),Qt=r(" for training a new model afresh."),Qe=f(),x=n("h2"),M=n("a"),$e=n("span"),c(W.$$.fragment),Xt=f(),ye=n("span"),Jt=r("Citation"),Xe=f(),c(Z.$$.fragment),this.h()},l(e){const a=qs('[data-svelte="svelte-1phssyn"]',document.head);b=i(a,"META",{name:!0,content:!0}),a.forEach(t),Ee=h(e),$=i(e,"H1",{class:!0});var Ke=o($);N=i(Ke,"A",{id:!0,class:!0,href:!0});var Wt=o(N);me=i(Wt,"SPAN",{});var Zt=o(me);u(z.$$.fragment,Zt),Zt.forEach(t),Wt.forEach(t),rt=h(Ke),fe=i(Ke,"SPAN",{});var es=o(fe);pt=p(es,"(Tensorflow) EfficientNet Lite"),es.forEach(t),Ke.forEach(t),xe=h(e),y=i(e,"P",{});var je=o(y);he=i(je,"STRONG",{});var ts=o(he);mt=p(ts,"EfficientNet"),ts.forEach(t),ft=p(je," is a convolutional neural network architecture and scaling method that uniformly scales all dimensions of depth/width/resolution using a "),ce=i(je,"EM",{});var ss=o(ce);ht=p(ss,"compound coefficient"),ss.forEach(t),ct=p(je,". Unlike conventional practice that arbitrary scales  these factors, the EfficientNet scaling method uniformly scales network width, depth, and resolution with a set of fixed scaling coefficients. For example, if we want to use $2^N$ times more computational resources, then we can simply increase the network depth by $\\alpha ^ N$,  width by $\\beta ^ N$, and image size by $\\gamma ^ N$, where $\\alpha, \\beta, \\gamma$ are constant coefficients determined by a small grid search on the original small model. EfficientNet uses a compound coefficient $\\phi$ to uniformly scales network width, depth, and resolution in a  principled way."),je.forEach(t),Ne=h(e),ee=i(e,"P",{});var as=o(ee);ut=p(as,"The compound scaling method is justified by the intuition that if the input image is bigger, then the network needs more layers to increase the receptive field and more channels to capture more fine-grained patterns on the bigger image."),as.forEach(t),Pe=h(e),P=i(e,"P",{});var We=o(P);dt=p(We,"The base EfficientNet-B0 network is based on the inverted bottleneck residual blocks of "),U=i(We,"A",{href:!0,rel:!0});var ns=o(U);gt=p(ns,"MobileNetV2"),ns.forEach(t),wt=p(We,"."),We.forEach(t),Te=h(e),_=i(e,"P",{});var re=o(_);vt=p(re,"EfficientNet-Lite makes EfficientNet more suitable for mobile devices by introducing "),R=i(re,"A",{href:!0,rel:!0});var is=o(R);_t=p(is,"ReLU6"),is.forEach(t),bt=p(re," activation functions and removing "),G=i(re,"A",{href:!0,rel:!0});var os=o(G);$t=p(os,"squeeze-and-excitation blocks"),os.forEach(t),yt=p(re,"."),re.forEach(t),Se=h(e),T=i(e,"P",{});var Ze=o(T);jt=p(Ze,"The weights from this model were ported from "),B=i(Ze,"A",{href:!0,rel:!0});var ls=o(B);kt=p(ls,"Tensorflow/TPU"),ls.forEach(t),Et=p(Ze,"."),Ze.forEach(t),Ae=h(e),j=i(e,"H2",{class:!0});var et=o(j);S=i(et,"A",{id:!0,class:!0,href:!0});var rs=o(S);ue=i(rs,"SPAN",{});var ps=o(ue);u(Y.$$.fragment,ps),ps.forEach(t),rs.forEach(t),xt=h(et),de=i(et,"SPAN",{});var ms=o(de);Nt=p(ms,"How do I use this model on an image?"),ms.forEach(t),et.forEach(t),qe=h(e),te=i(e,"P",{});var fs=o(te);Pt=p(fs,"To load a pretrained model:"),fs.forEach(t),Ie=h(e),u(F.$$.fragment,e),Le=h(e),se=i(e,"P",{});var hs=o(se);Tt=p(hs,"To load and preprocess the image:"),hs.forEach(t),Ce=h(e),u(V.$$.fragment,e),He=h(e),ae=i(e,"P",{});var cs=o(ae);St=p(cs,"To get the model predictions:"),cs.forEach(t),Me=h(e),u(D.$$.fragment,e),ze=h(e),ne=i(e,"P",{});var us=o(ne);At=p(us,"To get the top-5 predictions class names:"),us.forEach(t),Ue=h(e),u(O.$$.fragment,e),Re=h(e),A=i(e,"P",{});var tt=o(A);qt=p(tt,"Replace the model name with the variant you want to use, e.g. "),ge=i(tt,"CODE",{});var ds=o(ge);It=p(ds,"tf_efficientnet_lite0"),ds.forEach(t),Lt=p(tt,". You can find the IDs in the model summaries at the top of this page."),tt.forEach(t),Ge=h(e),q=i(e,"P",{});var st=o(q);Ct=p(st,"To extract image features with this model, follow the "),ie=i(st,"A",{href:!0});var gs=o(ie);Ht=p(gs,"timm feature extraction examples"),gs.forEach(t),Mt=p(st,", just change the name of the model you want to use."),st.forEach(t),Be=h(e),k=i(e,"H2",{class:!0});var at=o(k);I=i(at,"A",{id:!0,class:!0,href:!0});var ws=o(I);we=i(ws,"SPAN",{});var vs=o(we);u(Q.$$.fragment,vs),vs.forEach(t),ws.forEach(t),zt=h(at),ve=i(at,"SPAN",{});var _s=o(ve);Ut=p(_s,"How do I finetune this model?"),_s.forEach(t),at.forEach(t),Ye=h(e),oe=i(e,"P",{});var bs=o(oe);Rt=p(bs,"You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),bs.forEach(t),Fe=h(e),u(X.$$.fragment,e),Ve=h(e),L=i(e,"P",{});var nt=o(L);Gt=p(nt,"To finetune on your own dataset, you have to write a training loop or adapt "),J=i(nt,"A",{href:!0,rel:!0});var $s=o(J);Bt=p($s,`timm\u2019s training
script`),$s.forEach(t),Yt=p(nt," to use your dataset."),nt.forEach(t),De=h(e),E=i(e,"H2",{class:!0});var it=o(E);C=i(it,"A",{id:!0,class:!0,href:!0});var ys=o(C);_e=i(ys,"SPAN",{});var js=o(_e);u(K.$$.fragment,js),js.forEach(t),ys.forEach(t),Ft=h(it),be=i(it,"SPAN",{});var ks=o(be);Vt=p(ks,"How do I train this model?"),ks.forEach(t),it.forEach(t),Oe=h(e),H=i(e,"P",{});var ot=o(H);Dt=p(ot,"You can follow the "),le=i(ot,"A",{href:!0});var Es=o(le);Ot=p(Es,"timm recipe scripts"),Es.forEach(t),Qt=p(ot," for training a new model afresh."),ot.forEach(t),Qe=h(e),x=i(e,"H2",{class:!0});var lt=o(x);M=i(lt,"A",{id:!0,class:!0,href:!0});var xs=o(M);$e=i(xs,"SPAN",{});var Ns=o($e);u(W.$$.fragment,Ns),Ns.forEach(t),xs.forEach(t),Xt=h(lt),ye=i(lt,"SPAN",{});var Ps=o(ye);Jt=p(Ps,"Citation"),Ps.forEach(t),lt.forEach(t),Xe=h(e),u(Z.$$.fragment,e),this.h()},h(){m(b,"name","hf:doc:metadata"),m(b,"content",JSON.stringify(Hs)),m(N,"id","tensorflow-efficientnet-lite"),m(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(N,"href","#tensorflow-efficientnet-lite"),m($,"class","relative group"),m(U,"href","https://paperswithcode.com/method/mobilenetv2"),m(U,"rel","nofollow"),m(R,"href","https://paperswithcode.com/method/relu6"),m(R,"rel","nofollow"),m(G,"href","https://paperswithcode.com/method/squeeze-and-excitation"),m(G,"rel","nofollow"),m(B,"href","https://github.com/tensorflow/tpu"),m(B,"rel","nofollow"),m(S,"id","how-do-i-use-this-model-on-an-image"),m(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(S,"href","#how-do-i-use-this-model-on-an-image"),m(j,"class","relative group"),m(ie,"href","../feature_extraction"),m(I,"id","how-do-i-finetune-this-model"),m(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(I,"href","#how-do-i-finetune-this-model"),m(k,"class","relative group"),m(J,"href","https://github.com/rwightman/pytorch-image-models/blob/master/train.py"),m(J,"rel","nofollow"),m(C,"id","how-do-i-train-this-model"),m(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(C,"href","#how-do-i-train-this-model"),m(E,"class","relative group"),m(le,"href","../scripts"),m(M,"id","citation"),m(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(M,"href","#citation"),m(x,"class","relative group")},m(e,a){s(document.head,b),l(e,Ee,a),l(e,$,a),s($,N),s(N,me),d(z,me,null),s($,rt),s($,fe),s(fe,pt),l(e,xe,a),l(e,y,a),s(y,he),s(he,mt),s(y,ft),s(y,ce),s(ce,ht),s(y,ct),l(e,Ne,a),l(e,ee,a),s(ee,ut),l(e,Pe,a),l(e,P,a),s(P,dt),s(P,U),s(U,gt),s(P,wt),l(e,Te,a),l(e,_,a),s(_,vt),s(_,R),s(R,_t),s(_,bt),s(_,G),s(G,$t),s(_,yt),l(e,Se,a),l(e,T,a),s(T,jt),s(T,B),s(B,kt),s(T,Et),l(e,Ae,a),l(e,j,a),s(j,S),s(S,ue),d(Y,ue,null),s(j,xt),s(j,de),s(de,Nt),l(e,qe,a),l(e,te,a),s(te,Pt),l(e,Ie,a),d(F,e,a),l(e,Le,a),l(e,se,a),s(se,Tt),l(e,Ce,a),d(V,e,a),l(e,He,a),l(e,ae,a),s(ae,St),l(e,Me,a),d(D,e,a),l(e,ze,a),l(e,ne,a),s(ne,At),l(e,Ue,a),d(O,e,a),l(e,Re,a),l(e,A,a),s(A,qt),s(A,ge),s(ge,It),s(A,Lt),l(e,Ge,a),l(e,q,a),s(q,Ct),s(q,ie),s(ie,Ht),s(q,Mt),l(e,Be,a),l(e,k,a),s(k,I),s(I,we),d(Q,we,null),s(k,zt),s(k,ve),s(ve,Ut),l(e,Ye,a),l(e,oe,a),s(oe,Rt),l(e,Fe,a),d(X,e,a),l(e,Ve,a),l(e,L,a),s(L,Gt),s(L,J),s(J,Bt),s(L,Yt),l(e,De,a),l(e,E,a),s(E,C),s(C,_e),d(K,_e,null),s(E,Ft),s(E,be),s(be,Vt),l(e,Oe,a),l(e,H,a),s(H,Dt),s(H,le),s(le,Ot),s(H,Qt),l(e,Qe,a),l(e,x,a),s(x,M),s(M,$e),d(W,$e,null),s(x,Xt),s(x,ye),s(ye,Jt),l(e,Xe,a),d(Z,e,a),Je=!0},p:Is,i(e){Je||(g(z.$$.fragment,e),g(Y.$$.fragment,e),g(F.$$.fragment,e),g(V.$$.fragment,e),g(D.$$.fragment,e),g(O.$$.fragment,e),g(Q.$$.fragment,e),g(X.$$.fragment,e),g(K.$$.fragment,e),g(W.$$.fragment,e),g(Z.$$.fragment,e),Je=!0)},o(e){w(z.$$.fragment,e),w(Y.$$.fragment,e),w(F.$$.fragment,e),w(V.$$.fragment,e),w(D.$$.fragment,e),w(O.$$.fragment,e),w(Q.$$.fragment,e),w(X.$$.fragment,e),w(K.$$.fragment,e),w(W.$$.fragment,e),w(Z.$$.fragment,e),Je=!1},d(e){t(b),e&&t(Ee),e&&t($),v(z),e&&t(xe),e&&t(y),e&&t(Ne),e&&t(ee),e&&t(Pe),e&&t(P),e&&t(Te),e&&t(_),e&&t(Se),e&&t(T),e&&t(Ae),e&&t(j),v(Y),e&&t(qe),e&&t(te),e&&t(Ie),v(F,e),e&&t(Le),e&&t(se),e&&t(Ce),v(V,e),e&&t(He),e&&t(ae),e&&t(Me),v(D,e),e&&t(ze),e&&t(ne),e&&t(Ue),v(O,e),e&&t(Re),e&&t(A),e&&t(Ge),e&&t(q),e&&t(Be),e&&t(k),v(Q),e&&t(Ye),e&&t(oe),e&&t(Fe),v(X,e),e&&t(Ve),e&&t(L),e&&t(De),e&&t(E),v(K),e&&t(Oe),e&&t(H),e&&t(Qe),e&&t(x),v(W),e&&t(Xe),v(Z,e)}}}const Hs={local:"tensorflow-efficientnet-lite",sections:[{local:"how-do-i-use-this-model-on-an-image",title:"How do I use this model on an image?"},{local:"how-do-i-finetune-this-model",title:"How do I finetune this model?"},{local:"how-do-i-train-this-model",title:"How do I train this model?"},{local:"citation",title:"Citation"}],title:"(Tensorflow) EfficientNet Lite"};function Ms(Kt){return Ls(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gs extends Ts{constructor(b){super();Ss(this,b,Ms,Cs,As,{})}}export{Gs as default,Hs as metadata};
