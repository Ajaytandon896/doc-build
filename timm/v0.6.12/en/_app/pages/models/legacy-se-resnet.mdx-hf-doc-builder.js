import{S as ts,i as ss,s as as,e as n,k as h,w as u,t as p,M as ns,c as l,d as t,m as c,a as o,x as d,h as m,b as i,G as s,g as r,y as g,L as ls,q as w,o as _,B as v,v as os}from"../../chunks/vendor-hf-doc-builder.js";import{I as ge}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as ae}from"../../chunks/CodeBlock-hf-doc-builder.js";function rs(St){let j,we,y,x,ne,C,Ve,le,We,_e,f,oe,Xe,Ke,z,Qe,Ze,L,et,tt,ve,$,S,re,R,st,ie,at,je,X,nt,ye,G,$e,K,lt,be,Y,ke,Q,ot,Ee,M,xe,Z,rt,Se,U,Pe,P,it,pe,pt,mt,qe,q,ht,ee,ct,ft,Ne,b,N,me,B,ut,he,dt,Ae,te,gt,Ie,D,Te,A,wt,J,_t,vt,He,k,I,ce,O,jt,fe,yt,Ce,T,$t,se,bt,kt,ze,E,H,ue,F,Et,de,xt,Le,V,Re;return C=new ge({}),R=new ge({}),G=new ae({props:{code:`import timm
model = timm.create_model('legacy_seresnet101', pretrained=True)
model.eval()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> timm
<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;legacy_seresnet101&#x27;</span>, pretrained=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()`}}),Y=new ae({props:{code:`import urllib
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-meta">&gt;&gt;&gt; </span>config = resolve_data_config({}, model=model)
<span class="hljs-meta">&gt;&gt;&gt; </span>transform = create_transform(**config)

<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://github.com/pytorch/hub/raw/master/images/dog.jpg&quot;</span>, <span class="hljs-string">&quot;dog.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(filename).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tensor = transform(img).unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-comment"># transform and add batch dimension</span>`}}),M=new ae({props:{code:`import torch
with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
print(probabilities.shape)
# prints: torch.Size([1000])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    out = model(tensor)
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(probabilities.shape)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints: torch.Size([1000])</span>`}}),U=new ae({props:{code:`# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
# prints class names and probabilities like:
# [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get imagenet class mappings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>    categories = [s.strip() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> f.readlines()]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Print top categories per image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>top5_prob, top5_catid = torch.topk(probabilities, <span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top5_prob.size(<span class="hljs-number">0</span>)):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(categories[top5_catid[i]], top5_prob[i].item())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints class names and probabilities like:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [(&#x27;Samoyed&#x27;, 0.6425196528434753), (&#x27;Pomeranian&#x27;, 0.04062102362513542), (&#x27;keeshond&#x27;, 0.03186424449086189), (&#x27;white wolf&#x27;, 0.01739676296710968), (&#x27;Eskimo dog&#x27;, 0.011717947199940681)]</span>`}}),B=new ge({}),D=new ae({props:{code:"model = timm.create_model('legacy_seresnet101', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;legacy_seresnet101&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=NUM_FINETUNE_CLASSES)'}}),O=new ge({}),F=new ge({}),V=new ae({props:{code:`@misc{hu2019squeezeandexcitation,
      title={Squeeze-and-Excitation Networks}, 
      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},
      year={2019},
      eprint={1709.01507},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}`,highlighted:`@misc{hu2019squeezeandexcitation,
      title={Squeeze-<span class="hljs-keyword">and-Excitation </span>Networks}, 
      author={<span class="hljs-keyword">Jie </span>Hu <span class="hljs-keyword">and </span>Li <span class="hljs-keyword">Shen </span><span class="hljs-keyword">and </span>Samuel Albanie <span class="hljs-keyword">and </span>Gang Sun <span class="hljs-keyword">and </span>Enhua Wu},
      year={<span class="hljs-number">2019</span>},
      eprint={<span class="hljs-number">1709</span>.<span class="hljs-number">01507</span>},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}`}}),{c(){j=n("meta"),we=h(),y=n("h1"),x=n("a"),ne=n("span"),u(C.$$.fragment),Ve=h(),le=n("span"),We=p("(Legacy) SE-ResNet"),_e=h(),f=n("p"),oe=n("strong"),Xe=p("SE ResNet"),Ke=p(" is a variant of a "),z=n("a"),Qe=p("ResNet"),Ze=p(" that employs "),L=n("a"),et=p("squeeze-and-excitation blocks"),tt=p(" to enable the network to perform dynamic channel-wise feature recalibration."),ve=h(),$=n("h2"),S=n("a"),re=n("span"),u(R.$$.fragment),st=h(),ie=n("span"),at=p("How do I use this model on an image?"),je=h(),X=n("p"),nt=p("To load a pretrained model:"),ye=h(),u(G.$$.fragment),$e=h(),K=n("p"),lt=p("To load and preprocess the image:"),be=h(),u(Y.$$.fragment),ke=h(),Q=n("p"),ot=p("To get the model predictions:"),Ee=h(),u(M.$$.fragment),xe=h(),Z=n("p"),rt=p("To get the top-5 predictions class names:"),Se=h(),u(U.$$.fragment),Pe=h(),P=n("p"),it=p("Replace the model name with the variant you want to use, e.g. "),pe=n("code"),pt=p("legacy_seresnet101"),mt=p(". You can find the IDs in the model summaries at the top of this page."),qe=h(),q=n("p"),ht=p("To extract image features with this model, follow the "),ee=n("a"),ct=p("timm feature extraction examples"),ft=p(", just change the name of the model you want to use."),Ne=h(),b=n("h2"),N=n("a"),me=n("span"),u(B.$$.fragment),ut=h(),he=n("span"),dt=p("How do I finetune this model?"),Ae=h(),te=n("p"),gt=p("You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Ie=h(),u(D.$$.fragment),Te=h(),A=n("p"),wt=p("To finetune on your own dataset, you have to write a training loop or adapt "),J=n("a"),_t=p(`timm\u2019s training
script`),vt=p(" to use your dataset."),He=h(),k=n("h2"),I=n("a"),ce=n("span"),u(O.$$.fragment),jt=h(),fe=n("span"),yt=p("How do I train this model?"),Ce=h(),T=n("p"),$t=p("You can follow the "),se=n("a"),bt=p("timm recipe scripts"),kt=p(" for training a new model afresh."),ze=h(),E=n("h2"),H=n("a"),ue=n("span"),u(F.$$.fragment),Et=h(),de=n("span"),xt=p("Citation"),Le=h(),u(V.$$.fragment),this.h()},l(e){const a=ns('[data-svelte="svelte-1phssyn"]',document.head);j=l(a,"META",{name:!0,content:!0}),a.forEach(t),we=c(e),y=l(e,"H1",{class:!0});var Ge=o(y);x=l(Ge,"A",{id:!0,class:!0,href:!0});var Pt=o(x);ne=l(Pt,"SPAN",{});var qt=o(ne);d(C.$$.fragment,qt),qt.forEach(t),Pt.forEach(t),Ve=c(Ge),le=l(Ge,"SPAN",{});var Nt=o(le);We=m(Nt,"(Legacy) SE-ResNet"),Nt.forEach(t),Ge.forEach(t),_e=c(e),f=l(e,"P",{});var W=o(f);oe=l(W,"STRONG",{});var At=o(oe);Xe=m(At,"SE ResNet"),At.forEach(t),Ke=m(W," is a variant of a "),z=l(W,"A",{href:!0,rel:!0});var It=o(z);Qe=m(It,"ResNet"),It.forEach(t),Ze=m(W," that employs "),L=l(W,"A",{href:!0,rel:!0});var Tt=o(L);et=m(Tt,"squeeze-and-excitation blocks"),Tt.forEach(t),tt=m(W," to enable the network to perform dynamic channel-wise feature recalibration."),W.forEach(t),ve=c(e),$=l(e,"H2",{class:!0});var Ye=o($);S=l(Ye,"A",{id:!0,class:!0,href:!0});var Ht=o(S);re=l(Ht,"SPAN",{});var Ct=o(re);d(R.$$.fragment,Ct),Ct.forEach(t),Ht.forEach(t),st=c(Ye),ie=l(Ye,"SPAN",{});var zt=o(ie);at=m(zt,"How do I use this model on an image?"),zt.forEach(t),Ye.forEach(t),je=c(e),X=l(e,"P",{});var Lt=o(X);nt=m(Lt,"To load a pretrained model:"),Lt.forEach(t),ye=c(e),d(G.$$.fragment,e),$e=c(e),K=l(e,"P",{});var Rt=o(K);lt=m(Rt,"To load and preprocess the image:"),Rt.forEach(t),be=c(e),d(Y.$$.fragment,e),ke=c(e),Q=l(e,"P",{});var Gt=o(Q);ot=m(Gt,"To get the model predictions:"),Gt.forEach(t),Ee=c(e),d(M.$$.fragment,e),xe=c(e),Z=l(e,"P",{});var Yt=o(Z);rt=m(Yt,"To get the top-5 predictions class names:"),Yt.forEach(t),Se=c(e),d(U.$$.fragment,e),Pe=c(e),P=l(e,"P",{});var Me=o(P);it=m(Me,"Replace the model name with the variant you want to use, e.g. "),pe=l(Me,"CODE",{});var Mt=o(pe);pt=m(Mt,"legacy_seresnet101"),Mt.forEach(t),mt=m(Me,". You can find the IDs in the model summaries at the top of this page."),Me.forEach(t),qe=c(e),q=l(e,"P",{});var Ue=o(q);ht=m(Ue,"To extract image features with this model, follow the "),ee=l(Ue,"A",{href:!0});var Ut=o(ee);ct=m(Ut,"timm feature extraction examples"),Ut.forEach(t),ft=m(Ue,", just change the name of the model you want to use."),Ue.forEach(t),Ne=c(e),b=l(e,"H2",{class:!0});var Be=o(b);N=l(Be,"A",{id:!0,class:!0,href:!0});var Bt=o(N);me=l(Bt,"SPAN",{});var Dt=o(me);d(B.$$.fragment,Dt),Dt.forEach(t),Bt.forEach(t),ut=c(Be),he=l(Be,"SPAN",{});var Jt=o(he);dt=m(Jt,"How do I finetune this model?"),Jt.forEach(t),Be.forEach(t),Ae=c(e),te=l(e,"P",{});var Ot=o(te);gt=m(Ot,"You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Ot.forEach(t),Ie=c(e),d(D.$$.fragment,e),Te=c(e),A=l(e,"P",{});var De=o(A);wt=m(De,"To finetune on your own dataset, you have to write a training loop or adapt "),J=l(De,"A",{href:!0,rel:!0});var Ft=o(J);_t=m(Ft,`timm\u2019s training
script`),Ft.forEach(t),vt=m(De," to use your dataset."),De.forEach(t),He=c(e),k=l(e,"H2",{class:!0});var Je=o(k);I=l(Je,"A",{id:!0,class:!0,href:!0});var Vt=o(I);ce=l(Vt,"SPAN",{});var Wt=o(ce);d(O.$$.fragment,Wt),Wt.forEach(t),Vt.forEach(t),jt=c(Je),fe=l(Je,"SPAN",{});var Xt=o(fe);yt=m(Xt,"How do I train this model?"),Xt.forEach(t),Je.forEach(t),Ce=c(e),T=l(e,"P",{});var Oe=o(T);$t=m(Oe,"You can follow the "),se=l(Oe,"A",{href:!0});var Kt=o(se);bt=m(Kt,"timm recipe scripts"),Kt.forEach(t),kt=m(Oe," for training a new model afresh."),Oe.forEach(t),ze=c(e),E=l(e,"H2",{class:!0});var Fe=o(E);H=l(Fe,"A",{id:!0,class:!0,href:!0});var Qt=o(H);ue=l(Qt,"SPAN",{});var Zt=o(ue);d(F.$$.fragment,Zt),Zt.forEach(t),Qt.forEach(t),Et=c(Fe),de=l(Fe,"SPAN",{});var es=o(de);xt=m(es,"Citation"),es.forEach(t),Fe.forEach(t),Le=c(e),d(V.$$.fragment,e),this.h()},h(){i(j,"name","hf:doc:metadata"),i(j,"content",JSON.stringify(is)),i(x,"id","legacy-seresnet"),i(x,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(x,"href","#legacy-seresnet"),i(y,"class","relative group"),i(z,"href","https://www.paperswithcode.com/method/resnet"),i(z,"rel","nofollow"),i(L,"href","https://paperswithcode.com/method/squeeze-and-excitation-block"),i(L,"rel","nofollow"),i(S,"id","how-do-i-use-this-model-on-an-image"),i(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(S,"href","#how-do-i-use-this-model-on-an-image"),i($,"class","relative group"),i(ee,"href","../feature_extraction"),i(N,"id","how-do-i-finetune-this-model"),i(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(N,"href","#how-do-i-finetune-this-model"),i(b,"class","relative group"),i(J,"href","https://github.com/rwightman/pytorch-image-models/blob/master/train.py"),i(J,"rel","nofollow"),i(I,"id","how-do-i-train-this-model"),i(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(I,"href","#how-do-i-train-this-model"),i(k,"class","relative group"),i(se,"href","../scripts"),i(H,"id","citation"),i(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(H,"href","#citation"),i(E,"class","relative group")},m(e,a){s(document.head,j),r(e,we,a),r(e,y,a),s(y,x),s(x,ne),g(C,ne,null),s(y,Ve),s(y,le),s(le,We),r(e,_e,a),r(e,f,a),s(f,oe),s(oe,Xe),s(f,Ke),s(f,z),s(z,Qe),s(f,Ze),s(f,L),s(L,et),s(f,tt),r(e,ve,a),r(e,$,a),s($,S),s(S,re),g(R,re,null),s($,st),s($,ie),s(ie,at),r(e,je,a),r(e,X,a),s(X,nt),r(e,ye,a),g(G,e,a),r(e,$e,a),r(e,K,a),s(K,lt),r(e,be,a),g(Y,e,a),r(e,ke,a),r(e,Q,a),s(Q,ot),r(e,Ee,a),g(M,e,a),r(e,xe,a),r(e,Z,a),s(Z,rt),r(e,Se,a),g(U,e,a),r(e,Pe,a),r(e,P,a),s(P,it),s(P,pe),s(pe,pt),s(P,mt),r(e,qe,a),r(e,q,a),s(q,ht),s(q,ee),s(ee,ct),s(q,ft),r(e,Ne,a),r(e,b,a),s(b,N),s(N,me),g(B,me,null),s(b,ut),s(b,he),s(he,dt),r(e,Ae,a),r(e,te,a),s(te,gt),r(e,Ie,a),g(D,e,a),r(e,Te,a),r(e,A,a),s(A,wt),s(A,J),s(J,_t),s(A,vt),r(e,He,a),r(e,k,a),s(k,I),s(I,ce),g(O,ce,null),s(k,jt),s(k,fe),s(fe,yt),r(e,Ce,a),r(e,T,a),s(T,$t),s(T,se),s(se,bt),s(T,kt),r(e,ze,a),r(e,E,a),s(E,H),s(H,ue),g(F,ue,null),s(E,Et),s(E,de),s(de,xt),r(e,Le,a),g(V,e,a),Re=!0},p:ls,i(e){Re||(w(C.$$.fragment,e),w(R.$$.fragment,e),w(G.$$.fragment,e),w(Y.$$.fragment,e),w(M.$$.fragment,e),w(U.$$.fragment,e),w(B.$$.fragment,e),w(D.$$.fragment,e),w(O.$$.fragment,e),w(F.$$.fragment,e),w(V.$$.fragment,e),Re=!0)},o(e){_(C.$$.fragment,e),_(R.$$.fragment,e),_(G.$$.fragment,e),_(Y.$$.fragment,e),_(M.$$.fragment,e),_(U.$$.fragment,e),_(B.$$.fragment,e),_(D.$$.fragment,e),_(O.$$.fragment,e),_(F.$$.fragment,e),_(V.$$.fragment,e),Re=!1},d(e){t(j),e&&t(we),e&&t(y),v(C),e&&t(_e),e&&t(f),e&&t(ve),e&&t($),v(R),e&&t(je),e&&t(X),e&&t(ye),v(G,e),e&&t($e),e&&t(K),e&&t(be),v(Y,e),e&&t(ke),e&&t(Q),e&&t(Ee),v(M,e),e&&t(xe),e&&t(Z),e&&t(Se),v(U,e),e&&t(Pe),e&&t(P),e&&t(qe),e&&t(q),e&&t(Ne),e&&t(b),v(B),e&&t(Ae),e&&t(te),e&&t(Ie),v(D,e),e&&t(Te),e&&t(A),e&&t(He),e&&t(k),v(O),e&&t(Ce),e&&t(T),e&&t(ze),e&&t(E),v(F),e&&t(Le),v(V,e)}}}const is={local:"legacy-seresnet",sections:[{local:"how-do-i-use-this-model-on-an-image",title:"How do I use this model on an image?"},{local:"how-do-i-finetune-this-model",title:"How do I finetune this model?"},{local:"how-do-i-train-this-model",title:"How do I train this model?"},{local:"citation",title:"Citation"}],title:"(Legacy) SE-ResNet"};function ps(St){return os(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class fs extends ts{constructor(j){super();ss(this,j,ps,rs,as,{})}}export{fs as default,is as metadata};
