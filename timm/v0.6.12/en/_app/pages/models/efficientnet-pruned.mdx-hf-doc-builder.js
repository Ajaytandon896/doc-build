import{S as $a,i as _a,s as ba,e as i,k as m,w as f,t as r,M as ja,c as l,d as t,m as h,a as o,x as u,h as p,b as c,G as a,g as n,y as d,L as ya,q as g,o as w,B as v,v as ka}from"../../chunks/vendor-hf-doc-builder.js";import{I as je}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as Z}from"../../chunks/CodeBlock-hf-doc-builder.js";function Ea(Ut){let _,ye,b,N,re,H,nt,pe,it,ke,j,me,lt,ot,he,rt,pt,Ee,J,mt,xe,$,ht,M,ct,ft,z,ut,dt,Ne,W,gt,Pe,y,P,ce,G,wt,fe,vt,Te,ee,$t,Ae,R,Se,te,_t,Ie,Y,qe,ae,bt,Le,U,Ce,se,jt,He,B,Me,T,yt,ue,kt,Et,ze,A,xt,ne,Nt,Pt,Ge,k,S,de,F,Tt,ge,At,Re,ie,St,Ye,D,Ue,I,It,K,qt,Lt,Be,E,q,we,V,Ct,ve,Ht,Fe,L,Mt,le,zt,Gt,De,x,C,$e,X,Rt,_e,Yt,Ke,O,Ve,Q,Xe;return H=new je({}),G=new je({}),R=new Z({props:{code:`import timm
model = timm.create_model('efficientnet_b1_pruned', pretrained=True)
model.eval()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> timm
<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;efficientnet_b1_pruned&#x27;</span>, pretrained=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()`}}),Y=new Z({props:{code:`import urllib
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-meta">&gt;&gt;&gt; </span>config = resolve_data_config({}, model=model)
<span class="hljs-meta">&gt;&gt;&gt; </span>transform = create_transform(**config)

<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://github.com/pytorch/hub/raw/master/images/dog.jpg&quot;</span>, <span class="hljs-string">&quot;dog.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(filename).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tensor = transform(img).unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-comment"># transform and add batch dimension</span>`}}),U=new Z({props:{code:`import torch
with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
print(probabilities.shape)
# prints: torch.Size([1000])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    out = model(tensor)
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(probabilities.shape)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints: torch.Size([1000])</span>`}}),B=new Z({props:{code:`# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
# prints class names and probabilities like:
# [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get imagenet class mappings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>    categories = [s.strip() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> f.readlines()]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Print top categories per image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>top5_prob, top5_catid = torch.topk(probabilities, <span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top5_prob.size(<span class="hljs-number">0</span>)):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(categories[top5_catid[i]], top5_prob[i].item())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints class names and probabilities like:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [(&#x27;Samoyed&#x27;, 0.6425196528434753), (&#x27;Pomeranian&#x27;, 0.04062102362513542), (&#x27;keeshond&#x27;, 0.03186424449086189), (&#x27;white wolf&#x27;, 0.01739676296710968), (&#x27;Eskimo dog&#x27;, 0.011717947199940681)]</span>`}}),F=new je({}),D=new Z({props:{code:"model = timm.create_model('efficientnet_b1_pruned', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;efficientnet_b1_pruned&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=NUM_FINETUNE_CLASSES)'}}),V=new je({}),X=new je({}),O=new Z({props:{code:`@misc{tan2020efficientnet,
      title={EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks}, 
      author={Mingxing Tan and Quoc V. Le},
      year={2020},
      eprint={1905.11946},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}`,highlighted:`<span class="language-xml">@misc</span><span class="hljs-template-variable">{tan2020efficientnet,
      title={EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks}</span><span class="language-xml">, 
      author=</span><span class="hljs-template-variable">{Mingxing Tan and Quoc V. Le}</span><span class="language-xml">,
      year=</span><span class="hljs-template-variable">{2020}</span><span class="language-xml">,
      eprint=</span><span class="hljs-template-variable">{1905.11946}</span><span class="language-xml">,
      archivePrefix=</span><span class="hljs-template-variable">{arXiv}</span><span class="language-xml">,
      primaryClass=</span><span class="hljs-template-variable">{cs.LG}</span><span class="language-xml">
}</span>`}}),Q=new Z({props:{code:`@misc{aflalo2020knapsack,
      title={Knapsack Pruning with Inner Distillation},
      author={Yonathan Aflalo and Asaf Noy and Ming Lin and Itamar Friedman and Lihi Zelnik},
      year={2020},
      eprint={2002.08258},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}`,highlighted:`@misc{aflalo2020knapsack,
      <span class="hljs-attr">title={Knapsack</span> Pruning <span class="hljs-keyword">with</span> Inner Distillation},
      <span class="hljs-attr">author={Yonathan</span> Aflalo <span class="hljs-literal">and</span> Asaf Noy <span class="hljs-literal">and</span> Ming Lin <span class="hljs-literal">and</span> Itamar Friedman <span class="hljs-literal">and</span> Lihi Zelnik},
      <span class="hljs-attr">year={2020},</span>
      <span class="hljs-attr">eprint={2002.08258},</span>
      <span class="hljs-attr">archivePrefix={arXiv},</span>
      <span class="hljs-attr">primaryClass={cs.LG}</span>
}`}}),{c(){_=i("meta"),ye=m(),b=i("h1"),N=i("a"),re=i("span"),f(H.$$.fragment),nt=m(),pe=i("span"),it=r("EfficientNet (Knapsack Pruned)"),ke=m(),j=i("p"),me=i("strong"),lt=r("EfficientNet"),ot=r(" is a convolutional neural network architecture and scaling method that uniformly scales all dimensions of depth/width/resolution using a "),he=i("em"),rt=r("compound coefficient"),pt=r(". Unlike conventional practice that arbitrary scales  these factors, the EfficientNet scaling method uniformly scales network width, depth, and resolution with a set of fixed scaling coefficients. For example, if we want to use $2^N$ times more computational resources, then we can simply increase the network depth by $\\alpha ^ N$,  width by $\\beta ^ N$, and image size by $\\gamma ^ N$, where $\\alpha, \\beta, \\gamma$ are constant coefficients determined by a small grid search on the original small model. EfficientNet uses a compound coefficient $\\phi$ to uniformly scales network width, depth, and resolution in a  principled way."),Ee=m(),J=i("p"),mt=r("The compound scaling method is justified by the intuition that if the input image is bigger, then the network needs more layers to increase the receptive field and more channels to capture more fine-grained patterns on the bigger image."),xe=m(),$=i("p"),ht=r("The base EfficientNet-B0 network is based on the inverted bottleneck residual blocks of "),M=i("a"),ct=r("MobileNetV2"),ft=r(", in addition to "),z=i("a"),ut=r("squeeze-and-excitation blocks"),dt=r("."),Ne=m(),W=i("p"),gt=r("This collection consists of pruned EfficientNet models."),Pe=m(),y=i("h2"),P=i("a"),ce=i("span"),f(G.$$.fragment),wt=m(),fe=i("span"),vt=r("How do I use this model on an image?"),Te=m(),ee=i("p"),$t=r("To load a pretrained model:"),Ae=m(),f(R.$$.fragment),Se=m(),te=i("p"),_t=r("To load and preprocess the image:"),Ie=m(),f(Y.$$.fragment),qe=m(),ae=i("p"),bt=r("To get the model predictions:"),Le=m(),f(U.$$.fragment),Ce=m(),se=i("p"),jt=r("To get the top-5 predictions class names:"),He=m(),f(B.$$.fragment),Me=m(),T=i("p"),yt=r("Replace the model name with the variant you want to use, e.g. "),ue=i("code"),kt=r("efficientnet_b1_pruned"),Et=r(". You can find the IDs in the model summaries at the top of this page."),ze=m(),A=i("p"),xt=r("To extract image features with this model, follow the "),ne=i("a"),Nt=r("timm feature extraction examples"),Pt=r(", just change the name of the model you want to use."),Ge=m(),k=i("h2"),S=i("a"),de=i("span"),f(F.$$.fragment),Tt=m(),ge=i("span"),At=r("How do I finetune this model?"),Re=m(),ie=i("p"),St=r("You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),Ye=m(),f(D.$$.fragment),Ue=m(),I=i("p"),It=r("To finetune on your own dataset, you have to write a training loop or adapt "),K=i("a"),qt=r(`timm\u2019s training
script`),Lt=r(" to use your dataset."),Be=m(),E=i("h2"),q=i("a"),we=i("span"),f(V.$$.fragment),Ct=m(),ve=i("span"),Ht=r("How do I train this model?"),Fe=m(),L=i("p"),Mt=r("You can follow the "),le=i("a"),zt=r("timm recipe scripts"),Gt=r(" for training a new model afresh."),De=m(),x=i("h2"),C=i("a"),$e=i("span"),f(X.$$.fragment),Rt=m(),_e=i("span"),Yt=r("Citation"),Ke=m(),f(O.$$.fragment),Ve=m(),f(Q.$$.fragment),this.h()},l(e){const s=ja('[data-svelte="svelte-1phssyn"]',document.head);_=l(s,"META",{name:!0,content:!0}),s.forEach(t),ye=h(e),b=l(e,"H1",{class:!0});var Oe=o(b);N=l(Oe,"A",{id:!0,class:!0,href:!0});var Bt=o(N);re=l(Bt,"SPAN",{});var Ft=o(re);u(H.$$.fragment,Ft),Ft.forEach(t),Bt.forEach(t),nt=h(Oe),pe=l(Oe,"SPAN",{});var Dt=o(pe);it=p(Dt,"EfficientNet (Knapsack Pruned)"),Dt.forEach(t),Oe.forEach(t),ke=h(e),j=l(e,"P",{});var be=o(j);me=l(be,"STRONG",{});var Kt=o(me);lt=p(Kt,"EfficientNet"),Kt.forEach(t),ot=p(be," is a convolutional neural network architecture and scaling method that uniformly scales all dimensions of depth/width/resolution using a "),he=l(be,"EM",{});var Vt=o(he);rt=p(Vt,"compound coefficient"),Vt.forEach(t),pt=p(be,". Unlike conventional practice that arbitrary scales  these factors, the EfficientNet scaling method uniformly scales network width, depth, and resolution with a set of fixed scaling coefficients. For example, if we want to use $2^N$ times more computational resources, then we can simply increase the network depth by $\\alpha ^ N$,  width by $\\beta ^ N$, and image size by $\\gamma ^ N$, where $\\alpha, \\beta, \\gamma$ are constant coefficients determined by a small grid search on the original small model. EfficientNet uses a compound coefficient $\\phi$ to uniformly scales network width, depth, and resolution in a  principled way."),be.forEach(t),Ee=h(e),J=l(e,"P",{});var Xt=o(J);mt=p(Xt,"The compound scaling method is justified by the intuition that if the input image is bigger, then the network needs more layers to increase the receptive field and more channels to capture more fine-grained patterns on the bigger image."),Xt.forEach(t),xe=h(e),$=l(e,"P",{});var oe=o($);ht=p(oe,"The base EfficientNet-B0 network is based on the inverted bottleneck residual blocks of "),M=l(oe,"A",{href:!0,rel:!0});var Ot=o(M);ct=p(Ot,"MobileNetV2"),Ot.forEach(t),ft=p(oe,", in addition to "),z=l(oe,"A",{href:!0,rel:!0});var Qt=o(z);ut=p(Qt,"squeeze-and-excitation blocks"),Qt.forEach(t),dt=p(oe,"."),oe.forEach(t),Ne=h(e),W=l(e,"P",{});var Zt=o(W);gt=p(Zt,"This collection consists of pruned EfficientNet models."),Zt.forEach(t),Pe=h(e),y=l(e,"H2",{class:!0});var Qe=o(y);P=l(Qe,"A",{id:!0,class:!0,href:!0});var Jt=o(P);ce=l(Jt,"SPAN",{});var Wt=o(ce);u(G.$$.fragment,Wt),Wt.forEach(t),Jt.forEach(t),wt=h(Qe),fe=l(Qe,"SPAN",{});var ea=o(fe);vt=p(ea,"How do I use this model on an image?"),ea.forEach(t),Qe.forEach(t),Te=h(e),ee=l(e,"P",{});var ta=o(ee);$t=p(ta,"To load a pretrained model:"),ta.forEach(t),Ae=h(e),u(R.$$.fragment,e),Se=h(e),te=l(e,"P",{});var aa=o(te);_t=p(aa,"To load and preprocess the image:"),aa.forEach(t),Ie=h(e),u(Y.$$.fragment,e),qe=h(e),ae=l(e,"P",{});var sa=o(ae);bt=p(sa,"To get the model predictions:"),sa.forEach(t),Le=h(e),u(U.$$.fragment,e),Ce=h(e),se=l(e,"P",{});var na=o(se);jt=p(na,"To get the top-5 predictions class names:"),na.forEach(t),He=h(e),u(B.$$.fragment,e),Me=h(e),T=l(e,"P",{});var Ze=o(T);yt=p(Ze,"Replace the model name with the variant you want to use, e.g. "),ue=l(Ze,"CODE",{});var ia=o(ue);kt=p(ia,"efficientnet_b1_pruned"),ia.forEach(t),Et=p(Ze,". You can find the IDs in the model summaries at the top of this page."),Ze.forEach(t),ze=h(e),A=l(e,"P",{});var Je=o(A);xt=p(Je,"To extract image features with this model, follow the "),ne=l(Je,"A",{href:!0});var la=o(ne);Nt=p(la,"timm feature extraction examples"),la.forEach(t),Pt=p(Je,", just change the name of the model you want to use."),Je.forEach(t),Ge=h(e),k=l(e,"H2",{class:!0});var We=o(k);S=l(We,"A",{id:!0,class:!0,href:!0});var oa=o(S);de=l(oa,"SPAN",{});var ra=o(de);u(F.$$.fragment,ra),ra.forEach(t),oa.forEach(t),Tt=h(We),ge=l(We,"SPAN",{});var pa=o(ge);At=p(pa,"How do I finetune this model?"),pa.forEach(t),We.forEach(t),Re=h(e),ie=l(e,"P",{});var ma=o(ie);St=p(ma,"You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),ma.forEach(t),Ye=h(e),u(D.$$.fragment,e),Ue=h(e),I=l(e,"P",{});var et=o(I);It=p(et,"To finetune on your own dataset, you have to write a training loop or adapt "),K=l(et,"A",{href:!0,rel:!0});var ha=o(K);qt=p(ha,`timm\u2019s training
script`),ha.forEach(t),Lt=p(et," to use your dataset."),et.forEach(t),Be=h(e),E=l(e,"H2",{class:!0});var tt=o(E);q=l(tt,"A",{id:!0,class:!0,href:!0});var ca=o(q);we=l(ca,"SPAN",{});var fa=o(we);u(V.$$.fragment,fa),fa.forEach(t),ca.forEach(t),Ct=h(tt),ve=l(tt,"SPAN",{});var ua=o(ve);Ht=p(ua,"How do I train this model?"),ua.forEach(t),tt.forEach(t),Fe=h(e),L=l(e,"P",{});var at=o(L);Mt=p(at,"You can follow the "),le=l(at,"A",{href:!0});var da=o(le);zt=p(da,"timm recipe scripts"),da.forEach(t),Gt=p(at," for training a new model afresh."),at.forEach(t),De=h(e),x=l(e,"H2",{class:!0});var st=o(x);C=l(st,"A",{id:!0,class:!0,href:!0});var ga=o(C);$e=l(ga,"SPAN",{});var wa=o($e);u(X.$$.fragment,wa),wa.forEach(t),ga.forEach(t),Rt=h(st),_e=l(st,"SPAN",{});var va=o(_e);Yt=p(va,"Citation"),va.forEach(t),st.forEach(t),Ke=h(e),u(O.$$.fragment,e),Ve=h(e),u(Q.$$.fragment,e),this.h()},h(){c(_,"name","hf:doc:metadata"),c(_,"content",JSON.stringify(xa)),c(N,"id","efficientnet-knapsack-pruned"),c(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N,"href","#efficientnet-knapsack-pruned"),c(b,"class","relative group"),c(M,"href","https://paperswithcode.com/method/mobilenetv2"),c(M,"rel","nofollow"),c(z,"href","https://paperswithcode.com/method/squeeze-and-excitation-block"),c(z,"rel","nofollow"),c(P,"id","how-do-i-use-this-model-on-an-image"),c(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P,"href","#how-do-i-use-this-model-on-an-image"),c(y,"class","relative group"),c(ne,"href","../feature_extraction"),c(S,"id","how-do-i-finetune-this-model"),c(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S,"href","#how-do-i-finetune-this-model"),c(k,"class","relative group"),c(K,"href","https://github.com/rwightman/pytorch-image-models/blob/master/train.py"),c(K,"rel","nofollow"),c(q,"id","how-do-i-train-this-model"),c(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q,"href","#how-do-i-train-this-model"),c(E,"class","relative group"),c(le,"href","../scripts"),c(C,"id","citation"),c(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C,"href","#citation"),c(x,"class","relative group")},m(e,s){a(document.head,_),n(e,ye,s),n(e,b,s),a(b,N),a(N,re),d(H,re,null),a(b,nt),a(b,pe),a(pe,it),n(e,ke,s),n(e,j,s),a(j,me),a(me,lt),a(j,ot),a(j,he),a(he,rt),a(j,pt),n(e,Ee,s),n(e,J,s),a(J,mt),n(e,xe,s),n(e,$,s),a($,ht),a($,M),a(M,ct),a($,ft),a($,z),a(z,ut),a($,dt),n(e,Ne,s),n(e,W,s),a(W,gt),n(e,Pe,s),n(e,y,s),a(y,P),a(P,ce),d(G,ce,null),a(y,wt),a(y,fe),a(fe,vt),n(e,Te,s),n(e,ee,s),a(ee,$t),n(e,Ae,s),d(R,e,s),n(e,Se,s),n(e,te,s),a(te,_t),n(e,Ie,s),d(Y,e,s),n(e,qe,s),n(e,ae,s),a(ae,bt),n(e,Le,s),d(U,e,s),n(e,Ce,s),n(e,se,s),a(se,jt),n(e,He,s),d(B,e,s),n(e,Me,s),n(e,T,s),a(T,yt),a(T,ue),a(ue,kt),a(T,Et),n(e,ze,s),n(e,A,s),a(A,xt),a(A,ne),a(ne,Nt),a(A,Pt),n(e,Ge,s),n(e,k,s),a(k,S),a(S,de),d(F,de,null),a(k,Tt),a(k,ge),a(ge,At),n(e,Re,s),n(e,ie,s),a(ie,St),n(e,Ye,s),d(D,e,s),n(e,Ue,s),n(e,I,s),a(I,It),a(I,K),a(K,qt),a(I,Lt),n(e,Be,s),n(e,E,s),a(E,q),a(q,we),d(V,we,null),a(E,Ct),a(E,ve),a(ve,Ht),n(e,Fe,s),n(e,L,s),a(L,Mt),a(L,le),a(le,zt),a(L,Gt),n(e,De,s),n(e,x,s),a(x,C),a(C,$e),d(X,$e,null),a(x,Rt),a(x,_e),a(_e,Yt),n(e,Ke,s),d(O,e,s),n(e,Ve,s),d(Q,e,s),Xe=!0},p:ya,i(e){Xe||(g(H.$$.fragment,e),g(G.$$.fragment,e),g(R.$$.fragment,e),g(Y.$$.fragment,e),g(U.$$.fragment,e),g(B.$$.fragment,e),g(F.$$.fragment,e),g(D.$$.fragment,e),g(V.$$.fragment,e),g(X.$$.fragment,e),g(O.$$.fragment,e),g(Q.$$.fragment,e),Xe=!0)},o(e){w(H.$$.fragment,e),w(G.$$.fragment,e),w(R.$$.fragment,e),w(Y.$$.fragment,e),w(U.$$.fragment,e),w(B.$$.fragment,e),w(F.$$.fragment,e),w(D.$$.fragment,e),w(V.$$.fragment,e),w(X.$$.fragment,e),w(O.$$.fragment,e),w(Q.$$.fragment,e),Xe=!1},d(e){t(_),e&&t(ye),e&&t(b),v(H),e&&t(ke),e&&t(j),e&&t(Ee),e&&t(J),e&&t(xe),e&&t($),e&&t(Ne),e&&t(W),e&&t(Pe),e&&t(y),v(G),e&&t(Te),e&&t(ee),e&&t(Ae),v(R,e),e&&t(Se),e&&t(te),e&&t(Ie),v(Y,e),e&&t(qe),e&&t(ae),e&&t(Le),v(U,e),e&&t(Ce),e&&t(se),e&&t(He),v(B,e),e&&t(Me),e&&t(T),e&&t(ze),e&&t(A),e&&t(Ge),e&&t(k),v(F),e&&t(Re),e&&t(ie),e&&t(Ye),v(D,e),e&&t(Ue),e&&t(I),e&&t(Be),e&&t(E),v(V),e&&t(Fe),e&&t(L),e&&t(De),e&&t(x),v(X),e&&t(Ke),v(O,e),e&&t(Ve),v(Q,e)}}}const xa={local:"efficientnet-knapsack-pruned",sections:[{local:"how-do-i-use-this-model-on-an-image",title:"How do I use this model on an image?"},{local:"how-do-i-finetune-this-model",title:"How do I finetune this model?"},{local:"how-do-i-train-this-model",title:"How do I train this model?"},{local:"citation",title:"Citation"}],title:"EfficientNet (Knapsack Pruned)"};function Na(Ut){return ka(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Sa extends $a{constructor(_){super();_a(this,_,Na,Ea,ba,{})}}export{Sa as default,xa as metadata};
