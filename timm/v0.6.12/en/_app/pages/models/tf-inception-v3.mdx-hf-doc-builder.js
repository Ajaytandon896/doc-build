import{S as fs,i as us,s as ds,e as o,k as m,w as u,t as p,M as gs,c as n,d as t,m as c,a as l,x as d,h,b as i,G as s,g as r,y as g,L as ws,q as w,o as v,B as b,v as vs}from"../../chunks/vendor-hf-doc-builder.js";import{I as be}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as le}from"../../chunks/CodeBlock-hf-doc-builder.js";function bs(Rt){let _,_e,j,S,re,R,Qe,ie,et,je,f,pe,tt,st,L,at,ot,M,nt,lt,V,rt,it,$e,I,pt,B,ht,mt,ye,$,P,he,G,ct,me,ft,ke,Q,ut,xe,W,Ee,ee,dt,Se,Y,Ie,te,gt,Pe,D,Te,se,wt,Ae,U,qe,T,vt,ce,bt,_t,Ne,A,jt,ae,$t,yt,ze,y,q,fe,F,kt,ue,xt,Ce,oe,Et,He,J,Re,N,St,O,It,Pt,Le,k,z,de,X,Tt,ge,At,Me,C,qt,ne,Nt,zt,Ve,x,H,we,Z,Ct,ve,Ht,Be,K,Ge;return R=new be({}),G=new be({}),W=new le({props:{code:`import timm
model = timm.create_model('tf_inception_v3', pretrained=True)
model.eval()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> timm
<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;tf_inception_v3&#x27;</span>, pretrained=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">eval</span>()`}}),Y=new le({props:{code:`import urllib
from PIL import Image
from timm.data import resolve_data_config
from timm.data.transforms_factory import create_transform

config = resolve_data_config({}, model=model)
transform = create_transform(**config)

url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
urllib.request.urlretrieve(url, filename)
img = Image.open(filename).convert('RGB')
tensor = transform(img).unsqueeze(0) # transform and add batch dimension`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> urllib
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data <span class="hljs-keyword">import</span> resolve_data_config
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timm.data.transforms_factory <span class="hljs-keyword">import</span> create_transform

<span class="hljs-meta">&gt;&gt;&gt; </span>config = resolve_data_config({}, model=model)
<span class="hljs-meta">&gt;&gt;&gt; </span>transform = create_transform(**config)

<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://github.com/pytorch/hub/raw/master/images/dog.jpg&quot;</span>, <span class="hljs-string">&quot;dog.jpg&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename)
<span class="hljs-meta">&gt;&gt;&gt; </span>img = Image.<span class="hljs-built_in">open</span>(filename).convert(<span class="hljs-string">&#x27;RGB&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tensor = transform(img).unsqueeze(<span class="hljs-number">0</span>) <span class="hljs-comment"># transform and add batch dimension</span>`}}),D=new le({props:{code:`import torch
with torch.no_grad():
    out = model(tensor)
probabilities = torch.nn.functional.softmax(out[0], dim=0)
print(probabilities.shape)
# prints: torch.Size([1000])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    out = model(tensor)
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = torch.nn.functional.softmax(out[<span class="hljs-number">0</span>], dim=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(probabilities.shape)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints: torch.Size([1000])</span>`}}),U=new le({props:{code:`# Get imagenet class mappings
url, filename = ("https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt", "imagenet_classes.txt")
urllib.request.urlretrieve(url, filename) 
with open("imagenet_classes.txt", "r") as f:
    categories = [s.strip() for s in f.readlines()]

# Print top categories per image
top5_prob, top5_catid = torch.topk(probabilities, 5)
for i in range(top5_prob.size(0)):
    print(categories[top5_catid[i]], top5_prob[i].item())
# prints class names and probabilities like:
# [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Get imagenet class mappings</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>url, filename = (<span class="hljs-string">&quot;https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>urllib.request.urlretrieve(url, filename) 
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;imagenet_classes.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>    categories = [s.strip() <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> f.readlines()]

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Print top categories per image</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>top5_prob, top5_catid = torch.topk(probabilities, <span class="hljs-number">5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top5_prob.size(<span class="hljs-number">0</span>)):
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(categories[top5_catid[i]], top5_prob[i].item())
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># prints class names and probabilities like:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># [(&#x27;Samoyed&#x27;, 0.6425196528434753), (&#x27;Pomeranian&#x27;, 0.04062102362513542), (&#x27;keeshond&#x27;, 0.03186424449086189), (&#x27;white wolf&#x27;, 0.01739676296710968), (&#x27;Eskimo dog&#x27;, 0.011717947199940681)]</span>`}}),F=new be({}),J=new le({props:{code:"model = timm.create_model('tf_inception_v3', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model = timm.create_model(<span class="hljs-string">&#x27;tf_inception_v3&#x27;</span>, pretrained=<span class="hljs-literal">True</span>, num_classes=NUM_FINETUNE_CLASSES)'}}),X=new be({}),Z=new be({}),K=new le({props:{code:`@article{DBLP:journals/corr/SzegedyVISW15,
  author    = {Christian Szegedy and
               Vincent Vanhoucke and
               Sergey Ioffe and
               Jonathon Shlens and
               Zbigniew Wojna},
  title     = {Rethinking the Inception Architecture for Computer Vision},
  journal   = {CoRR},
  volume    = {abs/1512.00567},
  year      = {2015},
  url       = {http://arxiv.org/abs/1512.00567},
  archivePrefix = {arXiv},
  eprint    = {1512.00567},
  timestamp = {Mon, 13 Aug 2018 16:49:07 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/SzegedyVISW15.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}`,highlighted:`@article{DBLP:journals<span class="hljs-regexp">/corr/</span>SzegedyVISW15,
  author    = {Christian Szegedy and
               Vincent Vanhoucke and
               Sergey Ioffe and
               Jonathon Shlens and
               Zbigniew Wojna},
  title     = {Rethinking the Inception Architecture <span class="hljs-keyword">for</span> Computer Vision},
  journal   = {CoRR},
  volume    = {abs/<span class="hljs-number">1512.00567</span>},
  year      = {<span class="hljs-number">2015</span>},
  url       = {http:<span class="hljs-regexp">//</span>arxiv.org<span class="hljs-regexp">/abs/</span><span class="hljs-number">1512.00567</span>},
  archivePrefix = {arXiv},
  eprint    = {<span class="hljs-number">1512.00567</span>},
  timestamp = {Mon, <span class="hljs-number">13</span> Aug <span class="hljs-number">2018</span> <span class="hljs-number">16</span>:<span class="hljs-number">49</span>:<span class="hljs-number">07</span> +<span class="hljs-number">0200</span>},
  biburl    = {https:<span class="hljs-regexp">//</span>dblp.org<span class="hljs-regexp">/rec/</span>journals<span class="hljs-regexp">/corr/</span>SzegedyVISW15.bib},
  bibsource = {dblp computer science bibliography, https:<span class="hljs-regexp">//</span>dblp.org}
}`}}),{c(){_=o("meta"),_e=m(),j=o("h1"),S=o("a"),re=o("span"),u(R.$$.fragment),Qe=m(),ie=o("span"),et=p("(Tensorflow) Inception v3"),je=m(),f=o("p"),pe=o("strong"),tt=p("Inception v3"),st=p(" is a convolutional neural network architecture from the Inception family that makes several improvements including using "),L=o("a"),at=p("Label Smoothing"),ot=p(", Factorized 7 x 7 convolutions, and the use of an "),M=o("a"),nt=p("auxiliary classifer"),lt=p(" to propagate label information lower down the network (along with the use of batch normalization for layers in the sidehead). The key building block is an "),V=o("a"),rt=p("Inception Module"),it=p("."),$e=m(),I=o("p"),pt=p("The weights from this model were ported from "),B=o("a"),ht=p("Tensorflow/Models"),mt=p("."),ye=m(),$=o("h2"),P=o("a"),he=o("span"),u(G.$$.fragment),ct=m(),me=o("span"),ft=p("How do I use this model on an image?"),ke=m(),Q=o("p"),ut=p("To load a pretrained model:"),xe=m(),u(W.$$.fragment),Ee=m(),ee=o("p"),dt=p("To load and preprocess the image:"),Se=m(),u(Y.$$.fragment),Ie=m(),te=o("p"),gt=p("To get the model predictions:"),Pe=m(),u(D.$$.fragment),Te=m(),se=o("p"),wt=p("To get the top-5 predictions class names:"),Ae=m(),u(U.$$.fragment),qe=m(),T=o("p"),vt=p("Replace the model name with the variant you want to use, e.g. "),ce=o("code"),bt=p("tf_inception_v3"),_t=p(". You can find the IDs in the model summaries at the top of this page."),Ne=m(),A=o("p"),jt=p("To extract image features with this model, follow the "),ae=o("a"),$t=p("timm feature extraction examples"),yt=p(", just change the name of the model you want to use."),ze=m(),y=o("h2"),q=o("a"),fe=o("span"),u(F.$$.fragment),kt=m(),ue=o("span"),xt=p("How do I finetune this model?"),Ce=m(),oe=o("p"),Et=p("You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),He=m(),u(J.$$.fragment),Re=m(),N=o("p"),St=p("To finetune on your own dataset, you have to write a training loop or adapt "),O=o("a"),It=p(`timm\u2019s training
script`),Pt=p(" to use your dataset."),Le=m(),k=o("h2"),z=o("a"),de=o("span"),u(X.$$.fragment),Tt=m(),ge=o("span"),At=p("How do I train this model?"),Me=m(),C=o("p"),qt=p("You can follow the "),ne=o("a"),Nt=p("timm recipe scripts"),zt=p(" for training a new model afresh."),Ve=m(),x=o("h2"),H=o("a"),we=o("span"),u(Z.$$.fragment),Ct=m(),ve=o("span"),Ht=p("Citation"),Be=m(),u(K.$$.fragment),this.h()},l(e){const a=gs('[data-svelte="svelte-1phssyn"]',document.head);_=n(a,"META",{name:!0,content:!0}),a.forEach(t),_e=c(e),j=n(e,"H1",{class:!0});var We=l(j);S=n(We,"A",{id:!0,class:!0,href:!0});var Lt=l(S);re=n(Lt,"SPAN",{});var Mt=l(re);d(R.$$.fragment,Mt),Mt.forEach(t),Lt.forEach(t),Qe=c(We),ie=n(We,"SPAN",{});var Vt=l(ie);et=h(Vt,"(Tensorflow) Inception v3"),Vt.forEach(t),We.forEach(t),je=c(e),f=n(e,"P",{});var E=l(f);pe=n(E,"STRONG",{});var Bt=l(pe);tt=h(Bt,"Inception v3"),Bt.forEach(t),st=h(E," is a convolutional neural network architecture from the Inception family that makes several improvements including using "),L=n(E,"A",{href:!0,rel:!0});var Gt=l(L);at=h(Gt,"Label Smoothing"),Gt.forEach(t),ot=h(E,", Factorized 7 x 7 convolutions, and the use of an "),M=n(E,"A",{href:!0,rel:!0});var Wt=l(M);nt=h(Wt,"auxiliary classifer"),Wt.forEach(t),lt=h(E," to propagate label information lower down the network (along with the use of batch normalization for layers in the sidehead). The key building block is an "),V=n(E,"A",{href:!0,rel:!0});var Yt=l(V);rt=h(Yt,"Inception Module"),Yt.forEach(t),it=h(E,"."),E.forEach(t),$e=c(e),I=n(e,"P",{});var Ye=l(I);pt=h(Ye,"The weights from this model were ported from "),B=n(Ye,"A",{href:!0,rel:!0});var Dt=l(B);ht=h(Dt,"Tensorflow/Models"),Dt.forEach(t),mt=h(Ye,"."),Ye.forEach(t),ye=c(e),$=n(e,"H2",{class:!0});var De=l($);P=n(De,"A",{id:!0,class:!0,href:!0});var Ut=l(P);he=n(Ut,"SPAN",{});var Ft=l(he);d(G.$$.fragment,Ft),Ft.forEach(t),Ut.forEach(t),ct=c(De),me=n(De,"SPAN",{});var Jt=l(me);ft=h(Jt,"How do I use this model on an image?"),Jt.forEach(t),De.forEach(t),ke=c(e),Q=n(e,"P",{});var Ot=l(Q);ut=h(Ot,"To load a pretrained model:"),Ot.forEach(t),xe=c(e),d(W.$$.fragment,e),Ee=c(e),ee=n(e,"P",{});var Xt=l(ee);dt=h(Xt,"To load and preprocess the image:"),Xt.forEach(t),Se=c(e),d(Y.$$.fragment,e),Ie=c(e),te=n(e,"P",{});var Zt=l(te);gt=h(Zt,"To get the model predictions:"),Zt.forEach(t),Pe=c(e),d(D.$$.fragment,e),Te=c(e),se=n(e,"P",{});var Kt=l(se);wt=h(Kt,"To get the top-5 predictions class names:"),Kt.forEach(t),Ae=c(e),d(U.$$.fragment,e),qe=c(e),T=n(e,"P",{});var Ue=l(T);vt=h(Ue,"Replace the model name with the variant you want to use, e.g. "),ce=n(Ue,"CODE",{});var Qt=l(ce);bt=h(Qt,"tf_inception_v3"),Qt.forEach(t),_t=h(Ue,". You can find the IDs in the model summaries at the top of this page."),Ue.forEach(t),Ne=c(e),A=n(e,"P",{});var Fe=l(A);jt=h(Fe,"To extract image features with this model, follow the "),ae=n(Fe,"A",{href:!0});var es=l(ae);$t=h(es,"timm feature extraction examples"),es.forEach(t),yt=h(Fe,", just change the name of the model you want to use."),Fe.forEach(t),ze=c(e),y=n(e,"H2",{class:!0});var Je=l(y);q=n(Je,"A",{id:!0,class:!0,href:!0});var ts=l(q);fe=n(ts,"SPAN",{});var ss=l(fe);d(F.$$.fragment,ss),ss.forEach(t),ts.forEach(t),kt=c(Je),ue=n(Je,"SPAN",{});var as=l(ue);xt=h(as,"How do I finetune this model?"),as.forEach(t),Je.forEach(t),Ce=c(e),oe=n(e,"P",{});var os=l(oe);Et=h(os,"You can finetune any of the pre-trained models just by changing the classifier (the last layer)."),os.forEach(t),He=c(e),d(J.$$.fragment,e),Re=c(e),N=n(e,"P",{});var Oe=l(N);St=h(Oe,"To finetune on your own dataset, you have to write a training loop or adapt "),O=n(Oe,"A",{href:!0,rel:!0});var ns=l(O);It=h(ns,`timm\u2019s training
script`),ns.forEach(t),Pt=h(Oe," to use your dataset."),Oe.forEach(t),Le=c(e),k=n(e,"H2",{class:!0});var Xe=l(k);z=n(Xe,"A",{id:!0,class:!0,href:!0});var ls=l(z);de=n(ls,"SPAN",{});var rs=l(de);d(X.$$.fragment,rs),rs.forEach(t),ls.forEach(t),Tt=c(Xe),ge=n(Xe,"SPAN",{});var is=l(ge);At=h(is,"How do I train this model?"),is.forEach(t),Xe.forEach(t),Me=c(e),C=n(e,"P",{});var Ze=l(C);qt=h(Ze,"You can follow the "),ne=n(Ze,"A",{href:!0});var ps=l(ne);Nt=h(ps,"timm recipe scripts"),ps.forEach(t),zt=h(Ze," for training a new model afresh."),Ze.forEach(t),Ve=c(e),x=n(e,"H2",{class:!0});var Ke=l(x);H=n(Ke,"A",{id:!0,class:!0,href:!0});var hs=l(H);we=n(hs,"SPAN",{});var ms=l(we);d(Z.$$.fragment,ms),ms.forEach(t),hs.forEach(t),Ct=c(Ke),ve=n(Ke,"SPAN",{});var cs=l(ve);Ht=h(cs,"Citation"),cs.forEach(t),Ke.forEach(t),Be=c(e),d(K.$$.fragment,e),this.h()},h(){i(_,"name","hf:doc:metadata"),i(_,"content",JSON.stringify(_s)),i(S,"id","tensorflow-inception-v3"),i(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(S,"href","#tensorflow-inception-v3"),i(j,"class","relative group"),i(L,"href","https://paperswithcode.com/method/label-smoothing"),i(L,"rel","nofollow"),i(M,"href","https://paperswithcode.com/method/auxiliary-classifier"),i(M,"rel","nofollow"),i(V,"href","https://paperswithcode.com/method/inception-v3-module"),i(V,"rel","nofollow"),i(B,"href","https://github.com/tensorflow/models"),i(B,"rel","nofollow"),i(P,"id","how-do-i-use-this-model-on-an-image"),i(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(P,"href","#how-do-i-use-this-model-on-an-image"),i($,"class","relative group"),i(ae,"href","../feature_extraction"),i(q,"id","how-do-i-finetune-this-model"),i(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(q,"href","#how-do-i-finetune-this-model"),i(y,"class","relative group"),i(O,"href","https://github.com/rwightman/pytorch-image-models/blob/master/train.py"),i(O,"rel","nofollow"),i(z,"id","how-do-i-train-this-model"),i(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(z,"href","#how-do-i-train-this-model"),i(k,"class","relative group"),i(ne,"href","../scripts"),i(H,"id","citation"),i(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(H,"href","#citation"),i(x,"class","relative group")},m(e,a){s(document.head,_),r(e,_e,a),r(e,j,a),s(j,S),s(S,re),g(R,re,null),s(j,Qe),s(j,ie),s(ie,et),r(e,je,a),r(e,f,a),s(f,pe),s(pe,tt),s(f,st),s(f,L),s(L,at),s(f,ot),s(f,M),s(M,nt),s(f,lt),s(f,V),s(V,rt),s(f,it),r(e,$e,a),r(e,I,a),s(I,pt),s(I,B),s(B,ht),s(I,mt),r(e,ye,a),r(e,$,a),s($,P),s(P,he),g(G,he,null),s($,ct),s($,me),s(me,ft),r(e,ke,a),r(e,Q,a),s(Q,ut),r(e,xe,a),g(W,e,a),r(e,Ee,a),r(e,ee,a),s(ee,dt),r(e,Se,a),g(Y,e,a),r(e,Ie,a),r(e,te,a),s(te,gt),r(e,Pe,a),g(D,e,a),r(e,Te,a),r(e,se,a),s(se,wt),r(e,Ae,a),g(U,e,a),r(e,qe,a),r(e,T,a),s(T,vt),s(T,ce),s(ce,bt),s(T,_t),r(e,Ne,a),r(e,A,a),s(A,jt),s(A,ae),s(ae,$t),s(A,yt),r(e,ze,a),r(e,y,a),s(y,q),s(q,fe),g(F,fe,null),s(y,kt),s(y,ue),s(ue,xt),r(e,Ce,a),r(e,oe,a),s(oe,Et),r(e,He,a),g(J,e,a),r(e,Re,a),r(e,N,a),s(N,St),s(N,O),s(O,It),s(N,Pt),r(e,Le,a),r(e,k,a),s(k,z),s(z,de),g(X,de,null),s(k,Tt),s(k,ge),s(ge,At),r(e,Me,a),r(e,C,a),s(C,qt),s(C,ne),s(ne,Nt),s(C,zt),r(e,Ve,a),r(e,x,a),s(x,H),s(H,we),g(Z,we,null),s(x,Ct),s(x,ve),s(ve,Ht),r(e,Be,a),g(K,e,a),Ge=!0},p:ws,i(e){Ge||(w(R.$$.fragment,e),w(G.$$.fragment,e),w(W.$$.fragment,e),w(Y.$$.fragment,e),w(D.$$.fragment,e),w(U.$$.fragment,e),w(F.$$.fragment,e),w(J.$$.fragment,e),w(X.$$.fragment,e),w(Z.$$.fragment,e),w(K.$$.fragment,e),Ge=!0)},o(e){v(R.$$.fragment,e),v(G.$$.fragment,e),v(W.$$.fragment,e),v(Y.$$.fragment,e),v(D.$$.fragment,e),v(U.$$.fragment,e),v(F.$$.fragment,e),v(J.$$.fragment,e),v(X.$$.fragment,e),v(Z.$$.fragment,e),v(K.$$.fragment,e),Ge=!1},d(e){t(_),e&&t(_e),e&&t(j),b(R),e&&t(je),e&&t(f),e&&t($e),e&&t(I),e&&t(ye),e&&t($),b(G),e&&t(ke),e&&t(Q),e&&t(xe),b(W,e),e&&t(Ee),e&&t(ee),e&&t(Se),b(Y,e),e&&t(Ie),e&&t(te),e&&t(Pe),b(D,e),e&&t(Te),e&&t(se),e&&t(Ae),b(U,e),e&&t(qe),e&&t(T),e&&t(Ne),e&&t(A),e&&t(ze),e&&t(y),b(F),e&&t(Ce),e&&t(oe),e&&t(He),b(J,e),e&&t(Re),e&&t(N),e&&t(Le),e&&t(k),b(X),e&&t(Me),e&&t(C),e&&t(Ve),e&&t(x),b(Z),e&&t(Be),b(K,e)}}}const _s={local:"tensorflow-inception-v3",sections:[{local:"how-do-i-use-this-model-on-an-image",title:"How do I use this model on an image?"},{local:"how-do-i-finetune-this-model",title:"How do I finetune this model?"},{local:"how-do-i-train-this-model",title:"How do I train this model?"},{local:"citation",title:"Citation"}],title:"(Tensorflow) Inception v3"};function js(Rt){return vs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class xs extends fs{constructor(_){super();us(this,_,js,bs,ds,{})}}export{xs as default,_s as metadata};
