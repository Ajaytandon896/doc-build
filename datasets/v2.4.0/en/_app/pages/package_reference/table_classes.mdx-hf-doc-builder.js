import{S as f$,i as y$,s as v$,e as r,k as s,w as m,t as d,M as $$,c as o,d as a,m as l,a as n,x as p,h as c,b as i,G as e,g as M,y as b,q as h,o as u,B as g,v as _$,L as T$}from"../../chunks/vendor-hf-doc-builder.js";import{D as f}from"../../chunks/Docstring-hf-doc-builder.js";import{C as w$}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as No}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as x$}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function E$(wl){let D,oe,P,C,A;return C=new w$({props:{code:`import pandas as pd
import pyarrow as pa
df = pd.DataFrame({
pa.Table.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pyarrow <span class="hljs-keyword">as</span> pa
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({
    ...     <span class="hljs-string">&#x27;int&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
    ...     <span class="hljs-string">&#x27;str&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]
    ... })
<span class="hljs-meta">&gt;&gt;&gt; </span>pa.Table.from_pandas(df)
&lt;pyarrow.lib.Table <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f05d1fb1b40</span>&gt;`}}),{c(){D=r("p"),oe=d("Examples:"),P=s(),m(C.$$.fragment)},l(I){D=o(I,"P",{});var N=n(D);oe=c(N,"Examples:"),N.forEach(a),P=l(I),p(C.$$.fragment,I)},m(I,N){M(I,D,N),e(D,oe),M(I,P,N),b(C,I,N),A=!0},p:T$,i(I){A||(h(C.$$.fragment,I),A=!0)},o(I){u(C.$$.fragment,I),A=!1},d(I){I&&a(D),I&&a(P),g(C,I)}}}function k$(wl){let D,oe,P,C,A,I,N,jo,Cc,xl,j,Pc,Fo,Lc,Ac,io,Nc,jc,El,K,ne,Vo,zt,Fc,So,Vc,kl,x,Bt,Sc,qo,qc,Rc,Ro,Uc,zc,Uo,Bc,Oc,F,Ot,Wc,zo,Xc,Hc,Wt,Gc,Bo,Yc,Jc,Kc,se,Xt,Qc,Oo,Zc,ei,le,Ht,ti,Wo,ai,ri,de,Gt,oi,Xo,ni,si,ce,Yt,li,Ho,di,ci,mo,Jt,ii,ie,Kt,mi,Go,pi,bi,me,Qt,hi,Yo,ui,gi,pe,Zt,fi,Jo,yi,vi,be,ea,$i,Ko,_i,Ti,he,ta,wi,Qo,xi,Ei,ue,aa,ki,Zo,Mi,Ii,V,ra,Di,en,Ci,Pi,tn,Li,Ai,ge,oa,Ni,an,ji,Fi,fe,na,Vi,rn,Si,Ml,Q,ye,on,sa,qi,nn,Ri,Il,y,la,Ui,sn,zi,Bi,ln,Oi,Wi,dn,Xi,Hi,cn,Gi,Yi,S,da,Ji,mn,Ki,Qi,ca,Zi,pn,em,tm,am,ve,ia,rm,bn,om,nm,$e,ma,sm,hn,lm,dm,_e,pa,cm,un,im,mm,Te,ba,pm,gn,bm,hm,po,ha,um,we,ua,gm,fn,fm,ym,xe,ga,vm,yn,$m,_m,Ee,fa,Tm,vn,wm,xm,ke,ya,Em,$n,km,Mm,Me,va,Im,_n,Dm,Cm,Ie,$a,Pm,Tn,Lm,Am,q,_a,Nm,wn,jm,Fm,xn,Vm,Sm,De,Ta,qm,En,Rm,Um,Ce,wa,zm,kn,Bm,Om,Pe,xa,Wm,Mn,Xm,Hm,Le,Ea,Gm,In,Ym,Jm,Ae,ka,Km,Dn,Qm,Zm,Ne,Ma,ep,Cn,tp,ap,R,Ia,rp,Pn,op,np,Ln,sp,lp,je,Da,dp,An,cp,ip,Fe,Ca,mp,Nn,pp,bp,U,Pa,hp,jn,up,gp,Fn,fp,yp,Ve,La,vp,Vn,$p,_p,Se,Aa,Tp,Sn,wp,xp,qe,Na,Ep,qn,kp,Mp,Re,ja,Ip,Rn,Dp,Cp,Ue,Fa,Pp,Un,Lp,Ap,bo,Va,Np,ho,Sa,jp,L,qa,Fp,zn,Vp,Sp,Ra,qp,Bn,Rp,Up,zp,Ua,Bp,On,Op,Wp,Xp,ze,Hp,Be,za,Gp,Wn,Yp,Jp,Oe,Ba,Kp,Xn,Qp,Zp,We,Oa,eb,Hn,tb,Dl,Z,Xe,Gn,Wa,ab,Yn,rb,Cl,_,Xa,ob,Jn,nb,sb,Kn,lb,db,Qn,cb,ib,Zn,mb,pb,es,bb,hb,z,Ha,ub,ts,gb,fb,Ga,yb,as,vb,$b,_b,He,Ya,Tb,rs,wb,xb,Ge,Ja,Eb,os,kb,Mb,Ye,Ka,Ib,ns,Db,Cb,Je,Qa,Pb,ss,Lb,Ab,uo,Za,Nb,Ke,er,jb,ls,Fb,Vb,Qe,tr,Sb,ds,qb,Rb,Ze,ar,Ub,cs,zb,Bb,et,rr,Ob,is,Wb,Xb,tt,or,Hb,ms,Gb,Yb,at,nr,Jb,ps,Kb,Qb,B,sr,Zb,bs,eh,th,hs,ah,rh,rt,lr,oh,us,nh,sh,ot,dr,lh,gs,dh,ch,nt,cr,ih,fs,mh,ph,st,ir,bh,ys,hh,uh,lt,mr,gh,vs,fh,yh,dt,pr,vh,$s,$h,_h,O,br,Th,_s,wh,xh,Ts,Eh,kh,ct,hr,Mh,ws,Ih,Dh,it,ur,Ch,xs,Ph,Lh,W,gr,Ah,Es,Nh,jh,ks,Fh,Vh,mt,fr,Sh,Ms,qh,Rh,pt,yr,Uh,Is,zh,Bh,bt,vr,Oh,Ds,Wh,Xh,ht,$r,Hh,Cs,Gh,Yh,ut,_r,Jh,Ps,Kh,Qh,go,Tr,Pl,ee,gt,Ls,wr,Zh,As,eu,Ll,v,xr,tu,Ns,au,ru,js,ou,nu,Er,Fs,su,lu,Vs,du,cu,kr,iu,Ss,mu,pu,bu,Mr,hu,qs,uu,gu,fu,Rs,yu,vu,X,Ir,$u,Us,_u,Tu,Dr,wu,zs,xu,Eu,ku,ft,Cr,Mu,Bs,Iu,Du,yt,Pr,Cu,Os,Pu,Lu,vt,Lr,Au,Ws,Nu,ju,$t,Ar,Fu,Xs,Vu,Su,fo,Nr,qu,_t,jr,Ru,Hs,Uu,zu,Tt,Fr,Bu,Gs,Ou,Wu,wt,Vr,Xu,Ys,Hu,Gu,xt,Sr,Yu,Js,Ju,Ku,Et,qr,Qu,Ks,Zu,eg,kt,Rr,tg,Qs,ag,rg,H,Ur,og,Zs,ng,sg,el,lg,dg,Mt,zr,cg,tl,ig,mg,It,Br,pg,al,bg,hg,Dt,Or,ug,rl,gg,fg,Ct,Wr,yg,ol,vg,$g,Pt,Xr,_g,nl,Tg,wg,Lt,Hr,xg,sl,Eg,kg,G,Gr,Mg,ll,Ig,Dg,dl,Cg,Pg,At,Yr,Lg,cl,Ag,Ng,Nt,Jr,jg,il,Fg,Vg,Y,Kr,Sg,ml,qg,Rg,pl,Ug,zg,jt,Qr,Bg,bl,Og,Wg,Ft,Zr,Xg,hl,Hg,Gg,Vt,eo,Yg,ul,Jg,Kg,St,to,Qg,gl,Zg,ef,qt,ao,tf,fl,af,rf,yo,ro,of,Rt,oo,nf,yl,sf,Al,te,Ut,vl,no,lf,$l,df,Nl,ae,so,cf,_l,mf,jl,re,lo,pf,Tl,bf,Fl;return I=new No({}),zt=new No({}),Bt=new f({props:{name:"class datasets.table.Table",anchor:"datasets.table.Table",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L148"}}),Ot=new f({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L199"}}),Xt=new f({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.Table.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L215",returnType:`
<p><code>bool</code></p>
`}}),Ht=new f({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L232",returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Gt=new f({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L246",returnType:`
<p><code>dict</code></p>
`}}),Yt=new f({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.Table.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.Table.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.Table.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.Table.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.Table.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.Table.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.Table.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.Table.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.Table.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.Table.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.Table.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.Table.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.Table.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L255",returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Jt=new f({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L317"}}),Kt=new f({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L320",returnType:`
<p><code>pyarrow.Field</code></p>
`}}),Qt=new f({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L333",returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Zt=new f({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L346"}}),ea=new f({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L355",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),ta=new f({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L365",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),aa=new f({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L375",returnType:`
<p>int</p>
`}}),ra=new f({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L385",returnType:`
<p>int</p>
`}}),oa=new f({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L398",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),na=new f({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L408"}}),sa=new No({}),la=new f({props:{name:"class datasets.table.InMemoryTable",anchor:"datasets.table.InMemoryTable",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L631"}}),da=new f({props:{name:"validate",anchor:"datasets.table.InMemoryTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L199"}}),ia=new f({props:{name:"equals",anchor:"datasets.table.InMemoryTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.InMemoryTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L215",returnType:`
<p><code>bool</code></p>
`}}),ma=new f({props:{name:"to_batches",anchor:"datasets.table.InMemoryTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L232",returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),pa=new f({props:{name:"to_pydict",anchor:"datasets.table.InMemoryTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L246",returnType:`
<p><code>dict</code></p>
`}}),ba=new f({props:{name:"to_pandas",anchor:"datasets.table.InMemoryTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.InMemoryTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.InMemoryTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.InMemoryTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.InMemoryTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.InMemoryTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.InMemoryTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.InMemoryTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.InMemoryTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.InMemoryTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.InMemoryTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.InMemoryTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.InMemoryTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.InMemoryTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L255",returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),ha=new f({props:{name:"to_string",anchor:"datasets.table.InMemoryTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L317"}}),ua=new f({props:{name:"field",anchor:"datasets.table.InMemoryTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L320",returnType:`
<p><code>pyarrow.Field</code></p>
`}}),ga=new f({props:{name:"column",anchor:"datasets.table.InMemoryTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L333",returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),fa=new f({props:{name:"itercolumns",anchor:"datasets.table.InMemoryTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L346"}}),ya=new f({props:{name:"schema",anchor:"datasets.table.InMemoryTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L355",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),va=new f({props:{name:"columns",anchor:"datasets.table.InMemoryTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L365",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),$a=new f({props:{name:"num_columns",anchor:"datasets.table.InMemoryTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L375",returnType:`
<p>int</p>
`}}),_a=new f({props:{name:"num_rows",anchor:"datasets.table.InMemoryTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L385",returnType:`
<p>int</p>
`}}),Ta=new f({props:{name:"shape",anchor:"datasets.table.InMemoryTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L398",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),wa=new f({props:{name:"nbytes",anchor:"datasets.table.InMemoryTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L408"}}),xa=new f({props:{name:"column_names",anchor:"datasets.table.InMemoryTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L415"}}),Ea=new f({props:{name:"slice",anchor:"datasets.table.InMemoryTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.InMemoryTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L768",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ka=new f({props:{name:"filter",anchor:"datasets.table.InMemoryTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L785"}}),Ma=new f({props:{name:"flatten",anchor:"datasets.table.InMemoryTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L791",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ia=new f({props:{name:"combine_chunks",anchor:"datasets.table.InMemoryTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L805",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Da=new f({props:{name:"cast",anchor:"datasets.table.InMemoryTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.InMemoryTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L821",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ca=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.InMemoryTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L836",returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Pa=new f({props:{name:"add_column",anchor:"datasets.table.InMemoryTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.InMemoryTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L850",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),La=new f({props:{name:"append_column",anchor:"datasets.table.InMemoryTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L871",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Aa=new f({props:{name:"remove_column",anchor:"datasets.table.InMemoryTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L888",returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Na=new f({props:{name:"set_column",anchor:"datasets.table.InMemoryTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.InMemoryTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L902",returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ja=new f({props:{name:"rename_columns",anchor:"datasets.table.InMemoryTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L921"}}),Fa=new f({props:{name:"drop",anchor:"datasets.table.InMemoryTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L927",returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Va=new f({props:{name:"from_file",anchor:"datasets.table.InMemoryTable.from_file",parameters:[{name:"filename",val:": str"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L646"}}),Sa=new f({props:{name:"from_buffer",anchor:"datasets.table.InMemoryTable.from_buffer",parameters:[{name:"buffer",val:": Buffer"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L651"}}),qa=new f({props:{name:"from_pandas",anchor:"datasets.table.InMemoryTable.from_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014;",name:"df"},{anchor:"datasets.table.InMemoryTable.from_pandas.schema",description:`<strong>schema</strong> (<code>pyarrow.Schema</code>, optional) &#x2014;
The expected schema of the Arrow Table. This can be used to
indicate the type of columns if we cannot infer it automatically.
If passed, the output will have exactly this schema. Columns
specified in the schema that are not found in the DataFrame columns
or its index will raise an error. Additional columns or index
levels in the DataFrame which are not specified in the schema will
be ignored.`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014;
Whether to store the index as an additional column in the resulting
<code>Table</code>. The default of None will store the index as a column,
except for RangeIndex which is stored as metadata only. Use
<code>preserve_index=True</code> to force it to be stored as a column.`,name:"preserve_index"},{anchor:"datasets.table.InMemoryTable.from_pandas.nthreads",description:`<strong>nthreads</strong> (<code>int</code>, defaults to <code>None</code> (may use up to system CPU count threads)) &#x2014;
If greater than 1, convert columns to Arrow in parallel using
indicated number of threads`,name:"nthreads"},{anchor:"datasets.table.InMemoryTable.from_pandas.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014;
List of column to be converted. If None, use all columns.`,name:"columns"},{anchor:"datasets.table.InMemoryTable.from_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L656",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ze=new x$({props:{anchor:"datasets.table.InMemoryTable.from_pandas.example",$$slots:{default:[E$]},$$scope:{ctx:wl}}}),za=new f({props:{name:"from_arrays",anchor:"datasets.table.InMemoryTable.from_arrays",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_arrays.arrays",description:`<strong>arrays</strong> (<code>List[Union[pyarrow.Array, pyarrow.ChunkedArray]]</code>) &#x2014;
Equal-length arrays that should form the table.`,name:"arrays"},{anchor:"datasets.table.InMemoryTable.from_arrays.names",description:`<strong>names</strong> (<code>List[str]</code>, optional) &#x2014;
Names for the table columns. If not passed, schema must be passed`,name:"names"},{anchor:"datasets.table.InMemoryTable.from_arrays.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
Schema for the created table. If not passed, names must be passed`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_arrays.metadata",description:`<strong>metadata</strong> (<code>Union[dict, Mapping]</code>, default None) &#x2014;
Optional metadata for the schema (if inferred).`,name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L714",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ba=new f({props:{name:"from_pydict",anchor:"datasets.table.InMemoryTable.from_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_pydict.mapping",description:`<strong>mapping</strong> (<code>Union[dict, Mapping]</code>) &#x2014;
A mapping of strings to Arrays or Python lists.`,name:"mapping"},{anchor:"datasets.table.InMemoryTable.from_pydict.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
If not passed, will be inferred from the Mapping values`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_pydict.metadata",description:`<strong>metadata</strong> (<code>Union[dict, Mapping]</code>, default None) &#x2014;
Optional metadata for the schema (if inferred).`,name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L734",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Oa=new f({props:{name:"from_batches",anchor:"datasets.table.InMemoryTable.from_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_batches.batches",description:`<strong>batches</strong> (<code>Union[Sequence[pyarrow.RecordBatch], Iterator[pyarrow.RecordBatch]]</code>) &#x2014;
Sequence of RecordBatch to be converted, all schemas must be equal.`,name:"batches"},{anchor:"datasets.table.InMemoryTable.from_batches.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
If not passed, will be inferred from the first RecordBatch.`,name:"schema"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L752",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Wa=new No({}),Xa=new f({props:{name:"class datasets.table.MemoryMappedTable",anchor:"datasets.table.MemoryMappedTable",parameters:[{name:"table",val:": Table"},{name:"path",val:": str"},{name:"replays",val:": typing.Union[typing.List[typing.Tuple[str, tuple, dict]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L949"}}),Ha=new f({props:{name:"validate",anchor:"datasets.table.MemoryMappedTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L199"}}),Ya=new f({props:{name:"equals",anchor:"datasets.table.MemoryMappedTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.MemoryMappedTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L215",returnType:`
<p><code>bool</code></p>
`}}),Ja=new f({props:{name:"to_batches",anchor:"datasets.table.MemoryMappedTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L232",returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Ka=new f({props:{name:"to_pydict",anchor:"datasets.table.MemoryMappedTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L246",returnType:`
<p><code>dict</code></p>
`}}),Qa=new f({props:{name:"to_pandas",anchor:"datasets.table.MemoryMappedTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L255",returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Za=new f({props:{name:"to_string",anchor:"datasets.table.MemoryMappedTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L317"}}),er=new f({props:{name:"field",anchor:"datasets.table.MemoryMappedTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L320",returnType:`
<p><code>pyarrow.Field</code></p>
`}}),tr=new f({props:{name:"column",anchor:"datasets.table.MemoryMappedTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L333",returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),ar=new f({props:{name:"itercolumns",anchor:"datasets.table.MemoryMappedTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L346"}}),rr=new f({props:{name:"schema",anchor:"datasets.table.MemoryMappedTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L355",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),or=new f({props:{name:"columns",anchor:"datasets.table.MemoryMappedTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L365",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),nr=new f({props:{name:"num_columns",anchor:"datasets.table.MemoryMappedTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L375",returnType:`
<p>int</p>
`}}),sr=new f({props:{name:"num_rows",anchor:"datasets.table.MemoryMappedTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L385",returnType:`
<p>int</p>
`}}),lr=new f({props:{name:"shape",anchor:"datasets.table.MemoryMappedTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L398",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),dr=new f({props:{name:"nbytes",anchor:"datasets.table.MemoryMappedTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L408"}}),cr=new f({props:{name:"column_names",anchor:"datasets.table.MemoryMappedTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L415"}}),ir=new f({props:{name:"slice",anchor:"datasets.table.MemoryMappedTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.MemoryMappedTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1008",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),mr=new f({props:{name:"filter",anchor:"datasets.table.MemoryMappedTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1027"}}),pr=new f({props:{name:"flatten",anchor:"datasets.table.MemoryMappedTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1035",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),br=new f({props:{name:"combine_chunks",anchor:"datasets.table.MemoryMappedTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1051",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),hr=new f({props:{name:"cast",anchor:"datasets.table.MemoryMappedTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.MemoryMappedTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1069",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ur=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1086",returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),gr=new f({props:{name:"add_column",anchor:"datasets.table.MemoryMappedTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.MemoryMappedTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1102",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),fr=new f({props:{name:"append_column",anchor:"datasets.table.MemoryMappedTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1125",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),yr=new f({props:{name:"remove_column",anchor:"datasets.table.MemoryMappedTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1144",returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),vr=new f({props:{name:"set_column",anchor:"datasets.table.MemoryMappedTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.MemoryMappedTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1160",returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),$r=new f({props:{name:"rename_columns",anchor:"datasets.table.MemoryMappedTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1181"}}),_r=new f({props:{name:"drop",anchor:"datasets.table.MemoryMappedTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1189",returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Tr=new f({props:{name:"from_file",anchor:"datasets.table.MemoryMappedTable.from_file",parameters:[{name:"filename",val:": str"},{name:"replays",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L975"}}),wr=new No({}),xr=new f({props:{name:"class datasets.table.ConcatenationTable",anchor:"datasets.table.ConcatenationTable",parameters:[{name:"table",val:": Table"},{name:"blocks",val:": typing.List[typing.List[datasets.table.TableBlock]]"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1216"}}),Ir=new f({props:{name:"validate",anchor:"datasets.table.ConcatenationTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L199"}}),Cr=new f({props:{name:"equals",anchor:"datasets.table.ConcatenationTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.ConcatenationTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L215",returnType:`
<p><code>bool</code></p>
`}}),Pr=new f({props:{name:"to_batches",anchor:"datasets.table.ConcatenationTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L232",returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Lr=new f({props:{name:"to_pydict",anchor:"datasets.table.ConcatenationTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L246",returnType:`
<p><code>dict</code></p>
`}}),Ar=new f({props:{name:"to_pandas",anchor:"datasets.table.ConcatenationTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.ConcatenationTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.ConcatenationTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.ConcatenationTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.ConcatenationTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.ConcatenationTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.ConcatenationTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.ConcatenationTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.ConcatenationTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.ConcatenationTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.ConcatenationTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.ConcatenationTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.ConcatenationTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.ConcatenationTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L255",returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Nr=new f({props:{name:"to_string",anchor:"datasets.table.ConcatenationTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L317"}}),jr=new f({props:{name:"field",anchor:"datasets.table.ConcatenationTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L320",returnType:`
<p><code>pyarrow.Field</code></p>
`}}),Fr=new f({props:{name:"column",anchor:"datasets.table.ConcatenationTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L333",returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Vr=new f({props:{name:"itercolumns",anchor:"datasets.table.ConcatenationTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L346"}}),Sr=new f({props:{name:"schema",anchor:"datasets.table.ConcatenationTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L355",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),qr=new f({props:{name:"columns",anchor:"datasets.table.ConcatenationTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L365",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),Rr=new f({props:{name:"num_columns",anchor:"datasets.table.ConcatenationTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L375",returnType:`
<p>int</p>
`}}),Ur=new f({props:{name:"num_rows",anchor:"datasets.table.ConcatenationTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L385",returnType:`
<p>int</p>
`}}),zr=new f({props:{name:"shape",anchor:"datasets.table.ConcatenationTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L398",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),Br=new f({props:{name:"nbytes",anchor:"datasets.table.ConcatenationTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L408"}}),Or=new f({props:{name:"column_names",anchor:"datasets.table.ConcatenationTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L415"}}),Wr=new f({props:{name:"slice",anchor:"datasets.table.ConcatenationTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.ConcatenationTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1388",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Xr=new f({props:{name:"filter",anchor:"datasets.table.ConcatenationTable.filter",parameters:[{name:"mask",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1419"}}),Hr=new f({props:{name:"flatten",anchor:"datasets.table.ConcatenationTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1430",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Gr=new f({props:{name:"combine_chunks",anchor:"datasets.table.ConcatenationTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1448",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Yr=new f({props:{name:"cast",anchor:"datasets.table.ConcatenationTable.cast",parameters:[{name:"target_schema",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.ConcatenationTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1468",returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Jr=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.ConcatenationTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1499",returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Kr=new f({props:{name:"add_column",anchor:"datasets.table.ConcatenationTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.ConcatenationTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1517",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Qr=new f({props:{name:"append_column",anchor:"datasets.table.ConcatenationTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1538",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Zr=new f({props:{name:"remove_column",anchor:"datasets.table.ConcatenationTable.remove_column",parameters:[{name:"i",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1555",returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),eo=new f({props:{name:"set_column",anchor:"datasets.table.ConcatenationTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.ConcatenationTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1579",returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),to=new f({props:{name:"rename_columns",anchor:"datasets.table.ConcatenationTable.rename_columns",parameters:[{name:"names",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1598"}}),ao=new f({props:{name:"drop",anchor:"datasets.table.ConcatenationTable.drop",parameters:[{name:"columns",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1611",returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ro=new f({props:{name:"from_blocks",anchor:"datasets.table.ConcatenationTable.from_blocks",parameters:[{name:"blocks",val:": TableBlockContainer"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1315"}}),oo=new f({props:{name:"from_tables",anchor:"datasets.table.ConcatenationTable.from_tables",parameters:[{name:"tables",val:": typing.List[typing.Union[pyarrow.lib.Table, datasets.table.Table]]"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.from_tables.tables",description:`<strong>tables</strong> (list of <code>Table</code> or list of <code>pyarrow.Table</code>) &#x2014; List of tables.
axis &#x2014; (<code>{0, 1}</code>, defaults to <code>0</code>, meaning over rows):`,name:"tables"},{anchor:"datasets.table.ConcatenationTable.from_tables.Axis",description:`<strong>Axis</strong> to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns &#x2014;
(horizontally). &#x2014;`,name:"Axis"},{anchor:"datasets.table.ConcatenationTable.from_tables.*New",description:"<strong>*New</strong> in version 1.6.0* &#x2014;",name:"*New"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1329"}}),no=new No({}),so=new f({props:{name:"datasets.table.concat_tables",anchor:"datasets.table.concat_tables",parameters:[{name:"tables",val:": typing.List[datasets.table.Table]"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.table.concat_tables.tables",description:"<strong>tables</strong> (list of <code>Table</code>) &#x2014; List of tables to be concatenated.",name:"tables"},{anchor:"datasets.table.concat_tables.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, defaults to <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1633",returnDescription:`
<p>If the number of input tables is > 1, then the returned table is a <code>datasets.table.ConcatenationTable</code>.
Otherwise if there\u2019s only one table, it is returned as is.</p>
`,returnType:`
<p><a
  href="/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),lo=new f({props:{name:"datasets.table.list_table_cache_files",anchor:"datasets.table.list_table_cache_files",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/2.4.0/src/datasets/table.py#L1656",returnDescription:`
<p>a list of paths to the cache files loaded by the table</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),{c(){D=r("meta"),oe=s(),P=r("h1"),C=r("a"),A=r("span"),m(I.$$.fragment),N=s(),jo=r("span"),Cc=d("Table Classes"),xl=s(),j=r("p"),Pc=d("Each "),Fo=r("code"),Lc=d("Dataset"),Ac=d(` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),io=r("a"),Nc=d("table.Table"),jc=d("."),El=s(),K=r("h2"),ne=r("a"),Vo=r("span"),m(zt.$$.fragment),Fc=s(),So=r("span"),Vc=d("Table"),kl=s(),x=r("div"),m(Bt.$$.fragment),Sc=s(),qo=r("p"),qc=d(`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),Rc=s(),Ro=r("p"),Uc=d(`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),zc=s(),Uo=r("p"),Bc=d("The implementation of these methods differs for the subclasses."),Oc=s(),F=r("div"),m(Ot.$$.fragment),Wc=s(),zo=r("p"),Xc=d("Perform validation checks.  An exception is raised if validation fails."),Hc=s(),Wt=r("p"),Gc=d("By default only cheap validation checks are run.  Pass "),Bo=r("em"),Yc=d("full=True"),Jc=d(`
for thorough validation checks (potentially O(n)).`),Kc=s(),se=r("div"),m(Xt.$$.fragment),Qc=s(),Oo=r("p"),Zc=d("Check if contents of two tables are equal."),ei=s(),le=r("div"),m(Ht.$$.fragment),ti=s(),Wo=r("p"),ai=d("Convert Table to list of (contiguous) RecordBatch objects."),ri=s(),de=r("div"),m(Gt.$$.fragment),oi=s(),Xo=r("p"),ni=d("Convert the Table to a dict or OrderedDict."),si=s(),ce=r("div"),m(Yt.$$.fragment),li=s(),Ho=r("p"),di=d("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),ci=s(),mo=r("div"),m(Jt.$$.fragment),ii=s(),ie=r("div"),m(Kt.$$.fragment),mi=s(),Go=r("p"),pi=d("Select a schema field by its column name or numeric index."),bi=s(),me=r("div"),m(Qt.$$.fragment),hi=s(),Yo=r("p"),ui=d("Select a column by its column name, or numeric index."),gi=s(),pe=r("div"),m(Zt.$$.fragment),fi=s(),Jo=r("p"),yi=d("Iterator over all columns in their numerical order."),vi=s(),be=r("div"),m(ea.$$.fragment),$i=s(),Ko=r("p"),_i=d("Schema of the table and its columns."),Ti=s(),he=r("div"),m(ta.$$.fragment),wi=s(),Qo=r("p"),xi=d("List of all columns in numerical order."),Ei=s(),ue=r("div"),m(aa.$$.fragment),ki=s(),Zo=r("p"),Mi=d("Number of columns in this table."),Ii=s(),V=r("div"),m(ra.$$.fragment),Di=s(),en=r("p"),Ci=d("Number of rows in this table."),Pi=s(),tn=r("p"),Li=d(`Due to the definition of a table, all columns have the same number of
rows.`),Ai=s(),ge=r("div"),m(oa.$$.fragment),Ni=s(),an=r("p"),ji=d("Dimensions of the table: (#rows, #columns)."),Fi=s(),fe=r("div"),m(na.$$.fragment),Vi=s(),rn=r("p"),Si=d("Total number of bytes consumed by the elements of the table."),Ml=s(),Q=r("h2"),ye=r("a"),on=r("span"),m(sa.$$.fragment),qi=s(),nn=r("span"),Ri=d("InMemoryTable"),Il=s(),y=r("div"),m(la.$$.fragment),Ui=s(),sn=r("p"),zi=d("The table is said in-memory when it is loaded into the user\u2019s RAM."),Bi=s(),ln=r("p"),Oi=d(`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),Wi=s(),dn=r("p"),Xi=d(`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Hi=s(),cn=r("p"),Gi=d(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Yi=s(),S=r("div"),m(da.$$.fragment),Ji=s(),mn=r("p"),Ki=d("Perform validation checks.  An exception is raised if validation fails."),Qi=s(),ca=r("p"),Zi=d("By default only cheap validation checks are run.  Pass "),pn=r("em"),em=d("full=True"),tm=d(`
for thorough validation checks (potentially O(n)).`),am=s(),ve=r("div"),m(ia.$$.fragment),rm=s(),bn=r("p"),om=d("Check if contents of two tables are equal."),nm=s(),$e=r("div"),m(ma.$$.fragment),sm=s(),hn=r("p"),lm=d("Convert Table to list of (contiguous) RecordBatch objects."),dm=s(),_e=r("div"),m(pa.$$.fragment),cm=s(),un=r("p"),im=d("Convert the Table to a dict or OrderedDict."),mm=s(),Te=r("div"),m(ba.$$.fragment),pm=s(),gn=r("p"),bm=d("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),hm=s(),po=r("div"),m(ha.$$.fragment),um=s(),we=r("div"),m(ua.$$.fragment),gm=s(),fn=r("p"),fm=d("Select a schema field by its column name or numeric index."),ym=s(),xe=r("div"),m(ga.$$.fragment),vm=s(),yn=r("p"),$m=d("Select a column by its column name, or numeric index."),_m=s(),Ee=r("div"),m(fa.$$.fragment),Tm=s(),vn=r("p"),wm=d("Iterator over all columns in their numerical order."),xm=s(),ke=r("div"),m(ya.$$.fragment),Em=s(),$n=r("p"),km=d("Schema of the table and its columns."),Mm=s(),Me=r("div"),m(va.$$.fragment),Im=s(),_n=r("p"),Dm=d("List of all columns in numerical order."),Cm=s(),Ie=r("div"),m($a.$$.fragment),Pm=s(),Tn=r("p"),Lm=d("Number of columns in this table."),Am=s(),q=r("div"),m(_a.$$.fragment),Nm=s(),wn=r("p"),jm=d("Number of rows in this table."),Fm=s(),xn=r("p"),Vm=d(`Due to the definition of a table, all columns have the same number of
rows.`),Sm=s(),De=r("div"),m(Ta.$$.fragment),qm=s(),En=r("p"),Rm=d("Dimensions of the table: (#rows, #columns)."),Um=s(),Ce=r("div"),m(wa.$$.fragment),zm=s(),kn=r("p"),Bm=d("Total number of bytes consumed by the elements of the table."),Om=s(),Pe=r("div"),m(xa.$$.fragment),Wm=s(),Mn=r("p"),Xm=d("Names of the table\u2019s columns"),Hm=s(),Le=r("div"),m(Ea.$$.fragment),Gm=s(),In=r("p"),Ym=d("Compute zero-copy slice of this Table"),Jm=s(),Ae=r("div"),m(ka.$$.fragment),Km=s(),Dn=r("p"),Qm=d("Select records from a Table. See pyarrow.compute.filter for full usage."),Zm=s(),Ne=r("div"),m(Ma.$$.fragment),ep=s(),Cn=r("p"),tp=d(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),ap=s(),R=r("div"),m(Ia.$$.fragment),rp=s(),Pn=r("p"),op=d("Make a new table by combining the chunks this table has."),np=s(),Ln=r("p"),sp=d(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),lp=s(),je=r("div"),m(Da.$$.fragment),dp=s(),An=r("p"),cp=d("Cast table values to another schema"),ip=s(),Fe=r("div"),m(Ca.$$.fragment),mp=s(),Nn=r("p"),pp=d(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),bp=s(),U=r("div"),m(Pa.$$.fragment),hp=s(),jn=r("p"),up=d("Add column to Table at position."),gp=s(),Fn=r("p"),fp=d(`A new table is returned with the column added, the original table
object is left unchanged.`),yp=s(),Ve=r("div"),m(La.$$.fragment),vp=s(),Vn=r("p"),$p=d("Append column at end of columns."),_p=s(),Se=r("div"),m(Aa.$$.fragment),Tp=s(),Sn=r("p"),wp=d("Create new Table with the indicated column removed."),xp=s(),qe=r("div"),m(Na.$$.fragment),Ep=s(),qn=r("p"),kp=d("Replace column in Table at position."),Mp=s(),Re=r("div"),m(ja.$$.fragment),Ip=s(),Rn=r("p"),Dp=d("Create new table with columns renamed to provided names."),Cp=s(),Ue=r("div"),m(Fa.$$.fragment),Pp=s(),Un=r("p"),Lp=d("Drop one or more columns and return a new table."),Ap=s(),bo=r("div"),m(Va.$$.fragment),Np=s(),ho=r("div"),m(Sa.$$.fragment),jp=s(),L=r("div"),m(qa.$$.fragment),Fp=s(),zn=r("p"),Vp=d("Convert pandas.DataFrame to an Arrow Table."),Sp=s(),Ra=r("p"),qp=d(`The column types in the resulting Arrow Table are inferred from the
dtypes of the pandas.Series in the DataFrame. In the case of non-object
Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Bn=r("em"),Rp=d("object"),Up=d(`, we need to guess the datatype by looking at the
Python objects in this Series.`),zp=s(),Ua=r("p"),Bp=d("Be aware that Series of the "),On=r("em"),Op=d("object"),Wp=d(` dtype don\u2019t carry enough
information to always lead to a meaningful Arrow type. In the case that
we cannot infer a type, e.g. because the DataFrame is of length 0 or
the Series only contains None/nan objects, the type is set to
null. This behavior can be avoided by constructing an explicit schema
and passing it to this function.`),Xp=s(),m(ze.$$.fragment),Hp=s(),Be=r("div"),m(za.$$.fragment),Gp=s(),Wn=r("p"),Yp=d("Construct a Table from Arrow arrays"),Jp=s(),Oe=r("div"),m(Ba.$$.fragment),Kp=s(),Xn=r("p"),Qp=d("Construct a Table from Arrow arrays or columns"),Zp=s(),We=r("div"),m(Oa.$$.fragment),eb=s(),Hn=r("p"),tb=d("Construct a Table from a sequence or iterator of Arrow RecordBatches."),Dl=s(),Z=r("h2"),Xe=r("a"),Gn=r("span"),m(Wa.$$.fragment),ab=s(),Yn=r("span"),rb=d("MemoryMappedTable"),Cl=s(),_=r("div"),m(Xa.$$.fragment),ob=s(),Jn=r("p"),nb=d(`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),sb=s(),Kn=r("p"),lb=d(`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),db=s(),Qn=r("p"),cb=d(`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),ib=s(),Zn=r("p"),mb=d(`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),pb=s(),es=r("p"),bb=d(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),hb=s(),z=r("div"),m(Ha.$$.fragment),ub=s(),ts=r("p"),gb=d("Perform validation checks.  An exception is raised if validation fails."),fb=s(),Ga=r("p"),yb=d("By default only cheap validation checks are run.  Pass "),as=r("em"),vb=d("full=True"),$b=d(`
for thorough validation checks (potentially O(n)).`),_b=s(),He=r("div"),m(Ya.$$.fragment),Tb=s(),rs=r("p"),wb=d("Check if contents of two tables are equal."),xb=s(),Ge=r("div"),m(Ja.$$.fragment),Eb=s(),os=r("p"),kb=d("Convert Table to list of (contiguous) RecordBatch objects."),Mb=s(),Ye=r("div"),m(Ka.$$.fragment),Ib=s(),ns=r("p"),Db=d("Convert the Table to a dict or OrderedDict."),Cb=s(),Je=r("div"),m(Qa.$$.fragment),Pb=s(),ss=r("p"),Lb=d("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Ab=s(),uo=r("div"),m(Za.$$.fragment),Nb=s(),Ke=r("div"),m(er.$$.fragment),jb=s(),ls=r("p"),Fb=d("Select a schema field by its column name or numeric index."),Vb=s(),Qe=r("div"),m(tr.$$.fragment),Sb=s(),ds=r("p"),qb=d("Select a column by its column name, or numeric index."),Rb=s(),Ze=r("div"),m(ar.$$.fragment),Ub=s(),cs=r("p"),zb=d("Iterator over all columns in their numerical order."),Bb=s(),et=r("div"),m(rr.$$.fragment),Ob=s(),is=r("p"),Wb=d("Schema of the table and its columns."),Xb=s(),tt=r("div"),m(or.$$.fragment),Hb=s(),ms=r("p"),Gb=d("List of all columns in numerical order."),Yb=s(),at=r("div"),m(nr.$$.fragment),Jb=s(),ps=r("p"),Kb=d("Number of columns in this table."),Qb=s(),B=r("div"),m(sr.$$.fragment),Zb=s(),bs=r("p"),eh=d("Number of rows in this table."),th=s(),hs=r("p"),ah=d(`Due to the definition of a table, all columns have the same number of
rows.`),rh=s(),rt=r("div"),m(lr.$$.fragment),oh=s(),us=r("p"),nh=d("Dimensions of the table: (#rows, #columns)."),sh=s(),ot=r("div"),m(dr.$$.fragment),lh=s(),gs=r("p"),dh=d("Total number of bytes consumed by the elements of the table."),ch=s(),nt=r("div"),m(cr.$$.fragment),ih=s(),fs=r("p"),mh=d("Names of the table\u2019s columns"),ph=s(),st=r("div"),m(ir.$$.fragment),bh=s(),ys=r("p"),hh=d("Compute zero-copy slice of this Table"),uh=s(),lt=r("div"),m(mr.$$.fragment),gh=s(),vs=r("p"),fh=d("Select records from a Table. See pyarrow.compute.filter for full usage."),yh=s(),dt=r("div"),m(pr.$$.fragment),vh=s(),$s=r("p"),$h=d(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),_h=s(),O=r("div"),m(br.$$.fragment),Th=s(),_s=r("p"),wh=d("Make a new table by combining the chunks this table has."),xh=s(),Ts=r("p"),Eh=d(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),kh=s(),ct=r("div"),m(hr.$$.fragment),Mh=s(),ws=r("p"),Ih=d("Cast table values to another schema"),Dh=s(),it=r("div"),m(ur.$$.fragment),Ch=s(),xs=r("p"),Ph=d(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Lh=s(),W=r("div"),m(gr.$$.fragment),Ah=s(),Es=r("p"),Nh=d("Add column to Table at position."),jh=s(),ks=r("p"),Fh=d(`A new table is returned with the column added, the original table
object is left unchanged.`),Vh=s(),mt=r("div"),m(fr.$$.fragment),Sh=s(),Ms=r("p"),qh=d("Append column at end of columns."),Rh=s(),pt=r("div"),m(yr.$$.fragment),Uh=s(),Is=r("p"),zh=d("Create new Table with the indicated column removed."),Bh=s(),bt=r("div"),m(vr.$$.fragment),Oh=s(),Ds=r("p"),Wh=d("Replace column in Table at position."),Xh=s(),ht=r("div"),m($r.$$.fragment),Hh=s(),Cs=r("p"),Gh=d("Create new table with columns renamed to provided names."),Yh=s(),ut=r("div"),m(_r.$$.fragment),Jh=s(),Ps=r("p"),Kh=d("Drop one or more columns and return a new table."),Qh=s(),go=r("div"),m(Tr.$$.fragment),Pl=s(),ee=r("h2"),gt=r("a"),Ls=r("span"),m(wr.$$.fragment),Zh=s(),As=r("span"),eu=d("ConcatenationTable"),Ll=s(),v=r("div"),m(xr.$$.fragment),tu=s(),Ns=r("p"),au=d(`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),ru=s(),js=r("p"),ou=d(`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),nu=s(),Er=r("ul"),Fs=r("li"),su=d("the InMemoryTable objects are pickled by copying all the data in memory;"),lu=s(),Vs=r("li"),du=d(`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),cu=s(),kr=r("p"),iu=d(`Its implementation requires to store each block separately.
The `),Ss=r("code"),mu=d("blocks"),pu=d(` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),bu=s(),Mr=r("p"),hu=d(`If some columns are missing when concatenating on axis 0, they are filled with null values.
This is done using `),qs=r("em"),uu=d("pyarrow.concat_tables(tables, promote=True)"),gu=d("."),fu=s(),Rs=r("p"),yu=d(`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),vu=s(),X=r("div"),m(Ir.$$.fragment),$u=s(),Us=r("p"),_u=d("Perform validation checks.  An exception is raised if validation fails."),Tu=s(),Dr=r("p"),wu=d("By default only cheap validation checks are run.  Pass "),zs=r("em"),xu=d("full=True"),Eu=d(`
for thorough validation checks (potentially O(n)).`),ku=s(),ft=r("div"),m(Cr.$$.fragment),Mu=s(),Bs=r("p"),Iu=d("Check if contents of two tables are equal."),Du=s(),yt=r("div"),m(Pr.$$.fragment),Cu=s(),Os=r("p"),Pu=d("Convert Table to list of (contiguous) RecordBatch objects."),Lu=s(),vt=r("div"),m(Lr.$$.fragment),Au=s(),Ws=r("p"),Nu=d("Convert the Table to a dict or OrderedDict."),ju=s(),$t=r("div"),m(Ar.$$.fragment),Fu=s(),Xs=r("p"),Vu=d("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Su=s(),fo=r("div"),m(Nr.$$.fragment),qu=s(),_t=r("div"),m(jr.$$.fragment),Ru=s(),Hs=r("p"),Uu=d("Select a schema field by its column name or numeric index."),zu=s(),Tt=r("div"),m(Fr.$$.fragment),Bu=s(),Gs=r("p"),Ou=d("Select a column by its column name, or numeric index."),Wu=s(),wt=r("div"),m(Vr.$$.fragment),Xu=s(),Ys=r("p"),Hu=d("Iterator over all columns in their numerical order."),Gu=s(),xt=r("div"),m(Sr.$$.fragment),Yu=s(),Js=r("p"),Ju=d("Schema of the table and its columns."),Ku=s(),Et=r("div"),m(qr.$$.fragment),Qu=s(),Ks=r("p"),Zu=d("List of all columns in numerical order."),eg=s(),kt=r("div"),m(Rr.$$.fragment),tg=s(),Qs=r("p"),ag=d("Number of columns in this table."),rg=s(),H=r("div"),m(Ur.$$.fragment),og=s(),Zs=r("p"),ng=d("Number of rows in this table."),sg=s(),el=r("p"),lg=d(`Due to the definition of a table, all columns have the same number of
rows.`),dg=s(),Mt=r("div"),m(zr.$$.fragment),cg=s(),tl=r("p"),ig=d("Dimensions of the table: (#rows, #columns)."),mg=s(),It=r("div"),m(Br.$$.fragment),pg=s(),al=r("p"),bg=d("Total number of bytes consumed by the elements of the table."),hg=s(),Dt=r("div"),m(Or.$$.fragment),ug=s(),rl=r("p"),gg=d("Names of the table\u2019s columns"),fg=s(),Ct=r("div"),m(Wr.$$.fragment),yg=s(),ol=r("p"),vg=d("Compute zero-copy slice of this Table"),$g=s(),Pt=r("div"),m(Xr.$$.fragment),_g=s(),nl=r("p"),Tg=d("Select records from a Table. See pyarrow.compute.filter for full usage."),wg=s(),Lt=r("div"),m(Hr.$$.fragment),xg=s(),sl=r("p"),Eg=d(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),kg=s(),G=r("div"),m(Gr.$$.fragment),Mg=s(),ll=r("p"),Ig=d("Make a new table by combining the chunks this table has."),Dg=s(),dl=r("p"),Cg=d(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),Pg=s(),At=r("div"),m(Yr.$$.fragment),Lg=s(),cl=r("p"),Ag=d("Cast table values to another schema"),Ng=s(),Nt=r("div"),m(Jr.$$.fragment),jg=s(),il=r("p"),Fg=d(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Vg=s(),Y=r("div"),m(Kr.$$.fragment),Sg=s(),ml=r("p"),qg=d("Add column to Table at position."),Rg=s(),pl=r("p"),Ug=d(`A new table is returned with the column added, the original table
object is left unchanged.`),zg=s(),jt=r("div"),m(Qr.$$.fragment),Bg=s(),bl=r("p"),Og=d("Append column at end of columns."),Wg=s(),Ft=r("div"),m(Zr.$$.fragment),Xg=s(),hl=r("p"),Hg=d("Create new Table with the indicated column removed."),Gg=s(),Vt=r("div"),m(eo.$$.fragment),Yg=s(),ul=r("p"),Jg=d("Replace column in Table at position."),Kg=s(),St=r("div"),m(to.$$.fragment),Qg=s(),gl=r("p"),Zg=d("Create new table with columns renamed to provided names."),ef=s(),qt=r("div"),m(ao.$$.fragment),tf=s(),fl=r("p"),af=d("Drop one or more columns and return a new table."),rf=s(),yo=r("div"),m(ro.$$.fragment),of=s(),Rt=r("div"),m(oo.$$.fragment),nf=s(),yl=r("p"),sf=d("Create ConcatenationTable from list of tables."),Al=s(),te=r("h2"),Ut=r("a"),vl=r("span"),m(no.$$.fragment),lf=s(),$l=r("span"),df=d("Utils"),Nl=s(),ae=r("div"),m(so.$$.fragment),cf=s(),_l=r("p"),mf=d("Concatenate tables."),jl=s(),re=r("div"),m(lo.$$.fragment),pf=s(),Tl=r("p"),bf=d(`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),this.h()},l(t){const k=$$('[data-svelte="svelte-1phssyn"]',document.head);D=o(k,"META",{name:!0,content:!0}),k.forEach(a),oe=l(t),P=o(t,"H1",{class:!0});var co=n(P);C=o(co,"A",{id:!0,class:!0,href:!0});var hf=n(C);A=o(hf,"SPAN",{});var uf=n(A);p(I.$$.fragment,uf),uf.forEach(a),hf.forEach(a),N=l(co),jo=o(co,"SPAN",{});var gf=n(jo);Cc=c(gf,"Table Classes"),gf.forEach(a),co.forEach(a),xl=l(t),j=o(t,"P",{});var vo=n(j);Pc=c(vo,"Each "),Fo=o(vo,"CODE",{});var ff=n(Fo);Lc=c(ff,"Dataset"),ff.forEach(a),Ac=c(vo,` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),io=o(vo,"A",{href:!0});var yf=n(io);Nc=c(yf,"table.Table"),yf.forEach(a),jc=c(vo,"."),vo.forEach(a),El=l(t),K=o(t,"H2",{class:!0});var Vl=n(K);ne=o(Vl,"A",{id:!0,class:!0,href:!0});var vf=n(ne);Vo=o(vf,"SPAN",{});var $f=n(Vo);p(zt.$$.fragment,$f),$f.forEach(a),vf.forEach(a),Fc=l(Vl),So=o(Vl,"SPAN",{});var _f=n(So);Vc=c(_f,"Table"),_f.forEach(a),Vl.forEach(a),kl=l(t),x=o(t,"DIV",{class:!0});var E=n(x);p(Bt.$$.fragment,E),Sc=l(E),qo=o(E,"P",{});var Tf=n(qo);qc=c(Tf,`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),Tf.forEach(a),Rc=l(E),Ro=o(E,"P",{});var wf=n(Ro);Uc=c(wf,`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),wf.forEach(a),zc=l(E),Uo=o(E,"P",{});var xf=n(Uo);Bc=c(xf,"The implementation of these methods differs for the subclasses."),xf.forEach(a),Oc=l(E),F=o(E,"DIV",{class:!0});var $o=n(F);p(Ot.$$.fragment,$o),Wc=l($o),zo=o($o,"P",{});var Ef=n(zo);Xc=c(Ef,"Perform validation checks.  An exception is raised if validation fails."),Ef.forEach(a),Hc=l($o),Wt=o($o,"P",{});var Sl=n(Wt);Gc=c(Sl,"By default only cheap validation checks are run.  Pass "),Bo=o(Sl,"EM",{});var kf=n(Bo);Yc=c(kf,"full=True"),kf.forEach(a),Jc=c(Sl,`
for thorough validation checks (potentially O(n)).`),Sl.forEach(a),$o.forEach(a),Kc=l(E),se=o(E,"DIV",{class:!0});var ql=n(se);p(Xt.$$.fragment,ql),Qc=l(ql),Oo=o(ql,"P",{});var Mf=n(Oo);Zc=c(Mf,"Check if contents of two tables are equal."),Mf.forEach(a),ql.forEach(a),ei=l(E),le=o(E,"DIV",{class:!0});var Rl=n(le);p(Ht.$$.fragment,Rl),ti=l(Rl),Wo=o(Rl,"P",{});var If=n(Wo);ai=c(If,"Convert Table to list of (contiguous) RecordBatch objects."),If.forEach(a),Rl.forEach(a),ri=l(E),de=o(E,"DIV",{class:!0});var Ul=n(de);p(Gt.$$.fragment,Ul),oi=l(Ul),Xo=o(Ul,"P",{});var Df=n(Xo);ni=c(Df,"Convert the Table to a dict or OrderedDict."),Df.forEach(a),Ul.forEach(a),si=l(E),ce=o(E,"DIV",{class:!0});var zl=n(ce);p(Yt.$$.fragment,zl),li=l(zl),Ho=o(zl,"P",{});var Cf=n(Ho);di=c(Cf,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Cf.forEach(a),zl.forEach(a),ci=l(E),mo=o(E,"DIV",{class:!0});var Pf=n(mo);p(Jt.$$.fragment,Pf),Pf.forEach(a),ii=l(E),ie=o(E,"DIV",{class:!0});var Bl=n(ie);p(Kt.$$.fragment,Bl),mi=l(Bl),Go=o(Bl,"P",{});var Lf=n(Go);pi=c(Lf,"Select a schema field by its column name or numeric index."),Lf.forEach(a),Bl.forEach(a),bi=l(E),me=o(E,"DIV",{class:!0});var Ol=n(me);p(Qt.$$.fragment,Ol),hi=l(Ol),Yo=o(Ol,"P",{});var Af=n(Yo);ui=c(Af,"Select a column by its column name, or numeric index."),Af.forEach(a),Ol.forEach(a),gi=l(E),pe=o(E,"DIV",{class:!0});var Wl=n(pe);p(Zt.$$.fragment,Wl),fi=l(Wl),Jo=o(Wl,"P",{});var Nf=n(Jo);yi=c(Nf,"Iterator over all columns in their numerical order."),Nf.forEach(a),Wl.forEach(a),vi=l(E),be=o(E,"DIV",{class:!0});var Xl=n(be);p(ea.$$.fragment,Xl),$i=l(Xl),Ko=o(Xl,"P",{});var jf=n(Ko);_i=c(jf,"Schema of the table and its columns."),jf.forEach(a),Xl.forEach(a),Ti=l(E),he=o(E,"DIV",{class:!0});var Hl=n(he);p(ta.$$.fragment,Hl),wi=l(Hl),Qo=o(Hl,"P",{});var Ff=n(Qo);xi=c(Ff,"List of all columns in numerical order."),Ff.forEach(a),Hl.forEach(a),Ei=l(E),ue=o(E,"DIV",{class:!0});var Gl=n(ue);p(aa.$$.fragment,Gl),ki=l(Gl),Zo=o(Gl,"P",{});var Vf=n(Zo);Mi=c(Vf,"Number of columns in this table."),Vf.forEach(a),Gl.forEach(a),Ii=l(E),V=o(E,"DIV",{class:!0});var _o=n(V);p(ra.$$.fragment,_o),Di=l(_o),en=o(_o,"P",{});var Sf=n(en);Ci=c(Sf,"Number of rows in this table."),Sf.forEach(a),Pi=l(_o),tn=o(_o,"P",{});var qf=n(tn);Li=c(qf,`Due to the definition of a table, all columns have the same number of
rows.`),qf.forEach(a),_o.forEach(a),Ai=l(E),ge=o(E,"DIV",{class:!0});var Yl=n(ge);p(oa.$$.fragment,Yl),Ni=l(Yl),an=o(Yl,"P",{});var Rf=n(an);ji=c(Rf,"Dimensions of the table: (#rows, #columns)."),Rf.forEach(a),Yl.forEach(a),Fi=l(E),fe=o(E,"DIV",{class:!0});var Jl=n(fe);p(na.$$.fragment,Jl),Vi=l(Jl),rn=o(Jl,"P",{});var Uf=n(rn);Si=c(Uf,"Total number of bytes consumed by the elements of the table."),Uf.forEach(a),Jl.forEach(a),E.forEach(a),Ml=l(t),Q=o(t,"H2",{class:!0});var Kl=n(Q);ye=o(Kl,"A",{id:!0,class:!0,href:!0});var zf=n(ye);on=o(zf,"SPAN",{});var Bf=n(on);p(sa.$$.fragment,Bf),Bf.forEach(a),zf.forEach(a),qi=l(Kl),nn=o(Kl,"SPAN",{});var Of=n(nn);Ri=c(Of,"InMemoryTable"),Of.forEach(a),Kl.forEach(a),Il=l(t),y=o(t,"DIV",{class:!0});var $=n(y);p(la.$$.fragment,$),Ui=l($),sn=o($,"P",{});var Wf=n(sn);zi=c(Wf,"The table is said in-memory when it is loaded into the user\u2019s RAM."),Wf.forEach(a),Bi=l($),ln=o($,"P",{});var Xf=n(ln);Oi=c(Xf,`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),Xf.forEach(a),Wi=l($),dn=o($,"P",{});var Hf=n(dn);Xi=c(Hf,`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Hf.forEach(a),Hi=l($),cn=o($,"P",{});var Gf=n(cn);Gi=c(Gf,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Gf.forEach(a),Yi=l($),S=o($,"DIV",{class:!0});var To=n(S);p(da.$$.fragment,To),Ji=l(To),mn=o(To,"P",{});var Yf=n(mn);Ki=c(Yf,"Perform validation checks.  An exception is raised if validation fails."),Yf.forEach(a),Qi=l(To),ca=o(To,"P",{});var Ql=n(ca);Zi=c(Ql,"By default only cheap validation checks are run.  Pass "),pn=o(Ql,"EM",{});var Jf=n(pn);em=c(Jf,"full=True"),Jf.forEach(a),tm=c(Ql,`
for thorough validation checks (potentially O(n)).`),Ql.forEach(a),To.forEach(a),am=l($),ve=o($,"DIV",{class:!0});var Zl=n(ve);p(ia.$$.fragment,Zl),rm=l(Zl),bn=o(Zl,"P",{});var Kf=n(bn);om=c(Kf,"Check if contents of two tables are equal."),Kf.forEach(a),Zl.forEach(a),nm=l($),$e=o($,"DIV",{class:!0});var ed=n($e);p(ma.$$.fragment,ed),sm=l(ed),hn=o(ed,"P",{});var Qf=n(hn);lm=c(Qf,"Convert Table to list of (contiguous) RecordBatch objects."),Qf.forEach(a),ed.forEach(a),dm=l($),_e=o($,"DIV",{class:!0});var td=n(_e);p(pa.$$.fragment,td),cm=l(td),un=o(td,"P",{});var Zf=n(un);im=c(Zf,"Convert the Table to a dict or OrderedDict."),Zf.forEach(a),td.forEach(a),mm=l($),Te=o($,"DIV",{class:!0});var ad=n(Te);p(ba.$$.fragment,ad),pm=l(ad),gn=o(ad,"P",{});var ey=n(gn);bm=c(ey,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),ey.forEach(a),ad.forEach(a),hm=l($),po=o($,"DIV",{class:!0});var ty=n(po);p(ha.$$.fragment,ty),ty.forEach(a),um=l($),we=o($,"DIV",{class:!0});var rd=n(we);p(ua.$$.fragment,rd),gm=l(rd),fn=o(rd,"P",{});var ay=n(fn);fm=c(ay,"Select a schema field by its column name or numeric index."),ay.forEach(a),rd.forEach(a),ym=l($),xe=o($,"DIV",{class:!0});var od=n(xe);p(ga.$$.fragment,od),vm=l(od),yn=o(od,"P",{});var ry=n(yn);$m=c(ry,"Select a column by its column name, or numeric index."),ry.forEach(a),od.forEach(a),_m=l($),Ee=o($,"DIV",{class:!0});var nd=n(Ee);p(fa.$$.fragment,nd),Tm=l(nd),vn=o(nd,"P",{});var oy=n(vn);wm=c(oy,"Iterator over all columns in their numerical order."),oy.forEach(a),nd.forEach(a),xm=l($),ke=o($,"DIV",{class:!0});var sd=n(ke);p(ya.$$.fragment,sd),Em=l(sd),$n=o(sd,"P",{});var ny=n($n);km=c(ny,"Schema of the table and its columns."),ny.forEach(a),sd.forEach(a),Mm=l($),Me=o($,"DIV",{class:!0});var ld=n(Me);p(va.$$.fragment,ld),Im=l(ld),_n=o(ld,"P",{});var sy=n(_n);Dm=c(sy,"List of all columns in numerical order."),sy.forEach(a),ld.forEach(a),Cm=l($),Ie=o($,"DIV",{class:!0});var dd=n(Ie);p($a.$$.fragment,dd),Pm=l(dd),Tn=o(dd,"P",{});var ly=n(Tn);Lm=c(ly,"Number of columns in this table."),ly.forEach(a),dd.forEach(a),Am=l($),q=o($,"DIV",{class:!0});var wo=n(q);p(_a.$$.fragment,wo),Nm=l(wo),wn=o(wo,"P",{});var dy=n(wn);jm=c(dy,"Number of rows in this table."),dy.forEach(a),Fm=l(wo),xn=o(wo,"P",{});var cy=n(xn);Vm=c(cy,`Due to the definition of a table, all columns have the same number of
rows.`),cy.forEach(a),wo.forEach(a),Sm=l($),De=o($,"DIV",{class:!0});var cd=n(De);p(Ta.$$.fragment,cd),qm=l(cd),En=o(cd,"P",{});var iy=n(En);Rm=c(iy,"Dimensions of the table: (#rows, #columns)."),iy.forEach(a),cd.forEach(a),Um=l($),Ce=o($,"DIV",{class:!0});var id=n(Ce);p(wa.$$.fragment,id),zm=l(id),kn=o(id,"P",{});var my=n(kn);Bm=c(my,"Total number of bytes consumed by the elements of the table."),my.forEach(a),id.forEach(a),Om=l($),Pe=o($,"DIV",{class:!0});var md=n(Pe);p(xa.$$.fragment,md),Wm=l(md),Mn=o(md,"P",{});var py=n(Mn);Xm=c(py,"Names of the table\u2019s columns"),py.forEach(a),md.forEach(a),Hm=l($),Le=o($,"DIV",{class:!0});var pd=n(Le);p(Ea.$$.fragment,pd),Gm=l(pd),In=o(pd,"P",{});var by=n(In);Ym=c(by,"Compute zero-copy slice of this Table"),by.forEach(a),pd.forEach(a),Jm=l($),Ae=o($,"DIV",{class:!0});var bd=n(Ae);p(ka.$$.fragment,bd),Km=l(bd),Dn=o(bd,"P",{});var hy=n(Dn);Qm=c(hy,"Select records from a Table. See pyarrow.compute.filter for full usage."),hy.forEach(a),bd.forEach(a),Zm=l($),Ne=o($,"DIV",{class:!0});var hd=n(Ne);p(Ma.$$.fragment,hd),ep=l(hd),Cn=o(hd,"P",{});var uy=n(Cn);tp=c(uy,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),uy.forEach(a),hd.forEach(a),ap=l($),R=o($,"DIV",{class:!0});var xo=n(R);p(Ia.$$.fragment,xo),rp=l(xo),Pn=o(xo,"P",{});var gy=n(Pn);op=c(gy,"Make a new table by combining the chunks this table has."),gy.forEach(a),np=l(xo),Ln=o(xo,"P",{});var fy=n(Ln);sp=c(fy,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),fy.forEach(a),xo.forEach(a),lp=l($),je=o($,"DIV",{class:!0});var ud=n(je);p(Da.$$.fragment,ud),dp=l(ud),An=o(ud,"P",{});var yy=n(An);cp=c(yy,"Cast table values to another schema"),yy.forEach(a),ud.forEach(a),ip=l($),Fe=o($,"DIV",{class:!0});var gd=n(Fe);p(Ca.$$.fragment,gd),mp=l(gd),Nn=o(gd,"P",{});var vy=n(Nn);pp=c(vy,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),vy.forEach(a),gd.forEach(a),bp=l($),U=o($,"DIV",{class:!0});var Eo=n(U);p(Pa.$$.fragment,Eo),hp=l(Eo),jn=o(Eo,"P",{});var $y=n(jn);up=c($y,"Add column to Table at position."),$y.forEach(a),gp=l(Eo),Fn=o(Eo,"P",{});var _y=n(Fn);fp=c(_y,`A new table is returned with the column added, the original table
object is left unchanged.`),_y.forEach(a),Eo.forEach(a),yp=l($),Ve=o($,"DIV",{class:!0});var fd=n(Ve);p(La.$$.fragment,fd),vp=l(fd),Vn=o(fd,"P",{});var Ty=n(Vn);$p=c(Ty,"Append column at end of columns."),Ty.forEach(a),fd.forEach(a),_p=l($),Se=o($,"DIV",{class:!0});var yd=n(Se);p(Aa.$$.fragment,yd),Tp=l(yd),Sn=o(yd,"P",{});var wy=n(Sn);wp=c(wy,"Create new Table with the indicated column removed."),wy.forEach(a),yd.forEach(a),xp=l($),qe=o($,"DIV",{class:!0});var vd=n(qe);p(Na.$$.fragment,vd),Ep=l(vd),qn=o(vd,"P",{});var xy=n(qn);kp=c(xy,"Replace column in Table at position."),xy.forEach(a),vd.forEach(a),Mp=l($),Re=o($,"DIV",{class:!0});var $d=n(Re);p(ja.$$.fragment,$d),Ip=l($d),Rn=o($d,"P",{});var Ey=n(Rn);Dp=c(Ey,"Create new table with columns renamed to provided names."),Ey.forEach(a),$d.forEach(a),Cp=l($),Ue=o($,"DIV",{class:!0});var _d=n(Ue);p(Fa.$$.fragment,_d),Pp=l(_d),Un=o(_d,"P",{});var ky=n(Un);Lp=c(ky,"Drop one or more columns and return a new table."),ky.forEach(a),_d.forEach(a),Ap=l($),bo=o($,"DIV",{class:!0});var My=n(bo);p(Va.$$.fragment,My),My.forEach(a),Np=l($),ho=o($,"DIV",{class:!0});var Iy=n(ho);p(Sa.$$.fragment,Iy),Iy.forEach(a),jp=l($),L=o($,"DIV",{class:!0});var J=n(L);p(qa.$$.fragment,J),Fp=l(J),zn=o(J,"P",{});var Dy=n(zn);Vp=c(Dy,"Convert pandas.DataFrame to an Arrow Table."),Dy.forEach(a),Sp=l(J),Ra=o(J,"P",{});var Td=n(Ra);qp=c(Td,`The column types in the resulting Arrow Table are inferred from the
dtypes of the pandas.Series in the DataFrame. In the case of non-object
Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Bn=o(Td,"EM",{});var Cy=n(Bn);Rp=c(Cy,"object"),Cy.forEach(a),Up=c(Td,`, we need to guess the datatype by looking at the
Python objects in this Series.`),Td.forEach(a),zp=l(J),Ua=o(J,"P",{});var wd=n(Ua);Bp=c(wd,"Be aware that Series of the "),On=o(wd,"EM",{});var Py=n(On);Op=c(Py,"object"),Py.forEach(a),Wp=c(wd,` dtype don\u2019t carry enough
information to always lead to a meaningful Arrow type. In the case that
we cannot infer a type, e.g. because the DataFrame is of length 0 or
the Series only contains None/nan objects, the type is set to
null. This behavior can be avoided by constructing an explicit schema
and passing it to this function.`),wd.forEach(a),Xp=l(J),p(ze.$$.fragment,J),J.forEach(a),Hp=l($),Be=o($,"DIV",{class:!0});var xd=n(Be);p(za.$$.fragment,xd),Gp=l(xd),Wn=o(xd,"P",{});var Ly=n(Wn);Yp=c(Ly,"Construct a Table from Arrow arrays"),Ly.forEach(a),xd.forEach(a),Jp=l($),Oe=o($,"DIV",{class:!0});var Ed=n(Oe);p(Ba.$$.fragment,Ed),Kp=l(Ed),Xn=o(Ed,"P",{});var Ay=n(Xn);Qp=c(Ay,"Construct a Table from Arrow arrays or columns"),Ay.forEach(a),Ed.forEach(a),Zp=l($),We=o($,"DIV",{class:!0});var kd=n(We);p(Oa.$$.fragment,kd),eb=l(kd),Hn=o(kd,"P",{});var Ny=n(Hn);tb=c(Ny,"Construct a Table from a sequence or iterator of Arrow RecordBatches."),Ny.forEach(a),kd.forEach(a),$.forEach(a),Dl=l(t),Z=o(t,"H2",{class:!0});var Md=n(Z);Xe=o(Md,"A",{id:!0,class:!0,href:!0});var jy=n(Xe);Gn=o(jy,"SPAN",{});var Fy=n(Gn);p(Wa.$$.fragment,Fy),Fy.forEach(a),jy.forEach(a),ab=l(Md),Yn=o(Md,"SPAN",{});var Vy=n(Yn);rb=c(Vy,"MemoryMappedTable"),Vy.forEach(a),Md.forEach(a),Cl=l(t),_=o(t,"DIV",{class:!0});var w=n(_);p(Xa.$$.fragment,w),ob=l(w),Jn=o(w,"P",{});var Sy=n(Jn);nb=c(Sy,`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),Sy.forEach(a),sb=l(w),Kn=o(w,"P",{});var qy=n(Kn);lb=c(qy,`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),qy.forEach(a),db=l(w),Qn=o(w,"P",{});var Ry=n(Qn);cb=c(Ry,`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),Ry.forEach(a),ib=l(w),Zn=o(w,"P",{});var Uy=n(Zn);mb=c(Uy,`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),Uy.forEach(a),pb=l(w),es=o(w,"P",{});var zy=n(es);bb=c(zy,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),zy.forEach(a),hb=l(w),z=o(w,"DIV",{class:!0});var ko=n(z);p(Ha.$$.fragment,ko),ub=l(ko),ts=o(ko,"P",{});var By=n(ts);gb=c(By,"Perform validation checks.  An exception is raised if validation fails."),By.forEach(a),fb=l(ko),Ga=o(ko,"P",{});var Id=n(Ga);yb=c(Id,"By default only cheap validation checks are run.  Pass "),as=o(Id,"EM",{});var Oy=n(as);vb=c(Oy,"full=True"),Oy.forEach(a),$b=c(Id,`
for thorough validation checks (potentially O(n)).`),Id.forEach(a),ko.forEach(a),_b=l(w),He=o(w,"DIV",{class:!0});var Dd=n(He);p(Ya.$$.fragment,Dd),Tb=l(Dd),rs=o(Dd,"P",{});var Wy=n(rs);wb=c(Wy,"Check if contents of two tables are equal."),Wy.forEach(a),Dd.forEach(a),xb=l(w),Ge=o(w,"DIV",{class:!0});var Cd=n(Ge);p(Ja.$$.fragment,Cd),Eb=l(Cd),os=o(Cd,"P",{});var Xy=n(os);kb=c(Xy,"Convert Table to list of (contiguous) RecordBatch objects."),Xy.forEach(a),Cd.forEach(a),Mb=l(w),Ye=o(w,"DIV",{class:!0});var Pd=n(Ye);p(Ka.$$.fragment,Pd),Ib=l(Pd),ns=o(Pd,"P",{});var Hy=n(ns);Db=c(Hy,"Convert the Table to a dict or OrderedDict."),Hy.forEach(a),Pd.forEach(a),Cb=l(w),Je=o(w,"DIV",{class:!0});var Ld=n(Je);p(Qa.$$.fragment,Ld),Pb=l(Ld),ss=o(Ld,"P",{});var Gy=n(ss);Lb=c(Gy,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Gy.forEach(a),Ld.forEach(a),Ab=l(w),uo=o(w,"DIV",{class:!0});var Yy=n(uo);p(Za.$$.fragment,Yy),Yy.forEach(a),Nb=l(w),Ke=o(w,"DIV",{class:!0});var Ad=n(Ke);p(er.$$.fragment,Ad),jb=l(Ad),ls=o(Ad,"P",{});var Jy=n(ls);Fb=c(Jy,"Select a schema field by its column name or numeric index."),Jy.forEach(a),Ad.forEach(a),Vb=l(w),Qe=o(w,"DIV",{class:!0});var Nd=n(Qe);p(tr.$$.fragment,Nd),Sb=l(Nd),ds=o(Nd,"P",{});var Ky=n(ds);qb=c(Ky,"Select a column by its column name, or numeric index."),Ky.forEach(a),Nd.forEach(a),Rb=l(w),Ze=o(w,"DIV",{class:!0});var jd=n(Ze);p(ar.$$.fragment,jd),Ub=l(jd),cs=o(jd,"P",{});var Qy=n(cs);zb=c(Qy,"Iterator over all columns in their numerical order."),Qy.forEach(a),jd.forEach(a),Bb=l(w),et=o(w,"DIV",{class:!0});var Fd=n(et);p(rr.$$.fragment,Fd),Ob=l(Fd),is=o(Fd,"P",{});var Zy=n(is);Wb=c(Zy,"Schema of the table and its columns."),Zy.forEach(a),Fd.forEach(a),Xb=l(w),tt=o(w,"DIV",{class:!0});var Vd=n(tt);p(or.$$.fragment,Vd),Hb=l(Vd),ms=o(Vd,"P",{});var ev=n(ms);Gb=c(ev,"List of all columns in numerical order."),ev.forEach(a),Vd.forEach(a),Yb=l(w),at=o(w,"DIV",{class:!0});var Sd=n(at);p(nr.$$.fragment,Sd),Jb=l(Sd),ps=o(Sd,"P",{});var tv=n(ps);Kb=c(tv,"Number of columns in this table."),tv.forEach(a),Sd.forEach(a),Qb=l(w),B=o(w,"DIV",{class:!0});var Mo=n(B);p(sr.$$.fragment,Mo),Zb=l(Mo),bs=o(Mo,"P",{});var av=n(bs);eh=c(av,"Number of rows in this table."),av.forEach(a),th=l(Mo),hs=o(Mo,"P",{});var rv=n(hs);ah=c(rv,`Due to the definition of a table, all columns have the same number of
rows.`),rv.forEach(a),Mo.forEach(a),rh=l(w),rt=o(w,"DIV",{class:!0});var qd=n(rt);p(lr.$$.fragment,qd),oh=l(qd),us=o(qd,"P",{});var ov=n(us);nh=c(ov,"Dimensions of the table: (#rows, #columns)."),ov.forEach(a),qd.forEach(a),sh=l(w),ot=o(w,"DIV",{class:!0});var Rd=n(ot);p(dr.$$.fragment,Rd),lh=l(Rd),gs=o(Rd,"P",{});var nv=n(gs);dh=c(nv,"Total number of bytes consumed by the elements of the table."),nv.forEach(a),Rd.forEach(a),ch=l(w),nt=o(w,"DIV",{class:!0});var Ud=n(nt);p(cr.$$.fragment,Ud),ih=l(Ud),fs=o(Ud,"P",{});var sv=n(fs);mh=c(sv,"Names of the table\u2019s columns"),sv.forEach(a),Ud.forEach(a),ph=l(w),st=o(w,"DIV",{class:!0});var zd=n(st);p(ir.$$.fragment,zd),bh=l(zd),ys=o(zd,"P",{});var lv=n(ys);hh=c(lv,"Compute zero-copy slice of this Table"),lv.forEach(a),zd.forEach(a),uh=l(w),lt=o(w,"DIV",{class:!0});var Bd=n(lt);p(mr.$$.fragment,Bd),gh=l(Bd),vs=o(Bd,"P",{});var dv=n(vs);fh=c(dv,"Select records from a Table. See pyarrow.compute.filter for full usage."),dv.forEach(a),Bd.forEach(a),yh=l(w),dt=o(w,"DIV",{class:!0});var Od=n(dt);p(pr.$$.fragment,Od),vh=l(Od),$s=o(Od,"P",{});var cv=n($s);$h=c(cv,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),cv.forEach(a),Od.forEach(a),_h=l(w),O=o(w,"DIV",{class:!0});var Io=n(O);p(br.$$.fragment,Io),Th=l(Io),_s=o(Io,"P",{});var iv=n(_s);wh=c(iv,"Make a new table by combining the chunks this table has."),iv.forEach(a),xh=l(Io),Ts=o(Io,"P",{});var mv=n(Ts);Eh=c(mv,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),mv.forEach(a),Io.forEach(a),kh=l(w),ct=o(w,"DIV",{class:!0});var Wd=n(ct);p(hr.$$.fragment,Wd),Mh=l(Wd),ws=o(Wd,"P",{});var pv=n(ws);Ih=c(pv,"Cast table values to another schema"),pv.forEach(a),Wd.forEach(a),Dh=l(w),it=o(w,"DIV",{class:!0});var Xd=n(it);p(ur.$$.fragment,Xd),Ch=l(Xd),xs=o(Xd,"P",{});var bv=n(xs);Ph=c(bv,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),bv.forEach(a),Xd.forEach(a),Lh=l(w),W=o(w,"DIV",{class:!0});var Do=n(W);p(gr.$$.fragment,Do),Ah=l(Do),Es=o(Do,"P",{});var hv=n(Es);Nh=c(hv,"Add column to Table at position."),hv.forEach(a),jh=l(Do),ks=o(Do,"P",{});var uv=n(ks);Fh=c(uv,`A new table is returned with the column added, the original table
object is left unchanged.`),uv.forEach(a),Do.forEach(a),Vh=l(w),mt=o(w,"DIV",{class:!0});var Hd=n(mt);p(fr.$$.fragment,Hd),Sh=l(Hd),Ms=o(Hd,"P",{});var gv=n(Ms);qh=c(gv,"Append column at end of columns."),gv.forEach(a),Hd.forEach(a),Rh=l(w),pt=o(w,"DIV",{class:!0});var Gd=n(pt);p(yr.$$.fragment,Gd),Uh=l(Gd),Is=o(Gd,"P",{});var fv=n(Is);zh=c(fv,"Create new Table with the indicated column removed."),fv.forEach(a),Gd.forEach(a),Bh=l(w),bt=o(w,"DIV",{class:!0});var Yd=n(bt);p(vr.$$.fragment,Yd),Oh=l(Yd),Ds=o(Yd,"P",{});var yv=n(Ds);Wh=c(yv,"Replace column in Table at position."),yv.forEach(a),Yd.forEach(a),Xh=l(w),ht=o(w,"DIV",{class:!0});var Jd=n(ht);p($r.$$.fragment,Jd),Hh=l(Jd),Cs=o(Jd,"P",{});var vv=n(Cs);Gh=c(vv,"Create new table with columns renamed to provided names."),vv.forEach(a),Jd.forEach(a),Yh=l(w),ut=o(w,"DIV",{class:!0});var Kd=n(ut);p(_r.$$.fragment,Kd),Jh=l(Kd),Ps=o(Kd,"P",{});var $v=n(Ps);Kh=c($v,"Drop one or more columns and return a new table."),$v.forEach(a),Kd.forEach(a),Qh=l(w),go=o(w,"DIV",{class:!0});var _v=n(go);p(Tr.$$.fragment,_v),_v.forEach(a),w.forEach(a),Pl=l(t),ee=o(t,"H2",{class:!0});var Qd=n(ee);gt=o(Qd,"A",{id:!0,class:!0,href:!0});var Tv=n(gt);Ls=o(Tv,"SPAN",{});var wv=n(Ls);p(wr.$$.fragment,wv),wv.forEach(a),Tv.forEach(a),Zh=l(Qd),As=o(Qd,"SPAN",{});var xv=n(As);eu=c(xv,"ConcatenationTable"),xv.forEach(a),Qd.forEach(a),Ll=l(t),v=o(t,"DIV",{class:!0});var T=n(v);p(xr.$$.fragment,T),tu=l(T),Ns=o(T,"P",{});var Ev=n(Ns);au=c(Ev,`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),Ev.forEach(a),ru=l(T),js=o(T,"P",{});var kv=n(js);ou=c(kv,`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),kv.forEach(a),nu=l(T),Er=o(T,"UL",{});var Zd=n(Er);Fs=o(Zd,"LI",{});var Mv=n(Fs);su=c(Mv,"the InMemoryTable objects are pickled by copying all the data in memory;"),Mv.forEach(a),lu=l(Zd),Vs=o(Zd,"LI",{});var Iv=n(Vs);du=c(Iv,`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),Iv.forEach(a),Zd.forEach(a),cu=l(T),kr=o(T,"P",{});var ec=n(kr);iu=c(ec,`Its implementation requires to store each block separately.
The `),Ss=o(ec,"CODE",{});var Dv=n(Ss);mu=c(Dv,"blocks"),Dv.forEach(a),pu=c(ec,` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),ec.forEach(a),bu=l(T),Mr=o(T,"P",{});var tc=n(Mr);hu=c(tc,`If some columns are missing when concatenating on axis 0, they are filled with null values.
This is done using `),qs=o(tc,"EM",{});var Cv=n(qs);uu=c(Cv,"pyarrow.concat_tables(tables, promote=True)"),Cv.forEach(a),gu=c(tc,"."),tc.forEach(a),fu=l(T),Rs=o(T,"P",{});var Pv=n(Rs);yu=c(Pv,`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),Pv.forEach(a),vu=l(T),X=o(T,"DIV",{class:!0});var Co=n(X);p(Ir.$$.fragment,Co),$u=l(Co),Us=o(Co,"P",{});var Lv=n(Us);_u=c(Lv,"Perform validation checks.  An exception is raised if validation fails."),Lv.forEach(a),Tu=l(Co),Dr=o(Co,"P",{});var ac=n(Dr);wu=c(ac,"By default only cheap validation checks are run.  Pass "),zs=o(ac,"EM",{});var Av=n(zs);xu=c(Av,"full=True"),Av.forEach(a),Eu=c(ac,`
for thorough validation checks (potentially O(n)).`),ac.forEach(a),Co.forEach(a),ku=l(T),ft=o(T,"DIV",{class:!0});var rc=n(ft);p(Cr.$$.fragment,rc),Mu=l(rc),Bs=o(rc,"P",{});var Nv=n(Bs);Iu=c(Nv,"Check if contents of two tables are equal."),Nv.forEach(a),rc.forEach(a),Du=l(T),yt=o(T,"DIV",{class:!0});var oc=n(yt);p(Pr.$$.fragment,oc),Cu=l(oc),Os=o(oc,"P",{});var jv=n(Os);Pu=c(jv,"Convert Table to list of (contiguous) RecordBatch objects."),jv.forEach(a),oc.forEach(a),Lu=l(T),vt=o(T,"DIV",{class:!0});var nc=n(vt);p(Lr.$$.fragment,nc),Au=l(nc),Ws=o(nc,"P",{});var Fv=n(Ws);Nu=c(Fv,"Convert the Table to a dict or OrderedDict."),Fv.forEach(a),nc.forEach(a),ju=l(T),$t=o(T,"DIV",{class:!0});var sc=n($t);p(Ar.$$.fragment,sc),Fu=l(sc),Xs=o(sc,"P",{});var Vv=n(Xs);Vu=c(Vv,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Vv.forEach(a),sc.forEach(a),Su=l(T),fo=o(T,"DIV",{class:!0});var Sv=n(fo);p(Nr.$$.fragment,Sv),Sv.forEach(a),qu=l(T),_t=o(T,"DIV",{class:!0});var lc=n(_t);p(jr.$$.fragment,lc),Ru=l(lc),Hs=o(lc,"P",{});var qv=n(Hs);Uu=c(qv,"Select a schema field by its column name or numeric index."),qv.forEach(a),lc.forEach(a),zu=l(T),Tt=o(T,"DIV",{class:!0});var dc=n(Tt);p(Fr.$$.fragment,dc),Bu=l(dc),Gs=o(dc,"P",{});var Rv=n(Gs);Ou=c(Rv,"Select a column by its column name, or numeric index."),Rv.forEach(a),dc.forEach(a),Wu=l(T),wt=o(T,"DIV",{class:!0});var cc=n(wt);p(Vr.$$.fragment,cc),Xu=l(cc),Ys=o(cc,"P",{});var Uv=n(Ys);Hu=c(Uv,"Iterator over all columns in their numerical order."),Uv.forEach(a),cc.forEach(a),Gu=l(T),xt=o(T,"DIV",{class:!0});var ic=n(xt);p(Sr.$$.fragment,ic),Yu=l(ic),Js=o(ic,"P",{});var zv=n(Js);Ju=c(zv,"Schema of the table and its columns."),zv.forEach(a),ic.forEach(a),Ku=l(T),Et=o(T,"DIV",{class:!0});var mc=n(Et);p(qr.$$.fragment,mc),Qu=l(mc),Ks=o(mc,"P",{});var Bv=n(Ks);Zu=c(Bv,"List of all columns in numerical order."),Bv.forEach(a),mc.forEach(a),eg=l(T),kt=o(T,"DIV",{class:!0});var pc=n(kt);p(Rr.$$.fragment,pc),tg=l(pc),Qs=o(pc,"P",{});var Ov=n(Qs);ag=c(Ov,"Number of columns in this table."),Ov.forEach(a),pc.forEach(a),rg=l(T),H=o(T,"DIV",{class:!0});var Po=n(H);p(Ur.$$.fragment,Po),og=l(Po),Zs=o(Po,"P",{});var Wv=n(Zs);ng=c(Wv,"Number of rows in this table."),Wv.forEach(a),sg=l(Po),el=o(Po,"P",{});var Xv=n(el);lg=c(Xv,`Due to the definition of a table, all columns have the same number of
rows.`),Xv.forEach(a),Po.forEach(a),dg=l(T),Mt=o(T,"DIV",{class:!0});var bc=n(Mt);p(zr.$$.fragment,bc),cg=l(bc),tl=o(bc,"P",{});var Hv=n(tl);ig=c(Hv,"Dimensions of the table: (#rows, #columns)."),Hv.forEach(a),bc.forEach(a),mg=l(T),It=o(T,"DIV",{class:!0});var hc=n(It);p(Br.$$.fragment,hc),pg=l(hc),al=o(hc,"P",{});var Gv=n(al);bg=c(Gv,"Total number of bytes consumed by the elements of the table."),Gv.forEach(a),hc.forEach(a),hg=l(T),Dt=o(T,"DIV",{class:!0});var uc=n(Dt);p(Or.$$.fragment,uc),ug=l(uc),rl=o(uc,"P",{});var Yv=n(rl);gg=c(Yv,"Names of the table\u2019s columns"),Yv.forEach(a),uc.forEach(a),fg=l(T),Ct=o(T,"DIV",{class:!0});var gc=n(Ct);p(Wr.$$.fragment,gc),yg=l(gc),ol=o(gc,"P",{});var Jv=n(ol);vg=c(Jv,"Compute zero-copy slice of this Table"),Jv.forEach(a),gc.forEach(a),$g=l(T),Pt=o(T,"DIV",{class:!0});var fc=n(Pt);p(Xr.$$.fragment,fc),_g=l(fc),nl=o(fc,"P",{});var Kv=n(nl);Tg=c(Kv,"Select records from a Table. See pyarrow.compute.filter for full usage."),Kv.forEach(a),fc.forEach(a),wg=l(T),Lt=o(T,"DIV",{class:!0});var yc=n(Lt);p(Hr.$$.fragment,yc),xg=l(yc),sl=o(yc,"P",{});var Qv=n(sl);Eg=c(Qv,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),Qv.forEach(a),yc.forEach(a),kg=l(T),G=o(T,"DIV",{class:!0});var Lo=n(G);p(Gr.$$.fragment,Lo),Mg=l(Lo),ll=o(Lo,"P",{});var Zv=n(ll);Ig=c(Zv,"Make a new table by combining the chunks this table has."),Zv.forEach(a),Dg=l(Lo),dl=o(Lo,"P",{});var e$=n(dl);Cg=c(e$,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),e$.forEach(a),Lo.forEach(a),Pg=l(T),At=o(T,"DIV",{class:!0});var vc=n(At);p(Yr.$$.fragment,vc),Lg=l(vc),cl=o(vc,"P",{});var t$=n(cl);Ag=c(t$,"Cast table values to another schema"),t$.forEach(a),vc.forEach(a),Ng=l(T),Nt=o(T,"DIV",{class:!0});var $c=n(Nt);p(Jr.$$.fragment,$c),jg=l($c),il=o($c,"P",{});var a$=n(il);Fg=c(a$,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),a$.forEach(a),$c.forEach(a),Vg=l(T),Y=o(T,"DIV",{class:!0});var Ao=n(Y);p(Kr.$$.fragment,Ao),Sg=l(Ao),ml=o(Ao,"P",{});var r$=n(ml);qg=c(r$,"Add column to Table at position."),r$.forEach(a),Rg=l(Ao),pl=o(Ao,"P",{});var o$=n(pl);Ug=c(o$,`A new table is returned with the column added, the original table
object is left unchanged.`),o$.forEach(a),Ao.forEach(a),zg=l(T),jt=o(T,"DIV",{class:!0});var _c=n(jt);p(Qr.$$.fragment,_c),Bg=l(_c),bl=o(_c,"P",{});var n$=n(bl);Og=c(n$,"Append column at end of columns."),n$.forEach(a),_c.forEach(a),Wg=l(T),Ft=o(T,"DIV",{class:!0});var Tc=n(Ft);p(Zr.$$.fragment,Tc),Xg=l(Tc),hl=o(Tc,"P",{});var s$=n(hl);Hg=c(s$,"Create new Table with the indicated column removed."),s$.forEach(a),Tc.forEach(a),Gg=l(T),Vt=o(T,"DIV",{class:!0});var wc=n(Vt);p(eo.$$.fragment,wc),Yg=l(wc),ul=o(wc,"P",{});var l$=n(ul);Jg=c(l$,"Replace column in Table at position."),l$.forEach(a),wc.forEach(a),Kg=l(T),St=o(T,"DIV",{class:!0});var xc=n(St);p(to.$$.fragment,xc),Qg=l(xc),gl=o(xc,"P",{});var d$=n(gl);Zg=c(d$,"Create new table with columns renamed to provided names."),d$.forEach(a),xc.forEach(a),ef=l(T),qt=o(T,"DIV",{class:!0});var Ec=n(qt);p(ao.$$.fragment,Ec),tf=l(Ec),fl=o(Ec,"P",{});var c$=n(fl);af=c(c$,"Drop one or more columns and return a new table."),c$.forEach(a),Ec.forEach(a),rf=l(T),yo=o(T,"DIV",{class:!0});var i$=n(yo);p(ro.$$.fragment,i$),i$.forEach(a),of=l(T),Rt=o(T,"DIV",{class:!0});var kc=n(Rt);p(oo.$$.fragment,kc),nf=l(kc),yl=o(kc,"P",{});var m$=n(yl);sf=c(m$,"Create ConcatenationTable from list of tables."),m$.forEach(a),kc.forEach(a),T.forEach(a),Al=l(t),te=o(t,"H2",{class:!0});var Mc=n(te);Ut=o(Mc,"A",{id:!0,class:!0,href:!0});var p$=n(Ut);vl=o(p$,"SPAN",{});var b$=n(vl);p(no.$$.fragment,b$),b$.forEach(a),p$.forEach(a),lf=l(Mc),$l=o(Mc,"SPAN",{});var h$=n($l);df=c(h$,"Utils"),h$.forEach(a),Mc.forEach(a),Nl=l(t),ae=o(t,"DIV",{class:!0});var Ic=n(ae);p(so.$$.fragment,Ic),cf=l(Ic),_l=o(Ic,"P",{});var u$=n(_l);mf=c(u$,"Concatenate tables."),u$.forEach(a),Ic.forEach(a),jl=l(t),re=o(t,"DIV",{class:!0});var Dc=n(re);p(lo.$$.fragment,Dc),pf=l(Dc),Tl=o(Dc,"P",{});var g$=n(Tl);bf=c(g$,`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),g$.forEach(a),Dc.forEach(a),this.h()},h(){i(D,"name","hf:doc:metadata"),i(D,"content",JSON.stringify(M$)),i(C,"id","table-classes"),i(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(C,"href","#table-classes"),i(P,"class","relative group"),i(io,"href","/docs/datasets/v2.4.0/en/package_reference/table_classes#datasets.table.Table"),i(ne,"id","datasets.table.Table"),i(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ne,"href","#datasets.table.Table"),i(K,"class","relative group"),i(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ye,"id","datasets.table.InMemoryTable"),i(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ye,"href","#datasets.table.InMemoryTable"),i(Q,"class","relative group"),i(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Xe,"id","datasets.table.MemoryMappedTable"),i(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Xe,"href","#datasets.table.MemoryMappedTable"),i(Z,"class","relative group"),i(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(gt,"id","datasets.table.ConcatenationTable"),i(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(gt,"href","#datasets.table.ConcatenationTable"),i(ee,"class","relative group"),i(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(v,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ut,"id","datasets.table.concat_tables"),i(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ut,"href","#datasets.table.concat_tables"),i(te,"class","relative group"),i(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,k){e(document.head,D),M(t,oe,k),M(t,P,k),e(P,C),e(C,A),b(I,A,null),e(P,N),e(P,jo),e(jo,Cc),M(t,xl,k),M(t,j,k),e(j,Pc),e(j,Fo),e(Fo,Lc),e(j,Ac),e(j,io),e(io,Nc),e(j,jc),M(t,El,k),M(t,K,k),e(K,ne),e(ne,Vo),b(zt,Vo,null),e(K,Fc),e(K,So),e(So,Vc),M(t,kl,k),M(t,x,k),b(Bt,x,null),e(x,Sc),e(x,qo),e(qo,qc),e(x,Rc),e(x,Ro),e(Ro,Uc),e(x,zc),e(x,Uo),e(Uo,Bc),e(x,Oc),e(x,F),b(Ot,F,null),e(F,Wc),e(F,zo),e(zo,Xc),e(F,Hc),e(F,Wt),e(Wt,Gc),e(Wt,Bo),e(Bo,Yc),e(Wt,Jc),e(x,Kc),e(x,se),b(Xt,se,null),e(se,Qc),e(se,Oo),e(Oo,Zc),e(x,ei),e(x,le),b(Ht,le,null),e(le,ti),e(le,Wo),e(Wo,ai),e(x,ri),e(x,de),b(Gt,de,null),e(de,oi),e(de,Xo),e(Xo,ni),e(x,si),e(x,ce),b(Yt,ce,null),e(ce,li),e(ce,Ho),e(Ho,di),e(x,ci),e(x,mo),b(Jt,mo,null),e(x,ii),e(x,ie),b(Kt,ie,null),e(ie,mi),e(ie,Go),e(Go,pi),e(x,bi),e(x,me),b(Qt,me,null),e(me,hi),e(me,Yo),e(Yo,ui),e(x,gi),e(x,pe),b(Zt,pe,null),e(pe,fi),e(pe,Jo),e(Jo,yi),e(x,vi),e(x,be),b(ea,be,null),e(be,$i),e(be,Ko),e(Ko,_i),e(x,Ti),e(x,he),b(ta,he,null),e(he,wi),e(he,Qo),e(Qo,xi),e(x,Ei),e(x,ue),b(aa,ue,null),e(ue,ki),e(ue,Zo),e(Zo,Mi),e(x,Ii),e(x,V),b(ra,V,null),e(V,Di),e(V,en),e(en,Ci),e(V,Pi),e(V,tn),e(tn,Li),e(x,Ai),e(x,ge),b(oa,ge,null),e(ge,Ni),e(ge,an),e(an,ji),e(x,Fi),e(x,fe),b(na,fe,null),e(fe,Vi),e(fe,rn),e(rn,Si),M(t,Ml,k),M(t,Q,k),e(Q,ye),e(ye,on),b(sa,on,null),e(Q,qi),e(Q,nn),e(nn,Ri),M(t,Il,k),M(t,y,k),b(la,y,null),e(y,Ui),e(y,sn),e(sn,zi),e(y,Bi),e(y,ln),e(ln,Oi),e(y,Wi),e(y,dn),e(dn,Xi),e(y,Hi),e(y,cn),e(cn,Gi),e(y,Yi),e(y,S),b(da,S,null),e(S,Ji),e(S,mn),e(mn,Ki),e(S,Qi),e(S,ca),e(ca,Zi),e(ca,pn),e(pn,em),e(ca,tm),e(y,am),e(y,ve),b(ia,ve,null),e(ve,rm),e(ve,bn),e(bn,om),e(y,nm),e(y,$e),b(ma,$e,null),e($e,sm),e($e,hn),e(hn,lm),e(y,dm),e(y,_e),b(pa,_e,null),e(_e,cm),e(_e,un),e(un,im),e(y,mm),e(y,Te),b(ba,Te,null),e(Te,pm),e(Te,gn),e(gn,bm),e(y,hm),e(y,po),b(ha,po,null),e(y,um),e(y,we),b(ua,we,null),e(we,gm),e(we,fn),e(fn,fm),e(y,ym),e(y,xe),b(ga,xe,null),e(xe,vm),e(xe,yn),e(yn,$m),e(y,_m),e(y,Ee),b(fa,Ee,null),e(Ee,Tm),e(Ee,vn),e(vn,wm),e(y,xm),e(y,ke),b(ya,ke,null),e(ke,Em),e(ke,$n),e($n,km),e(y,Mm),e(y,Me),b(va,Me,null),e(Me,Im),e(Me,_n),e(_n,Dm),e(y,Cm),e(y,Ie),b($a,Ie,null),e(Ie,Pm),e(Ie,Tn),e(Tn,Lm),e(y,Am),e(y,q),b(_a,q,null),e(q,Nm),e(q,wn),e(wn,jm),e(q,Fm),e(q,xn),e(xn,Vm),e(y,Sm),e(y,De),b(Ta,De,null),e(De,qm),e(De,En),e(En,Rm),e(y,Um),e(y,Ce),b(wa,Ce,null),e(Ce,zm),e(Ce,kn),e(kn,Bm),e(y,Om),e(y,Pe),b(xa,Pe,null),e(Pe,Wm),e(Pe,Mn),e(Mn,Xm),e(y,Hm),e(y,Le),b(Ea,Le,null),e(Le,Gm),e(Le,In),e(In,Ym),e(y,Jm),e(y,Ae),b(ka,Ae,null),e(Ae,Km),e(Ae,Dn),e(Dn,Qm),e(y,Zm),e(y,Ne),b(Ma,Ne,null),e(Ne,ep),e(Ne,Cn),e(Cn,tp),e(y,ap),e(y,R),b(Ia,R,null),e(R,rp),e(R,Pn),e(Pn,op),e(R,np),e(R,Ln),e(Ln,sp),e(y,lp),e(y,je),b(Da,je,null),e(je,dp),e(je,An),e(An,cp),e(y,ip),e(y,Fe),b(Ca,Fe,null),e(Fe,mp),e(Fe,Nn),e(Nn,pp),e(y,bp),e(y,U),b(Pa,U,null),e(U,hp),e(U,jn),e(jn,up),e(U,gp),e(U,Fn),e(Fn,fp),e(y,yp),e(y,Ve),b(La,Ve,null),e(Ve,vp),e(Ve,Vn),e(Vn,$p),e(y,_p),e(y,Se),b(Aa,Se,null),e(Se,Tp),e(Se,Sn),e(Sn,wp),e(y,xp),e(y,qe),b(Na,qe,null),e(qe,Ep),e(qe,qn),e(qn,kp),e(y,Mp),e(y,Re),b(ja,Re,null),e(Re,Ip),e(Re,Rn),e(Rn,Dp),e(y,Cp),e(y,Ue),b(Fa,Ue,null),e(Ue,Pp),e(Ue,Un),e(Un,Lp),e(y,Ap),e(y,bo),b(Va,bo,null),e(y,Np),e(y,ho),b(Sa,ho,null),e(y,jp),e(y,L),b(qa,L,null),e(L,Fp),e(L,zn),e(zn,Vp),e(L,Sp),e(L,Ra),e(Ra,qp),e(Ra,Bn),e(Bn,Rp),e(Ra,Up),e(L,zp),e(L,Ua),e(Ua,Bp),e(Ua,On),e(On,Op),e(Ua,Wp),e(L,Xp),b(ze,L,null),e(y,Hp),e(y,Be),b(za,Be,null),e(Be,Gp),e(Be,Wn),e(Wn,Yp),e(y,Jp),e(y,Oe),b(Ba,Oe,null),e(Oe,Kp),e(Oe,Xn),e(Xn,Qp),e(y,Zp),e(y,We),b(Oa,We,null),e(We,eb),e(We,Hn),e(Hn,tb),M(t,Dl,k),M(t,Z,k),e(Z,Xe),e(Xe,Gn),b(Wa,Gn,null),e(Z,ab),e(Z,Yn),e(Yn,rb),M(t,Cl,k),M(t,_,k),b(Xa,_,null),e(_,ob),e(_,Jn),e(Jn,nb),e(_,sb),e(_,Kn),e(Kn,lb),e(_,db),e(_,Qn),e(Qn,cb),e(_,ib),e(_,Zn),e(Zn,mb),e(_,pb),e(_,es),e(es,bb),e(_,hb),e(_,z),b(Ha,z,null),e(z,ub),e(z,ts),e(ts,gb),e(z,fb),e(z,Ga),e(Ga,yb),e(Ga,as),e(as,vb),e(Ga,$b),e(_,_b),e(_,He),b(Ya,He,null),e(He,Tb),e(He,rs),e(rs,wb),e(_,xb),e(_,Ge),b(Ja,Ge,null),e(Ge,Eb),e(Ge,os),e(os,kb),e(_,Mb),e(_,Ye),b(Ka,Ye,null),e(Ye,Ib),e(Ye,ns),e(ns,Db),e(_,Cb),e(_,Je),b(Qa,Je,null),e(Je,Pb),e(Je,ss),e(ss,Lb),e(_,Ab),e(_,uo),b(Za,uo,null),e(_,Nb),e(_,Ke),b(er,Ke,null),e(Ke,jb),e(Ke,ls),e(ls,Fb),e(_,Vb),e(_,Qe),b(tr,Qe,null),e(Qe,Sb),e(Qe,ds),e(ds,qb),e(_,Rb),e(_,Ze),b(ar,Ze,null),e(Ze,Ub),e(Ze,cs),e(cs,zb),e(_,Bb),e(_,et),b(rr,et,null),e(et,Ob),e(et,is),e(is,Wb),e(_,Xb),e(_,tt),b(or,tt,null),e(tt,Hb),e(tt,ms),e(ms,Gb),e(_,Yb),e(_,at),b(nr,at,null),e(at,Jb),e(at,ps),e(ps,Kb),e(_,Qb),e(_,B),b(sr,B,null),e(B,Zb),e(B,bs),e(bs,eh),e(B,th),e(B,hs),e(hs,ah),e(_,rh),e(_,rt),b(lr,rt,null),e(rt,oh),e(rt,us),e(us,nh),e(_,sh),e(_,ot),b(dr,ot,null),e(ot,lh),e(ot,gs),e(gs,dh),e(_,ch),e(_,nt),b(cr,nt,null),e(nt,ih),e(nt,fs),e(fs,mh),e(_,ph),e(_,st),b(ir,st,null),e(st,bh),e(st,ys),e(ys,hh),e(_,uh),e(_,lt),b(mr,lt,null),e(lt,gh),e(lt,vs),e(vs,fh),e(_,yh),e(_,dt),b(pr,dt,null),e(dt,vh),e(dt,$s),e($s,$h),e(_,_h),e(_,O),b(br,O,null),e(O,Th),e(O,_s),e(_s,wh),e(O,xh),e(O,Ts),e(Ts,Eh),e(_,kh),e(_,ct),b(hr,ct,null),e(ct,Mh),e(ct,ws),e(ws,Ih),e(_,Dh),e(_,it),b(ur,it,null),e(it,Ch),e(it,xs),e(xs,Ph),e(_,Lh),e(_,W),b(gr,W,null),e(W,Ah),e(W,Es),e(Es,Nh),e(W,jh),e(W,ks),e(ks,Fh),e(_,Vh),e(_,mt),b(fr,mt,null),e(mt,Sh),e(mt,Ms),e(Ms,qh),e(_,Rh),e(_,pt),b(yr,pt,null),e(pt,Uh),e(pt,Is),e(Is,zh),e(_,Bh),e(_,bt),b(vr,bt,null),e(bt,Oh),e(bt,Ds),e(Ds,Wh),e(_,Xh),e(_,ht),b($r,ht,null),e(ht,Hh),e(ht,Cs),e(Cs,Gh),e(_,Yh),e(_,ut),b(_r,ut,null),e(ut,Jh),e(ut,Ps),e(Ps,Kh),e(_,Qh),e(_,go),b(Tr,go,null),M(t,Pl,k),M(t,ee,k),e(ee,gt),e(gt,Ls),b(wr,Ls,null),e(ee,Zh),e(ee,As),e(As,eu),M(t,Ll,k),M(t,v,k),b(xr,v,null),e(v,tu),e(v,Ns),e(Ns,au),e(v,ru),e(v,js),e(js,ou),e(v,nu),e(v,Er),e(Er,Fs),e(Fs,su),e(Er,lu),e(Er,Vs),e(Vs,du),e(v,cu),e(v,kr),e(kr,iu),e(kr,Ss),e(Ss,mu),e(kr,pu),e(v,bu),e(v,Mr),e(Mr,hu),e(Mr,qs),e(qs,uu),e(Mr,gu),e(v,fu),e(v,Rs),e(Rs,yu),e(v,vu),e(v,X),b(Ir,X,null),e(X,$u),e(X,Us),e(Us,_u),e(X,Tu),e(X,Dr),e(Dr,wu),e(Dr,zs),e(zs,xu),e(Dr,Eu),e(v,ku),e(v,ft),b(Cr,ft,null),e(ft,Mu),e(ft,Bs),e(Bs,Iu),e(v,Du),e(v,yt),b(Pr,yt,null),e(yt,Cu),e(yt,Os),e(Os,Pu),e(v,Lu),e(v,vt),b(Lr,vt,null),e(vt,Au),e(vt,Ws),e(Ws,Nu),e(v,ju),e(v,$t),b(Ar,$t,null),e($t,Fu),e($t,Xs),e(Xs,Vu),e(v,Su),e(v,fo),b(Nr,fo,null),e(v,qu),e(v,_t),b(jr,_t,null),e(_t,Ru),e(_t,Hs),e(Hs,Uu),e(v,zu),e(v,Tt),b(Fr,Tt,null),e(Tt,Bu),e(Tt,Gs),e(Gs,Ou),e(v,Wu),e(v,wt),b(Vr,wt,null),e(wt,Xu),e(wt,Ys),e(Ys,Hu),e(v,Gu),e(v,xt),b(Sr,xt,null),e(xt,Yu),e(xt,Js),e(Js,Ju),e(v,Ku),e(v,Et),b(qr,Et,null),e(Et,Qu),e(Et,Ks),e(Ks,Zu),e(v,eg),e(v,kt),b(Rr,kt,null),e(kt,tg),e(kt,Qs),e(Qs,ag),e(v,rg),e(v,H),b(Ur,H,null),e(H,og),e(H,Zs),e(Zs,ng),e(H,sg),e(H,el),e(el,lg),e(v,dg),e(v,Mt),b(zr,Mt,null),e(Mt,cg),e(Mt,tl),e(tl,ig),e(v,mg),e(v,It),b(Br,It,null),e(It,pg),e(It,al),e(al,bg),e(v,hg),e(v,Dt),b(Or,Dt,null),e(Dt,ug),e(Dt,rl),e(rl,gg),e(v,fg),e(v,Ct),b(Wr,Ct,null),e(Ct,yg),e(Ct,ol),e(ol,vg),e(v,$g),e(v,Pt),b(Xr,Pt,null),e(Pt,_g),e(Pt,nl),e(nl,Tg),e(v,wg),e(v,Lt),b(Hr,Lt,null),e(Lt,xg),e(Lt,sl),e(sl,Eg),e(v,kg),e(v,G),b(Gr,G,null),e(G,Mg),e(G,ll),e(ll,Ig),e(G,Dg),e(G,dl),e(dl,Cg),e(v,Pg),e(v,At),b(Yr,At,null),e(At,Lg),e(At,cl),e(cl,Ag),e(v,Ng),e(v,Nt),b(Jr,Nt,null),e(Nt,jg),e(Nt,il),e(il,Fg),e(v,Vg),e(v,Y),b(Kr,Y,null),e(Y,Sg),e(Y,ml),e(ml,qg),e(Y,Rg),e(Y,pl),e(pl,Ug),e(v,zg),e(v,jt),b(Qr,jt,null),e(jt,Bg),e(jt,bl),e(bl,Og),e(v,Wg),e(v,Ft),b(Zr,Ft,null),e(Ft,Xg),e(Ft,hl),e(hl,Hg),e(v,Gg),e(v,Vt),b(eo,Vt,null),e(Vt,Yg),e(Vt,ul),e(ul,Jg),e(v,Kg),e(v,St),b(to,St,null),e(St,Qg),e(St,gl),e(gl,Zg),e(v,ef),e(v,qt),b(ao,qt,null),e(qt,tf),e(qt,fl),e(fl,af),e(v,rf),e(v,yo),b(ro,yo,null),e(v,of),e(v,Rt),b(oo,Rt,null),e(Rt,nf),e(Rt,yl),e(yl,sf),M(t,Al,k),M(t,te,k),e(te,Ut),e(Ut,vl),b(no,vl,null),e(te,lf),e(te,$l),e($l,df),M(t,Nl,k),M(t,ae,k),b(so,ae,null),e(ae,cf),e(ae,_l),e(_l,mf),M(t,jl,k),M(t,re,k),b(lo,re,null),e(re,pf),e(re,Tl),e(Tl,bf),Fl=!0},p(t,[k]){const co={};k&2&&(co.$$scope={dirty:k,ctx:t}),ze.$set(co)},i(t){Fl||(h(I.$$.fragment,t),h(zt.$$.fragment,t),h(Bt.$$.fragment,t),h(Ot.$$.fragment,t),h(Xt.$$.fragment,t),h(Ht.$$.fragment,t),h(Gt.$$.fragment,t),h(Yt.$$.fragment,t),h(Jt.$$.fragment,t),h(Kt.$$.fragment,t),h(Qt.$$.fragment,t),h(Zt.$$.fragment,t),h(ea.$$.fragment,t),h(ta.$$.fragment,t),h(aa.$$.fragment,t),h(ra.$$.fragment,t),h(oa.$$.fragment,t),h(na.$$.fragment,t),h(sa.$$.fragment,t),h(la.$$.fragment,t),h(da.$$.fragment,t),h(ia.$$.fragment,t),h(ma.$$.fragment,t),h(pa.$$.fragment,t),h(ba.$$.fragment,t),h(ha.$$.fragment,t),h(ua.$$.fragment,t),h(ga.$$.fragment,t),h(fa.$$.fragment,t),h(ya.$$.fragment,t),h(va.$$.fragment,t),h($a.$$.fragment,t),h(_a.$$.fragment,t),h(Ta.$$.fragment,t),h(wa.$$.fragment,t),h(xa.$$.fragment,t),h(Ea.$$.fragment,t),h(ka.$$.fragment,t),h(Ma.$$.fragment,t),h(Ia.$$.fragment,t),h(Da.$$.fragment,t),h(Ca.$$.fragment,t),h(Pa.$$.fragment,t),h(La.$$.fragment,t),h(Aa.$$.fragment,t),h(Na.$$.fragment,t),h(ja.$$.fragment,t),h(Fa.$$.fragment,t),h(Va.$$.fragment,t),h(Sa.$$.fragment,t),h(qa.$$.fragment,t),h(ze.$$.fragment,t),h(za.$$.fragment,t),h(Ba.$$.fragment,t),h(Oa.$$.fragment,t),h(Wa.$$.fragment,t),h(Xa.$$.fragment,t),h(Ha.$$.fragment,t),h(Ya.$$.fragment,t),h(Ja.$$.fragment,t),h(Ka.$$.fragment,t),h(Qa.$$.fragment,t),h(Za.$$.fragment,t),h(er.$$.fragment,t),h(tr.$$.fragment,t),h(ar.$$.fragment,t),h(rr.$$.fragment,t),h(or.$$.fragment,t),h(nr.$$.fragment,t),h(sr.$$.fragment,t),h(lr.$$.fragment,t),h(dr.$$.fragment,t),h(cr.$$.fragment,t),h(ir.$$.fragment,t),h(mr.$$.fragment,t),h(pr.$$.fragment,t),h(br.$$.fragment,t),h(hr.$$.fragment,t),h(ur.$$.fragment,t),h(gr.$$.fragment,t),h(fr.$$.fragment,t),h(yr.$$.fragment,t),h(vr.$$.fragment,t),h($r.$$.fragment,t),h(_r.$$.fragment,t),h(Tr.$$.fragment,t),h(wr.$$.fragment,t),h(xr.$$.fragment,t),h(Ir.$$.fragment,t),h(Cr.$$.fragment,t),h(Pr.$$.fragment,t),h(Lr.$$.fragment,t),h(Ar.$$.fragment,t),h(Nr.$$.fragment,t),h(jr.$$.fragment,t),h(Fr.$$.fragment,t),h(Vr.$$.fragment,t),h(Sr.$$.fragment,t),h(qr.$$.fragment,t),h(Rr.$$.fragment,t),h(Ur.$$.fragment,t),h(zr.$$.fragment,t),h(Br.$$.fragment,t),h(Or.$$.fragment,t),h(Wr.$$.fragment,t),h(Xr.$$.fragment,t),h(Hr.$$.fragment,t),h(Gr.$$.fragment,t),h(Yr.$$.fragment,t),h(Jr.$$.fragment,t),h(Kr.$$.fragment,t),h(Qr.$$.fragment,t),h(Zr.$$.fragment,t),h(eo.$$.fragment,t),h(to.$$.fragment,t),h(ao.$$.fragment,t),h(ro.$$.fragment,t),h(oo.$$.fragment,t),h(no.$$.fragment,t),h(so.$$.fragment,t),h(lo.$$.fragment,t),Fl=!0)},o(t){u(I.$$.fragment,t),u(zt.$$.fragment,t),u(Bt.$$.fragment,t),u(Ot.$$.fragment,t),u(Xt.$$.fragment,t),u(Ht.$$.fragment,t),u(Gt.$$.fragment,t),u(Yt.$$.fragment,t),u(Jt.$$.fragment,t),u(Kt.$$.fragment,t),u(Qt.$$.fragment,t),u(Zt.$$.fragment,t),u(ea.$$.fragment,t),u(ta.$$.fragment,t),u(aa.$$.fragment,t),u(ra.$$.fragment,t),u(oa.$$.fragment,t),u(na.$$.fragment,t),u(sa.$$.fragment,t),u(la.$$.fragment,t),u(da.$$.fragment,t),u(ia.$$.fragment,t),u(ma.$$.fragment,t),u(pa.$$.fragment,t),u(ba.$$.fragment,t),u(ha.$$.fragment,t),u(ua.$$.fragment,t),u(ga.$$.fragment,t),u(fa.$$.fragment,t),u(ya.$$.fragment,t),u(va.$$.fragment,t),u($a.$$.fragment,t),u(_a.$$.fragment,t),u(Ta.$$.fragment,t),u(wa.$$.fragment,t),u(xa.$$.fragment,t),u(Ea.$$.fragment,t),u(ka.$$.fragment,t),u(Ma.$$.fragment,t),u(Ia.$$.fragment,t),u(Da.$$.fragment,t),u(Ca.$$.fragment,t),u(Pa.$$.fragment,t),u(La.$$.fragment,t),u(Aa.$$.fragment,t),u(Na.$$.fragment,t),u(ja.$$.fragment,t),u(Fa.$$.fragment,t),u(Va.$$.fragment,t),u(Sa.$$.fragment,t),u(qa.$$.fragment,t),u(ze.$$.fragment,t),u(za.$$.fragment,t),u(Ba.$$.fragment,t),u(Oa.$$.fragment,t),u(Wa.$$.fragment,t),u(Xa.$$.fragment,t),u(Ha.$$.fragment,t),u(Ya.$$.fragment,t),u(Ja.$$.fragment,t),u(Ka.$$.fragment,t),u(Qa.$$.fragment,t),u(Za.$$.fragment,t),u(er.$$.fragment,t),u(tr.$$.fragment,t),u(ar.$$.fragment,t),u(rr.$$.fragment,t),u(or.$$.fragment,t),u(nr.$$.fragment,t),u(sr.$$.fragment,t),u(lr.$$.fragment,t),u(dr.$$.fragment,t),u(cr.$$.fragment,t),u(ir.$$.fragment,t),u(mr.$$.fragment,t),u(pr.$$.fragment,t),u(br.$$.fragment,t),u(hr.$$.fragment,t),u(ur.$$.fragment,t),u(gr.$$.fragment,t),u(fr.$$.fragment,t),u(yr.$$.fragment,t),u(vr.$$.fragment,t),u($r.$$.fragment,t),u(_r.$$.fragment,t),u(Tr.$$.fragment,t),u(wr.$$.fragment,t),u(xr.$$.fragment,t),u(Ir.$$.fragment,t),u(Cr.$$.fragment,t),u(Pr.$$.fragment,t),u(Lr.$$.fragment,t),u(Ar.$$.fragment,t),u(Nr.$$.fragment,t),u(jr.$$.fragment,t),u(Fr.$$.fragment,t),u(Vr.$$.fragment,t),u(Sr.$$.fragment,t),u(qr.$$.fragment,t),u(Rr.$$.fragment,t),u(Ur.$$.fragment,t),u(zr.$$.fragment,t),u(Br.$$.fragment,t),u(Or.$$.fragment,t),u(Wr.$$.fragment,t),u(Xr.$$.fragment,t),u(Hr.$$.fragment,t),u(Gr.$$.fragment,t),u(Yr.$$.fragment,t),u(Jr.$$.fragment,t),u(Kr.$$.fragment,t),u(Qr.$$.fragment,t),u(Zr.$$.fragment,t),u(eo.$$.fragment,t),u(to.$$.fragment,t),u(ao.$$.fragment,t),u(ro.$$.fragment,t),u(oo.$$.fragment,t),u(no.$$.fragment,t),u(so.$$.fragment,t),u(lo.$$.fragment,t),Fl=!1},d(t){a(D),t&&a(oe),t&&a(P),g(I),t&&a(xl),t&&a(j),t&&a(El),t&&a(K),g(zt),t&&a(kl),t&&a(x),g(Bt),g(Ot),g(Xt),g(Ht),g(Gt),g(Yt),g(Jt),g(Kt),g(Qt),g(Zt),g(ea),g(ta),g(aa),g(ra),g(oa),g(na),t&&a(Ml),t&&a(Q),g(sa),t&&a(Il),t&&a(y),g(la),g(da),g(ia),g(ma),g(pa),g(ba),g(ha),g(ua),g(ga),g(fa),g(ya),g(va),g($a),g(_a),g(Ta),g(wa),g(xa),g(Ea),g(ka),g(Ma),g(Ia),g(Da),g(Ca),g(Pa),g(La),g(Aa),g(Na),g(ja),g(Fa),g(Va),g(Sa),g(qa),g(ze),g(za),g(Ba),g(Oa),t&&a(Dl),t&&a(Z),g(Wa),t&&a(Cl),t&&a(_),g(Xa),g(Ha),g(Ya),g(Ja),g(Ka),g(Qa),g(Za),g(er),g(tr),g(ar),g(rr),g(or),g(nr),g(sr),g(lr),g(dr),g(cr),g(ir),g(mr),g(pr),g(br),g(hr),g(ur),g(gr),g(fr),g(yr),g(vr),g($r),g(_r),g(Tr),t&&a(Pl),t&&a(ee),g(wr),t&&a(Ll),t&&a(v),g(xr),g(Ir),g(Cr),g(Pr),g(Lr),g(Ar),g(Nr),g(jr),g(Fr),g(Vr),g(Sr),g(qr),g(Rr),g(Ur),g(zr),g(Br),g(Or),g(Wr),g(Xr),g(Hr),g(Gr),g(Yr),g(Jr),g(Kr),g(Qr),g(Zr),g(eo),g(to),g(ao),g(ro),g(oo),t&&a(Al),t&&a(te),g(no),t&&a(Nl),t&&a(ae),g(so),t&&a(jl),t&&a(re),g(lo)}}}const M$={local:"table-classes",sections:[{local:"datasets.table.Table",title:"Table"},{local:"datasets.table.InMemoryTable",title:"InMemoryTable"},{local:"datasets.table.MemoryMappedTable",title:"MemoryMappedTable"},{local:"datasets.table.ConcatenationTable",title:"ConcatenationTable"},{local:"datasets.table.concat_tables",title:"Utils"}],title:"Table Classes"};function I$(wl){return _$(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class N$ extends f${constructor(D){super();y$(this,D,I$,k$,v$,{})}}export{N$ as default,M$ as metadata};
