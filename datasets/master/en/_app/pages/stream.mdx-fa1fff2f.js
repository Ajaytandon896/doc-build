import{S as Di,i as Ai,s as Ii,e as t,k as c,w as _,t as n,M as Ti,c as l,d as e,m as f,a as o,x as j,h as r,b as h,N as Ei,F as a,g as i,y as v,q as b,o as $,B as x,v as Pi,L as qi}from"../chunks/vendor-aa873a46.js";import{T as ut}from"../chunks/Tip-f7f252ab.js";import{I as z}from"../chunks/IconCopyLink-d0ca3106.js";import{C as I}from"../chunks/CodeBlock-1f14baf3.js";import{F as Si,M as Ci}from"../chunks/Markdown-28d14b5b.js";import"../chunks/IconTensorflow-b9816778.js";function zi(q){let d,w,m,y,k,g,E,u;return{c(){d=t("p"),w=n("An "),m=t("a"),y=n("IterableDataset"),k=n(" is useful for iterative jobs like training a model. You shouldn\u2019t use a "),g=t("a"),E=n("IterableDataset"),u=n(" for jobs that require random access to examples because you have to iterate all over it using a for loop. Getting the last example in an iterable dataset would require you to iterate over all the previous examples."),this.h()},l(D){d=l(D,"P",{});var A=o(d);w=r(A,"An "),m=l(A,"A",{href:!0});var T=o(m);y=r(T,"IterableDataset"),T.forEach(e),k=r(A," is useful for iterative jobs like training a model. You shouldn\u2019t use a "),g=l(A,"A",{href:!0});var N=o(g);E=r(N,"IterableDataset"),N.forEach(e),u=r(A," for jobs that require random access to examples because you have to iterate all over it using a for loop. Getting the last example in an iterable dataset would require you to iterate over all the previous examples."),A.forEach(e),this.h()},h(){h(m,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(g,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset")},m(D,A){i(D,d,A),a(d,w),a(d,m),a(m,y),a(d,k),a(d,g),a(g,E),a(d,u)},d(D){D&&e(d)}}}function Ni(q){let d,w,m,y;return{c(){d=t("p"),w=t("a"),m=n("IterableDataset.shuffle()"),y=n(" will also shuffle the order of the shards if the dataset is sharded into multiple sets."),this.h()},l(k){d=l(k,"P",{});var g=o(d);w=l(g,"A",{href:!0});var E=o(w);m=r(E,"IterableDataset.shuffle()"),E.forEach(e),y=r(g," will also shuffle the order of the shards if the dataset is sharded into multiple sets."),g.forEach(e),this.h()},h(){h(w,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.shuffle")},m(k,g){i(k,d,g),a(d,w),a(w,m),a(d,y)},d(k){k&&e(d)}}}function Mi(q){let d,w,m,y,k,g,E,u,D,A,T,N,hs;return{c(){d=t("p"),w=t("code"),m=n("take"),y=n(" and "),k=t("code"),g=n("skip"),E=n(" prevent future calls to "),u=t("code"),D=n("shuffle"),A=n(" because they lock in the order of the shards. You should "),T=t("code"),N=n("shuffle"),hs=n(" your dataset before splitting it.")},l(C){d=l(C,"P",{});var P=o(d);w=l(P,"CODE",{});var De=o(w);m=r(De,"take"),De.forEach(e),y=r(P," and "),k=l(P,"CODE",{});var Ae=o(k);g=r(Ae,"skip"),Ae.forEach(e),E=r(P," prevent future calls to "),u=l(P,"CODE",{});var cs=o(u);D=r(cs,"shuffle"),cs.forEach(e),A=r(P," because they lock in the order of the shards. You should "),T=l(P,"CODE",{});var Ie=o(T);N=r(Ie,"shuffle"),Ie.forEach(e),hs=r(P," your dataset before splitting it."),P.forEach(e)},m(C,P){i(C,d,P),a(d,w),a(w,m),a(d,y),a(d,k),a(k,g),a(d,E),a(d,u),a(u,D),a(d,A),a(d,T),a(T,N),a(d,hs)},d(C){C&&e(d)}}}function Li(q){let d,w,m,y,k,g,E,u;return{c(){d=t("p"),w=n("Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),m=t("code"),y=n("Value('int32')"),k=n(" to "),g=t("code"),E=n("Value('bool')"),u=n(" if the original column only contains ones and zeros.")},l(D){d=l(D,"P",{});var A=o(d);w=r(A,"Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),m=l(A,"CODE",{});var T=o(m);y=r(T,"Value('int32')"),T.forEach(e),k=r(A," to "),g=l(A,"CODE",{});var N=o(g);E=r(N,"Value('bool')"),N.forEach(e),u=r(A," if the original column only contains ones and zeros."),A.forEach(e)},m(D,A){i(D,d,A),a(d,w),a(d,m),a(m,y),a(d,k),a(d,g),a(g,E),a(d,u)},d(D){D&&e(d)}}}function Oi(q){let d,w,m,y,k;return{c(){d=t("p"),w=n("See other examples of batch processing in the "),m=t("a"),y=n("batched map processing"),k=n(" documentation. They work the same for iterable datasets."),this.h()},l(g){d=l(g,"P",{});var E=o(d);w=r(E,"See other examples of batch processing in the "),m=l(E,"A",{href:!0});var u=o(m);y=r(u,"batched map processing"),u.forEach(e),k=r(E," documentation. They work the same for iterable datasets."),E.forEach(e),this.h()},h(){h(m,"href","./process#batch-processing")},m(g,E){i(g,d,E),a(d,w),a(d,m),a(m,y),a(d,k)},d(g){g&&e(d)}}}function Vi(q){let d,w,m,y,k,g,E;return d=new I({props:{code:`seed, buffer_size = 42, 10_000
dataset = dataset.shuffle(seed, buffer_size=buffer_size)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>seed, buffer_size = <span class="hljs-number">42</span>, <span class="hljs-number">10_000</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.shuffle(seed, buffer_size=buffer_size)`}}),g=new I({props:{code:`import torch
from torch.utils.data import DataLoader
from transformers import AutoModelForMaskedLM, DataCollatorForLanguageModeling
from tqdm import tqdm
dataset = dataset.with_format("torch")
dataloader = DataLoader(dataset, collate_fn=DataCollatorForLanguageModeling(tokenizer))
device = 'cuda' if torch.cuda.is_available() else 'cpu' 
model = AutoModelForMaskedLM.from_pretrained("distilbert-base-uncased")
model.train().to(device)
optimizer = torch.optim.AdamW(params=model.parameters(), lr=1e-5)
for epoch in range(3):
    dataset.set_epoch(epoch)
    for i, batch in enumerate(tqdm(dataloader, total=5)):
        if i == 5:
            break
        batch = {k: v.to(device) for k, v in batch.items()}
        outputs = model(**batch)
        loss = outputs[0]
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()
        if i % 10 == 0:
            print(f"loss: {loss}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForMaskedLM, DataCollatorForLanguageModeling
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-string">&quot;torch&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = DataLoader(dataset, collate_fn=DataCollatorForLanguageModeling(tokenizer))
<span class="hljs-meta">&gt;&gt;&gt; </span>device = <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span> 
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.train().to(device)
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer = torch.optim.AdamW(params=model.parameters(), lr=<span class="hljs-number">1e-5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):
<span class="hljs-meta">... </span>    dataset.set_epoch(epoch)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tqdm(dataloader, total=<span class="hljs-number">5</span>)):
<span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">5</span>:
<span class="hljs-meta">... </span>            <span class="hljs-keyword">break</span>
<span class="hljs-meta">... </span>        batch = {k: v.to(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> batch.items()}
<span class="hljs-meta">... </span>        outputs = model(**batch)
<span class="hljs-meta">... </span>        loss = outputs[<span class="hljs-number">0</span>]
<span class="hljs-meta">... </span>        loss.backward()
<span class="hljs-meta">... </span>        optimizer.step()
<span class="hljs-meta">... </span>        optimizer.zero_grad()
<span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loss: <span class="hljs-subst">{loss}</span>&quot;</span>)`}}),{c(){_(d.$$.fragment),w=c(),m=t("p"),y=n("Lastly, create a simple training loop and start training:"),k=c(),_(g.$$.fragment)},l(u){j(d.$$.fragment,u),w=f(u),m=l(u,"P",{});var D=o(m);y=r(D,"Lastly, create a simple training loop and start training:"),D.forEach(e),k=f(u),j(g.$$.fragment,u)},m(u,D){v(d,u,D),i(u,w,D),i(u,m,D),a(m,y),i(u,k,D),v(g,u,D),E=!0},p:qi,i(u){E||(b(d.$$.fragment,u),b(g.$$.fragment,u),E=!0)},o(u){$(d.$$.fragment,u),$(g.$$.fragment,u),E=!1},d(u){x(d,u),u&&e(w),u&&e(m),u&&e(k),x(g,u)}}}function Fi(q){let d,w;return d=new Ci({props:{$$slots:{default:[Vi]},$$scope:{ctx:q}}}),{c(){_(d.$$.fragment)},l(m){j(d.$$.fragment,m)},m(m,y){v(d,m,y),w=!0},p(m,y){const k={};y&2&&(k.$$scope={dirty:y,ctx:m}),d.$set(k)},i(m){w||(b(d.$$.fragment,m),w=!0)},o(m){$(d.$$.fragment,m),w=!1},d(m){x(d,m)}}}function Ri(q){let d,w,m,y,k,g,E,u,D,A,T,N,hs,C,P,De,Ae,cs,Ie,gt,J,Te,Lo,Zl,Pe,Oo,_t,L,sn,Bs,en,an,ma,tn,ln,qe,nn,rn,jt,Js,vt,H,on,Se,pn,hn,Ce,cn,fn,bt,fs,$t,W,ds,ua,Ws,dn,ga,mn,xt,O,un,ze,gn,_n,Ne,jn,vn,Me,bn,$n,wt,V,xn,_a,wn,yn,ja,kn,En,Le,Dn,An,yt,Gs,kt,ms,Et,G,us,va,Ks,In,ba,Tn,Dt,gs,Pn,$a,qn,Sn,At,_s,Cn,xa,zn,Nn,It,Qs,Tt,K,js,wa,Xs,Mn,ya,Ln,Pt,Oe,On,qt,Ve,vs,Fe,Vn,Fn,ka,Rn,Hn,St,Zs,Ct,Re,bs,He,Yn,Un,Ea,Bn,Jn,zt,se,Nt,$s,Mt,Ye,Lt,Q,xs,Da,ee,Wn,Aa,Gn,Ot,X,Ue,Kn,Qn,Be,Xn,Zn,Vt,ae,Ft,ws,sr,Ia,er,ar,Rt,te,Ht,Y,tr,Ta,lr,nr,Pa,rr,or,Yt,Z,ys,qa,le,pr,Sa,ir,Ut,Je,hr,Bt,ss,ks,Ca,ne,cr,za,fr,Jt,Es,dr,Na,mr,ur,Wt,Ds,gr,Ma,_r,jr,Gt,re,Kt,es,As,La,oe,vr,Oa,br,Qt,Is,$r,We,xr,wr,Xt,pe,Zt,as,Ts,Va,ie,yr,Fa,kr,sl,M,Ra,Er,Dr,Ha,Ar,Ir,Ya,Tr,Pr,Ua,qr,Sr,el,he,al,Ps,tl,qs,Cr,Ge,zr,Nr,ll,ce,nl,ts,Ss,Ba,fe,Mr,Ja,Lr,rl,S,Or,Ke,Vr,Fr,Qe,Rr,Hr,Xe,Yr,Ur,Ze,Br,Jr,sa,Wr,Gr,ol,ea,Kr,pl,U,Qr,aa,Xr,Zr,Wa,so,eo,il,de,hl,Cs,ao,ta,to,lo,cl,me,fl,zs,no,la,ro,oo,dl,B,po,Ga,io,ho,na,co,fo,ml,ue,ul,ls,Ns,Ka,ge,mo,Qa,uo,gl,R,ra,go,_o,Xa,jo,vo,Za,bo,$o,_l,ns,Ms,st,_e,xo,et,wo,jl,je,vl,Ls,bl,rs,Os,at,ve,yo,tt,ko,$l,Vs,Eo,oa,Do,Ao,xl,be,wl,os,pa,Io,To,lt,Po,qo,yl,$e,kl,ps,Fs,nt,xe,So,rt,Co,El,we,ia,zo,No,Dl,Rs,Al;return g=new z({}),Js=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
print(next(iter(dataset)))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataset)))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision of Chief Napoleon Dzombe, which he shared with John Blanchard during his first visit to Malawi. Chief Napoleon conveyed the desperate need for a program to intervene and care for the orphans and vulnerable children (OVC) in Malawi, and John committed to help...</span>`}}),fs=new ut({props:{$$slots:{default:[zi]},$$scope:{ctx:q}}}),Ws=new z({}),Gs=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
shuffled_dataset = dataset.shuffle(seed=42, buffer_size=10_000)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset = dataset.shuffle(seed=<span class="hljs-number">42</span>, buffer_size=<span class="hljs-number">10_000</span>)`}}),ms=new ut({props:{$$slots:{default:[Ni]},$$scope:{ctx:q}}}),Ks=new z({}),Qs=new I({props:{code:`for epoch in range(epochs):
    shuffled_dataset.set_epoch(epoch)
    for example in shuffled_dataset:
        ...`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):
<span class="hljs-meta">... </span>    shuffled_dataset.set_epoch(epoch)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> shuffled_dataset:
<span class="hljs-meta">... </span>        ...`}}),Xs=new z({}),Zs=new I({props:{code:`dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
dataset_head = dataset.take(2)
list(dataset_head)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_head = dataset.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(dataset_head)
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was...&#x27;</span>}, {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Lily James cannot fight the music...&#x27;</span>}]`}}),se=new I({props:{code:"train_dataset = shuffled_dataset.skip(1000)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_dataset = shuffled_dataset.skip(<span class="hljs-number">1000</span>)'}}),$s=new ut({props:{warning:!0,$$slots:{default:[Mi]},$$scope:{ctx:q}}}),ee=new z({}),ae=new I({props:{code:`from datasets import interleave_datasets
en_dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
fr_dataset = load_dataset('oscar', "unshuffled_deduplicated_fr", split='train', streaming=True)

multilingual_dataset = interleave_datasets([en_dataset, fr_dataset])
list(multilingual_dataset.take(2))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>en_dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>fr_dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>multilingual_dataset = interleave_datasets([en_dataset, fr_dataset])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(multilingual_dataset.take(<span class="hljs-number">2</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...&#x27;</span>}, {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;M\xE9dia de d\xE9bat d&#x27;id\xE9es, de culture et de litt\xE9rature...&quot;</span>}]`}}),te=new I({props:{code:`multilingual_dataset_with_oversampling = interleave_datasets([en_dataset, fr_dataset], probabilities=[0.8, 0.2], seed=42)
list(multilingual_dataset_with_oversampling.take(2))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>multilingual_dataset_with_oversampling = interleave_datasets([en_dataset, fr_dataset], probabilities=[<span class="hljs-number">0.8</span>, <span class="hljs-number">0.2</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(multilingual_dataset_with_oversampling.take(<span class="hljs-number">2</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...&#x27;</span>}, {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Lily James cannot fight the music...&#x27;</span>}]`}}),le=new z({}),ne=new z({}),re=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('mc4', 'en', streaming=True, split='train')
dataset = dataset.rename_column("text", "content")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;mc4&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>)`}}),oe=new z({}),pe=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('mc4', 'en', streaming=True, split='train')
dataset = dataset.remove_columns('timestamp')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;mc4&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns(<span class="hljs-string">&#x27;timestamp&#x27;</span>)`}}),ie=new z({}),he=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('glue', 'mrpc', split='train')features

from datasets import ClassLabel, Value
new_features = dataset.features.copy()
new_features["label"] = ClassLabel(names=['negative', 'positive'])
new_features["idx"] = Value('int64')
dataset = dataset.cast(new_features)
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = dataset.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;idx&quot;</span>] = Value(<span class="hljs-string">&#x27;int64&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ps=new ut({props:{$$slots:{default:[Li]},$$scope:{ctx:q}}}),ce=new I({props:{code:`dataset.features

dataset = dataset.cast_column("audio", Audio(sampling_rate=16000))
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">44100</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),fe=new z({}),de=new I({props:{code:`def add_prefix(example):
    example['text'] = 'My text: ' + example['text']
    return example`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&#x27;text&#x27;</span>] = <span class="hljs-string">&#x27;My text: &#x27;</span> + example[<span class="hljs-string">&#x27;text&#x27;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`}}),me=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', 'unshuffled_deduplicated_en', streaming=True, split='train')
updated_dataset = dataset.map(add_prefix)
list(updated_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&#x27;unshuffled_deduplicated_en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(updated_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Mtendere Village was inspired by...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Lily James cannot fight the music...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: &quot;I\\&#x27;d love to help kickstart...&#x27;</span>}]`}}),ue=new I({props:{code:`updated_dataset = dataset.map(add_prefix, remove_columns=["id"])
list(updated_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(add_prefix, remove_columns=[<span class="hljs-string">&quot;id&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(updated_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Mtendere Village was inspired by...&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Lily James cannot fight the music...&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: &quot;I\\&#x27;d love to help kickstart...&#x27;</span>}]`}}),ge=new z({}),_e=new z({}),je=new I({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
dataset = load_dataset("mc4", "en", streaming=True, split="train")
tokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased')
def encode(examples):
    return tokenizer(examples['text'], truncation=True, padding='max_length')
dataset = dataset.map(encode, batched=True, remove_columns=["text", "timestamp", "url"])
next(iter(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;mc4&quot;</span>, <span class="hljs-string">&quot;en&quot;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;distilbert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&#x27;max_length&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataset))
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-number">8466</span>, <span class="hljs-number">1018</span>, <span class="hljs-number">1010</span>, <span class="hljs-number">4029</span>, <span class="hljs-number">2475</span>, <span class="hljs-number">2062</span>, <span class="hljs-number">18558</span>, <span class="hljs-number">3100</span>, <span class="hljs-number">2061</span>, ...,<span class="hljs-number">1106</span>, <span class="hljs-number">3739</span>, <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, ..., <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),Ls=new ut({props:{$$slots:{default:[Oi]},$$scope:{ctx:q}}}),ve=new z({}),be=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', 'unshuffled_deduplicated_en', streaming=True, split='train')
start_with_ar = dataset.filter(lambda example: example['text'].startswith('Ar'))
next(iter(start_with_ar))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&#x27;unshuffled_deduplicated_en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example: example[<span class="hljs-string">&#x27;text&#x27;</span>].startswith(<span class="hljs-string">&#x27;Ar&#x27;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(start_with_ar))
{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Are you looking for Number the Stars (Essential Modern Classics)?...&#x27;</span>}`}}),$e=new I({props:{code:`even_dataset = dataset.filter(lambda example, idx: idx % 2 == 0, with_indices=True)
list(even_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>even_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example, idx: idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(even_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision of Chief Napoleon Dzombe, ...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;&quot;I\\&#x27;d love to help kickstart continued development! And 0 EUR/month...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Are you looking for Number the Stars (Essential Modern Classics)? Normally, ...&#x27;</span>}]`}}),xe=new z({}),Rs=new Si({props:{pytorch:!0,tensorflow:!1,jax:!1,$$slots:{pytorch:[Fi]},$$scope:{ctx:q}}}),{c(){d=t("meta"),w=c(),m=t("h1"),y=t("a"),k=t("span"),_(g.$$.fragment),E=c(),u=t("span"),D=n("Stream"),A=c(),T=t("p"),N=n("Dataset streaming lets you get started with a dataset without waiting for the entire dataset to download. The data is downloaded progressively as you iterate over the dataset. This is especially helpful when:"),hs=c(),C=t("ul"),P=t("li"),De=n("You don\u2019t want to wait for an extremely large dataset to download."),Ae=c(),cs=t("li"),Ie=n("The dataset size exceeds the amount of disk space on your computer."),gt=c(),J=t("div"),Te=t("img"),Zl=c(),Pe=t("img"),_t=c(),L=t("p"),sn=n("For example, the English split of the "),Bs=t("a"),en=n("OSCAR"),an=n(" dataset is 1.2 terabytes, but you can use it instantly with streaming. Stream a dataset by setting "),ma=t("code"),tn=n("streaming=True"),ln=n(" in "),qe=t("a"),nn=n("load_dataset()"),rn=n(" as shown below:"),jt=c(),_(Js.$$.fragment),vt=c(),H=t("p"),on=n("Loading a dataset in streaming mode creates a new dataset type instance (instead of the classic "),Se=t("a"),pn=n("Dataset"),hn=n(" object), known as an "),Ce=t("a"),cn=n("IterableDataset"),fn=n(". This special type of dataset has its own set of processing methods shown below."),bt=c(),_(fs.$$.fragment),$t=c(),W=t("h2"),ds=t("a"),ua=t("span"),_(Ws.$$.fragment),dn=c(),ga=t("span"),mn=n("Shuffle"),xt=c(),O=t("p"),un=n("Like a regular "),ze=t("a"),gn=n("Dataset"),_n=n(" object, you can also shuffle a "),Ne=t("a"),jn=n("IterableDataset"),vn=n(" with "),Me=t("a"),bn=n("IterableDataset.shuffle()"),$n=n("."),wt=c(),V=t("p"),xn=n("The "),_a=t("code"),wn=n("buffer_size"),yn=n(" argument controls the size of the buffer to randomly sample examples from. Let\u2019s say your dataset has one million examples, and you set the "),ja=t("code"),kn=n("buffer_size"),En=n(" to ten thousand. "),Le=t("a"),Dn=n("IterableDataset.shuffle()"),An=n(" will randomly select examples from the first ten thousand examples in the buffer. Selected examples in the buffer are replaced with new examples. By default, the buffer size is 1,000."),yt=c(),_(Gs.$$.fragment),kt=c(),_(ms.$$.fragment),Et=c(),G=t("h2"),us=t("a"),va=t("span"),_(Ks.$$.fragment),In=c(),ba=t("span"),Tn=n("Reshuffle"),Dt=c(),gs=t("p"),Pn=n("Sometimes you may want to reshuffle the dataset after each epoch. This will require you to set a different seed for each epoch. Use "),$a=t("code"),qn=n("IterableDataset.set_epoch()"),Sn=n("in between epochs to tell the dataset what epoch you\u2019re on."),At=c(),_s=t("p"),Cn=n("Your seed effectively becomes: "),xa=t("code"),zn=n("initial seed + current epoch"),Nn=n("."),It=c(),_(Qs.$$.fragment),Tt=c(),K=t("h2"),js=t("a"),wa=t("span"),_(Xs.$$.fragment),Mn=c(),ya=t("span"),Ln=n("Split dataset"),Pt=c(),Oe=t("p"),On=n("You can split your dataset one of two ways:"),qt=c(),Ve=t("ul"),vs=t("li"),Fe=t("a"),Vn=n("IterableDataset.take()"),Fn=n(" returns the first "),ka=t("code"),Rn=n("n"),Hn=n(" examples in a dataset:"),St=c(),_(Zs.$$.fragment),Ct=c(),Re=t("ul"),bs=t("li"),He=t("a"),Yn=n("IterableDataset.skip()"),Un=n(" omits the first "),Ea=t("code"),Bn=n("n"),Jn=n(" examples in a dataset and returns the remaining examples:"),zt=c(),_(se.$$.fragment),Nt=c(),_($s.$$.fragment),Mt=c(),Ye=t("a"),Lt=c(),Q=t("h2"),xs=t("a"),Da=t("span"),_(ee.$$.fragment),Wn=c(),Aa=t("span"),Gn=n("Interleave"),Ot=c(),X=t("p"),Ue=t("a"),Kn=n("interleave_datasets()"),Qn=n(" can combine an "),Be=t("a"),Xn=n("IterableDataset"),Zn=n(" with other datasets. The combined dataset returns alternating examples from each of the original datasets."),Vt=c(),_(ae.$$.fragment),Ft=c(),ws=t("p"),sr=n("Define sampling probabilities from each of the original datasets for more control over how each of them are sampled and combined. Set the "),Ia=t("code"),er=n("probabilities"),ar=n(" argument with your desired sampling probabilities:"),Rt=c(),_(te.$$.fragment),Ht=c(),Y=t("p"),tr=n("Around 80% of the final dataset is made of the "),Ta=t("code"),lr=n("en_dataset"),nr=n(", and 20% of the "),Pa=t("code"),rr=n("fr_dataset"),or=n("."),Yt=c(),Z=t("h2"),ys=t("a"),qa=t("span"),_(le.$$.fragment),pr=c(),Sa=t("span"),ir=n("Rename, remove, and cast"),Ut=c(),Je=t("p"),hr=n("The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns and changing columns to a new set of features."),Bt=c(),ss=t("h3"),ks=t("a"),Ca=t("span"),_(ne.$$.fragment),cr=c(),za=t("span"),fr=n("Rename"),Jt=c(),Es=t("p"),dr=n("Use "),Na=t("code"),mr=n("IterableDataset.rename_column()"),ur=n("when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Wt=c(),Ds=t("p"),gr=n("Provide "),Ma=t("code"),_r=n("IterableDataset.rename_column()"),jr=n("with the name of the original column, and the new column name:"),Gt=c(),_(re.$$.fragment),Kt=c(),es=t("h3"),As=t("a"),La=t("span"),_(oe.$$.fragment),vr=c(),Oa=t("span"),br=n("Remove"),Qt=c(),Is=t("p"),$r=n("When you need to remove one or more columns, give "),We=t("a"),xr=n("IterableDataset.remove_columns()"),wr=n(" the name of the column to remove. Remove more than one column by providing a list of column names:"),Xt=c(),_(pe.$$.fragment),Zt=c(),as=t("h3"),Ts=t("a"),Va=t("span"),_(ie.$$.fragment),yr=c(),Fa=t("span"),kr=n("Cast"),sl=c(),M=t("p"),Ra=t("code"),Er=n("IterableDataset.cast()"),Dr=n("changes the feature type of one or more columns. This method takes your new "),Ha=t("code"),Ar=n("Features"),Ir=n(" as its argument. The following sample code shows how to change the feature types of "),Ya=t("code"),Tr=n("ClassLabel"),Pr=n(" and "),Ua=t("code"),qr=n("Value"),Sr=n(":"),el=c(),_(he.$$.fragment),al=c(),_(Ps.$$.fragment),tl=c(),qs=t("p"),Cr=n("Use "),Ge=t("a"),zr=n("Dataset.cast_column()"),Nr=n(" to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),ll=c(),_(ce.$$.fragment),nl=c(),ts=t("h2"),Ss=t("a"),Ba=t("span"),_(fe.$$.fragment),Mr=c(),Ja=t("span"),Lr=n("Map"),rl=c(),S=t("p"),Or=n("Similar to the "),Ke=t("a"),Vr=n("Dataset.map()"),Fr=n(" function for a regular "),Qe=t("a"),Rr=n("Dataset"),Hr=n(", \u{1F917}  Datasets features "),Xe=t("a"),Yr=n("IterableDataset.map()"),Ur=n(" for processing an "),Ze=t("a"),Br=n("IterableDataset"),Jr=n(`.
`),sa=t("a"),Wr=n("IterableDataset.map()"),Gr=n(" applies processing on-the-fly when examples are streamed."),ol=c(),ea=t("p"),Kr=n("It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),pl=c(),U=t("p"),Qr=n("The following example demonstrates how to tokenize a "),aa=t("a"),Xr=n("IterableDataset"),Zr=n(". The function needs to accept and output a "),Wa=t("code"),so=n("dict"),eo=n(":"),il=c(),_(de.$$.fragment),hl=c(),Cs=t("p"),ao=n("Next, apply this function to the dataset with "),ta=t("a"),to=n("IterableDataset.map()"),lo=n(":"),cl=c(),_(me.$$.fragment),fl=c(),zs=t("p"),no=n("Let\u2019s take a look at another example, except this time, you will remove a column with "),la=t("a"),ro=n("IterableDataset.map()"),oo=n(". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),dl=c(),B=t("p"),po=n("Specify the column to remove with the "),Ga=t("code"),io=n("remove_columns"),ho=n(" argument in "),na=t("a"),co=n("IterableDataset.map()"),fo=n(":"),ml=c(),_(ue.$$.fragment),ul=c(),ls=t("h3"),Ns=t("a"),Ka=t("span"),_(ge.$$.fragment),mo=c(),Qa=t("span"),uo=n("Batch processing"),gl=c(),R=t("p"),ra=t("a"),go=n("IterableDataset.map()"),_o=n(" also supports working with batches of examples. Operate on batches by setting "),Xa=t("code"),jo=n("batched=True"),vo=n(". The default batch size is 1000, but you can adjust it with the "),Za=t("code"),bo=n("batch_size"),$o=n(" argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),_l=c(),ns=t("h4"),Ms=t("a"),st=t("span"),_(_e.$$.fragment),xo=c(),et=t("span"),wo=n("Tokenization"),jl=c(),_(je.$$.fragment),vl=c(),_(Ls.$$.fragment),bl=c(),rs=t("h3"),Os=t("a"),at=t("span"),_(ve.$$.fragment),yo=c(),tt=t("span"),ko=n("Filter"),$l=c(),Vs=t("p"),Eo=n("You can filter rows in the dataset based on a predicate function using "),oa=t("a"),Do=n("Dataset.filter()"),Ao=n(". It returns rows that match a specified condition:"),xl=c(),_(be.$$.fragment),wl=c(),os=t("p"),pa=t("a"),Io=n("Dataset.filter()"),To=n(" can also filter by indices if you set "),lt=t("code"),Po=n("with_indices=True"),qo=n(":"),yl=c(),_($e.$$.fragment),kl=c(),ps=t("h2"),Fs=t("a"),nt=t("span"),_(xe.$$.fragment),So=c(),rt=t("span"),Co=n("Stream in a training loop"),El=c(),we=t("p"),ia=t("a"),zo=n("IterableDataset"),No=n(" can be integrated into a training loop. First, shuffle the dataset:"),Dl=c(),_(Rs.$$.fragment),this.h()},l(s){const p=Ti('[data-svelte="svelte-1phssyn"]',document.head);d=l(p,"META",{name:!0,content:!0}),p.forEach(e),w=f(s),m=l(s,"H1",{class:!0});var ye=o(m);y=l(ye,"A",{id:!0,class:!0,href:!0});var ot=o(y);k=l(ot,"SPAN",{});var pt=o(k);j(g.$$.fragment,pt),pt.forEach(e),ot.forEach(e),E=f(ye),u=l(ye,"SPAN",{});var it=o(u);D=r(it,"Stream"),it.forEach(e),ye.forEach(e),A=f(s),T=l(s,"P",{});var ht=o(T);N=r(ht,"Dataset streaming lets you get started with a dataset without waiting for the entire dataset to download. The data is downloaded progressively as you iterate over the dataset. This is especially helpful when:"),ht.forEach(e),hs=f(s),C=l(s,"UL",{});var ke=o(C);P=l(ke,"LI",{});var Vo=o(P);De=r(Vo,"You don\u2019t want to wait for an extremely large dataset to download."),Vo.forEach(e),Ae=f(ke),cs=l(ke,"LI",{});var Fo=o(cs);Ie=r(Fo,"The dataset size exceeds the amount of disk space on your computer."),Fo.forEach(e),ke.forEach(e),gt=f(s),J=l(s,"DIV",{class:!0});var Il=o(J);Te=l(Il,"IMG",{class:!0,src:!0}),Zl=f(Il),Pe=l(Il,"IMG",{class:!0,src:!0}),Il.forEach(e),_t=f(s),L=l(s,"P",{});var Hs=o(L);sn=r(Hs,"For example, the English split of the "),Bs=l(Hs,"A",{href:!0,rel:!0});var Ro=o(Bs);en=r(Ro,"OSCAR"),Ro.forEach(e),an=r(Hs," dataset is 1.2 terabytes, but you can use it instantly with streaming. Stream a dataset by setting "),ma=l(Hs,"CODE",{});var Ho=o(ma);tn=r(Ho,"streaming=True"),Ho.forEach(e),ln=r(Hs," in "),qe=l(Hs,"A",{href:!0});var Yo=o(qe);nn=r(Yo,"load_dataset()"),Yo.forEach(e),rn=r(Hs," as shown below:"),Hs.forEach(e),jt=f(s),j(Js.$$.fragment,s),vt=f(s),H=l(s,"P",{});var ha=o(H);on=r(ha,"Loading a dataset in streaming mode creates a new dataset type instance (instead of the classic "),Se=l(ha,"A",{href:!0});var Uo=o(Se);pn=r(Uo,"Dataset"),Uo.forEach(e),hn=r(ha," object), known as an "),Ce=l(ha,"A",{href:!0});var Bo=o(Ce);cn=r(Bo,"IterableDataset"),Bo.forEach(e),fn=r(ha,". This special type of dataset has its own set of processing methods shown below."),ha.forEach(e),bt=f(s),j(fs.$$.fragment,s),$t=f(s),W=l(s,"H2",{class:!0});var Tl=o(W);ds=l(Tl,"A",{id:!0,class:!0,href:!0});var Jo=o(ds);ua=l(Jo,"SPAN",{});var Wo=o(ua);j(Ws.$$.fragment,Wo),Wo.forEach(e),Jo.forEach(e),dn=f(Tl),ga=l(Tl,"SPAN",{});var Go=o(ga);mn=r(Go,"Shuffle"),Go.forEach(e),Tl.forEach(e),xt=f(s),O=l(s,"P",{});var Ys=o(O);un=r(Ys,"Like a regular "),ze=l(Ys,"A",{href:!0});var Ko=o(ze);gn=r(Ko,"Dataset"),Ko.forEach(e),_n=r(Ys," object, you can also shuffle a "),Ne=l(Ys,"A",{href:!0});var Qo=o(Ne);jn=r(Qo,"IterableDataset"),Qo.forEach(e),vn=r(Ys," with "),Me=l(Ys,"A",{href:!0});var Xo=o(Me);bn=r(Xo,"IterableDataset.shuffle()"),Xo.forEach(e),$n=r(Ys,"."),Ys.forEach(e),wt=f(s),V=l(s,"P",{});var Us=o(V);xn=r(Us,"The "),_a=l(Us,"CODE",{});var Zo=o(_a);wn=r(Zo,"buffer_size"),Zo.forEach(e),yn=r(Us," argument controls the size of the buffer to randomly sample examples from. Let\u2019s say your dataset has one million examples, and you set the "),ja=l(Us,"CODE",{});var sp=o(ja);kn=r(sp,"buffer_size"),sp.forEach(e),En=r(Us," to ten thousand. "),Le=l(Us,"A",{href:!0});var ep=o(Le);Dn=r(ep,"IterableDataset.shuffle()"),ep.forEach(e),An=r(Us," will randomly select examples from the first ten thousand examples in the buffer. Selected examples in the buffer are replaced with new examples. By default, the buffer size is 1,000."),Us.forEach(e),yt=f(s),j(Gs.$$.fragment,s),kt=f(s),j(ms.$$.fragment,s),Et=f(s),G=l(s,"H2",{class:!0});var Pl=o(G);us=l(Pl,"A",{id:!0,class:!0,href:!0});var ap=o(us);va=l(ap,"SPAN",{});var tp=o(va);j(Ks.$$.fragment,tp),tp.forEach(e),ap.forEach(e),In=f(Pl),ba=l(Pl,"SPAN",{});var lp=o(ba);Tn=r(lp,"Reshuffle"),lp.forEach(e),Pl.forEach(e),Dt=f(s),gs=l(s,"P",{});var ql=o(gs);Pn=r(ql,"Sometimes you may want to reshuffle the dataset after each epoch. This will require you to set a different seed for each epoch. Use "),$a=l(ql,"CODE",{});var np=o($a);qn=r(np,"IterableDataset.set_epoch()"),np.forEach(e),Sn=r(ql,"in between epochs to tell the dataset what epoch you\u2019re on."),ql.forEach(e),At=f(s),_s=l(s,"P",{});var Sl=o(_s);Cn=r(Sl,"Your seed effectively becomes: "),xa=l(Sl,"CODE",{});var rp=o(xa);zn=r(rp,"initial seed + current epoch"),rp.forEach(e),Nn=r(Sl,"."),Sl.forEach(e),It=f(s),j(Qs.$$.fragment,s),Tt=f(s),K=l(s,"H2",{class:!0});var Cl=o(K);js=l(Cl,"A",{id:!0,class:!0,href:!0});var op=o(js);wa=l(op,"SPAN",{});var pp=o(wa);j(Xs.$$.fragment,pp),pp.forEach(e),op.forEach(e),Mn=f(Cl),ya=l(Cl,"SPAN",{});var ip=o(ya);Ln=r(ip,"Split dataset"),ip.forEach(e),Cl.forEach(e),Pt=f(s),Oe=l(s,"P",{});var hp=o(Oe);On=r(hp,"You can split your dataset one of two ways:"),hp.forEach(e),qt=f(s),Ve=l(s,"UL",{});var cp=o(Ve);vs=l(cp,"LI",{});var ct=o(vs);Fe=l(ct,"A",{href:!0});var fp=o(Fe);Vn=r(fp,"IterableDataset.take()"),fp.forEach(e),Fn=r(ct," returns the first "),ka=l(ct,"CODE",{});var dp=o(ka);Rn=r(dp,"n"),dp.forEach(e),Hn=r(ct," examples in a dataset:"),ct.forEach(e),cp.forEach(e),St=f(s),j(Zs.$$.fragment,s),Ct=f(s),Re=l(s,"UL",{});var mp=o(Re);bs=l(mp,"LI",{});var ft=o(bs);He=l(ft,"A",{href:!0});var up=o(He);Yn=r(up,"IterableDataset.skip()"),up.forEach(e),Un=r(ft," omits the first "),Ea=l(ft,"CODE",{});var gp=o(Ea);Bn=r(gp,"n"),gp.forEach(e),Jn=r(ft," examples in a dataset and returns the remaining examples:"),ft.forEach(e),mp.forEach(e),zt=f(s),j(se.$$.fragment,s),Nt=f(s),j($s.$$.fragment,s),Mt=f(s),Ye=l(s,"A",{id:!0}),o(Ye).forEach(e),Lt=f(s),Q=l(s,"H2",{class:!0});var zl=o(Q);xs=l(zl,"A",{id:!0,class:!0,href:!0});var _p=o(xs);Da=l(_p,"SPAN",{});var jp=o(Da);j(ee.$$.fragment,jp),jp.forEach(e),_p.forEach(e),Wn=f(zl),Aa=l(zl,"SPAN",{});var vp=o(Aa);Gn=r(vp,"Interleave"),vp.forEach(e),zl.forEach(e),Ot=f(s),X=l(s,"P",{});var dt=o(X);Ue=l(dt,"A",{href:!0});var bp=o(Ue);Kn=r(bp,"interleave_datasets()"),bp.forEach(e),Qn=r(dt," can combine an "),Be=l(dt,"A",{href:!0});var $p=o(Be);Xn=r($p,"IterableDataset"),$p.forEach(e),Zn=r(dt," with other datasets. The combined dataset returns alternating examples from each of the original datasets."),dt.forEach(e),Vt=f(s),j(ae.$$.fragment,s),Ft=f(s),ws=l(s,"P",{});var Nl=o(ws);sr=r(Nl,"Define sampling probabilities from each of the original datasets for more control over how each of them are sampled and combined. Set the "),Ia=l(Nl,"CODE",{});var xp=o(Ia);er=r(xp,"probabilities"),xp.forEach(e),ar=r(Nl," argument with your desired sampling probabilities:"),Nl.forEach(e),Rt=f(s),j(te.$$.fragment,s),Ht=f(s),Y=l(s,"P",{});var ca=o(Y);tr=r(ca,"Around 80% of the final dataset is made of the "),Ta=l(ca,"CODE",{});var wp=o(Ta);lr=r(wp,"en_dataset"),wp.forEach(e),nr=r(ca,", and 20% of the "),Pa=l(ca,"CODE",{});var yp=o(Pa);rr=r(yp,"fr_dataset"),yp.forEach(e),or=r(ca,"."),ca.forEach(e),Yt=f(s),Z=l(s,"H2",{class:!0});var Ml=o(Z);ys=l(Ml,"A",{id:!0,class:!0,href:!0});var kp=o(ys);qa=l(kp,"SPAN",{});var Ep=o(qa);j(le.$$.fragment,Ep),Ep.forEach(e),kp.forEach(e),pr=f(Ml),Sa=l(Ml,"SPAN",{});var Dp=o(Sa);ir=r(Dp,"Rename, remove, and cast"),Dp.forEach(e),Ml.forEach(e),Ut=f(s),Je=l(s,"P",{});var Ap=o(Je);hr=r(Ap,"The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns and changing columns to a new set of features."),Ap.forEach(e),Bt=f(s),ss=l(s,"H3",{class:!0});var Ll=o(ss);ks=l(Ll,"A",{id:!0,class:!0,href:!0});var Ip=o(ks);Ca=l(Ip,"SPAN",{});var Tp=o(Ca);j(ne.$$.fragment,Tp),Tp.forEach(e),Ip.forEach(e),cr=f(Ll),za=l(Ll,"SPAN",{});var Pp=o(za);fr=r(Pp,"Rename"),Pp.forEach(e),Ll.forEach(e),Jt=f(s),Es=l(s,"P",{});var Ol=o(Es);dr=r(Ol,"Use "),Na=l(Ol,"CODE",{});var qp=o(Na);mr=r(qp,"IterableDataset.rename_column()"),qp.forEach(e),ur=r(Ol,"when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Ol.forEach(e),Wt=f(s),Ds=l(s,"P",{});var Vl=o(Ds);gr=r(Vl,"Provide "),Ma=l(Vl,"CODE",{});var Sp=o(Ma);_r=r(Sp,"IterableDataset.rename_column()"),Sp.forEach(e),jr=r(Vl,"with the name of the original column, and the new column name:"),Vl.forEach(e),Gt=f(s),j(re.$$.fragment,s),Kt=f(s),es=l(s,"H3",{class:!0});var Fl=o(es);As=l(Fl,"A",{id:!0,class:!0,href:!0});var Cp=o(As);La=l(Cp,"SPAN",{});var zp=o(La);j(oe.$$.fragment,zp),zp.forEach(e),Cp.forEach(e),vr=f(Fl),Oa=l(Fl,"SPAN",{});var Np=o(Oa);br=r(Np,"Remove"),Np.forEach(e),Fl.forEach(e),Qt=f(s),Is=l(s,"P",{});var Rl=o(Is);$r=r(Rl,"When you need to remove one or more columns, give "),We=l(Rl,"A",{href:!0});var Mp=o(We);xr=r(Mp,"IterableDataset.remove_columns()"),Mp.forEach(e),wr=r(Rl," the name of the column to remove. Remove more than one column by providing a list of column names:"),Rl.forEach(e),Xt=f(s),j(pe.$$.fragment,s),Zt=f(s),as=l(s,"H3",{class:!0});var Hl=o(as);Ts=l(Hl,"A",{id:!0,class:!0,href:!0});var Lp=o(Ts);Va=l(Lp,"SPAN",{});var Op=o(Va);j(ie.$$.fragment,Op),Op.forEach(e),Lp.forEach(e),yr=f(Hl),Fa=l(Hl,"SPAN",{});var Vp=o(Fa);kr=r(Vp,"Cast"),Vp.forEach(e),Hl.forEach(e),sl=f(s),M=l(s,"P",{});var is=o(M);Ra=l(is,"CODE",{});var Fp=o(Ra);Er=r(Fp,"IterableDataset.cast()"),Fp.forEach(e),Dr=r(is,"changes the feature type of one or more columns. This method takes your new "),Ha=l(is,"CODE",{});var Rp=o(Ha);Ar=r(Rp,"Features"),Rp.forEach(e),Ir=r(is," as its argument. The following sample code shows how to change the feature types of "),Ya=l(is,"CODE",{});var Hp=o(Ya);Tr=r(Hp,"ClassLabel"),Hp.forEach(e),Pr=r(is," and "),Ua=l(is,"CODE",{});var Yp=o(Ua);qr=r(Yp,"Value"),Yp.forEach(e),Sr=r(is,":"),is.forEach(e),el=f(s),j(he.$$.fragment,s),al=f(s),j(Ps.$$.fragment,s),tl=f(s),qs=l(s,"P",{});var Yl=o(qs);Cr=r(Yl,"Use "),Ge=l(Yl,"A",{href:!0});var Up=o(Ge);zr=r(Up,"Dataset.cast_column()"),Up.forEach(e),Nr=r(Yl," to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),Yl.forEach(e),ll=f(s),j(ce.$$.fragment,s),nl=f(s),ts=l(s,"H2",{class:!0});var Ul=o(ts);Ss=l(Ul,"A",{id:!0,class:!0,href:!0});var Bp=o(Ss);Ba=l(Bp,"SPAN",{});var Jp=o(Ba);j(fe.$$.fragment,Jp),Jp.forEach(e),Bp.forEach(e),Mr=f(Ul),Ja=l(Ul,"SPAN",{});var Wp=o(Ja);Lr=r(Wp,"Map"),Wp.forEach(e),Ul.forEach(e),rl=f(s),S=l(s,"P",{});var F=o(S);Or=r(F,"Similar to the "),Ke=l(F,"A",{href:!0});var Gp=o(Ke);Vr=r(Gp,"Dataset.map()"),Gp.forEach(e),Fr=r(F," function for a regular "),Qe=l(F,"A",{href:!0});var Kp=o(Qe);Rr=r(Kp,"Dataset"),Kp.forEach(e),Hr=r(F,", \u{1F917}  Datasets features "),Xe=l(F,"A",{href:!0});var Qp=o(Xe);Yr=r(Qp,"IterableDataset.map()"),Qp.forEach(e),Ur=r(F," for processing an "),Ze=l(F,"A",{href:!0});var Xp=o(Ze);Br=r(Xp,"IterableDataset"),Xp.forEach(e),Jr=r(F,`.
`),sa=l(F,"A",{href:!0});var Zp=o(sa);Wr=r(Zp,"IterableDataset.map()"),Zp.forEach(e),Gr=r(F," applies processing on-the-fly when examples are streamed."),F.forEach(e),ol=f(s),ea=l(s,"P",{});var si=o(ea);Kr=r(si,"It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),si.forEach(e),pl=f(s),U=l(s,"P",{});var fa=o(U);Qr=r(fa,"The following example demonstrates how to tokenize a "),aa=l(fa,"A",{href:!0});var ei=o(aa);Xr=r(ei,"IterableDataset"),ei.forEach(e),Zr=r(fa,". The function needs to accept and output a "),Wa=l(fa,"CODE",{});var ai=o(Wa);so=r(ai,"dict"),ai.forEach(e),eo=r(fa,":"),fa.forEach(e),il=f(s),j(de.$$.fragment,s),hl=f(s),Cs=l(s,"P",{});var Bl=o(Cs);ao=r(Bl,"Next, apply this function to the dataset with "),ta=l(Bl,"A",{href:!0});var ti=o(ta);to=r(ti,"IterableDataset.map()"),ti.forEach(e),lo=r(Bl,":"),Bl.forEach(e),cl=f(s),j(me.$$.fragment,s),fl=f(s),zs=l(s,"P",{});var Jl=o(zs);no=r(Jl,"Let\u2019s take a look at another example, except this time, you will remove a column with "),la=l(Jl,"A",{href:!0});var li=o(la);ro=r(li,"IterableDataset.map()"),li.forEach(e),oo=r(Jl,". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),Jl.forEach(e),dl=f(s),B=l(s,"P",{});var da=o(B);po=r(da,"Specify the column to remove with the "),Ga=l(da,"CODE",{});var ni=o(Ga);io=r(ni,"remove_columns"),ni.forEach(e),ho=r(da," argument in "),na=l(da,"A",{href:!0});var ri=o(na);co=r(ri,"IterableDataset.map()"),ri.forEach(e),fo=r(da,":"),da.forEach(e),ml=f(s),j(ue.$$.fragment,s),ul=f(s),ls=l(s,"H3",{class:!0});var Wl=o(ls);Ns=l(Wl,"A",{id:!0,class:!0,href:!0});var oi=o(Ns);Ka=l(oi,"SPAN",{});var pi=o(Ka);j(ge.$$.fragment,pi),pi.forEach(e),oi.forEach(e),mo=f(Wl),Qa=l(Wl,"SPAN",{});var ii=o(Qa);uo=r(ii,"Batch processing"),ii.forEach(e),Wl.forEach(e),gl=f(s),R=l(s,"P",{});var Ee=o(R);ra=l(Ee,"A",{href:!0});var hi=o(ra);go=r(hi,"IterableDataset.map()"),hi.forEach(e),_o=r(Ee," also supports working with batches of examples. Operate on batches by setting "),Xa=l(Ee,"CODE",{});var ci=o(Xa);jo=r(ci,"batched=True"),ci.forEach(e),vo=r(Ee,". The default batch size is 1000, but you can adjust it with the "),Za=l(Ee,"CODE",{});var fi=o(Za);bo=r(fi,"batch_size"),fi.forEach(e),$o=r(Ee," argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),Ee.forEach(e),_l=f(s),ns=l(s,"H4",{class:!0});var Gl=o(ns);Ms=l(Gl,"A",{id:!0,class:!0,href:!0});var di=o(Ms);st=l(di,"SPAN",{});var mi=o(st);j(_e.$$.fragment,mi),mi.forEach(e),di.forEach(e),xo=f(Gl),et=l(Gl,"SPAN",{});var ui=o(et);wo=r(ui,"Tokenization"),ui.forEach(e),Gl.forEach(e),jl=f(s),j(je.$$.fragment,s),vl=f(s),j(Ls.$$.fragment,s),bl=f(s),rs=l(s,"H3",{class:!0});var Kl=o(rs);Os=l(Kl,"A",{id:!0,class:!0,href:!0});var gi=o(Os);at=l(gi,"SPAN",{});var _i=o(at);j(ve.$$.fragment,_i),_i.forEach(e),gi.forEach(e),yo=f(Kl),tt=l(Kl,"SPAN",{});var ji=o(tt);ko=r(ji,"Filter"),ji.forEach(e),Kl.forEach(e),$l=f(s),Vs=l(s,"P",{});var Ql=o(Vs);Eo=r(Ql,"You can filter rows in the dataset based on a predicate function using "),oa=l(Ql,"A",{href:!0});var vi=o(oa);Do=r(vi,"Dataset.filter()"),vi.forEach(e),Ao=r(Ql,". It returns rows that match a specified condition:"),Ql.forEach(e),xl=f(s),j(be.$$.fragment,s),wl=f(s),os=l(s,"P",{});var mt=o(os);pa=l(mt,"A",{href:!0});var bi=o(pa);Io=r(bi,"Dataset.filter()"),bi.forEach(e),To=r(mt," can also filter by indices if you set "),lt=l(mt,"CODE",{});var $i=o(lt);Po=r($i,"with_indices=True"),$i.forEach(e),qo=r(mt,":"),mt.forEach(e),yl=f(s),j($e.$$.fragment,s),kl=f(s),ps=l(s,"H2",{class:!0});var Xl=o(ps);Fs=l(Xl,"A",{id:!0,class:!0,href:!0});var xi=o(Fs);nt=l(xi,"SPAN",{});var wi=o(nt);j(xe.$$.fragment,wi),wi.forEach(e),xi.forEach(e),So=f(Xl),rt=l(Xl,"SPAN",{});var yi=o(rt);Co=r(yi,"Stream in a training loop"),yi.forEach(e),Xl.forEach(e),El=f(s),we=l(s,"P",{});var Mo=o(we);ia=l(Mo,"A",{href:!0});var ki=o(ia);zo=r(ki,"IterableDataset"),ki.forEach(e),No=r(Mo," can be integrated into a training loop. First, shuffle the dataset:"),Mo.forEach(e),Dl=f(s),j(Rs.$$.fragment,s),this.h()},h(){h(d,"name","hf:doc:metadata"),h(d,"content",JSON.stringify(Hi)),h(y,"id","stream"),h(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(y,"href","#stream"),h(m,"class","relative group"),h(Te,"class","block dark:hidden"),Ei(Te.src,Lo="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/datasets/streaming.gif")||h(Te,"src",Lo),h(Pe,"class","hidden dark:block"),Ei(Pe.src,Oo="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/datasets/streaming-dark.gif")||h(Pe,"src",Oo),h(J,"class","flex justify-center"),h(Bs,"href","https://huggingface.co/datasets/oscar"),h(Bs,"rel","nofollow"),h(qe,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_dataset"),h(Se,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),h(Ce,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(ds,"id","shuffle"),h(ds,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ds,"href","#shuffle"),h(W,"class","relative group"),h(ze,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),h(Ne,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(Me,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.shuffle"),h(Le,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.shuffle"),h(us,"id","reshuffle"),h(us,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(us,"href","#reshuffle"),h(G,"class","relative group"),h(js,"id","split-dataset"),h(js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(js,"href","#split-dataset"),h(K,"class","relative group"),h(Fe,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.take"),h(He,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.skip"),h(Ye,"id","interleave_datasets"),h(xs,"id","interleave"),h(xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(xs,"href","#interleave"),h(Q,"class","relative group"),h(Ue,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.interleave_datasets"),h(Be,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(ys,"id","rename-remove-and-cast"),h(ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ys,"href","#rename-remove-and-cast"),h(Z,"class","relative group"),h(ks,"id","rename"),h(ks,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ks,"href","#rename"),h(ss,"class","relative group"),h(As,"id","remove"),h(As,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(As,"href","#remove"),h(es,"class","relative group"),h(We,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.remove_columns"),h(Ts,"id","cast"),h(Ts,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ts,"href","#cast"),h(as,"class","relative group"),h(Ge,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.cast_column"),h(Ss,"id","map"),h(Ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ss,"href","#map"),h(ts,"class","relative group"),h(Ke,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),h(Qe,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),h(Xe,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(Ze,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(sa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(aa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(ta,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(la,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(na,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(Ns,"id","batch-processing"),h(Ns,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ns,"href","#batch-processing"),h(ls,"class","relative group"),h(ra,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(Ms,"id","tokenization"),h(Ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ms,"href","#tokenization"),h(ns,"class","relative group"),h(Os,"id","filter"),h(Os,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Os,"href","#filter"),h(rs,"class","relative group"),h(oa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.filter"),h(pa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.filter"),h(Fs,"id","stream-in-a-training-loop"),h(Fs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Fs,"href","#stream-in-a-training-loop"),h(ps,"class","relative group"),h(ia,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset")},m(s,p){a(document.head,d),i(s,w,p),i(s,m,p),a(m,y),a(y,k),v(g,k,null),a(m,E),a(m,u),a(u,D),i(s,A,p),i(s,T,p),a(T,N),i(s,hs,p),i(s,C,p),a(C,P),a(P,De),a(C,Ae),a(C,cs),a(cs,Ie),i(s,gt,p),i(s,J,p),a(J,Te),a(J,Zl),a(J,Pe),i(s,_t,p),i(s,L,p),a(L,sn),a(L,Bs),a(Bs,en),a(L,an),a(L,ma),a(ma,tn),a(L,ln),a(L,qe),a(qe,nn),a(L,rn),i(s,jt,p),v(Js,s,p),i(s,vt,p),i(s,H,p),a(H,on),a(H,Se),a(Se,pn),a(H,hn),a(H,Ce),a(Ce,cn),a(H,fn),i(s,bt,p),v(fs,s,p),i(s,$t,p),i(s,W,p),a(W,ds),a(ds,ua),v(Ws,ua,null),a(W,dn),a(W,ga),a(ga,mn),i(s,xt,p),i(s,O,p),a(O,un),a(O,ze),a(ze,gn),a(O,_n),a(O,Ne),a(Ne,jn),a(O,vn),a(O,Me),a(Me,bn),a(O,$n),i(s,wt,p),i(s,V,p),a(V,xn),a(V,_a),a(_a,wn),a(V,yn),a(V,ja),a(ja,kn),a(V,En),a(V,Le),a(Le,Dn),a(V,An),i(s,yt,p),v(Gs,s,p),i(s,kt,p),v(ms,s,p),i(s,Et,p),i(s,G,p),a(G,us),a(us,va),v(Ks,va,null),a(G,In),a(G,ba),a(ba,Tn),i(s,Dt,p),i(s,gs,p),a(gs,Pn),a(gs,$a),a($a,qn),a(gs,Sn),i(s,At,p),i(s,_s,p),a(_s,Cn),a(_s,xa),a(xa,zn),a(_s,Nn),i(s,It,p),v(Qs,s,p),i(s,Tt,p),i(s,K,p),a(K,js),a(js,wa),v(Xs,wa,null),a(K,Mn),a(K,ya),a(ya,Ln),i(s,Pt,p),i(s,Oe,p),a(Oe,On),i(s,qt,p),i(s,Ve,p),a(Ve,vs),a(vs,Fe),a(Fe,Vn),a(vs,Fn),a(vs,ka),a(ka,Rn),a(vs,Hn),i(s,St,p),v(Zs,s,p),i(s,Ct,p),i(s,Re,p),a(Re,bs),a(bs,He),a(He,Yn),a(bs,Un),a(bs,Ea),a(Ea,Bn),a(bs,Jn),i(s,zt,p),v(se,s,p),i(s,Nt,p),v($s,s,p),i(s,Mt,p),i(s,Ye,p),i(s,Lt,p),i(s,Q,p),a(Q,xs),a(xs,Da),v(ee,Da,null),a(Q,Wn),a(Q,Aa),a(Aa,Gn),i(s,Ot,p),i(s,X,p),a(X,Ue),a(Ue,Kn),a(X,Qn),a(X,Be),a(Be,Xn),a(X,Zn),i(s,Vt,p),v(ae,s,p),i(s,Ft,p),i(s,ws,p),a(ws,sr),a(ws,Ia),a(Ia,er),a(ws,ar),i(s,Rt,p),v(te,s,p),i(s,Ht,p),i(s,Y,p),a(Y,tr),a(Y,Ta),a(Ta,lr),a(Y,nr),a(Y,Pa),a(Pa,rr),a(Y,or),i(s,Yt,p),i(s,Z,p),a(Z,ys),a(ys,qa),v(le,qa,null),a(Z,pr),a(Z,Sa),a(Sa,ir),i(s,Ut,p),i(s,Je,p),a(Je,hr),i(s,Bt,p),i(s,ss,p),a(ss,ks),a(ks,Ca),v(ne,Ca,null),a(ss,cr),a(ss,za),a(za,fr),i(s,Jt,p),i(s,Es,p),a(Es,dr),a(Es,Na),a(Na,mr),a(Es,ur),i(s,Wt,p),i(s,Ds,p),a(Ds,gr),a(Ds,Ma),a(Ma,_r),a(Ds,jr),i(s,Gt,p),v(re,s,p),i(s,Kt,p),i(s,es,p),a(es,As),a(As,La),v(oe,La,null),a(es,vr),a(es,Oa),a(Oa,br),i(s,Qt,p),i(s,Is,p),a(Is,$r),a(Is,We),a(We,xr),a(Is,wr),i(s,Xt,p),v(pe,s,p),i(s,Zt,p),i(s,as,p),a(as,Ts),a(Ts,Va),v(ie,Va,null),a(as,yr),a(as,Fa),a(Fa,kr),i(s,sl,p),i(s,M,p),a(M,Ra),a(Ra,Er),a(M,Dr),a(M,Ha),a(Ha,Ar),a(M,Ir),a(M,Ya),a(Ya,Tr),a(M,Pr),a(M,Ua),a(Ua,qr),a(M,Sr),i(s,el,p),v(he,s,p),i(s,al,p),v(Ps,s,p),i(s,tl,p),i(s,qs,p),a(qs,Cr),a(qs,Ge),a(Ge,zr),a(qs,Nr),i(s,ll,p),v(ce,s,p),i(s,nl,p),i(s,ts,p),a(ts,Ss),a(Ss,Ba),v(fe,Ba,null),a(ts,Mr),a(ts,Ja),a(Ja,Lr),i(s,rl,p),i(s,S,p),a(S,Or),a(S,Ke),a(Ke,Vr),a(S,Fr),a(S,Qe),a(Qe,Rr),a(S,Hr),a(S,Xe),a(Xe,Yr),a(S,Ur),a(S,Ze),a(Ze,Br),a(S,Jr),a(S,sa),a(sa,Wr),a(S,Gr),i(s,ol,p),i(s,ea,p),a(ea,Kr),i(s,pl,p),i(s,U,p),a(U,Qr),a(U,aa),a(aa,Xr),a(U,Zr),a(U,Wa),a(Wa,so),a(U,eo),i(s,il,p),v(de,s,p),i(s,hl,p),i(s,Cs,p),a(Cs,ao),a(Cs,ta),a(ta,to),a(Cs,lo),i(s,cl,p),v(me,s,p),i(s,fl,p),i(s,zs,p),a(zs,no),a(zs,la),a(la,ro),a(zs,oo),i(s,dl,p),i(s,B,p),a(B,po),a(B,Ga),a(Ga,io),a(B,ho),a(B,na),a(na,co),a(B,fo),i(s,ml,p),v(ue,s,p),i(s,ul,p),i(s,ls,p),a(ls,Ns),a(Ns,Ka),v(ge,Ka,null),a(ls,mo),a(ls,Qa),a(Qa,uo),i(s,gl,p),i(s,R,p),a(R,ra),a(ra,go),a(R,_o),a(R,Xa),a(Xa,jo),a(R,vo),a(R,Za),a(Za,bo),a(R,$o),i(s,_l,p),i(s,ns,p),a(ns,Ms),a(Ms,st),v(_e,st,null),a(ns,xo),a(ns,et),a(et,wo),i(s,jl,p),v(je,s,p),i(s,vl,p),v(Ls,s,p),i(s,bl,p),i(s,rs,p),a(rs,Os),a(Os,at),v(ve,at,null),a(rs,yo),a(rs,tt),a(tt,ko),i(s,$l,p),i(s,Vs,p),a(Vs,Eo),a(Vs,oa),a(oa,Do),a(Vs,Ao),i(s,xl,p),v(be,s,p),i(s,wl,p),i(s,os,p),a(os,pa),a(pa,Io),a(os,To),a(os,lt),a(lt,Po),a(os,qo),i(s,yl,p),v($e,s,p),i(s,kl,p),i(s,ps,p),a(ps,Fs),a(Fs,nt),v(xe,nt,null),a(ps,So),a(ps,rt),a(rt,Co),i(s,El,p),i(s,we,p),a(we,ia),a(ia,zo),a(we,No),i(s,Dl,p),v(Rs,s,p),Al=!0},p(s,[p]){const ye={};p&2&&(ye.$$scope={dirty:p,ctx:s}),fs.$set(ye);const ot={};p&2&&(ot.$$scope={dirty:p,ctx:s}),ms.$set(ot);const pt={};p&2&&(pt.$$scope={dirty:p,ctx:s}),$s.$set(pt);const it={};p&2&&(it.$$scope={dirty:p,ctx:s}),Ps.$set(it);const ht={};p&2&&(ht.$$scope={dirty:p,ctx:s}),Ls.$set(ht);const ke={};p&2&&(ke.$$scope={dirty:p,ctx:s}),Rs.$set(ke)},i(s){Al||(b(g.$$.fragment,s),b(Js.$$.fragment,s),b(fs.$$.fragment,s),b(Ws.$$.fragment,s),b(Gs.$$.fragment,s),b(ms.$$.fragment,s),b(Ks.$$.fragment,s),b(Qs.$$.fragment,s),b(Xs.$$.fragment,s),b(Zs.$$.fragment,s),b(se.$$.fragment,s),b($s.$$.fragment,s),b(ee.$$.fragment,s),b(ae.$$.fragment,s),b(te.$$.fragment,s),b(le.$$.fragment,s),b(ne.$$.fragment,s),b(re.$$.fragment,s),b(oe.$$.fragment,s),b(pe.$$.fragment,s),b(ie.$$.fragment,s),b(he.$$.fragment,s),b(Ps.$$.fragment,s),b(ce.$$.fragment,s),b(fe.$$.fragment,s),b(de.$$.fragment,s),b(me.$$.fragment,s),b(ue.$$.fragment,s),b(ge.$$.fragment,s),b(_e.$$.fragment,s),b(je.$$.fragment,s),b(Ls.$$.fragment,s),b(ve.$$.fragment,s),b(be.$$.fragment,s),b($e.$$.fragment,s),b(xe.$$.fragment,s),b(Rs.$$.fragment,s),Al=!0)},o(s){$(g.$$.fragment,s),$(Js.$$.fragment,s),$(fs.$$.fragment,s),$(Ws.$$.fragment,s),$(Gs.$$.fragment,s),$(ms.$$.fragment,s),$(Ks.$$.fragment,s),$(Qs.$$.fragment,s),$(Xs.$$.fragment,s),$(Zs.$$.fragment,s),$(se.$$.fragment,s),$($s.$$.fragment,s),$(ee.$$.fragment,s),$(ae.$$.fragment,s),$(te.$$.fragment,s),$(le.$$.fragment,s),$(ne.$$.fragment,s),$(re.$$.fragment,s),$(oe.$$.fragment,s),$(pe.$$.fragment,s),$(ie.$$.fragment,s),$(he.$$.fragment,s),$(Ps.$$.fragment,s),$(ce.$$.fragment,s),$(fe.$$.fragment,s),$(de.$$.fragment,s),$(me.$$.fragment,s),$(ue.$$.fragment,s),$(ge.$$.fragment,s),$(_e.$$.fragment,s),$(je.$$.fragment,s),$(Ls.$$.fragment,s),$(ve.$$.fragment,s),$(be.$$.fragment,s),$($e.$$.fragment,s),$(xe.$$.fragment,s),$(Rs.$$.fragment,s),Al=!1},d(s){e(d),s&&e(w),s&&e(m),x(g),s&&e(A),s&&e(T),s&&e(hs),s&&e(C),s&&e(gt),s&&e(J),s&&e(_t),s&&e(L),s&&e(jt),x(Js,s),s&&e(vt),s&&e(H),s&&e(bt),x(fs,s),s&&e($t),s&&e(W),x(Ws),s&&e(xt),s&&e(O),s&&e(wt),s&&e(V),s&&e(yt),x(Gs,s),s&&e(kt),x(ms,s),s&&e(Et),s&&e(G),x(Ks),s&&e(Dt),s&&e(gs),s&&e(At),s&&e(_s),s&&e(It),x(Qs,s),s&&e(Tt),s&&e(K),x(Xs),s&&e(Pt),s&&e(Oe),s&&e(qt),s&&e(Ve),s&&e(St),x(Zs,s),s&&e(Ct),s&&e(Re),s&&e(zt),x(se,s),s&&e(Nt),x($s,s),s&&e(Mt),s&&e(Ye),s&&e(Lt),s&&e(Q),x(ee),s&&e(Ot),s&&e(X),s&&e(Vt),x(ae,s),s&&e(Ft),s&&e(ws),s&&e(Rt),x(te,s),s&&e(Ht),s&&e(Y),s&&e(Yt),s&&e(Z),x(le),s&&e(Ut),s&&e(Je),s&&e(Bt),s&&e(ss),x(ne),s&&e(Jt),s&&e(Es),s&&e(Wt),s&&e(Ds),s&&e(Gt),x(re,s),s&&e(Kt),s&&e(es),x(oe),s&&e(Qt),s&&e(Is),s&&e(Xt),x(pe,s),s&&e(Zt),s&&e(as),x(ie),s&&e(sl),s&&e(M),s&&e(el),x(he,s),s&&e(al),x(Ps,s),s&&e(tl),s&&e(qs),s&&e(ll),x(ce,s),s&&e(nl),s&&e(ts),x(fe),s&&e(rl),s&&e(S),s&&e(ol),s&&e(ea),s&&e(pl),s&&e(U),s&&e(il),x(de,s),s&&e(hl),s&&e(Cs),s&&e(cl),x(me,s),s&&e(fl),s&&e(zs),s&&e(dl),s&&e(B),s&&e(ml),x(ue,s),s&&e(ul),s&&e(ls),x(ge),s&&e(gl),s&&e(R),s&&e(_l),s&&e(ns),x(_e),s&&e(jl),x(je,s),s&&e(vl),x(Ls,s),s&&e(bl),s&&e(rs),x(ve),s&&e($l),s&&e(Vs),s&&e(xl),x(be,s),s&&e(wl),s&&e(os),s&&e(yl),x($e,s),s&&e(kl),s&&e(ps),x(xe),s&&e(El),s&&e(we),s&&e(Dl),x(Rs,s)}}}const Hi={local:"stream",sections:[{local:"shuffle",title:"Shuffle"},{local:"reshuffle",title:"Reshuffle"},{local:"split-dataset",title:"Split dataset"},{local:"interleave",title:"Interleave"},{local:"rename-remove-and-cast",sections:[{local:"rename",title:"Rename"},{local:"remove",title:"Remove"},{local:"cast",title:"Cast"}],title:"Rename, remove, and cast"},{local:"map",sections:[{local:"batch-processing",sections:[{local:"tokenization",title:"Tokenization"}],title:"Batch processing"},{local:"filter",title:"Filter"}],title:"Map"},{local:"stream-in-a-training-loop",title:"Stream in a training loop"}],title:"Stream"};function Yi(q){return Pi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Qi extends Di{constructor(d){super();Ai(this,d,Yi,Ri,Ii,{})}}export{Qi as default,Hi as metadata};
