import{S as Rj,i as Ij,s as Lj,e as t,k as h,w as f,t as r,M as Mj,c as n,d as e,m as c,a as l,x as u,h as p,b as m,F as a,g as i,y as g,q as _,o as j,B as b}from"../chunks/vendor-e67aec41.js";import{T as Mn}from"../chunks/Tip-76459d1c.js";import{I as D}from"../chunks/IconCopyLink-ffd7f84e.js";import{C as w}from"../chunks/CodeBlock-e2bcf023.js";function Bj(z){let d,k,v,$,E;return{c(){d=t("p"),k=r("All the processing methods in this guide return a new "),v=t("a"),$=r("datasets.Dataset"),E=r(". Modification is not done in-place. Be careful about overriding your previous dataset!"),this.h()},l(x){d=n(x,"P",{});var y=l(d);k=p(y,"All the processing methods in this guide return a new "),v=n(y,"A",{href:!0});var A=l(v);$=p(A,"datasets.Dataset"),A.forEach(e),E=p(y,". Modification is not done in-place. Be careful about overriding your previous dataset!"),y.forEach(e),this.h()},h(){m(v,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset")},m(x,y){i(x,d,y),a(d,k),a(d,v),a(v,$),a(d,E)},d(x){x&&e(d)}}}function Uj(z){let d,k,v,$,E,x,y,A;return{c(){d=t("p"),k=r("Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),v=t("code"),$=r("Value('int32')"),E=r(" to "),x=t("code"),y=r("Value('bool')"),A=r(" if the original column only contains ones and zeros.")},l(C){d=n(C,"P",{});var q=l(d);k=p(q,"Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),v=n(q,"CODE",{});var L=l(v);$=p(L,"Value('int32')"),L.forEach(e),E=p(q," to "),x=n(q,"CODE",{});var M=l(x);y=p(M,"Value('bool')"),M.forEach(e),A=p(q," if the original column only contains ones and zeros."),q.forEach(e)},m(C,q){i(C,d,q),a(d,k),a(d,v),a(v,$),a(d,E),a(d,x),a(x,y),a(d,A)},d(C){C&&e(d)}}}function Vj(z){let d,k,v,$,E;return{c(){d=t("p"),k=r("\u{1F917} Datasets also has a "),v=t("a"),$=r("datasets.Dataset.remove_columns()"),E=r(" method that is functionally identical, but faster, because it doesn\u2019t copy the data of the remaining columns."),this.h()},l(x){d=n(x,"P",{});var y=l(d);k=p(y,"\u{1F917} Datasets also has a "),v=n(y,"A",{href:!0});var A=l(v);$=p(A,"datasets.Dataset.remove_columns()"),A.forEach(e),E=p(y," method that is functionally identical, but faster, because it doesn\u2019t copy the data of the remaining columns."),y.forEach(e),this.h()},h(){m(v,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.remove_columns")},m(x,y){i(x,d,y),a(d,k),a(d,v),a(v,$),a(d,E)},d(x){x&&e(d)}}}function Hj(z){let d,k,v,$,E,x,y,A,C,q,L,M,Ms,Q,X,Bs,T,U,Ha,Ya;return{c(){d=t("p"),k=r("You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as interleaving, and you can use it with "),v=t("a"),$=r("datasets.interleave_datasets()"),E=r(". Both "),x=t("a"),y=r("datasets.interleave_datasets()"),A=r(" and "),C=t("a"),q=r("datasets.concatenate_datasets()"),L=r(" will work with regular "),M=t("a"),Ms=r("datasets.Dataset"),Q=r(" and "),X=t("a"),Bs=r("datasets.IterableDataset"),T=r(" objects. Refer to the "),U=t("a"),Ha=r("interleave_datasets"),Ya=r(" section for an example of how it\u2019s used."),this.h()},l(G){d=n(G,"P",{});var P=l(d);k=p(P,"You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as interleaving, and you can use it with "),v=n(P,"A",{href:!0});var bt=l(v);$=p(bt,"datasets.interleave_datasets()"),bt.forEach(e),E=p(P,". Both "),x=n(P,"A",{href:!0});var Us=l(x);y=p(Us,"datasets.interleave_datasets()"),Us.forEach(e),A=p(P," and "),C=n(P,"A",{href:!0});var vt=l(C);q=p(vt,"datasets.concatenate_datasets()"),vt.forEach(e),L=p(P," will work with regular "),M=n(P,"A",{href:!0});var wt=l(M);Ms=p(wt,"datasets.Dataset"),wt.forEach(e),Q=p(P," and "),X=n(P,"A",{href:!0});var Vs=l(X);Bs=p(Vs,"datasets.IterableDataset"),Vs.forEach(e),T=p(P," objects. Refer to the "),U=n(P,"A",{href:!0});var xt=l(U);Ha=p(xt,"interleave_datasets"),xt.forEach(e),Ya=p(P," section for an example of how it\u2019s used."),P.forEach(e),this.h()},h(){m(v,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.interleave_datasets"),m(x,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.interleave_datasets"),m(C,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.concatenate_datasets"),m(M,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),m(X,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),m(U,"href","#interleave_datasets")},m(G,P){i(G,d,P),a(d,k),a(d,v),a(v,$),a(d,E),a(d,x),a(x,y),a(d,A),a(d,C),a(C,q),a(d,L),a(d,M),a(M,Ms),a(d,Q),a(d,X),a(X,Bs),a(d,T),a(d,U),a(U,Ha),a(d,Ya)},d(G){G&&e(d)}}}function Yj(z){let d,k;return{c(){d=t("p"),k=r("\u{1F917} Datasets also provides support for other common data formats such as NumPy, PyTorch, Pandas, and JAX.")},l(v){d=n(v,"P",{});var $=l(d);k=p($,"\u{1F917} Datasets also provides support for other common data formats such as NumPy, PyTorch, Pandas, and JAX."),$.forEach(e)},m(v,$){i(v,d,$),a(d,k)},d(v){v&&e(d)}}}function Wj(z){let d,k,v,$,E;return{c(){d=t("p"),k=r("Want to save your dataset to a cloud storage provider? Read our "),v=t("a"),$=r("Cloud Storage"),E=r(" guide on how to save your dataset to AWS or Google Cloud Storage!"),this.h()},l(x){d=n(x,"P",{});var y=l(d);k=p(y,"Want to save your dataset to a cloud storage provider? Read our "),v=n(y,"A",{href:!0});var A=l(v);$=p(A,"Cloud Storage"),A.forEach(e),E=p(y," guide on how to save your dataset to AWS or Google Cloud Storage!"),y.forEach(e),this.h()},h(){m(v,"href","./filesystems")},m(x,y){i(x,d,y),a(d,k),a(d,v),a(v,$),a(d,E)},d(x){x&&e(d)}}}function Gj(z){let d,k,v,$,E,x,y,A,C,q,L,M,Ms,Q,X,Bs,T,U,Ha,Ya,G,P,bt,Us,vt,wt,Vs,xt,bh,Bn,vh,wh,Un,xh,Kr,$t,$h,Qr,Wa,Xr,Hs,Zr,ds,Ys,Vn,Ga,yh,Hn,kh,sp,yt,Eh,ap,fs,Ws,Yn,Ja,Dh,Wn,Ah,ep,Gs,Th,kt,Ph,Sh,tp,Ka,np,us,Js,Gn,Qa,qh,Jn,Ch,lp,V,Nh,Et,zh,Oh,Kn,Fh,Rh,Qn,Ih,Lh,rp,Xa,pp,gs,Ks,Xn,Za,Mh,Zn,Bh,op,Z,Uh,Dt,Vh,Hh,At,Yh,Wh,ip,Tt,Pt,St,Gh,Jh,hp,se,cp,qt,Ct,Nt,Kh,Qh,mp,ae,dp,_s,zt,Xh,Zh,sl,sc,ac,fp,ee,up,js,Qs,al,te,ec,el,tc,gp,bs,Ot,nc,lc,tl,rc,pc,_p,ne,jp,Xs,oc,nl,ic,hc,bp,vs,Zs,ll,le,cc,rl,mc,vp,H,dc,pl,fc,uc,Ft,gc,_c,ol,jc,bc,wp,sa,vc,re,wc,xc,xp,pe,$p,Rt,$c,yp,oe,kp,ws,aa,il,ie,yc,hl,kc,Ep,It,Ec,Dp,xs,ea,cl,he,Dc,ml,Ac,Ap,ta,Tc,Lt,Pc,Sc,Tp,na,qc,Mt,Cc,Nc,Pp,ce,Sp,$s,la,dl,me,zc,fl,Oc,qp,ra,Fc,Bt,Rc,Ic,Cp,de,Np,ys,pa,ul,fe,Lc,gl,Mc,zp,B,Ut,Bc,Uc,_l,Vc,Hc,jl,Yc,Wc,bl,Gc,Jc,Op,ue,Fp,oa,Rp,ia,Kc,Vt,Qc,Xc,Ip,ge,Lp,ks,ha,vl,_e,Zc,wl,sm,Mp,ca,am,Ht,em,tm,Bp,je,Up,O,nm,xl,lm,rm,$l,pm,om,yl,im,hm,Yt,cm,mm,Vp,be,Hp,ss,dm,kl,fm,um,El,gm,_m,Yp,Es,ma,Dl,ve,jm,Al,bm,Wp,as,vm,Wt,wm,xm,Gt,$m,ym,Gp,F,km,Tl,Em,Dm,Pl,Am,Tm,Sl,Pm,Sm,ql,qm,Cm,Jp,we,Kp,da,Nm,Jt,zm,Om,Qp,xe,Xp,fa,Fm,Kt,Rm,Im,Zp,es,Lm,Cl,Mm,Bm,Qt,Um,Vm,so,$e,ao,ua,eo,ts,Hm,Xt,Ym,Wm,Nl,Gm,Jm,to,ye,no,S,Km,Zt,Qm,Xm,zl,Zm,sd,Ol,ad,ed,Fl,td,nd,Rl,ld,rd,Il,pd,od,Ll,id,hd,lo,ke,ro,Ds,ga,Ml,Ee,cd,Bl,md,po,ns,dd,Ul,fd,ud,sn,gd,_d,oo,De,io,As,_a,Vl,Ae,jd,Hl,bd,ho,J,an,vd,wd,Yl,xd,$d,Wl,yd,kd,co,Ts,ja,Gl,Te,Ed,Jl,Dd,mo,en,Ad,fo,tn,Td,uo,Pe,go,ba,Pd,Kl,Sd,qd,_o,Se,jo,R,Cd,Ql,Nd,zd,Xl,Od,Fd,Zl,Rd,Id,sr,Ld,Md,bo,Ps,va,ar,qe,Bd,er,Ud,vo,nn,Vd,wo,wa,tr,Ce,Hd,nr,Yd,Wd,Gd,lr,rr,Jd,xo,Ne,$o,xa,Kd,ln,Qd,Xd,yo,ze,ko,rn,Zd,Eo,Oe,Do,Ss,$a,pr,Fe,sf,or,af,Ao,pn,ef,To,ls,tf,Re,nf,lf,Ie,rf,pf,Po,Le,So,on,of,qo,Me,Co,ya,hf,hn,cf,mf,No,Be,zo,I,df,ir,ff,uf,hr,gf,_f,cr,jf,bf,mr,vf,wf,Oo,qs,ka,dr,Ue,xf,fr,$f,Fo,rs,yf,cn,kf,Ef,ur,Df,Af,Ro,Ve,Io,Cs,Ea,gr,He,Tf,_r,Pf,Lo,ps,Sf,mn,qf,Cf,Ye,Nf,zf,Mo,Da,Of,jr,Ff,Rf,Bo,We,Uo,Ns,Aa,br,Ge,If,vr,Lf,Vo,Ta,Mf,dn,Bf,Uf,Ho,Je,Yo,Pa,Wo,fn,Vf,Go,Ke,Jo,zs,Sa,wr,Qe,Hf,xr,Yf,Ko,os,Wf,un,Gf,Jf,$r,Kf,Qf,Qo,Xe,Xo,Y,Xf,yr,Zf,su,Ze,au,eu,kr,tu,nu,Zo,st,si,Os,gn,lu,ru,_n,pu,ou,ai,at,ei,qa,ti,Ca,iu,jn,hu,cu,ni,et,li,Fs,Na,Er,tt,mu,Dr,du,ri,nt,bn,fu,uu,pi,lt,oi,vn,gu,ii,Rs,za,Ar,rt,_u,Tr,ju,hi,Oa,bu,wn,vu,wu,ci,xn,xu,mi,pt,di,Fa,$u,$n,yu,ku,fi,ot,ui,Ra,gi,Is,Ia,Pr,it,Eu,Sr,Du,_i,yn,Au,ji,La,qr,ht,Cr,Tu,Pu,Nr,Su,qu,K,ct,zr,Cu,Nu,Or,kn,zu,Ou,mt,Fr,Fu,Ru,Rr,En,Iu,Lu,dt,Ir,Mu,Bu,Lr,Dn,Uu,Vu,ft,Mr,Hu,Yu,ut,An,Wu,Gu,Tn,Ju,bi,Pn,Ku,vi,gt,wi;return x=new D({}),Wa=new w({props:{code:`from datasets import load_dataset
dataset = load_dataset('glue', 'mrpc', split='train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)`}}),Hs=new Mn({props:{warning:"&lcub;true}",$$slots:{default:[Bj]},$$scope:{ctx:z}}}),Ga=new D({}),Ja=new D({}),Ka=new w({props:{code:`dataset['label'][:10]
sorted_dataset = dataset.sort('label')
sorted_dataset['label'][:10]
sorted_dataset['label'][-10:]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset = dataset.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&#x27;label&#x27;</span>][-<span class="hljs-number">10</span>:]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`}}),Qa=new D({}),Xa=new w({props:{code:`shuffled_dataset = sorted_dataset.shuffle(seed=42)
shuffled_dataset['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset = sorted_dataset.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),Za=new D({}),se=new w({props:{code:`small_dataset = dataset.select([0, 10, 20, 30, 40, 50])
len(small_dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>small_dataset = dataset.select([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(small_dataset)
<span class="hljs-number">6</span>`}}),ae=new w({props:{code:`start_with_ar = dataset.filter(lambda example: example['sentence1'].startswith('Ar'))
len(start_with_ar)
start_with_ar['sentence1']`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example: example[<span class="hljs-string">&#x27;sentence1&#x27;</span>].startswith(<span class="hljs-string">&#x27;Ar&#x27;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(start_with_ar)
<span class="hljs-number">6</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar[<span class="hljs-string">&#x27;sentence1&#x27;</span>]
[<span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
<span class="hljs-string">&#x27;Arison said Mann may have been one of the pioneers of the world music movement and he had a deep love of Brazilian music .&#x27;</span>,
<span class="hljs-string">&#x27;Arts helped coach the youth on an eighth-grade football team at Lombardi Middle School in Green Bay .&#x27;</span>,
<span class="hljs-string">&#x27;Around 9 : 00 a.m. EDT ( 1300 GMT ) , the euro was at $ 1.1566 against the dollar , up 0.07 percent on the day .&#x27;</span>,
<span class="hljs-string">&quot;Arguing that the case was an isolated example , Canada has threatened a trade backlash if Tokyo &#x27;s ban is not justified on scientific grounds .&quot;</span>,
<span class="hljs-string">&#x27;Artists are worried the plan would harm those who need help most - performers who have a difficult time lining up shows .&#x27;</span>
]`}}),ee=new w({props:{code:`even_dataset = dataset.filter(lambda example, idx: idx % 2 == 0, with_indices=True)
len(even_dataset)
len(dataset) / 2`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>even_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example, idx: idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(even_dataset)
<span class="hljs-number">1834</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset) / <span class="hljs-number">2</span>
<span class="hljs-number">1834.0</span>`}}),te=new D({}),ne=new w({props:{code:`dataset.train_test_split(test_size=0.1)
0.1 * len(dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.train_test_split(test_size=<span class="hljs-number">0.1</span>)
{<span class="hljs-string">&#x27;train&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">3301</span>),
<span class="hljs-string">&#x27;test&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">367</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.1</span> * <span class="hljs-built_in">len</span>(dataset)
<span class="hljs-number">366.8</span>`}}),le=new D({}),pe=new w({props:{code:`from datasets import load_dataset
datasets = load_dataset('imdb', split='train')
print(dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets = load_dataset(<span class="hljs-string">&#x27;imdb&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dataset)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})`}}),oe=new w({props:{code:`dataset.shard(num_shards=4, index=0)
print(25000/4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.shard(num_shards=<span class="hljs-number">4</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">6250</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">25000</span>/<span class="hljs-number">4</span>)
<span class="hljs-number">6250.0</span>`}}),ie=new D({}),he=new D({}),ce=new w({props:{code:`dataset
dataset = dataset.rename_column("sentence1", "sentenceA")
dataset = dataset.rename_column("sentence2", "sentenceB")
dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentenceA&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence2&quot;</span>, <span class="hljs-string">&quot;sentenceB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentenceA&#x27;</span>, <span class="hljs-string">&#x27;sentenceB&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`}}),me=new D({}),de=new w({props:{code:`dataset = dataset.remove_columns("label")
dataset
dataset = dataset.remove_columns(['sentence1', 'sentence2'])
dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns([<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`}}),fe=new D({}),ue=new w({props:{code:`dataset.features

from datasets import ClassLabel, Value
new_features = dataset.features.copy()
new_features["label"] = ClassLabel(names=['negative', 'positive'])
new_features["idx"] = Value('int64')
dataset = dataset.cast(new_features)
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = dataset.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;idx&quot;</span>] = Value(<span class="hljs-string">&#x27;int64&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),oa=new Mn({props:{$$slots:{default:[Uj]},$$scope:{ctx:z}}}),ge=new w({props:{code:`dataset.features

dataset = dataset.cast_column("audio", Audio(sampling_rate=16000))
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">44100</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),_e=new D({}),je=new w({props:{code:`from datasets import load_dataset
dataset = load_dataset('squad', split='train')
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;squad&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),be=new w({props:{code:`flat_dataset = dataset.flatten()
flat_dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset = dataset.flatten()
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
 num_rows: <span class="hljs-number">87599</span>
})`}}),ve=new D({}),we=new w({props:{code:`def add_prefix(example):
    example['sentence1'] = 'My sentence: ' + example['sentence1']
    return example`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&#x27;sentence1&#x27;</span>] = <span class="hljs-string">&#x27;My sentence: &#x27;</span> + example[<span class="hljs-string">&#x27;sentence1&#x27;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`}}),xe=new w({props:{code:`updated_dataset = small_dataset.map(add_prefix)
updated_dataset['sentence1'][:5]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = small_dataset.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&#x27;sentence1&#x27;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;My sentence: Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&quot;My sentence: Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
<span class="hljs-string">&#x27;My sentence: They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added .&#x27;</span>,
<span class="hljs-string">&#x27;My sentence: Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
]`}}),$e=new w({props:{code:`updated_dataset = dataset.map(lambda example: {'new_sentence': example['sentence1']}, remove_columns=['sentence1'])
updated_dataset.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;new_sentence&#x27;</span>: example[<span class="hljs-string">&#x27;sentence1&#x27;</span>]}, remove_columns=[<span class="hljs-string">&#x27;sentence1&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset.column_names
[<span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;new_sentence&#x27;</span>]`}}),ua=new Mn({props:{$$slots:{default:[Vj]},$$scope:{ctx:z}}}),ye=new w({props:{code:`updated_dataset = dataset.map(lambda example, idx: {'sentence2': f'{idx}: ' + example['sentence2']}, with_indices=True)
updated_dataset['sentence2'][:5]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">f&#x27;<span class="hljs-subst">{idx}</span>: &#x27;</span> + example[<span class="hljs-string">&#x27;sentence2&#x27;</span>]}, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&#x27;sentence2&#x27;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;0: Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&quot;1: Yucaipa bought Dominick &#x27;s in 1995 for $ 693 million and sold it to Safeway for $ 1.8 billion in 1998 .&quot;</span>,
 <span class="hljs-string">&quot;2: On June 10 , the ship &#x27;s owners had published an advertisement on the Internet , offering the explosives for sale .&quot;</span>,
 <span class="hljs-string">&#x27;3: Tab shares jumped 20 cents , or 4.6 % , to set a record closing high at A $ 4.57 .&#x27;</span>,
 <span class="hljs-string">&#x27;4: PG &amp; E Corp. shares jumped $ 1.63 or 8 percent to $ 21.03 on the New York Stock Exchange on Friday .&#x27;</span>
]`}}),ke=new w({props:{code:`from multiprocess import set_start_method
import torch
import os
set_start_method("spawn")
def gpu_computation(example, rank):
    os.environ["CUDA_VISIBLE_DEVICES"] = str(rank % torch.cuda.device_count())
    # Your big GPU call goes here
    return examples
updated_dataset = dataset.map(gpu_computation, with_rank=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> multiprocess <span class="hljs-keyword">import</span> set_start_method
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>set_start_method(<span class="hljs-string">&quot;spawn&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gpu_computation</span>(<span class="hljs-params">example, rank</span>):
<span class="hljs-meta">&gt;&gt;&gt; </span>    os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-built_in">str</span>(rank % torch.cuda.device_count())
<span class="hljs-meta">&gt;&gt;&gt; </span>    <span class="hljs-comment"># Your big GPU call goes here</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>    <span class="hljs-keyword">return</span> examples
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(gpu_computation, with_rank=<span class="hljs-literal">True</span>)`}}),Ee=new D({}),De=new w({props:{code:"updated_dataset = dataset.map(lambda example, idx: {'sentence2': f'{idx}: ' + example['sentence2']}, num_proc=4)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">f&#x27;<span class="hljs-subst">{idx}</span>: &#x27;</span> + example[<span class="hljs-string">&#x27;sentence2&#x27;</span>]}, num_proc=<span class="hljs-number">4</span>)'}}),Ae=new D({}),Te=new D({}),Pe=new w({props:{code:`from transformers import BertTokenizerFast
tokenizer = BertTokenizerFast.from_pretrained('bert-base-cased')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizerFast
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizerFast.from_pretrained(<span class="hljs-string">&#x27;bert-base-cased&#x27;</span>)`}}),Se=new w({props:{code:`encoded_dataset = dataset.map(lambda examples: tokenizer(examples['sentence1']), batched=True)
encoded_dataset.column_names
encoded_dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> examples: tokenizer(examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.column_names
[<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,
<span class="hljs-string">&#x27;input_ids&#x27;</span>: [  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  <span class="hljs-number">5303</span>,  <span class="hljs-number">4806</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">1711</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">2292</span>, <span class="hljs-number">1119</span>,  <span class="hljs-number">1270</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">7737</span>,   <span class="hljs-number">107</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">1104</span>,  <span class="hljs-number">9938</span>, <span class="hljs-number">4267</span>, <span class="hljs-number">12223</span>, <span class="hljs-number">21811</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">2554</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
}`}}),qe=new D({}),Ne=new w({props:{code:`def chunk_examples(examples):
    chunks = []
    for sentence in examples['sentence1']:
        chunks += [sentence[i:i + 50] for i in range(0, len(sentence), 50)]
    return {'chunks': chunks}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">chunk_examples</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    chunks = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]:
<span class="hljs-meta">... </span>        chunks += [sentence[i:i + <span class="hljs-number">50</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(sentence), <span class="hljs-number">50</span>)]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&#x27;chunks&#x27;</span>: chunks}`}}),ze=new w({props:{code:`chunked_dataset = dataset.map(chunk_examples, batched=True, remove_columns=dataset.column_names)
chunked_dataset[:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset = dataset.<span class="hljs-built_in">map</span>(chunk_examples, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names)
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset[:<span class="hljs-number">10</span>]
{<span class="hljs-string">&#x27;chunks&#x27;</span>: [<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the &#x27;</span>,
            <span class="hljs-string">&#x27;witness &quot; , of deliberately distorting his evidenc&#x27;</span>,
            <span class="hljs-string">&#x27;e .&#x27;</span>,
            <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain&quot;</span>,
            <span class="hljs-string">&#x27; to Safeway in 1998 for $ 2.5 billion .&#x27;</span>,
            <span class="hljs-string">&#x27;They had published an advertisement on the Interne&#x27;</span>,
            <span class="hljs-string">&#x27;t on June 10 , offering the cargo for sale , he ad&#x27;</span>,
            <span class="hljs-string">&#x27;ded .&#x27;</span>,
            <span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or&#x27;</span>,
            <span class="hljs-string">&#x27; 4.4 % , at A $ 4.56 , having earlier set a record&#x27;</span>]}`}}),Oe=new w({props:{code:`dataset
chunked_dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
 features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
 num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset
Dataset(schema: {<span class="hljs-string">&#x27;chunks&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>}, num_rows: <span class="hljs-number">10470</span>)`}}),Fe=new D({}),Le=new w({props:{code:`from random import randint
from transformers import pipeline

fillmask = pipeline('fill-mask', model='roberta-base')
mask_token = fillmask.tokenizer.mask_token
smaller_dataset = dataset.filter(lambda e, i: i<100, with_indices=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>fillmask = pipeline(<span class="hljs-string">&#x27;fill-mask&#x27;</span>, model=<span class="hljs-string">&#x27;roberta-base&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token = fillmask.tokenizer.mask_token
<span class="hljs-meta">&gt;&gt;&gt; </span>smaller_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> e, i: i&lt;<span class="hljs-number">100</span>, with_indices=<span class="hljs-literal">True</span>)`}}),Me=new w({props:{code:`def augment_data(examples):
    outputs = []
    for sentence in examples['sentence1']:
        words = sentence.split(' ')
        K = randint(1, len(words)-1)
        masked_sentence = " ".join(words[:K]  + [mask_token] + words[K+1:])
        predictions = fillmask(masked_sentence)
        augmented_sequences = [predictions[i]['sequence'] for i in range(3)]
        outputs += [sentence] + augmented_sequences
    return {'data': outputs}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">augment_data</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    outputs = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]:
<span class="hljs-meta">... </span>        words = sentence.split(<span class="hljs-string">&#x27; &#x27;</span>)
<span class="hljs-meta">... </span>        K = randint(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(words)-<span class="hljs-number">1</span>)
<span class="hljs-meta">... </span>        masked_sentence = <span class="hljs-string">&quot; &quot;</span>.join(words[:K]  + [mask_token] + words[K+<span class="hljs-number">1</span>:])
<span class="hljs-meta">... </span>        predictions = fillmask(masked_sentence)
<span class="hljs-meta">... </span>        augmented_sequences = [predictions[i][<span class="hljs-string">&#x27;sequence&#x27;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]
<span class="hljs-meta">... </span>        outputs += [sentence] + augmented_sequences
...
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&#x27;data&#x27;</span>: outputs}`}}),Be=new w({props:{code:`augmented_dataset = smaller_dataset.map(augment_data, batched=True, remove_columns=dataset.column_names, batch_size=8)
augmented_dataset[:9]['data']`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset = smaller_dataset.<span class="hljs-built_in">map</span>(augment_data, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names, batch_size=<span class="hljs-number">8</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset[:<span class="hljs-number">9</span>][<span class="hljs-string">&#x27;data&#x27;</span>]
[<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately withholding his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately suppressing his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately destroying his evidence.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Stores before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick&#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion.&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Pizza before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>
]`}}),Ue=new D({}),Ve=new w({props:{code:`from datasets import load_dataset

dataset = load_dataset('glue', 'mrpc')
encoded_dataset = dataset.map(lambda examples: tokenizer(examples['sentence1']), batched=True)
encoded_dataset["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load all the splits</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> examples: tokenizer(examples[<span class="hljs-string">&#x27;sentence1&#x27;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,
<span class="hljs-string">&#x27;input_ids&#x27;</span>: [  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  <span class="hljs-number">5303</span>,  <span class="hljs-number">4806</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">1711</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">2292</span>, <span class="hljs-number">1119</span>,  <span class="hljs-number">1270</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">7737</span>,   <span class="hljs-number">107</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">1104</span>,  <span class="hljs-number">9938</span>, <span class="hljs-number">4267</span>, <span class="hljs-number">12223</span>, <span class="hljs-number">21811</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">2554</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
}`}}),He=new D({}),We=new w({props:{code:`from datasets import Dataset
import torch.distributed

dataset1 = Dataset.from_dict({"a": [0, 1, 2]})

if training_args.local_rank > 0:
    print("Waiting for main process to perform the mapping")
    torch.distributed.barrier()

dataset2 = dataset1.map(lambda x: {"a": x["a"] + 1})

if training_args.local_rank == 0:
    print("Loading results from main process")
    torch.distributed.barrier()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch.distributed

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank &gt; <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Waiting for main process to perform the mapping&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset2 = dataset1.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;a&quot;</span>: x[<span class="hljs-string">&quot;a&quot;</span>] + <span class="hljs-number">1</span>})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank == <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loading results from main process&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()`}}),Ge=new D({}),Je=new w({props:{code:`from datasets import concatenate_datasets, load_dataset

bookcorpus = load_dataset("bookcorpus", split="train")
wiki = load_dataset("wikipedia", "20200501.en", split="train")
wiki = wiki.remove_columns("title")  # only keep the text

assert bookcorpus.features.type == wiki.features.type
bert_dataset = concatenate_datasets([bookcorpus, wiki])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> concatenate_datasets, load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus = load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;wikipedia&quot;</span>, <span class="hljs-string">&quot;20200501.en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = wiki.remove_columns(<span class="hljs-string">&quot;title&quot;</span>)  <span class="hljs-comment"># only keep the text</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> bookcorpus.features.<span class="hljs-built_in">type</span> == wiki.features.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>bert_dataset = concatenate_datasets([bookcorpus, wiki])`}}),Pa=new Mn({props:{$$slots:{default:[Hj]},$$scope:{ctx:z}}}),Ke=new w({props:{code:`from datasets import Dataset
bookcorpus_ids = Dataset.from_dict({"ids": list(range(len(bookcorpus)))})
bookcorpus_with_ids = concatenate_datasets([bookcorpus, bookcorpus_ids], axis=1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus_ids = Dataset.from_dict({<span class="hljs-string">&quot;ids&quot;</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bookcorpus)))})
<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus_with_ids = concatenate_datasets([bookcorpus, bookcorpus_ids], axis=<span class="hljs-number">1</span>)`}}),Qe=new D({}),Xe=new w({props:{code:`import tensorflow as tf
dataset.set_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])`}}),st=new w({props:{code:'tfdataset = tf.data.Dataset.from_tensor_slices((features, dataset["label"])).batch(32)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tfdataset = tf.data.Dataset.from_tensor_slices((features, dataset[<span class="hljs-string">&quot;label&quot;</span>])).batch(<span class="hljs-number">32</span>)'}}),at=new w({props:{code:"dataset = dataset.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])'}}),qa=new Mn({props:{$$slots:{default:[Yj]},$$scope:{ctx:z}}}),et=new w({props:{code:`dataset.format
dataset.reset_format()
dataset.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;label&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`}}),tt=new D({}),lt=new w({props:{code:`from transformers import BertTokenizer
tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")
def encode(batch):
    return tokenizer(batch["sentence1"], padding="longest", truncation=True, max_length=512, return_tensors="pt")
dataset.set_transform(encode)
dataset.format
dataset[:2]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&quot;sentence1&quot;</span>], padding=<span class="hljs-string">&quot;longest&quot;</span>, truncation=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">512</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;custom&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {<span class="hljs-string">&#x27;transform&#x27;</span>: &lt;function __main__.encode(batch)&gt;}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[:<span class="hljs-number">2</span>]
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([[  <span class="hljs-number">101</span>,  <span class="hljs-number">2572</span>,  <span class="hljs-number">3217</span>, ... <span class="hljs-number">102</span>]]), <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, ... <span class="hljs-number">0</span>]]), <span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, ... <span class="hljs-number">1</span>]])}`}}),rt=new D({}),pt=new w({props:{code:'encoded_dataset.save_to_disk("path/of/my/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.save_to_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)'}}),ot=new w({props:{code:`from datasets import load_from_disk
reloaded_encoded_dataset = load_from_disk("path/of/my/dataset/directory")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span>reloaded_encoded_dataset = load_from_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)`}}),Ra=new Mn({props:{$$slots:{default:[Wj]},$$scope:{ctx:z}}}),it=new D({}),gt=new w({props:{code:'encoded_dataset.to_csv("path/of/my/dataset.csv")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.to_csv(<span class="hljs-string">&quot;path/of/my/dataset.csv&quot;</span>)'}}),{c(){d=t("meta"),k=h(),v=t("h1"),$=t("a"),E=t("span"),f(x.$$.fragment),y=h(),A=t("span"),C=r("Process"),q=h(),L=t("p"),M=r("\u{1F917} Datasets provides many tools for modifying the structure and content of a dataset. You can rearrange the order of rows or extract nested fields into their own columns. For more powerful processing applications, you can even alter the contents of a dataset by applying a function to the entire dataset to generate new rows and columns. These processing methods provide a lot of control and flexibility to mold your dataset into the desired shape and size with the appropriate features."),Ms=h(),Q=t("p"),X=r("This guide will show you how to:"),Bs=h(),T=t("ul"),U=t("li"),Ha=r("Reorder rows and split the dataset."),Ya=h(),G=t("li"),P=r("Rename and remove columns, and other common column operations."),bt=h(),Us=t("li"),vt=r("Apply processing functions to each example in a dataset."),wt=h(),Vs=t("li"),xt=r("Concatenate datasets."),bh=h(),Bn=t("li"),vh=r("Apply a custom formatting transform."),wh=h(),Un=t("li"),xh=r("Save and export processed datasets."),Kr=h(),$t=t("p"),$h=r("Load the MRPC dataset from the GLUE benchmark to follow along with our examples:"),Qr=h(),f(Wa.$$.fragment),Xr=h(),f(Hs.$$.fragment),Zr=h(),ds=t("h2"),Ys=t("a"),Vn=t("span"),f(Ga.$$.fragment),yh=h(),Hn=t("span"),kh=r("Sort, shuffle, select, split, and shard"),sp=h(),yt=t("p"),Eh=r("There are several methods for rearranging the structure of a dataset. These methods are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks."),ap=h(),fs=t("h3"),Ws=t("a"),Yn=t("span"),f(Ja.$$.fragment),Dh=h(),Wn=t("span"),Ah=r("Sort"),ep=h(),Gs=t("p"),Th=r("Use "),kt=t("a"),Ph=r("datasets.Dataset.sort()"),Sh=r(" to sort a columns values according to their numerical values. The provided column must be NumPy compatible."),tp=h(),f(Ka.$$.fragment),np=h(),us=t("h3"),Js=t("a"),Gn=t("span"),f(Qa.$$.fragment),qh=h(),Jn=t("span"),Ch=r("Shuffle"),lp=h(),V=t("p"),Nh=r("The "),Et=t("a"),zh=r("datasets.Dataset.shuffle()"),Oh=r(" method randomly rearranges the values of a column. You can specify the "),Kn=t("code"),Fh=r("generator"),Rh=r(" argument in this method to use a different "),Qn=t("code"),Ih=r("numpy.random.Generator"),Lh=r(" if you want more control over the algorithm used to shuffle the dataset."),rp=h(),f(Xa.$$.fragment),pp=h(),gs=t("h3"),Ks=t("a"),Xn=t("span"),f(Za.$$.fragment),Mh=h(),Zn=t("span"),Bh=r("Select and Filter"),op=h(),Z=t("p"),Uh=r("There are two options for filtering rows in a dataset: "),Dt=t("a"),Vh=r("datasets.Dataset.select()"),Hh=r(" and "),At=t("a"),Yh=r("datasets.Dataset.filter()"),Wh=r("."),ip=h(),Tt=t("ul"),Pt=t("li"),St=t("a"),Gh=r("datasets.Dataset.select()"),Jh=r(" returns rows according to a list of indices:"),hp=h(),f(se.$$.fragment),cp=h(),qt=t("ul"),Ct=t("li"),Nt=t("a"),Kh=r("datasets.Dataset.filter()"),Qh=r(" returns rows that match a specified condition:"),mp=h(),f(ae.$$.fragment),dp=h(),_s=t("p"),zt=t("a"),Xh=r("datasets.Dataset.filter()"),Zh=r(" can also filter by indices if you set "),sl=t("code"),sc=r("with_indices=True"),ac=r(":"),fp=h(),f(ee.$$.fragment),up=h(),js=t("h3"),Qs=t("a"),al=t("span"),f(te.$$.fragment),ec=h(),el=t("span"),tc=r("Split"),gp=h(),bs=t("p"),Ot=t("a"),nc=r("datasets.Dataset.train_test_split()"),lc=r(" creates train and test splits, if your dataset doesn\u2019t already have them. This allows you to adjust the relative proportions or absolute number of samples in each split. In the example below, use the "),tl=t("code"),rc=r("test_size"),pc=r(" argument to create a test split that is 10% of the original dataset:"),_p=h(),f(ne.$$.fragment),jp=h(),Xs=t("p"),oc=r("The splits are shuffled by default, but you can set "),nl=t("code"),ic=r("shuffle=False"),hc=r(" to prevent shuffling."),bp=h(),vs=t("h3"),Zs=t("a"),ll=t("span"),f(le.$$.fragment),cc=h(),rl=t("span"),mc=r("Shard"),vp=h(),H=t("p"),dc=r("\u{1F917} Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the "),pl=t("code"),fc=r("num_shards"),uc=r(" argument in "),Ft=t("a"),gc=r("datasets.Dataset.shard()"),_c=r(" to determine the number of shards to split the dataset into. You will also need to provide the shard you want to return with the "),ol=t("code"),jc=r("index"),bc=r(" argument."),wp=h(),sa=t("p"),vc=r("For example, the "),re=t("a"),wc=r("imdb"),xc=r(" dataset has 25000 examples:"),xp=h(),f(pe.$$.fragment),$p=h(),Rt=t("p"),$c=r("After you shard the dataset into four chunks, the first shard only has 6250 examples:"),yp=h(),f(oe.$$.fragment),kp=h(),ws=t("h2"),aa=t("a"),il=t("span"),f(ie.$$.fragment),yc=h(),hl=t("span"),kc=r("Rename, remove, cast, and flatten"),Ep=h(),It=t("p"),Ec=r("The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures."),Dp=h(),xs=t("h3"),ea=t("a"),cl=t("span"),f(he.$$.fragment),Dc=h(),ml=t("span"),Ac=r("Rename"),Ap=h(),ta=t("p"),Tc=r("Use "),Lt=t("a"),Pc=r("datasets.Dataset.rename_column()"),Sc=r(" when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Tp=h(),na=t("p"),qc=r("Provide "),Mt=t("a"),Cc=r("datasets.Dataset.rename_column()"),Nc=r(" with the name of the original column, and the new column name:"),Pp=h(),f(ce.$$.fragment),Sp=h(),$s=t("h3"),la=t("a"),dl=t("span"),f(me.$$.fragment),zc=h(),fl=t("span"),Oc=r("Remove"),qp=h(),ra=t("p"),Fc=r("When you need to remove one or more columns, give "),Bt=t("a"),Rc=r("datasets.Dataset.remove_columns()"),Ic=r(" the name of the column to remove. Remove more than one column by providing a list of column names:"),Cp=h(),f(de.$$.fragment),Np=h(),ys=t("h3"),pa=t("a"),ul=t("span"),f(fe.$$.fragment),Lc=h(),gl=t("span"),Mc=r("Cast"),zp=h(),B=t("p"),Ut=t("a"),Bc=r("datasets.Dataset.cast()"),Uc=r(" changes the feature type of one or more columns. This method takes your new "),_l=t("code"),Vc=r("datasets.Features"),Hc=r(" as its argument. The following sample code shows how to change the feature types of "),jl=t("code"),Yc=r("datasets.ClassLabel"),Wc=r(" and "),bl=t("code"),Gc=r("datasets.Value"),Jc=r(":"),Op=h(),f(ue.$$.fragment),Fp=h(),f(oa.$$.fragment),Rp=h(),ia=t("p"),Kc=r("Use "),Vt=t("a"),Qc=r("datasets.Dataset.cast_column()"),Xc=r(" to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),Ip=h(),f(ge.$$.fragment),Lp=h(),ks=t("h3"),ha=t("a"),vl=t("span"),f(_e.$$.fragment),Zc=h(),wl=t("span"),sm=r("Flatten"),Mp=h(),ca=t("p"),am=r("Sometimes a column can be a nested structure of several types. Use "),Ht=t("a"),em=r("datasets.Dataset.flatten()"),tm=r(" to extract the subfields into their own separate columns. Take a look at the nested structure below from the SQuAD dataset:"),Bp=h(),f(je.$$.fragment),Up=h(),O=t("p"),nm=r("The "),xl=t("code"),lm=r("answers"),rm=r(" field contains two subfields: "),$l=t("code"),pm=r("text"),om=r(" and "),yl=t("code"),im=r("answer_start"),hm=r(". Flatten them with "),Yt=t("a"),cm=r("datasets.Dataset.flatten()"),mm=r(":"),Vp=h(),f(be.$$.fragment),Hp=h(),ss=t("p"),dm=r("Notice how the subfields are now their own independent columns: "),kl=t("code"),fm=r("answers.text"),um=r(" and "),El=t("code"),gm=r("answers.answer_start"),_m=r("."),Yp=h(),Es=t("h2"),ma=t("a"),Dl=t("span"),f(ve.$$.fragment),jm=h(),Al=t("span"),bm=r("Map"),Wp=h(),as=t("p"),vm=r("Some of the more powerful applications of \u{1F917} Datasets come from using "),Wt=t("a"),wm=r("datasets.Dataset.map()"),xm=r(". The primary purpose of "),Gt=t("a"),$m=r("datasets.Dataset.map()"),ym=r(" is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),Gp=h(),F=t("p"),km=r("In the following example, you will prefix each "),Tl=t("code"),Em=r("sentence1"),Dm=r(" value in the dataset with "),Pl=t("code"),Am=r("'My sentence: '"),Tm=r(". First, create a function that adds "),Sl=t("code"),Pm=r("'My sentence: '"),Sm=r(" to the beginning of each sentence. The function needs to accept and output a "),ql=t("code"),qm=r("dict"),Cm=r(":"),Jp=h(),f(we.$$.fragment),Kp=h(),da=t("p"),Nm=r("Next, apply this function to the dataset with "),Jt=t("a"),zm=r("datasets.Dataset.map()"),Om=r(":"),Qp=h(),f(xe.$$.fragment),Xp=h(),fa=t("p"),Fm=r("Let\u2019s take a look at another example, except this time, you will remove a column with "),Kt=t("a"),Rm=r("datasets.Dataset.map()"),Im=r(". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),Zp=h(),es=t("p"),Lm=r("Specify the column to remove with the "),Cl=t("code"),Mm=r("remove_columns"),Bm=r(" argument in "),Qt=t("a"),Um=r("datasets.Dataset.map()"),Vm=r(":"),so=h(),f($e.$$.fragment),ao=h(),f(ua.$$.fragment),eo=h(),ts=t("p"),Hm=r("You can also use "),Xt=t("a"),Ym=r("datasets.Dataset.map()"),Wm=r(" with indices if you set "),Nl=t("code"),Gm=r("with_indices=True"),Jm=r(". The example below adds the index to the beginning of each sentence:"),to=h(),f(ye.$$.fragment),no=h(),S=t("p"),Km=r("You can also use "),Zt=t("a"),Qm=r("datasets.Dataset.map()"),Xm=r(" with the rank of the process if you set "),zl=t("code"),Zm=r("with_rank=True"),sd=r(". This is analogous to "),Ol=t("code"),ad=r("with_indices"),ed=r(". The "),Fl=t("code"),td=r("rank"),nd=r(" argument in the mapped function goes after the "),Rl=t("code"),ld=r("index"),rd=r(" one if it is already present. The main use-case for it is to parallelize your computation across several GPUs. This requires setting "),Il=t("em"),pd=r("multiprocess.set_start_method(\u201Cspawn\u201D)"),od=r(", without which you will receive a CUDA error: "),Ll=t("em"),id=r("RuntimeError: Cannot re-initialize CUDA in forked subprocess. To use CUDA with multiprocessing, you must use the \u2018spawn\u2019 start method"),hd=r("."),lo=h(),f(ke.$$.fragment),ro=h(),Ds=t("h3"),ga=t("a"),Ml=t("span"),f(Ee.$$.fragment),cd=h(),Bl=t("span"),md=r("Multiprocessing"),po=h(),ns=t("p"),dd=r("Multiprocessing can significantly speed up processing by parallelizing the processes on your CPU. Set the "),Ul=t("code"),fd=r("num_proc"),ud=r(" argument in "),sn=t("a"),gd=r("datasets.Dataset.map()"),_d=r(" to set the number of processes to use:"),oo=h(),f(De.$$.fragment),io=h(),As=t("h3"),_a=t("a"),Vl=t("span"),f(Ae.$$.fragment),jd=h(),Hl=t("span"),bd=r("Batch processing"),ho=h(),J=t("p"),an=t("a"),vd=r("datasets.Dataset.map()"),wd=r(" also supports working with batches of examples. Operate on batches by setting "),Yl=t("code"),xd=r("batched=True"),$d=r(". The default batch size is 1000, but you can adjust it with the "),Wl=t("code"),yd=r("batch_size"),kd=r(" argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),co=h(),Ts=t("h4"),ja=t("a"),Gl=t("span"),f(Te.$$.fragment),Ed=h(),Jl=t("span"),Dd=r("Tokenization"),mo=h(),en=t("p"),Ad=r("One of the most obvious use-cases for batch processing is tokenization, which accepts batches of inputs."),fo=h(),tn=t("p"),Td=r("First, load the tokenizer from the BERT model:"),uo=h(),f(Pe.$$.fragment),go=h(),ba=t("p"),Pd=r("Apply the tokenizer to batches of the "),Kl=t("code"),Sd=r("sentence1"),qd=r(" field:"),_o=h(),f(Se.$$.fragment),jo=h(),R=t("p"),Cd=r("Now you have three new columns, "),Ql=t("code"),Nd=r("input_ids"),zd=r(", "),Xl=t("code"),Od=r("token_type_ids"),Fd=r(", "),Zl=t("code"),Rd=r("attention_mask"),Id=r(", that contain the encoded version of the "),sr=t("code"),Ld=r("sentence1"),Md=r(" field."),bo=h(),Ps=t("h4"),va=t("a"),ar=t("span"),f(qe.$$.fragment),Bd=h(),er=t("span"),Ud=r("Split long examples"),vo=h(),nn=t("p"),Vd=r("When your examples are too long, you may want to split them into several smaller snippets. Begin by creating a function that:"),wo=h(),wa=t("ol"),tr=t("li"),Ce=t("p"),Hd=r("Splits the "),nr=t("code"),Yd=r("sentence1"),Wd=r(" field into snippets of 50 characters."),Gd=h(),lr=t("li"),rr=t("p"),Jd=r("Stacks all the snippets together to create the new dataset."),xo=h(),f(Ne.$$.fragment),$o=h(),xa=t("p"),Kd=r("Apply the function with "),ln=t("a"),Qd=r("datasets.Dataset.map()"),Xd=r(":"),yo=h(),f(ze.$$.fragment),ko=h(),rn=t("p"),Zd=r("Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset."),Eo=h(),f(Oe.$$.fragment),Do=h(),Ss=t("h4"),$a=t("a"),pr=t("span"),f(Fe.$$.fragment),sf=h(),or=t("span"),af=r("Data augmentation"),Ao=h(),pn=t("p"),ef=r("With batch processing, you can even augment your dataset with additional examples. In the following example, you will generate additional words for a masked token in a sentence."),To=h(),ls=t("p"),tf=r("Load the "),Re=t("a"),nf=r("RoBERTA"),lf=r(" model for use in the \u{1F917} Transformer "),Ie=t("a"),rf=r("FillMaskPipeline"),pf=r(":"),Po=h(),f(Le.$$.fragment),So=h(),on=t("p"),of=r("Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA."),qo=h(),f(Me.$$.fragment),Co=h(),ya=t("p"),hf=r("Use "),hn=t("a"),cf=r("datasets.Dataset.map()"),mf=r(" to apply the function over the whole dataset:"),No=h(),f(Be.$$.fragment),zo=h(),I=t("p"),df=r("For each original sentence, RoBERTA augmented a random word with three alternatives. In the first sentence, the word "),ir=t("code"),ff=r("distorting"),uf=r(" is augmented with "),hr=t("code"),gf=r("withholding"),_f=r(", "),cr=t("code"),jf=r("suppressing"),bf=r(", and "),mr=t("code"),vf=r("destroying"),wf=r("."),Oo=h(),qs=t("h3"),ka=t("a"),dr=t("span"),f(Ue.$$.fragment),xf=h(),fr=t("span"),$f=r("Process multiple splits"),Fo=h(),rs=t("p"),yf=r("Many datasets have splits that you can process simultaneously with "),cn=t("a"),kf=r("datasets.DatasetDict.map()"),Ef=r(". For example, tokenize the "),ur=t("code"),Df=r("sentence1"),Af=r(" field in the train and test split by:"),Ro=h(),f(Ve.$$.fragment),Io=h(),Cs=t("h3"),Ea=t("a"),gr=t("span"),f(He.$$.fragment),Tf=h(),_r=t("span"),Pf=r("Distributed usage"),Lo=h(),ps=t("p"),Sf=r("When you use "),mn=t("a"),qf=r("datasets.Dataset.map()"),Cf=r(" in a distributed setting, you should also use "),Ye=t("a"),Nf=r("torch.distributed.barrier"),zf=r(". This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work."),Mo=h(),Da=t("p"),Of=r("The following example shows how you can use "),jr=t("code"),Ff=r("torch.distributed.barrier"),Rf=r(" to synchronize the processes:"),Bo=h(),f(We.$$.fragment),Uo=h(),Ns=t("h2"),Aa=t("a"),br=t("span"),f(Ge.$$.fragment),If=h(),vr=t("span"),Lf=r("Concatenate"),Vo=h(),Ta=t("p"),Mf=r("Separate datasets can be concatenated if they share the same column types. Concatenate datasets with "),dn=t("a"),Bf=r("datasets.concatenate_datasets()"),Uf=r(":"),Ho=h(),f(Je.$$.fragment),Yo=h(),f(Pa.$$.fragment),Wo=h(),fn=t("p"),Vf=r("You can also concatenate two datasets horizontally (axis=1) as long as they have the same number of rows:"),Go=h(),f(Ke.$$.fragment),Jo=h(),zs=t("h2"),Sa=t("a"),wr=t("span"),f(Qe.$$.fragment),Hf=h(),xr=t("span"),Yf=r("Format"),Ko=h(),os=t("p"),Wf=r("Set a dataset to a TensorFlow compatible format with "),un=t("a"),Gf=r("datasets.Dataset.set_format()"),Jf=r(". Specify "),$r=t("code"),Kf=r("type=tensorflow"),Qf=r(" and the columns that should be formatted:"),Qo=h(),f(Xe.$$.fragment),Xo=h(),Y=t("p"),Xf=r("Then you can wrap the dataset with "),yr=t("code"),Zf=r("tf.data.Dataset"),su=r(". This method gives you more control over how to create a "),Ze=t("a"),au=r("TensorFlow Dataset"),eu=r(". In the example below, the dataset is created "),kr=t("code"),tu=r("from_tensor_slices"),nu=r(":"),Zo=h(),f(st.$$.fragment),si=h(),Os=t("p"),gn=t("a"),lu=r("datasets.Dataset.with_format()"),ru=r(" provides an alternative method to set the format. This method will return a new "),_n=t("a"),pu=r("datasets.Dataset"),ou=r(" object with your specified format:"),ai=h(),f(at.$$.fragment),ei=h(),f(qa.$$.fragment),ti=h(),Ca=t("p"),iu=r("Use "),jn=t("a"),hu=r("datasets.Dataset.reset_format()"),cu=r(" if you need to reset the dataset to the original format:"),ni=h(),f(et.$$.fragment),li=h(),Fs=t("h3"),Na=t("a"),Er=t("span"),f(tt.$$.fragment),mu=h(),Dr=t("span"),du=r("Format transform"),ri=h(),nt=t("p"),bn=t("a"),fu=r("datasets.Dataset.set_transform()"),uu=r(" allows you to apply a custom formatting transform on-the-fly. This will replace any previously specified format. For example, you can use this method to tokenize and pad tokens on-the-fly:"),pi=h(),f(lt.$$.fragment),oi=h(),vn=t("p"),gu=r("In this case, the tokenization is applied only when the examples are accessed."),ii=h(),Rs=t("h2"),za=t("a"),Ar=t("span"),f(rt.$$.fragment),_u=h(),Tr=t("span"),ju=r("Save"),hi=h(),Oa=t("p"),bu=r("Once you are done processing your dataset, you can save and reuse it later with "),wn=t("a"),vu=r("datasets.Dataset.save_to_disk()"),wu=r("."),ci=h(),xn=t("p"),xu=r("Save your dataset by providing the path to the directory you wish to save it to:"),mi=h(),f(pt.$$.fragment),di=h(),Fa=t("p"),$u=r("When you want to use your dataset again, use "),$n=t("a"),yu=r("datasets.load_from_disk()"),ku=r(" to reload it:"),fi=h(),f(ot.$$.fragment),ui=h(),f(Ra.$$.fragment),gi=h(),Is=t("h2"),Ia=t("a"),Pr=t("span"),f(it.$$.fragment),Eu=h(),Sr=t("span"),Du=r("Export"),_i=h(),yn=t("p"),Au=r("\u{1F917} Datasets supports exporting as well, so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:"),ji=h(),La=t("table"),qr=t("thead"),ht=t("tr"),Cr=t("th"),Tu=r("File type"),Pu=h(),Nr=t("th"),Su=r("Export method"),qu=h(),K=t("tbody"),ct=t("tr"),zr=t("td"),Cu=r("CSV"),Nu=h(),Or=t("td"),kn=t("a"),zu=r("datasets.Dataset.to_csv()"),Ou=h(),mt=t("tr"),Fr=t("td"),Fu=r("JSON"),Ru=h(),Rr=t("td"),En=t("a"),Iu=r("datasets.Dataset.to_json()"),Lu=h(),dt=t("tr"),Ir=t("td"),Mu=r("Parquet"),Bu=h(),Lr=t("td"),Dn=t("a"),Uu=r("datasets.Dataset.to_parquet()"),Vu=h(),ft=t("tr"),Mr=t("td"),Hu=r("In-memory Python object"),Yu=h(),ut=t("td"),An=t("a"),Wu=r("datasets.Dataset.to_pandas()"),Gu=r(" or "),Tn=t("a"),Ju=r("datasets.Dataset.to_dict()"),bi=h(),Pn=t("p"),Ku=r("For example, export your dataset to a CSV file like this:"),vi=h(),f(gt.$$.fragment),this.h()},l(s){const o=Mj('[data-svelte="svelte-1phssyn"]',document.head);d=n(o,"META",{name:!0,content:!0}),o.forEach(e),k=c(s),v=n(s,"H1",{class:!0});var _t=l(v);$=n(_t,"A",{id:!0,class:!0,href:!0});var Br=l($);E=n(Br,"SPAN",{});var Ur=l(E);u(x.$$.fragment,Ur),Ur.forEach(e),Br.forEach(e),y=c(_t),A=n(_t,"SPAN",{});var Vr=l(A);C=p(Vr,"Process"),Vr.forEach(e),_t.forEach(e),q=c(s),L=n(s,"P",{});var Hr=l(L);M=p(Hr,"\u{1F917} Datasets provides many tools for modifying the structure and content of a dataset. You can rearrange the order of rows or extract nested fields into their own columns. For more powerful processing applications, you can even alter the contents of a dataset by applying a function to the entire dataset to generate new rows and columns. These processing methods provide a lot of control and flexibility to mold your dataset into the desired shape and size with the appropriate features."),Hr.forEach(e),Ms=c(s),Q=n(s,"P",{});var Yr=l(Q);X=p(Yr,"This guide will show you how to:"),Yr.forEach(e),Bs=c(s),T=n(s,"UL",{});var W=l(T);U=n(W,"LI",{});var sg=l(U);Ha=p(sg,"Reorder rows and split the dataset."),sg.forEach(e),Ya=c(W),G=n(W,"LI",{});var ag=l(G);P=p(ag,"Rename and remove columns, and other common column operations."),ag.forEach(e),bt=c(W),Us=n(W,"LI",{});var eg=l(Us);vt=p(eg,"Apply processing functions to each example in a dataset."),eg.forEach(e),wt=c(W),Vs=n(W,"LI",{});var tg=l(Vs);xt=p(tg,"Concatenate datasets."),tg.forEach(e),bh=c(W),Bn=n(W,"LI",{});var ng=l(Bn);vh=p(ng,"Apply a custom formatting transform."),ng.forEach(e),wh=c(W),Un=n(W,"LI",{});var lg=l(Un);xh=p(lg,"Save and export processed datasets."),lg.forEach(e),W.forEach(e),Kr=c(s),$t=n(s,"P",{});var rg=l($t);$h=p(rg,"Load the MRPC dataset from the GLUE benchmark to follow along with our examples:"),rg.forEach(e),Qr=c(s),u(Wa.$$.fragment,s),Xr=c(s),u(Hs.$$.fragment,s),Zr=c(s),ds=n(s,"H2",{class:!0});var xi=l(ds);Ys=n(xi,"A",{id:!0,class:!0,href:!0});var pg=l(Ys);Vn=n(pg,"SPAN",{});var og=l(Vn);u(Ga.$$.fragment,og),og.forEach(e),pg.forEach(e),yh=c(xi),Hn=n(xi,"SPAN",{});var ig=l(Hn);kh=p(ig,"Sort, shuffle, select, split, and shard"),ig.forEach(e),xi.forEach(e),sp=c(s),yt=n(s,"P",{});var hg=l(yt);Eh=p(hg,"There are several methods for rearranging the structure of a dataset. These methods are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks."),hg.forEach(e),ap=c(s),fs=n(s,"H3",{class:!0});var $i=l(fs);Ws=n($i,"A",{id:!0,class:!0,href:!0});var cg=l(Ws);Yn=n(cg,"SPAN",{});var mg=l(Yn);u(Ja.$$.fragment,mg),mg.forEach(e),cg.forEach(e),Dh=c($i),Wn=n($i,"SPAN",{});var dg=l(Wn);Ah=p(dg,"Sort"),dg.forEach(e),$i.forEach(e),ep=c(s),Gs=n(s,"P",{});var yi=l(Gs);Th=p(yi,"Use "),kt=n(yi,"A",{href:!0});var fg=l(kt);Ph=p(fg,"datasets.Dataset.sort()"),fg.forEach(e),Sh=p(yi," to sort a columns values according to their numerical values. The provided column must be NumPy compatible."),yi.forEach(e),tp=c(s),u(Ka.$$.fragment,s),np=c(s),us=n(s,"H3",{class:!0});var ki=l(us);Js=n(ki,"A",{id:!0,class:!0,href:!0});var ug=l(Js);Gn=n(ug,"SPAN",{});var gg=l(Gn);u(Qa.$$.fragment,gg),gg.forEach(e),ug.forEach(e),qh=c(ki),Jn=n(ki,"SPAN",{});var _g=l(Jn);Ch=p(_g,"Shuffle"),_g.forEach(e),ki.forEach(e),lp=c(s),V=n(s,"P",{});var Ma=l(V);Nh=p(Ma,"The "),Et=n(Ma,"A",{href:!0});var jg=l(Et);zh=p(jg,"datasets.Dataset.shuffle()"),jg.forEach(e),Oh=p(Ma," method randomly rearranges the values of a column. You can specify the "),Kn=n(Ma,"CODE",{});var bg=l(Kn);Fh=p(bg,"generator"),bg.forEach(e),Rh=p(Ma," argument in this method to use a different "),Qn=n(Ma,"CODE",{});var vg=l(Qn);Ih=p(vg,"numpy.random.Generator"),vg.forEach(e),Lh=p(Ma," if you want more control over the algorithm used to shuffle the dataset."),Ma.forEach(e),rp=c(s),u(Xa.$$.fragment,s),pp=c(s),gs=n(s,"H3",{class:!0});var Ei=l(gs);Ks=n(Ei,"A",{id:!0,class:!0,href:!0});var wg=l(Ks);Xn=n(wg,"SPAN",{});var xg=l(Xn);u(Za.$$.fragment,xg),xg.forEach(e),wg.forEach(e),Mh=c(Ei),Zn=n(Ei,"SPAN",{});var $g=l(Zn);Bh=p($g,"Select and Filter"),$g.forEach(e),Ei.forEach(e),op=c(s),Z=n(s,"P",{});var Sn=l(Z);Uh=p(Sn,"There are two options for filtering rows in a dataset: "),Dt=n(Sn,"A",{href:!0});var yg=l(Dt);Vh=p(yg,"datasets.Dataset.select()"),yg.forEach(e),Hh=p(Sn," and "),At=n(Sn,"A",{href:!0});var kg=l(At);Yh=p(kg,"datasets.Dataset.filter()"),kg.forEach(e),Wh=p(Sn,"."),Sn.forEach(e),ip=c(s),Tt=n(s,"UL",{});var Eg=l(Tt);Pt=n(Eg,"LI",{});var Qu=l(Pt);St=n(Qu,"A",{href:!0});var Dg=l(St);Gh=p(Dg,"datasets.Dataset.select()"),Dg.forEach(e),Jh=p(Qu," returns rows according to a list of indices:"),Qu.forEach(e),Eg.forEach(e),hp=c(s),u(se.$$.fragment,s),cp=c(s),qt=n(s,"UL",{});var Ag=l(qt);Ct=n(Ag,"LI",{});var Xu=l(Ct);Nt=n(Xu,"A",{href:!0});var Tg=l(Nt);Kh=p(Tg,"datasets.Dataset.filter()"),Tg.forEach(e),Qh=p(Xu," returns rows that match a specified condition:"),Xu.forEach(e),Ag.forEach(e),mp=c(s),u(ae.$$.fragment,s),dp=c(s),_s=n(s,"P",{});var Wr=l(_s);zt=n(Wr,"A",{href:!0});var Pg=l(zt);Xh=p(Pg,"datasets.Dataset.filter()"),Pg.forEach(e),Zh=p(Wr," can also filter by indices if you set "),sl=n(Wr,"CODE",{});var Sg=l(sl);sc=p(Sg,"with_indices=True"),Sg.forEach(e),ac=p(Wr,":"),Wr.forEach(e),fp=c(s),u(ee.$$.fragment,s),up=c(s),js=n(s,"H3",{class:!0});var Di=l(js);Qs=n(Di,"A",{id:!0,class:!0,href:!0});var qg=l(Qs);al=n(qg,"SPAN",{});var Cg=l(al);u(te.$$.fragment,Cg),Cg.forEach(e),qg.forEach(e),ec=c(Di),el=n(Di,"SPAN",{});var Ng=l(el);tc=p(Ng,"Split"),Ng.forEach(e),Di.forEach(e),gp=c(s),bs=n(s,"P",{});var Gr=l(bs);Ot=n(Gr,"A",{href:!0});var zg=l(Ot);nc=p(zg,"datasets.Dataset.train_test_split()"),zg.forEach(e),lc=p(Gr," creates train and test splits, if your dataset doesn\u2019t already have them. This allows you to adjust the relative proportions or absolute number of samples in each split. In the example below, use the "),tl=n(Gr,"CODE",{});var Og=l(tl);rc=p(Og,"test_size"),Og.forEach(e),pc=p(Gr," argument to create a test split that is 10% of the original dataset:"),Gr.forEach(e),_p=c(s),u(ne.$$.fragment,s),jp=c(s),Xs=n(s,"P",{});var Ai=l(Xs);oc=p(Ai,"The splits are shuffled by default, but you can set "),nl=n(Ai,"CODE",{});var Fg=l(nl);ic=p(Fg,"shuffle=False"),Fg.forEach(e),hc=p(Ai," to prevent shuffling."),Ai.forEach(e),bp=c(s),vs=n(s,"H3",{class:!0});var Ti=l(vs);Zs=n(Ti,"A",{id:!0,class:!0,href:!0});var Rg=l(Zs);ll=n(Rg,"SPAN",{});var Ig=l(ll);u(le.$$.fragment,Ig),Ig.forEach(e),Rg.forEach(e),cc=c(Ti),rl=n(Ti,"SPAN",{});var Lg=l(rl);mc=p(Lg,"Shard"),Lg.forEach(e),Ti.forEach(e),vp=c(s),H=n(s,"P",{});var Ba=l(H);dc=p(Ba,"\u{1F917} Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the "),pl=n(Ba,"CODE",{});var Mg=l(pl);fc=p(Mg,"num_shards"),Mg.forEach(e),uc=p(Ba," argument in "),Ft=n(Ba,"A",{href:!0});var Bg=l(Ft);gc=p(Bg,"datasets.Dataset.shard()"),Bg.forEach(e),_c=p(Ba," to determine the number of shards to split the dataset into. You will also need to provide the shard you want to return with the "),ol=n(Ba,"CODE",{});var Ug=l(ol);jc=p(Ug,"index"),Ug.forEach(e),bc=p(Ba," argument."),Ba.forEach(e),wp=c(s),sa=n(s,"P",{});var Pi=l(sa);vc=p(Pi,"For example, the "),re=n(Pi,"A",{href:!0,rel:!0});var Vg=l(re);wc=p(Vg,"imdb"),Vg.forEach(e),xc=p(Pi," dataset has 25000 examples:"),Pi.forEach(e),xp=c(s),u(pe.$$.fragment,s),$p=c(s),Rt=n(s,"P",{});var Hg=l(Rt);$c=p(Hg,"After you shard the dataset into four chunks, the first shard only has 6250 examples:"),Hg.forEach(e),yp=c(s),u(oe.$$.fragment,s),kp=c(s),ws=n(s,"H2",{class:!0});var Si=l(ws);aa=n(Si,"A",{id:!0,class:!0,href:!0});var Yg=l(aa);il=n(Yg,"SPAN",{});var Wg=l(il);u(ie.$$.fragment,Wg),Wg.forEach(e),Yg.forEach(e),yc=c(Si),hl=n(Si,"SPAN",{});var Gg=l(hl);kc=p(Gg,"Rename, remove, cast, and flatten"),Gg.forEach(e),Si.forEach(e),Ep=c(s),It=n(s,"P",{});var Jg=l(It);Ec=p(Jg,"The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures."),Jg.forEach(e),Dp=c(s),xs=n(s,"H3",{class:!0});var qi=l(xs);ea=n(qi,"A",{id:!0,class:!0,href:!0});var Kg=l(ea);cl=n(Kg,"SPAN",{});var Qg=l(cl);u(he.$$.fragment,Qg),Qg.forEach(e),Kg.forEach(e),Dc=c(qi),ml=n(qi,"SPAN",{});var Xg=l(ml);Ac=p(Xg,"Rename"),Xg.forEach(e),qi.forEach(e),Ap=c(s),ta=n(s,"P",{});var Ci=l(ta);Tc=p(Ci,"Use "),Lt=n(Ci,"A",{href:!0});var Zg=l(Lt);Pc=p(Zg,"datasets.Dataset.rename_column()"),Zg.forEach(e),Sc=p(Ci," when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Ci.forEach(e),Tp=c(s),na=n(s,"P",{});var Ni=l(na);qc=p(Ni,"Provide "),Mt=n(Ni,"A",{href:!0});var s2=l(Mt);Cc=p(s2,"datasets.Dataset.rename_column()"),s2.forEach(e),Nc=p(Ni," with the name of the original column, and the new column name:"),Ni.forEach(e),Pp=c(s),u(ce.$$.fragment,s),Sp=c(s),$s=n(s,"H3",{class:!0});var zi=l($s);la=n(zi,"A",{id:!0,class:!0,href:!0});var a2=l(la);dl=n(a2,"SPAN",{});var e2=l(dl);u(me.$$.fragment,e2),e2.forEach(e),a2.forEach(e),zc=c(zi),fl=n(zi,"SPAN",{});var t2=l(fl);Oc=p(t2,"Remove"),t2.forEach(e),zi.forEach(e),qp=c(s),ra=n(s,"P",{});var Oi=l(ra);Fc=p(Oi,"When you need to remove one or more columns, give "),Bt=n(Oi,"A",{href:!0});var n2=l(Bt);Rc=p(n2,"datasets.Dataset.remove_columns()"),n2.forEach(e),Ic=p(Oi," the name of the column to remove. Remove more than one column by providing a list of column names:"),Oi.forEach(e),Cp=c(s),u(de.$$.fragment,s),Np=c(s),ys=n(s,"H3",{class:!0});var Fi=l(ys);pa=n(Fi,"A",{id:!0,class:!0,href:!0});var l2=l(pa);ul=n(l2,"SPAN",{});var r2=l(ul);u(fe.$$.fragment,r2),r2.forEach(e),l2.forEach(e),Lc=c(Fi),gl=n(Fi,"SPAN",{});var p2=l(gl);Mc=p(p2,"Cast"),p2.forEach(e),Fi.forEach(e),zp=c(s),B=n(s,"P",{});var Ls=l(B);Ut=n(Ls,"A",{href:!0});var o2=l(Ut);Bc=p(o2,"datasets.Dataset.cast()"),o2.forEach(e),Uc=p(Ls," changes the feature type of one or more columns. This method takes your new "),_l=n(Ls,"CODE",{});var i2=l(_l);Vc=p(i2,"datasets.Features"),i2.forEach(e),Hc=p(Ls," as its argument. The following sample code shows how to change the feature types of "),jl=n(Ls,"CODE",{});var h2=l(jl);Yc=p(h2,"datasets.ClassLabel"),h2.forEach(e),Wc=p(Ls," and "),bl=n(Ls,"CODE",{});var c2=l(bl);Gc=p(c2,"datasets.Value"),c2.forEach(e),Jc=p(Ls,":"),Ls.forEach(e),Op=c(s),u(ue.$$.fragment,s),Fp=c(s),u(oa.$$.fragment,s),Rp=c(s),ia=n(s,"P",{});var Ri=l(ia);Kc=p(Ri,"Use "),Vt=n(Ri,"A",{href:!0});var m2=l(Vt);Qc=p(m2,"datasets.Dataset.cast_column()"),m2.forEach(e),Xc=p(Ri," to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),Ri.forEach(e),Ip=c(s),u(ge.$$.fragment,s),Lp=c(s),ks=n(s,"H3",{class:!0});var Ii=l(ks);ha=n(Ii,"A",{id:!0,class:!0,href:!0});var d2=l(ha);vl=n(d2,"SPAN",{});var f2=l(vl);u(_e.$$.fragment,f2),f2.forEach(e),d2.forEach(e),Zc=c(Ii),wl=n(Ii,"SPAN",{});var u2=l(wl);sm=p(u2,"Flatten"),u2.forEach(e),Ii.forEach(e),Mp=c(s),ca=n(s,"P",{});var Li=l(ca);am=p(Li,"Sometimes a column can be a nested structure of several types. Use "),Ht=n(Li,"A",{href:!0});var g2=l(Ht);em=p(g2,"datasets.Dataset.flatten()"),g2.forEach(e),tm=p(Li," to extract the subfields into their own separate columns. Take a look at the nested structure below from the SQuAD dataset:"),Li.forEach(e),Bp=c(s),u(je.$$.fragment,s),Up=c(s),O=n(s,"P",{});var is=l(O);nm=p(is,"The "),xl=n(is,"CODE",{});var _2=l(xl);lm=p(_2,"answers"),_2.forEach(e),rm=p(is," field contains two subfields: "),$l=n(is,"CODE",{});var j2=l($l);pm=p(j2,"text"),j2.forEach(e),om=p(is," and "),yl=n(is,"CODE",{});var b2=l(yl);im=p(b2,"answer_start"),b2.forEach(e),hm=p(is,". Flatten them with "),Yt=n(is,"A",{href:!0});var v2=l(Yt);cm=p(v2,"datasets.Dataset.flatten()"),v2.forEach(e),mm=p(is,":"),is.forEach(e),Vp=c(s),u(be.$$.fragment,s),Hp=c(s),ss=n(s,"P",{});var qn=l(ss);dm=p(qn,"Notice how the subfields are now their own independent columns: "),kl=n(qn,"CODE",{});var w2=l(kl);fm=p(w2,"answers.text"),w2.forEach(e),um=p(qn," and "),El=n(qn,"CODE",{});var x2=l(El);gm=p(x2,"answers.answer_start"),x2.forEach(e),_m=p(qn,"."),qn.forEach(e),Yp=c(s),Es=n(s,"H2",{class:!0});var Mi=l(Es);ma=n(Mi,"A",{id:!0,class:!0,href:!0});var $2=l(ma);Dl=n($2,"SPAN",{});var y2=l(Dl);u(ve.$$.fragment,y2),y2.forEach(e),$2.forEach(e),jm=c(Mi),Al=n(Mi,"SPAN",{});var k2=l(Al);bm=p(k2,"Map"),k2.forEach(e),Mi.forEach(e),Wp=c(s),as=n(s,"P",{});var Cn=l(as);vm=p(Cn,"Some of the more powerful applications of \u{1F917} Datasets come from using "),Wt=n(Cn,"A",{href:!0});var E2=l(Wt);wm=p(E2,"datasets.Dataset.map()"),E2.forEach(e),xm=p(Cn,". The primary purpose of "),Gt=n(Cn,"A",{href:!0});var D2=l(Gt);$m=p(D2,"datasets.Dataset.map()"),D2.forEach(e),ym=p(Cn," is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),Cn.forEach(e),Gp=c(s),F=n(s,"P",{});var hs=l(F);km=p(hs,"In the following example, you will prefix each "),Tl=n(hs,"CODE",{});var A2=l(Tl);Em=p(A2,"sentence1"),A2.forEach(e),Dm=p(hs," value in the dataset with "),Pl=n(hs,"CODE",{});var T2=l(Pl);Am=p(T2,"'My sentence: '"),T2.forEach(e),Tm=p(hs,". First, create a function that adds "),Sl=n(hs,"CODE",{});var P2=l(Sl);Pm=p(P2,"'My sentence: '"),P2.forEach(e),Sm=p(hs," to the beginning of each sentence. The function needs to accept and output a "),ql=n(hs,"CODE",{});var S2=l(ql);qm=p(S2,"dict"),S2.forEach(e),Cm=p(hs,":"),hs.forEach(e),Jp=c(s),u(we.$$.fragment,s),Kp=c(s),da=n(s,"P",{});var Bi=l(da);Nm=p(Bi,"Next, apply this function to the dataset with "),Jt=n(Bi,"A",{href:!0});var q2=l(Jt);zm=p(q2,"datasets.Dataset.map()"),q2.forEach(e),Om=p(Bi,":"),Bi.forEach(e),Qp=c(s),u(xe.$$.fragment,s),Xp=c(s),fa=n(s,"P",{});var Ui=l(fa);Fm=p(Ui,"Let\u2019s take a look at another example, except this time, you will remove a column with "),Kt=n(Ui,"A",{href:!0});var C2=l(Kt);Rm=p(C2,"datasets.Dataset.map()"),C2.forEach(e),Im=p(Ui,". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),Ui.forEach(e),Zp=c(s),es=n(s,"P",{});var Nn=l(es);Lm=p(Nn,"Specify the column to remove with the "),Cl=n(Nn,"CODE",{});var N2=l(Cl);Mm=p(N2,"remove_columns"),N2.forEach(e),Bm=p(Nn," argument in "),Qt=n(Nn,"A",{href:!0});var z2=l(Qt);Um=p(z2,"datasets.Dataset.map()"),z2.forEach(e),Vm=p(Nn,":"),Nn.forEach(e),so=c(s),u($e.$$.fragment,s),ao=c(s),u(ua.$$.fragment,s),eo=c(s),ts=n(s,"P",{});var zn=l(ts);Hm=p(zn,"You can also use "),Xt=n(zn,"A",{href:!0});var O2=l(Xt);Ym=p(O2,"datasets.Dataset.map()"),O2.forEach(e),Wm=p(zn," with indices if you set "),Nl=n(zn,"CODE",{});var F2=l(Nl);Gm=p(F2,"with_indices=True"),F2.forEach(e),Jm=p(zn,". The example below adds the index to the beginning of each sentence:"),zn.forEach(e),to=c(s),u(ye.$$.fragment,s),no=c(s),S=n(s,"P",{});var N=l(S);Km=p(N,"You can also use "),Zt=n(N,"A",{href:!0});var R2=l(Zt);Qm=p(R2,"datasets.Dataset.map()"),R2.forEach(e),Xm=p(N," with the rank of the process if you set "),zl=n(N,"CODE",{});var I2=l(zl);Zm=p(I2,"with_rank=True"),I2.forEach(e),sd=p(N,". This is analogous to "),Ol=n(N,"CODE",{});var L2=l(Ol);ad=p(L2,"with_indices"),L2.forEach(e),ed=p(N,". The "),Fl=n(N,"CODE",{});var M2=l(Fl);td=p(M2,"rank"),M2.forEach(e),nd=p(N," argument in the mapped function goes after the "),Rl=n(N,"CODE",{});var B2=l(Rl);ld=p(B2,"index"),B2.forEach(e),rd=p(N," one if it is already present. The main use-case for it is to parallelize your computation across several GPUs. This requires setting "),Il=n(N,"EM",{});var U2=l(Il);pd=p(U2,"multiprocess.set_start_method(\u201Cspawn\u201D)"),U2.forEach(e),od=p(N,", without which you will receive a CUDA error: "),Ll=n(N,"EM",{});var V2=l(Ll);id=p(V2,"RuntimeError: Cannot re-initialize CUDA in forked subprocess. To use CUDA with multiprocessing, you must use the \u2018spawn\u2019 start method"),V2.forEach(e),hd=p(N,"."),N.forEach(e),lo=c(s),u(ke.$$.fragment,s),ro=c(s),Ds=n(s,"H3",{class:!0});var Vi=l(Ds);ga=n(Vi,"A",{id:!0,class:!0,href:!0});var H2=l(ga);Ml=n(H2,"SPAN",{});var Y2=l(Ml);u(Ee.$$.fragment,Y2),Y2.forEach(e),H2.forEach(e),cd=c(Vi),Bl=n(Vi,"SPAN",{});var W2=l(Bl);md=p(W2,"Multiprocessing"),W2.forEach(e),Vi.forEach(e),po=c(s),ns=n(s,"P",{});var On=l(ns);dd=p(On,"Multiprocessing can significantly speed up processing by parallelizing the processes on your CPU. Set the "),Ul=n(On,"CODE",{});var G2=l(Ul);fd=p(G2,"num_proc"),G2.forEach(e),ud=p(On," argument in "),sn=n(On,"A",{href:!0});var J2=l(sn);gd=p(J2,"datasets.Dataset.map()"),J2.forEach(e),_d=p(On," to set the number of processes to use:"),On.forEach(e),oo=c(s),u(De.$$.fragment,s),io=c(s),As=n(s,"H3",{class:!0});var Hi=l(As);_a=n(Hi,"A",{id:!0,class:!0,href:!0});var K2=l(_a);Vl=n(K2,"SPAN",{});var Q2=l(Vl);u(Ae.$$.fragment,Q2),Q2.forEach(e),K2.forEach(e),jd=c(Hi),Hl=n(Hi,"SPAN",{});var X2=l(Hl);bd=p(X2,"Batch processing"),X2.forEach(e),Hi.forEach(e),ho=c(s),J=n(s,"P",{});var jt=l(J);an=n(jt,"A",{href:!0});var Z2=l(an);vd=p(Z2,"datasets.Dataset.map()"),Z2.forEach(e),wd=p(jt," also supports working with batches of examples. Operate on batches by setting "),Yl=n(jt,"CODE",{});var s_=l(Yl);xd=p(s_,"batched=True"),s_.forEach(e),$d=p(jt,". The default batch size is 1000, but you can adjust it with the "),Wl=n(jt,"CODE",{});var a_=l(Wl);yd=p(a_,"batch_size"),a_.forEach(e),kd=p(jt," argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),jt.forEach(e),co=c(s),Ts=n(s,"H4",{class:!0});var Yi=l(Ts);ja=n(Yi,"A",{id:!0,class:!0,href:!0});var e_=l(ja);Gl=n(e_,"SPAN",{});var t_=l(Gl);u(Te.$$.fragment,t_),t_.forEach(e),e_.forEach(e),Ed=c(Yi),Jl=n(Yi,"SPAN",{});var n_=l(Jl);Dd=p(n_,"Tokenization"),n_.forEach(e),Yi.forEach(e),mo=c(s),en=n(s,"P",{});var l_=l(en);Ad=p(l_,"One of the most obvious use-cases for batch processing is tokenization, which accepts batches of inputs."),l_.forEach(e),fo=c(s),tn=n(s,"P",{});var r_=l(tn);Td=p(r_,"First, load the tokenizer from the BERT model:"),r_.forEach(e),uo=c(s),u(Pe.$$.fragment,s),go=c(s),ba=n(s,"P",{});var Wi=l(ba);Pd=p(Wi,"Apply the tokenizer to batches of the "),Kl=n(Wi,"CODE",{});var p_=l(Kl);Sd=p(p_,"sentence1"),p_.forEach(e),qd=p(Wi," field:"),Wi.forEach(e),_o=c(s),u(Se.$$.fragment,s),jo=c(s),R=n(s,"P",{});var cs=l(R);Cd=p(cs,"Now you have three new columns, "),Ql=n(cs,"CODE",{});var o_=l(Ql);Nd=p(o_,"input_ids"),o_.forEach(e),zd=p(cs,", "),Xl=n(cs,"CODE",{});var i_=l(Xl);Od=p(i_,"token_type_ids"),i_.forEach(e),Fd=p(cs,", "),Zl=n(cs,"CODE",{});var h_=l(Zl);Rd=p(h_,"attention_mask"),h_.forEach(e),Id=p(cs,", that contain the encoded version of the "),sr=n(cs,"CODE",{});var c_=l(sr);Ld=p(c_,"sentence1"),c_.forEach(e),Md=p(cs," field."),cs.forEach(e),bo=c(s),Ps=n(s,"H4",{class:!0});var Gi=l(Ps);va=n(Gi,"A",{id:!0,class:!0,href:!0});var m_=l(va);ar=n(m_,"SPAN",{});var d_=l(ar);u(qe.$$.fragment,d_),d_.forEach(e),m_.forEach(e),Bd=c(Gi),er=n(Gi,"SPAN",{});var f_=l(er);Ud=p(f_,"Split long examples"),f_.forEach(e),Gi.forEach(e),vo=c(s),nn=n(s,"P",{});var u_=l(nn);Vd=p(u_,"When your examples are too long, you may want to split them into several smaller snippets. Begin by creating a function that:"),u_.forEach(e),wo=c(s),wa=n(s,"OL",{});var Ji=l(wa);tr=n(Ji,"LI",{});var g_=l(tr);Ce=n(g_,"P",{});var Ki=l(Ce);Hd=p(Ki,"Splits the "),nr=n(Ki,"CODE",{});var __=l(nr);Yd=p(__,"sentence1"),__.forEach(e),Wd=p(Ki," field into snippets of 50 characters."),Ki.forEach(e),g_.forEach(e),Gd=c(Ji),lr=n(Ji,"LI",{});var j_=l(lr);rr=n(j_,"P",{});var b_=l(rr);Jd=p(b_,"Stacks all the snippets together to create the new dataset."),b_.forEach(e),j_.forEach(e),Ji.forEach(e),xo=c(s),u(Ne.$$.fragment,s),$o=c(s),xa=n(s,"P",{});var Qi=l(xa);Kd=p(Qi,"Apply the function with "),ln=n(Qi,"A",{href:!0});var v_=l(ln);Qd=p(v_,"datasets.Dataset.map()"),v_.forEach(e),Xd=p(Qi,":"),Qi.forEach(e),yo=c(s),u(ze.$$.fragment,s),ko=c(s),rn=n(s,"P",{});var w_=l(rn);Zd=p(w_,"Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset."),w_.forEach(e),Eo=c(s),u(Oe.$$.fragment,s),Do=c(s),Ss=n(s,"H4",{class:!0});var Xi=l(Ss);$a=n(Xi,"A",{id:!0,class:!0,href:!0});var x_=l($a);pr=n(x_,"SPAN",{});var $_=l(pr);u(Fe.$$.fragment,$_),$_.forEach(e),x_.forEach(e),sf=c(Xi),or=n(Xi,"SPAN",{});var y_=l(or);af=p(y_,"Data augmentation"),y_.forEach(e),Xi.forEach(e),Ao=c(s),pn=n(s,"P",{});var k_=l(pn);ef=p(k_,"With batch processing, you can even augment your dataset with additional examples. In the following example, you will generate additional words for a masked token in a sentence."),k_.forEach(e),To=c(s),ls=n(s,"P",{});var Fn=l(ls);tf=p(Fn,"Load the "),Re=n(Fn,"A",{href:!0,rel:!0});var E_=l(Re);nf=p(E_,"RoBERTA"),E_.forEach(e),lf=p(Fn," model for use in the \u{1F917} Transformer "),Ie=n(Fn,"A",{href:!0,rel:!0});var D_=l(Ie);rf=p(D_,"FillMaskPipeline"),D_.forEach(e),pf=p(Fn,":"),Fn.forEach(e),Po=c(s),u(Le.$$.fragment,s),So=c(s),on=n(s,"P",{});var A_=l(on);of=p(A_,"Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA."),A_.forEach(e),qo=c(s),u(Me.$$.fragment,s),Co=c(s),ya=n(s,"P",{});var Zi=l(ya);hf=p(Zi,"Use "),hn=n(Zi,"A",{href:!0});var T_=l(hn);cf=p(T_,"datasets.Dataset.map()"),T_.forEach(e),mf=p(Zi," to apply the function over the whole dataset:"),Zi.forEach(e),No=c(s),u(Be.$$.fragment,s),zo=c(s),I=n(s,"P",{});var ms=l(I);df=p(ms,"For each original sentence, RoBERTA augmented a random word with three alternatives. In the first sentence, the word "),ir=n(ms,"CODE",{});var P_=l(ir);ff=p(P_,"distorting"),P_.forEach(e),uf=p(ms," is augmented with "),hr=n(ms,"CODE",{});var S_=l(hr);gf=p(S_,"withholding"),S_.forEach(e),_f=p(ms,", "),cr=n(ms,"CODE",{});var q_=l(cr);jf=p(q_,"suppressing"),q_.forEach(e),bf=p(ms,", and "),mr=n(ms,"CODE",{});var C_=l(mr);vf=p(C_,"destroying"),C_.forEach(e),wf=p(ms,"."),ms.forEach(e),Oo=c(s),qs=n(s,"H3",{class:!0});var sh=l(qs);ka=n(sh,"A",{id:!0,class:!0,href:!0});var N_=l(ka);dr=n(N_,"SPAN",{});var z_=l(dr);u(Ue.$$.fragment,z_),z_.forEach(e),N_.forEach(e),xf=c(sh),fr=n(sh,"SPAN",{});var O_=l(fr);$f=p(O_,"Process multiple splits"),O_.forEach(e),sh.forEach(e),Fo=c(s),rs=n(s,"P",{});var Rn=l(rs);yf=p(Rn,"Many datasets have splits that you can process simultaneously with "),cn=n(Rn,"A",{href:!0});var F_=l(cn);kf=p(F_,"datasets.DatasetDict.map()"),F_.forEach(e),Ef=p(Rn,". For example, tokenize the "),ur=n(Rn,"CODE",{});var R_=l(ur);Df=p(R_,"sentence1"),R_.forEach(e),Af=p(Rn," field in the train and test split by:"),Rn.forEach(e),Ro=c(s),u(Ve.$$.fragment,s),Io=c(s),Cs=n(s,"H3",{class:!0});var ah=l(Cs);Ea=n(ah,"A",{id:!0,class:!0,href:!0});var I_=l(Ea);gr=n(I_,"SPAN",{});var L_=l(gr);u(He.$$.fragment,L_),L_.forEach(e),I_.forEach(e),Tf=c(ah),_r=n(ah,"SPAN",{});var M_=l(_r);Pf=p(M_,"Distributed usage"),M_.forEach(e),ah.forEach(e),Lo=c(s),ps=n(s,"P",{});var In=l(ps);Sf=p(In,"When you use "),mn=n(In,"A",{href:!0});var B_=l(mn);qf=p(B_,"datasets.Dataset.map()"),B_.forEach(e),Cf=p(In," in a distributed setting, you should also use "),Ye=n(In,"A",{href:!0,rel:!0});var U_=l(Ye);Nf=p(U_,"torch.distributed.barrier"),U_.forEach(e),zf=p(In,". This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work."),In.forEach(e),Mo=c(s),Da=n(s,"P",{});var eh=l(Da);Of=p(eh,"The following example shows how you can use "),jr=n(eh,"CODE",{});var V_=l(jr);Ff=p(V_,"torch.distributed.barrier"),V_.forEach(e),Rf=p(eh," to synchronize the processes:"),eh.forEach(e),Bo=c(s),u(We.$$.fragment,s),Uo=c(s),Ns=n(s,"H2",{class:!0});var th=l(Ns);Aa=n(th,"A",{id:!0,class:!0,href:!0});var H_=l(Aa);br=n(H_,"SPAN",{});var Y_=l(br);u(Ge.$$.fragment,Y_),Y_.forEach(e),H_.forEach(e),If=c(th),vr=n(th,"SPAN",{});var W_=l(vr);Lf=p(W_,"Concatenate"),W_.forEach(e),th.forEach(e),Vo=c(s),Ta=n(s,"P",{});var nh=l(Ta);Mf=p(nh,"Separate datasets can be concatenated if they share the same column types. Concatenate datasets with "),dn=n(nh,"A",{href:!0});var G_=l(dn);Bf=p(G_,"datasets.concatenate_datasets()"),G_.forEach(e),Uf=p(nh,":"),nh.forEach(e),Ho=c(s),u(Je.$$.fragment,s),Yo=c(s),u(Pa.$$.fragment,s),Wo=c(s),fn=n(s,"P",{});var J_=l(fn);Vf=p(J_,"You can also concatenate two datasets horizontally (axis=1) as long as they have the same number of rows:"),J_.forEach(e),Go=c(s),u(Ke.$$.fragment,s),Jo=c(s),zs=n(s,"H2",{class:!0});var lh=l(zs);Sa=n(lh,"A",{id:!0,class:!0,href:!0});var K_=l(Sa);wr=n(K_,"SPAN",{});var Q_=l(wr);u(Qe.$$.fragment,Q_),Q_.forEach(e),K_.forEach(e),Hf=c(lh),xr=n(lh,"SPAN",{});var X_=l(xr);Yf=p(X_,"Format"),X_.forEach(e),lh.forEach(e),Ko=c(s),os=n(s,"P",{});var Ln=l(os);Wf=p(Ln,"Set a dataset to a TensorFlow compatible format with "),un=n(Ln,"A",{href:!0});var Z_=l(un);Gf=p(Z_,"datasets.Dataset.set_format()"),Z_.forEach(e),Jf=p(Ln,". Specify "),$r=n(Ln,"CODE",{});var sj=l($r);Kf=p(sj,"type=tensorflow"),sj.forEach(e),Qf=p(Ln," and the columns that should be formatted:"),Ln.forEach(e),Qo=c(s),u(Xe.$$.fragment,s),Xo=c(s),Y=n(s,"P",{});var Ua=l(Y);Xf=p(Ua,"Then you can wrap the dataset with "),yr=n(Ua,"CODE",{});var aj=l(yr);Zf=p(aj,"tf.data.Dataset"),aj.forEach(e),su=p(Ua,". This method gives you more control over how to create a "),Ze=n(Ua,"A",{href:!0,rel:!0});var ej=l(Ze);au=p(ej,"TensorFlow Dataset"),ej.forEach(e),eu=p(Ua,". In the example below, the dataset is created "),kr=n(Ua,"CODE",{});var tj=l(kr);tu=p(tj,"from_tensor_slices"),tj.forEach(e),nu=p(Ua,":"),Ua.forEach(e),Zo=c(s),u(st.$$.fragment,s),si=c(s),Os=n(s,"P",{});var Jr=l(Os);gn=n(Jr,"A",{href:!0});var nj=l(gn);lu=p(nj,"datasets.Dataset.with_format()"),nj.forEach(e),ru=p(Jr," provides an alternative method to set the format. This method will return a new "),_n=n(Jr,"A",{href:!0});var lj=l(_n);pu=p(lj,"datasets.Dataset"),lj.forEach(e),ou=p(Jr," object with your specified format:"),Jr.forEach(e),ai=c(s),u(at.$$.fragment,s),ei=c(s),u(qa.$$.fragment,s),ti=c(s),Ca=n(s,"P",{});var rh=l(Ca);iu=p(rh,"Use "),jn=n(rh,"A",{href:!0});var rj=l(jn);hu=p(rj,"datasets.Dataset.reset_format()"),rj.forEach(e),cu=p(rh," if you need to reset the dataset to the original format:"),rh.forEach(e),ni=c(s),u(et.$$.fragment,s),li=c(s),Fs=n(s,"H3",{class:!0});var ph=l(Fs);Na=n(ph,"A",{id:!0,class:!0,href:!0});var pj=l(Na);Er=n(pj,"SPAN",{});var oj=l(Er);u(tt.$$.fragment,oj),oj.forEach(e),pj.forEach(e),mu=c(ph),Dr=n(ph,"SPAN",{});var ij=l(Dr);du=p(ij,"Format transform"),ij.forEach(e),ph.forEach(e),ri=c(s),nt=n(s,"P",{});var Zu=l(nt);bn=n(Zu,"A",{href:!0});var hj=l(bn);fu=p(hj,"datasets.Dataset.set_transform()"),hj.forEach(e),uu=p(Zu," allows you to apply a custom formatting transform on-the-fly. This will replace any previously specified format. For example, you can use this method to tokenize and pad tokens on-the-fly:"),Zu.forEach(e),pi=c(s),u(lt.$$.fragment,s),oi=c(s),vn=n(s,"P",{});var cj=l(vn);gu=p(cj,"In this case, the tokenization is applied only when the examples are accessed."),cj.forEach(e),ii=c(s),Rs=n(s,"H2",{class:!0});var oh=l(Rs);za=n(oh,"A",{id:!0,class:!0,href:!0});var mj=l(za);Ar=n(mj,"SPAN",{});var dj=l(Ar);u(rt.$$.fragment,dj),dj.forEach(e),mj.forEach(e),_u=c(oh),Tr=n(oh,"SPAN",{});var fj=l(Tr);ju=p(fj,"Save"),fj.forEach(e),oh.forEach(e),hi=c(s),Oa=n(s,"P",{});var ih=l(Oa);bu=p(ih,"Once you are done processing your dataset, you can save and reuse it later with "),wn=n(ih,"A",{href:!0});var uj=l(wn);vu=p(uj,"datasets.Dataset.save_to_disk()"),uj.forEach(e),wu=p(ih,"."),ih.forEach(e),ci=c(s),xn=n(s,"P",{});var gj=l(xn);xu=p(gj,"Save your dataset by providing the path to the directory you wish to save it to:"),gj.forEach(e),mi=c(s),u(pt.$$.fragment,s),di=c(s),Fa=n(s,"P",{});var hh=l(Fa);$u=p(hh,"When you want to use your dataset again, use "),$n=n(hh,"A",{href:!0});var _j=l($n);yu=p(_j,"datasets.load_from_disk()"),_j.forEach(e),ku=p(hh," to reload it:"),hh.forEach(e),fi=c(s),u(ot.$$.fragment,s),ui=c(s),u(Ra.$$.fragment,s),gi=c(s),Is=n(s,"H2",{class:!0});var ch=l(Is);Ia=n(ch,"A",{id:!0,class:!0,href:!0});var jj=l(Ia);Pr=n(jj,"SPAN",{});var bj=l(Pr);u(it.$$.fragment,bj),bj.forEach(e),jj.forEach(e),Eu=c(ch),Sr=n(ch,"SPAN",{});var vj=l(Sr);Du=p(vj,"Export"),vj.forEach(e),ch.forEach(e),_i=c(s),yn=n(s,"P",{});var wj=l(yn);Au=p(wj,"\u{1F917} Datasets supports exporting as well, so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:"),wj.forEach(e),ji=c(s),La=n(s,"TABLE",{});var mh=l(La);qr=n(mh,"THEAD",{});var xj=l(qr);ht=n(xj,"TR",{});var dh=l(ht);Cr=n(dh,"TH",{});var $j=l(Cr);Tu=p($j,"File type"),$j.forEach(e),Pu=c(dh),Nr=n(dh,"TH",{});var yj=l(Nr);Su=p(yj,"Export method"),yj.forEach(e),dh.forEach(e),xj.forEach(e),qu=c(mh),K=n(mh,"TBODY",{});var Va=l(K);ct=n(Va,"TR",{});var fh=l(ct);zr=n(fh,"TD",{});var kj=l(zr);Cu=p(kj,"CSV"),kj.forEach(e),Nu=c(fh),Or=n(fh,"TD",{});var Ej=l(Or);kn=n(Ej,"A",{href:!0});var Dj=l(kn);zu=p(Dj,"datasets.Dataset.to_csv()"),Dj.forEach(e),Ej.forEach(e),fh.forEach(e),Ou=c(Va),mt=n(Va,"TR",{});var uh=l(mt);Fr=n(uh,"TD",{});var Aj=l(Fr);Fu=p(Aj,"JSON"),Aj.forEach(e),Ru=c(uh),Rr=n(uh,"TD",{});var Tj=l(Rr);En=n(Tj,"A",{href:!0});var Pj=l(En);Iu=p(Pj,"datasets.Dataset.to_json()"),Pj.forEach(e),Tj.forEach(e),uh.forEach(e),Lu=c(Va),dt=n(Va,"TR",{});var gh=l(dt);Ir=n(gh,"TD",{});var Sj=l(Ir);Mu=p(Sj,"Parquet"),Sj.forEach(e),Bu=c(gh),Lr=n(gh,"TD",{});var qj=l(Lr);Dn=n(qj,"A",{href:!0});var Cj=l(Dn);Uu=p(Cj,"datasets.Dataset.to_parquet()"),Cj.forEach(e),qj.forEach(e),gh.forEach(e),Vu=c(Va),ft=n(Va,"TR",{});var _h=l(ft);Mr=n(_h,"TD",{});var Nj=l(Mr);Hu=p(Nj,"In-memory Python object"),Nj.forEach(e),Yu=c(_h),ut=n(_h,"TD",{});var jh=l(ut);An=n(jh,"A",{href:!0});var zj=l(An);Wu=p(zj,"datasets.Dataset.to_pandas()"),zj.forEach(e),Gu=p(jh," or "),Tn=n(jh,"A",{href:!0});var Oj=l(Tn);Ju=p(Oj,"datasets.Dataset.to_dict()"),Oj.forEach(e),jh.forEach(e),_h.forEach(e),Va.forEach(e),mh.forEach(e),bi=c(s),Pn=n(s,"P",{});var Fj=l(Pn);Ku=p(Fj,"For example, export your dataset to a CSV file like this:"),Fj.forEach(e),vi=c(s),u(gt.$$.fragment,s),this.h()},h(){m(d,"name","hf:doc:metadata"),m(d,"content",JSON.stringify(Jj)),m($,"id","process"),m($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m($,"href","#process"),m(v,"class","relative group"),m(Ys,"id","sort-shuffle-select-split-and-shard"),m(Ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ys,"href","#sort-shuffle-select-split-and-shard"),m(ds,"class","relative group"),m(Ws,"id","sort"),m(Ws,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ws,"href","#sort"),m(fs,"class","relative group"),m(kt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.sort"),m(Js,"id","shuffle"),m(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Js,"href","#shuffle"),m(us,"class","relative group"),m(Et,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.shuffle"),m(Ks,"id","select-and-filter"),m(Ks,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ks,"href","#select-and-filter"),m(gs,"class","relative group"),m(Dt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.select"),m(At,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.filter"),m(St,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.select"),m(Nt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.filter"),m(zt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.filter"),m(Qs,"id","split"),m(Qs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Qs,"href","#split"),m(js,"class","relative group"),m(Ot,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.train_test_split"),m(Zs,"id","shard"),m(Zs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Zs,"href","#shard"),m(vs,"class","relative group"),m(Ft,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.shard"),m(re,"href","https://huggingface.co/datasets/imdb"),m(re,"rel","nofollow"),m(aa,"id","rename-remove-cast-and-flatten"),m(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(aa,"href","#rename-remove-cast-and-flatten"),m(ws,"class","relative group"),m(ea,"id","rename"),m(ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ea,"href","#rename"),m(xs,"class","relative group"),m(Lt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.rename_column"),m(Mt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.rename_column"),m(la,"id","remove"),m(la,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(la,"href","#remove"),m($s,"class","relative group"),m(Bt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.remove_columns"),m(pa,"id","cast"),m(pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(pa,"href","#cast"),m(ys,"class","relative group"),m(Ut,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.cast"),m(Vt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.cast_column"),m(ha,"id","flatten"),m(ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ha,"href","#flatten"),m(ks,"class","relative group"),m(Ht,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.flatten"),m(Yt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.flatten"),m(ma,"id","map"),m(ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ma,"href","#map"),m(Es,"class","relative group"),m(Wt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(Gt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(Jt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(Kt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(Qt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(Xt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(Zt,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(ga,"id","multiprocessing"),m(ga,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ga,"href","#multiprocessing"),m(Ds,"class","relative group"),m(sn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(_a,"id","batch-processing"),m(_a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(_a,"href","#batch-processing"),m(As,"class","relative group"),m(an,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(ja,"id","tokenization"),m(ja,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ja,"href","#tokenization"),m(Ts,"class","relative group"),m(va,"id","split-long-examples"),m(va,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(va,"href","#split-long-examples"),m(Ps,"class","relative group"),m(ln,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m($a,"id","data-augmentation"),m($a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m($a,"href","#data-augmentation"),m(Ss,"class","relative group"),m(Re,"href","https://huggingface.co/roberta-base"),m(Re,"rel","nofollow"),m(Ie,"href","https://huggingface.co/transformers/main_classes/pipelines#transformers.FillMaskPipeline"),m(Ie,"rel","nofollow"),m(hn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(ka,"id","process-multiple-splits"),m(ka,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ka,"href","#process-multiple-splits"),m(qs,"class","relative group"),m(cn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict.map"),m(Ea,"id","distributed-usage"),m(Ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ea,"href","#distributed-usage"),m(Cs,"class","relative group"),m(mn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),m(Ye,"href","https://pytorch.org/docs/stable/distributed?highlight=barrier#torch.distributed.barrier"),m(Ye,"rel","nofollow"),m(Aa,"id","concatenate"),m(Aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Aa,"href","#concatenate"),m(Ns,"class","relative group"),m(dn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.concatenate_datasets"),m(Sa,"id","format"),m(Sa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Sa,"href","#format"),m(zs,"class","relative group"),m(un,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format"),m(Ze,"href","https://www.tensorflow.org/api_docs/python/tf/data/Dataset"),m(Ze,"rel","nofollow"),m(gn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.with_format"),m(_n,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),m(jn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.reset_format"),m(Na,"id","format-transform"),m(Na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Na,"href","#format-transform"),m(Fs,"class","relative group"),m(bn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_transform"),m(za,"id","save"),m(za,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(za,"href","#save"),m(Rs,"class","relative group"),m(wn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),m($n,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_from_disk"),m(Ia,"id","export"),m(Ia,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ia,"href","#export"),m(Is,"class","relative group"),m(kn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.to_csv"),m(En,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.to_json"),m(Dn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.to_parquet"),m(An,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.to_pandas"),m(Tn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.to_dict")},m(s,o){a(document.head,d),i(s,k,o),i(s,v,o),a(v,$),a($,E),g(x,E,null),a(v,y),a(v,A),a(A,C),i(s,q,o),i(s,L,o),a(L,M),i(s,Ms,o),i(s,Q,o),a(Q,X),i(s,Bs,o),i(s,T,o),a(T,U),a(U,Ha),a(T,Ya),a(T,G),a(G,P),a(T,bt),a(T,Us),a(Us,vt),a(T,wt),a(T,Vs),a(Vs,xt),a(T,bh),a(T,Bn),a(Bn,vh),a(T,wh),a(T,Un),a(Un,xh),i(s,Kr,o),i(s,$t,o),a($t,$h),i(s,Qr,o),g(Wa,s,o),i(s,Xr,o),g(Hs,s,o),i(s,Zr,o),i(s,ds,o),a(ds,Ys),a(Ys,Vn),g(Ga,Vn,null),a(ds,yh),a(ds,Hn),a(Hn,kh),i(s,sp,o),i(s,yt,o),a(yt,Eh),i(s,ap,o),i(s,fs,o),a(fs,Ws),a(Ws,Yn),g(Ja,Yn,null),a(fs,Dh),a(fs,Wn),a(Wn,Ah),i(s,ep,o),i(s,Gs,o),a(Gs,Th),a(Gs,kt),a(kt,Ph),a(Gs,Sh),i(s,tp,o),g(Ka,s,o),i(s,np,o),i(s,us,o),a(us,Js),a(Js,Gn),g(Qa,Gn,null),a(us,qh),a(us,Jn),a(Jn,Ch),i(s,lp,o),i(s,V,o),a(V,Nh),a(V,Et),a(Et,zh),a(V,Oh),a(V,Kn),a(Kn,Fh),a(V,Rh),a(V,Qn),a(Qn,Ih),a(V,Lh),i(s,rp,o),g(Xa,s,o),i(s,pp,o),i(s,gs,o),a(gs,Ks),a(Ks,Xn),g(Za,Xn,null),a(gs,Mh),a(gs,Zn),a(Zn,Bh),i(s,op,o),i(s,Z,o),a(Z,Uh),a(Z,Dt),a(Dt,Vh),a(Z,Hh),a(Z,At),a(At,Yh),a(Z,Wh),i(s,ip,o),i(s,Tt,o),a(Tt,Pt),a(Pt,St),a(St,Gh),a(Pt,Jh),i(s,hp,o),g(se,s,o),i(s,cp,o),i(s,qt,o),a(qt,Ct),a(Ct,Nt),a(Nt,Kh),a(Ct,Qh),i(s,mp,o),g(ae,s,o),i(s,dp,o),i(s,_s,o),a(_s,zt),a(zt,Xh),a(_s,Zh),a(_s,sl),a(sl,sc),a(_s,ac),i(s,fp,o),g(ee,s,o),i(s,up,o),i(s,js,o),a(js,Qs),a(Qs,al),g(te,al,null),a(js,ec),a(js,el),a(el,tc),i(s,gp,o),i(s,bs,o),a(bs,Ot),a(Ot,nc),a(bs,lc),a(bs,tl),a(tl,rc),a(bs,pc),i(s,_p,o),g(ne,s,o),i(s,jp,o),i(s,Xs,o),a(Xs,oc),a(Xs,nl),a(nl,ic),a(Xs,hc),i(s,bp,o),i(s,vs,o),a(vs,Zs),a(Zs,ll),g(le,ll,null),a(vs,cc),a(vs,rl),a(rl,mc),i(s,vp,o),i(s,H,o),a(H,dc),a(H,pl),a(pl,fc),a(H,uc),a(H,Ft),a(Ft,gc),a(H,_c),a(H,ol),a(ol,jc),a(H,bc),i(s,wp,o),i(s,sa,o),a(sa,vc),a(sa,re),a(re,wc),a(sa,xc),i(s,xp,o),g(pe,s,o),i(s,$p,o),i(s,Rt,o),a(Rt,$c),i(s,yp,o),g(oe,s,o),i(s,kp,o),i(s,ws,o),a(ws,aa),a(aa,il),g(ie,il,null),a(ws,yc),a(ws,hl),a(hl,kc),i(s,Ep,o),i(s,It,o),a(It,Ec),i(s,Dp,o),i(s,xs,o),a(xs,ea),a(ea,cl),g(he,cl,null),a(xs,Dc),a(xs,ml),a(ml,Ac),i(s,Ap,o),i(s,ta,o),a(ta,Tc),a(ta,Lt),a(Lt,Pc),a(ta,Sc),i(s,Tp,o),i(s,na,o),a(na,qc),a(na,Mt),a(Mt,Cc),a(na,Nc),i(s,Pp,o),g(ce,s,o),i(s,Sp,o),i(s,$s,o),a($s,la),a(la,dl),g(me,dl,null),a($s,zc),a($s,fl),a(fl,Oc),i(s,qp,o),i(s,ra,o),a(ra,Fc),a(ra,Bt),a(Bt,Rc),a(ra,Ic),i(s,Cp,o),g(de,s,o),i(s,Np,o),i(s,ys,o),a(ys,pa),a(pa,ul),g(fe,ul,null),a(ys,Lc),a(ys,gl),a(gl,Mc),i(s,zp,o),i(s,B,o),a(B,Ut),a(Ut,Bc),a(B,Uc),a(B,_l),a(_l,Vc),a(B,Hc),a(B,jl),a(jl,Yc),a(B,Wc),a(B,bl),a(bl,Gc),a(B,Jc),i(s,Op,o),g(ue,s,o),i(s,Fp,o),g(oa,s,o),i(s,Rp,o),i(s,ia,o),a(ia,Kc),a(ia,Vt),a(Vt,Qc),a(ia,Xc),i(s,Ip,o),g(ge,s,o),i(s,Lp,o),i(s,ks,o),a(ks,ha),a(ha,vl),g(_e,vl,null),a(ks,Zc),a(ks,wl),a(wl,sm),i(s,Mp,o),i(s,ca,o),a(ca,am),a(ca,Ht),a(Ht,em),a(ca,tm),i(s,Bp,o),g(je,s,o),i(s,Up,o),i(s,O,o),a(O,nm),a(O,xl),a(xl,lm),a(O,rm),a(O,$l),a($l,pm),a(O,om),a(O,yl),a(yl,im),a(O,hm),a(O,Yt),a(Yt,cm),a(O,mm),i(s,Vp,o),g(be,s,o),i(s,Hp,o),i(s,ss,o),a(ss,dm),a(ss,kl),a(kl,fm),a(ss,um),a(ss,El),a(El,gm),a(ss,_m),i(s,Yp,o),i(s,Es,o),a(Es,ma),a(ma,Dl),g(ve,Dl,null),a(Es,jm),a(Es,Al),a(Al,bm),i(s,Wp,o),i(s,as,o),a(as,vm),a(as,Wt),a(Wt,wm),a(as,xm),a(as,Gt),a(Gt,$m),a(as,ym),i(s,Gp,o),i(s,F,o),a(F,km),a(F,Tl),a(Tl,Em),a(F,Dm),a(F,Pl),a(Pl,Am),a(F,Tm),a(F,Sl),a(Sl,Pm),a(F,Sm),a(F,ql),a(ql,qm),a(F,Cm),i(s,Jp,o),g(we,s,o),i(s,Kp,o),i(s,da,o),a(da,Nm),a(da,Jt),a(Jt,zm),a(da,Om),i(s,Qp,o),g(xe,s,o),i(s,Xp,o),i(s,fa,o),a(fa,Fm),a(fa,Kt),a(Kt,Rm),a(fa,Im),i(s,Zp,o),i(s,es,o),a(es,Lm),a(es,Cl),a(Cl,Mm),a(es,Bm),a(es,Qt),a(Qt,Um),a(es,Vm),i(s,so,o),g($e,s,o),i(s,ao,o),g(ua,s,o),i(s,eo,o),i(s,ts,o),a(ts,Hm),a(ts,Xt),a(Xt,Ym),a(ts,Wm),a(ts,Nl),a(Nl,Gm),a(ts,Jm),i(s,to,o),g(ye,s,o),i(s,no,o),i(s,S,o),a(S,Km),a(S,Zt),a(Zt,Qm),a(S,Xm),a(S,zl),a(zl,Zm),a(S,sd),a(S,Ol),a(Ol,ad),a(S,ed),a(S,Fl),a(Fl,td),a(S,nd),a(S,Rl),a(Rl,ld),a(S,rd),a(S,Il),a(Il,pd),a(S,od),a(S,Ll),a(Ll,id),a(S,hd),i(s,lo,o),g(ke,s,o),i(s,ro,o),i(s,Ds,o),a(Ds,ga),a(ga,Ml),g(Ee,Ml,null),a(Ds,cd),a(Ds,Bl),a(Bl,md),i(s,po,o),i(s,ns,o),a(ns,dd),a(ns,Ul),a(Ul,fd),a(ns,ud),a(ns,sn),a(sn,gd),a(ns,_d),i(s,oo,o),g(De,s,o),i(s,io,o),i(s,As,o),a(As,_a),a(_a,Vl),g(Ae,Vl,null),a(As,jd),a(As,Hl),a(Hl,bd),i(s,ho,o),i(s,J,o),a(J,an),a(an,vd),a(J,wd),a(J,Yl),a(Yl,xd),a(J,$d),a(J,Wl),a(Wl,yd),a(J,kd),i(s,co,o),i(s,Ts,o),a(Ts,ja),a(ja,Gl),g(Te,Gl,null),a(Ts,Ed),a(Ts,Jl),a(Jl,Dd),i(s,mo,o),i(s,en,o),a(en,Ad),i(s,fo,o),i(s,tn,o),a(tn,Td),i(s,uo,o),g(Pe,s,o),i(s,go,o),i(s,ba,o),a(ba,Pd),a(ba,Kl),a(Kl,Sd),a(ba,qd),i(s,_o,o),g(Se,s,o),i(s,jo,o),i(s,R,o),a(R,Cd),a(R,Ql),a(Ql,Nd),a(R,zd),a(R,Xl),a(Xl,Od),a(R,Fd),a(R,Zl),a(Zl,Rd),a(R,Id),a(R,sr),a(sr,Ld),a(R,Md),i(s,bo,o),i(s,Ps,o),a(Ps,va),a(va,ar),g(qe,ar,null),a(Ps,Bd),a(Ps,er),a(er,Ud),i(s,vo,o),i(s,nn,o),a(nn,Vd),i(s,wo,o),i(s,wa,o),a(wa,tr),a(tr,Ce),a(Ce,Hd),a(Ce,nr),a(nr,Yd),a(Ce,Wd),a(wa,Gd),a(wa,lr),a(lr,rr),a(rr,Jd),i(s,xo,o),g(Ne,s,o),i(s,$o,o),i(s,xa,o),a(xa,Kd),a(xa,ln),a(ln,Qd),a(xa,Xd),i(s,yo,o),g(ze,s,o),i(s,ko,o),i(s,rn,o),a(rn,Zd),i(s,Eo,o),g(Oe,s,o),i(s,Do,o),i(s,Ss,o),a(Ss,$a),a($a,pr),g(Fe,pr,null),a(Ss,sf),a(Ss,or),a(or,af),i(s,Ao,o),i(s,pn,o),a(pn,ef),i(s,To,o),i(s,ls,o),a(ls,tf),a(ls,Re),a(Re,nf),a(ls,lf),a(ls,Ie),a(Ie,rf),a(ls,pf),i(s,Po,o),g(Le,s,o),i(s,So,o),i(s,on,o),a(on,of),i(s,qo,o),g(Me,s,o),i(s,Co,o),i(s,ya,o),a(ya,hf),a(ya,hn),a(hn,cf),a(ya,mf),i(s,No,o),g(Be,s,o),i(s,zo,o),i(s,I,o),a(I,df),a(I,ir),a(ir,ff),a(I,uf),a(I,hr),a(hr,gf),a(I,_f),a(I,cr),a(cr,jf),a(I,bf),a(I,mr),a(mr,vf),a(I,wf),i(s,Oo,o),i(s,qs,o),a(qs,ka),a(ka,dr),g(Ue,dr,null),a(qs,xf),a(qs,fr),a(fr,$f),i(s,Fo,o),i(s,rs,o),a(rs,yf),a(rs,cn),a(cn,kf),a(rs,Ef),a(rs,ur),a(ur,Df),a(rs,Af),i(s,Ro,o),g(Ve,s,o),i(s,Io,o),i(s,Cs,o),a(Cs,Ea),a(Ea,gr),g(He,gr,null),a(Cs,Tf),a(Cs,_r),a(_r,Pf),i(s,Lo,o),i(s,ps,o),a(ps,Sf),a(ps,mn),a(mn,qf),a(ps,Cf),a(ps,Ye),a(Ye,Nf),a(ps,zf),i(s,Mo,o),i(s,Da,o),a(Da,Of),a(Da,jr),a(jr,Ff),a(Da,Rf),i(s,Bo,o),g(We,s,o),i(s,Uo,o),i(s,Ns,o),a(Ns,Aa),a(Aa,br),g(Ge,br,null),a(Ns,If),a(Ns,vr),a(vr,Lf),i(s,Vo,o),i(s,Ta,o),a(Ta,Mf),a(Ta,dn),a(dn,Bf),a(Ta,Uf),i(s,Ho,o),g(Je,s,o),i(s,Yo,o),g(Pa,s,o),i(s,Wo,o),i(s,fn,o),a(fn,Vf),i(s,Go,o),g(Ke,s,o),i(s,Jo,o),i(s,zs,o),a(zs,Sa),a(Sa,wr),g(Qe,wr,null),a(zs,Hf),a(zs,xr),a(xr,Yf),i(s,Ko,o),i(s,os,o),a(os,Wf),a(os,un),a(un,Gf),a(os,Jf),a(os,$r),a($r,Kf),a(os,Qf),i(s,Qo,o),g(Xe,s,o),i(s,Xo,o),i(s,Y,o),a(Y,Xf),a(Y,yr),a(yr,Zf),a(Y,su),a(Y,Ze),a(Ze,au),a(Y,eu),a(Y,kr),a(kr,tu),a(Y,nu),i(s,Zo,o),g(st,s,o),i(s,si,o),i(s,Os,o),a(Os,gn),a(gn,lu),a(Os,ru),a(Os,_n),a(_n,pu),a(Os,ou),i(s,ai,o),g(at,s,o),i(s,ei,o),g(qa,s,o),i(s,ti,o),i(s,Ca,o),a(Ca,iu),a(Ca,jn),a(jn,hu),a(Ca,cu),i(s,ni,o),g(et,s,o),i(s,li,o),i(s,Fs,o),a(Fs,Na),a(Na,Er),g(tt,Er,null),a(Fs,mu),a(Fs,Dr),a(Dr,du),i(s,ri,o),i(s,nt,o),a(nt,bn),a(bn,fu),a(nt,uu),i(s,pi,o),g(lt,s,o),i(s,oi,o),i(s,vn,o),a(vn,gu),i(s,ii,o),i(s,Rs,o),a(Rs,za),a(za,Ar),g(rt,Ar,null),a(Rs,_u),a(Rs,Tr),a(Tr,ju),i(s,hi,o),i(s,Oa,o),a(Oa,bu),a(Oa,wn),a(wn,vu),a(Oa,wu),i(s,ci,o),i(s,xn,o),a(xn,xu),i(s,mi,o),g(pt,s,o),i(s,di,o),i(s,Fa,o),a(Fa,$u),a(Fa,$n),a($n,yu),a(Fa,ku),i(s,fi,o),g(ot,s,o),i(s,ui,o),g(Ra,s,o),i(s,gi,o),i(s,Is,o),a(Is,Ia),a(Ia,Pr),g(it,Pr,null),a(Is,Eu),a(Is,Sr),a(Sr,Du),i(s,_i,o),i(s,yn,o),a(yn,Au),i(s,ji,o),i(s,La,o),a(La,qr),a(qr,ht),a(ht,Cr),a(Cr,Tu),a(ht,Pu),a(ht,Nr),a(Nr,Su),a(La,qu),a(La,K),a(K,ct),a(ct,zr),a(zr,Cu),a(ct,Nu),a(ct,Or),a(Or,kn),a(kn,zu),a(K,Ou),a(K,mt),a(mt,Fr),a(Fr,Fu),a(mt,Ru),a(mt,Rr),a(Rr,En),a(En,Iu),a(K,Lu),a(K,dt),a(dt,Ir),a(Ir,Mu),a(dt,Bu),a(dt,Lr),a(Lr,Dn),a(Dn,Uu),a(K,Vu),a(K,ft),a(ft,Mr),a(Mr,Hu),a(ft,Yu),a(ft,ut),a(ut,An),a(An,Wu),a(ut,Gu),a(ut,Tn),a(Tn,Ju),i(s,bi,o),i(s,Pn,o),a(Pn,Ku),i(s,vi,o),g(gt,s,o),wi=!0},p(s,[o]){const _t={};o&2&&(_t.$$scope={dirty:o,ctx:s}),Hs.$set(_t);const Br={};o&2&&(Br.$$scope={dirty:o,ctx:s}),oa.$set(Br);const Ur={};o&2&&(Ur.$$scope={dirty:o,ctx:s}),ua.$set(Ur);const Vr={};o&2&&(Vr.$$scope={dirty:o,ctx:s}),Pa.$set(Vr);const Hr={};o&2&&(Hr.$$scope={dirty:o,ctx:s}),qa.$set(Hr);const Yr={};o&2&&(Yr.$$scope={dirty:o,ctx:s}),Ra.$set(Yr)},i(s){wi||(_(x.$$.fragment,s),_(Wa.$$.fragment,s),_(Hs.$$.fragment,s),_(Ga.$$.fragment,s),_(Ja.$$.fragment,s),_(Ka.$$.fragment,s),_(Qa.$$.fragment,s),_(Xa.$$.fragment,s),_(Za.$$.fragment,s),_(se.$$.fragment,s),_(ae.$$.fragment,s),_(ee.$$.fragment,s),_(te.$$.fragment,s),_(ne.$$.fragment,s),_(le.$$.fragment,s),_(pe.$$.fragment,s),_(oe.$$.fragment,s),_(ie.$$.fragment,s),_(he.$$.fragment,s),_(ce.$$.fragment,s),_(me.$$.fragment,s),_(de.$$.fragment,s),_(fe.$$.fragment,s),_(ue.$$.fragment,s),_(oa.$$.fragment,s),_(ge.$$.fragment,s),_(_e.$$.fragment,s),_(je.$$.fragment,s),_(be.$$.fragment,s),_(ve.$$.fragment,s),_(we.$$.fragment,s),_(xe.$$.fragment,s),_($e.$$.fragment,s),_(ua.$$.fragment,s),_(ye.$$.fragment,s),_(ke.$$.fragment,s),_(Ee.$$.fragment,s),_(De.$$.fragment,s),_(Ae.$$.fragment,s),_(Te.$$.fragment,s),_(Pe.$$.fragment,s),_(Se.$$.fragment,s),_(qe.$$.fragment,s),_(Ne.$$.fragment,s),_(ze.$$.fragment,s),_(Oe.$$.fragment,s),_(Fe.$$.fragment,s),_(Le.$$.fragment,s),_(Me.$$.fragment,s),_(Be.$$.fragment,s),_(Ue.$$.fragment,s),_(Ve.$$.fragment,s),_(He.$$.fragment,s),_(We.$$.fragment,s),_(Ge.$$.fragment,s),_(Je.$$.fragment,s),_(Pa.$$.fragment,s),_(Ke.$$.fragment,s),_(Qe.$$.fragment,s),_(Xe.$$.fragment,s),_(st.$$.fragment,s),_(at.$$.fragment,s),_(qa.$$.fragment,s),_(et.$$.fragment,s),_(tt.$$.fragment,s),_(lt.$$.fragment,s),_(rt.$$.fragment,s),_(pt.$$.fragment,s),_(ot.$$.fragment,s),_(Ra.$$.fragment,s),_(it.$$.fragment,s),_(gt.$$.fragment,s),wi=!0)},o(s){j(x.$$.fragment,s),j(Wa.$$.fragment,s),j(Hs.$$.fragment,s),j(Ga.$$.fragment,s),j(Ja.$$.fragment,s),j(Ka.$$.fragment,s),j(Qa.$$.fragment,s),j(Xa.$$.fragment,s),j(Za.$$.fragment,s),j(se.$$.fragment,s),j(ae.$$.fragment,s),j(ee.$$.fragment,s),j(te.$$.fragment,s),j(ne.$$.fragment,s),j(le.$$.fragment,s),j(pe.$$.fragment,s),j(oe.$$.fragment,s),j(ie.$$.fragment,s),j(he.$$.fragment,s),j(ce.$$.fragment,s),j(me.$$.fragment,s),j(de.$$.fragment,s),j(fe.$$.fragment,s),j(ue.$$.fragment,s),j(oa.$$.fragment,s),j(ge.$$.fragment,s),j(_e.$$.fragment,s),j(je.$$.fragment,s),j(be.$$.fragment,s),j(ve.$$.fragment,s),j(we.$$.fragment,s),j(xe.$$.fragment,s),j($e.$$.fragment,s),j(ua.$$.fragment,s),j(ye.$$.fragment,s),j(ke.$$.fragment,s),j(Ee.$$.fragment,s),j(De.$$.fragment,s),j(Ae.$$.fragment,s),j(Te.$$.fragment,s),j(Pe.$$.fragment,s),j(Se.$$.fragment,s),j(qe.$$.fragment,s),j(Ne.$$.fragment,s),j(ze.$$.fragment,s),j(Oe.$$.fragment,s),j(Fe.$$.fragment,s),j(Le.$$.fragment,s),j(Me.$$.fragment,s),j(Be.$$.fragment,s),j(Ue.$$.fragment,s),j(Ve.$$.fragment,s),j(He.$$.fragment,s),j(We.$$.fragment,s),j(Ge.$$.fragment,s),j(Je.$$.fragment,s),j(Pa.$$.fragment,s),j(Ke.$$.fragment,s),j(Qe.$$.fragment,s),j(Xe.$$.fragment,s),j(st.$$.fragment,s),j(at.$$.fragment,s),j(qa.$$.fragment,s),j(et.$$.fragment,s),j(tt.$$.fragment,s),j(lt.$$.fragment,s),j(rt.$$.fragment,s),j(pt.$$.fragment,s),j(ot.$$.fragment,s),j(Ra.$$.fragment,s),j(it.$$.fragment,s),j(gt.$$.fragment,s),wi=!1},d(s){e(d),s&&e(k),s&&e(v),b(x),s&&e(q),s&&e(L),s&&e(Ms),s&&e(Q),s&&e(Bs),s&&e(T),s&&e(Kr),s&&e($t),s&&e(Qr),b(Wa,s),s&&e(Xr),b(Hs,s),s&&e(Zr),s&&e(ds),b(Ga),s&&e(sp),s&&e(yt),s&&e(ap),s&&e(fs),b(Ja),s&&e(ep),s&&e(Gs),s&&e(tp),b(Ka,s),s&&e(np),s&&e(us),b(Qa),s&&e(lp),s&&e(V),s&&e(rp),b(Xa,s),s&&e(pp),s&&e(gs),b(Za),s&&e(op),s&&e(Z),s&&e(ip),s&&e(Tt),s&&e(hp),b(se,s),s&&e(cp),s&&e(qt),s&&e(mp),b(ae,s),s&&e(dp),s&&e(_s),s&&e(fp),b(ee,s),s&&e(up),s&&e(js),b(te),s&&e(gp),s&&e(bs),s&&e(_p),b(ne,s),s&&e(jp),s&&e(Xs),s&&e(bp),s&&e(vs),b(le),s&&e(vp),s&&e(H),s&&e(wp),s&&e(sa),s&&e(xp),b(pe,s),s&&e($p),s&&e(Rt),s&&e(yp),b(oe,s),s&&e(kp),s&&e(ws),b(ie),s&&e(Ep),s&&e(It),s&&e(Dp),s&&e(xs),b(he),s&&e(Ap),s&&e(ta),s&&e(Tp),s&&e(na),s&&e(Pp),b(ce,s),s&&e(Sp),s&&e($s),b(me),s&&e(qp),s&&e(ra),s&&e(Cp),b(de,s),s&&e(Np),s&&e(ys),b(fe),s&&e(zp),s&&e(B),s&&e(Op),b(ue,s),s&&e(Fp),b(oa,s),s&&e(Rp),s&&e(ia),s&&e(Ip),b(ge,s),s&&e(Lp),s&&e(ks),b(_e),s&&e(Mp),s&&e(ca),s&&e(Bp),b(je,s),s&&e(Up),s&&e(O),s&&e(Vp),b(be,s),s&&e(Hp),s&&e(ss),s&&e(Yp),s&&e(Es),b(ve),s&&e(Wp),s&&e(as),s&&e(Gp),s&&e(F),s&&e(Jp),b(we,s),s&&e(Kp),s&&e(da),s&&e(Qp),b(xe,s),s&&e(Xp),s&&e(fa),s&&e(Zp),s&&e(es),s&&e(so),b($e,s),s&&e(ao),b(ua,s),s&&e(eo),s&&e(ts),s&&e(to),b(ye,s),s&&e(no),s&&e(S),s&&e(lo),b(ke,s),s&&e(ro),s&&e(Ds),b(Ee),s&&e(po),s&&e(ns),s&&e(oo),b(De,s),s&&e(io),s&&e(As),b(Ae),s&&e(ho),s&&e(J),s&&e(co),s&&e(Ts),b(Te),s&&e(mo),s&&e(en),s&&e(fo),s&&e(tn),s&&e(uo),b(Pe,s),s&&e(go),s&&e(ba),s&&e(_o),b(Se,s),s&&e(jo),s&&e(R),s&&e(bo),s&&e(Ps),b(qe),s&&e(vo),s&&e(nn),s&&e(wo),s&&e(wa),s&&e(xo),b(Ne,s),s&&e($o),s&&e(xa),s&&e(yo),b(ze,s),s&&e(ko),s&&e(rn),s&&e(Eo),b(Oe,s),s&&e(Do),s&&e(Ss),b(Fe),s&&e(Ao),s&&e(pn),s&&e(To),s&&e(ls),s&&e(Po),b(Le,s),s&&e(So),s&&e(on),s&&e(qo),b(Me,s),s&&e(Co),s&&e(ya),s&&e(No),b(Be,s),s&&e(zo),s&&e(I),s&&e(Oo),s&&e(qs),b(Ue),s&&e(Fo),s&&e(rs),s&&e(Ro),b(Ve,s),s&&e(Io),s&&e(Cs),b(He),s&&e(Lo),s&&e(ps),s&&e(Mo),s&&e(Da),s&&e(Bo),b(We,s),s&&e(Uo),s&&e(Ns),b(Ge),s&&e(Vo),s&&e(Ta),s&&e(Ho),b(Je,s),s&&e(Yo),b(Pa,s),s&&e(Wo),s&&e(fn),s&&e(Go),b(Ke,s),s&&e(Jo),s&&e(zs),b(Qe),s&&e(Ko),s&&e(os),s&&e(Qo),b(Xe,s),s&&e(Xo),s&&e(Y),s&&e(Zo),b(st,s),s&&e(si),s&&e(Os),s&&e(ai),b(at,s),s&&e(ei),b(qa,s),s&&e(ti),s&&e(Ca),s&&e(ni),b(et,s),s&&e(li),s&&e(Fs),b(tt),s&&e(ri),s&&e(nt),s&&e(pi),b(lt,s),s&&e(oi),s&&e(vn),s&&e(ii),s&&e(Rs),b(rt),s&&e(hi),s&&e(Oa),s&&e(ci),s&&e(xn),s&&e(mi),b(pt,s),s&&e(di),s&&e(Fa),s&&e(fi),b(ot,s),s&&e(ui),b(Ra,s),s&&e(gi),s&&e(Is),b(it),s&&e(_i),s&&e(yn),s&&e(ji),s&&e(La),s&&e(bi),s&&e(Pn),s&&e(vi),b(gt,s)}}}const Jj={local:"process",sections:[{local:"sort-shuffle-select-split-and-shard",sections:[{local:"sort",title:"Sort"},{local:"shuffle",title:"Shuffle"},{local:"select-and-filter",title:"Select and Filter"},{local:"split",title:"Split"},{local:"shard",title:"Shard"}],title:"Sort, shuffle, select, split, and shard"},{local:"rename-remove-cast-and-flatten",sections:[{local:"rename",title:"Rename"},{local:"remove",title:"Remove"},{local:"cast",title:"Cast"},{local:"flatten",title:"Flatten"}],title:"Rename, remove, cast, and flatten"},{local:"map",sections:[{local:"multiprocessing",title:"Multiprocessing"},{local:"batch-processing",sections:[{local:"tokenization",title:"Tokenization"},{local:"split-long-examples",title:"Split long examples"},{local:"data-augmentation",title:"Data augmentation"}],title:"Batch processing"},{local:"process-multiple-splits",title:"Process multiple splits"},{local:"distributed-usage",title:"Distributed usage"}],title:"Map"},{local:"concatenate",title:"Concatenate"},{local:"format",sections:[{local:"format-transform",title:"Format transform"}],title:"Format"},{local:"save",title:"Save"},{local:"export",title:"Export"}],title:"Process"};function Kj(z,d,k){let{fw:v}=d;return z.$$set=$=>{"fw"in $&&k(0,v=$.fw)},[v]}class ab extends Rj{constructor(d){super();Ij(this,d,Kj,Gj,Lj,{fw:0})}}export{ab as default,Jj as metadata};
