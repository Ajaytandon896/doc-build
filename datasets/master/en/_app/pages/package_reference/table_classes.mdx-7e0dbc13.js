import{S as Nc,i as jc,s as Oc,e as s,k as l,w as d,t as T,M as Bc,c as r,d as t,m as o,a as n,x as c,h as I,b as m,F as e,g as D,y as g,L as Rc,q as i,o as b,B as f}from"../../chunks/vendor-e67aec41.js";import{D as p}from"../../chunks/Docstring-fac5775a.js";import{I as Wc}from"../../chunks/IconCopyLink-ffd7f84e.js";function Fc(zr){let M,Ka,L,V,Xs,j,Gr,Zs,Yr,Lr,C,Hr,er,Jr,Kr,Qa,Qr,Xr,Vr,w,O,Zr,ar,en,an,tr,tn,sn,sr,rn,nn,Xa,B,ln,Za,R,on,et,W,mn,at,F,dn,tt,U,cn,st,z,gn,rt,G,bn,nt,Y,fn,lt,H,pn,ot,J,$n,mt,K,hn,dt,Q,un,ct,X,vn,gt,Z,yn,it,ee,Mr,$,ae,_n,rr,wn,Tn,nr,In,En,lr,kn,Dn,or,Ln,Vn,bt,te,Mn,ft,se,Cn,pt,re,xn,$t,ne,Pn,ht,le,Sn,ut,oe,An,vt,me,qn,yt,de,Nn,_t,ce,jn,wt,ge,On,Tt,ie,Bn,It,be,Rn,Et,fe,Wn,kt,pe,Fn,Dt,$e,Un,Lt,he,zn,Vt,ue,Gn,x,ve,Yn,mr,Hn,Jn,ye,Kn,dr,Qn,Xn,Zn,Mt,_e,el,Ct,we,al,xt,Te,tl,Pt,Ie,sl,St,Ee,rl,At,ke,nl,qt,De,ll,Nt,Le,ol,jt,Ve,ml,Ot,Me,dl,Bt,Ce,cl,Rt,xe,gl,Wt,Pe,il,Ft,Se,bl,Ut,Ae,fl,zt,qe,Cr,v,Ne,pl,cr,$l,hl,gr,ul,vl,ir,yl,_l,br,wl,Tl,fr,Il,El,Gt,je,kl,Yt,Oe,Dl,Ht,Be,Ll,Jt,Re,Vl,Kt,We,Ml,Qt,Fe,Cl,Xt,Ue,xl,Zt,ze,Pl,es,Ge,Sl,as,Ye,Al,ts,He,ql,ss,Je,Nl,rs,Ke,jl,ns,Qe,Ol,ls,Xe,Bl,os,Ze,Rl,ms,ea,Wl,P,aa,Fl,pr,Ul,zl,ta,Gl,$r,Yl,Hl,Jl,ds,sa,Kl,cs,ra,Ql,gs,na,Xl,is,la,Zl,bs,oa,eo,fs,ma,ao,ps,da,to,$s,ca,so,hs,ga,ro,us,ia,no,vs,ba,xr,u,fa,lo,hr,oo,mo,ur,co,go,pa,vr,io,bo,yr,fo,po,$a,$o,_r,ho,uo,vo,wr,yo,_o,ys,ha,wo,_s,ua,To,ws,va,Io,Ts,ya,Eo,Is,_a,ko,Es,wa,Do,ks,Ta,Lo,Ds,Ia,Vo,Ls,Ea,Mo,Vs,ka,Co,Ms,Da,xo,Cs,La,Po,xs,Va,So,Ps,Ma,Ao,Ss,Ca,qo,As,xa,No,qs,Pa,jo,S,Sa,Oo,Tr,Bo,Ro,Aa,Wo,Ir,Fo,Uo,zo,Ns,qa,Go,js,Na,Yo,Os,ja,Ho,Bs,Oa,Jo,Rs,Ba,Ko,Ws,Ra,Qo,Fs,Wa,Xo,Us,Fa,Zo,zs,Ua,em,Gs,za,am,Ys,Ga,tm,N,Ya,sm,Er,rm,Pr,A,Ha,nm,kr,lm,Sr,q,Ja,om,Dr,mm,Ar;return j=new Wc({}),O=new p({props:{name:"class datasets.table.Table",anchor:"datasets.table.Table",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L151"}}),B=new p({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L202"}}),R=new p({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L206"}}),W=new p({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L212"}}),F=new p({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L216"}}),U=new p({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L220"}}),z=new p({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L224"}}),G=new p({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L227"}}),Y=new p({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231"}}),H=new p({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L235"}}),J=new p({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L239"}}),K=new p({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L244"}}),Q=new p({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L249"}}),X=new p({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254"}}),Z=new p({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L259"}}),ee=new p({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L264"}}),ae=new p({props:{name:"class datasets.table.InMemoryTable",anchor:"datasets.table.InMemoryTable",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L360"}}),te=new p({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L202"}}),se=new p({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L206"}}),re=new p({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L212"}}),ne=new p({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L216"}}),le=new p({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L220"}}),oe=new p({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L224"}}),me=new p({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L227"}}),de=new p({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231"}}),ce=new p({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L235"}}),ge=new p({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L239"}}),ie=new p({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L244"}}),be=new p({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L249"}}),fe=new p({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254"}}),pe=new p({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L259"}}),$e=new p({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L264"}}),he=new p({props:{name:"column_names",anchor:"datasets.table.Table.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L269"}}),ue=new p({props:{name:"slice",anchor:"datasets.table.InMemoryTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L405"}}),ve=new p({props:{name:"filter",anchor:"datasets.table.InMemoryTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L410"}}),_e=new p({props:{name:"flatten",anchor:"datasets.table.InMemoryTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L414"}}),we=new p({props:{name:"combine_chunks",anchor:"datasets.table.InMemoryTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L418"}}),Te=new p({props:{name:"cast",anchor:"datasets.table.InMemoryTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L422"}}),Ie=new p({props:{name:"replace_schema_metadata",anchor:"datasets.table.InMemoryTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L426"}}),Ee=new p({props:{name:"add_column",anchor:"datasets.table.InMemoryTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L430"}}),ke=new p({props:{name:"append_column",anchor:"datasets.table.InMemoryTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L434"}}),De=new p({props:{name:"remove_column",anchor:"datasets.table.InMemoryTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L438"}}),Le=new p({props:{name:"set_column",anchor:"datasets.table.InMemoryTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L442"}}),Ve=new p({props:{name:"rename_columns",anchor:"datasets.table.InMemoryTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L446"}}),Me=new p({props:{name:"drop",anchor:"datasets.table.InMemoryTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L450"}}),Ce=new p({props:{name:"from_file",anchor:"datasets.table.InMemoryTable.from_file",parameters:[{name:"filename",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L375"}}),xe=new p({props:{name:"from_buffer",anchor:"datasets.table.InMemoryTable.from_buffer",parameters:[{name:"buffer",val:": Buffer"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L380"}}),Pe=new p({props:{name:"from_pandas",anchor:"datasets.table.InMemoryTable.from_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L385"}}),Se=new p({props:{name:"from_arrays",anchor:"datasets.table.InMemoryTable.from_arrays",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L390"}}),Ae=new p({props:{name:"from_pydict",anchor:"datasets.table.InMemoryTable.from_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L395"}}),qe=new p({props:{name:"from_batches",anchor:"datasets.table.InMemoryTable.from_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L400"}}),Ne=new p({props:{name:"class datasets.table.MemoryMappedTable",anchor:"datasets.table.MemoryMappedTable",parameters:[{name:"table",val:": Table"},{name:"path",val:": str"},{name:"replays",val:": typing.Union[typing.List[typing.Tuple[str, tuple, dict]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L459"}}),je=new p({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L202"}}),Oe=new p({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L206"}}),Be=new p({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L212"}}),Re=new p({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L216"}}),We=new p({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L220"}}),Fe=new p({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L224"}}),Ue=new p({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L227"}}),ze=new p({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231"}}),Ge=new p({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L235"}}),Ye=new p({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L239"}}),He=new p({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L244"}}),Je=new p({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L249"}}),Ke=new p({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254"}}),Qe=new p({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L259"}}),Xe=new p({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L264"}}),Ze=new p({props:{name:"column_names",anchor:"datasets.table.Table.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L269"}}),ea=new p({props:{name:"slice",anchor:"datasets.table.MemoryMappedTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L516"}}),aa=new p({props:{name:"filter",anchor:"datasets.table.MemoryMappedTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L523"}}),sa=new p({props:{name:"flatten",anchor:"datasets.table.MemoryMappedTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L529"}}),ra=new p({props:{name:"combine_chunks",anchor:"datasets.table.MemoryMappedTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L535"}}),na=new p({props:{name:"cast",anchor:"datasets.table.MemoryMappedTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L541"}}),la=new p({props:{name:"replace_schema_metadata",anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L547"}}),oa=new p({props:{name:"add_column",anchor:"datasets.table.MemoryMappedTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L553"}}),ma=new p({props:{name:"append_column",anchor:"datasets.table.MemoryMappedTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L559"}}),da=new p({props:{name:"remove_column",anchor:"datasets.table.MemoryMappedTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L565"}}),ca=new p({props:{name:"set_column",anchor:"datasets.table.MemoryMappedTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L571"}}),ga=new p({props:{name:"rename_columns",anchor:"datasets.table.MemoryMappedTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L577"}}),ia=new p({props:{name:"drop",anchor:"datasets.table.MemoryMappedTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L583"}}),ba=new p({props:{name:"from_file",anchor:"datasets.table.MemoryMappedTable.from_file",parameters:[{name:"filename",val:": str"},{name:"replays",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L485"}}),fa=new p({props:{name:"class datasets.table.ConcatenationTable",anchor:"datasets.table.ConcatenationTable",parameters:[{name:"table",val:": Table"},{name:"blocks",val:": typing.List[typing.List[datasets.table.TableBlock]]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L597"}}),ha=new p({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L202"}}),ua=new p({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L206"}}),va=new p({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L212"}}),ya=new p({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L216"}}),_a=new p({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L220"}}),wa=new p({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L224"}}),Ta=new p({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L227"}}),Ia=new p({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231"}}),Ea=new p({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L235"}}),ka=new p({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L239"}}),Da=new p({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L244"}}),La=new p({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L249"}}),Va=new p({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254"}}),Ma=new p({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L259"}}),Ca=new p({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L264"}}),xa=new p({props:{name:"column_names",anchor:"datasets.table.Table.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L269"}}),Pa=new p({props:{name:"slice",anchor:"datasets.table.ConcatenationTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L765"}}),Sa=new p({props:{name:"filter",anchor:"datasets.table.ConcatenationTable.filter",parameters:[{name:"mask",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L784"}}),qa=new p({props:{name:"flatten",anchor:"datasets.table.ConcatenationTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L793"}}),Na=new p({props:{name:"combine_chunks",anchor:"datasets.table.ConcatenationTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L801"}}),ja=new p({props:{name:"cast",anchor:"datasets.table.ConcatenationTable.cast",parameters:[{name:"target_schema",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L809"}}),Oa=new p({props:{name:"replace_schema_metadata",anchor:"datasets.table.ConcatenationTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L825"}}),Ba=new p({props:{name:"add_column",anchor:"datasets.table.ConcatenationTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L833"}}),Ra=new p({props:{name:"append_column",anchor:"datasets.table.ConcatenationTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L837"}}),Wa=new p({props:{name:"remove_column",anchor:"datasets.table.ConcatenationTable.remove_column",parameters:[{name:"i",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L841"}}),Fa=new p({props:{name:"set_column",anchor:"datasets.table.ConcatenationTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L855"}}),Ua=new p({props:{name:"rename_columns",anchor:"datasets.table.ConcatenationTable.rename_columns",parameters:[{name:"names",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L859"}}),za=new p({props:{name:"drop",anchor:"datasets.table.ConcatenationTable.drop",parameters:[{name:"columns",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L870"}}),Ga=new p({props:{name:"from_blocks",anchor:"datasets.table.ConcatenationTable.from_blocks",parameters:[{name:"blocks",val:": TableBlockContainer"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L692"}}),Ya=new p({props:{name:"from_tables",anchor:"datasets.table.ConcatenationTable.from_tables",parameters:[{name:"tables",val:": typing.List[typing.Union[pyarrow.lib.Table, datasets.table.Table]]"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L706",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.from_tables.tables",description:`<strong>tables</strong> (list of <code>Table</code> or list of <code>pyarrow.Table</code>) &#x2014; List of tables.
axis &#x2014; (<code>{0, 1}</code>, default <code>0</code>, meaning over rows):`,name:"tables"},{anchor:"datasets.table.ConcatenationTable.from_tables.Axis",description:`<strong>Axis</strong> to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns &#x2014;
(horizontally). &#x2014;`,name:"Axis"},{anchor:"datasets.table.ConcatenationTable.from_tables.*New",description:"<strong>*New</strong> in version 1.6.0* &#x2014;",name:"*New"}]}}),Ha=new p({props:{name:"datasets.table.concat_tables",anchor:"datasets.table.concat_tables",parameters:[{name:"tables",val:": typing.List[datasets.table.Table]"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L879",parametersDescription:[{anchor:"datasets.table.concat_tables.tables",description:"<strong>tables</strong> (list of <code>Table</code>) &#x2014; List of tables to be concatenated.",name:"tables"},{anchor:"datasets.table.concat_tables.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],returnDescription:`
<p>If the number of input tables is > 1, then the returned table is a <code>datasets.table.ConcatenationTable</code>.
Otherwise if there\u2019s only one table, it is returned as is.</p>
`,returnType:`
<p><code>datasets.table.Table</code> that is the concatenated table</p>
`}}),Ja=new p({props:{name:"datasets.table.list_table_cache_files",anchor:"datasets.table.list_table_cache_files",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L902",returnDescription:`
<p>a list of paths to the cache files loaded by the table</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),{c(){M=s("meta"),Ka=l(),L=s("h1"),V=s("a"),Xs=s("span"),d(j.$$.fragment),Gr=l(),Zs=s("span"),Yr=T("Table Classes"),Lr=l(),C=s("p"),Hr=T("Each "),er=s("code"),Jr=T("datasets.Dataset"),Kr=T(` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),Qa=s("a"),Qr=T("datasets.table.Table"),Xr=T("."),Vr=l(),w=s("div"),d(O.$$.fragment),Zr=l(),ar=s("p"),en=T(`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),an=l(),tr=s("p"),tn=T(`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),sn=l(),sr=s("p"),rn=T("The implementation of these methods differs for the subclasses."),nn=l(),Xa=s("div"),d(B.$$.fragment),ln=l(),Za=s("div"),d(R.$$.fragment),on=l(),et=s("div"),d(W.$$.fragment),mn=l(),at=s("div"),d(F.$$.fragment),dn=l(),tt=s("div"),d(U.$$.fragment),cn=l(),st=s("div"),d(z.$$.fragment),gn=l(),rt=s("div"),d(G.$$.fragment),bn=l(),nt=s("div"),d(Y.$$.fragment),fn=l(),lt=s("div"),d(H.$$.fragment),pn=l(),ot=s("div"),d(J.$$.fragment),$n=l(),mt=s("div"),d(K.$$.fragment),hn=l(),dt=s("div"),d(Q.$$.fragment),un=l(),ct=s("div"),d(X.$$.fragment),vn=l(),gt=s("div"),d(Z.$$.fragment),yn=l(),it=s("div"),d(ee.$$.fragment),Mr=l(),$=s("div"),d(ae.$$.fragment),_n=l(),rr=s("p"),wn=T("The table is said in-memory when it is loaded into the user\u2019s RAM."),Tn=l(),nr=s("p"),In=T(`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),En=l(),lr=s("p"),kn=T(`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Dn=l(),or=s("p"),Ln=T(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Vn=l(),bt=s("div"),d(te.$$.fragment),Mn=l(),ft=s("div"),d(se.$$.fragment),Cn=l(),pt=s("div"),d(re.$$.fragment),xn=l(),$t=s("div"),d(ne.$$.fragment),Pn=l(),ht=s("div"),d(le.$$.fragment),Sn=l(),ut=s("div"),d(oe.$$.fragment),An=l(),vt=s("div"),d(me.$$.fragment),qn=l(),yt=s("div"),d(de.$$.fragment),Nn=l(),_t=s("div"),d(ce.$$.fragment),jn=l(),wt=s("div"),d(ge.$$.fragment),On=l(),Tt=s("div"),d(ie.$$.fragment),Bn=l(),It=s("div"),d(be.$$.fragment),Rn=l(),Et=s("div"),d(fe.$$.fragment),Wn=l(),kt=s("div"),d(pe.$$.fragment),Fn=l(),Dt=s("div"),d($e.$$.fragment),Un=l(),Lt=s("div"),d(he.$$.fragment),zn=l(),Vt=s("div"),d(ue.$$.fragment),Gn=l(),x=s("div"),d(ve.$$.fragment),Yn=l(),mr=s("p"),Hn=T("Table.filter(self, mask, null_selection_behavior=u\u2019drop\u2019)"),Jn=l(),ye=s("p"),Kn=T("Select records from a Table. See "),dr=s("code"),Qn=T("pyarrow.compute.filter()"),Xn=T(`for
full usage.`),Zn=l(),Mt=s("div"),d(_e.$$.fragment),el=l(),Ct=s("div"),d(we.$$.fragment),al=l(),xt=s("div"),d(Te.$$.fragment),tl=l(),Pt=s("div"),d(Ie.$$.fragment),sl=l(),St=s("div"),d(Ee.$$.fragment),rl=l(),At=s("div"),d(ke.$$.fragment),nl=l(),qt=s("div"),d(De.$$.fragment),ll=l(),Nt=s("div"),d(Le.$$.fragment),ol=l(),jt=s("div"),d(Ve.$$.fragment),ml=l(),Ot=s("div"),d(Me.$$.fragment),dl=l(),Bt=s("div"),d(Ce.$$.fragment),cl=l(),Rt=s("div"),d(xe.$$.fragment),gl=l(),Wt=s("div"),d(Pe.$$.fragment),il=l(),Ft=s("div"),d(Se.$$.fragment),bl=l(),Ut=s("div"),d(Ae.$$.fragment),fl=l(),zt=s("div"),d(qe.$$.fragment),Cr=l(),v=s("div"),d(Ne.$$.fragment),pl=l(),cr=s("p"),$l=T(`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),hl=l(),gr=s("p"),ul=T(`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),vl=l(),ir=s("p"),yl=T(`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),_l=l(),br=s("p"),wl=T(`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),Tl=l(),fr=s("p"),Il=T(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),El=l(),Gt=s("div"),d(je.$$.fragment),kl=l(),Yt=s("div"),d(Oe.$$.fragment),Dl=l(),Ht=s("div"),d(Be.$$.fragment),Ll=l(),Jt=s("div"),d(Re.$$.fragment),Vl=l(),Kt=s("div"),d(We.$$.fragment),Ml=l(),Qt=s("div"),d(Fe.$$.fragment),Cl=l(),Xt=s("div"),d(Ue.$$.fragment),xl=l(),Zt=s("div"),d(ze.$$.fragment),Pl=l(),es=s("div"),d(Ge.$$.fragment),Sl=l(),as=s("div"),d(Ye.$$.fragment),Al=l(),ts=s("div"),d(He.$$.fragment),ql=l(),ss=s("div"),d(Je.$$.fragment),Nl=l(),rs=s("div"),d(Ke.$$.fragment),jl=l(),ns=s("div"),d(Qe.$$.fragment),Ol=l(),ls=s("div"),d(Xe.$$.fragment),Bl=l(),os=s("div"),d(Ze.$$.fragment),Rl=l(),ms=s("div"),d(ea.$$.fragment),Wl=l(),P=s("div"),d(aa.$$.fragment),Fl=l(),pr=s("p"),Ul=T("Table.filter(self, mask, null_selection_behavior=u\u2019drop\u2019)"),zl=l(),ta=s("p"),Gl=T("Select records from a Table. See "),$r=s("code"),Yl=T("pyarrow.compute.filter()"),Hl=T(`for
full usage.`),Jl=l(),ds=s("div"),d(sa.$$.fragment),Kl=l(),cs=s("div"),d(ra.$$.fragment),Ql=l(),gs=s("div"),d(na.$$.fragment),Xl=l(),is=s("div"),d(la.$$.fragment),Zl=l(),bs=s("div"),d(oa.$$.fragment),eo=l(),fs=s("div"),d(ma.$$.fragment),ao=l(),ps=s("div"),d(da.$$.fragment),to=l(),$s=s("div"),d(ca.$$.fragment),so=l(),hs=s("div"),d(ga.$$.fragment),ro=l(),us=s("div"),d(ia.$$.fragment),no=l(),vs=s("div"),d(ba.$$.fragment),xr=l(),u=s("div"),d(fa.$$.fragment),lo=l(),hr=s("p"),oo=T(`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),mo=l(),ur=s("p"),co=T(`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),go=l(),pa=s("ul"),vr=s("li"),io=T("the InMemoryTable objects are pickled by copying all the data in memory;"),bo=l(),yr=s("li"),fo=T(`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),po=l(),$a=s("p"),$o=T(`Its implementation requires to store each block separately.
The `),_r=s("code"),ho=T("blocks"),uo=T(` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),vo=l(),wr=s("p"),yo=T(`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),_o=l(),ys=s("div"),d(ha.$$.fragment),wo=l(),_s=s("div"),d(ua.$$.fragment),To=l(),ws=s("div"),d(va.$$.fragment),Io=l(),Ts=s("div"),d(ya.$$.fragment),Eo=l(),Is=s("div"),d(_a.$$.fragment),ko=l(),Es=s("div"),d(wa.$$.fragment),Do=l(),ks=s("div"),d(Ta.$$.fragment),Lo=l(),Ds=s("div"),d(Ia.$$.fragment),Vo=l(),Ls=s("div"),d(Ea.$$.fragment),Mo=l(),Vs=s("div"),d(ka.$$.fragment),Co=l(),Ms=s("div"),d(Da.$$.fragment),xo=l(),Cs=s("div"),d(La.$$.fragment),Po=l(),xs=s("div"),d(Va.$$.fragment),So=l(),Ps=s("div"),d(Ma.$$.fragment),Ao=l(),Ss=s("div"),d(Ca.$$.fragment),qo=l(),As=s("div"),d(xa.$$.fragment),No=l(),qs=s("div"),d(Pa.$$.fragment),jo=l(),S=s("div"),d(Sa.$$.fragment),Oo=l(),Tr=s("p"),Bo=T("Table.filter(self, mask, null_selection_behavior=u\u2019drop\u2019)"),Ro=l(),Aa=s("p"),Wo=T("Select records from a Table. See "),Ir=s("code"),Fo=T("pyarrow.compute.filter()"),Uo=T(`for
full usage.`),zo=l(),Ns=s("div"),d(qa.$$.fragment),Go=l(),js=s("div"),d(Na.$$.fragment),Yo=l(),Os=s("div"),d(ja.$$.fragment),Ho=l(),Bs=s("div"),d(Oa.$$.fragment),Jo=l(),Rs=s("div"),d(Ba.$$.fragment),Ko=l(),Ws=s("div"),d(Ra.$$.fragment),Qo=l(),Fs=s("div"),d(Wa.$$.fragment),Xo=l(),Us=s("div"),d(Fa.$$.fragment),Zo=l(),zs=s("div"),d(Ua.$$.fragment),em=l(),Gs=s("div"),d(za.$$.fragment),am=l(),Ys=s("div"),d(Ga.$$.fragment),tm=l(),N=s("div"),d(Ya.$$.fragment),sm=l(),Er=s("p"),rm=T("Create ConcatenationTable from list of tables."),Pr=l(),A=s("div"),d(Ha.$$.fragment),nm=l(),kr=s("p"),lm=T("Concatenate tables."),Sr=l(),q=s("div"),d(Ja.$$.fragment),om=l(),Dr=s("p"),mm=T(`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),this.h()},l(a){const k=Bc('[data-svelte="svelte-1phssyn"]',document.head);M=r(k,"META",{name:!0,content:!0}),k.forEach(t),Ka=o(a),L=r(a,"H1",{class:!0});var qr=n(L);V=r(qr,"A",{id:!0,class:!0,href:!0});var dm=n(V);Xs=r(dm,"SPAN",{});var cm=n(Xs);c(j.$$.fragment,cm),cm.forEach(t),dm.forEach(t),Gr=o(qr),Zs=r(qr,"SPAN",{});var gm=n(Zs);Yr=I(gm,"Table Classes"),gm.forEach(t),qr.forEach(t),Lr=o(a),C=r(a,"P",{});var Hs=n(C);Hr=I(Hs,"Each "),er=r(Hs,"CODE",{});var im=n(er);Jr=I(im,"datasets.Dataset"),im.forEach(t),Kr=I(Hs,` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),Qa=r(Hs,"A",{href:!0});var bm=n(Qa);Qr=I(bm,"datasets.table.Table"),bm.forEach(t),Xr=I(Hs,"."),Hs.forEach(t),Vr=o(a),w=r(a,"DIV",{class:!0});var E=n(w);c(O.$$.fragment,E),Zr=o(E),ar=r(E,"P",{});var fm=n(ar);en=I(fm,`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),fm.forEach(t),an=o(E),tr=r(E,"P",{});var pm=n(tr);tn=I(pm,`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),pm.forEach(t),sn=o(E),sr=r(E,"P",{});var $m=n(sr);rn=I($m,"The implementation of these methods differs for the subclasses."),$m.forEach(t),nn=o(E),Xa=r(E,"DIV",{class:!0});var hm=n(Xa);c(B.$$.fragment,hm),hm.forEach(t),ln=o(E),Za=r(E,"DIV",{class:!0});var um=n(Za);c(R.$$.fragment,um),um.forEach(t),on=o(E),et=r(E,"DIV",{class:!0});var vm=n(et);c(W.$$.fragment,vm),vm.forEach(t),mn=o(E),at=r(E,"DIV",{class:!0});var ym=n(at);c(F.$$.fragment,ym),ym.forEach(t),dn=o(E),tt=r(E,"DIV",{class:!0});var _m=n(tt);c(U.$$.fragment,_m),_m.forEach(t),cn=o(E),st=r(E,"DIV",{class:!0});var wm=n(st);c(z.$$.fragment,wm),wm.forEach(t),gn=o(E),rt=r(E,"DIV",{class:!0});var Tm=n(rt);c(G.$$.fragment,Tm),Tm.forEach(t),bn=o(E),nt=r(E,"DIV",{class:!0});var Im=n(nt);c(Y.$$.fragment,Im),Im.forEach(t),fn=o(E),lt=r(E,"DIV",{class:!0});var Em=n(lt);c(H.$$.fragment,Em),Em.forEach(t),pn=o(E),ot=r(E,"DIV",{class:!0});var km=n(ot);c(J.$$.fragment,km),km.forEach(t),$n=o(E),mt=r(E,"DIV",{class:!0});var Dm=n(mt);c(K.$$.fragment,Dm),Dm.forEach(t),hn=o(E),dt=r(E,"DIV",{class:!0});var Lm=n(dt);c(Q.$$.fragment,Lm),Lm.forEach(t),un=o(E),ct=r(E,"DIV",{class:!0});var Vm=n(ct);c(X.$$.fragment,Vm),Vm.forEach(t),vn=o(E),gt=r(E,"DIV",{class:!0});var Mm=n(gt);c(Z.$$.fragment,Mm),Mm.forEach(t),yn=o(E),it=r(E,"DIV",{class:!0});var Cm=n(it);c(ee.$$.fragment,Cm),Cm.forEach(t),E.forEach(t),Mr=o(a),$=r(a,"DIV",{class:!0});var h=n($);c(ae.$$.fragment,h),_n=o(h),rr=r(h,"P",{});var xm=n(rr);wn=I(xm,"The table is said in-memory when it is loaded into the user\u2019s RAM."),xm.forEach(t),Tn=o(h),nr=r(h,"P",{});var Pm=n(nr);In=I(Pm,`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),Pm.forEach(t),En=o(h),lr=r(h,"P",{});var Sm=n(lr);kn=I(Sm,`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Sm.forEach(t),Dn=o(h),or=r(h,"P",{});var Am=n(or);Ln=I(Am,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Am.forEach(t),Vn=o(h),bt=r(h,"DIV",{class:!0});var qm=n(bt);c(te.$$.fragment,qm),qm.forEach(t),Mn=o(h),ft=r(h,"DIV",{class:!0});var Nm=n(ft);c(se.$$.fragment,Nm),Nm.forEach(t),Cn=o(h),pt=r(h,"DIV",{class:!0});var jm=n(pt);c(re.$$.fragment,jm),jm.forEach(t),xn=o(h),$t=r(h,"DIV",{class:!0});var Om=n($t);c(ne.$$.fragment,Om),Om.forEach(t),Pn=o(h),ht=r(h,"DIV",{class:!0});var Bm=n(ht);c(le.$$.fragment,Bm),Bm.forEach(t),Sn=o(h),ut=r(h,"DIV",{class:!0});var Rm=n(ut);c(oe.$$.fragment,Rm),Rm.forEach(t),An=o(h),vt=r(h,"DIV",{class:!0});var Wm=n(vt);c(me.$$.fragment,Wm),Wm.forEach(t),qn=o(h),yt=r(h,"DIV",{class:!0});var Fm=n(yt);c(de.$$.fragment,Fm),Fm.forEach(t),Nn=o(h),_t=r(h,"DIV",{class:!0});var Um=n(_t);c(ce.$$.fragment,Um),Um.forEach(t),jn=o(h),wt=r(h,"DIV",{class:!0});var zm=n(wt);c(ge.$$.fragment,zm),zm.forEach(t),On=o(h),Tt=r(h,"DIV",{class:!0});var Gm=n(Tt);c(ie.$$.fragment,Gm),Gm.forEach(t),Bn=o(h),It=r(h,"DIV",{class:!0});var Ym=n(It);c(be.$$.fragment,Ym),Ym.forEach(t),Rn=o(h),Et=r(h,"DIV",{class:!0});var Hm=n(Et);c(fe.$$.fragment,Hm),Hm.forEach(t),Wn=o(h),kt=r(h,"DIV",{class:!0});var Jm=n(kt);c(pe.$$.fragment,Jm),Jm.forEach(t),Fn=o(h),Dt=r(h,"DIV",{class:!0});var Km=n(Dt);c($e.$$.fragment,Km),Km.forEach(t),Un=o(h),Lt=r(h,"DIV",{class:!0});var Qm=n(Lt);c(he.$$.fragment,Qm),Qm.forEach(t),zn=o(h),Vt=r(h,"DIV",{class:!0});var Xm=n(Vt);c(ue.$$.fragment,Xm),Xm.forEach(t),Gn=o(h),x=r(h,"DIV",{class:!0});var Js=n(x);c(ve.$$.fragment,Js),Yn=o(Js),mr=r(Js,"P",{});var Zm=n(mr);Hn=I(Zm,"Table.filter(self, mask, null_selection_behavior=u\u2019drop\u2019)"),Zm.forEach(t),Jn=o(Js),ye=r(Js,"P",{});var Nr=n(ye);Kn=I(Nr,"Select records from a Table. See "),dr=r(Nr,"CODE",{});var ed=n(dr);Qn=I(ed,"pyarrow.compute.filter()"),ed.forEach(t),Xn=I(Nr,`for
full usage.`),Nr.forEach(t),Js.forEach(t),Zn=o(h),Mt=r(h,"DIV",{class:!0});var ad=n(Mt);c(_e.$$.fragment,ad),ad.forEach(t),el=o(h),Ct=r(h,"DIV",{class:!0});var td=n(Ct);c(we.$$.fragment,td),td.forEach(t),al=o(h),xt=r(h,"DIV",{class:!0});var sd=n(xt);c(Te.$$.fragment,sd),sd.forEach(t),tl=o(h),Pt=r(h,"DIV",{class:!0});var rd=n(Pt);c(Ie.$$.fragment,rd),rd.forEach(t),sl=o(h),St=r(h,"DIV",{class:!0});var nd=n(St);c(Ee.$$.fragment,nd),nd.forEach(t),rl=o(h),At=r(h,"DIV",{class:!0});var ld=n(At);c(ke.$$.fragment,ld),ld.forEach(t),nl=o(h),qt=r(h,"DIV",{class:!0});var od=n(qt);c(De.$$.fragment,od),od.forEach(t),ll=o(h),Nt=r(h,"DIV",{class:!0});var md=n(Nt);c(Le.$$.fragment,md),md.forEach(t),ol=o(h),jt=r(h,"DIV",{class:!0});var dd=n(jt);c(Ve.$$.fragment,dd),dd.forEach(t),ml=o(h),Ot=r(h,"DIV",{class:!0});var cd=n(Ot);c(Me.$$.fragment,cd),cd.forEach(t),dl=o(h),Bt=r(h,"DIV",{class:!0});var gd=n(Bt);c(Ce.$$.fragment,gd),gd.forEach(t),cl=o(h),Rt=r(h,"DIV",{class:!0});var id=n(Rt);c(xe.$$.fragment,id),id.forEach(t),gl=o(h),Wt=r(h,"DIV",{class:!0});var bd=n(Wt);c(Pe.$$.fragment,bd),bd.forEach(t),il=o(h),Ft=r(h,"DIV",{class:!0});var fd=n(Ft);c(Se.$$.fragment,fd),fd.forEach(t),bl=o(h),Ut=r(h,"DIV",{class:!0});var pd=n(Ut);c(Ae.$$.fragment,pd),pd.forEach(t),fl=o(h),zt=r(h,"DIV",{class:!0});var $d=n(zt);c(qe.$$.fragment,$d),$d.forEach(t),h.forEach(t),Cr=o(a),v=r(a,"DIV",{class:!0});var _=n(v);c(Ne.$$.fragment,_),pl=o(_),cr=r(_,"P",{});var hd=n(cr);$l=I(hd,`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),hd.forEach(t),hl=o(_),gr=r(_,"P",{});var ud=n(gr);ul=I(ud,`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),ud.forEach(t),vl=o(_),ir=r(_,"P",{});var vd=n(ir);yl=I(vd,`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),vd.forEach(t),_l=o(_),br=r(_,"P",{});var yd=n(br);wl=I(yd,`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),yd.forEach(t),Tl=o(_),fr=r(_,"P",{});var _d=n(fr);Il=I(_d,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),_d.forEach(t),El=o(_),Gt=r(_,"DIV",{class:!0});var wd=n(Gt);c(je.$$.fragment,wd),wd.forEach(t),kl=o(_),Yt=r(_,"DIV",{class:!0});var Td=n(Yt);c(Oe.$$.fragment,Td),Td.forEach(t),Dl=o(_),Ht=r(_,"DIV",{class:!0});var Id=n(Ht);c(Be.$$.fragment,Id),Id.forEach(t),Ll=o(_),Jt=r(_,"DIV",{class:!0});var Ed=n(Jt);c(Re.$$.fragment,Ed),Ed.forEach(t),Vl=o(_),Kt=r(_,"DIV",{class:!0});var kd=n(Kt);c(We.$$.fragment,kd),kd.forEach(t),Ml=o(_),Qt=r(_,"DIV",{class:!0});var Dd=n(Qt);c(Fe.$$.fragment,Dd),Dd.forEach(t),Cl=o(_),Xt=r(_,"DIV",{class:!0});var Ld=n(Xt);c(Ue.$$.fragment,Ld),Ld.forEach(t),xl=o(_),Zt=r(_,"DIV",{class:!0});var Vd=n(Zt);c(ze.$$.fragment,Vd),Vd.forEach(t),Pl=o(_),es=r(_,"DIV",{class:!0});var Md=n(es);c(Ge.$$.fragment,Md),Md.forEach(t),Sl=o(_),as=r(_,"DIV",{class:!0});var Cd=n(as);c(Ye.$$.fragment,Cd),Cd.forEach(t),Al=o(_),ts=r(_,"DIV",{class:!0});var xd=n(ts);c(He.$$.fragment,xd),xd.forEach(t),ql=o(_),ss=r(_,"DIV",{class:!0});var Pd=n(ss);c(Je.$$.fragment,Pd),Pd.forEach(t),Nl=o(_),rs=r(_,"DIV",{class:!0});var Sd=n(rs);c(Ke.$$.fragment,Sd),Sd.forEach(t),jl=o(_),ns=r(_,"DIV",{class:!0});var Ad=n(ns);c(Qe.$$.fragment,Ad),Ad.forEach(t),Ol=o(_),ls=r(_,"DIV",{class:!0});var qd=n(ls);c(Xe.$$.fragment,qd),qd.forEach(t),Bl=o(_),os=r(_,"DIV",{class:!0});var Nd=n(os);c(Ze.$$.fragment,Nd),Nd.forEach(t),Rl=o(_),ms=r(_,"DIV",{class:!0});var jd=n(ms);c(ea.$$.fragment,jd),jd.forEach(t),Wl=o(_),P=r(_,"DIV",{class:!0});var Ks=n(P);c(aa.$$.fragment,Ks),Fl=o(Ks),pr=r(Ks,"P",{});var Od=n(pr);Ul=I(Od,"Table.filter(self, mask, null_selection_behavior=u\u2019drop\u2019)"),Od.forEach(t),zl=o(Ks),ta=r(Ks,"P",{});var jr=n(ta);Gl=I(jr,"Select records from a Table. See "),$r=r(jr,"CODE",{});var Bd=n($r);Yl=I(Bd,"pyarrow.compute.filter()"),Bd.forEach(t),Hl=I(jr,`for
full usage.`),jr.forEach(t),Ks.forEach(t),Jl=o(_),ds=r(_,"DIV",{class:!0});var Rd=n(ds);c(sa.$$.fragment,Rd),Rd.forEach(t),Kl=o(_),cs=r(_,"DIV",{class:!0});var Wd=n(cs);c(ra.$$.fragment,Wd),Wd.forEach(t),Ql=o(_),gs=r(_,"DIV",{class:!0});var Fd=n(gs);c(na.$$.fragment,Fd),Fd.forEach(t),Xl=o(_),is=r(_,"DIV",{class:!0});var Ud=n(is);c(la.$$.fragment,Ud),Ud.forEach(t),Zl=o(_),bs=r(_,"DIV",{class:!0});var zd=n(bs);c(oa.$$.fragment,zd),zd.forEach(t),eo=o(_),fs=r(_,"DIV",{class:!0});var Gd=n(fs);c(ma.$$.fragment,Gd),Gd.forEach(t),ao=o(_),ps=r(_,"DIV",{class:!0});var Yd=n(ps);c(da.$$.fragment,Yd),Yd.forEach(t),to=o(_),$s=r(_,"DIV",{class:!0});var Hd=n($s);c(ca.$$.fragment,Hd),Hd.forEach(t),so=o(_),hs=r(_,"DIV",{class:!0});var Jd=n(hs);c(ga.$$.fragment,Jd),Jd.forEach(t),ro=o(_),us=r(_,"DIV",{class:!0});var Kd=n(us);c(ia.$$.fragment,Kd),Kd.forEach(t),no=o(_),vs=r(_,"DIV",{class:!0});var Qd=n(vs);c(ba.$$.fragment,Qd),Qd.forEach(t),_.forEach(t),xr=o(a),u=r(a,"DIV",{class:!0});var y=n(u);c(fa.$$.fragment,y),lo=o(y),hr=r(y,"P",{});var Xd=n(hr);oo=I(Xd,`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),Xd.forEach(t),mo=o(y),ur=r(y,"P",{});var Zd=n(ur);co=I(Zd,`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),Zd.forEach(t),go=o(y),pa=r(y,"UL",{});var Or=n(pa);vr=r(Or,"LI",{});var ec=n(vr);io=I(ec,"the InMemoryTable objects are pickled by copying all the data in memory;"),ec.forEach(t),bo=o(Or),yr=r(Or,"LI",{});var ac=n(yr);fo=I(ac,`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),ac.forEach(t),Or.forEach(t),po=o(y),$a=r(y,"P",{});var Br=n($a);$o=I(Br,`Its implementation requires to store each block separately.
The `),_r=r(Br,"CODE",{});var tc=n(_r);ho=I(tc,"blocks"),tc.forEach(t),uo=I(Br,` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),Br.forEach(t),vo=o(y),wr=r(y,"P",{});var sc=n(wr);yo=I(sc,`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),sc.forEach(t),_o=o(y),ys=r(y,"DIV",{class:!0});var rc=n(ys);c(ha.$$.fragment,rc),rc.forEach(t),wo=o(y),_s=r(y,"DIV",{class:!0});var nc=n(_s);c(ua.$$.fragment,nc),nc.forEach(t),To=o(y),ws=r(y,"DIV",{class:!0});var lc=n(ws);c(va.$$.fragment,lc),lc.forEach(t),Io=o(y),Ts=r(y,"DIV",{class:!0});var oc=n(Ts);c(ya.$$.fragment,oc),oc.forEach(t),Eo=o(y),Is=r(y,"DIV",{class:!0});var mc=n(Is);c(_a.$$.fragment,mc),mc.forEach(t),ko=o(y),Es=r(y,"DIV",{class:!0});var dc=n(Es);c(wa.$$.fragment,dc),dc.forEach(t),Do=o(y),ks=r(y,"DIV",{class:!0});var cc=n(ks);c(Ta.$$.fragment,cc),cc.forEach(t),Lo=o(y),Ds=r(y,"DIV",{class:!0});var gc=n(Ds);c(Ia.$$.fragment,gc),gc.forEach(t),Vo=o(y),Ls=r(y,"DIV",{class:!0});var ic=n(Ls);c(Ea.$$.fragment,ic),ic.forEach(t),Mo=o(y),Vs=r(y,"DIV",{class:!0});var bc=n(Vs);c(ka.$$.fragment,bc),bc.forEach(t),Co=o(y),Ms=r(y,"DIV",{class:!0});var fc=n(Ms);c(Da.$$.fragment,fc),fc.forEach(t),xo=o(y),Cs=r(y,"DIV",{class:!0});var pc=n(Cs);c(La.$$.fragment,pc),pc.forEach(t),Po=o(y),xs=r(y,"DIV",{class:!0});var $c=n(xs);c(Va.$$.fragment,$c),$c.forEach(t),So=o(y),Ps=r(y,"DIV",{class:!0});var hc=n(Ps);c(Ma.$$.fragment,hc),hc.forEach(t),Ao=o(y),Ss=r(y,"DIV",{class:!0});var uc=n(Ss);c(Ca.$$.fragment,uc),uc.forEach(t),qo=o(y),As=r(y,"DIV",{class:!0});var vc=n(As);c(xa.$$.fragment,vc),vc.forEach(t),No=o(y),qs=r(y,"DIV",{class:!0});var yc=n(qs);c(Pa.$$.fragment,yc),yc.forEach(t),jo=o(y),S=r(y,"DIV",{class:!0});var Qs=n(S);c(Sa.$$.fragment,Qs),Oo=o(Qs),Tr=r(Qs,"P",{});var _c=n(Tr);Bo=I(_c,"Table.filter(self, mask, null_selection_behavior=u\u2019drop\u2019)"),_c.forEach(t),Ro=o(Qs),Aa=r(Qs,"P",{});var Rr=n(Aa);Wo=I(Rr,"Select records from a Table. See "),Ir=r(Rr,"CODE",{});var wc=n(Ir);Fo=I(wc,"pyarrow.compute.filter()"),wc.forEach(t),Uo=I(Rr,`for
full usage.`),Rr.forEach(t),Qs.forEach(t),zo=o(y),Ns=r(y,"DIV",{class:!0});var Tc=n(Ns);c(qa.$$.fragment,Tc),Tc.forEach(t),Go=o(y),js=r(y,"DIV",{class:!0});var Ic=n(js);c(Na.$$.fragment,Ic),Ic.forEach(t),Yo=o(y),Os=r(y,"DIV",{class:!0});var Ec=n(Os);c(ja.$$.fragment,Ec),Ec.forEach(t),Ho=o(y),Bs=r(y,"DIV",{class:!0});var kc=n(Bs);c(Oa.$$.fragment,kc),kc.forEach(t),Jo=o(y),Rs=r(y,"DIV",{class:!0});var Dc=n(Rs);c(Ba.$$.fragment,Dc),Dc.forEach(t),Ko=o(y),Ws=r(y,"DIV",{class:!0});var Lc=n(Ws);c(Ra.$$.fragment,Lc),Lc.forEach(t),Qo=o(y),Fs=r(y,"DIV",{class:!0});var Vc=n(Fs);c(Wa.$$.fragment,Vc),Vc.forEach(t),Xo=o(y),Us=r(y,"DIV",{class:!0});var Mc=n(Us);c(Fa.$$.fragment,Mc),Mc.forEach(t),Zo=o(y),zs=r(y,"DIV",{class:!0});var Cc=n(zs);c(Ua.$$.fragment,Cc),Cc.forEach(t),em=o(y),Gs=r(y,"DIV",{class:!0});var xc=n(Gs);c(za.$$.fragment,xc),xc.forEach(t),am=o(y),Ys=r(y,"DIV",{class:!0});var Pc=n(Ys);c(Ga.$$.fragment,Pc),Pc.forEach(t),tm=o(y),N=r(y,"DIV",{class:!0});var Wr=n(N);c(Ya.$$.fragment,Wr),sm=o(Wr),Er=r(Wr,"P",{});var Sc=n(Er);rm=I(Sc,"Create ConcatenationTable from list of tables."),Sc.forEach(t),Wr.forEach(t),y.forEach(t),Pr=o(a),A=r(a,"DIV",{class:!0});var Fr=n(A);c(Ha.$$.fragment,Fr),nm=o(Fr),kr=r(Fr,"P",{});var Ac=n(kr);lm=I(Ac,"Concatenate tables."),Ac.forEach(t),Fr.forEach(t),Sr=o(a),q=r(a,"DIV",{class:!0});var Ur=n(q);c(Ja.$$.fragment,Ur),om=o(Ur),Dr=r(Ur,"P",{});var qc=n(Dr);mm=I(qc,`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),qc.forEach(t),Ur.forEach(t),this.h()},h(){m(M,"name","hf:doc:metadata"),m(M,"content",JSON.stringify(Uc)),m(V,"id","datasets.table.Table"),m(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(V,"href","#datasets.table.Table"),m(L,"class","relative group"),m(Qa,"href","/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"),m(Xa,"class","docstring"),m(Za,"class","docstring"),m(et,"class","docstring"),m(at,"class","docstring"),m(tt,"class","docstring"),m(st,"class","docstring"),m(rt,"class","docstring"),m(nt,"class","docstring"),m(lt,"class","docstring"),m(ot,"class","docstring"),m(mt,"class","docstring"),m(dt,"class","docstring"),m(ct,"class","docstring"),m(gt,"class","docstring"),m(it,"class","docstring"),m(w,"class","docstring"),m(bt,"class","docstring"),m(ft,"class","docstring"),m(pt,"class","docstring"),m($t,"class","docstring"),m(ht,"class","docstring"),m(ut,"class","docstring"),m(vt,"class","docstring"),m(yt,"class","docstring"),m(_t,"class","docstring"),m(wt,"class","docstring"),m(Tt,"class","docstring"),m(It,"class","docstring"),m(Et,"class","docstring"),m(kt,"class","docstring"),m(Dt,"class","docstring"),m(Lt,"class","docstring"),m(Vt,"class","docstring"),m(x,"class","docstring"),m(Mt,"class","docstring"),m(Ct,"class","docstring"),m(xt,"class","docstring"),m(Pt,"class","docstring"),m(St,"class","docstring"),m(At,"class","docstring"),m(qt,"class","docstring"),m(Nt,"class","docstring"),m(jt,"class","docstring"),m(Ot,"class","docstring"),m(Bt,"class","docstring"),m(Rt,"class","docstring"),m(Wt,"class","docstring"),m(Ft,"class","docstring"),m(Ut,"class","docstring"),m(zt,"class","docstring"),m($,"class","docstring"),m(Gt,"class","docstring"),m(Yt,"class","docstring"),m(Ht,"class","docstring"),m(Jt,"class","docstring"),m(Kt,"class","docstring"),m(Qt,"class","docstring"),m(Xt,"class","docstring"),m(Zt,"class","docstring"),m(es,"class","docstring"),m(as,"class","docstring"),m(ts,"class","docstring"),m(ss,"class","docstring"),m(rs,"class","docstring"),m(ns,"class","docstring"),m(ls,"class","docstring"),m(os,"class","docstring"),m(ms,"class","docstring"),m(P,"class","docstring"),m(ds,"class","docstring"),m(cs,"class","docstring"),m(gs,"class","docstring"),m(is,"class","docstring"),m(bs,"class","docstring"),m(fs,"class","docstring"),m(ps,"class","docstring"),m($s,"class","docstring"),m(hs,"class","docstring"),m(us,"class","docstring"),m(vs,"class","docstring"),m(v,"class","docstring"),m(ys,"class","docstring"),m(_s,"class","docstring"),m(ws,"class","docstring"),m(Ts,"class","docstring"),m(Is,"class","docstring"),m(Es,"class","docstring"),m(ks,"class","docstring"),m(Ds,"class","docstring"),m(Ls,"class","docstring"),m(Vs,"class","docstring"),m(Ms,"class","docstring"),m(Cs,"class","docstring"),m(xs,"class","docstring"),m(Ps,"class","docstring"),m(Ss,"class","docstring"),m(As,"class","docstring"),m(qs,"class","docstring"),m(S,"class","docstring"),m(Ns,"class","docstring"),m(js,"class","docstring"),m(Os,"class","docstring"),m(Bs,"class","docstring"),m(Rs,"class","docstring"),m(Ws,"class","docstring"),m(Fs,"class","docstring"),m(Us,"class","docstring"),m(zs,"class","docstring"),m(Gs,"class","docstring"),m(Ys,"class","docstring"),m(N,"class","docstring"),m(u,"class","docstring"),m(A,"class","docstring"),m(q,"class","docstring")},m(a,k){e(document.head,M),D(a,Ka,k),D(a,L,k),e(L,V),e(V,Xs),g(j,Xs,null),e(L,Gr),e(L,Zs),e(Zs,Yr),D(a,Lr,k),D(a,C,k),e(C,Hr),e(C,er),e(er,Jr),e(C,Kr),e(C,Qa),e(Qa,Qr),e(C,Xr),D(a,Vr,k),D(a,w,k),g(O,w,null),e(w,Zr),e(w,ar),e(ar,en),e(w,an),e(w,tr),e(tr,tn),e(w,sn),e(w,sr),e(sr,rn),e(w,nn),e(w,Xa),g(B,Xa,null),e(w,ln),e(w,Za),g(R,Za,null),e(w,on),e(w,et),g(W,et,null),e(w,mn),e(w,at),g(F,at,null),e(w,dn),e(w,tt),g(U,tt,null),e(w,cn),e(w,st),g(z,st,null),e(w,gn),e(w,rt),g(G,rt,null),e(w,bn),e(w,nt),g(Y,nt,null),e(w,fn),e(w,lt),g(H,lt,null),e(w,pn),e(w,ot),g(J,ot,null),e(w,$n),e(w,mt),g(K,mt,null),e(w,hn),e(w,dt),g(Q,dt,null),e(w,un),e(w,ct),g(X,ct,null),e(w,vn),e(w,gt),g(Z,gt,null),e(w,yn),e(w,it),g(ee,it,null),D(a,Mr,k),D(a,$,k),g(ae,$,null),e($,_n),e($,rr),e(rr,wn),e($,Tn),e($,nr),e(nr,In),e($,En),e($,lr),e(lr,kn),e($,Dn),e($,or),e(or,Ln),e($,Vn),e($,bt),g(te,bt,null),e($,Mn),e($,ft),g(se,ft,null),e($,Cn),e($,pt),g(re,pt,null),e($,xn),e($,$t),g(ne,$t,null),e($,Pn),e($,ht),g(le,ht,null),e($,Sn),e($,ut),g(oe,ut,null),e($,An),e($,vt),g(me,vt,null),e($,qn),e($,yt),g(de,yt,null),e($,Nn),e($,_t),g(ce,_t,null),e($,jn),e($,wt),g(ge,wt,null),e($,On),e($,Tt),g(ie,Tt,null),e($,Bn),e($,It),g(be,It,null),e($,Rn),e($,Et),g(fe,Et,null),e($,Wn),e($,kt),g(pe,kt,null),e($,Fn),e($,Dt),g($e,Dt,null),e($,Un),e($,Lt),g(he,Lt,null),e($,zn),e($,Vt),g(ue,Vt,null),e($,Gn),e($,x),g(ve,x,null),e(x,Yn),e(x,mr),e(mr,Hn),e(x,Jn),e(x,ye),e(ye,Kn),e(ye,dr),e(dr,Qn),e(ye,Xn),e($,Zn),e($,Mt),g(_e,Mt,null),e($,el),e($,Ct),g(we,Ct,null),e($,al),e($,xt),g(Te,xt,null),e($,tl),e($,Pt),g(Ie,Pt,null),e($,sl),e($,St),g(Ee,St,null),e($,rl),e($,At),g(ke,At,null),e($,nl),e($,qt),g(De,qt,null),e($,ll),e($,Nt),g(Le,Nt,null),e($,ol),e($,jt),g(Ve,jt,null),e($,ml),e($,Ot),g(Me,Ot,null),e($,dl),e($,Bt),g(Ce,Bt,null),e($,cl),e($,Rt),g(xe,Rt,null),e($,gl),e($,Wt),g(Pe,Wt,null),e($,il),e($,Ft),g(Se,Ft,null),e($,bl),e($,Ut),g(Ae,Ut,null),e($,fl),e($,zt),g(qe,zt,null),D(a,Cr,k),D(a,v,k),g(Ne,v,null),e(v,pl),e(v,cr),e(cr,$l),e(v,hl),e(v,gr),e(gr,ul),e(v,vl),e(v,ir),e(ir,yl),e(v,_l),e(v,br),e(br,wl),e(v,Tl),e(v,fr),e(fr,Il),e(v,El),e(v,Gt),g(je,Gt,null),e(v,kl),e(v,Yt),g(Oe,Yt,null),e(v,Dl),e(v,Ht),g(Be,Ht,null),e(v,Ll),e(v,Jt),g(Re,Jt,null),e(v,Vl),e(v,Kt),g(We,Kt,null),e(v,Ml),e(v,Qt),g(Fe,Qt,null),e(v,Cl),e(v,Xt),g(Ue,Xt,null),e(v,xl),e(v,Zt),g(ze,Zt,null),e(v,Pl),e(v,es),g(Ge,es,null),e(v,Sl),e(v,as),g(Ye,as,null),e(v,Al),e(v,ts),g(He,ts,null),e(v,ql),e(v,ss),g(Je,ss,null),e(v,Nl),e(v,rs),g(Ke,rs,null),e(v,jl),e(v,ns),g(Qe,ns,null),e(v,Ol),e(v,ls),g(Xe,ls,null),e(v,Bl),e(v,os),g(Ze,os,null),e(v,Rl),e(v,ms),g(ea,ms,null),e(v,Wl),e(v,P),g(aa,P,null),e(P,Fl),e(P,pr),e(pr,Ul),e(P,zl),e(P,ta),e(ta,Gl),e(ta,$r),e($r,Yl),e(ta,Hl),e(v,Jl),e(v,ds),g(sa,ds,null),e(v,Kl),e(v,cs),g(ra,cs,null),e(v,Ql),e(v,gs),g(na,gs,null),e(v,Xl),e(v,is),g(la,is,null),e(v,Zl),e(v,bs),g(oa,bs,null),e(v,eo),e(v,fs),g(ma,fs,null),e(v,ao),e(v,ps),g(da,ps,null),e(v,to),e(v,$s),g(ca,$s,null),e(v,so),e(v,hs),g(ga,hs,null),e(v,ro),e(v,us),g(ia,us,null),e(v,no),e(v,vs),g(ba,vs,null),D(a,xr,k),D(a,u,k),g(fa,u,null),e(u,lo),e(u,hr),e(hr,oo),e(u,mo),e(u,ur),e(ur,co),e(u,go),e(u,pa),e(pa,vr),e(vr,io),e(pa,bo),e(pa,yr),e(yr,fo),e(u,po),e(u,$a),e($a,$o),e($a,_r),e(_r,ho),e($a,uo),e(u,vo),e(u,wr),e(wr,yo),e(u,_o),e(u,ys),g(ha,ys,null),e(u,wo),e(u,_s),g(ua,_s,null),e(u,To),e(u,ws),g(va,ws,null),e(u,Io),e(u,Ts),g(ya,Ts,null),e(u,Eo),e(u,Is),g(_a,Is,null),e(u,ko),e(u,Es),g(wa,Es,null),e(u,Do),e(u,ks),g(Ta,ks,null),e(u,Lo),e(u,Ds),g(Ia,Ds,null),e(u,Vo),e(u,Ls),g(Ea,Ls,null),e(u,Mo),e(u,Vs),g(ka,Vs,null),e(u,Co),e(u,Ms),g(Da,Ms,null),e(u,xo),e(u,Cs),g(La,Cs,null),e(u,Po),e(u,xs),g(Va,xs,null),e(u,So),e(u,Ps),g(Ma,Ps,null),e(u,Ao),e(u,Ss),g(Ca,Ss,null),e(u,qo),e(u,As),g(xa,As,null),e(u,No),e(u,qs),g(Pa,qs,null),e(u,jo),e(u,S),g(Sa,S,null),e(S,Oo),e(S,Tr),e(Tr,Bo),e(S,Ro),e(S,Aa),e(Aa,Wo),e(Aa,Ir),e(Ir,Fo),e(Aa,Uo),e(u,zo),e(u,Ns),g(qa,Ns,null),e(u,Go),e(u,js),g(Na,js,null),e(u,Yo),e(u,Os),g(ja,Os,null),e(u,Ho),e(u,Bs),g(Oa,Bs,null),e(u,Jo),e(u,Rs),g(Ba,Rs,null),e(u,Ko),e(u,Ws),g(Ra,Ws,null),e(u,Qo),e(u,Fs),g(Wa,Fs,null),e(u,Xo),e(u,Us),g(Fa,Us,null),e(u,Zo),e(u,zs),g(Ua,zs,null),e(u,em),e(u,Gs),g(za,Gs,null),e(u,am),e(u,Ys),g(Ga,Ys,null),e(u,tm),e(u,N),g(Ya,N,null),e(N,sm),e(N,Er),e(Er,rm),D(a,Pr,k),D(a,A,k),g(Ha,A,null),e(A,nm),e(A,kr),e(kr,lm),D(a,Sr,k),D(a,q,k),g(Ja,q,null),e(q,om),e(q,Dr),e(Dr,mm),Ar=!0},p:Rc,i(a){Ar||(i(j.$$.fragment,a),i(O.$$.fragment,a),i(B.$$.fragment,a),i(R.$$.fragment,a),i(W.$$.fragment,a),i(F.$$.fragment,a),i(U.$$.fragment,a),i(z.$$.fragment,a),i(G.$$.fragment,a),i(Y.$$.fragment,a),i(H.$$.fragment,a),i(J.$$.fragment,a),i(K.$$.fragment,a),i(Q.$$.fragment,a),i(X.$$.fragment,a),i(Z.$$.fragment,a),i(ee.$$.fragment,a),i(ae.$$.fragment,a),i(te.$$.fragment,a),i(se.$$.fragment,a),i(re.$$.fragment,a),i(ne.$$.fragment,a),i(le.$$.fragment,a),i(oe.$$.fragment,a),i(me.$$.fragment,a),i(de.$$.fragment,a),i(ce.$$.fragment,a),i(ge.$$.fragment,a),i(ie.$$.fragment,a),i(be.$$.fragment,a),i(fe.$$.fragment,a),i(pe.$$.fragment,a),i($e.$$.fragment,a),i(he.$$.fragment,a),i(ue.$$.fragment,a),i(ve.$$.fragment,a),i(_e.$$.fragment,a),i(we.$$.fragment,a),i(Te.$$.fragment,a),i(Ie.$$.fragment,a),i(Ee.$$.fragment,a),i(ke.$$.fragment,a),i(De.$$.fragment,a),i(Le.$$.fragment,a),i(Ve.$$.fragment,a),i(Me.$$.fragment,a),i(Ce.$$.fragment,a),i(xe.$$.fragment,a),i(Pe.$$.fragment,a),i(Se.$$.fragment,a),i(Ae.$$.fragment,a),i(qe.$$.fragment,a),i(Ne.$$.fragment,a),i(je.$$.fragment,a),i(Oe.$$.fragment,a),i(Be.$$.fragment,a),i(Re.$$.fragment,a),i(We.$$.fragment,a),i(Fe.$$.fragment,a),i(Ue.$$.fragment,a),i(ze.$$.fragment,a),i(Ge.$$.fragment,a),i(Ye.$$.fragment,a),i(He.$$.fragment,a),i(Je.$$.fragment,a),i(Ke.$$.fragment,a),i(Qe.$$.fragment,a),i(Xe.$$.fragment,a),i(Ze.$$.fragment,a),i(ea.$$.fragment,a),i(aa.$$.fragment,a),i(sa.$$.fragment,a),i(ra.$$.fragment,a),i(na.$$.fragment,a),i(la.$$.fragment,a),i(oa.$$.fragment,a),i(ma.$$.fragment,a),i(da.$$.fragment,a),i(ca.$$.fragment,a),i(ga.$$.fragment,a),i(ia.$$.fragment,a),i(ba.$$.fragment,a),i(fa.$$.fragment,a),i(ha.$$.fragment,a),i(ua.$$.fragment,a),i(va.$$.fragment,a),i(ya.$$.fragment,a),i(_a.$$.fragment,a),i(wa.$$.fragment,a),i(Ta.$$.fragment,a),i(Ia.$$.fragment,a),i(Ea.$$.fragment,a),i(ka.$$.fragment,a),i(Da.$$.fragment,a),i(La.$$.fragment,a),i(Va.$$.fragment,a),i(Ma.$$.fragment,a),i(Ca.$$.fragment,a),i(xa.$$.fragment,a),i(Pa.$$.fragment,a),i(Sa.$$.fragment,a),i(qa.$$.fragment,a),i(Na.$$.fragment,a),i(ja.$$.fragment,a),i(Oa.$$.fragment,a),i(Ba.$$.fragment,a),i(Ra.$$.fragment,a),i(Wa.$$.fragment,a),i(Fa.$$.fragment,a),i(Ua.$$.fragment,a),i(za.$$.fragment,a),i(Ga.$$.fragment,a),i(Ya.$$.fragment,a),i(Ha.$$.fragment,a),i(Ja.$$.fragment,a),Ar=!0)},o(a){b(j.$$.fragment,a),b(O.$$.fragment,a),b(B.$$.fragment,a),b(R.$$.fragment,a),b(W.$$.fragment,a),b(F.$$.fragment,a),b(U.$$.fragment,a),b(z.$$.fragment,a),b(G.$$.fragment,a),b(Y.$$.fragment,a),b(H.$$.fragment,a),b(J.$$.fragment,a),b(K.$$.fragment,a),b(Q.$$.fragment,a),b(X.$$.fragment,a),b(Z.$$.fragment,a),b(ee.$$.fragment,a),b(ae.$$.fragment,a),b(te.$$.fragment,a),b(se.$$.fragment,a),b(re.$$.fragment,a),b(ne.$$.fragment,a),b(le.$$.fragment,a),b(oe.$$.fragment,a),b(me.$$.fragment,a),b(de.$$.fragment,a),b(ce.$$.fragment,a),b(ge.$$.fragment,a),b(ie.$$.fragment,a),b(be.$$.fragment,a),b(fe.$$.fragment,a),b(pe.$$.fragment,a),b($e.$$.fragment,a),b(he.$$.fragment,a),b(ue.$$.fragment,a),b(ve.$$.fragment,a),b(_e.$$.fragment,a),b(we.$$.fragment,a),b(Te.$$.fragment,a),b(Ie.$$.fragment,a),b(Ee.$$.fragment,a),b(ke.$$.fragment,a),b(De.$$.fragment,a),b(Le.$$.fragment,a),b(Ve.$$.fragment,a),b(Me.$$.fragment,a),b(Ce.$$.fragment,a),b(xe.$$.fragment,a),b(Pe.$$.fragment,a),b(Se.$$.fragment,a),b(Ae.$$.fragment,a),b(qe.$$.fragment,a),b(Ne.$$.fragment,a),b(je.$$.fragment,a),b(Oe.$$.fragment,a),b(Be.$$.fragment,a),b(Re.$$.fragment,a),b(We.$$.fragment,a),b(Fe.$$.fragment,a),b(Ue.$$.fragment,a),b(ze.$$.fragment,a),b(Ge.$$.fragment,a),b(Ye.$$.fragment,a),b(He.$$.fragment,a),b(Je.$$.fragment,a),b(Ke.$$.fragment,a),b(Qe.$$.fragment,a),b(Xe.$$.fragment,a),b(Ze.$$.fragment,a),b(ea.$$.fragment,a),b(aa.$$.fragment,a),b(sa.$$.fragment,a),b(ra.$$.fragment,a),b(na.$$.fragment,a),b(la.$$.fragment,a),b(oa.$$.fragment,a),b(ma.$$.fragment,a),b(da.$$.fragment,a),b(ca.$$.fragment,a),b(ga.$$.fragment,a),b(ia.$$.fragment,a),b(ba.$$.fragment,a),b(fa.$$.fragment,a),b(ha.$$.fragment,a),b(ua.$$.fragment,a),b(va.$$.fragment,a),b(ya.$$.fragment,a),b(_a.$$.fragment,a),b(wa.$$.fragment,a),b(Ta.$$.fragment,a),b(Ia.$$.fragment,a),b(Ea.$$.fragment,a),b(ka.$$.fragment,a),b(Da.$$.fragment,a),b(La.$$.fragment,a),b(Va.$$.fragment,a),b(Ma.$$.fragment,a),b(Ca.$$.fragment,a),b(xa.$$.fragment,a),b(Pa.$$.fragment,a),b(Sa.$$.fragment,a),b(qa.$$.fragment,a),b(Na.$$.fragment,a),b(ja.$$.fragment,a),b(Oa.$$.fragment,a),b(Ba.$$.fragment,a),b(Ra.$$.fragment,a),b(Wa.$$.fragment,a),b(Fa.$$.fragment,a),b(Ua.$$.fragment,a),b(za.$$.fragment,a),b(Ga.$$.fragment,a),b(Ya.$$.fragment,a),b(Ha.$$.fragment,a),b(Ja.$$.fragment,a),Ar=!1},d(a){t(M),a&&t(Ka),a&&t(L),f(j),a&&t(Lr),a&&t(C),a&&t(Vr),a&&t(w),f(O),f(B),f(R),f(W),f(F),f(U),f(z),f(G),f(Y),f(H),f(J),f(K),f(Q),f(X),f(Z),f(ee),a&&t(Mr),a&&t($),f(ae),f(te),f(se),f(re),f(ne),f(le),f(oe),f(me),f(de),f(ce),f(ge),f(ie),f(be),f(fe),f(pe),f($e),f(he),f(ue),f(ve),f(_e),f(we),f(Te),f(Ie),f(Ee),f(ke),f(De),f(Le),f(Ve),f(Me),f(Ce),f(xe),f(Pe),f(Se),f(Ae),f(qe),a&&t(Cr),a&&t(v),f(Ne),f(je),f(Oe),f(Be),f(Re),f(We),f(Fe),f(Ue),f(ze),f(Ge),f(Ye),f(He),f(Je),f(Ke),f(Qe),f(Xe),f(Ze),f(ea),f(aa),f(sa),f(ra),f(na),f(la),f(oa),f(ma),f(da),f(ca),f(ga),f(ia),f(ba),a&&t(xr),a&&t(u),f(fa),f(ha),f(ua),f(va),f(ya),f(_a),f(wa),f(Ta),f(Ia),f(Ea),f(ka),f(Da),f(La),f(Va),f(Ma),f(Ca),f(xa),f(Pa),f(Sa),f(qa),f(Na),f(ja),f(Oa),f(Ba),f(Ra),f(Wa),f(Fa),f(Ua),f(za),f(Ga),f(Ya),a&&t(Pr),a&&t(A),f(Ha),a&&t(Sr),a&&t(q),f(Ja)}}}const Uc={local:"datasets.table.Table",title:"Table Classes"};function zc(zr,M,Ka){let{fw:L}=M;return zr.$$set=V=>{"fw"in V&&Ka(0,L=V.fw)},[L]}class Jc extends Nc{constructor(M){super();jc(this,M,zc,Fc,Oc,{fw:0})}}export{Jc as default,Uc as metadata};
