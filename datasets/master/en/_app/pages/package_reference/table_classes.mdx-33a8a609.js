import{S as c$,i as i$,s as m$,e as r,k as n,w as m,t as d,M as p$,c as o,d as a,m as l,a as s,x as p,h as c,b as i,F as e,g as M,y as b,q as h,o as u,B as g,v as b$,L as h$}from"../../chunks/vendor-8138ceec.js";import{D as f}from"../../chunks/Docstring-6fa3bd37.js";import{C as u$}from"../../chunks/CodeBlock-fc89709f.js";import{I as Ao}from"../../chunks/IconCopyLink-2dd3a6ac.js";import{E as g$}from"../../chunks/ExampleCodeBlock-25dbadc2.js";function f$(_l){let D,oe,P,C,A;return C=new u$({props:{code:`import pandas as pd
import pyarrow as pa
df = pd.DataFrame({
pa.Table.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pyarrow <span class="hljs-keyword">as</span> pa
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({
    ...     <span class="hljs-string">&#x27;int&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
    ...     <span class="hljs-string">&#x27;str&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]
    ... })
<span class="hljs-meta">&gt;&gt;&gt; </span>pa.Table.from_pandas(df)
&lt;pyarrow.lib.Table <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f05d1fb1b40</span>&gt;`}}),{c(){D=r("p"),oe=d("Examples:"),P=n(),m(C.$$.fragment)},l(I){D=o(I,"P",{});var N=s(D);oe=c(N,"Examples:"),N.forEach(a),P=l(I),p(C.$$.fragment,I)},m(I,N){M(I,D,N),e(D,oe),M(I,P,N),b(C,I,N),A=!0},p:h$,i(I){A||(h(C.$$.fragment,I),A=!0)},o(I){u(C.$$.fragment,I),A=!1},d(I){I&&a(D),I&&a(P),g(C,I)}}}function y$(_l){let D,oe,P,C,A,I,N,No,Mc,Tl,j,Ic,jo,Dc,Cc,co,Pc,Lc,wl,K,se,Fo,zt,Ac,Vo,Nc,xl,x,Bt,jc,So,Fc,Vc,qo,Sc,qc,Ro,Rc,Uc,F,Ot,zc,Uo,Bc,Oc,Wt,Wc,zo,Xc,Hc,Gc,ne,Xt,Yc,Bo,Jc,Kc,le,Ht,Qc,Oo,Zc,ei,de,Gt,ti,Wo,ai,ri,ce,Yt,oi,Xo,si,ni,io,Jt,li,ie,Kt,di,Ho,ci,ii,me,Qt,mi,Go,pi,bi,pe,Zt,hi,Yo,ui,gi,be,ea,fi,Jo,yi,vi,he,ta,$i,Ko,_i,Ti,ue,aa,wi,Qo,xi,ki,V,ra,Ei,Zo,Mi,Ii,es,Di,Ci,ge,oa,Pi,ts,Li,Ai,fe,sa,Ni,as,ji,kl,Q,ye,rs,na,Fi,os,Vi,El,y,la,Si,ss,qi,Ri,ns,Ui,zi,ls,Bi,Oi,ds,Wi,Xi,S,da,Hi,cs,Gi,Yi,ca,Ji,is,Ki,Qi,Zi,ve,ia,em,ms,tm,am,$e,ma,rm,ps,om,sm,_e,pa,nm,bs,lm,dm,Te,ba,cm,hs,im,mm,mo,ha,pm,we,ua,bm,us,hm,um,xe,ga,gm,gs,fm,ym,ke,fa,vm,fs,$m,_m,Ee,ya,Tm,ys,wm,xm,Me,va,km,vs,Em,Mm,Ie,$a,Im,$s,Dm,Cm,q,_a,Pm,_s,Lm,Am,Ts,Nm,jm,De,Ta,Fm,ws,Vm,Sm,Ce,wa,qm,xs,Rm,Um,Pe,xa,zm,ks,Bm,Om,Le,ka,Wm,Es,Xm,Hm,Ae,Ea,Gm,Ms,Ym,Jm,Ne,Ma,Km,Is,Qm,Zm,R,Ia,ep,Ds,tp,ap,Cs,rp,op,je,Da,sp,Ps,np,lp,Fe,Ca,dp,Ls,cp,ip,U,Pa,mp,As,pp,bp,Ns,hp,up,Ve,La,gp,js,fp,yp,Se,Aa,vp,Fs,$p,_p,qe,Na,Tp,Vs,wp,xp,Re,ja,kp,Ss,Ep,Mp,Ue,Fa,Ip,qs,Dp,Cp,po,Va,Pp,bo,Sa,Lp,L,qa,Ap,Rs,Np,jp,Ra,Fp,Us,Vp,Sp,qp,Ua,Rp,zs,Up,zp,Bp,ze,Op,Be,za,Wp,Bs,Xp,Hp,Oe,Ba,Gp,Os,Yp,Jp,We,Oa,Kp,Ws,Qp,Ml,Z,Xe,Xs,Wa,Zp,Hs,eb,Il,_,Xa,tb,Gs,ab,rb,Ys,ob,sb,Js,nb,lb,Ks,db,cb,Qs,ib,mb,z,Ha,pb,Zs,bb,hb,Ga,ub,en,gb,fb,yb,He,Ya,vb,tn,$b,_b,Ge,Ja,Tb,an,wb,xb,Ye,Ka,kb,rn,Eb,Mb,Je,Qa,Ib,on,Db,Cb,ho,Za,Pb,Ke,er,Lb,sn,Ab,Nb,Qe,tr,jb,nn,Fb,Vb,Ze,ar,Sb,ln,qb,Rb,et,rr,Ub,dn,zb,Bb,tt,or,Ob,cn,Wb,Xb,at,sr,Hb,mn,Gb,Yb,B,nr,Jb,pn,Kb,Qb,bn,Zb,eh,rt,lr,th,hn,ah,rh,ot,dr,oh,un,sh,nh,st,cr,lh,gn,dh,ch,nt,ir,ih,fn,mh,ph,lt,mr,bh,yn,hh,uh,dt,pr,gh,vn,fh,yh,O,br,vh,$n,$h,_h,_n,Th,wh,ct,hr,xh,Tn,kh,Eh,it,ur,Mh,wn,Ih,Dh,W,gr,Ch,xn,Ph,Lh,kn,Ah,Nh,mt,fr,jh,En,Fh,Vh,pt,yr,Sh,Mn,qh,Rh,bt,vr,Uh,In,zh,Bh,ht,$r,Oh,Dn,Wh,Xh,ut,_r,Hh,Cn,Gh,Yh,uo,Tr,Dl,ee,gt,Pn,wr,Jh,Ln,Kh,Cl,$,xr,Qh,An,Zh,eu,Nn,tu,au,kr,jn,ru,ou,Fn,su,nu,Er,lu,Vn,du,cu,iu,Sn,mu,pu,X,Mr,bu,qn,hu,uu,Ir,gu,Rn,fu,yu,vu,ft,Dr,$u,Un,_u,Tu,yt,Cr,wu,zn,xu,ku,vt,Pr,Eu,Bn,Mu,Iu,$t,Lr,Du,On,Cu,Pu,go,Ar,Lu,_t,Nr,Au,Wn,Nu,ju,Tt,jr,Fu,Xn,Vu,Su,wt,Fr,qu,Hn,Ru,Uu,xt,Vr,zu,Gn,Bu,Ou,kt,Sr,Wu,Yn,Xu,Hu,Et,qr,Gu,Jn,Yu,Ju,H,Rr,Ku,Kn,Qu,Zu,Qn,eg,tg,Mt,Ur,ag,Zn,rg,og,It,zr,sg,el,ng,lg,Dt,Br,dg,tl,cg,ig,Ct,Or,mg,al,pg,bg,Pt,Wr,hg,rl,ug,gg,Lt,Xr,fg,ol,yg,vg,G,Hr,$g,sl,_g,Tg,nl,wg,xg,At,Gr,kg,ll,Eg,Mg,Nt,Yr,Ig,dl,Dg,Cg,Y,Jr,Pg,cl,Lg,Ag,il,Ng,jg,jt,Kr,Fg,ml,Vg,Sg,Ft,Qr,qg,pl,Rg,Ug,Vt,Zr,zg,bl,Bg,Og,St,eo,Wg,hl,Xg,Hg,qt,to,Gg,ul,Yg,Jg,fo,ao,Kg,Rt,ro,Qg,gl,Zg,Pl,te,Ut,fl,oo,ef,yl,tf,Ll,ae,so,af,vl,rf,Al,re,no,of,$l,sf,Nl;return I=new Ao({}),zt=new Ao({}),Bt=new f({props:{name:"class datasets.table.Table",anchor:"datasets.table.Table",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L147"}}),Ot=new f({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L198"}}),Xt=new f({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.Table.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L214",returnType:`
<p><code>bool</code></p>
`}}),Ht=new f({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231",returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Gt=new f({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Yt=new f({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.Table.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.Table.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.Table.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.Table.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.Table.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.Table.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.Table.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.Table.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.Table.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.Table.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.Table.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.Table.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.Table.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254",returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Jt=new f({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L316"}}),Kt=new f({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L319",returnType:`
<p><code>pyarrow.Field</code></p>
`}}),Qt=new f({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.Table.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L332",returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Zt=new f({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L345"}}),ea=new f({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),ta=new f({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),aa=new f({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),ra=new f({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),oa=new f({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),sa=new f({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L407"}}),na=new Ao({}),la=new f({props:{name:"class datasets.table.InMemoryTable",anchor:"datasets.table.InMemoryTable",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L630"}}),da=new f({props:{name:"validate",anchor:"datasets.table.InMemoryTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L198"}}),ia=new f({props:{name:"equals",anchor:"datasets.table.InMemoryTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.InMemoryTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L214",returnType:`
<p><code>bool</code></p>
`}}),ma=new f({props:{name:"to_batches",anchor:"datasets.table.InMemoryTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231",returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),pa=new f({props:{name:"to_pydict",anchor:"datasets.table.InMemoryTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),ba=new f({props:{name:"to_pandas",anchor:"datasets.table.InMemoryTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.InMemoryTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.InMemoryTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.InMemoryTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.InMemoryTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.InMemoryTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.InMemoryTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.InMemoryTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.InMemoryTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.InMemoryTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.InMemoryTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.InMemoryTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.InMemoryTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.InMemoryTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254",returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),ha=new f({props:{name:"to_string",anchor:"datasets.table.InMemoryTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L316"}}),ua=new f({props:{name:"field",anchor:"datasets.table.InMemoryTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L319",returnType:`
<p><code>pyarrow.Field</code></p>
`}}),ga=new f({props:{name:"column",anchor:"datasets.table.InMemoryTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L332",returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),fa=new f({props:{name:"itercolumns",anchor:"datasets.table.InMemoryTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L345"}}),ya=new f({props:{name:"schema",anchor:"datasets.table.InMemoryTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),va=new f({props:{name:"columns",anchor:"datasets.table.InMemoryTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),$a=new f({props:{name:"num_columns",anchor:"datasets.table.InMemoryTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),_a=new f({props:{name:"num_rows",anchor:"datasets.table.InMemoryTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),Ta=new f({props:{name:"shape",anchor:"datasets.table.InMemoryTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),wa=new f({props:{name:"nbytes",anchor:"datasets.table.InMemoryTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L407"}}),xa=new f({props:{name:"column_names",anchor:"datasets.table.InMemoryTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L414"}}),ka=new f({props:{name:"slice",anchor:"datasets.table.InMemoryTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.InMemoryTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L767",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ea=new f({props:{name:"filter",anchor:"datasets.table.InMemoryTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L784"}}),Ma=new f({props:{name:"flatten",anchor:"datasets.table.InMemoryTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L790",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ia=new f({props:{name:"combine_chunks",anchor:"datasets.table.InMemoryTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L804",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Da=new f({props:{name:"cast",anchor:"datasets.table.InMemoryTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.InMemoryTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L820",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ca=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.InMemoryTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L835",returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Pa=new f({props:{name:"add_column",anchor:"datasets.table.InMemoryTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.InMemoryTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L849",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),La=new f({props:{name:"append_column",anchor:"datasets.table.InMemoryTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L870",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Aa=new f({props:{name:"remove_column",anchor:"datasets.table.InMemoryTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L887",returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Na=new f({props:{name:"set_column",anchor:"datasets.table.InMemoryTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.InMemoryTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L901",returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ja=new f({props:{name:"rename_columns",anchor:"datasets.table.InMemoryTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L920"}}),Fa=new f({props:{name:"drop",anchor:"datasets.table.InMemoryTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L926",returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Va=new f({props:{name:"from_file",anchor:"datasets.table.InMemoryTable.from_file",parameters:[{name:"filename",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L645"}}),Sa=new f({props:{name:"from_buffer",anchor:"datasets.table.InMemoryTable.from_buffer",parameters:[{name:"buffer",val:": Buffer"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L650"}}),qa=new f({props:{name:"from_pandas",anchor:"datasets.table.InMemoryTable.from_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014;",name:"df"},{anchor:"datasets.table.InMemoryTable.from_pandas.schema",description:`<strong>schema</strong> (<code>pyarrow.Schema</code>, optional) &#x2014;
The expected schema of the Arrow Table. This can be used to
indicate the type of columns if we cannot infer it automatically.
If passed, the output will have exactly this schema. Columns
specified in the schema that are not found in the DataFrame columns
or its index will raise an error. Additional columns or index
levels in the DataFrame which are not specified in the schema will
be ignored.`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014;
Whether to store the index as an additional column in the resulting
<code>Table</code>. The default of None will store the index as a column,
except for RangeIndex which is stored as metadata only. Use
<code>preserve_index=True</code> to force it to be stored as a column.`,name:"preserve_index"},{anchor:"datasets.table.InMemoryTable.from_pandas.nthreads",description:`<strong>nthreads</strong> (<code>int</code>, defaults to <code>None</code> (may use up to system CPU count threads)) &#x2014;
If greater than 1, convert columns to Arrow in parallel using
indicated number of threads`,name:"nthreads"},{anchor:"datasets.table.InMemoryTable.from_pandas.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014;
List of column to be converted. If None, use all columns.`,name:"columns"},{anchor:"datasets.table.InMemoryTable.from_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L655",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ze=new g$({props:{anchor:"datasets.table.InMemoryTable.from_pandas.example",$$slots:{default:[f$]},$$scope:{ctx:_l}}}),za=new f({props:{name:"from_arrays",anchor:"datasets.table.InMemoryTable.from_arrays",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_arrays.arrays",description:`<strong>arrays</strong> (<code>List[Union[pyarrow.Array, pyarrow.ChunkedArray]]</code>) &#x2014;
Equal-length arrays that should form the table.`,name:"arrays"},{anchor:"datasets.table.InMemoryTable.from_arrays.names",description:`<strong>names</strong> (<code>List[str]</code>, optional) &#x2014;
Names for the table columns. If not passed, schema must be passed`,name:"names"},{anchor:"datasets.table.InMemoryTable.from_arrays.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
Schema for the created table. If not passed, names must be passed`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_arrays.metadata",description:`<strong>metadata</strong> (<code>Union[dict, Mapping]</code>, default None) &#x2014;
Optional metadata for the schema (if inferred).`,name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L713",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ba=new f({props:{name:"from_pydict",anchor:"datasets.table.InMemoryTable.from_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_pydict.mapping",description:`<strong>mapping</strong> (<code>Union[dict, Mapping]</code>) &#x2014;
A mapping of strings to Arrays or Python lists.`,name:"mapping"},{anchor:"datasets.table.InMemoryTable.from_pydict.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
If not passed, will be inferred from the Mapping values`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_pydict.metadata",description:`<strong>metadata</strong> (<code>Union[dict, Mapping]</code>, default None) &#x2014;
Optional metadata for the schema (if inferred).`,name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L733",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Oa=new f({props:{name:"from_batches",anchor:"datasets.table.InMemoryTable.from_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_batches.batches",description:`<strong>batches</strong> (<code>Union[Sequence[pyarrow.RecordBatch], Iterator[pyarrow.RecordBatch]]</code>) &#x2014;
Sequence of RecordBatch to be converted, all schemas must be equal.`,name:"batches"},{anchor:"datasets.table.InMemoryTable.from_batches.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
If not passed, will be inferred from the first RecordBatch.`,name:"schema"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L751",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Wa=new Ao({}),Xa=new f({props:{name:"class datasets.table.MemoryMappedTable",anchor:"datasets.table.MemoryMappedTable",parameters:[{name:"table",val:": Table"},{name:"path",val:": str"},{name:"replays",val:": typing.Union[typing.List[typing.Tuple[str, tuple, dict]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L948"}}),Ha=new f({props:{name:"validate",anchor:"datasets.table.MemoryMappedTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L198"}}),Ya=new f({props:{name:"equals",anchor:"datasets.table.MemoryMappedTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.MemoryMappedTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L214",returnType:`
<p><code>bool</code></p>
`}}),Ja=new f({props:{name:"to_batches",anchor:"datasets.table.MemoryMappedTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231",returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Ka=new f({props:{name:"to_pydict",anchor:"datasets.table.MemoryMappedTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Qa=new f({props:{name:"to_pandas",anchor:"datasets.table.MemoryMappedTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.MemoryMappedTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254",returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Za=new f({props:{name:"to_string",anchor:"datasets.table.MemoryMappedTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L316"}}),er=new f({props:{name:"field",anchor:"datasets.table.MemoryMappedTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L319",returnType:`
<p><code>pyarrow.Field</code></p>
`}}),tr=new f({props:{name:"column",anchor:"datasets.table.MemoryMappedTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L332",returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),ar=new f({props:{name:"itercolumns",anchor:"datasets.table.MemoryMappedTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L345"}}),rr=new f({props:{name:"schema",anchor:"datasets.table.MemoryMappedTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),or=new f({props:{name:"columns",anchor:"datasets.table.MemoryMappedTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),sr=new f({props:{name:"num_columns",anchor:"datasets.table.MemoryMappedTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),nr=new f({props:{name:"num_rows",anchor:"datasets.table.MemoryMappedTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),lr=new f({props:{name:"shape",anchor:"datasets.table.MemoryMappedTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),dr=new f({props:{name:"nbytes",anchor:"datasets.table.MemoryMappedTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L407"}}),cr=new f({props:{name:"column_names",anchor:"datasets.table.MemoryMappedTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L414"}}),ir=new f({props:{name:"slice",anchor:"datasets.table.MemoryMappedTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.MemoryMappedTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1007",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),mr=new f({props:{name:"filter",anchor:"datasets.table.MemoryMappedTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1026"}}),pr=new f({props:{name:"flatten",anchor:"datasets.table.MemoryMappedTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1034",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),br=new f({props:{name:"combine_chunks",anchor:"datasets.table.MemoryMappedTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1050",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),hr=new f({props:{name:"cast",anchor:"datasets.table.MemoryMappedTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.MemoryMappedTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1068",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ur=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1085",returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),gr=new f({props:{name:"add_column",anchor:"datasets.table.MemoryMappedTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.MemoryMappedTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1101",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),fr=new f({props:{name:"append_column",anchor:"datasets.table.MemoryMappedTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1124",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),yr=new f({props:{name:"remove_column",anchor:"datasets.table.MemoryMappedTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1143",returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),vr=new f({props:{name:"set_column",anchor:"datasets.table.MemoryMappedTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.MemoryMappedTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1159",returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),$r=new f({props:{name:"rename_columns",anchor:"datasets.table.MemoryMappedTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1180"}}),_r=new f({props:{name:"drop",anchor:"datasets.table.MemoryMappedTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1188",returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Tr=new f({props:{name:"from_file",anchor:"datasets.table.MemoryMappedTable.from_file",parameters:[{name:"filename",val:": str"},{name:"replays",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L974"}}),wr=new Ao({}),xr=new f({props:{name:"class datasets.table.ConcatenationTable",anchor:"datasets.table.ConcatenationTable",parameters:[{name:"table",val:": Table"},{name:"blocks",val:": typing.List[typing.List[datasets.table.TableBlock]]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1215"}}),Mr=new f({props:{name:"validate",anchor:"datasets.table.ConcatenationTable.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L198"}}),Dr=new f({props:{name:"equals",anchor:"datasets.table.ConcatenationTable.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.ConcatenationTable.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L214",returnType:`
<p><code>bool</code></p>
`}}),Cr=new f({props:{name:"to_batches",anchor:"datasets.table.ConcatenationTable.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231",returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Pr=new f({props:{name:"to_pydict",anchor:"datasets.table.ConcatenationTable.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Lr=new f({props:{name:"to_pandas",anchor:"datasets.table.ConcatenationTable.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.ConcatenationTable.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.ConcatenationTable.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.ConcatenationTable.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.ConcatenationTable.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.ConcatenationTable.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.ConcatenationTable.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.ConcatenationTable.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.ConcatenationTable.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.ConcatenationTable.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.ConcatenationTable.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.ConcatenationTable.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.ConcatenationTable.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.ConcatenationTable.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254",returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Ar=new f({props:{name:"to_string",anchor:"datasets.table.ConcatenationTable.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L316"}}),Nr=new f({props:{name:"field",anchor:"datasets.table.ConcatenationTable.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L319",returnType:`
<p><code>pyarrow.Field</code></p>
`}}),jr=new f({props:{name:"column",anchor:"datasets.table.ConcatenationTable.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L332",returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Fr=new f({props:{name:"itercolumns",anchor:"datasets.table.ConcatenationTable.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L345"}}),Vr=new f({props:{name:"schema",anchor:"datasets.table.ConcatenationTable.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),Sr=new f({props:{name:"columns",anchor:"datasets.table.ConcatenationTable.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),qr=new f({props:{name:"num_columns",anchor:"datasets.table.ConcatenationTable.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),Rr=new f({props:{name:"num_rows",anchor:"datasets.table.ConcatenationTable.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),Ur=new f({props:{name:"shape",anchor:"datasets.table.ConcatenationTable.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),zr=new f({props:{name:"nbytes",anchor:"datasets.table.ConcatenationTable.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L407"}}),Br=new f({props:{name:"column_names",anchor:"datasets.table.ConcatenationTable.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L414"}}),Or=new f({props:{name:"slice",anchor:"datasets.table.ConcatenationTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.ConcatenationTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1383",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Wr=new f({props:{name:"filter",anchor:"datasets.table.ConcatenationTable.filter",parameters:[{name:"mask",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1414"}}),Xr=new f({props:{name:"flatten",anchor:"datasets.table.ConcatenationTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1425",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Hr=new f({props:{name:"combine_chunks",anchor:"datasets.table.ConcatenationTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1443",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Gr=new f({props:{name:"cast",anchor:"datasets.table.ConcatenationTable.cast",parameters:[{name:"target_schema",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.ConcatenationTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1463",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Yr=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.ConcatenationTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1490",returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Jr=new f({props:{name:"add_column",anchor:"datasets.table.ConcatenationTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.ConcatenationTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1508",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Kr=new f({props:{name:"append_column",anchor:"datasets.table.ConcatenationTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1529",returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Qr=new f({props:{name:"remove_column",anchor:"datasets.table.ConcatenationTable.remove_column",parameters:[{name:"i",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1546",returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Zr=new f({props:{name:"set_column",anchor:"datasets.table.ConcatenationTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.ConcatenationTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1570",returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),eo=new f({props:{name:"rename_columns",anchor:"datasets.table.ConcatenationTable.rename_columns",parameters:[{name:"names",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1589"}}),to=new f({props:{name:"drop",anchor:"datasets.table.ConcatenationTable.drop",parameters:[{name:"columns",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1602",returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ao=new f({props:{name:"from_blocks",anchor:"datasets.table.ConcatenationTable.from_blocks",parameters:[{name:"blocks",val:": TableBlockContainer"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1310"}}),ro=new f({props:{name:"from_tables",anchor:"datasets.table.ConcatenationTable.from_tables",parameters:[{name:"tables",val:": typing.List[typing.Union[pyarrow.lib.Table, datasets.table.Table]]"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.table.ConcatenationTable.from_tables.tables",description:`<strong>tables</strong> (list of <code>Table</code> or list of <code>pyarrow.Table</code>) &#x2014; List of tables.
axis &#x2014; (<code>{0, 1}</code>, defaults to <code>0</code>, meaning over rows):`,name:"tables"},{anchor:"datasets.table.ConcatenationTable.from_tables.Axis",description:`<strong>Axis</strong> to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns &#x2014;
(horizontally). &#x2014;`,name:"Axis"},{anchor:"datasets.table.ConcatenationTable.from_tables.*New",description:"<strong>*New</strong> in version 1.6.0* &#x2014;",name:"*New"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1324"}}),oo=new Ao({}),so=new f({props:{name:"datasets.table.concat_tables",anchor:"datasets.table.concat_tables",parameters:[{name:"tables",val:": typing.List[datasets.table.Table]"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.table.concat_tables.tables",description:"<strong>tables</strong> (list of <code>Table</code>) &#x2014; List of tables to be concatenated.",name:"tables"},{anchor:"datasets.table.concat_tables.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, defaults to <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1624",returnDescription:`
<p>If the number of input tables is > 1, then the returned table is a <code>datasets.table.ConcatenationTable</code>.
Otherwise if there\u2019s only one table, it is returned as is.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),no=new f({props:{name:"datasets.table.list_table_cache_files",anchor:"datasets.table.list_table_cache_files",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1647",returnDescription:`
<p>a list of paths to the cache files loaded by the table</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),{c(){D=r("meta"),oe=n(),P=r("h1"),C=r("a"),A=r("span"),m(I.$$.fragment),N=n(),No=r("span"),Mc=d("Table Classes"),Tl=n(),j=r("p"),Ic=d("Each "),jo=r("code"),Dc=d("Dataset"),Cc=d(` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),co=r("a"),Pc=d("table.Table"),Lc=d("."),wl=n(),K=r("h2"),se=r("a"),Fo=r("span"),m(zt.$$.fragment),Ac=n(),Vo=r("span"),Nc=d("Table"),xl=n(),x=r("div"),m(Bt.$$.fragment),jc=n(),So=r("p"),Fc=d(`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),Vc=n(),qo=r("p"),Sc=d(`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),qc=n(),Ro=r("p"),Rc=d("The implementation of these methods differs for the subclasses."),Uc=n(),F=r("div"),m(Ot.$$.fragment),zc=n(),Uo=r("p"),Bc=d("Perform validation checks.  An exception is raised if validation fails."),Oc=n(),Wt=r("p"),Wc=d("By default only cheap validation checks are run.  Pass "),zo=r("em"),Xc=d("full=True"),Hc=d(`
for thorough validation checks (potentially O(n)).`),Gc=n(),ne=r("div"),m(Xt.$$.fragment),Yc=n(),Bo=r("p"),Jc=d("Check if contents of two tables are equal."),Kc=n(),le=r("div"),m(Ht.$$.fragment),Qc=n(),Oo=r("p"),Zc=d("Convert Table to list of (contiguous) RecordBatch objects."),ei=n(),de=r("div"),m(Gt.$$.fragment),ti=n(),Wo=r("p"),ai=d("Convert the Table to a dict or OrderedDict."),ri=n(),ce=r("div"),m(Yt.$$.fragment),oi=n(),Xo=r("p"),si=d("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),ni=n(),io=r("div"),m(Jt.$$.fragment),li=n(),ie=r("div"),m(Kt.$$.fragment),di=n(),Ho=r("p"),ci=d("Select a schema field by its column name or numeric index."),ii=n(),me=r("div"),m(Qt.$$.fragment),mi=n(),Go=r("p"),pi=d("Select a column by its column name, or numeric index."),bi=n(),pe=r("div"),m(Zt.$$.fragment),hi=n(),Yo=r("p"),ui=d("Iterator over all columns in their numerical order."),gi=n(),be=r("div"),m(ea.$$.fragment),fi=n(),Jo=r("p"),yi=d("Schema of the table and its columns."),vi=n(),he=r("div"),m(ta.$$.fragment),$i=n(),Ko=r("p"),_i=d("List of all columns in numerical order."),Ti=n(),ue=r("div"),m(aa.$$.fragment),wi=n(),Qo=r("p"),xi=d("Number of columns in this table."),ki=n(),V=r("div"),m(ra.$$.fragment),Ei=n(),Zo=r("p"),Mi=d("Number of rows in this table."),Ii=n(),es=r("p"),Di=d(`Due to the definition of a table, all columns have the same number of
rows.`),Ci=n(),ge=r("div"),m(oa.$$.fragment),Pi=n(),ts=r("p"),Li=d("Dimensions of the table: (#rows, #columns)."),Ai=n(),fe=r("div"),m(sa.$$.fragment),Ni=n(),as=r("p"),ji=d("Total number of bytes consumed by the elements of the table."),kl=n(),Q=r("h2"),ye=r("a"),rs=r("span"),m(na.$$.fragment),Fi=n(),os=r("span"),Vi=d("InMemoryTable"),El=n(),y=r("div"),m(la.$$.fragment),Si=n(),ss=r("p"),qi=d("The table is said in-memory when it is loaded into the user\u2019s RAM."),Ri=n(),ns=r("p"),Ui=d(`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),zi=n(),ls=r("p"),Bi=d(`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Oi=n(),ds=r("p"),Wi=d(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Xi=n(),S=r("div"),m(da.$$.fragment),Hi=n(),cs=r("p"),Gi=d("Perform validation checks.  An exception is raised if validation fails."),Yi=n(),ca=r("p"),Ji=d("By default only cheap validation checks are run.  Pass "),is=r("em"),Ki=d("full=True"),Qi=d(`
for thorough validation checks (potentially O(n)).`),Zi=n(),ve=r("div"),m(ia.$$.fragment),em=n(),ms=r("p"),tm=d("Check if contents of two tables are equal."),am=n(),$e=r("div"),m(ma.$$.fragment),rm=n(),ps=r("p"),om=d("Convert Table to list of (contiguous) RecordBatch objects."),sm=n(),_e=r("div"),m(pa.$$.fragment),nm=n(),bs=r("p"),lm=d("Convert the Table to a dict or OrderedDict."),dm=n(),Te=r("div"),m(ba.$$.fragment),cm=n(),hs=r("p"),im=d("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),mm=n(),mo=r("div"),m(ha.$$.fragment),pm=n(),we=r("div"),m(ua.$$.fragment),bm=n(),us=r("p"),hm=d("Select a schema field by its column name or numeric index."),um=n(),xe=r("div"),m(ga.$$.fragment),gm=n(),gs=r("p"),fm=d("Select a column by its column name, or numeric index."),ym=n(),ke=r("div"),m(fa.$$.fragment),vm=n(),fs=r("p"),$m=d("Iterator over all columns in their numerical order."),_m=n(),Ee=r("div"),m(ya.$$.fragment),Tm=n(),ys=r("p"),wm=d("Schema of the table and its columns."),xm=n(),Me=r("div"),m(va.$$.fragment),km=n(),vs=r("p"),Em=d("List of all columns in numerical order."),Mm=n(),Ie=r("div"),m($a.$$.fragment),Im=n(),$s=r("p"),Dm=d("Number of columns in this table."),Cm=n(),q=r("div"),m(_a.$$.fragment),Pm=n(),_s=r("p"),Lm=d("Number of rows in this table."),Am=n(),Ts=r("p"),Nm=d(`Due to the definition of a table, all columns have the same number of
rows.`),jm=n(),De=r("div"),m(Ta.$$.fragment),Fm=n(),ws=r("p"),Vm=d("Dimensions of the table: (#rows, #columns)."),Sm=n(),Ce=r("div"),m(wa.$$.fragment),qm=n(),xs=r("p"),Rm=d("Total number of bytes consumed by the elements of the table."),Um=n(),Pe=r("div"),m(xa.$$.fragment),zm=n(),ks=r("p"),Bm=d("Names of the table\u2019s columns"),Om=n(),Le=r("div"),m(ka.$$.fragment),Wm=n(),Es=r("p"),Xm=d("Compute zero-copy slice of this Table"),Hm=n(),Ae=r("div"),m(Ea.$$.fragment),Gm=n(),Ms=r("p"),Ym=d("Select records from a Table. See pyarrow.compute.filter for full usage."),Jm=n(),Ne=r("div"),m(Ma.$$.fragment),Km=n(),Is=r("p"),Qm=d(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),Zm=n(),R=r("div"),m(Ia.$$.fragment),ep=n(),Ds=r("p"),tp=d("Make a new table by combining the chunks this table has."),ap=n(),Cs=r("p"),rp=d(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),op=n(),je=r("div"),m(Da.$$.fragment),sp=n(),Ps=r("p"),np=d("Cast table values to another schema"),lp=n(),Fe=r("div"),m(Ca.$$.fragment),dp=n(),Ls=r("p"),cp=d(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),ip=n(),U=r("div"),m(Pa.$$.fragment),mp=n(),As=r("p"),pp=d("Add column to Table at position."),bp=n(),Ns=r("p"),hp=d(`A new table is returned with the column added, the original table
object is left unchanged.`),up=n(),Ve=r("div"),m(La.$$.fragment),gp=n(),js=r("p"),fp=d("Append column at end of columns."),yp=n(),Se=r("div"),m(Aa.$$.fragment),vp=n(),Fs=r("p"),$p=d("Create new Table with the indicated column removed."),_p=n(),qe=r("div"),m(Na.$$.fragment),Tp=n(),Vs=r("p"),wp=d("Replace column in Table at position."),xp=n(),Re=r("div"),m(ja.$$.fragment),kp=n(),Ss=r("p"),Ep=d("Create new table with columns renamed to provided names."),Mp=n(),Ue=r("div"),m(Fa.$$.fragment),Ip=n(),qs=r("p"),Dp=d("Drop one or more columns and return a new table."),Cp=n(),po=r("div"),m(Va.$$.fragment),Pp=n(),bo=r("div"),m(Sa.$$.fragment),Lp=n(),L=r("div"),m(qa.$$.fragment),Ap=n(),Rs=r("p"),Np=d("Convert pandas.DataFrame to an Arrow Table."),jp=n(),Ra=r("p"),Fp=d(`The column types in the resulting Arrow Table are inferred from the
dtypes of the pandas.Series in the DataFrame. In the case of non-object
Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Us=r("em"),Vp=d("object"),Sp=d(`, we need to guess the datatype by looking at the
Python objects in this Series.`),qp=n(),Ua=r("p"),Rp=d("Be aware that Series of the "),zs=r("em"),Up=d("object"),zp=d(` dtype don\u2019t carry enough
information to always lead to a meaningful Arrow type. In the case that
we cannot infer a type, e.g. because the DataFrame is of length 0 or
the Series only contains None/nan objects, the type is set to
null. This behavior can be avoided by constructing an explicit schema
and passing it to this function.`),Bp=n(),m(ze.$$.fragment),Op=n(),Be=r("div"),m(za.$$.fragment),Wp=n(),Bs=r("p"),Xp=d("Construct a Table from Arrow arrays"),Hp=n(),Oe=r("div"),m(Ba.$$.fragment),Gp=n(),Os=r("p"),Yp=d("Construct a Table from Arrow arrays or columns"),Jp=n(),We=r("div"),m(Oa.$$.fragment),Kp=n(),Ws=r("p"),Qp=d("Construct a Table from a sequence or iterator of Arrow RecordBatches."),Ml=n(),Z=r("h2"),Xe=r("a"),Xs=r("span"),m(Wa.$$.fragment),Zp=n(),Hs=r("span"),eb=d("MemoryMappedTable"),Il=n(),_=r("div"),m(Xa.$$.fragment),tb=n(),Gs=r("p"),ab=d(`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),rb=n(),Ys=r("p"),ob=d(`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),sb=n(),Js=r("p"),nb=d(`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),lb=n(),Ks=r("p"),db=d(`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),cb=n(),Qs=r("p"),ib=d(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),mb=n(),z=r("div"),m(Ha.$$.fragment),pb=n(),Zs=r("p"),bb=d("Perform validation checks.  An exception is raised if validation fails."),hb=n(),Ga=r("p"),ub=d("By default only cheap validation checks are run.  Pass "),en=r("em"),gb=d("full=True"),fb=d(`
for thorough validation checks (potentially O(n)).`),yb=n(),He=r("div"),m(Ya.$$.fragment),vb=n(),tn=r("p"),$b=d("Check if contents of two tables are equal."),_b=n(),Ge=r("div"),m(Ja.$$.fragment),Tb=n(),an=r("p"),wb=d("Convert Table to list of (contiguous) RecordBatch objects."),xb=n(),Ye=r("div"),m(Ka.$$.fragment),kb=n(),rn=r("p"),Eb=d("Convert the Table to a dict or OrderedDict."),Mb=n(),Je=r("div"),m(Qa.$$.fragment),Ib=n(),on=r("p"),Db=d("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Cb=n(),ho=r("div"),m(Za.$$.fragment),Pb=n(),Ke=r("div"),m(er.$$.fragment),Lb=n(),sn=r("p"),Ab=d("Select a schema field by its column name or numeric index."),Nb=n(),Qe=r("div"),m(tr.$$.fragment),jb=n(),nn=r("p"),Fb=d("Select a column by its column name, or numeric index."),Vb=n(),Ze=r("div"),m(ar.$$.fragment),Sb=n(),ln=r("p"),qb=d("Iterator over all columns in their numerical order."),Rb=n(),et=r("div"),m(rr.$$.fragment),Ub=n(),dn=r("p"),zb=d("Schema of the table and its columns."),Bb=n(),tt=r("div"),m(or.$$.fragment),Ob=n(),cn=r("p"),Wb=d("List of all columns in numerical order."),Xb=n(),at=r("div"),m(sr.$$.fragment),Hb=n(),mn=r("p"),Gb=d("Number of columns in this table."),Yb=n(),B=r("div"),m(nr.$$.fragment),Jb=n(),pn=r("p"),Kb=d("Number of rows in this table."),Qb=n(),bn=r("p"),Zb=d(`Due to the definition of a table, all columns have the same number of
rows.`),eh=n(),rt=r("div"),m(lr.$$.fragment),th=n(),hn=r("p"),ah=d("Dimensions of the table: (#rows, #columns)."),rh=n(),ot=r("div"),m(dr.$$.fragment),oh=n(),un=r("p"),sh=d("Total number of bytes consumed by the elements of the table."),nh=n(),st=r("div"),m(cr.$$.fragment),lh=n(),gn=r("p"),dh=d("Names of the table\u2019s columns"),ch=n(),nt=r("div"),m(ir.$$.fragment),ih=n(),fn=r("p"),mh=d("Compute zero-copy slice of this Table"),ph=n(),lt=r("div"),m(mr.$$.fragment),bh=n(),yn=r("p"),hh=d("Select records from a Table. See pyarrow.compute.filter for full usage."),uh=n(),dt=r("div"),m(pr.$$.fragment),gh=n(),vn=r("p"),fh=d(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),yh=n(),O=r("div"),m(br.$$.fragment),vh=n(),$n=r("p"),$h=d("Make a new table by combining the chunks this table has."),_h=n(),_n=r("p"),Th=d(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),wh=n(),ct=r("div"),m(hr.$$.fragment),xh=n(),Tn=r("p"),kh=d("Cast table values to another schema"),Eh=n(),it=r("div"),m(ur.$$.fragment),Mh=n(),wn=r("p"),Ih=d(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Dh=n(),W=r("div"),m(gr.$$.fragment),Ch=n(),xn=r("p"),Ph=d("Add column to Table at position."),Lh=n(),kn=r("p"),Ah=d(`A new table is returned with the column added, the original table
object is left unchanged.`),Nh=n(),mt=r("div"),m(fr.$$.fragment),jh=n(),En=r("p"),Fh=d("Append column at end of columns."),Vh=n(),pt=r("div"),m(yr.$$.fragment),Sh=n(),Mn=r("p"),qh=d("Create new Table with the indicated column removed."),Rh=n(),bt=r("div"),m(vr.$$.fragment),Uh=n(),In=r("p"),zh=d("Replace column in Table at position."),Bh=n(),ht=r("div"),m($r.$$.fragment),Oh=n(),Dn=r("p"),Wh=d("Create new table with columns renamed to provided names."),Xh=n(),ut=r("div"),m(_r.$$.fragment),Hh=n(),Cn=r("p"),Gh=d("Drop one or more columns and return a new table."),Yh=n(),uo=r("div"),m(Tr.$$.fragment),Dl=n(),ee=r("h2"),gt=r("a"),Pn=r("span"),m(wr.$$.fragment),Jh=n(),Ln=r("span"),Kh=d("ConcatenationTable"),Cl=n(),$=r("div"),m(xr.$$.fragment),Qh=n(),An=r("p"),Zh=d(`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),eu=n(),Nn=r("p"),tu=d(`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),au=n(),kr=r("ul"),jn=r("li"),ru=d("the InMemoryTable objects are pickled by copying all the data in memory;"),ou=n(),Fn=r("li"),su=d(`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),nu=n(),Er=r("p"),lu=d(`Its implementation requires to store each block separately.
The `),Vn=r("code"),du=d("blocks"),cu=d(` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),iu=n(),Sn=r("p"),mu=d(`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),pu=n(),X=r("div"),m(Mr.$$.fragment),bu=n(),qn=r("p"),hu=d("Perform validation checks.  An exception is raised if validation fails."),uu=n(),Ir=r("p"),gu=d("By default only cheap validation checks are run.  Pass "),Rn=r("em"),fu=d("full=True"),yu=d(`
for thorough validation checks (potentially O(n)).`),vu=n(),ft=r("div"),m(Dr.$$.fragment),$u=n(),Un=r("p"),_u=d("Check if contents of two tables are equal."),Tu=n(),yt=r("div"),m(Cr.$$.fragment),wu=n(),zn=r("p"),xu=d("Convert Table to list of (contiguous) RecordBatch objects."),ku=n(),vt=r("div"),m(Pr.$$.fragment),Eu=n(),Bn=r("p"),Mu=d("Convert the Table to a dict or OrderedDict."),Iu=n(),$t=r("div"),m(Lr.$$.fragment),Du=n(),On=r("p"),Cu=d("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Pu=n(),go=r("div"),m(Ar.$$.fragment),Lu=n(),_t=r("div"),m(Nr.$$.fragment),Au=n(),Wn=r("p"),Nu=d("Select a schema field by its column name or numeric index."),ju=n(),Tt=r("div"),m(jr.$$.fragment),Fu=n(),Xn=r("p"),Vu=d("Select a column by its column name, or numeric index."),Su=n(),wt=r("div"),m(Fr.$$.fragment),qu=n(),Hn=r("p"),Ru=d("Iterator over all columns in their numerical order."),Uu=n(),xt=r("div"),m(Vr.$$.fragment),zu=n(),Gn=r("p"),Bu=d("Schema of the table and its columns."),Ou=n(),kt=r("div"),m(Sr.$$.fragment),Wu=n(),Yn=r("p"),Xu=d("List of all columns in numerical order."),Hu=n(),Et=r("div"),m(qr.$$.fragment),Gu=n(),Jn=r("p"),Yu=d("Number of columns in this table."),Ju=n(),H=r("div"),m(Rr.$$.fragment),Ku=n(),Kn=r("p"),Qu=d("Number of rows in this table."),Zu=n(),Qn=r("p"),eg=d(`Due to the definition of a table, all columns have the same number of
rows.`),tg=n(),Mt=r("div"),m(Ur.$$.fragment),ag=n(),Zn=r("p"),rg=d("Dimensions of the table: (#rows, #columns)."),og=n(),It=r("div"),m(zr.$$.fragment),sg=n(),el=r("p"),ng=d("Total number of bytes consumed by the elements of the table."),lg=n(),Dt=r("div"),m(Br.$$.fragment),dg=n(),tl=r("p"),cg=d("Names of the table\u2019s columns"),ig=n(),Ct=r("div"),m(Or.$$.fragment),mg=n(),al=r("p"),pg=d("Compute zero-copy slice of this Table"),bg=n(),Pt=r("div"),m(Wr.$$.fragment),hg=n(),rl=r("p"),ug=d("Select records from a Table. See pyarrow.compute.filter for full usage."),gg=n(),Lt=r("div"),m(Xr.$$.fragment),fg=n(),ol=r("p"),yg=d(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),vg=n(),G=r("div"),m(Hr.$$.fragment),$g=n(),sl=r("p"),_g=d("Make a new table by combining the chunks this table has."),Tg=n(),nl=r("p"),wg=d(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),xg=n(),At=r("div"),m(Gr.$$.fragment),kg=n(),ll=r("p"),Eg=d("Cast table values to another schema"),Mg=n(),Nt=r("div"),m(Yr.$$.fragment),Ig=n(),dl=r("p"),Dg=d(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Cg=n(),Y=r("div"),m(Jr.$$.fragment),Pg=n(),cl=r("p"),Lg=d("Add column to Table at position."),Ag=n(),il=r("p"),Ng=d(`A new table is returned with the column added, the original table
object is left unchanged.`),jg=n(),jt=r("div"),m(Kr.$$.fragment),Fg=n(),ml=r("p"),Vg=d("Append column at end of columns."),Sg=n(),Ft=r("div"),m(Qr.$$.fragment),qg=n(),pl=r("p"),Rg=d("Create new Table with the indicated column removed."),Ug=n(),Vt=r("div"),m(Zr.$$.fragment),zg=n(),bl=r("p"),Bg=d("Replace column in Table at position."),Og=n(),St=r("div"),m(eo.$$.fragment),Wg=n(),hl=r("p"),Xg=d("Create new table with columns renamed to provided names."),Hg=n(),qt=r("div"),m(to.$$.fragment),Gg=n(),ul=r("p"),Yg=d("Drop one or more columns and return a new table."),Jg=n(),fo=r("div"),m(ao.$$.fragment),Kg=n(),Rt=r("div"),m(ro.$$.fragment),Qg=n(),gl=r("p"),Zg=d("Create ConcatenationTable from list of tables."),Pl=n(),te=r("h2"),Ut=r("a"),fl=r("span"),m(oo.$$.fragment),ef=n(),yl=r("span"),tf=d("Utils"),Ll=n(),ae=r("div"),m(so.$$.fragment),af=n(),vl=r("p"),rf=d("Concatenate tables."),Al=n(),re=r("div"),m(no.$$.fragment),of=n(),$l=r("p"),sf=d(`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),this.h()},l(t){const E=p$('[data-svelte="svelte-1phssyn"]',document.head);D=o(E,"META",{name:!0,content:!0}),E.forEach(a),oe=l(t),P=o(t,"H1",{class:!0});var lo=s(P);C=o(lo,"A",{id:!0,class:!0,href:!0});var nf=s(C);A=o(nf,"SPAN",{});var lf=s(A);p(I.$$.fragment,lf),lf.forEach(a),nf.forEach(a),N=l(lo),No=o(lo,"SPAN",{});var df=s(No);Mc=c(df,"Table Classes"),df.forEach(a),lo.forEach(a),Tl=l(t),j=o(t,"P",{});var yo=s(j);Ic=c(yo,"Each "),jo=o(yo,"CODE",{});var cf=s(jo);Dc=c(cf,"Dataset"),cf.forEach(a),Cc=c(yo,` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),co=o(yo,"A",{href:!0});var mf=s(co);Pc=c(mf,"table.Table"),mf.forEach(a),Lc=c(yo,"."),yo.forEach(a),wl=l(t),K=o(t,"H2",{class:!0});var jl=s(K);se=o(jl,"A",{id:!0,class:!0,href:!0});var pf=s(se);Fo=o(pf,"SPAN",{});var bf=s(Fo);p(zt.$$.fragment,bf),bf.forEach(a),pf.forEach(a),Ac=l(jl),Vo=o(jl,"SPAN",{});var hf=s(Vo);Nc=c(hf,"Table"),hf.forEach(a),jl.forEach(a),xl=l(t),x=o(t,"DIV",{class:!0});var k=s(x);p(Bt.$$.fragment,k),jc=l(k),So=o(k,"P",{});var uf=s(So);Fc=c(uf,`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),uf.forEach(a),Vc=l(k),qo=o(k,"P",{});var gf=s(qo);Sc=c(gf,`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),gf.forEach(a),qc=l(k),Ro=o(k,"P",{});var ff=s(Ro);Rc=c(ff,"The implementation of these methods differs for the subclasses."),ff.forEach(a),Uc=l(k),F=o(k,"DIV",{class:!0});var vo=s(F);p(Ot.$$.fragment,vo),zc=l(vo),Uo=o(vo,"P",{});var yf=s(Uo);Bc=c(yf,"Perform validation checks.  An exception is raised if validation fails."),yf.forEach(a),Oc=l(vo),Wt=o(vo,"P",{});var Fl=s(Wt);Wc=c(Fl,"By default only cheap validation checks are run.  Pass "),zo=o(Fl,"EM",{});var vf=s(zo);Xc=c(vf,"full=True"),vf.forEach(a),Hc=c(Fl,`
for thorough validation checks (potentially O(n)).`),Fl.forEach(a),vo.forEach(a),Gc=l(k),ne=o(k,"DIV",{class:!0});var Vl=s(ne);p(Xt.$$.fragment,Vl),Yc=l(Vl),Bo=o(Vl,"P",{});var $f=s(Bo);Jc=c($f,"Check if contents of two tables are equal."),$f.forEach(a),Vl.forEach(a),Kc=l(k),le=o(k,"DIV",{class:!0});var Sl=s(le);p(Ht.$$.fragment,Sl),Qc=l(Sl),Oo=o(Sl,"P",{});var _f=s(Oo);Zc=c(_f,"Convert Table to list of (contiguous) RecordBatch objects."),_f.forEach(a),Sl.forEach(a),ei=l(k),de=o(k,"DIV",{class:!0});var ql=s(de);p(Gt.$$.fragment,ql),ti=l(ql),Wo=o(ql,"P",{});var Tf=s(Wo);ai=c(Tf,"Convert the Table to a dict or OrderedDict."),Tf.forEach(a),ql.forEach(a),ri=l(k),ce=o(k,"DIV",{class:!0});var Rl=s(ce);p(Yt.$$.fragment,Rl),oi=l(Rl),Xo=o(Rl,"P",{});var wf=s(Xo);si=c(wf,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),wf.forEach(a),Rl.forEach(a),ni=l(k),io=o(k,"DIV",{class:!0});var xf=s(io);p(Jt.$$.fragment,xf),xf.forEach(a),li=l(k),ie=o(k,"DIV",{class:!0});var Ul=s(ie);p(Kt.$$.fragment,Ul),di=l(Ul),Ho=o(Ul,"P",{});var kf=s(Ho);ci=c(kf,"Select a schema field by its column name or numeric index."),kf.forEach(a),Ul.forEach(a),ii=l(k),me=o(k,"DIV",{class:!0});var zl=s(me);p(Qt.$$.fragment,zl),mi=l(zl),Go=o(zl,"P",{});var Ef=s(Go);pi=c(Ef,"Select a column by its column name, or numeric index."),Ef.forEach(a),zl.forEach(a),bi=l(k),pe=o(k,"DIV",{class:!0});var Bl=s(pe);p(Zt.$$.fragment,Bl),hi=l(Bl),Yo=o(Bl,"P",{});var Mf=s(Yo);ui=c(Mf,"Iterator over all columns in their numerical order."),Mf.forEach(a),Bl.forEach(a),gi=l(k),be=o(k,"DIV",{class:!0});var Ol=s(be);p(ea.$$.fragment,Ol),fi=l(Ol),Jo=o(Ol,"P",{});var If=s(Jo);yi=c(If,"Schema of the table and its columns."),If.forEach(a),Ol.forEach(a),vi=l(k),he=o(k,"DIV",{class:!0});var Wl=s(he);p(ta.$$.fragment,Wl),$i=l(Wl),Ko=o(Wl,"P",{});var Df=s(Ko);_i=c(Df,"List of all columns in numerical order."),Df.forEach(a),Wl.forEach(a),Ti=l(k),ue=o(k,"DIV",{class:!0});var Xl=s(ue);p(aa.$$.fragment,Xl),wi=l(Xl),Qo=o(Xl,"P",{});var Cf=s(Qo);xi=c(Cf,"Number of columns in this table."),Cf.forEach(a),Xl.forEach(a),ki=l(k),V=o(k,"DIV",{class:!0});var $o=s(V);p(ra.$$.fragment,$o),Ei=l($o),Zo=o($o,"P",{});var Pf=s(Zo);Mi=c(Pf,"Number of rows in this table."),Pf.forEach(a),Ii=l($o),es=o($o,"P",{});var Lf=s(es);Di=c(Lf,`Due to the definition of a table, all columns have the same number of
rows.`),Lf.forEach(a),$o.forEach(a),Ci=l(k),ge=o(k,"DIV",{class:!0});var Hl=s(ge);p(oa.$$.fragment,Hl),Pi=l(Hl),ts=o(Hl,"P",{});var Af=s(ts);Li=c(Af,"Dimensions of the table: (#rows, #columns)."),Af.forEach(a),Hl.forEach(a),Ai=l(k),fe=o(k,"DIV",{class:!0});var Gl=s(fe);p(sa.$$.fragment,Gl),Ni=l(Gl),as=o(Gl,"P",{});var Nf=s(as);ji=c(Nf,"Total number of bytes consumed by the elements of the table."),Nf.forEach(a),Gl.forEach(a),k.forEach(a),kl=l(t),Q=o(t,"H2",{class:!0});var Yl=s(Q);ye=o(Yl,"A",{id:!0,class:!0,href:!0});var jf=s(ye);rs=o(jf,"SPAN",{});var Ff=s(rs);p(na.$$.fragment,Ff),Ff.forEach(a),jf.forEach(a),Fi=l(Yl),os=o(Yl,"SPAN",{});var Vf=s(os);Vi=c(Vf,"InMemoryTable"),Vf.forEach(a),Yl.forEach(a),El=l(t),y=o(t,"DIV",{class:!0});var v=s(y);p(la.$$.fragment,v),Si=l(v),ss=o(v,"P",{});var Sf=s(ss);qi=c(Sf,"The table is said in-memory when it is loaded into the user\u2019s RAM."),Sf.forEach(a),Ri=l(v),ns=o(v,"P",{});var qf=s(ns);Ui=c(qf,`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),qf.forEach(a),zi=l(v),ls=o(v,"P",{});var Rf=s(ls);Bi=c(Rf,`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Rf.forEach(a),Oi=l(v),ds=o(v,"P",{});var Uf=s(ds);Wi=c(Uf,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Uf.forEach(a),Xi=l(v),S=o(v,"DIV",{class:!0});var _o=s(S);p(da.$$.fragment,_o),Hi=l(_o),cs=o(_o,"P",{});var zf=s(cs);Gi=c(zf,"Perform validation checks.  An exception is raised if validation fails."),zf.forEach(a),Yi=l(_o),ca=o(_o,"P",{});var Jl=s(ca);Ji=c(Jl,"By default only cheap validation checks are run.  Pass "),is=o(Jl,"EM",{});var Bf=s(is);Ki=c(Bf,"full=True"),Bf.forEach(a),Qi=c(Jl,`
for thorough validation checks (potentially O(n)).`),Jl.forEach(a),_o.forEach(a),Zi=l(v),ve=o(v,"DIV",{class:!0});var Kl=s(ve);p(ia.$$.fragment,Kl),em=l(Kl),ms=o(Kl,"P",{});var Of=s(ms);tm=c(Of,"Check if contents of two tables are equal."),Of.forEach(a),Kl.forEach(a),am=l(v),$e=o(v,"DIV",{class:!0});var Ql=s($e);p(ma.$$.fragment,Ql),rm=l(Ql),ps=o(Ql,"P",{});var Wf=s(ps);om=c(Wf,"Convert Table to list of (contiguous) RecordBatch objects."),Wf.forEach(a),Ql.forEach(a),sm=l(v),_e=o(v,"DIV",{class:!0});var Zl=s(_e);p(pa.$$.fragment,Zl),nm=l(Zl),bs=o(Zl,"P",{});var Xf=s(bs);lm=c(Xf,"Convert the Table to a dict or OrderedDict."),Xf.forEach(a),Zl.forEach(a),dm=l(v),Te=o(v,"DIV",{class:!0});var ed=s(Te);p(ba.$$.fragment,ed),cm=l(ed),hs=o(ed,"P",{});var Hf=s(hs);im=c(Hf,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Hf.forEach(a),ed.forEach(a),mm=l(v),mo=o(v,"DIV",{class:!0});var Gf=s(mo);p(ha.$$.fragment,Gf),Gf.forEach(a),pm=l(v),we=o(v,"DIV",{class:!0});var td=s(we);p(ua.$$.fragment,td),bm=l(td),us=o(td,"P",{});var Yf=s(us);hm=c(Yf,"Select a schema field by its column name or numeric index."),Yf.forEach(a),td.forEach(a),um=l(v),xe=o(v,"DIV",{class:!0});var ad=s(xe);p(ga.$$.fragment,ad),gm=l(ad),gs=o(ad,"P",{});var Jf=s(gs);fm=c(Jf,"Select a column by its column name, or numeric index."),Jf.forEach(a),ad.forEach(a),ym=l(v),ke=o(v,"DIV",{class:!0});var rd=s(ke);p(fa.$$.fragment,rd),vm=l(rd),fs=o(rd,"P",{});var Kf=s(fs);$m=c(Kf,"Iterator over all columns in their numerical order."),Kf.forEach(a),rd.forEach(a),_m=l(v),Ee=o(v,"DIV",{class:!0});var od=s(Ee);p(ya.$$.fragment,od),Tm=l(od),ys=o(od,"P",{});var Qf=s(ys);wm=c(Qf,"Schema of the table and its columns."),Qf.forEach(a),od.forEach(a),xm=l(v),Me=o(v,"DIV",{class:!0});var sd=s(Me);p(va.$$.fragment,sd),km=l(sd),vs=o(sd,"P",{});var Zf=s(vs);Em=c(Zf,"List of all columns in numerical order."),Zf.forEach(a),sd.forEach(a),Mm=l(v),Ie=o(v,"DIV",{class:!0});var nd=s(Ie);p($a.$$.fragment,nd),Im=l(nd),$s=o(nd,"P",{});var ey=s($s);Dm=c(ey,"Number of columns in this table."),ey.forEach(a),nd.forEach(a),Cm=l(v),q=o(v,"DIV",{class:!0});var To=s(q);p(_a.$$.fragment,To),Pm=l(To),_s=o(To,"P",{});var ty=s(_s);Lm=c(ty,"Number of rows in this table."),ty.forEach(a),Am=l(To),Ts=o(To,"P",{});var ay=s(Ts);Nm=c(ay,`Due to the definition of a table, all columns have the same number of
rows.`),ay.forEach(a),To.forEach(a),jm=l(v),De=o(v,"DIV",{class:!0});var ld=s(De);p(Ta.$$.fragment,ld),Fm=l(ld),ws=o(ld,"P",{});var ry=s(ws);Vm=c(ry,"Dimensions of the table: (#rows, #columns)."),ry.forEach(a),ld.forEach(a),Sm=l(v),Ce=o(v,"DIV",{class:!0});var dd=s(Ce);p(wa.$$.fragment,dd),qm=l(dd),xs=o(dd,"P",{});var oy=s(xs);Rm=c(oy,"Total number of bytes consumed by the elements of the table."),oy.forEach(a),dd.forEach(a),Um=l(v),Pe=o(v,"DIV",{class:!0});var cd=s(Pe);p(xa.$$.fragment,cd),zm=l(cd),ks=o(cd,"P",{});var sy=s(ks);Bm=c(sy,"Names of the table\u2019s columns"),sy.forEach(a),cd.forEach(a),Om=l(v),Le=o(v,"DIV",{class:!0});var id=s(Le);p(ka.$$.fragment,id),Wm=l(id),Es=o(id,"P",{});var ny=s(Es);Xm=c(ny,"Compute zero-copy slice of this Table"),ny.forEach(a),id.forEach(a),Hm=l(v),Ae=o(v,"DIV",{class:!0});var md=s(Ae);p(Ea.$$.fragment,md),Gm=l(md),Ms=o(md,"P",{});var ly=s(Ms);Ym=c(ly,"Select records from a Table. See pyarrow.compute.filter for full usage."),ly.forEach(a),md.forEach(a),Jm=l(v),Ne=o(v,"DIV",{class:!0});var pd=s(Ne);p(Ma.$$.fragment,pd),Km=l(pd),Is=o(pd,"P",{});var dy=s(Is);Qm=c(dy,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),dy.forEach(a),pd.forEach(a),Zm=l(v),R=o(v,"DIV",{class:!0});var wo=s(R);p(Ia.$$.fragment,wo),ep=l(wo),Ds=o(wo,"P",{});var cy=s(Ds);tp=c(cy,"Make a new table by combining the chunks this table has."),cy.forEach(a),ap=l(wo),Cs=o(wo,"P",{});var iy=s(Cs);rp=c(iy,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),iy.forEach(a),wo.forEach(a),op=l(v),je=o(v,"DIV",{class:!0});var bd=s(je);p(Da.$$.fragment,bd),sp=l(bd),Ps=o(bd,"P",{});var my=s(Ps);np=c(my,"Cast table values to another schema"),my.forEach(a),bd.forEach(a),lp=l(v),Fe=o(v,"DIV",{class:!0});var hd=s(Fe);p(Ca.$$.fragment,hd),dp=l(hd),Ls=o(hd,"P",{});var py=s(Ls);cp=c(py,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),py.forEach(a),hd.forEach(a),ip=l(v),U=o(v,"DIV",{class:!0});var xo=s(U);p(Pa.$$.fragment,xo),mp=l(xo),As=o(xo,"P",{});var by=s(As);pp=c(by,"Add column to Table at position."),by.forEach(a),bp=l(xo),Ns=o(xo,"P",{});var hy=s(Ns);hp=c(hy,`A new table is returned with the column added, the original table
object is left unchanged.`),hy.forEach(a),xo.forEach(a),up=l(v),Ve=o(v,"DIV",{class:!0});var ud=s(Ve);p(La.$$.fragment,ud),gp=l(ud),js=o(ud,"P",{});var uy=s(js);fp=c(uy,"Append column at end of columns."),uy.forEach(a),ud.forEach(a),yp=l(v),Se=o(v,"DIV",{class:!0});var gd=s(Se);p(Aa.$$.fragment,gd),vp=l(gd),Fs=o(gd,"P",{});var gy=s(Fs);$p=c(gy,"Create new Table with the indicated column removed."),gy.forEach(a),gd.forEach(a),_p=l(v),qe=o(v,"DIV",{class:!0});var fd=s(qe);p(Na.$$.fragment,fd),Tp=l(fd),Vs=o(fd,"P",{});var fy=s(Vs);wp=c(fy,"Replace column in Table at position."),fy.forEach(a),fd.forEach(a),xp=l(v),Re=o(v,"DIV",{class:!0});var yd=s(Re);p(ja.$$.fragment,yd),kp=l(yd),Ss=o(yd,"P",{});var yy=s(Ss);Ep=c(yy,"Create new table with columns renamed to provided names."),yy.forEach(a),yd.forEach(a),Mp=l(v),Ue=o(v,"DIV",{class:!0});var vd=s(Ue);p(Fa.$$.fragment,vd),Ip=l(vd),qs=o(vd,"P",{});var vy=s(qs);Dp=c(vy,"Drop one or more columns and return a new table."),vy.forEach(a),vd.forEach(a),Cp=l(v),po=o(v,"DIV",{class:!0});var $y=s(po);p(Va.$$.fragment,$y),$y.forEach(a),Pp=l(v),bo=o(v,"DIV",{class:!0});var _y=s(bo);p(Sa.$$.fragment,_y),_y.forEach(a),Lp=l(v),L=o(v,"DIV",{class:!0});var J=s(L);p(qa.$$.fragment,J),Ap=l(J),Rs=o(J,"P",{});var Ty=s(Rs);Np=c(Ty,"Convert pandas.DataFrame to an Arrow Table."),Ty.forEach(a),jp=l(J),Ra=o(J,"P",{});var $d=s(Ra);Fp=c($d,`The column types in the resulting Arrow Table are inferred from the
dtypes of the pandas.Series in the DataFrame. In the case of non-object
Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Us=o($d,"EM",{});var wy=s(Us);Vp=c(wy,"object"),wy.forEach(a),Sp=c($d,`, we need to guess the datatype by looking at the
Python objects in this Series.`),$d.forEach(a),qp=l(J),Ua=o(J,"P",{});var _d=s(Ua);Rp=c(_d,"Be aware that Series of the "),zs=o(_d,"EM",{});var xy=s(zs);Up=c(xy,"object"),xy.forEach(a),zp=c(_d,` dtype don\u2019t carry enough
information to always lead to a meaningful Arrow type. In the case that
we cannot infer a type, e.g. because the DataFrame is of length 0 or
the Series only contains None/nan objects, the type is set to
null. This behavior can be avoided by constructing an explicit schema
and passing it to this function.`),_d.forEach(a),Bp=l(J),p(ze.$$.fragment,J),J.forEach(a),Op=l(v),Be=o(v,"DIV",{class:!0});var Td=s(Be);p(za.$$.fragment,Td),Wp=l(Td),Bs=o(Td,"P",{});var ky=s(Bs);Xp=c(ky,"Construct a Table from Arrow arrays"),ky.forEach(a),Td.forEach(a),Hp=l(v),Oe=o(v,"DIV",{class:!0});var wd=s(Oe);p(Ba.$$.fragment,wd),Gp=l(wd),Os=o(wd,"P",{});var Ey=s(Os);Yp=c(Ey,"Construct a Table from Arrow arrays or columns"),Ey.forEach(a),wd.forEach(a),Jp=l(v),We=o(v,"DIV",{class:!0});var xd=s(We);p(Oa.$$.fragment,xd),Kp=l(xd),Ws=o(xd,"P",{});var My=s(Ws);Qp=c(My,"Construct a Table from a sequence or iterator of Arrow RecordBatches."),My.forEach(a),xd.forEach(a),v.forEach(a),Ml=l(t),Z=o(t,"H2",{class:!0});var kd=s(Z);Xe=o(kd,"A",{id:!0,class:!0,href:!0});var Iy=s(Xe);Xs=o(Iy,"SPAN",{});var Dy=s(Xs);p(Wa.$$.fragment,Dy),Dy.forEach(a),Iy.forEach(a),Zp=l(kd),Hs=o(kd,"SPAN",{});var Cy=s(Hs);eb=c(Cy,"MemoryMappedTable"),Cy.forEach(a),kd.forEach(a),Il=l(t),_=o(t,"DIV",{class:!0});var w=s(_);p(Xa.$$.fragment,w),tb=l(w),Gs=o(w,"P",{});var Py=s(Gs);ab=c(Py,`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),Py.forEach(a),rb=l(w),Ys=o(w,"P",{});var Ly=s(Ys);ob=c(Ly,`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),Ly.forEach(a),sb=l(w),Js=o(w,"P",{});var Ay=s(Js);nb=c(Ay,`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),Ay.forEach(a),lb=l(w),Ks=o(w,"P",{});var Ny=s(Ks);db=c(Ny,`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),Ny.forEach(a),cb=l(w),Qs=o(w,"P",{});var jy=s(Qs);ib=c(jy,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),jy.forEach(a),mb=l(w),z=o(w,"DIV",{class:!0});var ko=s(z);p(Ha.$$.fragment,ko),pb=l(ko),Zs=o(ko,"P",{});var Fy=s(Zs);bb=c(Fy,"Perform validation checks.  An exception is raised if validation fails."),Fy.forEach(a),hb=l(ko),Ga=o(ko,"P",{});var Ed=s(Ga);ub=c(Ed,"By default only cheap validation checks are run.  Pass "),en=o(Ed,"EM",{});var Vy=s(en);gb=c(Vy,"full=True"),Vy.forEach(a),fb=c(Ed,`
for thorough validation checks (potentially O(n)).`),Ed.forEach(a),ko.forEach(a),yb=l(w),He=o(w,"DIV",{class:!0});var Md=s(He);p(Ya.$$.fragment,Md),vb=l(Md),tn=o(Md,"P",{});var Sy=s(tn);$b=c(Sy,"Check if contents of two tables are equal."),Sy.forEach(a),Md.forEach(a),_b=l(w),Ge=o(w,"DIV",{class:!0});var Id=s(Ge);p(Ja.$$.fragment,Id),Tb=l(Id),an=o(Id,"P",{});var qy=s(an);wb=c(qy,"Convert Table to list of (contiguous) RecordBatch objects."),qy.forEach(a),Id.forEach(a),xb=l(w),Ye=o(w,"DIV",{class:!0});var Dd=s(Ye);p(Ka.$$.fragment,Dd),kb=l(Dd),rn=o(Dd,"P",{});var Ry=s(rn);Eb=c(Ry,"Convert the Table to a dict or OrderedDict."),Ry.forEach(a),Dd.forEach(a),Mb=l(w),Je=o(w,"DIV",{class:!0});var Cd=s(Je);p(Qa.$$.fragment,Cd),Ib=l(Cd),on=o(Cd,"P",{});var Uy=s(on);Db=c(Uy,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Uy.forEach(a),Cd.forEach(a),Cb=l(w),ho=o(w,"DIV",{class:!0});var zy=s(ho);p(Za.$$.fragment,zy),zy.forEach(a),Pb=l(w),Ke=o(w,"DIV",{class:!0});var Pd=s(Ke);p(er.$$.fragment,Pd),Lb=l(Pd),sn=o(Pd,"P",{});var By=s(sn);Ab=c(By,"Select a schema field by its column name or numeric index."),By.forEach(a),Pd.forEach(a),Nb=l(w),Qe=o(w,"DIV",{class:!0});var Ld=s(Qe);p(tr.$$.fragment,Ld),jb=l(Ld),nn=o(Ld,"P",{});var Oy=s(nn);Fb=c(Oy,"Select a column by its column name, or numeric index."),Oy.forEach(a),Ld.forEach(a),Vb=l(w),Ze=o(w,"DIV",{class:!0});var Ad=s(Ze);p(ar.$$.fragment,Ad),Sb=l(Ad),ln=o(Ad,"P",{});var Wy=s(ln);qb=c(Wy,"Iterator over all columns in their numerical order."),Wy.forEach(a),Ad.forEach(a),Rb=l(w),et=o(w,"DIV",{class:!0});var Nd=s(et);p(rr.$$.fragment,Nd),Ub=l(Nd),dn=o(Nd,"P",{});var Xy=s(dn);zb=c(Xy,"Schema of the table and its columns."),Xy.forEach(a),Nd.forEach(a),Bb=l(w),tt=o(w,"DIV",{class:!0});var jd=s(tt);p(or.$$.fragment,jd),Ob=l(jd),cn=o(jd,"P",{});var Hy=s(cn);Wb=c(Hy,"List of all columns in numerical order."),Hy.forEach(a),jd.forEach(a),Xb=l(w),at=o(w,"DIV",{class:!0});var Fd=s(at);p(sr.$$.fragment,Fd),Hb=l(Fd),mn=o(Fd,"P",{});var Gy=s(mn);Gb=c(Gy,"Number of columns in this table."),Gy.forEach(a),Fd.forEach(a),Yb=l(w),B=o(w,"DIV",{class:!0});var Eo=s(B);p(nr.$$.fragment,Eo),Jb=l(Eo),pn=o(Eo,"P",{});var Yy=s(pn);Kb=c(Yy,"Number of rows in this table."),Yy.forEach(a),Qb=l(Eo),bn=o(Eo,"P",{});var Jy=s(bn);Zb=c(Jy,`Due to the definition of a table, all columns have the same number of
rows.`),Jy.forEach(a),Eo.forEach(a),eh=l(w),rt=o(w,"DIV",{class:!0});var Vd=s(rt);p(lr.$$.fragment,Vd),th=l(Vd),hn=o(Vd,"P",{});var Ky=s(hn);ah=c(Ky,"Dimensions of the table: (#rows, #columns)."),Ky.forEach(a),Vd.forEach(a),rh=l(w),ot=o(w,"DIV",{class:!0});var Sd=s(ot);p(dr.$$.fragment,Sd),oh=l(Sd),un=o(Sd,"P",{});var Qy=s(un);sh=c(Qy,"Total number of bytes consumed by the elements of the table."),Qy.forEach(a),Sd.forEach(a),nh=l(w),st=o(w,"DIV",{class:!0});var qd=s(st);p(cr.$$.fragment,qd),lh=l(qd),gn=o(qd,"P",{});var Zy=s(gn);dh=c(Zy,"Names of the table\u2019s columns"),Zy.forEach(a),qd.forEach(a),ch=l(w),nt=o(w,"DIV",{class:!0});var Rd=s(nt);p(ir.$$.fragment,Rd),ih=l(Rd),fn=o(Rd,"P",{});var ev=s(fn);mh=c(ev,"Compute zero-copy slice of this Table"),ev.forEach(a),Rd.forEach(a),ph=l(w),lt=o(w,"DIV",{class:!0});var Ud=s(lt);p(mr.$$.fragment,Ud),bh=l(Ud),yn=o(Ud,"P",{});var tv=s(yn);hh=c(tv,"Select records from a Table. See pyarrow.compute.filter for full usage."),tv.forEach(a),Ud.forEach(a),uh=l(w),dt=o(w,"DIV",{class:!0});var zd=s(dt);p(pr.$$.fragment,zd),gh=l(zd),vn=o(zd,"P",{});var av=s(vn);fh=c(av,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),av.forEach(a),zd.forEach(a),yh=l(w),O=o(w,"DIV",{class:!0});var Mo=s(O);p(br.$$.fragment,Mo),vh=l(Mo),$n=o(Mo,"P",{});var rv=s($n);$h=c(rv,"Make a new table by combining the chunks this table has."),rv.forEach(a),_h=l(Mo),_n=o(Mo,"P",{});var ov=s(_n);Th=c(ov,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),ov.forEach(a),Mo.forEach(a),wh=l(w),ct=o(w,"DIV",{class:!0});var Bd=s(ct);p(hr.$$.fragment,Bd),xh=l(Bd),Tn=o(Bd,"P",{});var sv=s(Tn);kh=c(sv,"Cast table values to another schema"),sv.forEach(a),Bd.forEach(a),Eh=l(w),it=o(w,"DIV",{class:!0});var Od=s(it);p(ur.$$.fragment,Od),Mh=l(Od),wn=o(Od,"P",{});var nv=s(wn);Ih=c(nv,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),nv.forEach(a),Od.forEach(a),Dh=l(w),W=o(w,"DIV",{class:!0});var Io=s(W);p(gr.$$.fragment,Io),Ch=l(Io),xn=o(Io,"P",{});var lv=s(xn);Ph=c(lv,"Add column to Table at position."),lv.forEach(a),Lh=l(Io),kn=o(Io,"P",{});var dv=s(kn);Ah=c(dv,`A new table is returned with the column added, the original table
object is left unchanged.`),dv.forEach(a),Io.forEach(a),Nh=l(w),mt=o(w,"DIV",{class:!0});var Wd=s(mt);p(fr.$$.fragment,Wd),jh=l(Wd),En=o(Wd,"P",{});var cv=s(En);Fh=c(cv,"Append column at end of columns."),cv.forEach(a),Wd.forEach(a),Vh=l(w),pt=o(w,"DIV",{class:!0});var Xd=s(pt);p(yr.$$.fragment,Xd),Sh=l(Xd),Mn=o(Xd,"P",{});var iv=s(Mn);qh=c(iv,"Create new Table with the indicated column removed."),iv.forEach(a),Xd.forEach(a),Rh=l(w),bt=o(w,"DIV",{class:!0});var Hd=s(bt);p(vr.$$.fragment,Hd),Uh=l(Hd),In=o(Hd,"P",{});var mv=s(In);zh=c(mv,"Replace column in Table at position."),mv.forEach(a),Hd.forEach(a),Bh=l(w),ht=o(w,"DIV",{class:!0});var Gd=s(ht);p($r.$$.fragment,Gd),Oh=l(Gd),Dn=o(Gd,"P",{});var pv=s(Dn);Wh=c(pv,"Create new table with columns renamed to provided names."),pv.forEach(a),Gd.forEach(a),Xh=l(w),ut=o(w,"DIV",{class:!0});var Yd=s(ut);p(_r.$$.fragment,Yd),Hh=l(Yd),Cn=o(Yd,"P",{});var bv=s(Cn);Gh=c(bv,"Drop one or more columns and return a new table."),bv.forEach(a),Yd.forEach(a),Yh=l(w),uo=o(w,"DIV",{class:!0});var hv=s(uo);p(Tr.$$.fragment,hv),hv.forEach(a),w.forEach(a),Dl=l(t),ee=o(t,"H2",{class:!0});var Jd=s(ee);gt=o(Jd,"A",{id:!0,class:!0,href:!0});var uv=s(gt);Pn=o(uv,"SPAN",{});var gv=s(Pn);p(wr.$$.fragment,gv),gv.forEach(a),uv.forEach(a),Jh=l(Jd),Ln=o(Jd,"SPAN",{});var fv=s(Ln);Kh=c(fv,"ConcatenationTable"),fv.forEach(a),Jd.forEach(a),Cl=l(t),$=o(t,"DIV",{class:!0});var T=s($);p(xr.$$.fragment,T),Qh=l(T),An=o(T,"P",{});var yv=s(An);Zh=c(yv,`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),yv.forEach(a),eu=l(T),Nn=o(T,"P",{});var vv=s(Nn);tu=c(vv,`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),vv.forEach(a),au=l(T),kr=o(T,"UL",{});var Kd=s(kr);jn=o(Kd,"LI",{});var $v=s(jn);ru=c($v,"the InMemoryTable objects are pickled by copying all the data in memory;"),$v.forEach(a),ou=l(Kd),Fn=o(Kd,"LI",{});var _v=s(Fn);su=c(_v,`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),_v.forEach(a),Kd.forEach(a),nu=l(T),Er=o(T,"P",{});var Qd=s(Er);lu=c(Qd,`Its implementation requires to store each block separately.
The `),Vn=o(Qd,"CODE",{});var Tv=s(Vn);du=c(Tv,"blocks"),Tv.forEach(a),cu=c(Qd,` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),Qd.forEach(a),iu=l(T),Sn=o(T,"P",{});var wv=s(Sn);mu=c(wv,`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),wv.forEach(a),pu=l(T),X=o(T,"DIV",{class:!0});var Do=s(X);p(Mr.$$.fragment,Do),bu=l(Do),qn=o(Do,"P",{});var xv=s(qn);hu=c(xv,"Perform validation checks.  An exception is raised if validation fails."),xv.forEach(a),uu=l(Do),Ir=o(Do,"P",{});var Zd=s(Ir);gu=c(Zd,"By default only cheap validation checks are run.  Pass "),Rn=o(Zd,"EM",{});var kv=s(Rn);fu=c(kv,"full=True"),kv.forEach(a),yu=c(Zd,`
for thorough validation checks (potentially O(n)).`),Zd.forEach(a),Do.forEach(a),vu=l(T),ft=o(T,"DIV",{class:!0});var ec=s(ft);p(Dr.$$.fragment,ec),$u=l(ec),Un=o(ec,"P",{});var Ev=s(Un);_u=c(Ev,"Check if contents of two tables are equal."),Ev.forEach(a),ec.forEach(a),Tu=l(T),yt=o(T,"DIV",{class:!0});var tc=s(yt);p(Cr.$$.fragment,tc),wu=l(tc),zn=o(tc,"P",{});var Mv=s(zn);xu=c(Mv,"Convert Table to list of (contiguous) RecordBatch objects."),Mv.forEach(a),tc.forEach(a),ku=l(T),vt=o(T,"DIV",{class:!0});var ac=s(vt);p(Pr.$$.fragment,ac),Eu=l(ac),Bn=o(ac,"P",{});var Iv=s(Bn);Mu=c(Iv,"Convert the Table to a dict or OrderedDict."),Iv.forEach(a),ac.forEach(a),Iu=l(T),$t=o(T,"DIV",{class:!0});var rc=s($t);p(Lr.$$.fragment,rc),Du=l(rc),On=o(rc,"P",{});var Dv=s(On);Cu=c(Dv,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Dv.forEach(a),rc.forEach(a),Pu=l(T),go=o(T,"DIV",{class:!0});var Cv=s(go);p(Ar.$$.fragment,Cv),Cv.forEach(a),Lu=l(T),_t=o(T,"DIV",{class:!0});var oc=s(_t);p(Nr.$$.fragment,oc),Au=l(oc),Wn=o(oc,"P",{});var Pv=s(Wn);Nu=c(Pv,"Select a schema field by its column name or numeric index."),Pv.forEach(a),oc.forEach(a),ju=l(T),Tt=o(T,"DIV",{class:!0});var sc=s(Tt);p(jr.$$.fragment,sc),Fu=l(sc),Xn=o(sc,"P",{});var Lv=s(Xn);Vu=c(Lv,"Select a column by its column name, or numeric index."),Lv.forEach(a),sc.forEach(a),Su=l(T),wt=o(T,"DIV",{class:!0});var nc=s(wt);p(Fr.$$.fragment,nc),qu=l(nc),Hn=o(nc,"P",{});var Av=s(Hn);Ru=c(Av,"Iterator over all columns in their numerical order."),Av.forEach(a),nc.forEach(a),Uu=l(T),xt=o(T,"DIV",{class:!0});var lc=s(xt);p(Vr.$$.fragment,lc),zu=l(lc),Gn=o(lc,"P",{});var Nv=s(Gn);Bu=c(Nv,"Schema of the table and its columns."),Nv.forEach(a),lc.forEach(a),Ou=l(T),kt=o(T,"DIV",{class:!0});var dc=s(kt);p(Sr.$$.fragment,dc),Wu=l(dc),Yn=o(dc,"P",{});var jv=s(Yn);Xu=c(jv,"List of all columns in numerical order."),jv.forEach(a),dc.forEach(a),Hu=l(T),Et=o(T,"DIV",{class:!0});var cc=s(Et);p(qr.$$.fragment,cc),Gu=l(cc),Jn=o(cc,"P",{});var Fv=s(Jn);Yu=c(Fv,"Number of columns in this table."),Fv.forEach(a),cc.forEach(a),Ju=l(T),H=o(T,"DIV",{class:!0});var Co=s(H);p(Rr.$$.fragment,Co),Ku=l(Co),Kn=o(Co,"P",{});var Vv=s(Kn);Qu=c(Vv,"Number of rows in this table."),Vv.forEach(a),Zu=l(Co),Qn=o(Co,"P",{});var Sv=s(Qn);eg=c(Sv,`Due to the definition of a table, all columns have the same number of
rows.`),Sv.forEach(a),Co.forEach(a),tg=l(T),Mt=o(T,"DIV",{class:!0});var ic=s(Mt);p(Ur.$$.fragment,ic),ag=l(ic),Zn=o(ic,"P",{});var qv=s(Zn);rg=c(qv,"Dimensions of the table: (#rows, #columns)."),qv.forEach(a),ic.forEach(a),og=l(T),It=o(T,"DIV",{class:!0});var mc=s(It);p(zr.$$.fragment,mc),sg=l(mc),el=o(mc,"P",{});var Rv=s(el);ng=c(Rv,"Total number of bytes consumed by the elements of the table."),Rv.forEach(a),mc.forEach(a),lg=l(T),Dt=o(T,"DIV",{class:!0});var pc=s(Dt);p(Br.$$.fragment,pc),dg=l(pc),tl=o(pc,"P",{});var Uv=s(tl);cg=c(Uv,"Names of the table\u2019s columns"),Uv.forEach(a),pc.forEach(a),ig=l(T),Ct=o(T,"DIV",{class:!0});var bc=s(Ct);p(Or.$$.fragment,bc),mg=l(bc),al=o(bc,"P",{});var zv=s(al);pg=c(zv,"Compute zero-copy slice of this Table"),zv.forEach(a),bc.forEach(a),bg=l(T),Pt=o(T,"DIV",{class:!0});var hc=s(Pt);p(Wr.$$.fragment,hc),hg=l(hc),rl=o(hc,"P",{});var Bv=s(rl);ug=c(Bv,"Select records from a Table. See pyarrow.compute.filter for full usage."),Bv.forEach(a),hc.forEach(a),gg=l(T),Lt=o(T,"DIV",{class:!0});var uc=s(Lt);p(Xr.$$.fragment,uc),fg=l(uc),ol=o(uc,"P",{});var Ov=s(ol);yg=c(Ov,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),Ov.forEach(a),uc.forEach(a),vg=l(T),G=o(T,"DIV",{class:!0});var Po=s(G);p(Hr.$$.fragment,Po),$g=l(Po),sl=o(Po,"P",{});var Wv=s(sl);_g=c(Wv,"Make a new table by combining the chunks this table has."),Wv.forEach(a),Tg=l(Po),nl=o(Po,"P",{});var Xv=s(nl);wg=c(Xv,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),Xv.forEach(a),Po.forEach(a),xg=l(T),At=o(T,"DIV",{class:!0});var gc=s(At);p(Gr.$$.fragment,gc),kg=l(gc),ll=o(gc,"P",{});var Hv=s(ll);Eg=c(Hv,"Cast table values to another schema"),Hv.forEach(a),gc.forEach(a),Mg=l(T),Nt=o(T,"DIV",{class:!0});var fc=s(Nt);p(Yr.$$.fragment,fc),Ig=l(fc),dl=o(fc,"P",{});var Gv=s(dl);Dg=c(Gv,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Gv.forEach(a),fc.forEach(a),Cg=l(T),Y=o(T,"DIV",{class:!0});var Lo=s(Y);p(Jr.$$.fragment,Lo),Pg=l(Lo),cl=o(Lo,"P",{});var Yv=s(cl);Lg=c(Yv,"Add column to Table at position."),Yv.forEach(a),Ag=l(Lo),il=o(Lo,"P",{});var Jv=s(il);Ng=c(Jv,`A new table is returned with the column added, the original table
object is left unchanged.`),Jv.forEach(a),Lo.forEach(a),jg=l(T),jt=o(T,"DIV",{class:!0});var yc=s(jt);p(Kr.$$.fragment,yc),Fg=l(yc),ml=o(yc,"P",{});var Kv=s(ml);Vg=c(Kv,"Append column at end of columns."),Kv.forEach(a),yc.forEach(a),Sg=l(T),Ft=o(T,"DIV",{class:!0});var vc=s(Ft);p(Qr.$$.fragment,vc),qg=l(vc),pl=o(vc,"P",{});var Qv=s(pl);Rg=c(Qv,"Create new Table with the indicated column removed."),Qv.forEach(a),vc.forEach(a),Ug=l(T),Vt=o(T,"DIV",{class:!0});var $c=s(Vt);p(Zr.$$.fragment,$c),zg=l($c),bl=o($c,"P",{});var Zv=s(bl);Bg=c(Zv,"Replace column in Table at position."),Zv.forEach(a),$c.forEach(a),Og=l(T),St=o(T,"DIV",{class:!0});var _c=s(St);p(eo.$$.fragment,_c),Wg=l(_c),hl=o(_c,"P",{});var e$=s(hl);Xg=c(e$,"Create new table with columns renamed to provided names."),e$.forEach(a),_c.forEach(a),Hg=l(T),qt=o(T,"DIV",{class:!0});var Tc=s(qt);p(to.$$.fragment,Tc),Gg=l(Tc),ul=o(Tc,"P",{});var t$=s(ul);Yg=c(t$,"Drop one or more columns and return a new table."),t$.forEach(a),Tc.forEach(a),Jg=l(T),fo=o(T,"DIV",{class:!0});var a$=s(fo);p(ao.$$.fragment,a$),a$.forEach(a),Kg=l(T),Rt=o(T,"DIV",{class:!0});var wc=s(Rt);p(ro.$$.fragment,wc),Qg=l(wc),gl=o(wc,"P",{});var r$=s(gl);Zg=c(r$,"Create ConcatenationTable from list of tables."),r$.forEach(a),wc.forEach(a),T.forEach(a),Pl=l(t),te=o(t,"H2",{class:!0});var xc=s(te);Ut=o(xc,"A",{id:!0,class:!0,href:!0});var o$=s(Ut);fl=o(o$,"SPAN",{});var s$=s(fl);p(oo.$$.fragment,s$),s$.forEach(a),o$.forEach(a),ef=l(xc),yl=o(xc,"SPAN",{});var n$=s(yl);tf=c(n$,"Utils"),n$.forEach(a),xc.forEach(a),Ll=l(t),ae=o(t,"DIV",{class:!0});var kc=s(ae);p(so.$$.fragment,kc),af=l(kc),vl=o(kc,"P",{});var l$=s(vl);rf=c(l$,"Concatenate tables."),l$.forEach(a),kc.forEach(a),Al=l(t),re=o(t,"DIV",{class:!0});var Ec=s(re);p(no.$$.fragment,Ec),of=l(Ec),$l=o(Ec,"P",{});var d$=s($l);sf=c(d$,`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),d$.forEach(a),Ec.forEach(a),this.h()},h(){i(D,"name","hf:doc:metadata"),i(D,"content",JSON.stringify(v$)),i(C,"id","table-classes"),i(C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(C,"href","#table-classes"),i(P,"class","relative group"),i(co,"href","/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"),i(se,"id","datasets.table.Table"),i(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(se,"href","#datasets.table.Table"),i(K,"class","relative group"),i(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ye,"id","datasets.table.InMemoryTable"),i(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ye,"href","#datasets.table.InMemoryTable"),i(Q,"class","relative group"),i(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Xe,"id","datasets.table.MemoryMappedTable"),i(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Xe,"href","#datasets.table.MemoryMappedTable"),i(Z,"class","relative group"),i(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(_,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(gt,"id","datasets.table.ConcatenationTable"),i(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(gt,"href","#datasets.table.ConcatenationTable"),i(ee,"class","relative group"),i(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(Ut,"id","datasets.table.concat_tables"),i(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ut,"href","#datasets.table.concat_tables"),i(te,"class","relative group"),i(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),i(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,E){e(document.head,D),M(t,oe,E),M(t,P,E),e(P,C),e(C,A),b(I,A,null),e(P,N),e(P,No),e(No,Mc),M(t,Tl,E),M(t,j,E),e(j,Ic),e(j,jo),e(jo,Dc),e(j,Cc),e(j,co),e(co,Pc),e(j,Lc),M(t,wl,E),M(t,K,E),e(K,se),e(se,Fo),b(zt,Fo,null),e(K,Ac),e(K,Vo),e(Vo,Nc),M(t,xl,E),M(t,x,E),b(Bt,x,null),e(x,jc),e(x,So),e(So,Fc),e(x,Vc),e(x,qo),e(qo,Sc),e(x,qc),e(x,Ro),e(Ro,Rc),e(x,Uc),e(x,F),b(Ot,F,null),e(F,zc),e(F,Uo),e(Uo,Bc),e(F,Oc),e(F,Wt),e(Wt,Wc),e(Wt,zo),e(zo,Xc),e(Wt,Hc),e(x,Gc),e(x,ne),b(Xt,ne,null),e(ne,Yc),e(ne,Bo),e(Bo,Jc),e(x,Kc),e(x,le),b(Ht,le,null),e(le,Qc),e(le,Oo),e(Oo,Zc),e(x,ei),e(x,de),b(Gt,de,null),e(de,ti),e(de,Wo),e(Wo,ai),e(x,ri),e(x,ce),b(Yt,ce,null),e(ce,oi),e(ce,Xo),e(Xo,si),e(x,ni),e(x,io),b(Jt,io,null),e(x,li),e(x,ie),b(Kt,ie,null),e(ie,di),e(ie,Ho),e(Ho,ci),e(x,ii),e(x,me),b(Qt,me,null),e(me,mi),e(me,Go),e(Go,pi),e(x,bi),e(x,pe),b(Zt,pe,null),e(pe,hi),e(pe,Yo),e(Yo,ui),e(x,gi),e(x,be),b(ea,be,null),e(be,fi),e(be,Jo),e(Jo,yi),e(x,vi),e(x,he),b(ta,he,null),e(he,$i),e(he,Ko),e(Ko,_i),e(x,Ti),e(x,ue),b(aa,ue,null),e(ue,wi),e(ue,Qo),e(Qo,xi),e(x,ki),e(x,V),b(ra,V,null),e(V,Ei),e(V,Zo),e(Zo,Mi),e(V,Ii),e(V,es),e(es,Di),e(x,Ci),e(x,ge),b(oa,ge,null),e(ge,Pi),e(ge,ts),e(ts,Li),e(x,Ai),e(x,fe),b(sa,fe,null),e(fe,Ni),e(fe,as),e(as,ji),M(t,kl,E),M(t,Q,E),e(Q,ye),e(ye,rs),b(na,rs,null),e(Q,Fi),e(Q,os),e(os,Vi),M(t,El,E),M(t,y,E),b(la,y,null),e(y,Si),e(y,ss),e(ss,qi),e(y,Ri),e(y,ns),e(ns,Ui),e(y,zi),e(y,ls),e(ls,Bi),e(y,Oi),e(y,ds),e(ds,Wi),e(y,Xi),e(y,S),b(da,S,null),e(S,Hi),e(S,cs),e(cs,Gi),e(S,Yi),e(S,ca),e(ca,Ji),e(ca,is),e(is,Ki),e(ca,Qi),e(y,Zi),e(y,ve),b(ia,ve,null),e(ve,em),e(ve,ms),e(ms,tm),e(y,am),e(y,$e),b(ma,$e,null),e($e,rm),e($e,ps),e(ps,om),e(y,sm),e(y,_e),b(pa,_e,null),e(_e,nm),e(_e,bs),e(bs,lm),e(y,dm),e(y,Te),b(ba,Te,null),e(Te,cm),e(Te,hs),e(hs,im),e(y,mm),e(y,mo),b(ha,mo,null),e(y,pm),e(y,we),b(ua,we,null),e(we,bm),e(we,us),e(us,hm),e(y,um),e(y,xe),b(ga,xe,null),e(xe,gm),e(xe,gs),e(gs,fm),e(y,ym),e(y,ke),b(fa,ke,null),e(ke,vm),e(ke,fs),e(fs,$m),e(y,_m),e(y,Ee),b(ya,Ee,null),e(Ee,Tm),e(Ee,ys),e(ys,wm),e(y,xm),e(y,Me),b(va,Me,null),e(Me,km),e(Me,vs),e(vs,Em),e(y,Mm),e(y,Ie),b($a,Ie,null),e(Ie,Im),e(Ie,$s),e($s,Dm),e(y,Cm),e(y,q),b(_a,q,null),e(q,Pm),e(q,_s),e(_s,Lm),e(q,Am),e(q,Ts),e(Ts,Nm),e(y,jm),e(y,De),b(Ta,De,null),e(De,Fm),e(De,ws),e(ws,Vm),e(y,Sm),e(y,Ce),b(wa,Ce,null),e(Ce,qm),e(Ce,xs),e(xs,Rm),e(y,Um),e(y,Pe),b(xa,Pe,null),e(Pe,zm),e(Pe,ks),e(ks,Bm),e(y,Om),e(y,Le),b(ka,Le,null),e(Le,Wm),e(Le,Es),e(Es,Xm),e(y,Hm),e(y,Ae),b(Ea,Ae,null),e(Ae,Gm),e(Ae,Ms),e(Ms,Ym),e(y,Jm),e(y,Ne),b(Ma,Ne,null),e(Ne,Km),e(Ne,Is),e(Is,Qm),e(y,Zm),e(y,R),b(Ia,R,null),e(R,ep),e(R,Ds),e(Ds,tp),e(R,ap),e(R,Cs),e(Cs,rp),e(y,op),e(y,je),b(Da,je,null),e(je,sp),e(je,Ps),e(Ps,np),e(y,lp),e(y,Fe),b(Ca,Fe,null),e(Fe,dp),e(Fe,Ls),e(Ls,cp),e(y,ip),e(y,U),b(Pa,U,null),e(U,mp),e(U,As),e(As,pp),e(U,bp),e(U,Ns),e(Ns,hp),e(y,up),e(y,Ve),b(La,Ve,null),e(Ve,gp),e(Ve,js),e(js,fp),e(y,yp),e(y,Se),b(Aa,Se,null),e(Se,vp),e(Se,Fs),e(Fs,$p),e(y,_p),e(y,qe),b(Na,qe,null),e(qe,Tp),e(qe,Vs),e(Vs,wp),e(y,xp),e(y,Re),b(ja,Re,null),e(Re,kp),e(Re,Ss),e(Ss,Ep),e(y,Mp),e(y,Ue),b(Fa,Ue,null),e(Ue,Ip),e(Ue,qs),e(qs,Dp),e(y,Cp),e(y,po),b(Va,po,null),e(y,Pp),e(y,bo),b(Sa,bo,null),e(y,Lp),e(y,L),b(qa,L,null),e(L,Ap),e(L,Rs),e(Rs,Np),e(L,jp),e(L,Ra),e(Ra,Fp),e(Ra,Us),e(Us,Vp),e(Ra,Sp),e(L,qp),e(L,Ua),e(Ua,Rp),e(Ua,zs),e(zs,Up),e(Ua,zp),e(L,Bp),b(ze,L,null),e(y,Op),e(y,Be),b(za,Be,null),e(Be,Wp),e(Be,Bs),e(Bs,Xp),e(y,Hp),e(y,Oe),b(Ba,Oe,null),e(Oe,Gp),e(Oe,Os),e(Os,Yp),e(y,Jp),e(y,We),b(Oa,We,null),e(We,Kp),e(We,Ws),e(Ws,Qp),M(t,Ml,E),M(t,Z,E),e(Z,Xe),e(Xe,Xs),b(Wa,Xs,null),e(Z,Zp),e(Z,Hs),e(Hs,eb),M(t,Il,E),M(t,_,E),b(Xa,_,null),e(_,tb),e(_,Gs),e(Gs,ab),e(_,rb),e(_,Ys),e(Ys,ob),e(_,sb),e(_,Js),e(Js,nb),e(_,lb),e(_,Ks),e(Ks,db),e(_,cb),e(_,Qs),e(Qs,ib),e(_,mb),e(_,z),b(Ha,z,null),e(z,pb),e(z,Zs),e(Zs,bb),e(z,hb),e(z,Ga),e(Ga,ub),e(Ga,en),e(en,gb),e(Ga,fb),e(_,yb),e(_,He),b(Ya,He,null),e(He,vb),e(He,tn),e(tn,$b),e(_,_b),e(_,Ge),b(Ja,Ge,null),e(Ge,Tb),e(Ge,an),e(an,wb),e(_,xb),e(_,Ye),b(Ka,Ye,null),e(Ye,kb),e(Ye,rn),e(rn,Eb),e(_,Mb),e(_,Je),b(Qa,Je,null),e(Je,Ib),e(Je,on),e(on,Db),e(_,Cb),e(_,ho),b(Za,ho,null),e(_,Pb),e(_,Ke),b(er,Ke,null),e(Ke,Lb),e(Ke,sn),e(sn,Ab),e(_,Nb),e(_,Qe),b(tr,Qe,null),e(Qe,jb),e(Qe,nn),e(nn,Fb),e(_,Vb),e(_,Ze),b(ar,Ze,null),e(Ze,Sb),e(Ze,ln),e(ln,qb),e(_,Rb),e(_,et),b(rr,et,null),e(et,Ub),e(et,dn),e(dn,zb),e(_,Bb),e(_,tt),b(or,tt,null),e(tt,Ob),e(tt,cn),e(cn,Wb),e(_,Xb),e(_,at),b(sr,at,null),e(at,Hb),e(at,mn),e(mn,Gb),e(_,Yb),e(_,B),b(nr,B,null),e(B,Jb),e(B,pn),e(pn,Kb),e(B,Qb),e(B,bn),e(bn,Zb),e(_,eh),e(_,rt),b(lr,rt,null),e(rt,th),e(rt,hn),e(hn,ah),e(_,rh),e(_,ot),b(dr,ot,null),e(ot,oh),e(ot,un),e(un,sh),e(_,nh),e(_,st),b(cr,st,null),e(st,lh),e(st,gn),e(gn,dh),e(_,ch),e(_,nt),b(ir,nt,null),e(nt,ih),e(nt,fn),e(fn,mh),e(_,ph),e(_,lt),b(mr,lt,null),e(lt,bh),e(lt,yn),e(yn,hh),e(_,uh),e(_,dt),b(pr,dt,null),e(dt,gh),e(dt,vn),e(vn,fh),e(_,yh),e(_,O),b(br,O,null),e(O,vh),e(O,$n),e($n,$h),e(O,_h),e(O,_n),e(_n,Th),e(_,wh),e(_,ct),b(hr,ct,null),e(ct,xh),e(ct,Tn),e(Tn,kh),e(_,Eh),e(_,it),b(ur,it,null),e(it,Mh),e(it,wn),e(wn,Ih),e(_,Dh),e(_,W),b(gr,W,null),e(W,Ch),e(W,xn),e(xn,Ph),e(W,Lh),e(W,kn),e(kn,Ah),e(_,Nh),e(_,mt),b(fr,mt,null),e(mt,jh),e(mt,En),e(En,Fh),e(_,Vh),e(_,pt),b(yr,pt,null),e(pt,Sh),e(pt,Mn),e(Mn,qh),e(_,Rh),e(_,bt),b(vr,bt,null),e(bt,Uh),e(bt,In),e(In,zh),e(_,Bh),e(_,ht),b($r,ht,null),e(ht,Oh),e(ht,Dn),e(Dn,Wh),e(_,Xh),e(_,ut),b(_r,ut,null),e(ut,Hh),e(ut,Cn),e(Cn,Gh),e(_,Yh),e(_,uo),b(Tr,uo,null),M(t,Dl,E),M(t,ee,E),e(ee,gt),e(gt,Pn),b(wr,Pn,null),e(ee,Jh),e(ee,Ln),e(Ln,Kh),M(t,Cl,E),M(t,$,E),b(xr,$,null),e($,Qh),e($,An),e(An,Zh),e($,eu),e($,Nn),e(Nn,tu),e($,au),e($,kr),e(kr,jn),e(jn,ru),e(kr,ou),e(kr,Fn),e(Fn,su),e($,nu),e($,Er),e(Er,lu),e(Er,Vn),e(Vn,du),e(Er,cu),e($,iu),e($,Sn),e(Sn,mu),e($,pu),e($,X),b(Mr,X,null),e(X,bu),e(X,qn),e(qn,hu),e(X,uu),e(X,Ir),e(Ir,gu),e(Ir,Rn),e(Rn,fu),e(Ir,yu),e($,vu),e($,ft),b(Dr,ft,null),e(ft,$u),e(ft,Un),e(Un,_u),e($,Tu),e($,yt),b(Cr,yt,null),e(yt,wu),e(yt,zn),e(zn,xu),e($,ku),e($,vt),b(Pr,vt,null),e(vt,Eu),e(vt,Bn),e(Bn,Mu),e($,Iu),e($,$t),b(Lr,$t,null),e($t,Du),e($t,On),e(On,Cu),e($,Pu),e($,go),b(Ar,go,null),e($,Lu),e($,_t),b(Nr,_t,null),e(_t,Au),e(_t,Wn),e(Wn,Nu),e($,ju),e($,Tt),b(jr,Tt,null),e(Tt,Fu),e(Tt,Xn),e(Xn,Vu),e($,Su),e($,wt),b(Fr,wt,null),e(wt,qu),e(wt,Hn),e(Hn,Ru),e($,Uu),e($,xt),b(Vr,xt,null),e(xt,zu),e(xt,Gn),e(Gn,Bu),e($,Ou),e($,kt),b(Sr,kt,null),e(kt,Wu),e(kt,Yn),e(Yn,Xu),e($,Hu),e($,Et),b(qr,Et,null),e(Et,Gu),e(Et,Jn),e(Jn,Yu),e($,Ju),e($,H),b(Rr,H,null),e(H,Ku),e(H,Kn),e(Kn,Qu),e(H,Zu),e(H,Qn),e(Qn,eg),e($,tg),e($,Mt),b(Ur,Mt,null),e(Mt,ag),e(Mt,Zn),e(Zn,rg),e($,og),e($,It),b(zr,It,null),e(It,sg),e(It,el),e(el,ng),e($,lg),e($,Dt),b(Br,Dt,null),e(Dt,dg),e(Dt,tl),e(tl,cg),e($,ig),e($,Ct),b(Or,Ct,null),e(Ct,mg),e(Ct,al),e(al,pg),e($,bg),e($,Pt),b(Wr,Pt,null),e(Pt,hg),e(Pt,rl),e(rl,ug),e($,gg),e($,Lt),b(Xr,Lt,null),e(Lt,fg),e(Lt,ol),e(ol,yg),e($,vg),e($,G),b(Hr,G,null),e(G,$g),e(G,sl),e(sl,_g),e(G,Tg),e(G,nl),e(nl,wg),e($,xg),e($,At),b(Gr,At,null),e(At,kg),e(At,ll),e(ll,Eg),e($,Mg),e($,Nt),b(Yr,Nt,null),e(Nt,Ig),e(Nt,dl),e(dl,Dg),e($,Cg),e($,Y),b(Jr,Y,null),e(Y,Pg),e(Y,cl),e(cl,Lg),e(Y,Ag),e(Y,il),e(il,Ng),e($,jg),e($,jt),b(Kr,jt,null),e(jt,Fg),e(jt,ml),e(ml,Vg),e($,Sg),e($,Ft),b(Qr,Ft,null),e(Ft,qg),e(Ft,pl),e(pl,Rg),e($,Ug),e($,Vt),b(Zr,Vt,null),e(Vt,zg),e(Vt,bl),e(bl,Bg),e($,Og),e($,St),b(eo,St,null),e(St,Wg),e(St,hl),e(hl,Xg),e($,Hg),e($,qt),b(to,qt,null),e(qt,Gg),e(qt,ul),e(ul,Yg),e($,Jg),e($,fo),b(ao,fo,null),e($,Kg),e($,Rt),b(ro,Rt,null),e(Rt,Qg),e(Rt,gl),e(gl,Zg),M(t,Pl,E),M(t,te,E),e(te,Ut),e(Ut,fl),b(oo,fl,null),e(te,ef),e(te,yl),e(yl,tf),M(t,Ll,E),M(t,ae,E),b(so,ae,null),e(ae,af),e(ae,vl),e(vl,rf),M(t,Al,E),M(t,re,E),b(no,re,null),e(re,of),e(re,$l),e($l,sf),Nl=!0},p(t,[E]){const lo={};E&2&&(lo.$$scope={dirty:E,ctx:t}),ze.$set(lo)},i(t){Nl||(h(I.$$.fragment,t),h(zt.$$.fragment,t),h(Bt.$$.fragment,t),h(Ot.$$.fragment,t),h(Xt.$$.fragment,t),h(Ht.$$.fragment,t),h(Gt.$$.fragment,t),h(Yt.$$.fragment,t),h(Jt.$$.fragment,t),h(Kt.$$.fragment,t),h(Qt.$$.fragment,t),h(Zt.$$.fragment,t),h(ea.$$.fragment,t),h(ta.$$.fragment,t),h(aa.$$.fragment,t),h(ra.$$.fragment,t),h(oa.$$.fragment,t),h(sa.$$.fragment,t),h(na.$$.fragment,t),h(la.$$.fragment,t),h(da.$$.fragment,t),h(ia.$$.fragment,t),h(ma.$$.fragment,t),h(pa.$$.fragment,t),h(ba.$$.fragment,t),h(ha.$$.fragment,t),h(ua.$$.fragment,t),h(ga.$$.fragment,t),h(fa.$$.fragment,t),h(ya.$$.fragment,t),h(va.$$.fragment,t),h($a.$$.fragment,t),h(_a.$$.fragment,t),h(Ta.$$.fragment,t),h(wa.$$.fragment,t),h(xa.$$.fragment,t),h(ka.$$.fragment,t),h(Ea.$$.fragment,t),h(Ma.$$.fragment,t),h(Ia.$$.fragment,t),h(Da.$$.fragment,t),h(Ca.$$.fragment,t),h(Pa.$$.fragment,t),h(La.$$.fragment,t),h(Aa.$$.fragment,t),h(Na.$$.fragment,t),h(ja.$$.fragment,t),h(Fa.$$.fragment,t),h(Va.$$.fragment,t),h(Sa.$$.fragment,t),h(qa.$$.fragment,t),h(ze.$$.fragment,t),h(za.$$.fragment,t),h(Ba.$$.fragment,t),h(Oa.$$.fragment,t),h(Wa.$$.fragment,t),h(Xa.$$.fragment,t),h(Ha.$$.fragment,t),h(Ya.$$.fragment,t),h(Ja.$$.fragment,t),h(Ka.$$.fragment,t),h(Qa.$$.fragment,t),h(Za.$$.fragment,t),h(er.$$.fragment,t),h(tr.$$.fragment,t),h(ar.$$.fragment,t),h(rr.$$.fragment,t),h(or.$$.fragment,t),h(sr.$$.fragment,t),h(nr.$$.fragment,t),h(lr.$$.fragment,t),h(dr.$$.fragment,t),h(cr.$$.fragment,t),h(ir.$$.fragment,t),h(mr.$$.fragment,t),h(pr.$$.fragment,t),h(br.$$.fragment,t),h(hr.$$.fragment,t),h(ur.$$.fragment,t),h(gr.$$.fragment,t),h(fr.$$.fragment,t),h(yr.$$.fragment,t),h(vr.$$.fragment,t),h($r.$$.fragment,t),h(_r.$$.fragment,t),h(Tr.$$.fragment,t),h(wr.$$.fragment,t),h(xr.$$.fragment,t),h(Mr.$$.fragment,t),h(Dr.$$.fragment,t),h(Cr.$$.fragment,t),h(Pr.$$.fragment,t),h(Lr.$$.fragment,t),h(Ar.$$.fragment,t),h(Nr.$$.fragment,t),h(jr.$$.fragment,t),h(Fr.$$.fragment,t),h(Vr.$$.fragment,t),h(Sr.$$.fragment,t),h(qr.$$.fragment,t),h(Rr.$$.fragment,t),h(Ur.$$.fragment,t),h(zr.$$.fragment,t),h(Br.$$.fragment,t),h(Or.$$.fragment,t),h(Wr.$$.fragment,t),h(Xr.$$.fragment,t),h(Hr.$$.fragment,t),h(Gr.$$.fragment,t),h(Yr.$$.fragment,t),h(Jr.$$.fragment,t),h(Kr.$$.fragment,t),h(Qr.$$.fragment,t),h(Zr.$$.fragment,t),h(eo.$$.fragment,t),h(to.$$.fragment,t),h(ao.$$.fragment,t),h(ro.$$.fragment,t),h(oo.$$.fragment,t),h(so.$$.fragment,t),h(no.$$.fragment,t),Nl=!0)},o(t){u(I.$$.fragment,t),u(zt.$$.fragment,t),u(Bt.$$.fragment,t),u(Ot.$$.fragment,t),u(Xt.$$.fragment,t),u(Ht.$$.fragment,t),u(Gt.$$.fragment,t),u(Yt.$$.fragment,t),u(Jt.$$.fragment,t),u(Kt.$$.fragment,t),u(Qt.$$.fragment,t),u(Zt.$$.fragment,t),u(ea.$$.fragment,t),u(ta.$$.fragment,t),u(aa.$$.fragment,t),u(ra.$$.fragment,t),u(oa.$$.fragment,t),u(sa.$$.fragment,t),u(na.$$.fragment,t),u(la.$$.fragment,t),u(da.$$.fragment,t),u(ia.$$.fragment,t),u(ma.$$.fragment,t),u(pa.$$.fragment,t),u(ba.$$.fragment,t),u(ha.$$.fragment,t),u(ua.$$.fragment,t),u(ga.$$.fragment,t),u(fa.$$.fragment,t),u(ya.$$.fragment,t),u(va.$$.fragment,t),u($a.$$.fragment,t),u(_a.$$.fragment,t),u(Ta.$$.fragment,t),u(wa.$$.fragment,t),u(xa.$$.fragment,t),u(ka.$$.fragment,t),u(Ea.$$.fragment,t),u(Ma.$$.fragment,t),u(Ia.$$.fragment,t),u(Da.$$.fragment,t),u(Ca.$$.fragment,t),u(Pa.$$.fragment,t),u(La.$$.fragment,t),u(Aa.$$.fragment,t),u(Na.$$.fragment,t),u(ja.$$.fragment,t),u(Fa.$$.fragment,t),u(Va.$$.fragment,t),u(Sa.$$.fragment,t),u(qa.$$.fragment,t),u(ze.$$.fragment,t),u(za.$$.fragment,t),u(Ba.$$.fragment,t),u(Oa.$$.fragment,t),u(Wa.$$.fragment,t),u(Xa.$$.fragment,t),u(Ha.$$.fragment,t),u(Ya.$$.fragment,t),u(Ja.$$.fragment,t),u(Ka.$$.fragment,t),u(Qa.$$.fragment,t),u(Za.$$.fragment,t),u(er.$$.fragment,t),u(tr.$$.fragment,t),u(ar.$$.fragment,t),u(rr.$$.fragment,t),u(or.$$.fragment,t),u(sr.$$.fragment,t),u(nr.$$.fragment,t),u(lr.$$.fragment,t),u(dr.$$.fragment,t),u(cr.$$.fragment,t),u(ir.$$.fragment,t),u(mr.$$.fragment,t),u(pr.$$.fragment,t),u(br.$$.fragment,t),u(hr.$$.fragment,t),u(ur.$$.fragment,t),u(gr.$$.fragment,t),u(fr.$$.fragment,t),u(yr.$$.fragment,t),u(vr.$$.fragment,t),u($r.$$.fragment,t),u(_r.$$.fragment,t),u(Tr.$$.fragment,t),u(wr.$$.fragment,t),u(xr.$$.fragment,t),u(Mr.$$.fragment,t),u(Dr.$$.fragment,t),u(Cr.$$.fragment,t),u(Pr.$$.fragment,t),u(Lr.$$.fragment,t),u(Ar.$$.fragment,t),u(Nr.$$.fragment,t),u(jr.$$.fragment,t),u(Fr.$$.fragment,t),u(Vr.$$.fragment,t),u(Sr.$$.fragment,t),u(qr.$$.fragment,t),u(Rr.$$.fragment,t),u(Ur.$$.fragment,t),u(zr.$$.fragment,t),u(Br.$$.fragment,t),u(Or.$$.fragment,t),u(Wr.$$.fragment,t),u(Xr.$$.fragment,t),u(Hr.$$.fragment,t),u(Gr.$$.fragment,t),u(Yr.$$.fragment,t),u(Jr.$$.fragment,t),u(Kr.$$.fragment,t),u(Qr.$$.fragment,t),u(Zr.$$.fragment,t),u(eo.$$.fragment,t),u(to.$$.fragment,t),u(ao.$$.fragment,t),u(ro.$$.fragment,t),u(oo.$$.fragment,t),u(so.$$.fragment,t),u(no.$$.fragment,t),Nl=!1},d(t){a(D),t&&a(oe),t&&a(P),g(I),t&&a(Tl),t&&a(j),t&&a(wl),t&&a(K),g(zt),t&&a(xl),t&&a(x),g(Bt),g(Ot),g(Xt),g(Ht),g(Gt),g(Yt),g(Jt),g(Kt),g(Qt),g(Zt),g(ea),g(ta),g(aa),g(ra),g(oa),g(sa),t&&a(kl),t&&a(Q),g(na),t&&a(El),t&&a(y),g(la),g(da),g(ia),g(ma),g(pa),g(ba),g(ha),g(ua),g(ga),g(fa),g(ya),g(va),g($a),g(_a),g(Ta),g(wa),g(xa),g(ka),g(Ea),g(Ma),g(Ia),g(Da),g(Ca),g(Pa),g(La),g(Aa),g(Na),g(ja),g(Fa),g(Va),g(Sa),g(qa),g(ze),g(za),g(Ba),g(Oa),t&&a(Ml),t&&a(Z),g(Wa),t&&a(Il),t&&a(_),g(Xa),g(Ha),g(Ya),g(Ja),g(Ka),g(Qa),g(Za),g(er),g(tr),g(ar),g(rr),g(or),g(sr),g(nr),g(lr),g(dr),g(cr),g(ir),g(mr),g(pr),g(br),g(hr),g(ur),g(gr),g(fr),g(yr),g(vr),g($r),g(_r),g(Tr),t&&a(Dl),t&&a(ee),g(wr),t&&a(Cl),t&&a($),g(xr),g(Mr),g(Dr),g(Cr),g(Pr),g(Lr),g(Ar),g(Nr),g(jr),g(Fr),g(Vr),g(Sr),g(qr),g(Rr),g(Ur),g(zr),g(Br),g(Or),g(Wr),g(Xr),g(Hr),g(Gr),g(Yr),g(Jr),g(Kr),g(Qr),g(Zr),g(eo),g(to),g(ao),g(ro),t&&a(Pl),t&&a(te),g(oo),t&&a(Ll),t&&a(ae),g(so),t&&a(Al),t&&a(re),g(no)}}}const v$={local:"table-classes",sections:[{local:"datasets.table.Table",title:"Table"},{local:"datasets.table.InMemoryTable",title:"InMemoryTable"},{local:"datasets.table.MemoryMappedTable",title:"MemoryMappedTable"},{local:"datasets.table.ConcatenationTable",title:"ConcatenationTable"},{local:"datasets.table.concat_tables",title:"Utils"}],title:"Table Classes"};function $$(_l){return b$(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class E$ extends c${constructor(D){super();i$(this,D,$$,y$,m$,{})}}export{E$ as default,v$ as metadata};
