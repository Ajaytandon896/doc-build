import{S as FZ,i as AZ,s as OZ,e as a,k as l,w as m,t as r,M as jZ,c as s,d as t,m as c,a as n,x as p,h as o,b as d,F as e,g as D,y as h,q as f,o as u,B as g,v as SZ}from"../../chunks/vendor-8138ceec.js";import{T as CZ}from"../../chunks/Tip-12722dfc.js";import{D as _}from"../../chunks/Docstring-1fc0f9df.js";import{C as Q}from"../../chunks/CodeBlock-fc89709f.js";import{I as st}from"../../chunks/IconCopyLink-2dd3a6ac.js";function qZ(K2){let A,_s,W,Te,ha,ge,bo,fa,$t,vs,_e;return{c(){A=a("p"),_s=r("A "),W=a("a"),Te=r("datasets.Sequence"),ha=r(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),ge=a("code"),bo=r("list"),fa=r(` instead of the
`),$t=a("a"),vs=r("datasets.Sequence"),_e=r("."),this.h()},l(oe){A=s(oe,"P",{});var K=n(A);_s=o(K,"A "),W=s(K,"A",{href:!0});var wt=n(W);Te=o(wt,"datasets.Sequence"),wt.forEach(t),ha=o(K,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),ge=s(K,"CODE",{});var zm=n(ge);bo=o(zm,"list"),zm.forEach(t),fa=o(K,` instead of the
`),$t=s(K,"A",{href:!0});var bs=n($t);vs=o(bs,"datasets.Sequence"),bs.forEach(t),_e=o(K,"."),K.forEach(t),this.h()},h(){d(W,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Sequence"),d($t,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Sequence")},m(oe,K){D(oe,A,K),e(A,_s),e(A,W),e(W,Te),e(A,ha),e(A,ge),e(ge,bo),e(A,fa),e(A,$t),e($t,vs),e(A,_e)},d(oe){oe&&t(A)}}}function zZ(K2){let A,_s,W,Te,ha,ge,bo,fa,$t,vs,_e,oe,K,wt,zm,bs,J0,Y2,R,yo,X0,Qf,Z0,Q0,Vm,eu,ex,tx,ax,tu,sx,nx,Ne,Do,rx,$o,ox,au,ix,lx,cx,su,dx,mx,nu,px,hx,ys,wo,fx,ua,ux,ru,gx,_x,ou,vx,bx,J2,ga,Ds,iu,xo,yx,lu,Dx,X2,$s,$x,Um,wx,xx,Z2,v,Eo,Ex,cu,kx,Ix,xt,ko,Tx,du,Nx,Px,mu,pu,Lx,Fx,Et,Io,Ax,hu,Ox,jx,fu,uu,Sx,Cx,ws,To,qx,gu,zx,Vx,xs,No,Ux,_u,Mx,Rx,Pe,Po,Bx,nt,Hx,vu,Gx,Wx,bu,Kx,Yx,Mm,Jx,Xx,Zx,Lo,Qx,yu,e4,t4,a4,Fo,s4,Du,n4,r4,o4,Es,Ao,i4,rt,l4,$u,c4,d4,wu,m4,p4,Rm,h4,f4,u4,ks,Oo,g4,xu,_4,v4,Is,jo,b4,Eu,y4,D4,Ts,So,$4,ku,w4,x4,Ns,Co,E4,qo,k4,Ps,I4,Iu,T4,N4,P4,L4,Ls,zo,F4,Tu,A4,O4,Fs,Vo,j4,Nu,S4,C4,kt,Uo,q4,Pu,z4,V4,Lu,U4,M4,As,Mo,R4,Fu,B4,H4,Os,Ro,G4,Au,W4,K4,js,Bo,Y4,Ou,J4,X4,It,Ho,Z4,ju,Q4,eE,_a,tE,Bm,aE,sE,Su,nE,rE,oE,Ss,Go,iE,Cu,lE,cE,Cs,Wo,dE,qu,mE,pE,qs,Ko,hE,Yo,fE,zu,uE,gE,_E,zs,Jo,vE,Vu,bE,yE,Tt,Xo,DE,Uu,$E,wE,Zo,xE,Hm,EE,kE,IE,Vs,Qo,TE,va,NE,Mu,PE,LE,Ru,FE,AE,OE,Le,ei,jE,ve,SE,Bu,CE,qE,Hu,zE,VE,Gu,UE,ME,Gm,RE,BE,HE,be,GE,Wu,WE,KE,Ku,YE,JE,Yu,XE,ZE,Ju,QE,e3,t3,Xu,a3,s3,Us,ti,n3,Fe,r3,Zu,o3,i3,Qu,l3,c3,Wm,d3,m3,Km,p3,h3,Nt,ai,f3,si,u3,eg,g3,_3,v3,Ym,b3,tg,y3,D3,Ae,ni,$3,ot,w3,ag,x3,E3,sg,k3,I3,ng,T3,N3,P3,ri,L3,Jm,F3,A3,O3,ba,j3,Xm,S3,C3,rg,q3,z3,V3,Oe,oi,U3,ya,M3,og,R3,B3,ig,H3,G3,W3,Da,K3,Zm,Y3,J3,Qm,X3,Z3,Q3,$a,ek,ep,tk,ak,lg,sk,nk,rk,Ms,ii,ok,cg,ik,lk,Pt,li,ck,dg,dk,mk,mg,pk,hk,je,ci,fk,pg,uk,gk,di,_k,hg,vk,bk,yk,wa,fg,Dk,$k,ug,wk,xk,ee,Ek,gg,kk,Ik,_g,Tk,Nk,vg,Pk,Lk,bg,Fk,Ak,yg,Ok,jk,Sk,Rs,mi,Ck,Dg,qk,zk,Bs,pi,Vk,$g,Uk,Mk,Lt,hi,Rk,wg,Bk,Hk,xg,Gk,Wk,Ft,fi,Kk,Eg,Yk,Jk,kg,Xk,Zk,At,ui,Qk,j,e7,Ig,t7,a7,Tg,s7,n7,Ng,r7,o7,Pg,i7,l7,Lg,c7,d7,Fg,m7,p7,Ag,h7,f7,u7,gi,g7,Og,_7,v7,b7,ie,_i,y7,xa,D7,jg,$7,w7,Sg,x7,E7,k7,Cg,I7,T7,vi,N7,qg,P7,L7,F7,zg,A7,O7,Hs,bi,j7,Vg,S7,C7,Se,yi,q7,Ug,z7,V7,Mg,U7,M7,Di,R7,Gs,$i,B7,Ea,H7,tp,G7,W7,Rg,K7,Y7,J7,Ws,wi,X7,it,Z7,Bg,Q7,eI,ap,tI,aI,Hg,sI,nI,rI,Ks,xi,oI,Gg,iI,lI,Ys,Ei,cI,Wg,dI,mI,Js,ki,pI,Ii,hI,Kg,fI,uI,gI,Xs,Ti,_I,Yg,vI,bI,Zs,Ni,yI,Jg,DI,$I,Qs,Pi,wI,Xg,xI,EI,le,Li,kI,ka,II,Zg,TI,NI,Qg,PI,LI,FI,e_,sp,AI,Fi,OI,jI,t_,SI,CI,Ai,qI,Ot,Oi,zI,lt,VI,a_,UI,MI,s_,RI,BI,n_,HI,GI,WI,r_,np,KI,ji,YI,JI,en,Si,XI,o_,ZI,QI,jt,Ci,e5,i_,t5,a5,qi,s5,l_,n5,r5,o5,Ce,zi,i5,c_,l5,c5,d_,d5,m5,Vi,p5,qe,Ui,h5,m_,f5,u5,p_,g5,_5,Mi,v5,tn,Ri,b5,h_,y5,D5,an,Bi,$5,f_,w5,x5,sn,Hi,E5,u_,k5,I5,nn,Gi,T5,g_,N5,P5,rn,Wi,L5,__,F5,A5,on,Ki,O5,v_,j5,S5,ln,Yi,C5,b_,q5,z5,cn,Ji,V5,rp,op,U5,M5,R5,dn,Xi,B5,ip,lp,H5,G5,W5,cp,Zi,K5,dp,Qi,Y5,mp,el,J5,pp,tl,X5,hp,al,Z5,fp,sl,Q5,up,nl,e8,gp,rl,t8,_p,ol,a8,vp,il,s8,bp,ll,n8,yp,cl,r8,Dp,dl,o8,mn,ml,i8,y_,l8,c8,pn,pl,d8,D_,m8,p8,hn,hl,h8,$_,f8,u8,fn,fl,g8,w_,_8,v8,St,ul,b8,Ia,y8,$p,D8,$8,wp,w8,x8,E8,Ta,k8,x_,I8,T8,E_,N8,P8,L8,ze,gl,F8,_l,A8,k_,O8,j8,S8,I_,C8,q8,vl,Q2,Na,bl,z8,Pa,V8,xp,U8,M8,Ep,R8,B8,eD,S,yl,H8,T_,G8,W8,La,K8,kp,Y8,J8,Ip,X8,Z8,Q8,ye,e6,N_,t6,a6,P_,s6,n6,L_,r6,o6,F_,i6,l6,c6,A_,d6,m6,O_,p6,h6,Dl,tD,te,$l,f6,j_,u6,g6,S_,_6,v6,C_,b6,y6,De,q_,D6,$6,z_,w6,x6,V_,E6,k6,wl,I6,Tp,T6,N6,P6,ct,L6,Np,F6,A6,U_,O6,j6,Pp,S6,C6,aD,ae,xl,q6,M_,z6,V6,R_,U6,M6,B_,R6,B6,$e,H_,H6,G6,G_,W6,K6,W_,Y6,J6,El,X6,Lp,Z6,Q6,e9,dt,t9,Fp,a9,s9,K_,n9,r9,Ap,o9,i9,sD,se,kl,l9,Y_,c9,d9,J_,m9,p9,X_,h9,f9,we,Z_,u9,g9,Q_,_9,v9,e1,b9,y9,Il,D9,Op,$9,w9,x9,mt,E9,jp,k9,I9,t1,T9,N9,Sp,P9,L9,nD,Fa,un,a1,Tl,F9,s1,A9,rD,gn,O9,n1,j9,S9,oD,$,Nl,C9,r1,q9,z9,_n,Pl,V9,o1,U9,M9,vn,Ll,R9,i1,B9,H9,bn,Fl,G9,l1,W9,K9,yn,Al,Y9,Ol,J9,Dn,X9,c1,Z9,Q9,eT,tT,$n,jl,aT,d1,sT,nT,wn,Sl,rT,m1,oT,iT,Ct,Cl,lT,p1,cT,dT,h1,mT,pT,xn,ql,hT,f1,fT,uT,En,zl,gT,u1,_T,vT,kn,Vl,bT,g1,yT,DT,qt,Ul,$T,_1,wT,xT,v1,ET,kT,Ve,Ml,IT,b1,TT,NT,y1,PT,LT,D1,FT,AT,Ue,Rl,OT,Bl,jT,$1,ST,CT,qT,xe,zT,w1,VT,UT,x1,MT,RT,E1,BT,HT,k1,GT,WT,KT,I1,YT,JT,zt,Hl,XT,Gl,ZT,T1,QT,eN,tN,Cp,aN,N1,sN,nN,In,Wl,rN,Aa,oN,P1,iN,lN,L1,cN,dN,mN,Me,Kl,pN,pt,hN,F1,fN,uN,A1,gN,_N,O1,vN,bN,yN,Yl,DN,qp,$N,wN,xN,Oa,EN,zp,kN,IN,j1,TN,NN,PN,Re,Jl,LN,ja,FN,S1,AN,ON,C1,jN,SN,CN,Sa,qN,Vp,zN,VN,Up,UN,MN,RN,Ca,BN,q1,HN,GN,z1,WN,KN,YN,Tn,Xl,JN,V1,XN,ZN,Vt,Zl,QN,U1,eP,tP,ht,aP,Mp,sP,nP,M1,rP,oP,R1,iP,lP,cP,Nn,Ql,dP,B1,mP,pP,Be,ec,hP,H1,fP,uP,G1,gP,_P,qa,vP,Rp,bP,yP,W1,DP,$P,wP,He,tc,xP,K1,EP,kP,za,IP,Bp,TP,NP,Y1,PP,LP,FP,ac,J1,AP,OP,X1,jP,SP,Pn,sc,CP,Z1,qP,zP,Ln,nc,VP,rc,UP,Q1,MP,RP,BP,ce,oc,HP,Va,GP,ev,WP,KP,tv,YP,JP,XP,av,ZP,QP,sv,eL,tL,ic,aL,Fn,lc,sL,Ua,nL,Hp,rL,oL,nv,iL,lL,cL,An,cc,dL,ft,mL,rv,pL,hL,Gp,fL,uL,ov,gL,_L,vL,On,dc,bL,iv,yL,DL,jn,mc,$L,lv,wL,xL,Sn,pc,EL,cv,kL,IL,Cn,hc,TL,dv,NL,PL,Ut,fc,LL,Ma,FL,Wp,AL,OL,Kp,jL,SL,CL,Ra,qL,mv,zL,VL,pv,UL,ML,iD,Yp,lD,Ba,qn,hv,uc,RL,fv,BL,cD,zn,HL,Jp,GL,WL,dD,x,gc,KL,uv,YL,JL,Vn,_c,XL,gv,ZL,QL,Un,vc,eF,_v,tF,aF,Mn,bc,sF,vv,nF,rF,Xp,yc,oF,Ge,Dc,iF,bv,lF,cF,$c,dF,yv,mF,pF,hF,Ha,Dv,fF,uF,$v,gF,_F,ne,vF,wv,bF,yF,xv,DF,$F,Ev,wF,xF,kv,EF,kF,Iv,IF,TF,NF,Rn,wc,PF,Tv,LF,FF,Bn,xc,AF,Nv,OF,jF,de,Ec,SF,Pv,CF,qF,Lv,zF,VF,kc,UF,Fv,MF,RF,BF,Ga,HF,Zp,GF,WF,Qp,KF,YF,JF,Hn,Ic,XF,Tc,ZF,Av,QF,eA,tA,Gn,Nc,aA,Pc,sA,Ov,nA,rA,oA,Wn,Lc,iA,eh,th,lA,cA,dA,Kn,Fc,mA,ah,sh,pA,hA,fA,nh,Ac,uA,rh,Oc,gA,oh,jc,_A,ih,Sc,vA,lh,Cc,bA,ch,qc,yA,dh,zc,DA,mh,Vc,$A,ph,Uc,wA,hh,Mc,xA,fh,Rc,EA,uh,Bc,kA,gh,Hc,mD,Wa,Yn,jv,Gc,IA,Sv,TA,pD,Jn,NA,Cv,PA,LA,hD,P,Wc,FA,We,Kc,AA,qv,OA,jA,Yc,SA,zv,CA,qA,zA,Ka,Vv,VA,UA,Uv,MA,RA,re,BA,Mv,HA,GA,Rv,WA,KA,Bv,YA,JA,Hv,XA,ZA,Gv,QA,eO,tO,Xn,Jc,aO,Wv,sO,nO,me,Xc,rO,Kv,oO,iO,Yv,lO,cO,Zc,dO,Jv,mO,pO,hO,Ya,fO,_h,uO,gO,vh,_O,vO,bO,Zn,Qc,yO,Xv,DO,$O,Qn,ed,wO,Zv,xO,EO,er,td,kO,Qv,IO,TO,tr,ad,NO,eb,PO,LO,ar,sd,FO,tb,AO,OO,sr,nd,jO,ab,SO,fD,Ja,nr,sb,rd,CO,nb,qO,uD,T,od,zO,rb,VO,UO,id,MO,ob,RO,BO,HO,bh,ib,GO,WO,KO,C,lb,Mt,YO,yh,JO,XO,cb,ZO,QO,db,ej,tj,mb,ld,aj,Dh,sj,nj,rj,pb,cd,oj,hb,ij,lj,cj,dd,Ee,dj,fb,mj,pj,$h,hj,fj,ub,uj,gj,wh,_j,vj,bj,rr,yj,gb,ke,Dj,xh,$j,wj,Eh,xj,Ej,kh,kj,Ij,Ih,Tj,Nj,Pj,_b,md,Lj,Th,Fj,Aj,Oj,vb,ut,jj,Nh,Sj,Cj,bb,qj,zj,yb,Vj,Uj,Mj,Db,or,Ph,Rj,Bj,Lh,Hj,Gj,Wj,ir,pd,Kj,$b,Yj,Jj,lr,hd,Xj,wb,Zj,Qj,cr,fd,eS,xb,tS,aS,dr,ud,sS,Eb,nS,rS,mr,gd,oS,kb,iS,lS,pr,_d,cS,Ib,dS,mS,Rt,vd,pS,Tb,hS,fS,Nb,uS,gS,hr,bd,_S,Pb,vS,bS,Y,yd,yS,Lb,DS,$S,Fb,wS,xS,gt,ES,Fh,kS,IS,Ah,TS,NS,Oh,PS,LS,FS,Ab,AS,OS,Dd,jS,pe,$d,SS,Ob,CS,qS,jb,zS,VS,Sb,US,MS,wd,gD,Xa,xd,RS,Cb,BS,_D,B,Ed,HS,qb,GS,WS,kd,KS,zb,YS,JS,XS,Za,jh,Vb,ZS,QS,eC,Sh,Ub,tC,aC,sC,Ch,Mb,nC,rC,oC,fr,Id,iC,Rb,lC,cC,ur,Td,dC,Bb,mC,vD,_t,Nd,pC,Hb,hC,fC,Gb,uC,bD,q,Pd,gC,qh,Wb,_C,vC,bC,Kb,yC,DC,Ld,$C,Yb,wC,xC,EC,Jb,kC,IC,Fd,TC,gr,Ad,NC,Xb,PC,yD,z,Od,LC,zh,Zb,FC,AC,OC,Qb,jC,SC,ey,CC,qC,ty,zC,VC,jd,UC,_r,Sd,MC,ay,RC,DD,Cd,qd,$D,zd,Vd,wD,Ud,Md,xD,Rd,Bd,ED,L,Hd,BC,sy,HC,GC,ny,WC,KC,Qa,ry,Gd,YC,oy,JC,XC,ZC,es,Wd,QC,iy,eq,tq,aq,Kd,ly,sq,nq,cy,rq,oq,dy,iq,lq,ts,Yd,cq,my,dq,mq,pq,as,py,hq,fq,hy,uq,gq,fy,_q,vq,uy,bq,yq,Bt,Jd,Dq,gy,$q,wq,vt,_y,xq,Eq,vy,kq,Iq,by,Tq,Nq,yy,Pq,Lq,vr,Xd,Fq,Dy,Aq,Oq,br,Zd,jq,$y,Sq,Cq,yr,Qd,qq,wy,zq,Vq,Dr,em,Uq,xy,Mq,kD,F,tm,Rq,Ey,Bq,Hq,ky,Gq,Wq,bt,Iy,am,Kq,Ty,Yq,Jq,Xq,ss,sm,Zq,Ny,Qq,ez,tz,nm,Py,az,sz,Ly,nz,rz,Fy,oz,iz,Ay,rm,lz,Oy,cz,dz,mz,jy,om,pz,Sy,hz,fz,uz,Ht,im,gz,Cy,_z,vz,Ie,qy,bz,yz,zy,Dz,$z,Vy,wz,xz,Uy,Ez,kz,My,Iz,Tz,$r,lm,Nz,Ry,Pz,Lz,wr,cm,Fz,By,Az,Oz,xr,dm,jz,Hy,Sz,Cz,Er,mm,qz,Gy,zz,ID,ns,kr,Wy,pm,Vz,Ky,Uz,TD,H,hm,Mz,Yy,Rz,Bz,Vh,Jy,Hz,Gz,Wz,Xy,Kz,Yz,Ir,fm,Jz,um,Xz,Zy,Zz,Qz,eV,Tr,gm,tV,rs,aV,Qy,sV,nV,e2,rV,oV,ND,os,Nr,t2,_m,iV,a2,lV,PD,Gt,cV,s2,dV,mV,Uh,pV,hV,LD,G,vm,fV,n2,uV,gV,Pr,bm,_V,r2,vV,bV,Lr,ym,yV,o2,DV,$V,Wt,Dm,wV,i2,xV,EV,l2,kV,IV,Fr,$m,TV,c2,NV,FD,is,Ar,d2,wm,PV,m2,LV,AD,k,xm,FV,p2,AV,OV,h2,jV,SV,yt,CV,f2,qV,zV,u2,VV,UV,g2,MV,RV,BV,_2,HV,GV,v2,WV,KV,b2,YV,JV,Ke,y2,XV,ZV,Em,QV,eU,D2,tU,aU,km,sU,nU,rU,$2,oU,iU,w2,lU,cU,Im,dU,ls,mU,x2,pU,hU,E2,fU,uU,gU,Tm,_U,Dt,vU,k2,bU,yU,I2,DU,$U,T2,wU,xU,EU,Nm,kU,cs,IU,N2,TU,NU,P2,PU,LU,FU,Pm,AU,L2,OU,jU,Lm,SU,Or,jr,F2,Fm,CU,A2,qU,zU,V,VU,O2,UU,MU,j2,RU,BU,S2,HU,GU,C2,WU,KU,q2,YU,JU,z2,XU,ZU,V2,QU,eM,OD,ds,Am,tM,ms,aM,U2,sM,nM,M2,rM,oM,jD,ps,Om,iM,R2,lM,SD,hs,Sr,B2,jm,cM,H2,dM,CD,fs,Sm,mM,G2,pM,qD;return ge=new st({}),wt=new st({}),yo=new _({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/info.py#L87",parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}]}}),Do=new _({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/info.py#L232",parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}]}}),wo=new _({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/info.py#L182",parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"}]}}),xo=new st({}),Eo=new _({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L613"}}),ko=new _({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3570",parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Io=new _({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3790",parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),To=new _({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L679",parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),No=new _({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L714",parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Po=new _({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L742",parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ao=new _({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L788",parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Oo=new _({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1129"}}),jo=new _({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1134"}}),So=new _({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1142"}}),Co=new _({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1147"}}),zo=new _({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1154"}}),Vo=new _({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1159"}}),Uo=new _({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1166",parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),Mo=new _({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1245",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ro=new _({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1266",parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Bo=new _({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1325",parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ho=new _({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1348",parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Go=new _({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1384",parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Wo=new _({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1434",parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ko=new _({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1187",parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}]}}),Jo=new _({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1486"}}),Xo=new _({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1502"}}),Qo=new _({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1522",parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),ei=new _({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1550",parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),ti=new _({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1614",parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),ai=new _({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1607"}}),ni=new _({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1635",parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),oi=new _({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1662",parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),ii=new _({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1762"}}),li=new _({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1768",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),ci=new _({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1806",parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Union[Dict, Any], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}]}}),mi=new _({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L2388",parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}]}}),pi=new _({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L2550",parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),hi=new _({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L2640",parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),fi=new _({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L2722",parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),ui=new _({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L2800",parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}]}}),_i=new _({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3000",parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}]}}),bi=new _({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L305",parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),yi=new _({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3493",parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes. Defaults to a shard size of 500MB.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}]}}),Di=new Q({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),$i=new _({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L974",parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}]}}),wi=new _({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1068",parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/master/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),xi=new _({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L2481",parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),Ei=new _({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3139",parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),ki=new _({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3234",parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),Ti=new _({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3166",parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),Ni=new _({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3195",parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),Pi=new _({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3265",parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.
parquet_writer_kwargs &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>`,name:"batch_size"}],returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Li=new _({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3595",parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}]}}),Ai=new Q({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),Oi=new _({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3668",parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}]}}),Si=new _({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L509",parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}]}}),Ci=new _({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L522",parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}]}}),zi=new _({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3720",parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}]}}),Vi=new Q({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),Ui=new _({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L600",parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}]}}),Mi=new Q({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),Ri=new _({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L422"}}),Bi=new _({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L426",parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],returnType:`
<p><code>BaseIndex</code></p>
`}}),Hi=new _({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L644",parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}]}}),Gi=new _({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L652",parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),Wi=new _({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L667",parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),Ki=new _({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L682",parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),Yi=new _({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/search.py#L700",parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),Ji=new _({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L144"}}),Xi=new _({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L149"}}),Zi=new _({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L154"}}),Qi=new _({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L158"}}),el=new _({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L162"}}),tl=new _({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L166"}}),al=new _({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L170"}}),sl=new _({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L174"}}),nl=new _({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L178"}}),rl=new _({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L182"}}),ol=new _({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L186"}}),il=new _({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L190"}}),ll=new _({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L194"}}),cl=new _({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L198"}}),dl=new _({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L206"}}),ml=new _({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L827",parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),pl=new _({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L856",parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),hl=new _({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L893",parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),fl=new _({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L932",parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ul=new _({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L1688",parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}]}}),gl=new _({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3830",parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}]}}),vl=new Q({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),bl=new _({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L3884",parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}]}}),yl=new _({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/combine.py#L20",parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Dl=new Q({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),$l=new _({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/fingerprint.py#L96"}}),xl=new _({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/fingerprint.py#L117"}}),kl=new _({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/fingerprint.py#L162"}}),Tl=new st({}),Nl=new _({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L31"}}),Pl=new _({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L53"}}),Ll=new _({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L59"}}),Fl=new _({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L65"}}),Al=new _({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L71"}}),jl=new _({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L77"}}),Sl=new _({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L83"}}),Cl=new _({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L97",parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),ql=new _({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L113",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),zl=new _({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L374",parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><em>function(example: Dict) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict, indices: int) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[List]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[List], indices: List[int]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}]}}),Vl=new _({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L462",parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}]}}),Ul=new _({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L530",parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}]}}),Ml=new _({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L586",parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (the seed argument has priority over seeds if both arguments are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}]}}),Rl=new _({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L258",parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Hl=new _({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L285"}}),Wl=new _({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L225",parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Kl=new _({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L319",parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Jl=new _({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L347",parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),Xl=new _({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L89"}}),Zl=new _({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L128",parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}]}}),Ql=new _({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L145",parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ec=new _({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L158",parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}]}}),tc=new _({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L174",parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}]}}),sc=new _({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L195",parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),nc=new _({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L210",parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}]}}),oc=new _({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L847",parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}]}}),ic=new Q({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),lc=new _({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L648",parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}]}}),cc=new _({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L674",parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/master/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),dc=new _({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L715",parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),mc=new _({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L742",parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),pc=new _({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L769",parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),hc=new _({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L805",parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),fc=new _({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L832",parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}]}}),uc=new st({}),gc=new _({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L452"}}),_c=new _({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L802",parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),vc=new _({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L816",parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),bc=new _({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L841",parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),yc=new _({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L496"}}),Dc=new _({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L532",parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; dict</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Union[Dict, Any], idx: int) -&gt; dict</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; dict</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], indices: List[int]) -&gt; dict</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}]}}),wc=new _({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L748",parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),xc=new _({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L602",parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}]}}),Ec=new _({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L654",parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}]}}),Ic=new _({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L698",parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}]}}),Nc=new _({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/iterable_dataset.py#L714",parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}]}}),Lc=new _({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L144"}}),Fc=new _({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L149"}}),Ac=new _({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L154"}}),Oc=new _({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L158"}}),jc=new _({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L162"}}),Sc=new _({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L166"}}),Cc=new _({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L170"}}),qc=new _({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L174"}}),zc=new _({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L178"}}),Vc=new _({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L182"}}),Uc=new _({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L186"}}),Mc=new _({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L190"}}),Rc=new _({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L194"}}),Bc=new _({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L198"}}),Hc=new _({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/arrow_dataset.py#L206"}}),Gc=new st({}),Wc=new _({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L933"}}),Kc=new _({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L950",parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; dict</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Union[Dict, Any], idx: int) -&gt; dict</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; dict</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], indices: List[int]) -&gt; dict</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}]}}),Jc=new _({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L1008",parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}]}}),Xc=new _({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L1048",parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}]}}),Qc=new _({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L934",parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}]}}),ed=new _({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L1148",parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),td=new _({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L1133",parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ad=new _({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L1118",parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),sd=new _({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L1082",parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),nd=new _({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/dataset_dict.py#L1102",parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),rd=new st({}),od=new _({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1167"}}),rr=new CZ({props:{$$slots:{default:[qZ]},$$scope:{ctx:K2}}}),pd=new _({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1383",returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),hd=new _({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1365",parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),fd=new _({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1349",parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],returnDescription:`
<p><code>list[Any]</code></p>
`}}),ud=new _({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1330",parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"}],returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),gd=new _({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1312",parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),_d=new _({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1299",parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),vd=new _({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1453",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),bd=new _({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1248",parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),yd=new _({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1268",parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Dd=new Q({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),$d=new _({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L1392",parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),wd=new Q({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),xd=new _({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L877"}}),Ed=new _({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L747",parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}]}}),Id=new _({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L832"}}),Td=new _({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L803"}}),Nd=new _({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L368"}}),Pd=new _({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/translation.py#L12"}}),Fd=new Q({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),Ad=new _({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/translation.py#L46"}}),Od=new _({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/translation.py#L54"}}),jd=new Q({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),Sd=new _({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/translation.py#L123"}}),qd=new _({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L444"}}),Vd=new _({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L453"}}),Md=new _({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L462"}}),Bd=new _({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/features.py#L471"}}),Hd=new _({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/audio.py#L18",parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}]}}),Jd=new _({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/audio.py#L127",parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Xd=new _({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/audio.py#L84",parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"}],returnDescription:`
<p>dict</p>
`}}),Zd=new _({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/audio.py#L160",parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Qd=new _({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/audio.py#L58",parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],returnType:`
<p><code>dict</code></p>
`}}),em=new _({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/audio.py#L116"}}),tm=new _({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/image.py#L25",parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}]}}),im=new _({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/image.py#L133",parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),lm=new _({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/image.py#L83",parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"}],returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),cm=new _({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/image.py#L182",parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),dm=new _({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/image.py#L55",parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),mm=new _({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/features/image.py#L120"}}),pm=new st({}),hm=new _({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/info.py#L297"}}),fm=new _({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/info.py#L343"}}),gm=new _({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/info.py#L332"}}),_m=new st({}),vm=new _({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/metric.py#L138",parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}]}}),bm=new _({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/metric.py#L490",parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}]}}),ym=new _({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/metric.py#L451",parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}]}}),Dm=new _({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/metric.py#L388",parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),$m=new _({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.utils.download_manager.DownloadManager] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/metric.py#L565",parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/master/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}]}}),wm=new st({}),xm=new _({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/filesystems/s3filesystem.py#L6"}}),Im=new Q({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)  # doctest: +SKIP
s3.ls('public-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),Tm=new Q({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
s3.ls('my-private-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),Nm=new Q({props:{code:`import botocore
from datasets.filesystems import S3Filesystem
s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),Pm=new Q({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset = load_from_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),Lm=new Q({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem
dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset.save_to_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),Fm=new st({}),Am=new _({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/filesystems.py#L28",parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}]}}),Om=new _({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/filesystems.py#L40",parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}]}}),jm=new st({}),Sm=new _({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/fingerprint.py#L212"}}),{c(){A=a("meta"),_s=l(),W=a("h1"),Te=a("a"),ha=a("span"),m(ge.$$.fragment),bo=l(),fa=a("span"),$t=r("Main classes"),vs=l(),_e=a("h2"),oe=a("a"),K=a("span"),m(wt.$$.fragment),zm=l(),bs=a("span"),J0=r("DatasetInfo"),Y2=l(),R=a("div"),m(yo.$$.fragment),X0=l(),Qf=a("p"),Z0=r("Information about a dataset."),Q0=l(),Vm=a("p"),eu=a("em"),ex=r("DatasetInfo"),tx=r(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),ax=l(),tu=a("p"),sx=r("Note: Not all fields are known on construction and may be updated later."),nx=l(),Ne=a("div"),m(Do.$$.fragment),rx=l(),$o=a("p"),ox=r("Create DatasetInfo from the JSON file in "),au=a("code"),ix=r("dataset_info_dir"),lx=r("."),cx=l(),su=a("p"),dx=r(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),mx=l(),nu=a("p"),px=r("This will overwrite all previous metadata."),hx=l(),ys=a("div"),m(wo.$$.fragment),fx=l(),ua=a("p"),ux=r("Write "),ru=a("code"),gx=r("DatasetInfo"),_x=r(" and license (if present) as JSON files to "),ou=a("code"),vx=r("dataset_info_dir"),bx=r("."),J2=l(),ga=a("h2"),Ds=a("a"),iu=a("span"),m(xo.$$.fragment),yx=l(),lu=a("span"),Dx=r("Dataset"),X2=l(),$s=a("p"),$x=r("The base class "),Um=a("a"),wx=r("Dataset"),xx=r(" implements a Dataset backed by an Apache Arrow table."),Z2=l(),v=a("div"),m(Eo.$$.fragment),Ex=l(),cu=a("p"),kx=r("A Dataset backed by an Arrow table."),Ix=l(),xt=a("div"),m(ko.$$.fragment),Tx=l(),du=a("p"),Nx=r("Add column to Dataset."),Px=l(),mu=a("p"),pu=a("em"),Lx=r("New in version 1.7."),Fx=l(),Et=a("div"),m(Io.$$.fragment),Ax=l(),hu=a("p"),Ox=r("Add item to Dataset."),jx=l(),fu=a("p"),uu=a("em"),Sx=r("New in version 1.7."),Cx=l(),ws=a("div"),m(To.$$.fragment),qx=l(),gu=a("p"),zx=r("Instantiate a Dataset backed by an Arrow table at filename."),Vx=l(),xs=a("div"),m(No.$$.fragment),Ux=l(),_u=a("p"),Mx=r("Instantiate a Dataset backed by an Arrow buffer."),Rx=l(),Pe=a("div"),m(Po.$$.fragment),Bx=l(),nt=a("p"),Hx=r("Convert "),vu=a("code"),Gx=r("pandas.DataFrame"),Wx=r(" to a "),bu=a("code"),Kx=r("pyarrow.Table"),Yx=r(" to create a "),Mm=a("a"),Jx=r("Dataset"),Xx=r("."),Zx=l(),Lo=a("p"),Qx=r(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),yu=a("em"),e4=r("object"),t4=r(", we need to guess the datatype by looking at the Python objects in this Series."),a4=l(),Fo=a("p"),s4=r("Be aware that Series of the "),Du=a("em"),n4=r("object"),r4=r(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),o4=l(),Es=a("div"),m(Ao.$$.fragment),i4=l(),rt=a("p"),l4=r("Convert "),$u=a("code"),c4=r("dict"),d4=r(" to a "),wu=a("code"),m4=r("pyarrow.Table"),p4=r(" to create a "),Rm=a("a"),h4=r("Dataset"),f4=r("."),u4=l(),ks=a("div"),m(Oo.$$.fragment),g4=l(),xu=a("p"),_4=r("The Apache Arrow table backing the dataset."),v4=l(),Is=a("div"),m(jo.$$.fragment),b4=l(),Eu=a("p"),y4=r("The cache files containing the Apache Arrow table backing the dataset."),D4=l(),Ts=a("div"),m(So.$$.fragment),$4=l(),ku=a("p"),w4=r("Number of columns in the dataset."),x4=l(),Ns=a("div"),m(Co.$$.fragment),E4=l(),qo=a("p"),k4=r("Number of rows in the dataset (same as "),Ps=a("a"),I4=r("Dataset."),Iu=a("strong"),T4=r("len"),N4=r("()"),P4=r(")."),L4=l(),Ls=a("div"),m(zo.$$.fragment),F4=l(),Tu=a("p"),A4=r("Names of the columns in the dataset."),O4=l(),Fs=a("div"),m(Vo.$$.fragment),j4=l(),Nu=a("p"),S4=r("Shape of the dataset (number of columns, number of rows)."),C4=l(),kt=a("div"),m(Uo.$$.fragment),q4=l(),Pu=a("p"),z4=r("Return a list of the unique elements in a column."),V4=l(),Lu=a("p"),U4=r("This is implemented in the low-level backend and as such, very fast."),M4=l(),As=a("div"),m(Mo.$$.fragment),R4=l(),Fu=a("p"),B4=r(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),H4=l(),Os=a("div"),m(Ro.$$.fragment),G4=l(),Au=a("p"),W4=r("Cast the dataset to a new set of features."),K4=l(),js=a("div"),m(Bo.$$.fragment),Y4=l(),Ou=a("p"),J4=r("Cast column to feature for decoding."),X4=l(),It=a("div"),m(Ho.$$.fragment),Z4=l(),ju=a("p"),Q4=r("Remove one or several column(s) in the dataset and the features associated to them."),eE=l(),_a=a("p"),tE=r("You can also remove a column using "),Bm=a("a"),aE=r("Dataset.map()"),sE=r(" with "),Su=a("em"),nE=r("remove_columns"),rE=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),oE=l(),Ss=a("div"),m(Go.$$.fragment),iE=l(),Cu=a("p"),lE=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),cE=l(),Cs=a("div"),m(Wo.$$.fragment),dE=l(),qu=a("p"),mE=r(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),pE=l(),qs=a("div"),m(Ko.$$.fragment),hE=l(),Yo=a("p"),fE=r("Casts the given column as :obj:"),zu=a("code"),uE=r("datasets.features.ClassLabel"),gE=r(" and updates the table."),_E=l(),zs=a("div"),m(Jo.$$.fragment),vE=l(),Vu=a("p"),bE=r("Number of rows in the dataset."),yE=l(),Tt=a("div"),m(Xo.$$.fragment),DE=l(),Uu=a("p"),$E=r("Iterate through the examples."),wE=l(),Zo=a("p"),xE=r("If a formatting is set with "),Hm=a("a"),EE=r("Dataset.set_format()"),kE=r(` rows will be returned with the
selected format.`),IE=l(),Vs=a("div"),m(Qo.$$.fragment),TE=l(),va=a("p"),NE=r("To be used in a "),Mu=a("code"),PE=r("with"),LE=r(" statement. Set "),Ru=a("code"),FE=r("__getitem__"),AE=r(" return format (type and columns)."),OE=l(),Le=a("div"),m(ei.$$.fragment),jE=l(),ve=a("p"),SE=r("Set "),Bu=a("strong"),CE=r("getitem"),qE=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Hu=a("code"),zE=r("type"),VE=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),Gu=a("strong"),UE=r("getitem"),ME=r(`.
It\u2019s also possible to use custom transforms for formatting using `),Gm=a("a"),RE=r("datasets.Dataset.set_transform()"),BE=r("."),HE=l(),be=a("p"),GE=r("It is possible to call "),Wu=a("code"),WE=r("map"),KE=r(" after calling "),Ku=a("code"),YE=r("set_format"),JE=r(". Since "),Yu=a("code"),XE=r("map"),ZE=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Ju=a("code"),QE=r("map"),e3=r(" on a dataset to add a new column, then this column will be formatted:"),t3=l(),Xu=a("p"),a3=r("new formatted columns = (all columns - previously unformatted columns)"),s3=l(),Us=a("div"),m(ti.$$.fragment),n3=l(),Fe=a("p"),r3=r("Set "),Zu=a("strong"),o3=r("getitem"),i3=r(" return format using this transform. The transform is applied on-the-fly on batches when "),Qu=a("strong"),l3=r("getitem"),c3=r(` is called.
As `),Wm=a("a"),d3=r("datasets.Dataset.set_format()"),m3=r(", this can be reset using "),Km=a("a"),p3=r("datasets.Dataset.reset_format()"),h3=l(),Nt=a("div"),m(ai.$$.fragment),f3=l(),si=a("p"),u3=r("Reset "),eg=a("strong"),g3=r("getitem"),_3=r(" return format to python objects and all columns."),v3=l(),Ym=a("p"),b3=r("Same as "),tg=a("code"),y3=r("self.set_format()"),D3=l(),Ae=a("div"),m(ni.$$.fragment),$3=l(),ot=a("p"),w3=r("Set "),ag=a("strong"),x3=r("getitem"),E3=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),sg=a("code"),k3=r("type"),I3=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),ng=a("strong"),T3=r("getitem"),N3=r("."),P3=l(),ri=a("p"),L3=r("It\u2019s also possible to use custom transforms for formatting using "),Jm=a("a"),F3=r("datasets.Dataset.with_transform()"),A3=r("."),O3=l(),ba=a("p"),j3=r("Contrary to "),Xm=a("a"),S3=r("datasets.Dataset.set_format()"),C3=r(", "),rg=a("code"),q3=r("with_format"),z3=r(" returns a new Dataset object."),V3=l(),Oe=a("div"),m(oi.$$.fragment),U3=l(),ya=a("p"),M3=r("Set "),og=a("strong"),R3=r("getitem"),B3=r(" return format using this transform. The transform is applied on-the-fly on batches when "),ig=a("strong"),H3=r("getitem"),G3=r(" is called."),W3=l(),Da=a("p"),K3=r("As "),Zm=a("a"),Y3=r("datasets.Dataset.set_format()"),J3=r(", this can be reset using "),Qm=a("a"),X3=r("datasets.Dataset.reset_format()"),Z3=r("."),Q3=l(),$a=a("p"),ek=r("Contrary to "),ep=a("a"),tk=r("datasets.Dataset.set_transform()"),ak=r(", "),lg=a("code"),sk=r("with_transform"),nk=r(" returns a new Dataset object."),rk=l(),Ms=a("div"),m(ii.$$.fragment),ok=l(),cg=a("p"),ik=r("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),lk=l(),Pt=a("div"),m(li.$$.fragment),ck=l(),dg=a("p"),dk=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),mk=l(),mg=a("p"),pk=r("Be careful when running this command that no other process is currently using other cache files."),hk=l(),je=a("div"),m(ci.$$.fragment),fk=l(),pg=a("p"),uk=r(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),gk=l(),di=a("p"),_k=r("You can specify whether the function should be batched or not with the "),hg=a("code"),vk=r("batched"),bk=r(" parameter:"),yk=l(),wa=a("ul"),fg=a("li"),Dk=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),$k=l(),ug=a("li"),wk=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),xk=l(),ee=a("li"),Ek=r("If batched is True and batch_size is "),gg=a("code"),kk=r("n"),Ik=r(" > 1, then the function takes a batch of "),_g=a("code"),Tk=r("n"),Nk=r(" examples as input and can return a batch with "),vg=a("code"),Pk=r("n"),Lk=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),bg=a("code"),Fk=r("n"),Ak=r(` examples.
A batch is a dictionary, e.g. a batch of `),yg=a("code"),Ok=r("n"),jk=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Sk=l(),Rs=a("div"),m(mi.$$.fragment),Ck=l(),Dg=a("p"),qk=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),zk=l(),Bs=a("div"),m(pi.$$.fragment),Vk=l(),$g=a("p"),Uk=r("Create a new dataset with rows selected following the list/array of indices."),Mk=l(),Lt=a("div"),m(hi.$$.fragment),Rk=l(),wg=a("p"),Bk=r("Create a new dataset sorted according to a column."),Hk=l(),xg=a("p"),Gk=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),Wk=l(),Ft=a("div"),m(fi.$$.fragment),Kk=l(),Eg=a("p"),Yk=r("Create a new Dataset where the rows are shuffled."),Jk=l(),kg=a("p"),Xk=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),Zk=l(),At=a("div"),m(ui.$$.fragment),Qk=l(),j=a("p"),e7=r("Return a dictionary ("),Ig=a("code"),t7=r("datasets.DatsetDict"),a7=r(") with two random train and test subsets ("),Tg=a("em"),s7=r("train"),n7=r(" and "),Ng=a("em"),r7=r("test"),o7=l(),Pg=a("code"),i7=r("Dataset"),l7=r(` splits).
Splits are created from the dataset according to `),Lg=a("em"),c7=r("test_size"),d7=r(", "),Fg=a("em"),m7=r("train_size"),p7=r(" and "),Ag=a("em"),h7=r("shuffle"),f7=r("."),u7=l(),gi=a("p"),g7=r("This method is similar to scikit-learn "),Og=a("em"),_7=r("train_test_split"),v7=r(" with the omission of the stratified options."),b7=l(),ie=a("div"),m(_i.$$.fragment),y7=l(),xa=a("p"),D7=r("Return the "),jg=a("em"),$7=r("index"),w7=r("-nth shard from dataset split into "),Sg=a("em"),x7=r("num_shards"),E7=r(" pieces."),k7=l(),Cg=a("p"),I7=r(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),T7=l(),vi=a("p"),N7=r(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),qg=a("em"),P7=r("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),L7=r(` will return
a dataset with the same order as the original.`),F7=l(),zg=a("p"),A7=r(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),O7=l(),Hs=a("div"),m(bi.$$.fragment),j7=l(),Vg=a("p"),S7=r(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),C7=l(),Se=a("div"),m(yi.$$.fragment),q7=l(),Ug=a("p"),z7=r(`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),V7=l(),Mg=a("p"),U7=r("Example:"),M7=l(),m(Di.$$.fragment),R7=l(),Gs=a("div"),m($i.$$.fragment),B7=l(),Ea=a("p"),H7=r("Saves a dataset to a dataset directory, or in a filesystem using either "),tp=a("a"),G7=r("S3FileSystem"),W7=r(` or
any implementation of `),Rg=a("code"),K7=r("fsspec.spec.AbstractFileSystem"),Y7=r("."),J7=l(),Ws=a("div"),m(wi.$$.fragment),X7=l(),it=a("p"),Z7=r("Loads a dataset that was previously saved using "),Bg=a("code"),Q7=r("save_to_disk"),eI=r(` from a dataset directory, or from a
filesystem using either `),ap=a("a"),tI=r("S3FileSystem"),aI=r(` or any implementation of
`),Hg=a("code"),sI=r("fsspec.spec.AbstractFileSystem"),nI=r("."),rI=l(),Ks=a("div"),m(xi.$$.fragment),oI=l(),Gg=a("p"),iI=r("Create and cache a new Dataset by flattening the indices mapping."),lI=l(),Ys=a("div"),m(Ei.$$.fragment),cI=l(),Wg=a("p"),dI=r("Exports the dataset to csv"),mI=l(),Js=a("div"),m(ki.$$.fragment),pI=l(),Ii=a("p"),hI=r("Returns the dataset as a "),Kg=a("code"),fI=r("pandas.DataFrame"),uI=r(". Can also return a generator for large datasets."),gI=l(),Xs=a("div"),m(Ti.$$.fragment),_I=l(),Yg=a("p"),vI=r("Returns the dataset as a Python dict. Can also return a generator for large datasets."),bI=l(),Zs=a("div"),m(Ni.$$.fragment),yI=l(),Jg=a("p"),DI=r("Export the dataset to JSON Lines or JSON."),$I=l(),Qs=a("div"),m(Pi.$$.fragment),wI=l(),Xg=a("p"),xI=r("Exports the dataset to parquet"),EI=l(),le=a("div"),m(Li.$$.fragment),kI=l(),ka=a("p"),II=r(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),Zg=a("code"),TI=r("device"),NI=r(" if you want to run it on GPU ("),Qg=a("code"),PI=r("device"),LI=r(` must be the GPU index).
You can find more information about Faiss here:`),FI=l(),e_=a("ul"),sp=a("li"),AI=r("For "),Fi=a("a"),OI=r("string factory"),jI=l(),t_=a("p"),SI=r("Example:"),CI=l(),m(Ai.$$.fragment),qI=l(),Ot=a("div"),m(Oi.$$.fragment),zI=l(),lt=a("p"),VI=r(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),a_=a("em"),UI=r("external_arrays"),MI=r(`.
You can specify `),s_=a("em"),RI=r("device"),BI=r(" if you want to run it on GPU ("),n_=a("em"),HI=r("device"),GI=r(` must be the GPU index).
You can find more information about Faiss here:`),WI=l(),r_=a("ul"),np=a("li"),KI=r("For "),ji=a("a"),YI=r("string factory"),JI=l(),en=a("div"),m(Si.$$.fragment),XI=l(),o_=a("p"),ZI=r("Save a FaissIndex on disk."),QI=l(),jt=a("div"),m(Ci.$$.fragment),e5=l(),i_=a("p"),t5=r("Load a FaissIndex from disk."),a5=l(),qi=a("p"),s5=r(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),l_=a("em"),n5=r(".get_index(index_name).faiss_index"),r5=r(" to make it fit your needs."),o5=l(),Ce=a("div"),m(zi.$$.fragment),i5=l(),c_=a("p"),l5=r("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),c5=l(),d_=a("p"),d5=r("Example:"),m5=l(),m(Vi.$$.fragment),p5=l(),qe=a("div"),m(Ui.$$.fragment),h5=l(),m_=a("p"),f5=r("Load an existing text index using ElasticSearch for fast retrieval."),u5=l(),p_=a("p"),g5=r("Default config is:"),_5=l(),m(Mi.$$.fragment),v5=l(),tn=a("div"),m(Ri.$$.fragment),b5=l(),h_=a("p"),y5=r("List the colindex_nameumns/identifiers of all the attached indexes."),D5=l(),an=a("div"),m(Bi.$$.fragment),$5=l(),f_=a("p"),w5=r("List the index_name/identifiers of all the attached indexes."),x5=l(),sn=a("div"),m(Hi.$$.fragment),E5=l(),u_=a("p"),k5=r("Drop the index with the specified column."),I5=l(),nn=a("div"),m(Gi.$$.fragment),T5=l(),g_=a("p"),N5=r("Find the nearest examples indices in the dataset to the query."),P5=l(),rn=a("div"),m(Wi.$$.fragment),L5=l(),__=a("p"),F5=r("Find the nearest examples indices in the dataset to the query."),A5=l(),on=a("div"),m(Ki.$$.fragment),O5=l(),v_=a("p"),j5=r("Find the nearest examples in the dataset to the query."),S5=l(),ln=a("div"),m(Yi.$$.fragment),C5=l(),b_=a("p"),q5=r("Find the nearest examples in the dataset to the query."),z5=l(),cn=a("div"),m(Ji.$$.fragment),V5=l(),rp=a("p"),op=a("a"),U5=r("datasets.DatasetInfo"),M5=r(" object containing all the metadata in the dataset."),R5=l(),dn=a("div"),m(Xi.$$.fragment),B5=l(),ip=a("p"),lp=a("a"),H5=r("datasets.NamedSplit"),G5=r(" object corresponding to a named dataset split."),W5=l(),cp=a("div"),m(Zi.$$.fragment),K5=l(),dp=a("div"),m(Qi.$$.fragment),Y5=l(),mp=a("div"),m(el.$$.fragment),J5=l(),pp=a("div"),m(tl.$$.fragment),X5=l(),hp=a("div"),m(al.$$.fragment),Z5=l(),fp=a("div"),m(sl.$$.fragment),Q5=l(),up=a("div"),m(nl.$$.fragment),e8=l(),gp=a("div"),m(rl.$$.fragment),t8=l(),_p=a("div"),m(ol.$$.fragment),a8=l(),vp=a("div"),m(il.$$.fragment),s8=l(),bp=a("div"),m(ll.$$.fragment),n8=l(),yp=a("div"),m(cl.$$.fragment),r8=l(),Dp=a("div"),m(dl.$$.fragment),o8=l(),mn=a("div"),m(ml.$$.fragment),i8=l(),y_=a("p"),l8=r("Create Dataset from CSV file(s)."),c8=l(),pn=a("div"),m(pl.$$.fragment),d8=l(),D_=a("p"),m8=r("Create Dataset from JSON or JSON Lines file(s)."),p8=l(),hn=a("div"),m(hl.$$.fragment),h8=l(),$_=a("p"),f8=r("Create Dataset from Parquet file(s)."),u8=l(),fn=a("div"),m(fl.$$.fragment),g8=l(),w_=a("p"),_8=r("Create Dataset from text file(s)."),v8=l(),St=a("div"),m(ul.$$.fragment),b8=l(),Ia=a("p"),y8=r("Prepare a dataset for the given task by casting the dataset\u2019s "),$p=a("a"),D8=r("Features"),$8=r(" to standardized column names and types as detailed in "),wp=a("a"),w8=r("datasets.tasks"),x8=r("."),E8=l(),Ta=a("p"),k8=r("Casts "),x_=a("code"),I8=r("datasets.DatasetInfo.features"),T8=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),E_=a("code"),N8=r("datasets.DatasetInfo.task_templates"),P8=r(" after casting."),L8=l(),ze=a("div"),m(gl.$$.fragment),F8=l(),_l=a("p"),A8=r("Align the dataset\u2019s label ID and label name mapping to match an input "),k_=a("code"),O8=r("label2id"),j8=r(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),S8=l(),I_=a("p"),C8=r("Example:"),q8=l(),m(vl.$$.fragment),Q2=l(),Na=a("div"),m(bl.$$.fragment),z8=l(),Pa=a("p"),V8=r("Converts a list of "),xp=a("a"),U8=r("Dataset"),M8=r(" with the same schema into a single "),Ep=a("a"),R8=r("Dataset"),B8=r("."),eD=l(),S=a("div"),m(yl.$$.fragment),H8=l(),T_=a("p"),G8=r(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),W8=l(),La=a("p"),K8=r("You can use this function on a list of "),kp=a("a"),Y8=r("Dataset"),J8=r(" objects, or on a list of "),Ip=a("a"),X8=r("IterableDataset"),Z8=r(" objects."),Q8=l(),ye=a("p"),e6=r("If "),N_=a("code"),t6=r("probabilities"),a6=r(" is "),P_=a("code"),s6=r("None"),n6=r(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),L_=a("code"),r6=r("probabilities"),o6=r(" is not "),F_=a("code"),i6=r("None"),l6=r(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),c6=l(),A_=a("p"),d6=r("The resulting dataset ends when one of the source datasets runs out of examples."),m6=l(),O_=a("p"),p6=r("Example:"),h6=l(),m(Dl.$$.fragment),tD=l(),te=a("div"),m($l.$$.fragment),f6=l(),j_=a("p"),u6=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),g6=l(),S_=a("p"),_6=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),v6=l(),C_=a("p"),b6=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),y6=l(),De=a("ul"),q_=a("li"),D6=r("cache files are always recreated"),$6=l(),z_=a("li"),w6=r("cache files are written to a temporary directory that is deleted when session closes"),x6=l(),V_=a("li"),E6=r("cache files are named using a random hash instead of the dataset fingerprint"),k6=l(),wl=a("li"),I6=r("use "),Tp=a("a"),T6=r("datasets.Dataset.save_to_disk()"),N6=r(" to save a transformed dataset or it will be deleted when session closes"),P6=l(),ct=a("li"),L6=r("caching doesn\u2019t affect "),Np=a("a"),F6=r("datasets.load_dataset()"),A6=r(`. If you want to regenerate a dataset from scratch you should use
the `),U_=a("code"),O6=r("download_mode"),j6=r(" parameter in "),Pp=a("a"),S6=r("datasets.load_dataset()"),C6=r("."),aD=l(),ae=a("div"),m(xl.$$.fragment),q6=l(),M_=a("p"),z6=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),V6=l(),R_=a("p"),U6=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),M6=l(),B_=a("p"),R6=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),B6=l(),$e=a("ul"),H_=a("li"),H6=r("cache files are always recreated"),G6=l(),G_=a("li"),W6=r("cache files are written to a temporary directory that is deleted when session closes"),K6=l(),W_=a("li"),Y6=r("cache files are named using a random hash instead of the dataset fingerprint"),J6=l(),El=a("li"),X6=r("use "),Lp=a("a"),Z6=r("datasets.Dataset.save_to_disk()"),Q6=r(" to save a transformed dataset or it will be deleted when session closes"),e9=l(),dt=a("li"),t9=r("caching doesn\u2019t affect "),Fp=a("a"),a9=r("datasets.load_dataset()"),s9=r(`. If you want to regenerate a dataset from scratch you should use
the `),K_=a("code"),n9=r("download_mode"),r9=r(" parameter in "),Ap=a("a"),o9=r("datasets.load_dataset()"),i9=r("."),sD=l(),se=a("div"),m(kl.$$.fragment),l9=l(),Y_=a("p"),c9=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),d9=l(),J_=a("p"),m9=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),p9=l(),X_=a("p"),h9=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),f9=l(),we=a("ul"),Z_=a("li"),u9=r("cache files are always recreated"),g9=l(),Q_=a("li"),_9=r("cache files are written to a temporary directory that is deleted when session closes"),v9=l(),e1=a("li"),b9=r("cache files are named using a random hash instead of the dataset fingerprint"),y9=l(),Il=a("li"),D9=r("use "),Op=a("a"),$9=r("datasets.Dataset.save_to_disk()"),w9=r(" to save a transformed dataset or it will be deleted when session closes"),x9=l(),mt=a("li"),E9=r("caching doesn\u2019t affect "),jp=a("a"),k9=r("datasets.load_dataset()"),I9=r(`. If you want to regenerate a dataset from scratch you should use
the `),t1=a("code"),T9=r("download_mode"),N9=r(" parameter in "),Sp=a("a"),P9=r("datasets.load_dataset()"),L9=r("."),nD=l(),Fa=a("h2"),un=a("a"),a1=a("span"),m(Tl.$$.fragment),F9=l(),s1=a("span"),A9=r("DatasetDict"),rD=l(),gn=a("p"),O9=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),n1=a("code"),j9=r("Dataset"),S9=r(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),oD=l(),$=a("div"),m(Nl.$$.fragment),C9=l(),r1=a("p"),q9=r("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),z9=l(),_n=a("div"),m(Pl.$$.fragment),V9=l(),o1=a("p"),U9=r("The Apache Arrow tables backing each split."),M9=l(),vn=a("div"),m(Ll.$$.fragment),R9=l(),i1=a("p"),B9=r("The cache files containing the Apache Arrow table backing each split."),H9=l(),bn=a("div"),m(Fl.$$.fragment),G9=l(),l1=a("p"),W9=r("Number of columns in each split of the dataset."),K9=l(),yn=a("div"),m(Al.$$.fragment),Y9=l(),Ol=a("p"),J9=r("Number of rows in each split of the dataset (same as "),Dn=a("a"),X9=r("datasets.Dataset."),c1=a("strong"),Z9=r("len"),Q9=r("()"),eT=r(")."),tT=l(),$n=a("div"),m(jl.$$.fragment),aT=l(),d1=a("p"),sT=r("Names of the columns in each split of the dataset."),nT=l(),wn=a("div"),m(Sl.$$.fragment),rT=l(),m1=a("p"),oT=r("Shape of each split of the dataset (number of columns, number of rows)."),iT=l(),Ct=a("div"),m(Cl.$$.fragment),lT=l(),p1=a("p"),cT=r("Return a list of the unique elements in a column for each split."),dT=l(),h1=a("p"),mT=r("This is implemented in the low-level backend and as such, very fast."),pT=l(),xn=a("div"),m(ql.$$.fragment),hT=l(),f1=a("p"),fT=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),uT=l(),En=a("div"),m(zl.$$.fragment),gT=l(),u1=a("p"),_T=r(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),vT=l(),kn=a("div"),m(Vl.$$.fragment),bT=l(),g1=a("p"),yT=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),DT=l(),qt=a("div"),m(Ul.$$.fragment),$T=l(),_1=a("p"),wT=r(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),xT=l(),v1=a("p"),ET=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),kT=l(),Ve=a("div"),m(Ml.$$.fragment),IT=l(),b1=a("p"),TT=r("Create a new Dataset where the rows are shuffled."),NT=l(),y1=a("p"),PT=r("The transformation is applied to all the datasets of the dataset dictionary."),LT=l(),D1=a("p"),FT=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),AT=l(),Ue=a("div"),m(Rl.$$.fragment),OT=l(),Bl=a("p"),jT=r("Set "),$1=a("code"),ST=r("__getitem__"),CT=r(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),qT=l(),xe=a("p"),zT=r("It is possible to call "),w1=a("code"),VT=r("map"),UT=r(" after calling "),x1=a("code"),MT=r("set_format"),RT=r(". Since "),E1=a("code"),BT=r("map"),HT=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),k1=a("code"),GT=r("map"),WT=r(" on a dataset to add a new column, then this column will be formatted:"),KT=l(),I1=a("p"),YT=r("new formatted columns = (all columns - previously unformatted columns)"),JT=l(),zt=a("div"),m(Hl.$$.fragment),XT=l(),Gl=a("p"),ZT=r("Reset "),T1=a("code"),QT=r("__getitem__"),eN=r(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),tN=l(),Cp=a("p"),aN=r("Same as "),N1=a("code"),sN=r("self.set_format()"),nN=l(),In=a("div"),m(Wl.$$.fragment),rN=l(),Aa=a("p"),oN=r("To be used in a "),P1=a("em"),iN=r("with"),lN=r(" statement. Set "),L1=a("code"),cN=r("__getitem__"),dN=r(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),mN=l(),Me=a("div"),m(Kl.$$.fragment),pN=l(),pt=a("p"),hN=r("Set "),F1=a("code"),fN=r("__getitem__"),uN=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),A1=a("code"),gN=r("type"),_N=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),O1=a("code"),vN=r("__getitem__"),bN=r(`.
The format is set for every dataset in the dataset dictionary`),yN=l(),Yl=a("p"),DN=r("It\u2019s also possible to use custom transforms for formatting using "),qp=a("a"),$N=r("datasets.Dataset.with_transform()"),wN=r("."),xN=l(),Oa=a("p"),EN=r("Contrary to "),zp=a("a"),kN=r("datasets.DatasetDict.set_format()"),IN=r(", "),j1=a("code"),TN=r("with_format"),NN=r(" returns a new DatasetDict object with new Dataset objects."),PN=l(),Re=a("div"),m(Jl.$$.fragment),LN=l(),ja=a("p"),FN=r("Set "),S1=a("code"),AN=r("__getitem__"),ON=r(" return format using this transform. The transform is applied on-the-fly on batches when "),C1=a("code"),jN=r("__getitem__"),SN=r(` is called.
The transform is set for every dataset in the dataset dictionary`),CN=l(),Sa=a("p"),qN=r("As "),Vp=a("a"),zN=r("datasets.Dataset.set_format()"),VN=r(", this can be reset using "),Up=a("a"),UN=r("datasets.Dataset.reset_format()"),MN=r("."),RN=l(),Ca=a("p"),BN=r("Contrary to "),q1=a("code"),HN=r("datasets.DatasetDict.set_transform()"),GN=r(", "),z1=a("code"),WN=r("with_transform"),KN=r(" returns a new DatasetDict object with new Dataset objects."),YN=l(),Tn=a("div"),m(Xl.$$.fragment),JN=l(),V1=a("p"),XN=r(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),ZN=l(),Vt=a("div"),m(Zl.$$.fragment),QN=l(),U1=a("p"),eP=r(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),tP=l(),ht=a("p"),aP=r("You can also remove a column using "),Mp=a("a"),sP=r("Dataset.map()"),nP=r(" with "),M1=a("em"),rP=r("feature"),oP=r(" but "),R1=a("code"),iP=r("cast_"),lP=r(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),cP=l(),Nn=a("div"),m(Ql.$$.fragment),dP=l(),B1=a("p"),mP=r("Cast column to feature for decoding."),pP=l(),Be=a("div"),m(ec.$$.fragment),hP=l(),H1=a("p"),fP=r(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),uP=l(),G1=a("p"),gP=r("The transformation is applied to all the splits of the dataset dictionary."),_P=l(),qa=a("p"),vP=r("You can also remove a column using "),Rp=a("a"),bP=r("Dataset.map()"),yP=r(" with "),W1=a("em"),DP=r("remove_columns"),$P=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),wP=l(),He=a("div"),m(tc.$$.fragment),xP=l(),K1=a("p"),EP=r(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),kP=l(),za=a("p"),IP=r("You can also rename a column using "),Bp=a("a"),TP=r("Dataset.map()"),NP=r(" with "),Y1=a("em"),PP=r("remove_columns"),LP=r(" but the present method:"),FP=l(),ac=a("ul"),J1=a("li"),AP=r("takes care of moving the original features under the new column name."),OP=l(),X1=a("li"),jP=r("doesn\u2019t copy the data to a new dataset and is thus much faster."),SP=l(),Pn=a("div"),m(sc.$$.fragment),CP=l(),Z1=a("p"),qP=r(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),zP=l(),Ln=a("div"),m(nc.$$.fragment),VP=l(),rc=a("p"),UP=r("Casts the given column as :obj:"),Q1=a("code"),MP=r("datasets.features.ClassLabel"),RP=r(" and updates the tables."),BP=l(),ce=a("div"),m(oc.$$.fragment),HP=l(),Va=a("p"),GP=r("Pushes the "),ev=a("code"),WP=r("DatasetDict"),KP=r(` to the hub.
The `),tv=a("code"),YP=r("DatasetDict"),JP=r(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),XP=l(),av=a("p"),ZP=r("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),QP=l(),sv=a("p"),eL=r("Example:"),tL=l(),m(ic.$$.fragment),aL=l(),Fn=a("div"),m(lc.$$.fragment),sL=l(),Ua=a("p"),nL=r("Saves a dataset dict to a filesystem using either "),Hp=a("a"),rL=r("S3FileSystem"),oL=r(` or
`),nv=a("code"),iL=r("fsspec.spec.AbstractFileSystem"),lL=r("."),cL=l(),An=a("div"),m(cc.$$.fragment),dL=l(),ft=a("p"),mL=r("Load a dataset that was previously saved using "),rv=a("code"),pL=r("save_to_disk"),hL=r(` from a filesystem using either
`),Gp=a("a"),fL=r("S3FileSystem"),uL=r(" or "),ov=a("code"),gL=r("fsspec.spec.AbstractFileSystem"),_L=r("."),vL=l(),On=a("div"),m(dc.$$.fragment),bL=l(),iv=a("p"),yL=r("Create DatasetDict from CSV file(s)."),DL=l(),jn=a("div"),m(mc.$$.fragment),$L=l(),lv=a("p"),wL=r("Create DatasetDict from JSON Lines file(s)."),xL=l(),Sn=a("div"),m(pc.$$.fragment),EL=l(),cv=a("p"),kL=r("Create DatasetDict from Parquet file(s)."),IL=l(),Cn=a("div"),m(hc.$$.fragment),TL=l(),dv=a("p"),NL=r("Create DatasetDict from text file(s)."),PL=l(),Ut=a("div"),m(fc.$$.fragment),LL=l(),Ma=a("p"),FL=r("Prepare a dataset for the given task by casting the dataset\u2019s "),Wp=a("a"),AL=r("Features"),OL=r(" to standardized column names and types as detailed in "),Kp=a("a"),jL=r("datasets.tasks"),SL=r("."),CL=l(),Ra=a("p"),qL=r("Casts "),mv=a("code"),zL=r("datasets.DatasetInfo.features"),VL=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),pv=a("code"),UL=r("datasets.DatasetInfo.task_templates"),ML=r(" after casting."),iD=l(),Yp=a("a"),lD=l(),Ba=a("h2"),qn=a("a"),hv=a("span"),m(uc.$$.fragment),RL=l(),fv=a("span"),BL=r("IterableDataset"),cD=l(),zn=a("p"),HL=r("The base class "),Jp=a("a"),GL=r("IterableDataset"),WL=r(" implements an iterable Dataset backed by python generators."),dD=l(),x=a("div"),m(gc.$$.fragment),KL=l(),uv=a("p"),YL=r("A Dataset backed by an iterable."),JL=l(),Vn=a("div"),m(_c.$$.fragment),XL=l(),gv=a("p"),ZL=r(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),QL=l(),Un=a("div"),m(vc.$$.fragment),eF=l(),_v=a("p"),tF=r("Cast column to feature for decoding."),aF=l(),Mn=a("div"),m(bc.$$.fragment),sF=l(),vv=a("p"),nF=r("Cast the dataset to a new set of features."),rF=l(),Xp=a("div"),m(yc.$$.fragment),oF=l(),Ge=a("div"),m(Dc.$$.fragment),iF=l(),bv=a("p"),lF=r(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),cF=l(),$c=a("p"),dF=r("You can specify whether the function should be batched or not with the "),yv=a("code"),mF=r("batched"),pF=r(" parameter:"),hF=l(),Ha=a("ul"),Dv=a("li"),fF=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),uF=l(),$v=a("li"),gF=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),_F=l(),ne=a("li"),vF=r("If batched is True and batch_size is "),wv=a("code"),bF=r("n"),yF=r(" > 1, then the function takes a batch of "),xv=a("code"),DF=r("n"),$F=r(" examples as input and can return a batch with "),Ev=a("code"),wF=r("n"),xF=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),kv=a("code"),EF=r("n"),kF=r(` examples.
A batch is a dictionary, e.g. a batch of `),Iv=a("code"),IF=r("n"),TF=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),NF=l(),Rn=a("div"),m(wc.$$.fragment),PF=l(),Tv=a("p"),LF=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),FF=l(),Bn=a("div"),m(xc.$$.fragment),AF=l(),Nv=a("p"),OF=r(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),jF=l(),de=a("div"),m(Ec.$$.fragment),SF=l(),Pv=a("p"),CF=r("Randomly shuffles the elements of this dataset."),qF=l(),Lv=a("p"),zF=r(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),VF=l(),kc=a("p"),UF=r("For instance, if your dataset contains 10,000 elements but "),Fv=a("code"),MF=r("buffer_size"),RF=r(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),BF=l(),Ga=a("p"),HF=r(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Zp=a("a"),GF=r("datasets.IterableDataset.skip()"),WF=r(" or "),Qp=a("a"),KF=r("datasets.IterableDataset.take()"),YF=r(`
then the order of the shards is kept unchanged.`),JF=l(),Hn=a("div"),m(Ic.$$.fragment),XF=l(),Tc=a("p"),ZF=r("Create a new IterableDataset that skips the first "),Av=a("code"),QF=r("n"),eA=r(" elements."),tA=l(),Gn=a("div"),m(Nc.$$.fragment),aA=l(),Pc=a("p"),sA=r("Create a new IterableDataset with only the first "),Ov=a("code"),nA=r("n"),rA=r(" elements."),oA=l(),Wn=a("div"),m(Lc.$$.fragment),iA=l(),eh=a("p"),th=a("a"),lA=r("datasets.DatasetInfo"),cA=r(" object containing all the metadata in the dataset."),dA=l(),Kn=a("div"),m(Fc.$$.fragment),mA=l(),ah=a("p"),sh=a("a"),pA=r("datasets.NamedSplit"),hA=r(" object corresponding to a named dataset split."),fA=l(),nh=a("div"),m(Ac.$$.fragment),uA=l(),rh=a("div"),m(Oc.$$.fragment),gA=l(),oh=a("div"),m(jc.$$.fragment),_A=l(),ih=a("div"),m(Sc.$$.fragment),vA=l(),lh=a("div"),m(Cc.$$.fragment),bA=l(),ch=a("div"),m(qc.$$.fragment),yA=l(),dh=a("div"),m(zc.$$.fragment),DA=l(),mh=a("div"),m(Vc.$$.fragment),$A=l(),ph=a("div"),m(Uc.$$.fragment),wA=l(),hh=a("div"),m(Mc.$$.fragment),xA=l(),fh=a("div"),m(Rc.$$.fragment),EA=l(),uh=a("div"),m(Bc.$$.fragment),kA=l(),gh=a("div"),m(Hc.$$.fragment),mD=l(),Wa=a("h2"),Yn=a("a"),jv=a("span"),m(Gc.$$.fragment),IA=l(),Sv=a("span"),TA=r("IterableDatasetDict"),pD=l(),Jn=a("p"),NA=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Cv=a("code"),PA=r("IterableDataset"),LA=r(" objects as values."),hD=l(),P=a("div"),m(Wc.$$.fragment),FA=l(),We=a("div"),m(Kc.$$.fragment),AA=l(),qv=a("p"),OA=r(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),jA=l(),Yc=a("p"),SA=r("You can specify whether the function should be batched or not with the "),zv=a("code"),CA=r("batched"),qA=r(" parameter:"),zA=l(),Ka=a("ul"),Vv=a("li"),VA=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),UA=l(),Uv=a("li"),MA=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),RA=l(),re=a("li"),BA=r("If batched is True and batch_size is "),Mv=a("code"),HA=r("n"),GA=r(" > 1, then the function takes a batch of "),Rv=a("code"),WA=r("n"),KA=r(" examples as input and can return a batch with "),Bv=a("code"),YA=r("n"),JA=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Hv=a("code"),XA=r("n"),ZA=r(` examples.
A batch is a dictionary, e.g. a batch of `),Gv=a("code"),QA=r("n"),eO=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),tO=l(),Xn=a("div"),m(Jc.$$.fragment),aO=l(),Wv=a("p"),sO=r(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),nO=l(),me=a("div"),m(Xc.$$.fragment),rO=l(),Kv=a("p"),oO=r(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),iO=l(),Yv=a("p"),lO=r(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),cO=l(),Zc=a("p"),dO=r("For instance, if your dataset contains 10,000 elements but "),Jv=a("code"),mO=r("buffer_size"),pO=r(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),hO=l(),Ya=a("p"),fO=r(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),_h=a("a"),uO=r("datasets.IterableDataset.skip()"),gO=r(" or "),vh=a("a"),_O=r("datasets.IterableDataset.take()"),vO=r(`
then the order of the shards is kept unchanged.`),bO=l(),Zn=a("div"),m(Qc.$$.fragment),yO=l(),Xv=a("p"),DO=r(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),$O=l(),Qn=a("div"),m(ed.$$.fragment),wO=l(),Zv=a("p"),xO=r(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),EO=l(),er=a("div"),m(td.$$.fragment),kO=l(),Qv=a("p"),IO=r(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),TO=l(),tr=a("div"),m(ad.$$.fragment),NO=l(),eb=a("p"),PO=r(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),LO=l(),ar=a("div"),m(sd.$$.fragment),FO=l(),tb=a("p"),AO=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),OO=l(),sr=a("div"),m(nd.$$.fragment),jO=l(),ab=a("p"),SO=r(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),fD=l(),Ja=a("h2"),nr=a("a"),sb=a("span"),m(rd.$$.fragment),CO=l(),nb=a("span"),qO=r("Features"),uD=l(),T=a("div"),m(od.$$.fragment),zO=l(),rb=a("p"),VO=r("A special dictionary that defines the internal structure of a dataset."),UO=l(),id=a("p"),MO=r("Instantiated with a dictionary of type "),ob=a("code"),RO=r("dict[str, FieldType]"),BO=r(`, where keys are the desired column names,
and values are the type of that column.`),HO=l(),bh=a("p"),ib=a("code"),GO=r("FieldType"),WO=r(" can be one of the following:"),KO=l(),C=a("ul"),lb=a("li"),Mt=a("p"),YO=r("a "),yh=a("a"),JO=r("datasets.Value"),XO=r(" feature specifies a single typed value, e.g. "),cb=a("code"),ZO=r("int64"),QO=r(" or "),db=a("code"),ej=r("string"),tj=l(),mb=a("li"),ld=a("p"),aj=r("a "),Dh=a("a"),sj=r("datasets.ClassLabel"),nj=r(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),rj=l(),pb=a("li"),cd=a("p"),oj=r("a python "),hb=a("code"),ij=r("dict"),lj=r(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),cj=l(),dd=a("li"),Ee=a("p"),dj=r("a python "),fb=a("code"),mj=r("list"),pj=r(" or a "),$h=a("a"),hj=r("datasets.Sequence"),fj=r(` specifies that the field contains a list of objects. The python
`),ub=a("code"),uj=r("list"),gj=r(" or "),wh=a("a"),_j=r("datasets.Sequence"),vj=r(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),bj=l(),m(rr.$$.fragment),yj=l(),gb=a("li"),ke=a("p"),Dj=r("a "),xh=a("a"),$j=r("Array2D"),wj=r(", "),Eh=a("a"),xj=r("Array3D"),Ej=r(", "),kh=a("a"),kj=r("Array4D"),Ij=r(" or "),Ih=a("a"),Tj=r("Array5D"),Nj=r(" feature for multidimensional arrays"),Pj=l(),_b=a("li"),md=a("p"),Lj=r("an "),Th=a("a"),Fj=r("Audio"),Aj=r(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),Oj=l(),vb=a("li"),ut=a("p"),jj=r("an "),Nh=a("a"),Sj=r("Image"),Cj=r(" feature to store the absolute path to an image file, an "),bb=a("code"),qj=r("np.ndarray"),zj=r(" object, a "),yb=a("code"),Vj=r("PIL.Image.Image"),Uj=r(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),Mj=l(),Db=a("li"),or=a("p"),Ph=a("a"),Rj=r("datasets.Translation"),Bj=r(" and "),Lh=a("a"),Hj=r("datasets.TranslationVariableLanguages"),Gj=r(", the two features specific to Machine Translation"),Wj=l(),ir=a("div"),m(pd.$$.fragment),Kj=l(),$b=a("p"),Yj=r("Make a deep copy of Features."),Jj=l(),lr=a("div"),m(hd.$$.fragment),Xj=l(),wb=a("p"),Zj=r("Decode batch with custom feature decoding."),Qj=l(),cr=a("div"),m(fd.$$.fragment),eS=l(),xb=a("p"),tS=r("Decode column with custom feature decoding."),aS=l(),dr=a("div"),m(ud.$$.fragment),sS=l(),Eb=a("p"),nS=r("Decode example with custom feature decoding."),rS=l(),mr=a("div"),m(gd.$$.fragment),oS=l(),kb=a("p"),iS=r("Encode batch into a format for Arrow."),lS=l(),pr=a("div"),m(_d.$$.fragment),cS=l(),Ib=a("p"),dS=r("Encode example into a format for Arrow."),mS=l(),Rt=a("div"),m(vd.$$.fragment),pS=l(),Tb=a("p"),hS=r(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),fS=l(),Nb=a("p"),uS=r(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),gS=l(),hr=a("div"),m(bd.$$.fragment),_S=l(),Pb=a("p"),vS=r(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),bS=l(),Y=a("div"),m(yd.$$.fragment),yS=l(),Lb=a("p"),DS=r("Construct Features from dict."),$S=l(),Fb=a("p"),wS=r(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),xS=l(),gt=a("p"),ES=r(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Fh=a("a"),kS=r("DatasetInfo"),IS=r(` that was dumped to a JSON object. This acts as an analogue to
`),Ah=a("a"),TS=r("Features.from_arrow_schema()"),NS=r(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Oh=a("a"),PS=r("Value"),LS=r(" automatically performs."),FS=l(),Ab=a("p"),AS=r("Example:"),OS=l(),m(Dd.$$.fragment),jS=l(),pe=a("div"),m($d.$$.fragment),SS=l(),Ob=a("p"),CS=r("Reorder Features fields to match the field order of other Features."),qS=l(),jb=a("p"),zS=r(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),VS=l(),Sb=a("p"),US=r("Example:"),MS=l(),m(wd.$$.fragment),gD=l(),Xa=a("div"),m(xd.$$.fragment),RS=l(),Cb=a("p"),BS=r(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),_D=l(),B=a("div"),m(Ed.$$.fragment),HS=l(),qb=a("p"),GS=r("Feature type for integer class labels."),WS=l(),kd=a("p"),KS=r("There are 3 ways to define a "),zb=a("em"),YS=r("ClassLabel"),JS=r(", which correspond to the 3 arguments:"),XS=l(),Za=a("ul"),jh=a("li"),Vb=a("em"),ZS=r("num_classes"),QS=r(": Create 0 to (num_classes-1) labels."),eC=l(),Sh=a("li"),Ub=a("em"),tC=r("names"),aC=r(": List of label strings."),sC=l(),Ch=a("li"),Mb=a("em"),nC=r("names_file"),rC=r(": File containing the list of labels."),oC=l(),fr=a("div"),m(Id.$$.fragment),iC=l(),Rb=a("p"),lC=r("Conversion integer => class name string."),cC=l(),ur=a("div"),m(Td.$$.fragment),dC=l(),Bb=a("p"),mC=r("Conversion class name string => integer."),vD=l(),_t=a("div"),m(Nd.$$.fragment),pC=l(),Hb=a("p"),hC=r("The Value dtypes are as follows:"),fC=l(),Gb=a("p"),uC=r(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),bD=l(),q=a("div"),m(Pd.$$.fragment),gC=l(),qh=a("p"),Wb=a("code"),_C=r("FeatureConnector"),vC=r(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),bC=l(),Kb=a("p"),yC=r(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),DC=l(),Ld=a("p"),$C=r("Output: A dictionary mapping string language codes to translations as "),Yb=a("code"),wC=r("Text"),xC=r(`
features.`),EC=l(),Jb=a("p"),kC=r("Example:"),IC=l(),m(Fd.$$.fragment),TC=l(),gr=a("div"),m(Ad.$$.fragment),NC=l(),Xb=a("p"),PC=r("Flatten the Translation feature into a dictionary."),yD=l(),z=a("div"),m(Od.$$.fragment),LC=l(),zh=a("p"),Zb=a("code"),FC=r("FeatureConnector"),AC=r(` for translations with variable languages per example.
Here for compatiblity with tfds.`),OC=l(),Qb=a("p"),jC=r(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),SC=l(),ey=a("p"),CC=r(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),qC=l(),ty=a("p"),zC=r("Example:"),VC=l(),m(jd.$$.fragment),UC=l(),_r=a("div"),m(Sd.$$.fragment),MC=l(),ay=a("p"),RC=r("Flatten the TranslationVariableLanguages feature into a dictionary."),DD=l(),Cd=a("div"),m(qd.$$.fragment),$D=l(),zd=a("div"),m(Vd.$$.fragment),wD=l(),Ud=a("div"),m(Md.$$.fragment),xD=l(),Rd=a("div"),m(Bd.$$.fragment),ED=l(),L=a("div"),m(Hd.$$.fragment),BC=l(),sy=a("p"),HC=r("Audio Feature to extract audio data from an audio file."),GC=l(),ny=a("p"),WC=r("Input: The Audio feature accepts as input:"),KC=l(),Qa=a("ul"),ry=a("li"),Gd=a("p"),YC=r("A "),oy=a("code"),JC=r("str"),XC=r(": Absolute path to the audio file (i.e. random access is allowed)."),ZC=l(),es=a("li"),Wd=a("p"),QC=r("A "),iy=a("code"),eq=r("dict"),tq=r(" with the keys:"),aq=l(),Kd=a("ul"),ly=a("li"),sq=r("path: String with relative path of the audio file to the archive file."),nq=l(),cy=a("li"),rq=r("bytes: Bytes content of the audio file."),oq=l(),dy=a("p"),iq=r("This is useful for archived files with sequential access."),lq=l(),ts=a("li"),Yd=a("p"),cq=r("A "),my=a("code"),dq=r("dict"),mq=r(" with the keys:"),pq=l(),as=a("ul"),py=a("li"),hq=r("path: String with relative path of the audio file to the archive file."),fq=l(),hy=a("li"),uq=r("array: Array containing the audio sample"),gq=l(),fy=a("li"),_q=r("sampling_rate: Integer corresponding to the samping rate of the audio sample."),vq=l(),uy=a("p"),bq=r("This is useful for archived files with sequential access."),yq=l(),Bt=a("div"),m(Jd.$$.fragment),Dq=l(),gy=a("p"),$q=r(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),wq=l(),vt=a("ul"),_y=a("li"),xq=r("pa.string() - it must contain the \u201Cpath\u201D data"),Eq=l(),vy=a("li"),kq=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),Iq=l(),by=a("li"),Tq=r("pa.struct({\u201Cpath\u201D: pa.string()})"),Nq=l(),yy=a("li"),Pq=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Lq=l(),vr=a("div"),m(Xd.$$.fragment),Fq=l(),Dy=a("p"),Aq=r("Decode example audio file into audio data."),Oq=l(),br=a("div"),m(Zd.$$.fragment),jq=l(),$y=a("p"),Sq=r("Embed audio files into the Arrow array."),Cq=l(),yr=a("div"),m(Qd.$$.fragment),qq=l(),wy=a("p"),zq=r("Encode example into a format for Arrow."),Vq=l(),Dr=a("div"),m(em.$$.fragment),Uq=l(),xy=a("p"),Mq=r("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),kD=l(),F=a("div"),m(tm.$$.fragment),Rq=l(),Ey=a("p"),Bq=r("Image feature to read image data from an image file."),Hq=l(),ky=a("p"),Gq=r("Input: The Image feature accepts as input:"),Wq=l(),bt=a("ul"),Iy=a("li"),am=a("p"),Kq=r("A "),Ty=a("code"),Yq=r("str"),Jq=r(": Absolute path to the image file (i.e. random access is allowed)."),Xq=l(),ss=a("li"),sm=a("p"),Zq=r("A "),Ny=a("code"),Qq=r("dict"),ez=r(" with the keys:"),tz=l(),nm=a("ul"),Py=a("li"),az=r("path: String with relative path of the image file to the archive file."),sz=l(),Ly=a("li"),nz=r("bytes: Bytes of the image file."),rz=l(),Fy=a("p"),oz=r("This is useful for archived files with sequential access."),iz=l(),Ay=a("li"),rm=a("p"),lz=r("An "),Oy=a("code"),cz=r("np.ndarray"),dz=r(": NumPy array representing an image."),mz=l(),jy=a("li"),om=a("p"),pz=r("A "),Sy=a("code"),hz=r("PIL.Image.Image"),fz=r(": PIL image object."),uz=l(),Ht=a("div"),m(im.$$.fragment),gz=l(),Cy=a("p"),_z=r(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),vz=l(),Ie=a("ul"),qy=a("li"),bz=r("pa.string() - it must contain the \u201Cpath\u201D data"),yz=l(),zy=a("li"),Dz=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),$z=l(),Vy=a("li"),wz=r("pa.struct({\u201Cpath\u201D: pa.string()})"),xz=l(),Uy=a("li"),Ez=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),kz=l(),My=a("li"),Iz=r("pa.list(*) - it must contain the image array data"),Tz=l(),$r=a("div"),m(lm.$$.fragment),Nz=l(),Ry=a("p"),Pz=r("Decode example image file into image data."),Lz=l(),wr=a("div"),m(cm.$$.fragment),Fz=l(),By=a("p"),Az=r("Embed image files into the Arrow array."),Oz=l(),xr=a("div"),m(dm.$$.fragment),jz=l(),Hy=a("p"),Sz=r("Encode example into a format for Arrow."),Cz=l(),Er=a("div"),m(mm.$$.fragment),qz=l(),Gy=a("p"),zz=r("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),ID=l(),ns=a("h2"),kr=a("a"),Wy=a("span"),m(pm.$$.fragment),Vz=l(),Ky=a("span"),Uz=r("MetricInfo"),TD=l(),H=a("div"),m(hm.$$.fragment),Mz=l(),Yy=a("p"),Rz=r("Information about a metric."),Bz=l(),Vh=a("p"),Jy=a("code"),Hz=r("MetricInfo"),Gz=r(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),Wz=l(),Xy=a("p"),Kz=r("Note: Not all fields are known on construction and may be updated later."),Yz=l(),Ir=a("div"),m(fm.$$.fragment),Jz=l(),um=a("p"),Xz=r("Create MetricInfo from the JSON file in "),Zy=a("code"),Zz=r("metric_info_dir"),Qz=r("."),eV=l(),Tr=a("div"),m(gm.$$.fragment),tV=l(),rs=a("p"),aV=r("Write "),Qy=a("code"),sV=r("MetricInfo"),nV=r(" as JSON to "),e2=a("code"),rV=r("metric_info_dir"),oV=r(`.
Also save the license separately in LICENCE.`),ND=l(),os=a("h2"),Nr=a("a"),t2=a("span"),m(_m.$$.fragment),iV=l(),a2=a("span"),lV=r("Metric"),PD=l(),Gt=a("p"),cV=r("The base class "),s2=a("code"),dV=r("Metric"),mV=r(" implements a Metric backed by one or several "),Uh=a("a"),pV=r("Dataset"),hV=r("."),LD=l(),G=a("div"),m(vm.$$.fragment),fV=l(),n2=a("p"),uV=r("A Metric is the base class and common API for all metrics."),gV=l(),Pr=a("div"),m(bm.$$.fragment),_V=l(),r2=a("p"),vV=r("Add one prediction and reference for the metric\u2019s stack."),bV=l(),Lr=a("div"),m(ym.$$.fragment),yV=l(),o2=a("p"),DV=r("Add a batch of predictions and references for the metric\u2019s stack."),$V=l(),Wt=a("div"),m(Dm.$$.fragment),wV=l(),i2=a("p"),xV=r("Compute the metrics."),EV=l(),l2=a("p"),kV=r("Usage of positional arguments is not allowed to prevent mistakes."),IV=l(),Fr=a("div"),m($m.$$.fragment),TV=l(),c2=a("p"),NV=r("Downloads and prepares dataset for reading."),FD=l(),is=a("h2"),Ar=a("a"),d2=a("span"),m(wm.$$.fragment),PV=l(),m2=a("span"),LV=r("Filesystems"),AD=l(),k=a("div"),m(xm.$$.fragment),FV=l(),p2=a("p"),AV=r("Access S3 as if it were a file system."),OV=l(),h2=a("p"),jV=r(`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),SV=l(),yt=a("p"),CV=r("Provide credentials either explicitly ("),f2=a("code"),qV=r("key="),zV=r(", "),u2=a("code"),VV=r("secret="),UV=r(`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),g2=a("code"),MV=r("anon=True"),RV=r("."),BV=l(),_2=a("p"),HV=r("The following parameters are passed on to fsspec:"),GV=l(),v2=a("p"),WV=r(`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),KV=l(),b2=a("p"),YV=r("."),JV=l(),Ke=a("p"),y2=a("code"),XV=r("datasets.filesystems.S3FileSystem"),ZV=r(" is a subclass of s3fs.S3FileSystem]("),Em=a("a"),QV=r("https://s3fs.readthedocs.io/en/latest/api.html"),eU=r(`), which is a known
implementation of `),D2=a("code"),tU=r("fsspec"),aU=r(". Filesystem Spec "),km=a("a"),sU=r("FSSPEC"),nU=r(` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),rU=l(),$2=a("p"),oU=r("Examples:"),iU=l(),w2=a("p"),lU=r("Listing files from public s3 bucket."),cU=l(),m(Im.$$.fragment),dU=l(),ls=a("p"),mU=r("Listing files from private s3 bucket using "),x2=a("code"),pU=r("aws_access_key_id"),hU=r(" and "),E2=a("code"),fU=r("aws_secret_access_key"),uU=r("."),gU=l(),m(Tm.$$.fragment),_U=l(),Dt=a("p"),vU=r("Using "),k2=a("code"),bU=r("S3Filesystem"),yU=r(" with "),I2=a("code"),DU=r("botocore.session.Session"),$U=r(" and custom "),T2=a("code"),wU=r("aws_profile"),xU=r("."),EU=l(),m(Nm.$$.fragment),kU=l(),cs=a("p"),IU=r("Loading dataset from s3 using "),N2=a("code"),TU=r("S3Filesystem"),NU=r(" and "),P2=a("code"),PU=r("load_from_disk()"),LU=r("."),FU=l(),m(Pm.$$.fragment),AU=l(),L2=a("p"),OU=r("Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),jU=l(),m(Lm.$$.fragment),SU=l(),Or=a("h2"),jr=a("a"),F2=a("span"),m(Fm.$$.fragment),CU=l(),A2=a("span"),qU=r("Parameters"),zU=l(),V=a("p"),VU=r(`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),O2=a("code"),UU=r("use_ssl"),MU=r(" is also set in "),j2=a("code"),RU=r("client_kwargs"),BU=r(`,
the value set in `),S2=a("code"),HU=r("client_kwargs"),GU=r(` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),C2=a("code"),WU=r("open()"),KU=r(`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),q2=a("code"),YU=r("S3File.open"),JU=r(`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),z2=a("code"),XU=r("open()"),ZU=r(`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),V2=a("code"),QU=r("botocore.client.Config"),eM=r(`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),OD=l(),ds=a("div"),m(Am.$$.fragment),tM=l(),ms=a("p"),aM=r("preprocesses "),U2=a("em"),sM=r("dataset_path"),nM=r(" and removes remote filesystem (e.g. removing "),M2=a("code"),rM=r("s3://"),oM=r(")"),jD=l(),ps=a("div"),m(Om.$$.fragment),iM=l(),R2=a("p"),lM=r("Validates if filesystem has remote protocol."),SD=l(),hs=a("h2"),Sr=a("a"),B2=a("span"),m(jm.$$.fragment),cM=l(),H2=a("span"),dM=r("Fingerprint"),CD=l(),fs=a("div"),m(Sm.$$.fragment),mM=l(),G2=a("p"),pM=r("Hasher that accepts python objects as inputs."),this.h()},l(i){const y=jZ('[data-svelte="svelte-1phssyn"]',document.head);A=s(y,"META",{name:!0,content:!0}),y.forEach(t),_s=c(i),W=s(i,"H1",{class:!0});var Cm=n(W);Te=s(Cm,"A",{id:!0,class:!0,href:!0});var NM=n(Te);ha=s(NM,"SPAN",{});var PM=n(ha);p(ge.$$.fragment,PM),PM.forEach(t),NM.forEach(t),bo=c(Cm),fa=s(Cm,"SPAN",{});var LM=n(fa);$t=o(LM,"Main classes"),LM.forEach(t),Cm.forEach(t),vs=c(i),_e=s(i,"H2",{class:!0});var zD=n(_e);oe=s(zD,"A",{id:!0,class:!0,href:!0});var FM=n(oe);K=s(FM,"SPAN",{});var AM=n(K);p(wt.$$.fragment,AM),AM.forEach(t),FM.forEach(t),zm=c(zD),bs=s(zD,"SPAN",{});var OM=n(bs);J0=o(OM,"DatasetInfo"),OM.forEach(t),zD.forEach(t),Y2=c(i),R=s(i,"DIV",{class:!0});var Ye=n(R);p(yo.$$.fragment,Ye),X0=c(Ye),Qf=s(Ye,"P",{});var jM=n(Qf);Z0=o(jM,"Information about a dataset."),jM.forEach(t),Q0=c(Ye),Vm=s(Ye,"P",{});var hM=n(Vm);eu=s(hM,"EM",{});var SM=n(eu);ex=o(SM,"DatasetInfo"),SM.forEach(t),tx=o(hM,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),hM.forEach(t),ax=c(Ye),tu=s(Ye,"P",{});var CM=n(tu);sx=o(CM,"Note: Not all fields are known on construction and may be updated later."),CM.forEach(t),nx=c(Ye),Ne=s(Ye,"DIV",{class:!0});var Cr=n(Ne);p(Do.$$.fragment,Cr),rx=c(Cr),$o=s(Cr,"P",{});var VD=n($o);ox=o(VD,"Create DatasetInfo from the JSON file in "),au=s(VD,"CODE",{});var qM=n(au);ix=o(qM,"dataset_info_dir"),qM.forEach(t),lx=o(VD,"."),VD.forEach(t),cx=c(Cr),su=s(Cr,"P",{});var zM=n(su);dx=o(zM,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),zM.forEach(t),mx=c(Cr),nu=s(Cr,"P",{});var VM=n(nu);px=o(VM,"This will overwrite all previous metadata."),VM.forEach(t),Cr.forEach(t),hx=c(Ye),ys=s(Ye,"DIV",{class:!0});var UD=n(ys);p(wo.$$.fragment,UD),fx=c(UD),ua=s(UD,"P",{});var Mh=n(ua);ux=o(Mh,"Write "),ru=s(Mh,"CODE",{});var UM=n(ru);gx=o(UM,"DatasetInfo"),UM.forEach(t),_x=o(Mh," and license (if present) as JSON files to "),ou=s(Mh,"CODE",{});var MM=n(ou);vx=o(MM,"dataset_info_dir"),MM.forEach(t),bx=o(Mh,"."),Mh.forEach(t),UD.forEach(t),Ye.forEach(t),J2=c(i),ga=s(i,"H2",{class:!0});var MD=n(ga);Ds=s(MD,"A",{id:!0,class:!0,href:!0});var RM=n(Ds);iu=s(RM,"SPAN",{});var BM=n(iu);p(xo.$$.fragment,BM),BM.forEach(t),RM.forEach(t),yx=c(MD),lu=s(MD,"SPAN",{});var HM=n(lu);Dx=o(HM,"Dataset"),HM.forEach(t),MD.forEach(t),X2=c(i),$s=s(i,"P",{});var RD=n($s);$x=o(RD,"The base class "),Um=s(RD,"A",{href:!0});var GM=n(Um);wx=o(GM,"Dataset"),GM.forEach(t),xx=o(RD," implements a Dataset backed by an Apache Arrow table."),RD.forEach(t),Z2=c(i),v=s(i,"DIV",{class:!0});var b=n(v);p(Eo.$$.fragment,b),Ex=c(b),cu=s(b,"P",{});var WM=n(cu);kx=o(WM,"A Dataset backed by an Arrow table."),WM.forEach(t),Ix=c(b),xt=s(b,"DIV",{class:!0});var Rh=n(xt);p(ko.$$.fragment,Rh),Tx=c(Rh),du=s(Rh,"P",{});var KM=n(du);Nx=o(KM,"Add column to Dataset."),KM.forEach(t),Px=c(Rh),mu=s(Rh,"P",{});var YM=n(mu);pu=s(YM,"EM",{});var JM=n(pu);Lx=o(JM,"New in version 1.7."),JM.forEach(t),YM.forEach(t),Rh.forEach(t),Fx=c(b),Et=s(b,"DIV",{class:!0});var Bh=n(Et);p(Io.$$.fragment,Bh),Ax=c(Bh),hu=s(Bh,"P",{});var XM=n(hu);Ox=o(XM,"Add item to Dataset."),XM.forEach(t),jx=c(Bh),fu=s(Bh,"P",{});var ZM=n(fu);uu=s(ZM,"EM",{});var QM=n(uu);Sx=o(QM,"New in version 1.7."),QM.forEach(t),ZM.forEach(t),Bh.forEach(t),Cx=c(b),ws=s(b,"DIV",{class:!0});var BD=n(ws);p(To.$$.fragment,BD),qx=c(BD),gu=s(BD,"P",{});var eR=n(gu);zx=o(eR,"Instantiate a Dataset backed by an Arrow table at filename."),eR.forEach(t),BD.forEach(t),Vx=c(b),xs=s(b,"DIV",{class:!0});var HD=n(xs);p(No.$$.fragment,HD),Ux=c(HD),_u=s(HD,"P",{});var tR=n(_u);Mx=o(tR,"Instantiate a Dataset backed by an Arrow buffer."),tR.forEach(t),HD.forEach(t),Rx=c(b),Pe=s(b,"DIV",{class:!0});var qr=n(Pe);p(Po.$$.fragment,qr),Bx=c(qr),nt=s(qr,"P",{});var zr=n(nt);Hx=o(zr,"Convert "),vu=s(zr,"CODE",{});var aR=n(vu);Gx=o(aR,"pandas.DataFrame"),aR.forEach(t),Wx=o(zr," to a "),bu=s(zr,"CODE",{});var sR=n(bu);Kx=o(sR,"pyarrow.Table"),sR.forEach(t),Yx=o(zr," to create a "),Mm=s(zr,"A",{href:!0});var nR=n(Mm);Jx=o(nR,"Dataset"),nR.forEach(t),Xx=o(zr,"."),zr.forEach(t),Zx=c(qr),Lo=s(qr,"P",{});var GD=n(Lo);Qx=o(GD,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),yu=s(GD,"EM",{});var rR=n(yu);e4=o(rR,"object"),rR.forEach(t),t4=o(GD,", we need to guess the datatype by looking at the Python objects in this Series."),GD.forEach(t),a4=c(qr),Fo=s(qr,"P",{});var WD=n(Fo);s4=o(WD,"Be aware that Series of the "),Du=s(WD,"EM",{});var oR=n(Du);n4=o(oR,"object"),oR.forEach(t),r4=o(WD,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),WD.forEach(t),qr.forEach(t),o4=c(b),Es=s(b,"DIV",{class:!0});var KD=n(Es);p(Ao.$$.fragment,KD),i4=c(KD),rt=s(KD,"P",{});var Vr=n(rt);l4=o(Vr,"Convert "),$u=s(Vr,"CODE",{});var iR=n($u);c4=o(iR,"dict"),iR.forEach(t),d4=o(Vr," to a "),wu=s(Vr,"CODE",{});var lR=n(wu);m4=o(lR,"pyarrow.Table"),lR.forEach(t),p4=o(Vr," to create a "),Rm=s(Vr,"A",{href:!0});var cR=n(Rm);h4=o(cR,"Dataset"),cR.forEach(t),f4=o(Vr,"."),Vr.forEach(t),KD.forEach(t),u4=c(b),ks=s(b,"DIV",{class:!0});var YD=n(ks);p(Oo.$$.fragment,YD),g4=c(YD),xu=s(YD,"P",{});var dR=n(xu);_4=o(dR,"The Apache Arrow table backing the dataset."),dR.forEach(t),YD.forEach(t),v4=c(b),Is=s(b,"DIV",{class:!0});var JD=n(Is);p(jo.$$.fragment,JD),b4=c(JD),Eu=s(JD,"P",{});var mR=n(Eu);y4=o(mR,"The cache files containing the Apache Arrow table backing the dataset."),mR.forEach(t),JD.forEach(t),D4=c(b),Ts=s(b,"DIV",{class:!0});var XD=n(Ts);p(So.$$.fragment,XD),$4=c(XD),ku=s(XD,"P",{});var pR=n(ku);w4=o(pR,"Number of columns in the dataset."),pR.forEach(t),XD.forEach(t),x4=c(b),Ns=s(b,"DIV",{class:!0});var ZD=n(Ns);p(Co.$$.fragment,ZD),E4=c(ZD),qo=s(ZD,"P",{});var QD=n(qo);k4=o(QD,"Number of rows in the dataset (same as "),Ps=s(QD,"A",{href:!0});var e$=n(Ps);I4=o(e$,"Dataset."),Iu=s(e$,"STRONG",{});var hR=n(Iu);T4=o(hR,"len"),hR.forEach(t),N4=o(e$,"()"),e$.forEach(t),P4=o(QD,")."),QD.forEach(t),ZD.forEach(t),L4=c(b),Ls=s(b,"DIV",{class:!0});var t$=n(Ls);p(zo.$$.fragment,t$),F4=c(t$),Tu=s(t$,"P",{});var fR=n(Tu);A4=o(fR,"Names of the columns in the dataset."),fR.forEach(t),t$.forEach(t),O4=c(b),Fs=s(b,"DIV",{class:!0});var a$=n(Fs);p(Vo.$$.fragment,a$),j4=c(a$),Nu=s(a$,"P",{});var uR=n(Nu);S4=o(uR,"Shape of the dataset (number of columns, number of rows)."),uR.forEach(t),a$.forEach(t),C4=c(b),kt=s(b,"DIV",{class:!0});var Hh=n(kt);p(Uo.$$.fragment,Hh),q4=c(Hh),Pu=s(Hh,"P",{});var gR=n(Pu);z4=o(gR,"Return a list of the unique elements in a column."),gR.forEach(t),V4=c(Hh),Lu=s(Hh,"P",{});var _R=n(Lu);U4=o(_R,"This is implemented in the low-level backend and as such, very fast."),_R.forEach(t),Hh.forEach(t),M4=c(b),As=s(b,"DIV",{class:!0});var s$=n(As);p(Mo.$$.fragment,s$),R4=c(s$),Fu=s(s$,"P",{});var vR=n(Fu);B4=o(vR,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),vR.forEach(t),s$.forEach(t),H4=c(b),Os=s(b,"DIV",{class:!0});var n$=n(Os);p(Ro.$$.fragment,n$),G4=c(n$),Au=s(n$,"P",{});var bR=n(Au);W4=o(bR,"Cast the dataset to a new set of features."),bR.forEach(t),n$.forEach(t),K4=c(b),js=s(b,"DIV",{class:!0});var r$=n(js);p(Bo.$$.fragment,r$),Y4=c(r$),Ou=s(r$,"P",{});var yR=n(Ou);J4=o(yR,"Cast column to feature for decoding."),yR.forEach(t),r$.forEach(t),X4=c(b),It=s(b,"DIV",{class:!0});var Gh=n(It);p(Ho.$$.fragment,Gh),Z4=c(Gh),ju=s(Gh,"P",{});var DR=n(ju);Q4=o(DR,"Remove one or several column(s) in the dataset and the features associated to them."),DR.forEach(t),eE=c(Gh),_a=s(Gh,"P",{});var Wh=n(_a);tE=o(Wh,"You can also remove a column using "),Bm=s(Wh,"A",{href:!0});var $R=n(Bm);aE=o($R,"Dataset.map()"),$R.forEach(t),sE=o(Wh," with "),Su=s(Wh,"EM",{});var wR=n(Su);nE=o(wR,"remove_columns"),wR.forEach(t),rE=o(Wh,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Wh.forEach(t),Gh.forEach(t),oE=c(b),Ss=s(b,"DIV",{class:!0});var o$=n(Ss);p(Go.$$.fragment,o$),iE=c(o$),Cu=s(o$,"P",{});var xR=n(Cu);lE=o(xR,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),xR.forEach(t),o$.forEach(t),cE=c(b),Cs=s(b,"DIV",{class:!0});var i$=n(Cs);p(Wo.$$.fragment,i$),dE=c(i$),qu=s(i$,"P",{});var ER=n(qu);mE=o(ER,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),ER.forEach(t),i$.forEach(t),pE=c(b),qs=s(b,"DIV",{class:!0});var l$=n(qs);p(Ko.$$.fragment,l$),hE=c(l$),Yo=s(l$,"P",{});var c$=n(Yo);fE=o(c$,"Casts the given column as :obj:"),zu=s(c$,"CODE",{});var kR=n(zu);uE=o(kR,"datasets.features.ClassLabel"),kR.forEach(t),gE=o(c$," and updates the table."),c$.forEach(t),l$.forEach(t),_E=c(b),zs=s(b,"DIV",{class:!0});var d$=n(zs);p(Jo.$$.fragment,d$),vE=c(d$),Vu=s(d$,"P",{});var IR=n(Vu);bE=o(IR,"Number of rows in the dataset."),IR.forEach(t),d$.forEach(t),yE=c(b),Tt=s(b,"DIV",{class:!0});var Kh=n(Tt);p(Xo.$$.fragment,Kh),DE=c(Kh),Uu=s(Kh,"P",{});var TR=n(Uu);$E=o(TR,"Iterate through the examples."),TR.forEach(t),wE=c(Kh),Zo=s(Kh,"P",{});var m$=n(Zo);xE=o(m$,"If a formatting is set with "),Hm=s(m$,"A",{href:!0});var NR=n(Hm);EE=o(NR,"Dataset.set_format()"),NR.forEach(t),kE=o(m$,` rows will be returned with the
selected format.`),m$.forEach(t),Kh.forEach(t),IE=c(b),Vs=s(b,"DIV",{class:!0});var p$=n(Vs);p(Qo.$$.fragment,p$),TE=c(p$),va=s(p$,"P",{});var Yh=n(va);NE=o(Yh,"To be used in a "),Mu=s(Yh,"CODE",{});var PR=n(Mu);PE=o(PR,"with"),PR.forEach(t),LE=o(Yh," statement. Set "),Ru=s(Yh,"CODE",{});var LR=n(Ru);FE=o(LR,"__getitem__"),LR.forEach(t),AE=o(Yh," return format (type and columns)."),Yh.forEach(t),p$.forEach(t),OE=c(b),Le=s(b,"DIV",{class:!0});var Ur=n(Le);p(ei.$$.fragment,Ur),jE=c(Ur),ve=s(Ur,"P",{});var Kt=n(ve);SE=o(Kt,"Set "),Bu=s(Kt,"STRONG",{});var FR=n(Bu);CE=o(FR,"getitem"),FR.forEach(t),qE=o(Kt,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Hu=s(Kt,"CODE",{});var AR=n(Hu);zE=o(AR,"type"),AR.forEach(t),VE=o(Kt," (for example \u201Cnumpy\u201D) is used to format batches when using "),Gu=s(Kt,"STRONG",{});var OR=n(Gu);UE=o(OR,"getitem"),OR.forEach(t),ME=o(Kt,`.
It\u2019s also possible to use custom transforms for formatting using `),Gm=s(Kt,"A",{href:!0});var jR=n(Gm);RE=o(jR,"datasets.Dataset.set_transform()"),jR.forEach(t),BE=o(Kt,"."),Kt.forEach(t),HE=c(Ur),be=s(Ur,"P",{});var Yt=n(be);GE=o(Yt,"It is possible to call "),Wu=s(Yt,"CODE",{});var SR=n(Wu);WE=o(SR,"map"),SR.forEach(t),KE=o(Yt," after calling "),Ku=s(Yt,"CODE",{});var CR=n(Ku);YE=o(CR,"set_format"),CR.forEach(t),JE=o(Yt,". Since "),Yu=s(Yt,"CODE",{});var qR=n(Yu);XE=o(qR,"map"),qR.forEach(t),ZE=o(Yt,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),Ju=s(Yt,"CODE",{});var zR=n(Ju);QE=o(zR,"map"),zR.forEach(t),e3=o(Yt," on a dataset to add a new column, then this column will be formatted:"),Yt.forEach(t),t3=c(Ur),Xu=s(Ur,"P",{});var VR=n(Xu);a3=o(VR,"new formatted columns = (all columns - previously unformatted columns)"),VR.forEach(t),Ur.forEach(t),s3=c(b),Us=s(b,"DIV",{class:!0});var h$=n(Us);p(ti.$$.fragment,h$),n3=c(h$),Fe=s(h$,"P",{});var us=n(Fe);r3=o(us,"Set "),Zu=s(us,"STRONG",{});var UR=n(Zu);o3=o(UR,"getitem"),UR.forEach(t),i3=o(us," return format using this transform. The transform is applied on-the-fly on batches when "),Qu=s(us,"STRONG",{});var MR=n(Qu);l3=o(MR,"getitem"),MR.forEach(t),c3=o(us,` is called.
As `),Wm=s(us,"A",{href:!0});var RR=n(Wm);d3=o(RR,"datasets.Dataset.set_format()"),RR.forEach(t),m3=o(us,", this can be reset using "),Km=s(us,"A",{href:!0});var BR=n(Km);p3=o(BR,"datasets.Dataset.reset_format()"),BR.forEach(t),us.forEach(t),h$.forEach(t),h3=c(b),Nt=s(b,"DIV",{class:!0});var Jh=n(Nt);p(ai.$$.fragment,Jh),f3=c(Jh),si=s(Jh,"P",{});var f$=n(si);u3=o(f$,"Reset "),eg=s(f$,"STRONG",{});var HR=n(eg);g3=o(HR,"getitem"),HR.forEach(t),_3=o(f$," return format to python objects and all columns."),f$.forEach(t),v3=c(Jh),Ym=s(Jh,"P",{});var fM=n(Ym);b3=o(fM,"Same as "),tg=s(fM,"CODE",{});var GR=n(tg);y3=o(GR,"self.set_format()"),GR.forEach(t),fM.forEach(t),Jh.forEach(t),D3=c(b),Ae=s(b,"DIV",{class:!0});var Mr=n(Ae);p(ni.$$.fragment,Mr),$3=c(Mr),ot=s(Mr,"P",{});var Rr=n(ot);w3=o(Rr,"Set "),ag=s(Rr,"STRONG",{});var WR=n(ag);x3=o(WR,"getitem"),WR.forEach(t),E3=o(Rr,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),sg=s(Rr,"CODE",{});var KR=n(sg);k3=o(KR,"type"),KR.forEach(t),I3=o(Rr," (for example \u201Cnumpy\u201D) is used to format batches when using "),ng=s(Rr,"STRONG",{});var YR=n(ng);T3=o(YR,"getitem"),YR.forEach(t),N3=o(Rr,"."),Rr.forEach(t),P3=c(Mr),ri=s(Mr,"P",{});var u$=n(ri);L3=o(u$,"It\u2019s also possible to use custom transforms for formatting using "),Jm=s(u$,"A",{href:!0});var JR=n(Jm);F3=o(JR,"datasets.Dataset.with_transform()"),JR.forEach(t),A3=o(u$,"."),u$.forEach(t),O3=c(Mr),ba=s(Mr,"P",{});var Xh=n(ba);j3=o(Xh,"Contrary to "),Xm=s(Xh,"A",{href:!0});var XR=n(Xm);S3=o(XR,"datasets.Dataset.set_format()"),XR.forEach(t),C3=o(Xh,", "),rg=s(Xh,"CODE",{});var ZR=n(rg);q3=o(ZR,"with_format"),ZR.forEach(t),z3=o(Xh," returns a new Dataset object."),Xh.forEach(t),Mr.forEach(t),V3=c(b),Oe=s(b,"DIV",{class:!0});var Br=n(Oe);p(oi.$$.fragment,Br),U3=c(Br),ya=s(Br,"P",{});var Zh=n(ya);M3=o(Zh,"Set "),og=s(Zh,"STRONG",{});var QR=n(og);R3=o(QR,"getitem"),QR.forEach(t),B3=o(Zh," return format using this transform. The transform is applied on-the-fly on batches when "),ig=s(Zh,"STRONG",{});var eB=n(ig);H3=o(eB,"getitem"),eB.forEach(t),G3=o(Zh," is called."),Zh.forEach(t),W3=c(Br),Da=s(Br,"P",{});var Qh=n(Da);K3=o(Qh,"As "),Zm=s(Qh,"A",{href:!0});var tB=n(Zm);Y3=o(tB,"datasets.Dataset.set_format()"),tB.forEach(t),J3=o(Qh,", this can be reset using "),Qm=s(Qh,"A",{href:!0});var aB=n(Qm);X3=o(aB,"datasets.Dataset.reset_format()"),aB.forEach(t),Z3=o(Qh,"."),Qh.forEach(t),Q3=c(Br),$a=s(Br,"P",{});var ef=n($a);ek=o(ef,"Contrary to "),ep=s(ef,"A",{href:!0});var sB=n(ep);tk=o(sB,"datasets.Dataset.set_transform()"),sB.forEach(t),ak=o(ef,", "),lg=s(ef,"CODE",{});var nB=n(lg);sk=o(nB,"with_transform"),nB.forEach(t),nk=o(ef," returns a new Dataset object."),ef.forEach(t),Br.forEach(t),rk=c(b),Ms=s(b,"DIV",{class:!0});var g$=n(Ms);p(ii.$$.fragment,g$),ok=c(g$),cg=s(g$,"P",{});var rB=n(cg);ik=o(rB,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),rB.forEach(t),g$.forEach(t),lk=c(b),Pt=s(b,"DIV",{class:!0});var tf=n(Pt);p(li.$$.fragment,tf),ck=c(tf),dg=s(tf,"P",{});var oB=n(dg);dk=o(oB,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),oB.forEach(t),mk=c(tf),mg=s(tf,"P",{});var iB=n(mg);pk=o(iB,"Be careful when running this command that no other process is currently using other cache files."),iB.forEach(t),tf.forEach(t),hk=c(b),je=s(b,"DIV",{class:!0});var Hr=n(je);p(ci.$$.fragment,Hr),fk=c(Hr),pg=s(Hr,"P",{});var lB=n(pg);uk=o(lB,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),lB.forEach(t),gk=c(Hr),di=s(Hr,"P",{});var _$=n(di);_k=o(_$,"You can specify whether the function should be batched or not with the "),hg=s(_$,"CODE",{});var cB=n(hg);vk=o(cB,"batched"),cB.forEach(t),bk=o(_$," parameter:"),_$.forEach(t),yk=c(Hr),wa=s(Hr,"UL",{});var af=n(wa);fg=s(af,"LI",{});var dB=n(fg);Dk=o(dB,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),dB.forEach(t),$k=c(af),ug=s(af,"LI",{});var mB=n(ug);wk=o(mB,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),mB.forEach(t),xk=c(af),ee=s(af,"LI",{});var Je=n(ee);Ek=o(Je,"If batched is True and batch_size is "),gg=s(Je,"CODE",{});var pB=n(gg);kk=o(pB,"n"),pB.forEach(t),Ik=o(Je," > 1, then the function takes a batch of "),_g=s(Je,"CODE",{});var hB=n(_g);Tk=o(hB,"n"),hB.forEach(t),Nk=o(Je," examples as input and can return a batch with "),vg=s(Je,"CODE",{});var fB=n(vg);Pk=o(fB,"n"),fB.forEach(t),Lk=o(Je,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),bg=s(Je,"CODE",{});var uB=n(bg);Fk=o(uB,"n"),uB.forEach(t),Ak=o(Je,` examples.
A batch is a dictionary, e.g. a batch of `),yg=s(Je,"CODE",{});var gB=n(yg);Ok=o(gB,"n"),gB.forEach(t),jk=o(Je," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Je.forEach(t),af.forEach(t),Hr.forEach(t),Sk=c(b),Rs=s(b,"DIV",{class:!0});var v$=n(Rs);p(mi.$$.fragment,v$),Ck=c(v$),Dg=s(v$,"P",{});var _B=n(Dg);qk=o(_B,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),_B.forEach(t),v$.forEach(t),zk=c(b),Bs=s(b,"DIV",{class:!0});var b$=n(Bs);p(pi.$$.fragment,b$),Vk=c(b$),$g=s(b$,"P",{});var vB=n($g);Uk=o(vB,"Create a new dataset with rows selected following the list/array of indices."),vB.forEach(t),b$.forEach(t),Mk=c(b),Lt=s(b,"DIV",{class:!0});var sf=n(Lt);p(hi.$$.fragment,sf),Rk=c(sf),wg=s(sf,"P",{});var bB=n(wg);Bk=o(bB,"Create a new dataset sorted according to a column."),bB.forEach(t),Hk=c(sf),xg=s(sf,"P",{});var yB=n(xg);Gk=o(yB,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),yB.forEach(t),sf.forEach(t),Wk=c(b),Ft=s(b,"DIV",{class:!0});var nf=n(Ft);p(fi.$$.fragment,nf),Kk=c(nf),Eg=s(nf,"P",{});var DB=n(Eg);Yk=o(DB,"Create a new Dataset where the rows are shuffled."),DB.forEach(t),Jk=c(nf),kg=s(nf,"P",{});var $B=n(kg);Xk=o($B,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),$B.forEach(t),nf.forEach(t),Zk=c(b),At=s(b,"DIV",{class:!0});var rf=n(At);p(ui.$$.fragment,rf),Qk=c(rf),j=s(rf,"P",{});var J=n(j);e7=o(J,"Return a dictionary ("),Ig=s(J,"CODE",{});var wB=n(Ig);t7=o(wB,"datasets.DatsetDict"),wB.forEach(t),a7=o(J,") with two random train and test subsets ("),Tg=s(J,"EM",{});var xB=n(Tg);s7=o(xB,"train"),xB.forEach(t),n7=o(J," and "),Ng=s(J,"EM",{});var EB=n(Ng);r7=o(EB,"test"),EB.forEach(t),o7=c(J),Pg=s(J,"CODE",{});var kB=n(Pg);i7=o(kB,"Dataset"),kB.forEach(t),l7=o(J,` splits).
Splits are created from the dataset according to `),Lg=s(J,"EM",{});var IB=n(Lg);c7=o(IB,"test_size"),IB.forEach(t),d7=o(J,", "),Fg=s(J,"EM",{});var TB=n(Fg);m7=o(TB,"train_size"),TB.forEach(t),p7=o(J," and "),Ag=s(J,"EM",{});var NB=n(Ag);h7=o(NB,"shuffle"),NB.forEach(t),f7=o(J,"."),J.forEach(t),u7=c(rf),gi=s(rf,"P",{});var y$=n(gi);g7=o(y$,"This method is similar to scikit-learn "),Og=s(y$,"EM",{});var PB=n(Og);_7=o(PB,"train_test_split"),PB.forEach(t),v7=o(y$," with the omission of the stratified options."),y$.forEach(t),rf.forEach(t),b7=c(b),ie=s(b,"DIV",{class:!0});var Jt=n(ie);p(_i.$$.fragment,Jt),y7=c(Jt),xa=s(Jt,"P",{});var of=n(xa);D7=o(of,"Return the "),jg=s(of,"EM",{});var LB=n(jg);$7=o(LB,"index"),LB.forEach(t),w7=o(of,"-nth shard from dataset split into "),Sg=s(of,"EM",{});var FB=n(Sg);x7=o(FB,"num_shards"),FB.forEach(t),E7=o(of," pieces."),of.forEach(t),k7=c(Jt),Cg=s(Jt,"P",{});var AB=n(Cg);I7=o(AB,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),AB.forEach(t),T7=c(Jt),vi=s(Jt,"P",{});var D$=n(vi);N7=o(D$,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),qg=s(D$,"EM",{});var OB=n(qg);P7=o(OB,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),OB.forEach(t),L7=o(D$,` will return
a dataset with the same order as the original.`),D$.forEach(t),F7=c(Jt),zg=s(Jt,"P",{});var jB=n(zg);A7=o(jB,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),jB.forEach(t),Jt.forEach(t),O7=c(b),Hs=s(b,"DIV",{class:!0});var $$=n(Hs);p(bi.$$.fragment,$$),j7=c($$),Vg=s($$,"P",{});var SB=n(Vg);S7=o(SB,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),SB.forEach(t),$$.forEach(t),C7=c(b),Se=s(b,"DIV",{class:!0});var Gr=n(Se);p(yi.$$.fragment,Gr),q7=c(Gr),Ug=s(Gr,"P",{});var CB=n(Ug);z7=o(CB,`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),CB.forEach(t),V7=c(Gr),Mg=s(Gr,"P",{});var qB=n(Mg);U7=o(qB,"Example:"),qB.forEach(t),M7=c(Gr),p(Di.$$.fragment,Gr),Gr.forEach(t),R7=c(b),Gs=s(b,"DIV",{class:!0});var w$=n(Gs);p($i.$$.fragment,w$),B7=c(w$),Ea=s(w$,"P",{});var lf=n(Ea);H7=o(lf,"Saves a dataset to a dataset directory, or in a filesystem using either "),tp=s(lf,"A",{href:!0});var zB=n(tp);G7=o(zB,"S3FileSystem"),zB.forEach(t),W7=o(lf,` or
any implementation of `),Rg=s(lf,"CODE",{});var VB=n(Rg);K7=o(VB,"fsspec.spec.AbstractFileSystem"),VB.forEach(t),Y7=o(lf,"."),lf.forEach(t),w$.forEach(t),J7=c(b),Ws=s(b,"DIV",{class:!0});var x$=n(Ws);p(wi.$$.fragment,x$),X7=c(x$),it=s(x$,"P",{});var Wr=n(it);Z7=o(Wr,"Loads a dataset that was previously saved using "),Bg=s(Wr,"CODE",{});var UB=n(Bg);Q7=o(UB,"save_to_disk"),UB.forEach(t),eI=o(Wr,` from a dataset directory, or from a
filesystem using either `),ap=s(Wr,"A",{href:!0});var MB=n(ap);tI=o(MB,"S3FileSystem"),MB.forEach(t),aI=o(Wr,` or any implementation of
`),Hg=s(Wr,"CODE",{});var RB=n(Hg);sI=o(RB,"fsspec.spec.AbstractFileSystem"),RB.forEach(t),nI=o(Wr,"."),Wr.forEach(t),x$.forEach(t),rI=c(b),Ks=s(b,"DIV",{class:!0});var E$=n(Ks);p(xi.$$.fragment,E$),oI=c(E$),Gg=s(E$,"P",{});var BB=n(Gg);iI=o(BB,"Create and cache a new Dataset by flattening the indices mapping."),BB.forEach(t),E$.forEach(t),lI=c(b),Ys=s(b,"DIV",{class:!0});var k$=n(Ys);p(Ei.$$.fragment,k$),cI=c(k$),Wg=s(k$,"P",{});var HB=n(Wg);dI=o(HB,"Exports the dataset to csv"),HB.forEach(t),k$.forEach(t),mI=c(b),Js=s(b,"DIV",{class:!0});var I$=n(Js);p(ki.$$.fragment,I$),pI=c(I$),Ii=s(I$,"P",{});var T$=n(Ii);hI=o(T$,"Returns the dataset as a "),Kg=s(T$,"CODE",{});var GB=n(Kg);fI=o(GB,"pandas.DataFrame"),GB.forEach(t),uI=o(T$,". Can also return a generator for large datasets."),T$.forEach(t),I$.forEach(t),gI=c(b),Xs=s(b,"DIV",{class:!0});var N$=n(Xs);p(Ti.$$.fragment,N$),_I=c(N$),Yg=s(N$,"P",{});var WB=n(Yg);vI=o(WB,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),WB.forEach(t),N$.forEach(t),bI=c(b),Zs=s(b,"DIV",{class:!0});var P$=n(Zs);p(Ni.$$.fragment,P$),yI=c(P$),Jg=s(P$,"P",{});var KB=n(Jg);DI=o(KB,"Export the dataset to JSON Lines or JSON."),KB.forEach(t),P$.forEach(t),$I=c(b),Qs=s(b,"DIV",{class:!0});var L$=n(Qs);p(Pi.$$.fragment,L$),wI=c(L$),Xg=s(L$,"P",{});var YB=n(Xg);xI=o(YB,"Exports the dataset to parquet"),YB.forEach(t),L$.forEach(t),EI=c(b),le=s(b,"DIV",{class:!0});var Xt=n(le);p(Li.$$.fragment,Xt),kI=c(Xt),ka=s(Xt,"P",{});var cf=n(ka);II=o(cf,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),Zg=s(cf,"CODE",{});var JB=n(Zg);TI=o(JB,"device"),JB.forEach(t),NI=o(cf," if you want to run it on GPU ("),Qg=s(cf,"CODE",{});var XB=n(Qg);PI=o(XB,"device"),XB.forEach(t),LI=o(cf,` must be the GPU index).
You can find more information about Faiss here:`),cf.forEach(t),FI=c(Xt),e_=s(Xt,"UL",{});var ZB=n(e_);sp=s(ZB,"LI",{});var uM=n(sp);AI=o(uM,"For "),Fi=s(uM,"A",{href:!0,rel:!0});var QB=n(Fi);OI=o(QB,"string factory"),QB.forEach(t),uM.forEach(t),ZB.forEach(t),jI=c(Xt),t_=s(Xt,"P",{});var eH=n(t_);SI=o(eH,"Example:"),eH.forEach(t),CI=c(Xt),p(Ai.$$.fragment,Xt),Xt.forEach(t),qI=c(b),Ot=s(b,"DIV",{class:!0});var df=n(Ot);p(Oi.$$.fragment,df),zI=c(df),lt=s(df,"P",{});var Kr=n(lt);VI=o(Kr,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),a_=s(Kr,"EM",{});var tH=n(a_);UI=o(tH,"external_arrays"),tH.forEach(t),MI=o(Kr,`.
You can specify `),s_=s(Kr,"EM",{});var aH=n(s_);RI=o(aH,"device"),aH.forEach(t),BI=o(Kr," if you want to run it on GPU ("),n_=s(Kr,"EM",{});var sH=n(n_);HI=o(sH,"device"),sH.forEach(t),GI=o(Kr,` must be the GPU index).
You can find more information about Faiss here:`),Kr.forEach(t),WI=c(df),r_=s(df,"UL",{});var nH=n(r_);np=s(nH,"LI",{});var gM=n(np);KI=o(gM,"For "),ji=s(gM,"A",{href:!0,rel:!0});var rH=n(ji);YI=o(rH,"string factory"),rH.forEach(t),gM.forEach(t),nH.forEach(t),df.forEach(t),JI=c(b),en=s(b,"DIV",{class:!0});var F$=n(en);p(Si.$$.fragment,F$),XI=c(F$),o_=s(F$,"P",{});var oH=n(o_);ZI=o(oH,"Save a FaissIndex on disk."),oH.forEach(t),F$.forEach(t),QI=c(b),jt=s(b,"DIV",{class:!0});var mf=n(jt);p(Ci.$$.fragment,mf),e5=c(mf),i_=s(mf,"P",{});var iH=n(i_);t5=o(iH,"Load a FaissIndex from disk."),iH.forEach(t),a5=c(mf),qi=s(mf,"P",{});var A$=n(qi);s5=o(A$,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),l_=s(A$,"EM",{});var lH=n(l_);n5=o(lH,".get_index(index_name).faiss_index"),lH.forEach(t),r5=o(A$," to make it fit your needs."),A$.forEach(t),mf.forEach(t),o5=c(b),Ce=s(b,"DIV",{class:!0});var Yr=n(Ce);p(zi.$$.fragment,Yr),i5=c(Yr),c_=s(Yr,"P",{});var cH=n(c_);l5=o(cH,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),cH.forEach(t),c5=c(Yr),d_=s(Yr,"P",{});var dH=n(d_);d5=o(dH,"Example:"),dH.forEach(t),m5=c(Yr),p(Vi.$$.fragment,Yr),Yr.forEach(t),p5=c(b),qe=s(b,"DIV",{class:!0});var Jr=n(qe);p(Ui.$$.fragment,Jr),h5=c(Jr),m_=s(Jr,"P",{});var mH=n(m_);f5=o(mH,"Load an existing text index using ElasticSearch for fast retrieval."),mH.forEach(t),u5=c(Jr),p_=s(Jr,"P",{});var pH=n(p_);g5=o(pH,"Default config is:"),pH.forEach(t),_5=c(Jr),p(Mi.$$.fragment,Jr),Jr.forEach(t),v5=c(b),tn=s(b,"DIV",{class:!0});var O$=n(tn);p(Ri.$$.fragment,O$),b5=c(O$),h_=s(O$,"P",{});var hH=n(h_);y5=o(hH,"List the colindex_nameumns/identifiers of all the attached indexes."),hH.forEach(t),O$.forEach(t),D5=c(b),an=s(b,"DIV",{class:!0});var j$=n(an);p(Bi.$$.fragment,j$),$5=c(j$),f_=s(j$,"P",{});var fH=n(f_);w5=o(fH,"List the index_name/identifiers of all the attached indexes."),fH.forEach(t),j$.forEach(t),x5=c(b),sn=s(b,"DIV",{class:!0});var S$=n(sn);p(Hi.$$.fragment,S$),E5=c(S$),u_=s(S$,"P",{});var uH=n(u_);k5=o(uH,"Drop the index with the specified column."),uH.forEach(t),S$.forEach(t),I5=c(b),nn=s(b,"DIV",{class:!0});var C$=n(nn);p(Gi.$$.fragment,C$),T5=c(C$),g_=s(C$,"P",{});var gH=n(g_);N5=o(gH,"Find the nearest examples indices in the dataset to the query."),gH.forEach(t),C$.forEach(t),P5=c(b),rn=s(b,"DIV",{class:!0});var q$=n(rn);p(Wi.$$.fragment,q$),L5=c(q$),__=s(q$,"P",{});var _H=n(__);F5=o(_H,"Find the nearest examples indices in the dataset to the query."),_H.forEach(t),q$.forEach(t),A5=c(b),on=s(b,"DIV",{class:!0});var z$=n(on);p(Ki.$$.fragment,z$),O5=c(z$),v_=s(z$,"P",{});var vH=n(v_);j5=o(vH,"Find the nearest examples in the dataset to the query."),vH.forEach(t),z$.forEach(t),S5=c(b),ln=s(b,"DIV",{class:!0});var V$=n(ln);p(Yi.$$.fragment,V$),C5=c(V$),b_=s(V$,"P",{});var bH=n(b_);q5=o(bH,"Find the nearest examples in the dataset to the query."),bH.forEach(t),V$.forEach(t),z5=c(b),cn=s(b,"DIV",{class:!0});var U$=n(cn);p(Ji.$$.fragment,U$),V5=c(U$),rp=s(U$,"P",{});var _M=n(rp);op=s(_M,"A",{href:!0});var yH=n(op);U5=o(yH,"datasets.DatasetInfo"),yH.forEach(t),M5=o(_M," object containing all the metadata in the dataset."),_M.forEach(t),U$.forEach(t),R5=c(b),dn=s(b,"DIV",{class:!0});var M$=n(dn);p(Xi.$$.fragment,M$),B5=c(M$),ip=s(M$,"P",{});var vM=n(ip);lp=s(vM,"A",{href:!0});var DH=n(lp);H5=o(DH,"datasets.NamedSplit"),DH.forEach(t),G5=o(vM," object corresponding to a named dataset split."),vM.forEach(t),M$.forEach(t),W5=c(b),cp=s(b,"DIV",{class:!0});var $H=n(cp);p(Zi.$$.fragment,$H),$H.forEach(t),K5=c(b),dp=s(b,"DIV",{class:!0});var wH=n(dp);p(Qi.$$.fragment,wH),wH.forEach(t),Y5=c(b),mp=s(b,"DIV",{class:!0});var xH=n(mp);p(el.$$.fragment,xH),xH.forEach(t),J5=c(b),pp=s(b,"DIV",{class:!0});var EH=n(pp);p(tl.$$.fragment,EH),EH.forEach(t),X5=c(b),hp=s(b,"DIV",{class:!0});var kH=n(hp);p(al.$$.fragment,kH),kH.forEach(t),Z5=c(b),fp=s(b,"DIV",{class:!0});var IH=n(fp);p(sl.$$.fragment,IH),IH.forEach(t),Q5=c(b),up=s(b,"DIV",{class:!0});var TH=n(up);p(nl.$$.fragment,TH),TH.forEach(t),e8=c(b),gp=s(b,"DIV",{class:!0});var NH=n(gp);p(rl.$$.fragment,NH),NH.forEach(t),t8=c(b),_p=s(b,"DIV",{class:!0});var PH=n(_p);p(ol.$$.fragment,PH),PH.forEach(t),a8=c(b),vp=s(b,"DIV",{class:!0});var LH=n(vp);p(il.$$.fragment,LH),LH.forEach(t),s8=c(b),bp=s(b,"DIV",{class:!0});var FH=n(bp);p(ll.$$.fragment,FH),FH.forEach(t),n8=c(b),yp=s(b,"DIV",{class:!0});var AH=n(yp);p(cl.$$.fragment,AH),AH.forEach(t),r8=c(b),Dp=s(b,"DIV",{class:!0});var OH=n(Dp);p(dl.$$.fragment,OH),OH.forEach(t),o8=c(b),mn=s(b,"DIV",{class:!0});var R$=n(mn);p(ml.$$.fragment,R$),i8=c(R$),y_=s(R$,"P",{});var jH=n(y_);l8=o(jH,"Create Dataset from CSV file(s)."),jH.forEach(t),R$.forEach(t),c8=c(b),pn=s(b,"DIV",{class:!0});var B$=n(pn);p(pl.$$.fragment,B$),d8=c(B$),D_=s(B$,"P",{});var SH=n(D_);m8=o(SH,"Create Dataset from JSON or JSON Lines file(s)."),SH.forEach(t),B$.forEach(t),p8=c(b),hn=s(b,"DIV",{class:!0});var H$=n(hn);p(hl.$$.fragment,H$),h8=c(H$),$_=s(H$,"P",{});var CH=n($_);f8=o(CH,"Create Dataset from Parquet file(s)."),CH.forEach(t),H$.forEach(t),u8=c(b),fn=s(b,"DIV",{class:!0});var G$=n(fn);p(fl.$$.fragment,G$),g8=c(G$),w_=s(G$,"P",{});var qH=n(w_);_8=o(qH,"Create Dataset from text file(s)."),qH.forEach(t),G$.forEach(t),v8=c(b),St=s(b,"DIV",{class:!0});var pf=n(St);p(ul.$$.fragment,pf),b8=c(pf),Ia=s(pf,"P",{});var hf=n(Ia);y8=o(hf,"Prepare a dataset for the given task by casting the dataset\u2019s "),$p=s(hf,"A",{href:!0});var zH=n($p);D8=o(zH,"Features"),zH.forEach(t),$8=o(hf," to standardized column names and types as detailed in "),wp=s(hf,"A",{href:!0});var VH=n(wp);w8=o(VH,"datasets.tasks"),VH.forEach(t),x8=o(hf,"."),hf.forEach(t),E8=c(pf),Ta=s(pf,"P",{});var ff=n(Ta);k8=o(ff,"Casts "),x_=s(ff,"CODE",{});var UH=n(x_);I8=o(UH,"datasets.DatasetInfo.features"),UH.forEach(t),T8=o(ff," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),E_=s(ff,"CODE",{});var MH=n(E_);N8=o(MH,"datasets.DatasetInfo.task_templates"),MH.forEach(t),P8=o(ff," after casting."),ff.forEach(t),pf.forEach(t),L8=c(b),ze=s(b,"DIV",{class:!0});var Xr=n(ze);p(gl.$$.fragment,Xr),F8=c(Xr),_l=s(Xr,"P",{});var W$=n(_l);A8=o(W$,"Align the dataset\u2019s label ID and label name mapping to match an input "),k_=s(W$,"CODE",{});var RH=n(k_);O8=o(RH,"label2id"),RH.forEach(t),j8=o(W$,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),W$.forEach(t),S8=c(Xr),I_=s(Xr,"P",{});var BH=n(I_);C8=o(BH,"Example:"),BH.forEach(t),q8=c(Xr),p(vl.$$.fragment,Xr),Xr.forEach(t),b.forEach(t),Q2=c(i),Na=s(i,"DIV",{class:!0});var K$=n(Na);p(bl.$$.fragment,K$),z8=c(K$),Pa=s(K$,"P",{});var uf=n(Pa);V8=o(uf,"Converts a list of "),xp=s(uf,"A",{href:!0});var HH=n(xp);U8=o(HH,"Dataset"),HH.forEach(t),M8=o(uf," with the same schema into a single "),Ep=s(uf,"A",{href:!0});var GH=n(Ep);R8=o(GH,"Dataset"),GH.forEach(t),B8=o(uf,"."),uf.forEach(t),K$.forEach(t),eD=c(i),S=s(i,"DIV",{class:!0});var he=n(S);p(yl.$$.fragment,he),H8=c(he),T_=s(he,"P",{});var WH=n(T_);G8=o(WH,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),WH.forEach(t),W8=c(he),La=s(he,"P",{});var gf=n(La);K8=o(gf,"You can use this function on a list of "),kp=s(gf,"A",{href:!0});var KH=n(kp);Y8=o(KH,"Dataset"),KH.forEach(t),J8=o(gf," objects, or on a list of "),Ip=s(gf,"A",{href:!0});var YH=n(Ip);X8=o(YH,"IterableDataset"),YH.forEach(t),Z8=o(gf," objects."),gf.forEach(t),Q8=c(he),ye=s(he,"P",{});var Zt=n(ye);e6=o(Zt,"If "),N_=s(Zt,"CODE",{});var JH=n(N_);t6=o(JH,"probabilities"),JH.forEach(t),a6=o(Zt," is "),P_=s(Zt,"CODE",{});var XH=n(P_);s6=o(XH,"None"),XH.forEach(t),n6=o(Zt,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),L_=s(Zt,"CODE",{});var ZH=n(L_);r6=o(ZH,"probabilities"),ZH.forEach(t),o6=o(Zt," is not "),F_=s(Zt,"CODE",{});var QH=n(F_);i6=o(QH,"None"),QH.forEach(t),l6=o(Zt,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Zt.forEach(t),c6=c(he),A_=s(he,"P",{});var eG=n(A_);d6=o(eG,"The resulting dataset ends when one of the source datasets runs out of examples."),eG.forEach(t),m6=c(he),O_=s(he,"P",{});var tG=n(O_);p6=o(tG,"Example:"),tG.forEach(t),h6=c(he),p(Dl.$$.fragment,he),he.forEach(t),tD=c(i),te=s(i,"DIV",{class:!0});var Qt=n(te);p($l.$$.fragment,Qt),f6=c(Qt),j_=s(Qt,"P",{});var aG=n(j_);u6=o(aG,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),aG.forEach(t),g6=c(Qt),S_=s(Qt,"P",{});var sG=n(S_);_6=o(sG,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),sG.forEach(t),v6=c(Qt),C_=s(Qt,"P",{});var nG=n(C_);b6=o(nG,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),nG.forEach(t),y6=c(Qt),De=s(Qt,"UL",{});var ea=n(De);q_=s(ea,"LI",{});var rG=n(q_);D6=o(rG,"cache files are always recreated"),rG.forEach(t),$6=c(ea),z_=s(ea,"LI",{});var oG=n(z_);w6=o(oG,"cache files are written to a temporary directory that is deleted when session closes"),oG.forEach(t),x6=c(ea),V_=s(ea,"LI",{});var iG=n(V_);E6=o(iG,"cache files are named using a random hash instead of the dataset fingerprint"),iG.forEach(t),k6=c(ea),wl=s(ea,"LI",{});var Y$=n(wl);I6=o(Y$,"use "),Tp=s(Y$,"A",{href:!0});var lG=n(Tp);T6=o(lG,"datasets.Dataset.save_to_disk()"),lG.forEach(t),N6=o(Y$," to save a transformed dataset or it will be deleted when session closes"),Y$.forEach(t),P6=c(ea),ct=s(ea,"LI",{});var Zr=n(ct);L6=o(Zr,"caching doesn\u2019t affect "),Np=s(Zr,"A",{href:!0});var cG=n(Np);F6=o(cG,"datasets.load_dataset()"),cG.forEach(t),A6=o(Zr,`. If you want to regenerate a dataset from scratch you should use
the `),U_=s(Zr,"CODE",{});var dG=n(U_);O6=o(dG,"download_mode"),dG.forEach(t),j6=o(Zr," parameter in "),Pp=s(Zr,"A",{href:!0});var mG=n(Pp);S6=o(mG,"datasets.load_dataset()"),mG.forEach(t),C6=o(Zr,"."),Zr.forEach(t),ea.forEach(t),Qt.forEach(t),aD=c(i),ae=s(i,"DIV",{class:!0});var ta=n(ae);p(xl.$$.fragment,ta),q6=c(ta),M_=s(ta,"P",{});var pG=n(M_);z6=o(pG,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),pG.forEach(t),V6=c(ta),R_=s(ta,"P",{});var hG=n(R_);U6=o(hG,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),hG.forEach(t),M6=c(ta),B_=s(ta,"P",{});var fG=n(B_);R6=o(fG,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),fG.forEach(t),B6=c(ta),$e=s(ta,"UL",{});var aa=n($e);H_=s(aa,"LI",{});var uG=n(H_);H6=o(uG,"cache files are always recreated"),uG.forEach(t),G6=c(aa),G_=s(aa,"LI",{});var gG=n(G_);W6=o(gG,"cache files are written to a temporary directory that is deleted when session closes"),gG.forEach(t),K6=c(aa),W_=s(aa,"LI",{});var _G=n(W_);Y6=o(_G,"cache files are named using a random hash instead of the dataset fingerprint"),_G.forEach(t),J6=c(aa),El=s(aa,"LI",{});var J$=n(El);X6=o(J$,"use "),Lp=s(J$,"A",{href:!0});var vG=n(Lp);Z6=o(vG,"datasets.Dataset.save_to_disk()"),vG.forEach(t),Q6=o(J$," to save a transformed dataset or it will be deleted when session closes"),J$.forEach(t),e9=c(aa),dt=s(aa,"LI",{});var Qr=n(dt);t9=o(Qr,"caching doesn\u2019t affect "),Fp=s(Qr,"A",{href:!0});var bG=n(Fp);a9=o(bG,"datasets.load_dataset()"),bG.forEach(t),s9=o(Qr,`. If you want to regenerate a dataset from scratch you should use
the `),K_=s(Qr,"CODE",{});var yG=n(K_);n9=o(yG,"download_mode"),yG.forEach(t),r9=o(Qr," parameter in "),Ap=s(Qr,"A",{href:!0});var DG=n(Ap);o9=o(DG,"datasets.load_dataset()"),DG.forEach(t),i9=o(Qr,"."),Qr.forEach(t),aa.forEach(t),ta.forEach(t),sD=c(i),se=s(i,"DIV",{class:!0});var sa=n(se);p(kl.$$.fragment,sa),l9=c(sa),Y_=s(sa,"P",{});var $G=n(Y_);c9=o($G,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),$G.forEach(t),d9=c(sa),J_=s(sa,"P",{});var wG=n(J_);m9=o(wG,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),wG.forEach(t),p9=c(sa),X_=s(sa,"P",{});var xG=n(X_);h9=o(xG,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),xG.forEach(t),f9=c(sa),we=s(sa,"UL",{});var na=n(we);Z_=s(na,"LI",{});var EG=n(Z_);u9=o(EG,"cache files are always recreated"),EG.forEach(t),g9=c(na),Q_=s(na,"LI",{});var kG=n(Q_);_9=o(kG,"cache files are written to a temporary directory that is deleted when session closes"),kG.forEach(t),v9=c(na),e1=s(na,"LI",{});var IG=n(e1);b9=o(IG,"cache files are named using a random hash instead of the dataset fingerprint"),IG.forEach(t),y9=c(na),Il=s(na,"LI",{});var X$=n(Il);D9=o(X$,"use "),Op=s(X$,"A",{href:!0});var TG=n(Op);$9=o(TG,"datasets.Dataset.save_to_disk()"),TG.forEach(t),w9=o(X$," to save a transformed dataset or it will be deleted when session closes"),X$.forEach(t),x9=c(na),mt=s(na,"LI",{});var eo=n(mt);E9=o(eo,"caching doesn\u2019t affect "),jp=s(eo,"A",{href:!0});var NG=n(jp);k9=o(NG,"datasets.load_dataset()"),NG.forEach(t),I9=o(eo,`. If you want to regenerate a dataset from scratch you should use
the `),t1=s(eo,"CODE",{});var PG=n(t1);T9=o(PG,"download_mode"),PG.forEach(t),N9=o(eo," parameter in "),Sp=s(eo,"A",{href:!0});var LG=n(Sp);P9=o(LG,"datasets.load_dataset()"),LG.forEach(t),L9=o(eo,"."),eo.forEach(t),na.forEach(t),sa.forEach(t),nD=c(i),Fa=s(i,"H2",{class:!0});var Z$=n(Fa);un=s(Z$,"A",{id:!0,class:!0,href:!0});var FG=n(un);a1=s(FG,"SPAN",{});var AG=n(a1);p(Tl.$$.fragment,AG),AG.forEach(t),FG.forEach(t),F9=c(Z$),s1=s(Z$,"SPAN",{});var OG=n(s1);A9=o(OG,"DatasetDict"),OG.forEach(t),Z$.forEach(t),rD=c(i),gn=s(i,"P",{});var Q$=n(gn);O9=o(Q$,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),n1=s(Q$,"CODE",{});var jG=n(n1);j9=o(jG,"Dataset"),jG.forEach(t),S9=o(Q$,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),Q$.forEach(t),oD=c(i),$=s(i,"DIV",{class:!0});var w=n($);p(Nl.$$.fragment,w),C9=c(w),r1=s(w,"P",{});var SG=n(r1);q9=o(SG,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),SG.forEach(t),z9=c(w),_n=s(w,"DIV",{class:!0});var ew=n(_n);p(Pl.$$.fragment,ew),V9=c(ew),o1=s(ew,"P",{});var CG=n(o1);U9=o(CG,"The Apache Arrow tables backing each split."),CG.forEach(t),ew.forEach(t),M9=c(w),vn=s(w,"DIV",{class:!0});var tw=n(vn);p(Ll.$$.fragment,tw),R9=c(tw),i1=s(tw,"P",{});var qG=n(i1);B9=o(qG,"The cache files containing the Apache Arrow table backing each split."),qG.forEach(t),tw.forEach(t),H9=c(w),bn=s(w,"DIV",{class:!0});var aw=n(bn);p(Fl.$$.fragment,aw),G9=c(aw),l1=s(aw,"P",{});var zG=n(l1);W9=o(zG,"Number of columns in each split of the dataset."),zG.forEach(t),aw.forEach(t),K9=c(w),yn=s(w,"DIV",{class:!0});var sw=n(yn);p(Al.$$.fragment,sw),Y9=c(sw),Ol=s(sw,"P",{});var nw=n(Ol);J9=o(nw,"Number of rows in each split of the dataset (same as "),Dn=s(nw,"A",{href:!0});var rw=n(Dn);X9=o(rw,"datasets.Dataset."),c1=s(rw,"STRONG",{});var VG=n(c1);Z9=o(VG,"len"),VG.forEach(t),Q9=o(rw,"()"),rw.forEach(t),eT=o(nw,")."),nw.forEach(t),sw.forEach(t),tT=c(w),$n=s(w,"DIV",{class:!0});var ow=n($n);p(jl.$$.fragment,ow),aT=c(ow),d1=s(ow,"P",{});var UG=n(d1);sT=o(UG,"Names of the columns in each split of the dataset."),UG.forEach(t),ow.forEach(t),nT=c(w),wn=s(w,"DIV",{class:!0});var iw=n(wn);p(Sl.$$.fragment,iw),rT=c(iw),m1=s(iw,"P",{});var MG=n(m1);oT=o(MG,"Shape of each split of the dataset (number of columns, number of rows)."),MG.forEach(t),iw.forEach(t),iT=c(w),Ct=s(w,"DIV",{class:!0});var _f=n(Ct);p(Cl.$$.fragment,_f),lT=c(_f),p1=s(_f,"P",{});var RG=n(p1);cT=o(RG,"Return a list of the unique elements in a column for each split."),RG.forEach(t),dT=c(_f),h1=s(_f,"P",{});var BG=n(h1);mT=o(BG,"This is implemented in the low-level backend and as such, very fast."),BG.forEach(t),_f.forEach(t),pT=c(w),xn=s(w,"DIV",{class:!0});var lw=n(xn);p(ql.$$.fragment,lw),hT=c(lw),f1=s(lw,"P",{});var HG=n(f1);fT=o(HG,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),HG.forEach(t),lw.forEach(t),uT=c(w),En=s(w,"DIV",{class:!0});var cw=n(En);p(zl.$$.fragment,cw),gT=c(cw),u1=s(cw,"P",{});var GG=n(u1);_T=o(GG,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),GG.forEach(t),cw.forEach(t),vT=c(w),kn=s(w,"DIV",{class:!0});var dw=n(kn);p(Vl.$$.fragment,dw),bT=c(dw),g1=s(dw,"P",{});var WG=n(g1);yT=o(WG,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),WG.forEach(t),dw.forEach(t),DT=c(w),qt=s(w,"DIV",{class:!0});var vf=n(qt);p(Ul.$$.fragment,vf),$T=c(vf),_1=s(vf,"P",{});var KG=n(_1);wT=o(KG,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),KG.forEach(t),xT=c(vf),v1=s(vf,"P",{});var YG=n(v1);ET=o(YG,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),YG.forEach(t),vf.forEach(t),kT=c(w),Ve=s(w,"DIV",{class:!0});var to=n(Ve);p(Ml.$$.fragment,to),IT=c(to),b1=s(to,"P",{});var JG=n(b1);TT=o(JG,"Create a new Dataset where the rows are shuffled."),JG.forEach(t),NT=c(to),y1=s(to,"P",{});var XG=n(y1);PT=o(XG,"The transformation is applied to all the datasets of the dataset dictionary."),XG.forEach(t),LT=c(to),D1=s(to,"P",{});var ZG=n(D1);FT=o(ZG,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),ZG.forEach(t),to.forEach(t),AT=c(w),Ue=s(w,"DIV",{class:!0});var ao=n(Ue);p(Rl.$$.fragment,ao),OT=c(ao),Bl=s(ao,"P",{});var mw=n(Bl);jT=o(mw,"Set "),$1=s(mw,"CODE",{});var QG=n($1);ST=o(QG,"__getitem__"),QG.forEach(t),CT=o(mw,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),mw.forEach(t),qT=c(ao),xe=s(ao,"P",{});var ra=n(xe);zT=o(ra,"It is possible to call "),w1=s(ra,"CODE",{});var eW=n(w1);VT=o(eW,"map"),eW.forEach(t),UT=o(ra," after calling "),x1=s(ra,"CODE",{});var tW=n(x1);MT=o(tW,"set_format"),tW.forEach(t),RT=o(ra,". Since "),E1=s(ra,"CODE",{});var aW=n(E1);BT=o(aW,"map"),aW.forEach(t),HT=o(ra,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),k1=s(ra,"CODE",{});var sW=n(k1);GT=o(sW,"map"),sW.forEach(t),WT=o(ra," on a dataset to add a new column, then this column will be formatted:"),ra.forEach(t),KT=c(ao),I1=s(ao,"P",{});var nW=n(I1);YT=o(nW,"new formatted columns = (all columns - previously unformatted columns)"),nW.forEach(t),ao.forEach(t),JT=c(w),zt=s(w,"DIV",{class:!0});var bf=n(zt);p(Hl.$$.fragment,bf),XT=c(bf),Gl=s(bf,"P",{});var pw=n(Gl);ZT=o(pw,"Reset "),T1=s(pw,"CODE",{});var rW=n(T1);QT=o(rW,"__getitem__"),rW.forEach(t),eN=o(pw,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),pw.forEach(t),tN=c(bf),Cp=s(bf,"P",{});var bM=n(Cp);aN=o(bM,"Same as "),N1=s(bM,"CODE",{});var oW=n(N1);sN=o(oW,"self.set_format()"),oW.forEach(t),bM.forEach(t),bf.forEach(t),nN=c(w),In=s(w,"DIV",{class:!0});var hw=n(In);p(Wl.$$.fragment,hw),rN=c(hw),Aa=s(hw,"P",{});var yf=n(Aa);oN=o(yf,"To be used in a "),P1=s(yf,"EM",{});var iW=n(P1);iN=o(iW,"with"),iW.forEach(t),lN=o(yf," statement. Set "),L1=s(yf,"CODE",{});var lW=n(L1);cN=o(lW,"__getitem__"),lW.forEach(t),dN=o(yf,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),yf.forEach(t),hw.forEach(t),mN=c(w),Me=s(w,"DIV",{class:!0});var so=n(Me);p(Kl.$$.fragment,so),pN=c(so),pt=s(so,"P",{});var no=n(pt);hN=o(no,"Set "),F1=s(no,"CODE",{});var cW=n(F1);fN=o(cW,"__getitem__"),cW.forEach(t),uN=o(no,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),A1=s(no,"CODE",{});var dW=n(A1);gN=o(dW,"type"),dW.forEach(t),_N=o(no," (for example \u201Cnumpy\u201D) is used to format batches when using "),O1=s(no,"CODE",{});var mW=n(O1);vN=o(mW,"__getitem__"),mW.forEach(t),bN=o(no,`.
The format is set for every dataset in the dataset dictionary`),no.forEach(t),yN=c(so),Yl=s(so,"P",{});var fw=n(Yl);DN=o(fw,"It\u2019s also possible to use custom transforms for formatting using "),qp=s(fw,"A",{href:!0});var pW=n(qp);$N=o(pW,"datasets.Dataset.with_transform()"),pW.forEach(t),wN=o(fw,"."),fw.forEach(t),xN=c(so),Oa=s(so,"P",{});var Df=n(Oa);EN=o(Df,"Contrary to "),zp=s(Df,"A",{href:!0});var hW=n(zp);kN=o(hW,"datasets.DatasetDict.set_format()"),hW.forEach(t),IN=o(Df,", "),j1=s(Df,"CODE",{});var fW=n(j1);TN=o(fW,"with_format"),fW.forEach(t),NN=o(Df," returns a new DatasetDict object with new Dataset objects."),Df.forEach(t),so.forEach(t),PN=c(w),Re=s(w,"DIV",{class:!0});var ro=n(Re);p(Jl.$$.fragment,ro),LN=c(ro),ja=s(ro,"P",{});var $f=n(ja);FN=o($f,"Set "),S1=s($f,"CODE",{});var uW=n(S1);AN=o(uW,"__getitem__"),uW.forEach(t),ON=o($f," return format using this transform. The transform is applied on-the-fly on batches when "),C1=s($f,"CODE",{});var gW=n(C1);jN=o(gW,"__getitem__"),gW.forEach(t),SN=o($f,` is called.
The transform is set for every dataset in the dataset dictionary`),$f.forEach(t),CN=c(ro),Sa=s(ro,"P",{});var wf=n(Sa);qN=o(wf,"As "),Vp=s(wf,"A",{href:!0});var _W=n(Vp);zN=o(_W,"datasets.Dataset.set_format()"),_W.forEach(t),VN=o(wf,", this can be reset using "),Up=s(wf,"A",{href:!0});var vW=n(Up);UN=o(vW,"datasets.Dataset.reset_format()"),vW.forEach(t),MN=o(wf,"."),wf.forEach(t),RN=c(ro),Ca=s(ro,"P",{});var xf=n(Ca);BN=o(xf,"Contrary to "),q1=s(xf,"CODE",{});var bW=n(q1);HN=o(bW,"datasets.DatasetDict.set_transform()"),bW.forEach(t),GN=o(xf,", "),z1=s(xf,"CODE",{});var yW=n(z1);WN=o(yW,"with_transform"),yW.forEach(t),KN=o(xf," returns a new DatasetDict object with new Dataset objects."),xf.forEach(t),ro.forEach(t),YN=c(w),Tn=s(w,"DIV",{class:!0});var uw=n(Tn);p(Xl.$$.fragment,uw),JN=c(uw),V1=s(uw,"P",{});var DW=n(V1);XN=o(DW,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),DW.forEach(t),uw.forEach(t),ZN=c(w),Vt=s(w,"DIV",{class:!0});var Ef=n(Vt);p(Zl.$$.fragment,Ef),QN=c(Ef),U1=s(Ef,"P",{});var $W=n(U1);eP=o($W,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),$W.forEach(t),tP=c(Ef),ht=s(Ef,"P",{});var oo=n(ht);aP=o(oo,"You can also remove a column using "),Mp=s(oo,"A",{href:!0});var wW=n(Mp);sP=o(wW,"Dataset.map()"),wW.forEach(t),nP=o(oo," with "),M1=s(oo,"EM",{});var xW=n(M1);rP=o(xW,"feature"),xW.forEach(t),oP=o(oo," but "),R1=s(oo,"CODE",{});var EW=n(R1);iP=o(EW,"cast_"),EW.forEach(t),lP=o(oo,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),oo.forEach(t),Ef.forEach(t),cP=c(w),Nn=s(w,"DIV",{class:!0});var gw=n(Nn);p(Ql.$$.fragment,gw),dP=c(gw),B1=s(gw,"P",{});var kW=n(B1);mP=o(kW,"Cast column to feature for decoding."),kW.forEach(t),gw.forEach(t),pP=c(w),Be=s(w,"DIV",{class:!0});var io=n(Be);p(ec.$$.fragment,io),hP=c(io),H1=s(io,"P",{});var IW=n(H1);fP=o(IW,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),IW.forEach(t),uP=c(io),G1=s(io,"P",{});var TW=n(G1);gP=o(TW,"The transformation is applied to all the splits of the dataset dictionary."),TW.forEach(t),_P=c(io),qa=s(io,"P",{});var kf=n(qa);vP=o(kf,"You can also remove a column using "),Rp=s(kf,"A",{href:!0});var NW=n(Rp);bP=o(NW,"Dataset.map()"),NW.forEach(t),yP=o(kf," with "),W1=s(kf,"EM",{});var PW=n(W1);DP=o(PW,"remove_columns"),PW.forEach(t),$P=o(kf,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),kf.forEach(t),io.forEach(t),wP=c(w),He=s(w,"DIV",{class:!0});var lo=n(He);p(tc.$$.fragment,lo),xP=c(lo),K1=s(lo,"P",{});var LW=n(K1);EP=o(LW,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),LW.forEach(t),kP=c(lo),za=s(lo,"P",{});var If=n(za);IP=o(If,"You can also rename a column using "),Bp=s(If,"A",{href:!0});var FW=n(Bp);TP=o(FW,"Dataset.map()"),FW.forEach(t),NP=o(If," with "),Y1=s(If,"EM",{});var AW=n(Y1);PP=o(AW,"remove_columns"),AW.forEach(t),LP=o(If," but the present method:"),If.forEach(t),FP=c(lo),ac=s(lo,"UL",{});var _w=n(ac);J1=s(_w,"LI",{});var OW=n(J1);AP=o(OW,"takes care of moving the original features under the new column name."),OW.forEach(t),OP=c(_w),X1=s(_w,"LI",{});var jW=n(X1);jP=o(jW,"doesn\u2019t copy the data to a new dataset and is thus much faster."),jW.forEach(t),_w.forEach(t),lo.forEach(t),SP=c(w),Pn=s(w,"DIV",{class:!0});var vw=n(Pn);p(sc.$$.fragment,vw),CP=c(vw),Z1=s(vw,"P",{});var SW=n(Z1);qP=o(SW,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),SW.forEach(t),vw.forEach(t),zP=c(w),Ln=s(w,"DIV",{class:!0});var bw=n(Ln);p(nc.$$.fragment,bw),VP=c(bw),rc=s(bw,"P",{});var yw=n(rc);UP=o(yw,"Casts the given column as :obj:"),Q1=s(yw,"CODE",{});var CW=n(Q1);MP=o(CW,"datasets.features.ClassLabel"),CW.forEach(t),RP=o(yw," and updates the tables."),yw.forEach(t),bw.forEach(t),BP=c(w),ce=s(w,"DIV",{class:!0});var oa=n(ce);p(oc.$$.fragment,oa),HP=c(oa),Va=s(oa,"P",{});var Tf=n(Va);GP=o(Tf,"Pushes the "),ev=s(Tf,"CODE",{});var qW=n(ev);WP=o(qW,"DatasetDict"),qW.forEach(t),KP=o(Tf,` to the hub.
The `),tv=s(Tf,"CODE",{});var zW=n(tv);YP=o(zW,"DatasetDict"),zW.forEach(t),JP=o(Tf," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),Tf.forEach(t),XP=c(oa),av=s(oa,"P",{});var VW=n(av);ZP=o(VW,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),VW.forEach(t),QP=c(oa),sv=s(oa,"P",{});var UW=n(sv);eL=o(UW,"Example:"),UW.forEach(t),tL=c(oa),p(ic.$$.fragment,oa),oa.forEach(t),aL=c(w),Fn=s(w,"DIV",{class:!0});var Dw=n(Fn);p(lc.$$.fragment,Dw),sL=c(Dw),Ua=s(Dw,"P",{});var Nf=n(Ua);nL=o(Nf,"Saves a dataset dict to a filesystem using either "),Hp=s(Nf,"A",{href:!0});var MW=n(Hp);rL=o(MW,"S3FileSystem"),MW.forEach(t),oL=o(Nf,` or
`),nv=s(Nf,"CODE",{});var RW=n(nv);iL=o(RW,"fsspec.spec.AbstractFileSystem"),RW.forEach(t),lL=o(Nf,"."),Nf.forEach(t),Dw.forEach(t),cL=c(w),An=s(w,"DIV",{class:!0});var $w=n(An);p(cc.$$.fragment,$w),dL=c($w),ft=s($w,"P",{});var co=n(ft);mL=o(co,"Load a dataset that was previously saved using "),rv=s(co,"CODE",{});var BW=n(rv);pL=o(BW,"save_to_disk"),BW.forEach(t),hL=o(co,` from a filesystem using either
`),Gp=s(co,"A",{href:!0});var HW=n(Gp);fL=o(HW,"S3FileSystem"),HW.forEach(t),uL=o(co," or "),ov=s(co,"CODE",{});var GW=n(ov);gL=o(GW,"fsspec.spec.AbstractFileSystem"),GW.forEach(t),_L=o(co,"."),co.forEach(t),$w.forEach(t),vL=c(w),On=s(w,"DIV",{class:!0});var ww=n(On);p(dc.$$.fragment,ww),bL=c(ww),iv=s(ww,"P",{});var WW=n(iv);yL=o(WW,"Create DatasetDict from CSV file(s)."),WW.forEach(t),ww.forEach(t),DL=c(w),jn=s(w,"DIV",{class:!0});var xw=n(jn);p(mc.$$.fragment,xw),$L=c(xw),lv=s(xw,"P",{});var KW=n(lv);wL=o(KW,"Create DatasetDict from JSON Lines file(s)."),KW.forEach(t),xw.forEach(t),xL=c(w),Sn=s(w,"DIV",{class:!0});var Ew=n(Sn);p(pc.$$.fragment,Ew),EL=c(Ew),cv=s(Ew,"P",{});var YW=n(cv);kL=o(YW,"Create DatasetDict from Parquet file(s)."),YW.forEach(t),Ew.forEach(t),IL=c(w),Cn=s(w,"DIV",{class:!0});var kw=n(Cn);p(hc.$$.fragment,kw),TL=c(kw),dv=s(kw,"P",{});var JW=n(dv);NL=o(JW,"Create DatasetDict from text file(s)."),JW.forEach(t),kw.forEach(t),PL=c(w),Ut=s(w,"DIV",{class:!0});var Pf=n(Ut);p(fc.$$.fragment,Pf),LL=c(Pf),Ma=s(Pf,"P",{});var Lf=n(Ma);FL=o(Lf,"Prepare a dataset for the given task by casting the dataset\u2019s "),Wp=s(Lf,"A",{href:!0});var XW=n(Wp);AL=o(XW,"Features"),XW.forEach(t),OL=o(Lf," to standardized column names and types as detailed in "),Kp=s(Lf,"A",{href:!0});var ZW=n(Kp);jL=o(ZW,"datasets.tasks"),ZW.forEach(t),SL=o(Lf,"."),Lf.forEach(t),CL=c(Pf),Ra=s(Pf,"P",{});var Ff=n(Ra);qL=o(Ff,"Casts "),mv=s(Ff,"CODE",{});var QW=n(mv);zL=o(QW,"datasets.DatasetInfo.features"),QW.forEach(t),VL=o(Ff," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),pv=s(Ff,"CODE",{});var eK=n(pv);UL=o(eK,"datasets.DatasetInfo.task_templates"),eK.forEach(t),ML=o(Ff," after casting."),Ff.forEach(t),Pf.forEach(t),w.forEach(t),iD=c(i),Yp=s(i,"A",{id:!0}),n(Yp).forEach(t),lD=c(i),Ba=s(i,"H2",{class:!0});var Iw=n(Ba);qn=s(Iw,"A",{id:!0,class:!0,href:!0});var tK=n(qn);hv=s(tK,"SPAN",{});var aK=n(hv);p(uc.$$.fragment,aK),aK.forEach(t),tK.forEach(t),RL=c(Iw),fv=s(Iw,"SPAN",{});var sK=n(fv);BL=o(sK,"IterableDataset"),sK.forEach(t),Iw.forEach(t),cD=c(i),zn=s(i,"P",{});var Tw=n(zn);HL=o(Tw,"The base class "),Jp=s(Tw,"A",{href:!0});var nK=n(Jp);GL=o(nK,"IterableDataset"),nK.forEach(t),WL=o(Tw," implements an iterable Dataset backed by python generators."),Tw.forEach(t),dD=c(i),x=s(i,"DIV",{class:!0});var E=n(x);p(gc.$$.fragment,E),KL=c(E),uv=s(E,"P",{});var rK=n(uv);YL=o(rK,"A Dataset backed by an iterable."),rK.forEach(t),JL=c(E),Vn=s(E,"DIV",{class:!0});var Nw=n(Vn);p(_c.$$.fragment,Nw),XL=c(Nw),gv=s(Nw,"P",{});var oK=n(gv);ZL=o(oK,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),oK.forEach(t),Nw.forEach(t),QL=c(E),Un=s(E,"DIV",{class:!0});var Pw=n(Un);p(vc.$$.fragment,Pw),eF=c(Pw),_v=s(Pw,"P",{});var iK=n(_v);tF=o(iK,"Cast column to feature for decoding."),iK.forEach(t),Pw.forEach(t),aF=c(E),Mn=s(E,"DIV",{class:!0});var Lw=n(Mn);p(bc.$$.fragment,Lw),sF=c(Lw),vv=s(Lw,"P",{});var lK=n(vv);nF=o(lK,"Cast the dataset to a new set of features."),lK.forEach(t),Lw.forEach(t),rF=c(E),Xp=s(E,"DIV",{class:!0});var cK=n(Xp);p(yc.$$.fragment,cK),cK.forEach(t),oF=c(E),Ge=s(E,"DIV",{class:!0});var mo=n(Ge);p(Dc.$$.fragment,mo),iF=c(mo),bv=s(mo,"P",{});var dK=n(bv);lF=o(dK,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),dK.forEach(t),cF=c(mo),$c=s(mo,"P",{});var Fw=n($c);dF=o(Fw,"You can specify whether the function should be batched or not with the "),yv=s(Fw,"CODE",{});var mK=n(yv);mF=o(mK,"batched"),mK.forEach(t),pF=o(Fw," parameter:"),Fw.forEach(t),hF=c(mo),Ha=s(mo,"UL",{});var Af=n(Ha);Dv=s(Af,"LI",{});var pK=n(Dv);fF=o(pK,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),pK.forEach(t),uF=c(Af),$v=s(Af,"LI",{});var hK=n($v);gF=o(hK,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),hK.forEach(t),_F=c(Af),ne=s(Af,"LI",{});var Xe=n(ne);vF=o(Xe,"If batched is True and batch_size is "),wv=s(Xe,"CODE",{});var fK=n(wv);bF=o(fK,"n"),fK.forEach(t),yF=o(Xe," > 1, then the function takes a batch of "),xv=s(Xe,"CODE",{});var uK=n(xv);DF=o(uK,"n"),uK.forEach(t),$F=o(Xe," examples as input and can return a batch with "),Ev=s(Xe,"CODE",{});var gK=n(Ev);wF=o(gK,"n"),gK.forEach(t),xF=o(Xe,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),kv=s(Xe,"CODE",{});var _K=n(kv);EF=o(_K,"n"),_K.forEach(t),kF=o(Xe,` examples.
A batch is a dictionary, e.g. a batch of `),Iv=s(Xe,"CODE",{});var vK=n(Iv);IF=o(vK,"n"),vK.forEach(t),TF=o(Xe," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Xe.forEach(t),Af.forEach(t),mo.forEach(t),NF=c(E),Rn=s(E,"DIV",{class:!0});var Aw=n(Rn);p(wc.$$.fragment,Aw),PF=c(Aw),Tv=s(Aw,"P",{});var bK=n(Tv);LF=o(bK,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),bK.forEach(t),Aw.forEach(t),FF=c(E),Bn=s(E,"DIV",{class:!0});var Ow=n(Bn);p(xc.$$.fragment,Ow),AF=c(Ow),Nv=s(Ow,"P",{});var yK=n(Nv);OF=o(yK,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),yK.forEach(t),Ow.forEach(t),jF=c(E),de=s(E,"DIV",{class:!0});var ia=n(de);p(Ec.$$.fragment,ia),SF=c(ia),Pv=s(ia,"P",{});var DK=n(Pv);CF=o(DK,"Randomly shuffles the elements of this dataset."),DK.forEach(t),qF=c(ia),Lv=s(ia,"P",{});var $K=n(Lv);zF=o($K,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),$K.forEach(t),VF=c(ia),kc=s(ia,"P",{});var jw=n(kc);UF=o(jw,"For instance, if your dataset contains 10,000 elements but "),Fv=s(jw,"CODE",{});var wK=n(Fv);MF=o(wK,"buffer_size"),wK.forEach(t),RF=o(jw,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),jw.forEach(t),BF=c(ia),Ga=s(ia,"P",{});var Of=n(Ga);HF=o(Of,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Zp=s(Of,"A",{href:!0});var xK=n(Zp);GF=o(xK,"datasets.IterableDataset.skip()"),xK.forEach(t),WF=o(Of," or "),Qp=s(Of,"A",{href:!0});var EK=n(Qp);KF=o(EK,"datasets.IterableDataset.take()"),EK.forEach(t),YF=o(Of,`
then the order of the shards is kept unchanged.`),Of.forEach(t),ia.forEach(t),JF=c(E),Hn=s(E,"DIV",{class:!0});var Sw=n(Hn);p(Ic.$$.fragment,Sw),XF=c(Sw),Tc=s(Sw,"P",{});var Cw=n(Tc);ZF=o(Cw,"Create a new IterableDataset that skips the first "),Av=s(Cw,"CODE",{});var kK=n(Av);QF=o(kK,"n"),kK.forEach(t),eA=o(Cw," elements."),Cw.forEach(t),Sw.forEach(t),tA=c(E),Gn=s(E,"DIV",{class:!0});var qw=n(Gn);p(Nc.$$.fragment,qw),aA=c(qw),Pc=s(qw,"P",{});var zw=n(Pc);sA=o(zw,"Create a new IterableDataset with only the first "),Ov=s(zw,"CODE",{});var IK=n(Ov);nA=o(IK,"n"),IK.forEach(t),rA=o(zw," elements."),zw.forEach(t),qw.forEach(t),oA=c(E),Wn=s(E,"DIV",{class:!0});var Vw=n(Wn);p(Lc.$$.fragment,Vw),iA=c(Vw),eh=s(Vw,"P",{});var yM=n(eh);th=s(yM,"A",{href:!0});var TK=n(th);lA=o(TK,"datasets.DatasetInfo"),TK.forEach(t),cA=o(yM," object containing all the metadata in the dataset."),yM.forEach(t),Vw.forEach(t),dA=c(E),Kn=s(E,"DIV",{class:!0});var Uw=n(Kn);p(Fc.$$.fragment,Uw),mA=c(Uw),ah=s(Uw,"P",{});var DM=n(ah);sh=s(DM,"A",{href:!0});var NK=n(sh);pA=o(NK,"datasets.NamedSplit"),NK.forEach(t),hA=o(DM," object corresponding to a named dataset split."),DM.forEach(t),Uw.forEach(t),fA=c(E),nh=s(E,"DIV",{class:!0});var PK=n(nh);p(Ac.$$.fragment,PK),PK.forEach(t),uA=c(E),rh=s(E,"DIV",{class:!0});var LK=n(rh);p(Oc.$$.fragment,LK),LK.forEach(t),gA=c(E),oh=s(E,"DIV",{class:!0});var FK=n(oh);p(jc.$$.fragment,FK),FK.forEach(t),_A=c(E),ih=s(E,"DIV",{class:!0});var AK=n(ih);p(Sc.$$.fragment,AK),AK.forEach(t),vA=c(E),lh=s(E,"DIV",{class:!0});var OK=n(lh);p(Cc.$$.fragment,OK),OK.forEach(t),bA=c(E),ch=s(E,"DIV",{class:!0});var jK=n(ch);p(qc.$$.fragment,jK),jK.forEach(t),yA=c(E),dh=s(E,"DIV",{class:!0});var SK=n(dh);p(zc.$$.fragment,SK),SK.forEach(t),DA=c(E),mh=s(E,"DIV",{class:!0});var CK=n(mh);p(Vc.$$.fragment,CK),CK.forEach(t),$A=c(E),ph=s(E,"DIV",{class:!0});var qK=n(ph);p(Uc.$$.fragment,qK),qK.forEach(t),wA=c(E),hh=s(E,"DIV",{class:!0});var zK=n(hh);p(Mc.$$.fragment,zK),zK.forEach(t),xA=c(E),fh=s(E,"DIV",{class:!0});var VK=n(fh);p(Rc.$$.fragment,VK),VK.forEach(t),EA=c(E),uh=s(E,"DIV",{class:!0});var UK=n(uh);p(Bc.$$.fragment,UK),UK.forEach(t),kA=c(E),gh=s(E,"DIV",{class:!0});var MK=n(gh);p(Hc.$$.fragment,MK),MK.forEach(t),E.forEach(t),mD=c(i),Wa=s(i,"H2",{class:!0});var Mw=n(Wa);Yn=s(Mw,"A",{id:!0,class:!0,href:!0});var RK=n(Yn);jv=s(RK,"SPAN",{});var BK=n(jv);p(Gc.$$.fragment,BK),BK.forEach(t),RK.forEach(t),IA=c(Mw),Sv=s(Mw,"SPAN",{});var HK=n(Sv);TA=o(HK,"IterableDatasetDict"),HK.forEach(t),Mw.forEach(t),pD=c(i),Jn=s(i,"P",{});var Rw=n(Jn);NA=o(Rw,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Cv=s(Rw,"CODE",{});var GK=n(Cv);PA=o(GK,"IterableDataset"),GK.forEach(t),LA=o(Rw," objects as values."),Rw.forEach(t),hD=c(i),P=s(i,"DIV",{class:!0});var O=n(P);p(Wc.$$.fragment,O),FA=c(O),We=s(O,"DIV",{class:!0});var po=n(We);p(Kc.$$.fragment,po),AA=c(po),qv=s(po,"P",{});var WK=n(qv);OA=o(WK,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),WK.forEach(t),jA=c(po),Yc=s(po,"P",{});var Bw=n(Yc);SA=o(Bw,"You can specify whether the function should be batched or not with the "),zv=s(Bw,"CODE",{});var KK=n(zv);CA=o(KK,"batched"),KK.forEach(t),qA=o(Bw," parameter:"),Bw.forEach(t),zA=c(po),Ka=s(po,"UL",{});var jf=n(Ka);Vv=s(jf,"LI",{});var YK=n(Vv);VA=o(YK,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),YK.forEach(t),UA=c(jf),Uv=s(jf,"LI",{});var JK=n(Uv);MA=o(JK,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),JK.forEach(t),RA=c(jf),re=s(jf,"LI",{});var Ze=n(re);BA=o(Ze,"If batched is True and batch_size is "),Mv=s(Ze,"CODE",{});var XK=n(Mv);HA=o(XK,"n"),XK.forEach(t),GA=o(Ze," > 1, then the function takes a batch of "),Rv=s(Ze,"CODE",{});var ZK=n(Rv);WA=o(ZK,"n"),ZK.forEach(t),KA=o(Ze," examples as input and can return a batch with "),Bv=s(Ze,"CODE",{});var QK=n(Bv);YA=o(QK,"n"),QK.forEach(t),JA=o(Ze,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Hv=s(Ze,"CODE",{});var eY=n(Hv);XA=o(eY,"n"),eY.forEach(t),ZA=o(Ze,` examples.
A batch is a dictionary, e.g. a batch of `),Gv=s(Ze,"CODE",{});var tY=n(Gv);QA=o(tY,"n"),tY.forEach(t),eO=o(Ze," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Ze.forEach(t),jf.forEach(t),po.forEach(t),tO=c(O),Xn=s(O,"DIV",{class:!0});var Hw=n(Xn);p(Jc.$$.fragment,Hw),aO=c(Hw),Wv=s(Hw,"P",{});var aY=n(Wv);sO=o(aY,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),aY.forEach(t),Hw.forEach(t),nO=c(O),me=s(O,"DIV",{class:!0});var la=n(me);p(Xc.$$.fragment,la),rO=c(la),Kv=s(la,"P",{});var sY=n(Kv);oO=o(sY,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),sY.forEach(t),iO=c(la),Yv=s(la,"P",{});var nY=n(Yv);lO=o(nY,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),nY.forEach(t),cO=c(la),Zc=s(la,"P",{});var Gw=n(Zc);dO=o(Gw,"For instance, if your dataset contains 10,000 elements but "),Jv=s(Gw,"CODE",{});var rY=n(Jv);mO=o(rY,"buffer_size"),rY.forEach(t),pO=o(Gw,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),Gw.forEach(t),hO=c(la),Ya=s(la,"P",{});var Sf=n(Ya);fO=o(Sf,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),_h=s(Sf,"A",{href:!0});var oY=n(_h);uO=o(oY,"datasets.IterableDataset.skip()"),oY.forEach(t),gO=o(Sf," or "),vh=s(Sf,"A",{href:!0});var iY=n(vh);_O=o(iY,"datasets.IterableDataset.take()"),iY.forEach(t),vO=o(Sf,`
then the order of the shards is kept unchanged.`),Sf.forEach(t),la.forEach(t),bO=c(O),Zn=s(O,"DIV",{class:!0});var Ww=n(Zn);p(Qc.$$.fragment,Ww),yO=c(Ww),Xv=s(Ww,"P",{});var lY=n(Xv);DO=o(lY,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),lY.forEach(t),Ww.forEach(t),$O=c(O),Qn=s(O,"DIV",{class:!0});var Kw=n(Qn);p(ed.$$.fragment,Kw),wO=c(Kw),Zv=s(Kw,"P",{});var cY=n(Zv);xO=o(cY,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),cY.forEach(t),Kw.forEach(t),EO=c(O),er=s(O,"DIV",{class:!0});var Yw=n(er);p(td.$$.fragment,Yw),kO=c(Yw),Qv=s(Yw,"P",{});var dY=n(Qv);IO=o(dY,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),dY.forEach(t),Yw.forEach(t),TO=c(O),tr=s(O,"DIV",{class:!0});var Jw=n(tr);p(ad.$$.fragment,Jw),NO=c(Jw),eb=s(Jw,"P",{});var mY=n(eb);PO=o(mY,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),mY.forEach(t),Jw.forEach(t),LO=c(O),ar=s(O,"DIV",{class:!0});var Xw=n(ar);p(sd.$$.fragment,Xw),FO=c(Xw),tb=s(Xw,"P",{});var pY=n(tb);AO=o(pY,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),pY.forEach(t),Xw.forEach(t),OO=c(O),sr=s(O,"DIV",{class:!0});var Zw=n(sr);p(nd.$$.fragment,Zw),jO=c(Zw),ab=s(Zw,"P",{});var hY=n(ab);SO=o(hY,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),hY.forEach(t),Zw.forEach(t),O.forEach(t),fD=c(i),Ja=s(i,"H2",{class:!0});var Qw=n(Ja);nr=s(Qw,"A",{id:!0,class:!0,href:!0});var fY=n(nr);sb=s(fY,"SPAN",{});var uY=n(sb);p(rd.$$.fragment,uY),uY.forEach(t),fY.forEach(t),CO=c(Qw),nb=s(Qw,"SPAN",{});var gY=n(nb);qO=o(gY,"Features"),gY.forEach(t),Qw.forEach(t),uD=c(i),T=s(i,"DIV",{class:!0});var N=n(T);p(od.$$.fragment,N),zO=c(N),rb=s(N,"P",{});var _Y=n(rb);VO=o(_Y,"A special dictionary that defines the internal structure of a dataset."),_Y.forEach(t),UO=c(N),id=s(N,"P",{});var e0=n(id);MO=o(e0,"Instantiated with a dictionary of type "),ob=s(e0,"CODE",{});var vY=n(ob);RO=o(vY,"dict[str, FieldType]"),vY.forEach(t),BO=o(e0,`, where keys are the desired column names,
and values are the type of that column.`),e0.forEach(t),HO=c(N),bh=s(N,"P",{});var $M=n(bh);ib=s($M,"CODE",{});var bY=n(ib);GO=o(bY,"FieldType"),bY.forEach(t),WO=o($M," can be one of the following:"),$M.forEach(t),KO=c(N),C=s(N,"UL",{});var X=n(C);lb=s(X,"LI",{});var yY=n(lb);Mt=s(yY,"P",{});var qm=n(Mt);YO=o(qm,"a "),yh=s(qm,"A",{href:!0});var DY=n(yh);JO=o(DY,"datasets.Value"),DY.forEach(t),XO=o(qm," feature specifies a single typed value, e.g. "),cb=s(qm,"CODE",{});var $Y=n(cb);ZO=o($Y,"int64"),$Y.forEach(t),QO=o(qm," or "),db=s(qm,"CODE",{});var wY=n(db);ej=o(wY,"string"),wY.forEach(t),qm.forEach(t),yY.forEach(t),tj=c(X),mb=s(X,"LI",{});var xY=n(mb);ld=s(xY,"P",{});var t0=n(ld);aj=o(t0,"a "),Dh=s(t0,"A",{href:!0});var EY=n(Dh);sj=o(EY,"datasets.ClassLabel"),EY.forEach(t),nj=o(t0,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),t0.forEach(t),xY.forEach(t),rj=c(X),pb=s(X,"LI",{});var kY=n(pb);cd=s(kY,"P",{});var a0=n(cd);oj=o(a0,"a python "),hb=s(a0,"CODE",{});var IY=n(hb);ij=o(IY,"dict"),IY.forEach(t),lj=o(a0,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),a0.forEach(t),kY.forEach(t),cj=c(X),dd=s(X,"LI",{});var s0=n(dd);Ee=s(s0,"P",{});var ca=n(Ee);dj=o(ca,"a python "),fb=s(ca,"CODE",{});var TY=n(fb);mj=o(TY,"list"),TY.forEach(t),pj=o(ca," or a "),$h=s(ca,"A",{href:!0});var NY=n($h);hj=o(NY,"datasets.Sequence"),NY.forEach(t),fj=o(ca,` specifies that the field contains a list of objects. The python
`),ub=s(ca,"CODE",{});var PY=n(ub);uj=o(PY,"list"),PY.forEach(t),gj=o(ca," or "),wh=s(ca,"A",{href:!0});var LY=n(wh);_j=o(LY,"datasets.Sequence"),LY.forEach(t),vj=o(ca,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),ca.forEach(t),bj=c(s0),p(rr.$$.fragment,s0),s0.forEach(t),yj=c(X),gb=s(X,"LI",{});var FY=n(gb);ke=s(FY,"P",{});var da=n(ke);Dj=o(da,"a "),xh=s(da,"A",{href:!0});var AY=n(xh);$j=o(AY,"Array2D"),AY.forEach(t),wj=o(da,", "),Eh=s(da,"A",{href:!0});var OY=n(Eh);xj=o(OY,"Array3D"),OY.forEach(t),Ej=o(da,", "),kh=s(da,"A",{href:!0});var jY=n(kh);kj=o(jY,"Array4D"),jY.forEach(t),Ij=o(da," or "),Ih=s(da,"A",{href:!0});var SY=n(Ih);Tj=o(SY,"Array5D"),SY.forEach(t),Nj=o(da," feature for multidimensional arrays"),da.forEach(t),FY.forEach(t),Pj=c(X),_b=s(X,"LI",{});var CY=n(_b);md=s(CY,"P",{});var n0=n(md);Lj=o(n0,"an "),Th=s(n0,"A",{href:!0});var qY=n(Th);Fj=o(qY,"Audio"),qY.forEach(t),Aj=o(n0,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),n0.forEach(t),CY.forEach(t),Oj=c(X),vb=s(X,"LI",{});var zY=n(vb);ut=s(zY,"P",{});var ho=n(ut);jj=o(ho,"an "),Nh=s(ho,"A",{href:!0});var VY=n(Nh);Sj=o(VY,"Image"),VY.forEach(t),Cj=o(ho," feature to store the absolute path to an image file, an "),bb=s(ho,"CODE",{});var UY=n(bb);qj=o(UY,"np.ndarray"),UY.forEach(t),zj=o(ho," object, a "),yb=s(ho,"CODE",{});var MY=n(yb);Vj=o(MY,"PIL.Image.Image"),MY.forEach(t),Uj=o(ho,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),ho.forEach(t),zY.forEach(t),Mj=c(X),Db=s(X,"LI",{});var RY=n(Db);or=s(RY,"P",{});var W2=n(or);Ph=s(W2,"A",{href:!0});var BY=n(Ph);Rj=o(BY,"datasets.Translation"),BY.forEach(t),Bj=o(W2," and "),Lh=s(W2,"A",{href:!0});var HY=n(Lh);Hj=o(HY,"datasets.TranslationVariableLanguages"),HY.forEach(t),Gj=o(W2,", the two features specific to Machine Translation"),W2.forEach(t),RY.forEach(t),X.forEach(t),Wj=c(N),ir=s(N,"DIV",{class:!0});var r0=n(ir);p(pd.$$.fragment,r0),Kj=c(r0),$b=s(r0,"P",{});var GY=n($b);Yj=o(GY,"Make a deep copy of Features."),GY.forEach(t),r0.forEach(t),Jj=c(N),lr=s(N,"DIV",{class:!0});var o0=n(lr);p(hd.$$.fragment,o0),Xj=c(o0),wb=s(o0,"P",{});var WY=n(wb);Zj=o(WY,"Decode batch with custom feature decoding."),WY.forEach(t),o0.forEach(t),Qj=c(N),cr=s(N,"DIV",{class:!0});var i0=n(cr);p(fd.$$.fragment,i0),eS=c(i0),xb=s(i0,"P",{});var KY=n(xb);tS=o(KY,"Decode column with custom feature decoding."),KY.forEach(t),i0.forEach(t),aS=c(N),dr=s(N,"DIV",{class:!0});var l0=n(dr);p(ud.$$.fragment,l0),sS=c(l0),Eb=s(l0,"P",{});var YY=n(Eb);nS=o(YY,"Decode example with custom feature decoding."),YY.forEach(t),l0.forEach(t),rS=c(N),mr=s(N,"DIV",{class:!0});var c0=n(mr);p(gd.$$.fragment,c0),oS=c(c0),kb=s(c0,"P",{});var JY=n(kb);iS=o(JY,"Encode batch into a format for Arrow."),JY.forEach(t),c0.forEach(t),lS=c(N),pr=s(N,"DIV",{class:!0});var d0=n(pr);p(_d.$$.fragment,d0),cS=c(d0),Ib=s(d0,"P",{});var XY=n(Ib);dS=o(XY,"Encode example into a format for Arrow."),XY.forEach(t),d0.forEach(t),mS=c(N),Rt=s(N,"DIV",{class:!0});var Cf=n(Rt);p(vd.$$.fragment,Cf),pS=c(Cf),Tb=s(Cf,"P",{});var ZY=n(Tb);hS=o(ZY,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),ZY.forEach(t),fS=c(Cf),Nb=s(Cf,"P",{});var QY=n(Nb);uS=o(QY,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),QY.forEach(t),Cf.forEach(t),gS=c(N),hr=s(N,"DIV",{class:!0});var m0=n(hr);p(bd.$$.fragment,m0),_S=c(m0),Pb=s(m0,"P",{});var eJ=n(Pb);vS=o(eJ,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),eJ.forEach(t),m0.forEach(t),bS=c(N),Y=s(N,"DIV",{class:!0});var Qe=n(Y);p(yd.$$.fragment,Qe),yS=c(Qe),Lb=s(Qe,"P",{});var tJ=n(Lb);DS=o(tJ,"Construct Features from dict."),tJ.forEach(t),$S=c(Qe),Fb=s(Qe,"P",{});var aJ=n(Fb);wS=o(aJ,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),aJ.forEach(t),xS=c(Qe),gt=s(Qe,"P",{});var fo=n(gt);ES=o(fo,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),Fh=s(fo,"A",{href:!0});var sJ=n(Fh);kS=o(sJ,"DatasetInfo"),sJ.forEach(t),IS=o(fo,` that was dumped to a JSON object. This acts as an analogue to
`),Ah=s(fo,"A",{href:!0});var nJ=n(Ah);TS=o(nJ,"Features.from_arrow_schema()"),nJ.forEach(t),NS=o(fo,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),Oh=s(fo,"A",{href:!0});var rJ=n(Oh);PS=o(rJ,"Value"),rJ.forEach(t),LS=o(fo," automatically performs."),fo.forEach(t),FS=c(Qe),Ab=s(Qe,"P",{});var oJ=n(Ab);AS=o(oJ,"Example:"),oJ.forEach(t),OS=c(Qe),p(Dd.$$.fragment,Qe),Qe.forEach(t),jS=c(N),pe=s(N,"DIV",{class:!0});var ma=n(pe);p($d.$$.fragment,ma),SS=c(ma),Ob=s(ma,"P",{});var iJ=n(Ob);CS=o(iJ,"Reorder Features fields to match the field order of other Features."),iJ.forEach(t),qS=c(ma),jb=s(ma,"P",{});var lJ=n(jb);zS=o(lJ,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),lJ.forEach(t),VS=c(ma),Sb=s(ma,"P",{});var cJ=n(Sb);US=o(cJ,"Example:"),cJ.forEach(t),MS=c(ma),p(wd.$$.fragment,ma),ma.forEach(t),N.forEach(t),gD=c(i),Xa=s(i,"DIV",{class:!0});var p0=n(Xa);p(xd.$$.fragment,p0),RS=c(p0),Cb=s(p0,"P",{});var dJ=n(Cb);BS=o(dJ,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),dJ.forEach(t),p0.forEach(t),_D=c(i),B=s(i,"DIV",{class:!0});var et=n(B);p(Ed.$$.fragment,et),HS=c(et),qb=s(et,"P",{});var mJ=n(qb);GS=o(mJ,"Feature type for integer class labels."),mJ.forEach(t),WS=c(et),kd=s(et,"P",{});var h0=n(kd);KS=o(h0,"There are 3 ways to define a "),zb=s(h0,"EM",{});var pJ=n(zb);YS=o(pJ,"ClassLabel"),pJ.forEach(t),JS=o(h0,", which correspond to the 3 arguments:"),h0.forEach(t),XS=c(et),Za=s(et,"UL",{});var qf=n(Za);jh=s(qf,"LI",{});var wM=n(jh);Vb=s(wM,"EM",{});var hJ=n(Vb);ZS=o(hJ,"num_classes"),hJ.forEach(t),QS=o(wM,": Create 0 to (num_classes-1) labels."),wM.forEach(t),eC=c(qf),Sh=s(qf,"LI",{});var xM=n(Sh);Ub=s(xM,"EM",{});var fJ=n(Ub);tC=o(fJ,"names"),fJ.forEach(t),aC=o(xM,": List of label strings."),xM.forEach(t),sC=c(qf),Ch=s(qf,"LI",{});var EM=n(Ch);Mb=s(EM,"EM",{});var uJ=n(Mb);nC=o(uJ,"names_file"),uJ.forEach(t),rC=o(EM,": File containing the list of labels."),EM.forEach(t),qf.forEach(t),oC=c(et),fr=s(et,"DIV",{class:!0});var f0=n(fr);p(Id.$$.fragment,f0),iC=c(f0),Rb=s(f0,"P",{});var gJ=n(Rb);lC=o(gJ,"Conversion integer => class name string."),gJ.forEach(t),f0.forEach(t),cC=c(et),ur=s(et,"DIV",{class:!0});var u0=n(ur);p(Td.$$.fragment,u0),dC=c(u0),Bb=s(u0,"P",{});var _J=n(Bb);mC=o(_J,"Conversion class name string => integer."),_J.forEach(t),u0.forEach(t),et.forEach(t),vD=c(i),_t=s(i,"DIV",{class:!0});var zf=n(_t);p(Nd.$$.fragment,zf),pC=c(zf),Hb=s(zf,"P",{});var vJ=n(Hb);hC=o(vJ,"The Value dtypes are as follows:"),vJ.forEach(t),fC=c(zf),Gb=s(zf,"P",{});var bJ=n(Gb);uC=o(bJ,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),bJ.forEach(t),zf.forEach(t),bD=c(i),q=s(i,"DIV",{class:!0});var fe=n(q);p(Pd.$$.fragment,fe),gC=c(fe),qh=s(fe,"P",{});var kM=n(qh);Wb=s(kM,"CODE",{});var yJ=n(Wb);_C=o(yJ,"FeatureConnector"),yJ.forEach(t),vC=o(kM,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),kM.forEach(t),bC=c(fe),Kb=s(fe,"P",{});var DJ=n(Kb);yC=o(DJ,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),DJ.forEach(t),DC=c(fe),Ld=s(fe,"P",{});var g0=n(Ld);$C=o(g0,"Output: A dictionary mapping string language codes to translations as "),Yb=s(g0,"CODE",{});var $J=n(Yb);wC=o($J,"Text"),$J.forEach(t),xC=o(g0,`
features.`),g0.forEach(t),EC=c(fe),Jb=s(fe,"P",{});var wJ=n(Jb);kC=o(wJ,"Example:"),wJ.forEach(t),IC=c(fe),p(Fd.$$.fragment,fe),TC=c(fe),gr=s(fe,"DIV",{class:!0});var _0=n(gr);p(Ad.$$.fragment,_0),NC=c(_0),Xb=s(_0,"P",{});var xJ=n(Xb);PC=o(xJ,"Flatten the Translation feature into a dictionary."),xJ.forEach(t),_0.forEach(t),fe.forEach(t),yD=c(i),z=s(i,"DIV",{class:!0});var ue=n(z);p(Od.$$.fragment,ue),LC=c(ue),zh=s(ue,"P",{});var IM=n(zh);Zb=s(IM,"CODE",{});var EJ=n(Zb);FC=o(EJ,"FeatureConnector"),EJ.forEach(t),AC=o(IM,` for translations with variable languages per example.
Here for compatiblity with tfds.`),IM.forEach(t),OC=c(ue),Qb=s(ue,"P",{});var kJ=n(Qb);jC=o(kJ,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),kJ.forEach(t),SC=c(ue),ey=s(ue,"P",{});var IJ=n(ey);CC=o(IJ,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),IJ.forEach(t),qC=c(ue),ty=s(ue,"P",{});var TJ=n(ty);zC=o(TJ,"Example:"),TJ.forEach(t),VC=c(ue),p(jd.$$.fragment,ue),UC=c(ue),_r=s(ue,"DIV",{class:!0});var v0=n(_r);p(Sd.$$.fragment,v0),MC=c(v0),ay=s(v0,"P",{});var NJ=n(ay);RC=o(NJ,"Flatten the TranslationVariableLanguages feature into a dictionary."),NJ.forEach(t),v0.forEach(t),ue.forEach(t),DD=c(i),Cd=s(i,"DIV",{class:!0});var PJ=n(Cd);p(qd.$$.fragment,PJ),PJ.forEach(t),$D=c(i),zd=s(i,"DIV",{class:!0});var LJ=n(zd);p(Vd.$$.fragment,LJ),LJ.forEach(t),wD=c(i),Ud=s(i,"DIV",{class:!0});var FJ=n(Ud);p(Md.$$.fragment,FJ),FJ.forEach(t),xD=c(i),Rd=s(i,"DIV",{class:!0});var AJ=n(Rd);p(Bd.$$.fragment,AJ),AJ.forEach(t),ED=c(i),L=s(i,"DIV",{class:!0});var U=n(L);p(Hd.$$.fragment,U),BC=c(U),sy=s(U,"P",{});var OJ=n(sy);HC=o(OJ,"Audio Feature to extract audio data from an audio file."),OJ.forEach(t),GC=c(U),ny=s(U,"P",{});var jJ=n(ny);WC=o(jJ,"Input: The Audio feature accepts as input:"),jJ.forEach(t),KC=c(U),Qa=s(U,"UL",{});var Vf=n(Qa);ry=s(Vf,"LI",{});var SJ=n(ry);Gd=s(SJ,"P",{});var b0=n(Gd);YC=o(b0,"A "),oy=s(b0,"CODE",{});var CJ=n(oy);JC=o(CJ,"str"),CJ.forEach(t),XC=o(b0,": Absolute path to the audio file (i.e. random access is allowed)."),b0.forEach(t),SJ.forEach(t),ZC=c(Vf),es=s(Vf,"LI",{});var Uf=n(es);Wd=s(Uf,"P",{});var y0=n(Wd);QC=o(y0,"A "),iy=s(y0,"CODE",{});var qJ=n(iy);eq=o(qJ,"dict"),qJ.forEach(t),tq=o(y0," with the keys:"),y0.forEach(t),aq=c(Uf),Kd=s(Uf,"UL",{});var D0=n(Kd);ly=s(D0,"LI",{});var zJ=n(ly);sq=o(zJ,"path: String with relative path of the audio file to the archive file."),zJ.forEach(t),nq=c(D0),cy=s(D0,"LI",{});var VJ=n(cy);rq=o(VJ,"bytes: Bytes content of the audio file."),VJ.forEach(t),D0.forEach(t),oq=c(Uf),dy=s(Uf,"P",{});var UJ=n(dy);iq=o(UJ,"This is useful for archived files with sequential access."),UJ.forEach(t),Uf.forEach(t),lq=c(Vf),ts=s(Vf,"LI",{});var Mf=n(ts);Yd=s(Mf,"P",{});var $0=n(Yd);cq=o($0,"A "),my=s($0,"CODE",{});var MJ=n(my);dq=o(MJ,"dict"),MJ.forEach(t),mq=o($0," with the keys:"),$0.forEach(t),pq=c(Mf),as=s(Mf,"UL",{});var Rf=n(as);py=s(Rf,"LI",{});var RJ=n(py);hq=o(RJ,"path: String with relative path of the audio file to the archive file."),RJ.forEach(t),fq=c(Rf),hy=s(Rf,"LI",{});var BJ=n(hy);uq=o(BJ,"array: Array containing the audio sample"),BJ.forEach(t),gq=c(Rf),fy=s(Rf,"LI",{});var HJ=n(fy);_q=o(HJ,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),HJ.forEach(t),Rf.forEach(t),vq=c(Mf),uy=s(Mf,"P",{});var GJ=n(uy);bq=o(GJ,"This is useful for archived files with sequential access."),GJ.forEach(t),Mf.forEach(t),Vf.forEach(t),yq=c(U),Bt=s(U,"DIV",{class:!0});var Bf=n(Bt);p(Jd.$$.fragment,Bf),Dq=c(Bf),gy=s(Bf,"P",{});var WJ=n(gy);$q=o(WJ,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),WJ.forEach(t),wq=c(Bf),vt=s(Bf,"UL",{});var uo=n(vt);_y=s(uo,"LI",{});var KJ=n(_y);xq=o(KJ,"pa.string() - it must contain the \u201Cpath\u201D data"),KJ.forEach(t),Eq=c(uo),vy=s(uo,"LI",{});var YJ=n(vy);kq=o(YJ,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),YJ.forEach(t),Iq=c(uo),by=s(uo,"LI",{});var JJ=n(by);Tq=o(JJ,"pa.struct({\u201Cpath\u201D: pa.string()})"),JJ.forEach(t),Nq=c(uo),yy=s(uo,"LI",{});var XJ=n(yy);Pq=o(XJ,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),XJ.forEach(t),uo.forEach(t),Bf.forEach(t),Lq=c(U),vr=s(U,"DIV",{class:!0});var w0=n(vr);p(Xd.$$.fragment,w0),Fq=c(w0),Dy=s(w0,"P",{});var ZJ=n(Dy);Aq=o(ZJ,"Decode example audio file into audio data."),ZJ.forEach(t),w0.forEach(t),Oq=c(U),br=s(U,"DIV",{class:!0});var x0=n(br);p(Zd.$$.fragment,x0),jq=c(x0),$y=s(x0,"P",{});var QJ=n($y);Sq=o(QJ,"Embed audio files into the Arrow array."),QJ.forEach(t),x0.forEach(t),Cq=c(U),yr=s(U,"DIV",{class:!0});var E0=n(yr);p(Qd.$$.fragment,E0),qq=c(E0),wy=s(E0,"P",{});var eX=n(wy);zq=o(eX,"Encode example into a format for Arrow."),eX.forEach(t),E0.forEach(t),Vq=c(U),Dr=s(U,"DIV",{class:!0});var k0=n(Dr);p(em.$$.fragment,k0),Uq=c(k0),xy=s(k0,"P",{});var tX=n(xy);Mq=o(tX,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),tX.forEach(t),k0.forEach(t),U.forEach(t),kD=c(i),F=s(i,"DIV",{class:!0});var M=n(F);p(tm.$$.fragment,M),Rq=c(M),Ey=s(M,"P",{});var aX=n(Ey);Bq=o(aX,"Image feature to read image data from an image file."),aX.forEach(t),Hq=c(M),ky=s(M,"P",{});var sX=n(ky);Gq=o(sX,"Input: The Image feature accepts as input:"),sX.forEach(t),Wq=c(M),bt=s(M,"UL",{});var go=n(bt);Iy=s(go,"LI",{});var nX=n(Iy);am=s(nX,"P",{});var I0=n(am);Kq=o(I0,"A "),Ty=s(I0,"CODE",{});var rX=n(Ty);Yq=o(rX,"str"),rX.forEach(t),Jq=o(I0,": Absolute path to the image file (i.e. random access is allowed)."),I0.forEach(t),nX.forEach(t),Xq=c(go),ss=s(go,"LI",{});var Hf=n(ss);sm=s(Hf,"P",{});var T0=n(sm);Zq=o(T0,"A "),Ny=s(T0,"CODE",{});var oX=n(Ny);Qq=o(oX,"dict"),oX.forEach(t),ez=o(T0," with the keys:"),T0.forEach(t),tz=c(Hf),nm=s(Hf,"UL",{});var N0=n(nm);Py=s(N0,"LI",{});var iX=n(Py);az=o(iX,"path: String with relative path of the image file to the archive file."),iX.forEach(t),sz=c(N0),Ly=s(N0,"LI",{});var lX=n(Ly);nz=o(lX,"bytes: Bytes of the image file."),lX.forEach(t),N0.forEach(t),rz=c(Hf),Fy=s(Hf,"P",{});var cX=n(Fy);oz=o(cX,"This is useful for archived files with sequential access."),cX.forEach(t),Hf.forEach(t),iz=c(go),Ay=s(go,"LI",{});var dX=n(Ay);rm=s(dX,"P",{});var P0=n(rm);lz=o(P0,"An "),Oy=s(P0,"CODE",{});var mX=n(Oy);cz=o(mX,"np.ndarray"),mX.forEach(t),dz=o(P0,": NumPy array representing an image."),P0.forEach(t),dX.forEach(t),mz=c(go),jy=s(go,"LI",{});var pX=n(jy);om=s(pX,"P",{});var L0=n(om);pz=o(L0,"A "),Sy=s(L0,"CODE",{});var hX=n(Sy);hz=o(hX,"PIL.Image.Image"),hX.forEach(t),fz=o(L0,": PIL image object."),L0.forEach(t),pX.forEach(t),go.forEach(t),uz=c(M),Ht=s(M,"DIV",{class:!0});var Gf=n(Ht);p(im.$$.fragment,Gf),gz=c(Gf),Cy=s(Gf,"P",{});var fX=n(Cy);_z=o(fX,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),fX.forEach(t),vz=c(Gf),Ie=s(Gf,"UL",{});var pa=n(Ie);qy=s(pa,"LI",{});var uX=n(qy);bz=o(uX,"pa.string() - it must contain the \u201Cpath\u201D data"),uX.forEach(t),yz=c(pa),zy=s(pa,"LI",{});var gX=n(zy);Dz=o(gX,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),gX.forEach(t),$z=c(pa),Vy=s(pa,"LI",{});var _X=n(Vy);wz=o(_X,"pa.struct({\u201Cpath\u201D: pa.string()})"),_X.forEach(t),xz=c(pa),Uy=s(pa,"LI",{});var vX=n(Uy);Ez=o(vX,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),vX.forEach(t),kz=c(pa),My=s(pa,"LI",{});var bX=n(My);Iz=o(bX,"pa.list(*) - it must contain the image array data"),bX.forEach(t),pa.forEach(t),Gf.forEach(t),Tz=c(M),$r=s(M,"DIV",{class:!0});var F0=n($r);p(lm.$$.fragment,F0),Nz=c(F0),Ry=s(F0,"P",{});var yX=n(Ry);Pz=o(yX,"Decode example image file into image data."),yX.forEach(t),F0.forEach(t),Lz=c(M),wr=s(M,"DIV",{class:!0});var A0=n(wr);p(cm.$$.fragment,A0),Fz=c(A0),By=s(A0,"P",{});var DX=n(By);Az=o(DX,"Embed image files into the Arrow array."),DX.forEach(t),A0.forEach(t),Oz=c(M),xr=s(M,"DIV",{class:!0});var O0=n(xr);p(dm.$$.fragment,O0),jz=c(O0),Hy=s(O0,"P",{});var $X=n(Hy);Sz=o($X,"Encode example into a format for Arrow."),$X.forEach(t),O0.forEach(t),Cz=c(M),Er=s(M,"DIV",{class:!0});var j0=n(Er);p(mm.$$.fragment,j0),qz=c(j0),Gy=s(j0,"P",{});var wX=n(Gy);zz=o(wX,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),wX.forEach(t),j0.forEach(t),M.forEach(t),ID=c(i),ns=s(i,"H2",{class:!0});var S0=n(ns);kr=s(S0,"A",{id:!0,class:!0,href:!0});var xX=n(kr);Wy=s(xX,"SPAN",{});var EX=n(Wy);p(pm.$$.fragment,EX),EX.forEach(t),xX.forEach(t),Vz=c(S0),Ky=s(S0,"SPAN",{});var kX=n(Ky);Uz=o(kX,"MetricInfo"),kX.forEach(t),S0.forEach(t),TD=c(i),H=s(i,"DIV",{class:!0});var tt=n(H);p(hm.$$.fragment,tt),Mz=c(tt),Yy=s(tt,"P",{});var IX=n(Yy);Rz=o(IX,"Information about a metric."),IX.forEach(t),Bz=c(tt),Vh=s(tt,"P",{});var TM=n(Vh);Jy=s(TM,"CODE",{});var TX=n(Jy);Hz=o(TX,"MetricInfo"),TX.forEach(t),Gz=o(TM,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),TM.forEach(t),Wz=c(tt),Xy=s(tt,"P",{});var NX=n(Xy);Kz=o(NX,"Note: Not all fields are known on construction and may be updated later."),NX.forEach(t),Yz=c(tt),Ir=s(tt,"DIV",{class:!0});var C0=n(Ir);p(fm.$$.fragment,C0),Jz=c(C0),um=s(C0,"P",{});var q0=n(um);Xz=o(q0,"Create MetricInfo from the JSON file in "),Zy=s(q0,"CODE",{});var PX=n(Zy);Zz=o(PX,"metric_info_dir"),PX.forEach(t),Qz=o(q0,"."),q0.forEach(t),C0.forEach(t),eV=c(tt),Tr=s(tt,"DIV",{class:!0});var z0=n(Tr);p(gm.$$.fragment,z0),tV=c(z0),rs=s(z0,"P",{});var Wf=n(rs);aV=o(Wf,"Write "),Qy=s(Wf,"CODE",{});var LX=n(Qy);sV=o(LX,"MetricInfo"),LX.forEach(t),nV=o(Wf," as JSON to "),e2=s(Wf,"CODE",{});var FX=n(e2);rV=o(FX,"metric_info_dir"),FX.forEach(t),oV=o(Wf,`.
Also save the license separately in LICENCE.`),Wf.forEach(t),z0.forEach(t),tt.forEach(t),ND=c(i),os=s(i,"H2",{class:!0});var V0=n(os);Nr=s(V0,"A",{id:!0,class:!0,href:!0});var AX=n(Nr);t2=s(AX,"SPAN",{});var OX=n(t2);p(_m.$$.fragment,OX),OX.forEach(t),AX.forEach(t),iV=c(V0),a2=s(V0,"SPAN",{});var jX=n(a2);lV=o(jX,"Metric"),jX.forEach(t),V0.forEach(t),PD=c(i),Gt=s(i,"P",{});var Kf=n(Gt);cV=o(Kf,"The base class "),s2=s(Kf,"CODE",{});var SX=n(s2);dV=o(SX,"Metric"),SX.forEach(t),mV=o(Kf," implements a Metric backed by one or several "),Uh=s(Kf,"A",{href:!0});var CX=n(Uh);pV=o(CX,"Dataset"),CX.forEach(t),hV=o(Kf,"."),Kf.forEach(t),LD=c(i),G=s(i,"DIV",{class:!0});var at=n(G);p(vm.$$.fragment,at),fV=c(at),n2=s(at,"P",{});var qX=n(n2);uV=o(qX,"A Metric is the base class and common API for all metrics."),qX.forEach(t),gV=c(at),Pr=s(at,"DIV",{class:!0});var U0=n(Pr);p(bm.$$.fragment,U0),_V=c(U0),r2=s(U0,"P",{});var zX=n(r2);vV=o(zX,"Add one prediction and reference for the metric\u2019s stack."),zX.forEach(t),U0.forEach(t),bV=c(at),Lr=s(at,"DIV",{class:!0});var M0=n(Lr);p(ym.$$.fragment,M0),yV=c(M0),o2=s(M0,"P",{});var VX=n(o2);DV=o(VX,"Add a batch of predictions and references for the metric\u2019s stack."),VX.forEach(t),M0.forEach(t),$V=c(at),Wt=s(at,"DIV",{class:!0});var Yf=n(Wt);p(Dm.$$.fragment,Yf),wV=c(Yf),i2=s(Yf,"P",{});var UX=n(i2);xV=o(UX,"Compute the metrics."),UX.forEach(t),EV=c(Yf),l2=s(Yf,"P",{});var MX=n(l2);kV=o(MX,"Usage of positional arguments is not allowed to prevent mistakes."),MX.forEach(t),Yf.forEach(t),IV=c(at),Fr=s(at,"DIV",{class:!0});var R0=n(Fr);p($m.$$.fragment,R0),TV=c(R0),c2=s(R0,"P",{});var RX=n(c2);NV=o(RX,"Downloads and prepares dataset for reading."),RX.forEach(t),R0.forEach(t),at.forEach(t),FD=c(i),is=s(i,"H2",{class:!0});var B0=n(is);Ar=s(B0,"A",{id:!0,class:!0,href:!0});var BX=n(Ar);d2=s(BX,"SPAN",{});var HX=n(d2);p(wm.$$.fragment,HX),HX.forEach(t),BX.forEach(t),PV=c(B0),m2=s(B0,"SPAN",{});var GX=n(m2);LV=o(GX,"Filesystems"),GX.forEach(t),B0.forEach(t),AD=c(i),k=s(i,"DIV",{class:!0});var I=n(k);p(xm.$$.fragment,I),FV=c(I),p2=s(I,"P",{});var WX=n(p2);AV=o(WX,"Access S3 as if it were a file system."),WX.forEach(t),OV=c(I),h2=s(I,"P",{});var KX=n(h2);jV=o(KX,`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),KX.forEach(t),SV=c(I),yt=s(I,"P",{});var _o=n(yt);CV=o(_o,"Provide credentials either explicitly ("),f2=s(_o,"CODE",{});var YX=n(f2);qV=o(YX,"key="),YX.forEach(t),zV=o(_o,", "),u2=s(_o,"CODE",{});var JX=n(u2);VV=o(JX,"secret="),JX.forEach(t),UV=o(_o,`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),g2=s(_o,"CODE",{});var XX=n(g2);MV=o(XX,"anon=True"),XX.forEach(t),RV=o(_o,"."),_o.forEach(t),BV=c(I),_2=s(I,"P",{});var ZX=n(_2);HV=o(ZX,"The following parameters are passed on to fsspec:"),ZX.forEach(t),GV=c(I),v2=s(I,"P",{});var QX=n(v2);WV=o(QX,`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),QX.forEach(t),KV=c(I),b2=s(I,"P",{});var eZ=n(b2);YV=o(eZ,"."),eZ.forEach(t),JV=c(I),Ke=s(I,"P",{});var gs=n(Ke);y2=s(gs,"CODE",{});var tZ=n(y2);XV=o(tZ,"datasets.filesystems.S3FileSystem"),tZ.forEach(t),ZV=o(gs," is a subclass of s3fs.S3FileSystem]("),Em=s(gs,"A",{href:!0,rel:!0});var aZ=n(Em);QV=o(aZ,"https://s3fs.readthedocs.io/en/latest/api.html"),aZ.forEach(t),eU=o(gs,`), which is a known
implementation of `),D2=s(gs,"CODE",{});var sZ=n(D2);tU=o(sZ,"fsspec"),sZ.forEach(t),aU=o(gs,". Filesystem Spec "),km=s(gs,"A",{href:!0,rel:!0});var nZ=n(km);sU=o(nZ,"FSSPEC"),nZ.forEach(t),nU=o(gs,` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),gs.forEach(t),rU=c(I),$2=s(I,"P",{});var rZ=n($2);oU=o(rZ,"Examples:"),rZ.forEach(t),iU=c(I),w2=s(I,"P",{});var oZ=n(w2);lU=o(oZ,"Listing files from public s3 bucket."),oZ.forEach(t),cU=c(I),p(Im.$$.fragment,I),dU=c(I),ls=s(I,"P",{});var Jf=n(ls);mU=o(Jf,"Listing files from private s3 bucket using "),x2=s(Jf,"CODE",{});var iZ=n(x2);pU=o(iZ,"aws_access_key_id"),iZ.forEach(t),hU=o(Jf," and "),E2=s(Jf,"CODE",{});var lZ=n(E2);fU=o(lZ,"aws_secret_access_key"),lZ.forEach(t),uU=o(Jf,"."),Jf.forEach(t),gU=c(I),p(Tm.$$.fragment,I),_U=c(I),Dt=s(I,"P",{});var vo=n(Dt);vU=o(vo,"Using "),k2=s(vo,"CODE",{});var cZ=n(k2);bU=o(cZ,"S3Filesystem"),cZ.forEach(t),yU=o(vo," with "),I2=s(vo,"CODE",{});var dZ=n(I2);DU=o(dZ,"botocore.session.Session"),dZ.forEach(t),$U=o(vo," and custom "),T2=s(vo,"CODE",{});var mZ=n(T2);wU=o(mZ,"aws_profile"),mZ.forEach(t),xU=o(vo,"."),vo.forEach(t),EU=c(I),p(Nm.$$.fragment,I),kU=c(I),cs=s(I,"P",{});var Xf=n(cs);IU=o(Xf,"Loading dataset from s3 using "),N2=s(Xf,"CODE",{});var pZ=n(N2);TU=o(pZ,"S3Filesystem"),pZ.forEach(t),NU=o(Xf," and "),P2=s(Xf,"CODE",{});var hZ=n(P2);PU=o(hZ,"load_from_disk()"),hZ.forEach(t),LU=o(Xf,"."),Xf.forEach(t),FU=c(I),p(Pm.$$.fragment,I),AU=c(I),L2=s(I,"P",{});var fZ=n(L2);OU=o(fZ,"Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),fZ.forEach(t),jU=c(I),p(Lm.$$.fragment,I),SU=c(I),Or=s(I,"H2",{class:!0});var H0=n(Or);jr=s(H0,"A",{id:!0,class:!0,href:!0});var uZ=n(jr);F2=s(uZ,"SPAN",{});var gZ=n(F2);p(Fm.$$.fragment,gZ),gZ.forEach(t),uZ.forEach(t),CU=c(H0),A2=s(H0,"SPAN",{});var _Z=n(A2);qU=o(_Z,"Parameters"),_Z.forEach(t),H0.forEach(t),zU=c(I),V=s(I,"P",{});var Z=n(V);VU=o(Z,`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),O2=s(Z,"CODE",{});var vZ=n(O2);UU=o(vZ,"use_ssl"),vZ.forEach(t),MU=o(Z," is also set in "),j2=s(Z,"CODE",{});var bZ=n(j2);RU=o(bZ,"client_kwargs"),bZ.forEach(t),BU=o(Z,`,
the value set in `),S2=s(Z,"CODE",{});var yZ=n(S2);HU=o(yZ,"client_kwargs"),yZ.forEach(t),GU=o(Z,` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),C2=s(Z,"CODE",{});var DZ=n(C2);WU=o(DZ,"open()"),DZ.forEach(t),KU=o(Z,`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),q2=s(Z,"CODE",{});var $Z=n(q2);YU=o($Z,"S3File.open"),$Z.forEach(t),JU=o(Z,`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),z2=s(Z,"CODE",{});var wZ=n(z2);XU=o(wZ,"open()"),wZ.forEach(t),ZU=o(Z,`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),V2=s(Z,"CODE",{});var xZ=n(V2);QU=o(xZ,"botocore.client.Config"),xZ.forEach(t),eM=o(Z,`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),Z.forEach(t),I.forEach(t),OD=c(i),ds=s(i,"DIV",{class:!0});var G0=n(ds);p(Am.$$.fragment,G0),tM=c(G0),ms=s(G0,"P",{});var Zf=n(ms);aM=o(Zf,"preprocesses "),U2=s(Zf,"EM",{});var EZ=n(U2);sM=o(EZ,"dataset_path"),EZ.forEach(t),nM=o(Zf," and removes remote filesystem (e.g. removing "),M2=s(Zf,"CODE",{});var kZ=n(M2);rM=o(kZ,"s3://"),kZ.forEach(t),oM=o(Zf,")"),Zf.forEach(t),G0.forEach(t),jD=c(i),ps=s(i,"DIV",{class:!0});var W0=n(ps);p(Om.$$.fragment,W0),iM=c(W0),R2=s(W0,"P",{});var IZ=n(R2);lM=o(IZ,"Validates if filesystem has remote protocol."),IZ.forEach(t),W0.forEach(t),SD=c(i),hs=s(i,"H2",{class:!0});var K0=n(hs);Sr=s(K0,"A",{id:!0,class:!0,href:!0});var TZ=n(Sr);B2=s(TZ,"SPAN",{});var NZ=n(B2);p(jm.$$.fragment,NZ),NZ.forEach(t),TZ.forEach(t),cM=c(K0),H2=s(K0,"SPAN",{});var PZ=n(H2);dM=o(PZ,"Fingerprint"),PZ.forEach(t),K0.forEach(t),CD=c(i),fs=s(i,"DIV",{class:!0});var Y0=n(fs);p(Sm.$$.fragment,Y0),mM=c(Y0),G2=s(Y0,"P",{});var LZ=n(G2);pM=o(LZ,"Hasher that accepts python objects as inputs."),LZ.forEach(t),Y0.forEach(t),this.h()},h(){d(A,"name","hf:doc:metadata"),d(A,"content",JSON.stringify(VZ)),d(Te,"id","main-classes"),d(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Te,"href","#main-classes"),d(W,"class","relative group"),d(oe,"id","datasets.DatasetInfo"),d(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oe,"href","#datasets.DatasetInfo"),d(_e,"class","relative group"),d(Ne,"class","docstring"),d(ys,"class","docstring"),d(R,"class","docstring"),d(Ds,"id","datasets.Dataset"),d(Ds,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ds,"href","#datasets.Dataset"),d(ga,"class","relative group"),d(Um,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),d(xt,"class","docstring"),d(Et,"class","docstring"),d(ws,"class","docstring"),d(xs,"class","docstring"),d(Mm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),d(Pe,"class","docstring"),d(Rm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),d(Es,"class","docstring"),d(ks,"class","docstring"),d(Is,"class","docstring"),d(Ts,"class","docstring"),d(Ps,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.__len__"),d(Ns,"class","docstring"),d(Ls,"class","docstring"),d(Fs,"class","docstring"),d(kt,"class","docstring"),d(As,"class","docstring"),d(Os,"class","docstring"),d(js,"class","docstring"),d(Bm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),d(It,"class","docstring"),d(Ss,"class","docstring"),d(Cs,"class","docstring"),d(qs,"class","docstring"),d(zs,"class","docstring"),d(Hm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format"),d(Tt,"class","docstring"),d(Vs,"class","docstring"),d(Gm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_transform"),d(Le,"class","docstring"),d(Wm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format"),d(Km,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.reset_format"),d(Us,"class","docstring"),d(Nt,"class","docstring"),d(Jm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.with_transform"),d(Xm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format"),d(Ae,"class","docstring"),d(Zm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format"),d(Qm,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.reset_format"),d(ep,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_transform"),d(Oe,"class","docstring"),d(Ms,"class","docstring"),d(Pt,"class","docstring"),d(je,"class","docstring"),d(Rs,"class","docstring"),d(Bs,"class","docstring"),d(Lt,"class","docstring"),d(Ft,"class","docstring"),d(At,"class","docstring"),d(ie,"class","docstring"),d(Hs,"class","docstring"),d(Se,"class","docstring"),d(tp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),d(Gs,"class","docstring"),d(ap,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),d(Ws,"class","docstring"),d(Ks,"class","docstring"),d(Ys,"class","docstring"),d(Js,"class","docstring"),d(Xs,"class","docstring"),d(Zs,"class","docstring"),d(Qs,"class","docstring"),d(Fi,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),d(Fi,"rel","nofollow"),d(le,"class","docstring"),d(ji,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),d(ji,"rel","nofollow"),d(Ot,"class","docstring"),d(en,"class","docstring"),d(jt,"class","docstring"),d(Ce,"class","docstring"),d(qe,"class","docstring"),d(tn,"class","docstring"),d(an,"class","docstring"),d(sn,"class","docstring"),d(nn,"class","docstring"),d(rn,"class","docstring"),d(on,"class","docstring"),d(ln,"class","docstring"),d(op,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetInfo"),d(cn,"class","docstring"),d(lp,"href","/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit"),d(dn,"class","docstring"),d(cp,"class","docstring"),d(dp,"class","docstring"),d(mp,"class","docstring"),d(pp,"class","docstring"),d(hp,"class","docstring"),d(fp,"class","docstring"),d(up,"class","docstring"),d(gp,"class","docstring"),d(_p,"class","docstring"),d(vp,"class","docstring"),d(bp,"class","docstring"),d(yp,"class","docstring"),d(Dp,"class","docstring"),d(mn,"class","docstring"),d(pn,"class","docstring"),d(hn,"class","docstring"),d(fn,"class","docstring"),d($p,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Features"),d(wp,"href","/docs/datasets/package_reference/task_templates"),d(St,"class","docstring"),d(ze,"class","docstring"),d(v,"class","docstring"),d(xp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),d(Ep,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),d(Na,"class","docstring"),d(kp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),d(Ip,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),d(S,"class","docstring"),d(Tp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),d(Np,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_dataset"),d(Pp,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_dataset"),d(te,"class","docstring"),d(Lp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),d(Fp,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_dataset"),d(Ap,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_dataset"),d(ae,"class","docstring"),d(Op,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),d(jp,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_dataset"),d(Sp,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_dataset"),d(se,"class","docstring"),d(un,"id","datasets.DatasetDict"),d(un,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(un,"href","#datasets.DatasetDict"),d(Fa,"class","relative group"),d(_n,"class","docstring"),d(vn,"class","docstring"),d(bn,"class","docstring"),d(Dn,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.__len__"),d(yn,"class","docstring"),d($n,"class","docstring"),d(wn,"class","docstring"),d(Ct,"class","docstring"),d(xn,"class","docstring"),d(En,"class","docstring"),d(kn,"class","docstring"),d(qt,"class","docstring"),d(Ve,"class","docstring"),d(Ue,"class","docstring"),d(zt,"class","docstring"),d(In,"class","docstring"),d(qp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.with_transform"),d(zp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetDict.set_format"),d(Me,"class","docstring"),d(Vp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.set_format"),d(Up,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.reset_format"),d(Re,"class","docstring"),d(Tn,"class","docstring"),d(Mp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),d(Vt,"class","docstring"),d(Nn,"class","docstring"),d(Rp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),d(Be,"class","docstring"),d(Bp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),d(He,"class","docstring"),d(Pn,"class","docstring"),d(Ln,"class","docstring"),d(ce,"class","docstring"),d(Hp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),d(Fn,"class","docstring"),d(Gp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),d(An,"class","docstring"),d(On,"class","docstring"),d(jn,"class","docstring"),d(Sn,"class","docstring"),d(Cn,"class","docstring"),d(Wp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Features"),d(Kp,"href","/docs/datasets/package_reference/task_templates"),d(Ut,"class","docstring"),d($,"class","docstring"),d(Yp,"id","package_reference_features"),d(qn,"id","datasets.IterableDataset"),d(qn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qn,"href","#datasets.IterableDataset"),d(Ba,"class","relative group"),d(Jp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),d(Vn,"class","docstring"),d(Un,"class","docstring"),d(Mn,"class","docstring"),d(Xp,"class","docstring"),d(Ge,"class","docstring"),d(Rn,"class","docstring"),d(Bn,"class","docstring"),d(Zp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.skip"),d(Qp,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.take"),d(de,"class","docstring"),d(Hn,"class","docstring"),d(Gn,"class","docstring"),d(th,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetInfo"),d(Wn,"class","docstring"),d(sh,"href","/docs/datasets/master/en/package_reference/builder_classes#datasets.NamedSplit"),d(Kn,"class","docstring"),d(nh,"class","docstring"),d(rh,"class","docstring"),d(oh,"class","docstring"),d(ih,"class","docstring"),d(lh,"class","docstring"),d(ch,"class","docstring"),d(dh,"class","docstring"),d(mh,"class","docstring"),d(ph,"class","docstring"),d(hh,"class","docstring"),d(fh,"class","docstring"),d(uh,"class","docstring"),d(gh,"class","docstring"),d(x,"class","docstring"),d(Yn,"id","datasets.IterableDatasetDict"),d(Yn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yn,"href","#datasets.IterableDatasetDict"),d(Wa,"class","relative group"),d(We,"class","docstring"),d(Xn,"class","docstring"),d(_h,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.skip"),d(vh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.take"),d(me,"class","docstring"),d(Zn,"class","docstring"),d(Qn,"class","docstring"),d(er,"class","docstring"),d(tr,"class","docstring"),d(ar,"class","docstring"),d(sr,"class","docstring"),d(P,"class","docstring"),d(nr,"id","datasets.Features"),d(nr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nr,"href","#datasets.Features"),d(Ja,"class","relative group"),d(yh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Value"),d(Dh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.ClassLabel"),d($h,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Sequence"),d(wh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Sequence"),d(xh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Array2D"),d(Eh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Array3D"),d(kh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Array4D"),d(Ih,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Array5D"),d(Th,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Audio"),d(Nh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Image"),d(Ph,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Translation"),d(Lh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),d(ir,"class","docstring"),d(lr,"class","docstring"),d(cr,"class","docstring"),d(dr,"class","docstring"),d(mr,"class","docstring"),d(pr,"class","docstring"),d(Rt,"class","docstring"),d(hr,"class","docstring"),d(Fh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.DatasetInfo"),d(Ah,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),d(Oh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Value"),d(Y,"class","docstring"),d(pe,"class","docstring"),d(T,"class","docstring"),d(Xa,"class","docstring"),d(fr,"class","docstring"),d(ur,"class","docstring"),d(B,"class","docstring"),d(_t,"class","docstring"),d(gr,"class","docstring"),d(q,"class","docstring"),d(_r,"class","docstring"),d(z,"class","docstring"),d(Cd,"class","docstring"),d(zd,"class","docstring"),d(Ud,"class","docstring"),d(Rd,"class","docstring"),d(Bt,"class","docstring"),d(vr,"class","docstring"),d(br,"class","docstring"),d(yr,"class","docstring"),d(Dr,"class","docstring"),d(L,"class","docstring"),d(Ht,"class","docstring"),d($r,"class","docstring"),d(wr,"class","docstring"),d(xr,"class","docstring"),d(Er,"class","docstring"),d(F,"class","docstring"),d(kr,"id","datasets.MetricInfo"),d(kr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kr,"href","#datasets.MetricInfo"),d(ns,"class","relative group"),d(Ir,"class","docstring"),d(Tr,"class","docstring"),d(H,"class","docstring"),d(Nr,"id","datasets.Metric"),d(Nr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nr,"href","#datasets.Metric"),d(os,"class","relative group"),d(Uh,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),d(Pr,"class","docstring"),d(Lr,"class","docstring"),d(Wt,"class","docstring"),d(Fr,"class","docstring"),d(G,"class","docstring"),d(Ar,"id","datasets.filesystems.S3FileSystem"),d(Ar,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ar,"href","#datasets.filesystems.S3FileSystem"),d(is,"class","relative group"),d(Em,"href","https://s3fs.readthedocs.io/en/latest/api.html"),d(Em,"rel","nofollow"),d(km,"href","https://filesystem-spec.readthedocs.io/en/latest/?badge=latest"),d(km,"rel","nofollow"),d(jr,"id","parameters"),d(jr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jr,"href","#parameters"),d(Or,"class","relative group"),d(k,"class","docstring"),d(ds,"class","docstring"),d(ps,"class","docstring"),d(Sr,"id","datasets.fingerprint.Hasher"),d(Sr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sr,"href","#datasets.fingerprint.Hasher"),d(hs,"class","relative group"),d(fs,"class","docstring")},m(i,y){e(document.head,A),D(i,_s,y),D(i,W,y),e(W,Te),e(Te,ha),h(ge,ha,null),e(W,bo),e(W,fa),e(fa,$t),D(i,vs,y),D(i,_e,y),e(_e,oe),e(oe,K),h(wt,K,null),e(_e,zm),e(_e,bs),e(bs,J0),D(i,Y2,y),D(i,R,y),h(yo,R,null),e(R,X0),e(R,Qf),e(Qf,Z0),e(R,Q0),e(R,Vm),e(Vm,eu),e(eu,ex),e(Vm,tx),e(R,ax),e(R,tu),e(tu,sx),e(R,nx),e(R,Ne),h(Do,Ne,null),e(Ne,rx),e(Ne,$o),e($o,ox),e($o,au),e(au,ix),e($o,lx),e(Ne,cx),e(Ne,su),e(su,dx),e(Ne,mx),e(Ne,nu),e(nu,px),e(R,hx),e(R,ys),h(wo,ys,null),e(ys,fx),e(ys,ua),e(ua,ux),e(ua,ru),e(ru,gx),e(ua,_x),e(ua,ou),e(ou,vx),e(ua,bx),D(i,J2,y),D(i,ga,y),e(ga,Ds),e(Ds,iu),h(xo,iu,null),e(ga,yx),e(ga,lu),e(lu,Dx),D(i,X2,y),D(i,$s,y),e($s,$x),e($s,Um),e(Um,wx),e($s,xx),D(i,Z2,y),D(i,v,y),h(Eo,v,null),e(v,Ex),e(v,cu),e(cu,kx),e(v,Ix),e(v,xt),h(ko,xt,null),e(xt,Tx),e(xt,du),e(du,Nx),e(xt,Px),e(xt,mu),e(mu,pu),e(pu,Lx),e(v,Fx),e(v,Et),h(Io,Et,null),e(Et,Ax),e(Et,hu),e(hu,Ox),e(Et,jx),e(Et,fu),e(fu,uu),e(uu,Sx),e(v,Cx),e(v,ws),h(To,ws,null),e(ws,qx),e(ws,gu),e(gu,zx),e(v,Vx),e(v,xs),h(No,xs,null),e(xs,Ux),e(xs,_u),e(_u,Mx),e(v,Rx),e(v,Pe),h(Po,Pe,null),e(Pe,Bx),e(Pe,nt),e(nt,Hx),e(nt,vu),e(vu,Gx),e(nt,Wx),e(nt,bu),e(bu,Kx),e(nt,Yx),e(nt,Mm),e(Mm,Jx),e(nt,Xx),e(Pe,Zx),e(Pe,Lo),e(Lo,Qx),e(Lo,yu),e(yu,e4),e(Lo,t4),e(Pe,a4),e(Pe,Fo),e(Fo,s4),e(Fo,Du),e(Du,n4),e(Fo,r4),e(v,o4),e(v,Es),h(Ao,Es,null),e(Es,i4),e(Es,rt),e(rt,l4),e(rt,$u),e($u,c4),e(rt,d4),e(rt,wu),e(wu,m4),e(rt,p4),e(rt,Rm),e(Rm,h4),e(rt,f4),e(v,u4),e(v,ks),h(Oo,ks,null),e(ks,g4),e(ks,xu),e(xu,_4),e(v,v4),e(v,Is),h(jo,Is,null),e(Is,b4),e(Is,Eu),e(Eu,y4),e(v,D4),e(v,Ts),h(So,Ts,null),e(Ts,$4),e(Ts,ku),e(ku,w4),e(v,x4),e(v,Ns),h(Co,Ns,null),e(Ns,E4),e(Ns,qo),e(qo,k4),e(qo,Ps),e(Ps,I4),e(Ps,Iu),e(Iu,T4),e(Ps,N4),e(qo,P4),e(v,L4),e(v,Ls),h(zo,Ls,null),e(Ls,F4),e(Ls,Tu),e(Tu,A4),e(v,O4),e(v,Fs),h(Vo,Fs,null),e(Fs,j4),e(Fs,Nu),e(Nu,S4),e(v,C4),e(v,kt),h(Uo,kt,null),e(kt,q4),e(kt,Pu),e(Pu,z4),e(kt,V4),e(kt,Lu),e(Lu,U4),e(v,M4),e(v,As),h(Mo,As,null),e(As,R4),e(As,Fu),e(Fu,B4),e(v,H4),e(v,Os),h(Ro,Os,null),e(Os,G4),e(Os,Au),e(Au,W4),e(v,K4),e(v,js),h(Bo,js,null),e(js,Y4),e(js,Ou),e(Ou,J4),e(v,X4),e(v,It),h(Ho,It,null),e(It,Z4),e(It,ju),e(ju,Q4),e(It,eE),e(It,_a),e(_a,tE),e(_a,Bm),e(Bm,aE),e(_a,sE),e(_a,Su),e(Su,nE),e(_a,rE),e(v,oE),e(v,Ss),h(Go,Ss,null),e(Ss,iE),e(Ss,Cu),e(Cu,lE),e(v,cE),e(v,Cs),h(Wo,Cs,null),e(Cs,dE),e(Cs,qu),e(qu,mE),e(v,pE),e(v,qs),h(Ko,qs,null),e(qs,hE),e(qs,Yo),e(Yo,fE),e(Yo,zu),e(zu,uE),e(Yo,gE),e(v,_E),e(v,zs),h(Jo,zs,null),e(zs,vE),e(zs,Vu),e(Vu,bE),e(v,yE),e(v,Tt),h(Xo,Tt,null),e(Tt,DE),e(Tt,Uu),e(Uu,$E),e(Tt,wE),e(Tt,Zo),e(Zo,xE),e(Zo,Hm),e(Hm,EE),e(Zo,kE),e(v,IE),e(v,Vs),h(Qo,Vs,null),e(Vs,TE),e(Vs,va),e(va,NE),e(va,Mu),e(Mu,PE),e(va,LE),e(va,Ru),e(Ru,FE),e(va,AE),e(v,OE),e(v,Le),h(ei,Le,null),e(Le,jE),e(Le,ve),e(ve,SE),e(ve,Bu),e(Bu,CE),e(ve,qE),e(ve,Hu),e(Hu,zE),e(ve,VE),e(ve,Gu),e(Gu,UE),e(ve,ME),e(ve,Gm),e(Gm,RE),e(ve,BE),e(Le,HE),e(Le,be),e(be,GE),e(be,Wu),e(Wu,WE),e(be,KE),e(be,Ku),e(Ku,YE),e(be,JE),e(be,Yu),e(Yu,XE),e(be,ZE),e(be,Ju),e(Ju,QE),e(be,e3),e(Le,t3),e(Le,Xu),e(Xu,a3),e(v,s3),e(v,Us),h(ti,Us,null),e(Us,n3),e(Us,Fe),e(Fe,r3),e(Fe,Zu),e(Zu,o3),e(Fe,i3),e(Fe,Qu),e(Qu,l3),e(Fe,c3),e(Fe,Wm),e(Wm,d3),e(Fe,m3),e(Fe,Km),e(Km,p3),e(v,h3),e(v,Nt),h(ai,Nt,null),e(Nt,f3),e(Nt,si),e(si,u3),e(si,eg),e(eg,g3),e(si,_3),e(Nt,v3),e(Nt,Ym),e(Ym,b3),e(Ym,tg),e(tg,y3),e(v,D3),e(v,Ae),h(ni,Ae,null),e(Ae,$3),e(Ae,ot),e(ot,w3),e(ot,ag),e(ag,x3),e(ot,E3),e(ot,sg),e(sg,k3),e(ot,I3),e(ot,ng),e(ng,T3),e(ot,N3),e(Ae,P3),e(Ae,ri),e(ri,L3),e(ri,Jm),e(Jm,F3),e(ri,A3),e(Ae,O3),e(Ae,ba),e(ba,j3),e(ba,Xm),e(Xm,S3),e(ba,C3),e(ba,rg),e(rg,q3),e(ba,z3),e(v,V3),e(v,Oe),h(oi,Oe,null),e(Oe,U3),e(Oe,ya),e(ya,M3),e(ya,og),e(og,R3),e(ya,B3),e(ya,ig),e(ig,H3),e(ya,G3),e(Oe,W3),e(Oe,Da),e(Da,K3),e(Da,Zm),e(Zm,Y3),e(Da,J3),e(Da,Qm),e(Qm,X3),e(Da,Z3),e(Oe,Q3),e(Oe,$a),e($a,ek),e($a,ep),e(ep,tk),e($a,ak),e($a,lg),e(lg,sk),e($a,nk),e(v,rk),e(v,Ms),h(ii,Ms,null),e(Ms,ok),e(Ms,cg),e(cg,ik),e(v,lk),e(v,Pt),h(li,Pt,null),e(Pt,ck),e(Pt,dg),e(dg,dk),e(Pt,mk),e(Pt,mg),e(mg,pk),e(v,hk),e(v,je),h(ci,je,null),e(je,fk),e(je,pg),e(pg,uk),e(je,gk),e(je,di),e(di,_k),e(di,hg),e(hg,vk),e(di,bk),e(je,yk),e(je,wa),e(wa,fg),e(fg,Dk),e(wa,$k),e(wa,ug),e(ug,wk),e(wa,xk),e(wa,ee),e(ee,Ek),e(ee,gg),e(gg,kk),e(ee,Ik),e(ee,_g),e(_g,Tk),e(ee,Nk),e(ee,vg),e(vg,Pk),e(ee,Lk),e(ee,bg),e(bg,Fk),e(ee,Ak),e(ee,yg),e(yg,Ok),e(ee,jk),e(v,Sk),e(v,Rs),h(mi,Rs,null),e(Rs,Ck),e(Rs,Dg),e(Dg,qk),e(v,zk),e(v,Bs),h(pi,Bs,null),e(Bs,Vk),e(Bs,$g),e($g,Uk),e(v,Mk),e(v,Lt),h(hi,Lt,null),e(Lt,Rk),e(Lt,wg),e(wg,Bk),e(Lt,Hk),e(Lt,xg),e(xg,Gk),e(v,Wk),e(v,Ft),h(fi,Ft,null),e(Ft,Kk),e(Ft,Eg),e(Eg,Yk),e(Ft,Jk),e(Ft,kg),e(kg,Xk),e(v,Zk),e(v,At),h(ui,At,null),e(At,Qk),e(At,j),e(j,e7),e(j,Ig),e(Ig,t7),e(j,a7),e(j,Tg),e(Tg,s7),e(j,n7),e(j,Ng),e(Ng,r7),e(j,o7),e(j,Pg),e(Pg,i7),e(j,l7),e(j,Lg),e(Lg,c7),e(j,d7),e(j,Fg),e(Fg,m7),e(j,p7),e(j,Ag),e(Ag,h7),e(j,f7),e(At,u7),e(At,gi),e(gi,g7),e(gi,Og),e(Og,_7),e(gi,v7),e(v,b7),e(v,ie),h(_i,ie,null),e(ie,y7),e(ie,xa),e(xa,D7),e(xa,jg),e(jg,$7),e(xa,w7),e(xa,Sg),e(Sg,x7),e(xa,E7),e(ie,k7),e(ie,Cg),e(Cg,I7),e(ie,T7),e(ie,vi),e(vi,N7),e(vi,qg),e(qg,P7),e(vi,L7),e(ie,F7),e(ie,zg),e(zg,A7),e(v,O7),e(v,Hs),h(bi,Hs,null),e(Hs,j7),e(Hs,Vg),e(Vg,S7),e(v,C7),e(v,Se),h(yi,Se,null),e(Se,q7),e(Se,Ug),e(Ug,z7),e(Se,V7),e(Se,Mg),e(Mg,U7),e(Se,M7),h(Di,Se,null),e(v,R7),e(v,Gs),h($i,Gs,null),e(Gs,B7),e(Gs,Ea),e(Ea,H7),e(Ea,tp),e(tp,G7),e(Ea,W7),e(Ea,Rg),e(Rg,K7),e(Ea,Y7),e(v,J7),e(v,Ws),h(wi,Ws,null),e(Ws,X7),e(Ws,it),e(it,Z7),e(it,Bg),e(Bg,Q7),e(it,eI),e(it,ap),e(ap,tI),e(it,aI),e(it,Hg),e(Hg,sI),e(it,nI),e(v,rI),e(v,Ks),h(xi,Ks,null),e(Ks,oI),e(Ks,Gg),e(Gg,iI),e(v,lI),e(v,Ys),h(Ei,Ys,null),e(Ys,cI),e(Ys,Wg),e(Wg,dI),e(v,mI),e(v,Js),h(ki,Js,null),e(Js,pI),e(Js,Ii),e(Ii,hI),e(Ii,Kg),e(Kg,fI),e(Ii,uI),e(v,gI),e(v,Xs),h(Ti,Xs,null),e(Xs,_I),e(Xs,Yg),e(Yg,vI),e(v,bI),e(v,Zs),h(Ni,Zs,null),e(Zs,yI),e(Zs,Jg),e(Jg,DI),e(v,$I),e(v,Qs),h(Pi,Qs,null),e(Qs,wI),e(Qs,Xg),e(Xg,xI),e(v,EI),e(v,le),h(Li,le,null),e(le,kI),e(le,ka),e(ka,II),e(ka,Zg),e(Zg,TI),e(ka,NI),e(ka,Qg),e(Qg,PI),e(ka,LI),e(le,FI),e(le,e_),e(e_,sp),e(sp,AI),e(sp,Fi),e(Fi,OI),e(le,jI),e(le,t_),e(t_,SI),e(le,CI),h(Ai,le,null),e(v,qI),e(v,Ot),h(Oi,Ot,null),e(Ot,zI),e(Ot,lt),e(lt,VI),e(lt,a_),e(a_,UI),e(lt,MI),e(lt,s_),e(s_,RI),e(lt,BI),e(lt,n_),e(n_,HI),e(lt,GI),e(Ot,WI),e(Ot,r_),e(r_,np),e(np,KI),e(np,ji),e(ji,YI),e(v,JI),e(v,en),h(Si,en,null),e(en,XI),e(en,o_),e(o_,ZI),e(v,QI),e(v,jt),h(Ci,jt,null),e(jt,e5),e(jt,i_),e(i_,t5),e(jt,a5),e(jt,qi),e(qi,s5),e(qi,l_),e(l_,n5),e(qi,r5),e(v,o5),e(v,Ce),h(zi,Ce,null),e(Ce,i5),e(Ce,c_),e(c_,l5),e(Ce,c5),e(Ce,d_),e(d_,d5),e(Ce,m5),h(Vi,Ce,null),e(v,p5),e(v,qe),h(Ui,qe,null),e(qe,h5),e(qe,m_),e(m_,f5),e(qe,u5),e(qe,p_),e(p_,g5),e(qe,_5),h(Mi,qe,null),e(v,v5),e(v,tn),h(Ri,tn,null),e(tn,b5),e(tn,h_),e(h_,y5),e(v,D5),e(v,an),h(Bi,an,null),e(an,$5),e(an,f_),e(f_,w5),e(v,x5),e(v,sn),h(Hi,sn,null),e(sn,E5),e(sn,u_),e(u_,k5),e(v,I5),e(v,nn),h(Gi,nn,null),e(nn,T5),e(nn,g_),e(g_,N5),e(v,P5),e(v,rn),h(Wi,rn,null),e(rn,L5),e(rn,__),e(__,F5),e(v,A5),e(v,on),h(Ki,on,null),e(on,O5),e(on,v_),e(v_,j5),e(v,S5),e(v,ln),h(Yi,ln,null),e(ln,C5),e(ln,b_),e(b_,q5),e(v,z5),e(v,cn),h(Ji,cn,null),e(cn,V5),e(cn,rp),e(rp,op),e(op,U5),e(rp,M5),e(v,R5),e(v,dn),h(Xi,dn,null),e(dn,B5),e(dn,ip),e(ip,lp),e(lp,H5),e(ip,G5),e(v,W5),e(v,cp),h(Zi,cp,null),e(v,K5),e(v,dp),h(Qi,dp,null),e(v,Y5),e(v,mp),h(el,mp,null),e(v,J5),e(v,pp),h(tl,pp,null),e(v,X5),e(v,hp),h(al,hp,null),e(v,Z5),e(v,fp),h(sl,fp,null),e(v,Q5),e(v,up),h(nl,up,null),e(v,e8),e(v,gp),h(rl,gp,null),e(v,t8),e(v,_p),h(ol,_p,null),e(v,a8),e(v,vp),h(il,vp,null),e(v,s8),e(v,bp),h(ll,bp,null),e(v,n8),e(v,yp),h(cl,yp,null),e(v,r8),e(v,Dp),h(dl,Dp,null),e(v,o8),e(v,mn),h(ml,mn,null),e(mn,i8),e(mn,y_),e(y_,l8),e(v,c8),e(v,pn),h(pl,pn,null),e(pn,d8),e(pn,D_),e(D_,m8),e(v,p8),e(v,hn),h(hl,hn,null),e(hn,h8),e(hn,$_),e($_,f8),e(v,u8),e(v,fn),h(fl,fn,null),e(fn,g8),e(fn,w_),e(w_,_8),e(v,v8),e(v,St),h(ul,St,null),e(St,b8),e(St,Ia),e(Ia,y8),e(Ia,$p),e($p,D8),e(Ia,$8),e(Ia,wp),e(wp,w8),e(Ia,x8),e(St,E8),e(St,Ta),e(Ta,k8),e(Ta,x_),e(x_,I8),e(Ta,T8),e(Ta,E_),e(E_,N8),e(Ta,P8),e(v,L8),e(v,ze),h(gl,ze,null),e(ze,F8),e(ze,_l),e(_l,A8),e(_l,k_),e(k_,O8),e(_l,j8),e(ze,S8),e(ze,I_),e(I_,C8),e(ze,q8),h(vl,ze,null),D(i,Q2,y),D(i,Na,y),h(bl,Na,null),e(Na,z8),e(Na,Pa),e(Pa,V8),e(Pa,xp),e(xp,U8),e(Pa,M8),e(Pa,Ep),e(Ep,R8),e(Pa,B8),D(i,eD,y),D(i,S,y),h(yl,S,null),e(S,H8),e(S,T_),e(T_,G8),e(S,W8),e(S,La),e(La,K8),e(La,kp),e(kp,Y8),e(La,J8),e(La,Ip),e(Ip,X8),e(La,Z8),e(S,Q8),e(S,ye),e(ye,e6),e(ye,N_),e(N_,t6),e(ye,a6),e(ye,P_),e(P_,s6),e(ye,n6),e(ye,L_),e(L_,r6),e(ye,o6),e(ye,F_),e(F_,i6),e(ye,l6),e(S,c6),e(S,A_),e(A_,d6),e(S,m6),e(S,O_),e(O_,p6),e(S,h6),h(Dl,S,null),D(i,tD,y),D(i,te,y),h($l,te,null),e(te,f6),e(te,j_),e(j_,u6),e(te,g6),e(te,S_),e(S_,_6),e(te,v6),e(te,C_),e(C_,b6),e(te,y6),e(te,De),e(De,q_),e(q_,D6),e(De,$6),e(De,z_),e(z_,w6),e(De,x6),e(De,V_),e(V_,E6),e(De,k6),e(De,wl),e(wl,I6),e(wl,Tp),e(Tp,T6),e(wl,N6),e(De,P6),e(De,ct),e(ct,L6),e(ct,Np),e(Np,F6),e(ct,A6),e(ct,U_),e(U_,O6),e(ct,j6),e(ct,Pp),e(Pp,S6),e(ct,C6),D(i,aD,y),D(i,ae,y),h(xl,ae,null),e(ae,q6),e(ae,M_),e(M_,z6),e(ae,V6),e(ae,R_),e(R_,U6),e(ae,M6),e(ae,B_),e(B_,R6),e(ae,B6),e(ae,$e),e($e,H_),e(H_,H6),e($e,G6),e($e,G_),e(G_,W6),e($e,K6),e($e,W_),e(W_,Y6),e($e,J6),e($e,El),e(El,X6),e(El,Lp),e(Lp,Z6),e(El,Q6),e($e,e9),e($e,dt),e(dt,t9),e(dt,Fp),e(Fp,a9),e(dt,s9),e(dt,K_),e(K_,n9),e(dt,r9),e(dt,Ap),e(Ap,o9),e(dt,i9),D(i,sD,y),D(i,se,y),h(kl,se,null),e(se,l9),e(se,Y_),e(Y_,c9),e(se,d9),e(se,J_),e(J_,m9),e(se,p9),e(se,X_),e(X_,h9),e(se,f9),e(se,we),e(we,Z_),e(Z_,u9),e(we,g9),e(we,Q_),e(Q_,_9),e(we,v9),e(we,e1),e(e1,b9),e(we,y9),e(we,Il),e(Il,D9),e(Il,Op),e(Op,$9),e(Il,w9),e(we,x9),e(we,mt),e(mt,E9),e(mt,jp),e(jp,k9),e(mt,I9),e(mt,t1),e(t1,T9),e(mt,N9),e(mt,Sp),e(Sp,P9),e(mt,L9),D(i,nD,y),D(i,Fa,y),e(Fa,un),e(un,a1),h(Tl,a1,null),e(Fa,F9),e(Fa,s1),e(s1,A9),D(i,rD,y),D(i,gn,y),e(gn,O9),e(gn,n1),e(n1,j9),e(gn,S9),D(i,oD,y),D(i,$,y),h(Nl,$,null),e($,C9),e($,r1),e(r1,q9),e($,z9),e($,_n),h(Pl,_n,null),e(_n,V9),e(_n,o1),e(o1,U9),e($,M9),e($,vn),h(Ll,vn,null),e(vn,R9),e(vn,i1),e(i1,B9),e($,H9),e($,bn),h(Fl,bn,null),e(bn,G9),e(bn,l1),e(l1,W9),e($,K9),e($,yn),h(Al,yn,null),e(yn,Y9),e(yn,Ol),e(Ol,J9),e(Ol,Dn),e(Dn,X9),e(Dn,c1),e(c1,Z9),e(Dn,Q9),e(Ol,eT),e($,tT),e($,$n),h(jl,$n,null),e($n,aT),e($n,d1),e(d1,sT),e($,nT),e($,wn),h(Sl,wn,null),e(wn,rT),e(wn,m1),e(m1,oT),e($,iT),e($,Ct),h(Cl,Ct,null),e(Ct,lT),e(Ct,p1),e(p1,cT),e(Ct,dT),e(Ct,h1),e(h1,mT),e($,pT),e($,xn),h(ql,xn,null),e(xn,hT),e(xn,f1),e(f1,fT),e($,uT),e($,En),h(zl,En,null),e(En,gT),e(En,u1),e(u1,_T),e($,vT),e($,kn),h(Vl,kn,null),e(kn,bT),e(kn,g1),e(g1,yT),e($,DT),e($,qt),h(Ul,qt,null),e(qt,$T),e(qt,_1),e(_1,wT),e(qt,xT),e(qt,v1),e(v1,ET),e($,kT),e($,Ve),h(Ml,Ve,null),e(Ve,IT),e(Ve,b1),e(b1,TT),e(Ve,NT),e(Ve,y1),e(y1,PT),e(Ve,LT),e(Ve,D1),e(D1,FT),e($,AT),e($,Ue),h(Rl,Ue,null),e(Ue,OT),e(Ue,Bl),e(Bl,jT),e(Bl,$1),e($1,ST),e(Bl,CT),e(Ue,qT),e(Ue,xe),e(xe,zT),e(xe,w1),e(w1,VT),e(xe,UT),e(xe,x1),e(x1,MT),e(xe,RT),e(xe,E1),e(E1,BT),e(xe,HT),e(xe,k1),e(k1,GT),e(xe,WT),e(Ue,KT),e(Ue,I1),e(I1,YT),e($,JT),e($,zt),h(Hl,zt,null),e(zt,XT),e(zt,Gl),e(Gl,ZT),e(Gl,T1),e(T1,QT),e(Gl,eN),e(zt,tN),e(zt,Cp),e(Cp,aN),e(Cp,N1),e(N1,sN),e($,nN),e($,In),h(Wl,In,null),e(In,rN),e(In,Aa),e(Aa,oN),e(Aa,P1),e(P1,iN),e(Aa,lN),e(Aa,L1),e(L1,cN),e(Aa,dN),e($,mN),e($,Me),h(Kl,Me,null),e(Me,pN),e(Me,pt),e(pt,hN),e(pt,F1),e(F1,fN),e(pt,uN),e(pt,A1),e(A1,gN),e(pt,_N),e(pt,O1),e(O1,vN),e(pt,bN),e(Me,yN),e(Me,Yl),e(Yl,DN),e(Yl,qp),e(qp,$N),e(Yl,wN),e(Me,xN),e(Me,Oa),e(Oa,EN),e(Oa,zp),e(zp,kN),e(Oa,IN),e(Oa,j1),e(j1,TN),e(Oa,NN),e($,PN),e($,Re),h(Jl,Re,null),e(Re,LN),e(Re,ja),e(ja,FN),e(ja,S1),e(S1,AN),e(ja,ON),e(ja,C1),e(C1,jN),e(ja,SN),e(Re,CN),e(Re,Sa),e(Sa,qN),e(Sa,Vp),e(Vp,zN),e(Sa,VN),e(Sa,Up),e(Up,UN),e(Sa,MN),e(Re,RN),e(Re,Ca),e(Ca,BN),e(Ca,q1),e(q1,HN),e(Ca,GN),e(Ca,z1),e(z1,WN),e(Ca,KN),e($,YN),e($,Tn),h(Xl,Tn,null),e(Tn,JN),e(Tn,V1),e(V1,XN),e($,ZN),e($,Vt),h(Zl,Vt,null),e(Vt,QN),e(Vt,U1),e(U1,eP),e(Vt,tP),e(Vt,ht),e(ht,aP),e(ht,Mp),e(Mp,sP),e(ht,nP),e(ht,M1),e(M1,rP),e(ht,oP),e(ht,R1),e(R1,iP),e(ht,lP),e($,cP),e($,Nn),h(Ql,Nn,null),e(Nn,dP),e(Nn,B1),e(B1,mP),e($,pP),e($,Be),h(ec,Be,null),e(Be,hP),e(Be,H1),e(H1,fP),e(Be,uP),e(Be,G1),e(G1,gP),e(Be,_P),e(Be,qa),e(qa,vP),e(qa,Rp),e(Rp,bP),e(qa,yP),e(qa,W1),e(W1,DP),e(qa,$P),e($,wP),e($,He),h(tc,He,null),e(He,xP),e(He,K1),e(K1,EP),e(He,kP),e(He,za),e(za,IP),e(za,Bp),e(Bp,TP),e(za,NP),e(za,Y1),e(Y1,PP),e(za,LP),e(He,FP),e(He,ac),e(ac,J1),e(J1,AP),e(ac,OP),e(ac,X1),e(X1,jP),e($,SP),e($,Pn),h(sc,Pn,null),e(Pn,CP),e(Pn,Z1),e(Z1,qP),e($,zP),e($,Ln),h(nc,Ln,null),e(Ln,VP),e(Ln,rc),e(rc,UP),e(rc,Q1),e(Q1,MP),e(rc,RP),e($,BP),e($,ce),h(oc,ce,null),e(ce,HP),e(ce,Va),e(Va,GP),e(Va,ev),e(ev,WP),e(Va,KP),e(Va,tv),e(tv,YP),e(Va,JP),e(ce,XP),e(ce,av),e(av,ZP),e(ce,QP),e(ce,sv),e(sv,eL),e(ce,tL),h(ic,ce,null),e($,aL),e($,Fn),h(lc,Fn,null),e(Fn,sL),e(Fn,Ua),e(Ua,nL),e(Ua,Hp),e(Hp,rL),e(Ua,oL),e(Ua,nv),e(nv,iL),e(Ua,lL),e($,cL),e($,An),h(cc,An,null),e(An,dL),e(An,ft),e(ft,mL),e(ft,rv),e(rv,pL),e(ft,hL),e(ft,Gp),e(Gp,fL),e(ft,uL),e(ft,ov),e(ov,gL),e(ft,_L),e($,vL),e($,On),h(dc,On,null),e(On,bL),e(On,iv),e(iv,yL),e($,DL),e($,jn),h(mc,jn,null),e(jn,$L),e(jn,lv),e(lv,wL),e($,xL),e($,Sn),h(pc,Sn,null),e(Sn,EL),e(Sn,cv),e(cv,kL),e($,IL),e($,Cn),h(hc,Cn,null),e(Cn,TL),e(Cn,dv),e(dv,NL),e($,PL),e($,Ut),h(fc,Ut,null),e(Ut,LL),e(Ut,Ma),e(Ma,FL),e(Ma,Wp),e(Wp,AL),e(Ma,OL),e(Ma,Kp),e(Kp,jL),e(Ma,SL),e(Ut,CL),e(Ut,Ra),e(Ra,qL),e(Ra,mv),e(mv,zL),e(Ra,VL),e(Ra,pv),e(pv,UL),e(Ra,ML),D(i,iD,y),D(i,Yp,y),D(i,lD,y),D(i,Ba,y),e(Ba,qn),e(qn,hv),h(uc,hv,null),e(Ba,RL),e(Ba,fv),e(fv,BL),D(i,cD,y),D(i,zn,y),e(zn,HL),e(zn,Jp),e(Jp,GL),e(zn,WL),D(i,dD,y),D(i,x,y),h(gc,x,null),e(x,KL),e(x,uv),e(uv,YL),e(x,JL),e(x,Vn),h(_c,Vn,null),e(Vn,XL),e(Vn,gv),e(gv,ZL),e(x,QL),e(x,Un),h(vc,Un,null),e(Un,eF),e(Un,_v),e(_v,tF),e(x,aF),e(x,Mn),h(bc,Mn,null),e(Mn,sF),e(Mn,vv),e(vv,nF),e(x,rF),e(x,Xp),h(yc,Xp,null),e(x,oF),e(x,Ge),h(Dc,Ge,null),e(Ge,iF),e(Ge,bv),e(bv,lF),e(Ge,cF),e(Ge,$c),e($c,dF),e($c,yv),e(yv,mF),e($c,pF),e(Ge,hF),e(Ge,Ha),e(Ha,Dv),e(Dv,fF),e(Ha,uF),e(Ha,$v),e($v,gF),e(Ha,_F),e(Ha,ne),e(ne,vF),e(ne,wv),e(wv,bF),e(ne,yF),e(ne,xv),e(xv,DF),e(ne,$F),e(ne,Ev),e(Ev,wF),e(ne,xF),e(ne,kv),e(kv,EF),e(ne,kF),e(ne,Iv),e(Iv,IF),e(ne,TF),e(x,NF),e(x,Rn),h(wc,Rn,null),e(Rn,PF),e(Rn,Tv),e(Tv,LF),e(x,FF),e(x,Bn),h(xc,Bn,null),e(Bn,AF),e(Bn,Nv),e(Nv,OF),e(x,jF),e(x,de),h(Ec,de,null),e(de,SF),e(de,Pv),e(Pv,CF),e(de,qF),e(de,Lv),e(Lv,zF),e(de,VF),e(de,kc),e(kc,UF),e(kc,Fv),e(Fv,MF),e(kc,RF),e(de,BF),e(de,Ga),e(Ga,HF),e(Ga,Zp),e(Zp,GF),e(Ga,WF),e(Ga,Qp),e(Qp,KF),e(Ga,YF),e(x,JF),e(x,Hn),h(Ic,Hn,null),e(Hn,XF),e(Hn,Tc),e(Tc,ZF),e(Tc,Av),e(Av,QF),e(Tc,eA),e(x,tA),e(x,Gn),h(Nc,Gn,null),e(Gn,aA),e(Gn,Pc),e(Pc,sA),e(Pc,Ov),e(Ov,nA),e(Pc,rA),e(x,oA),e(x,Wn),h(Lc,Wn,null),e(Wn,iA),e(Wn,eh),e(eh,th),e(th,lA),e(eh,cA),e(x,dA),e(x,Kn),h(Fc,Kn,null),e(Kn,mA),e(Kn,ah),e(ah,sh),e(sh,pA),e(ah,hA),e(x,fA),e(x,nh),h(Ac,nh,null),e(x,uA),e(x,rh),h(Oc,rh,null),e(x,gA),e(x,oh),h(jc,oh,null),e(x,_A),e(x,ih),h(Sc,ih,null),e(x,vA),e(x,lh),h(Cc,lh,null),e(x,bA),e(x,ch),h(qc,ch,null),e(x,yA),e(x,dh),h(zc,dh,null),e(x,DA),e(x,mh),h(Vc,mh,null),e(x,$A),e(x,ph),h(Uc,ph,null),e(x,wA),e(x,hh),h(Mc,hh,null),e(x,xA),e(x,fh),h(Rc,fh,null),e(x,EA),e(x,uh),h(Bc,uh,null),e(x,kA),e(x,gh),h(Hc,gh,null),D(i,mD,y),D(i,Wa,y),e(Wa,Yn),e(Yn,jv),h(Gc,jv,null),e(Wa,IA),e(Wa,Sv),e(Sv,TA),D(i,pD,y),D(i,Jn,y),e(Jn,NA),e(Jn,Cv),e(Cv,PA),e(Jn,LA),D(i,hD,y),D(i,P,y),h(Wc,P,null),e(P,FA),e(P,We),h(Kc,We,null),e(We,AA),e(We,qv),e(qv,OA),e(We,jA),e(We,Yc),e(Yc,SA),e(Yc,zv),e(zv,CA),e(Yc,qA),e(We,zA),e(We,Ka),e(Ka,Vv),e(Vv,VA),e(Ka,UA),e(Ka,Uv),e(Uv,MA),e(Ka,RA),e(Ka,re),e(re,BA),e(re,Mv),e(Mv,HA),e(re,GA),e(re,Rv),e(Rv,WA),e(re,KA),e(re,Bv),e(Bv,YA),e(re,JA),e(re,Hv),e(Hv,XA),e(re,ZA),e(re,Gv),e(Gv,QA),e(re,eO),e(P,tO),e(P,Xn),h(Jc,Xn,null),e(Xn,aO),e(Xn,Wv),e(Wv,sO),e(P,nO),e(P,me),h(Xc,me,null),e(me,rO),e(me,Kv),e(Kv,oO),e(me,iO),e(me,Yv),e(Yv,lO),e(me,cO),e(me,Zc),e(Zc,dO),e(Zc,Jv),e(Jv,mO),e(Zc,pO),e(me,hO),e(me,Ya),e(Ya,fO),e(Ya,_h),e(_h,uO),e(Ya,gO),e(Ya,vh),e(vh,_O),e(Ya,vO),e(P,bO),e(P,Zn),h(Qc,Zn,null),e(Zn,yO),e(Zn,Xv),e(Xv,DO),e(P,$O),e(P,Qn),h(ed,Qn,null),e(Qn,wO),e(Qn,Zv),e(Zv,xO),e(P,EO),e(P,er),h(td,er,null),e(er,kO),e(er,Qv),e(Qv,IO),e(P,TO),e(P,tr),h(ad,tr,null),e(tr,NO),e(tr,eb),e(eb,PO),e(P,LO),e(P,ar),h(sd,ar,null),e(ar,FO),e(ar,tb),e(tb,AO),e(P,OO),e(P,sr),h(nd,sr,null),e(sr,jO),e(sr,ab),e(ab,SO),D(i,fD,y),D(i,Ja,y),e(Ja,nr),e(nr,sb),h(rd,sb,null),e(Ja,CO),e(Ja,nb),e(nb,qO),D(i,uD,y),D(i,T,y),h(od,T,null),e(T,zO),e(T,rb),e(rb,VO),e(T,UO),e(T,id),e(id,MO),e(id,ob),e(ob,RO),e(id,BO),e(T,HO),e(T,bh),e(bh,ib),e(ib,GO),e(bh,WO),e(T,KO),e(T,C),e(C,lb),e(lb,Mt),e(Mt,YO),e(Mt,yh),e(yh,JO),e(Mt,XO),e(Mt,cb),e(cb,ZO),e(Mt,QO),e(Mt,db),e(db,ej),e(C,tj),e(C,mb),e(mb,ld),e(ld,aj),e(ld,Dh),e(Dh,sj),e(ld,nj),e(C,rj),e(C,pb),e(pb,cd),e(cd,oj),e(cd,hb),e(hb,ij),e(cd,lj),e(C,cj),e(C,dd),e(dd,Ee),e(Ee,dj),e(Ee,fb),e(fb,mj),e(Ee,pj),e(Ee,$h),e($h,hj),e(Ee,fj),e(Ee,ub),e(ub,uj),e(Ee,gj),e(Ee,wh),e(wh,_j),e(Ee,vj),e(dd,bj),h(rr,dd,null),e(C,yj),e(C,gb),e(gb,ke),e(ke,Dj),e(ke,xh),e(xh,$j),e(ke,wj),e(ke,Eh),e(Eh,xj),e(ke,Ej),e(ke,kh),e(kh,kj),e(ke,Ij),e(ke,Ih),e(Ih,Tj),e(ke,Nj),e(C,Pj),e(C,_b),e(_b,md),e(md,Lj),e(md,Th),e(Th,Fj),e(md,Aj),e(C,Oj),e(C,vb),e(vb,ut),e(ut,jj),e(ut,Nh),e(Nh,Sj),e(ut,Cj),e(ut,bb),e(bb,qj),e(ut,zj),e(ut,yb),e(yb,Vj),e(ut,Uj),e(C,Mj),e(C,Db),e(Db,or),e(or,Ph),e(Ph,Rj),e(or,Bj),e(or,Lh),e(Lh,Hj),e(or,Gj),e(T,Wj),e(T,ir),h(pd,ir,null),e(ir,Kj),e(ir,$b),e($b,Yj),e(T,Jj),e(T,lr),h(hd,lr,null),e(lr,Xj),e(lr,wb),e(wb,Zj),e(T,Qj),e(T,cr),h(fd,cr,null),e(cr,eS),e(cr,xb),e(xb,tS),e(T,aS),e(T,dr),h(ud,dr,null),e(dr,sS),e(dr,Eb),e(Eb,nS),e(T,rS),e(T,mr),h(gd,mr,null),e(mr,oS),e(mr,kb),e(kb,iS),e(T,lS),e(T,pr),h(_d,pr,null),e(pr,cS),e(pr,Ib),e(Ib,dS),e(T,mS),e(T,Rt),h(vd,Rt,null),e(Rt,pS),e(Rt,Tb),e(Tb,hS),e(Rt,fS),e(Rt,Nb),e(Nb,uS),e(T,gS),e(T,hr),h(bd,hr,null),e(hr,_S),e(hr,Pb),e(Pb,vS),e(T,bS),e(T,Y),h(yd,Y,null),e(Y,yS),e(Y,Lb),e(Lb,DS),e(Y,$S),e(Y,Fb),e(Fb,wS),e(Y,xS),e(Y,gt),e(gt,ES),e(gt,Fh),e(Fh,kS),e(gt,IS),e(gt,Ah),e(Ah,TS),e(gt,NS),e(gt,Oh),e(Oh,PS),e(gt,LS),e(Y,FS),e(Y,Ab),e(Ab,AS),e(Y,OS),h(Dd,Y,null),e(T,jS),e(T,pe),h($d,pe,null),e(pe,SS),e(pe,Ob),e(Ob,CS),e(pe,qS),e(pe,jb),e(jb,zS),e(pe,VS),e(pe,Sb),e(Sb,US),e(pe,MS),h(wd,pe,null),D(i,gD,y),D(i,Xa,y),h(xd,Xa,null),e(Xa,RS),e(Xa,Cb),e(Cb,BS),D(i,_D,y),D(i,B,y),h(Ed,B,null),e(B,HS),e(B,qb),e(qb,GS),e(B,WS),e(B,kd),e(kd,KS),e(kd,zb),e(zb,YS),e(kd,JS),e(B,XS),e(B,Za),e(Za,jh),e(jh,Vb),e(Vb,ZS),e(jh,QS),e(Za,eC),e(Za,Sh),e(Sh,Ub),e(Ub,tC),e(Sh,aC),e(Za,sC),e(Za,Ch),e(Ch,Mb),e(Mb,nC),e(Ch,rC),e(B,oC),e(B,fr),h(Id,fr,null),e(fr,iC),e(fr,Rb),e(Rb,lC),e(B,cC),e(B,ur),h(Td,ur,null),e(ur,dC),e(ur,Bb),e(Bb,mC),D(i,vD,y),D(i,_t,y),h(Nd,_t,null),e(_t,pC),e(_t,Hb),e(Hb,hC),e(_t,fC),e(_t,Gb),e(Gb,uC),D(i,bD,y),D(i,q,y),h(Pd,q,null),e(q,gC),e(q,qh),e(qh,Wb),e(Wb,_C),e(qh,vC),e(q,bC),e(q,Kb),e(Kb,yC),e(q,DC),e(q,Ld),e(Ld,$C),e(Ld,Yb),e(Yb,wC),e(Ld,xC),e(q,EC),e(q,Jb),e(Jb,kC),e(q,IC),h(Fd,q,null),e(q,TC),e(q,gr),h(Ad,gr,null),e(gr,NC),e(gr,Xb),e(Xb,PC),D(i,yD,y),D(i,z,y),h(Od,z,null),e(z,LC),e(z,zh),e(zh,Zb),e(Zb,FC),e(zh,AC),e(z,OC),e(z,Qb),e(Qb,jC),e(z,SC),e(z,ey),e(ey,CC),e(z,qC),e(z,ty),e(ty,zC),e(z,VC),h(jd,z,null),e(z,UC),e(z,_r),h(Sd,_r,null),e(_r,MC),e(_r,ay),e(ay,RC),D(i,DD,y),D(i,Cd,y),h(qd,Cd,null),D(i,$D,y),D(i,zd,y),h(Vd,zd,null),D(i,wD,y),D(i,Ud,y),h(Md,Ud,null),D(i,xD,y),D(i,Rd,y),h(Bd,Rd,null),D(i,ED,y),D(i,L,y),h(Hd,L,null),e(L,BC),e(L,sy),e(sy,HC),e(L,GC),e(L,ny),e(ny,WC),e(L,KC),e(L,Qa),e(Qa,ry),e(ry,Gd),e(Gd,YC),e(Gd,oy),e(oy,JC),e(Gd,XC),e(Qa,ZC),e(Qa,es),e(es,Wd),e(Wd,QC),e(Wd,iy),e(iy,eq),e(Wd,tq),e(es,aq),e(es,Kd),e(Kd,ly),e(ly,sq),e(Kd,nq),e(Kd,cy),e(cy,rq),e(es,oq),e(es,dy),e(dy,iq),e(Qa,lq),e(Qa,ts),e(ts,Yd),e(Yd,cq),e(Yd,my),e(my,dq),e(Yd,mq),e(ts,pq),e(ts,as),e(as,py),e(py,hq),e(as,fq),e(as,hy),e(hy,uq),e(as,gq),e(as,fy),e(fy,_q),e(ts,vq),e(ts,uy),e(uy,bq),e(L,yq),e(L,Bt),h(Jd,Bt,null),e(Bt,Dq),e(Bt,gy),e(gy,$q),e(Bt,wq),e(Bt,vt),e(vt,_y),e(_y,xq),e(vt,Eq),e(vt,vy),e(vy,kq),e(vt,Iq),e(vt,by),e(by,Tq),e(vt,Nq),e(vt,yy),e(yy,Pq),e(L,Lq),e(L,vr),h(Xd,vr,null),e(vr,Fq),e(vr,Dy),e(Dy,Aq),e(L,Oq),e(L,br),h(Zd,br,null),e(br,jq),e(br,$y),e($y,Sq),e(L,Cq),e(L,yr),h(Qd,yr,null),e(yr,qq),e(yr,wy),e(wy,zq),e(L,Vq),e(L,Dr),h(em,Dr,null),e(Dr,Uq),e(Dr,xy),e(xy,Mq),D(i,kD,y),D(i,F,y),h(tm,F,null),e(F,Rq),e(F,Ey),e(Ey,Bq),e(F,Hq),e(F,ky),e(ky,Gq),e(F,Wq),e(F,bt),e(bt,Iy),e(Iy,am),e(am,Kq),e(am,Ty),e(Ty,Yq),e(am,Jq),e(bt,Xq),e(bt,ss),e(ss,sm),e(sm,Zq),e(sm,Ny),e(Ny,Qq),e(sm,ez),e(ss,tz),e(ss,nm),e(nm,Py),e(Py,az),e(nm,sz),e(nm,Ly),e(Ly,nz),e(ss,rz),e(ss,Fy),e(Fy,oz),e(bt,iz),e(bt,Ay),e(Ay,rm),e(rm,lz),e(rm,Oy),e(Oy,cz),e(rm,dz),e(bt,mz),e(bt,jy),e(jy,om),e(om,pz),e(om,Sy),e(Sy,hz),e(om,fz),e(F,uz),e(F,Ht),h(im,Ht,null),e(Ht,gz),e(Ht,Cy),e(Cy,_z),e(Ht,vz),e(Ht,Ie),e(Ie,qy),e(qy,bz),e(Ie,yz),e(Ie,zy),e(zy,Dz),e(Ie,$z),e(Ie,Vy),e(Vy,wz),e(Ie,xz),e(Ie,Uy),e(Uy,Ez),e(Ie,kz),e(Ie,My),e(My,Iz),e(F,Tz),e(F,$r),h(lm,$r,null),e($r,Nz),e($r,Ry),e(Ry,Pz),e(F,Lz),e(F,wr),h(cm,wr,null),e(wr,Fz),e(wr,By),e(By,Az),e(F,Oz),e(F,xr),h(dm,xr,null),e(xr,jz),e(xr,Hy),e(Hy,Sz),e(F,Cz),e(F,Er),h(mm,Er,null),e(Er,qz),e(Er,Gy),e(Gy,zz),D(i,ID,y),D(i,ns,y),e(ns,kr),e(kr,Wy),h(pm,Wy,null),e(ns,Vz),e(ns,Ky),e(Ky,Uz),D(i,TD,y),D(i,H,y),h(hm,H,null),e(H,Mz),e(H,Yy),e(Yy,Rz),e(H,Bz),e(H,Vh),e(Vh,Jy),e(Jy,Hz),e(Vh,Gz),e(H,Wz),e(H,Xy),e(Xy,Kz),e(H,Yz),e(H,Ir),h(fm,Ir,null),e(Ir,Jz),e(Ir,um),e(um,Xz),e(um,Zy),e(Zy,Zz),e(um,Qz),e(H,eV),e(H,Tr),h(gm,Tr,null),e(Tr,tV),e(Tr,rs),e(rs,aV),e(rs,Qy),e(Qy,sV),e(rs,nV),e(rs,e2),e(e2,rV),e(rs,oV),D(i,ND,y),D(i,os,y),e(os,Nr),e(Nr,t2),h(_m,t2,null),e(os,iV),e(os,a2),e(a2,lV),D(i,PD,y),D(i,Gt,y),e(Gt,cV),e(Gt,s2),e(s2,dV),e(Gt,mV),e(Gt,Uh),e(Uh,pV),e(Gt,hV),D(i,LD,y),D(i,G,y),h(vm,G,null),e(G,fV),e(G,n2),e(n2,uV),e(G,gV),e(G,Pr),h(bm,Pr,null),e(Pr,_V),e(Pr,r2),e(r2,vV),e(G,bV),e(G,Lr),h(ym,Lr,null),e(Lr,yV),e(Lr,o2),e(o2,DV),e(G,$V),e(G,Wt),h(Dm,Wt,null),e(Wt,wV),e(Wt,i2),e(i2,xV),e(Wt,EV),e(Wt,l2),e(l2,kV),e(G,IV),e(G,Fr),h($m,Fr,null),e(Fr,TV),e(Fr,c2),e(c2,NV),D(i,FD,y),D(i,is,y),e(is,Ar),e(Ar,d2),h(wm,d2,null),e(is,PV),e(is,m2),e(m2,LV),D(i,AD,y),D(i,k,y),h(xm,k,null),e(k,FV),e(k,p2),e(p2,AV),e(k,OV),e(k,h2),e(h2,jV),e(k,SV),e(k,yt),e(yt,CV),e(yt,f2),e(f2,qV),e(yt,zV),e(yt,u2),e(u2,VV),e(yt,UV),e(yt,g2),e(g2,MV),e(yt,RV),e(k,BV),e(k,_2),e(_2,HV),e(k,GV),e(k,v2),e(v2,WV),e(k,KV),e(k,b2),e(b2,YV),e(k,JV),e(k,Ke),e(Ke,y2),e(y2,XV),e(Ke,ZV),e(Ke,Em),e(Em,QV),e(Ke,eU),e(Ke,D2),e(D2,tU),e(Ke,aU),e(Ke,km),e(km,sU),e(Ke,nU),e(k,rU),e(k,$2),e($2,oU),e(k,iU),e(k,w2),e(w2,lU),e(k,cU),h(Im,k,null),e(k,dU),e(k,ls),e(ls,mU),e(ls,x2),e(x2,pU),e(ls,hU),e(ls,E2),e(E2,fU),e(ls,uU),e(k,gU),h(Tm,k,null),e(k,_U),e(k,Dt),e(Dt,vU),e(Dt,k2),e(k2,bU),e(Dt,yU),e(Dt,I2),e(I2,DU),e(Dt,$U),e(Dt,T2),e(T2,wU),e(Dt,xU),e(k,EU),h(Nm,k,null),e(k,kU),e(k,cs),e(cs,IU),e(cs,N2),e(N2,TU),e(cs,NU),e(cs,P2),e(P2,PU),e(cs,LU),e(k,FU),h(Pm,k,null),e(k,AU),e(k,L2),e(L2,OU),e(k,jU),h(Lm,k,null),e(k,SU),e(k,Or),e(Or,jr),e(jr,F2),h(Fm,F2,null),e(Or,CU),e(Or,A2),e(A2,qU),e(k,zU),e(k,V),e(V,VU),e(V,O2),e(O2,UU),e(V,MU),e(V,j2),e(j2,RU),e(V,BU),e(V,S2),e(S2,HU),e(V,GU),e(V,C2),e(C2,WU),e(V,KU),e(V,q2),e(q2,YU),e(V,JU),e(V,z2),e(z2,XU),e(V,ZU),e(V,V2),e(V2,QU),e(V,eM),D(i,OD,y),D(i,ds,y),h(Am,ds,null),e(ds,tM),e(ds,ms),e(ms,aM),e(ms,U2),e(U2,sM),e(ms,nM),e(ms,M2),e(M2,rM),e(ms,oM),D(i,jD,y),D(i,ps,y),h(Om,ps,null),e(ps,iM),e(ps,R2),e(R2,lM),D(i,SD,y),D(i,hs,y),e(hs,Sr),e(Sr,B2),h(jm,B2,null),e(hs,cM),e(hs,H2),e(H2,dM),D(i,CD,y),D(i,fs,y),h(Sm,fs,null),e(fs,mM),e(fs,G2),e(G2,pM),qD=!0},p(i,[y]){const Cm={};y&2&&(Cm.$$scope={dirty:y,ctx:i}),rr.$set(Cm)},i(i){qD||(f(ge.$$.fragment,i),f(wt.$$.fragment,i),f(yo.$$.fragment,i),f(Do.$$.fragment,i),f(wo.$$.fragment,i),f(xo.$$.fragment,i),f(Eo.$$.fragment,i),f(ko.$$.fragment,i),f(Io.$$.fragment,i),f(To.$$.fragment,i),f(No.$$.fragment,i),f(Po.$$.fragment,i),f(Ao.$$.fragment,i),f(Oo.$$.fragment,i),f(jo.$$.fragment,i),f(So.$$.fragment,i),f(Co.$$.fragment,i),f(zo.$$.fragment,i),f(Vo.$$.fragment,i),f(Uo.$$.fragment,i),f(Mo.$$.fragment,i),f(Ro.$$.fragment,i),f(Bo.$$.fragment,i),f(Ho.$$.fragment,i),f(Go.$$.fragment,i),f(Wo.$$.fragment,i),f(Ko.$$.fragment,i),f(Jo.$$.fragment,i),f(Xo.$$.fragment,i),f(Qo.$$.fragment,i),f(ei.$$.fragment,i),f(ti.$$.fragment,i),f(ai.$$.fragment,i),f(ni.$$.fragment,i),f(oi.$$.fragment,i),f(ii.$$.fragment,i),f(li.$$.fragment,i),f(ci.$$.fragment,i),f(mi.$$.fragment,i),f(pi.$$.fragment,i),f(hi.$$.fragment,i),f(fi.$$.fragment,i),f(ui.$$.fragment,i),f(_i.$$.fragment,i),f(bi.$$.fragment,i),f(yi.$$.fragment,i),f(Di.$$.fragment,i),f($i.$$.fragment,i),f(wi.$$.fragment,i),f(xi.$$.fragment,i),f(Ei.$$.fragment,i),f(ki.$$.fragment,i),f(Ti.$$.fragment,i),f(Ni.$$.fragment,i),f(Pi.$$.fragment,i),f(Li.$$.fragment,i),f(Ai.$$.fragment,i),f(Oi.$$.fragment,i),f(Si.$$.fragment,i),f(Ci.$$.fragment,i),f(zi.$$.fragment,i),f(Vi.$$.fragment,i),f(Ui.$$.fragment,i),f(Mi.$$.fragment,i),f(Ri.$$.fragment,i),f(Bi.$$.fragment,i),f(Hi.$$.fragment,i),f(Gi.$$.fragment,i),f(Wi.$$.fragment,i),f(Ki.$$.fragment,i),f(Yi.$$.fragment,i),f(Ji.$$.fragment,i),f(Xi.$$.fragment,i),f(Zi.$$.fragment,i),f(Qi.$$.fragment,i),f(el.$$.fragment,i),f(tl.$$.fragment,i),f(al.$$.fragment,i),f(sl.$$.fragment,i),f(nl.$$.fragment,i),f(rl.$$.fragment,i),f(ol.$$.fragment,i),f(il.$$.fragment,i),f(ll.$$.fragment,i),f(cl.$$.fragment,i),f(dl.$$.fragment,i),f(ml.$$.fragment,i),f(pl.$$.fragment,i),f(hl.$$.fragment,i),f(fl.$$.fragment,i),f(ul.$$.fragment,i),f(gl.$$.fragment,i),f(vl.$$.fragment,i),f(bl.$$.fragment,i),f(yl.$$.fragment,i),f(Dl.$$.fragment,i),f($l.$$.fragment,i),f(xl.$$.fragment,i),f(kl.$$.fragment,i),f(Tl.$$.fragment,i),f(Nl.$$.fragment,i),f(Pl.$$.fragment,i),f(Ll.$$.fragment,i),f(Fl.$$.fragment,i),f(Al.$$.fragment,i),f(jl.$$.fragment,i),f(Sl.$$.fragment,i),f(Cl.$$.fragment,i),f(ql.$$.fragment,i),f(zl.$$.fragment,i),f(Vl.$$.fragment,i),f(Ul.$$.fragment,i),f(Ml.$$.fragment,i),f(Rl.$$.fragment,i),f(Hl.$$.fragment,i),f(Wl.$$.fragment,i),f(Kl.$$.fragment,i),f(Jl.$$.fragment,i),f(Xl.$$.fragment,i),f(Zl.$$.fragment,i),f(Ql.$$.fragment,i),f(ec.$$.fragment,i),f(tc.$$.fragment,i),f(sc.$$.fragment,i),f(nc.$$.fragment,i),f(oc.$$.fragment,i),f(ic.$$.fragment,i),f(lc.$$.fragment,i),f(cc.$$.fragment,i),f(dc.$$.fragment,i),f(mc.$$.fragment,i),f(pc.$$.fragment,i),f(hc.$$.fragment,i),f(fc.$$.fragment,i),f(uc.$$.fragment,i),f(gc.$$.fragment,i),f(_c.$$.fragment,i),f(vc.$$.fragment,i),f(bc.$$.fragment,i),f(yc.$$.fragment,i),f(Dc.$$.fragment,i),f(wc.$$.fragment,i),f(xc.$$.fragment,i),f(Ec.$$.fragment,i),f(Ic.$$.fragment,i),f(Nc.$$.fragment,i),f(Lc.$$.fragment,i),f(Fc.$$.fragment,i),f(Ac.$$.fragment,i),f(Oc.$$.fragment,i),f(jc.$$.fragment,i),f(Sc.$$.fragment,i),f(Cc.$$.fragment,i),f(qc.$$.fragment,i),f(zc.$$.fragment,i),f(Vc.$$.fragment,i),f(Uc.$$.fragment,i),f(Mc.$$.fragment,i),f(Rc.$$.fragment,i),f(Bc.$$.fragment,i),f(Hc.$$.fragment,i),f(Gc.$$.fragment,i),f(Wc.$$.fragment,i),f(Kc.$$.fragment,i),f(Jc.$$.fragment,i),f(Xc.$$.fragment,i),f(Qc.$$.fragment,i),f(ed.$$.fragment,i),f(td.$$.fragment,i),f(ad.$$.fragment,i),f(sd.$$.fragment,i),f(nd.$$.fragment,i),f(rd.$$.fragment,i),f(od.$$.fragment,i),f(rr.$$.fragment,i),f(pd.$$.fragment,i),f(hd.$$.fragment,i),f(fd.$$.fragment,i),f(ud.$$.fragment,i),f(gd.$$.fragment,i),f(_d.$$.fragment,i),f(vd.$$.fragment,i),f(bd.$$.fragment,i),f(yd.$$.fragment,i),f(Dd.$$.fragment,i),f($d.$$.fragment,i),f(wd.$$.fragment,i),f(xd.$$.fragment,i),f(Ed.$$.fragment,i),f(Id.$$.fragment,i),f(Td.$$.fragment,i),f(Nd.$$.fragment,i),f(Pd.$$.fragment,i),f(Fd.$$.fragment,i),f(Ad.$$.fragment,i),f(Od.$$.fragment,i),f(jd.$$.fragment,i),f(Sd.$$.fragment,i),f(qd.$$.fragment,i),f(Vd.$$.fragment,i),f(Md.$$.fragment,i),f(Bd.$$.fragment,i),f(Hd.$$.fragment,i),f(Jd.$$.fragment,i),f(Xd.$$.fragment,i),f(Zd.$$.fragment,i),f(Qd.$$.fragment,i),f(em.$$.fragment,i),f(tm.$$.fragment,i),f(im.$$.fragment,i),f(lm.$$.fragment,i),f(cm.$$.fragment,i),f(dm.$$.fragment,i),f(mm.$$.fragment,i),f(pm.$$.fragment,i),f(hm.$$.fragment,i),f(fm.$$.fragment,i),f(gm.$$.fragment,i),f(_m.$$.fragment,i),f(vm.$$.fragment,i),f(bm.$$.fragment,i),f(ym.$$.fragment,i),f(Dm.$$.fragment,i),f($m.$$.fragment,i),f(wm.$$.fragment,i),f(xm.$$.fragment,i),f(Im.$$.fragment,i),f(Tm.$$.fragment,i),f(Nm.$$.fragment,i),f(Pm.$$.fragment,i),f(Lm.$$.fragment,i),f(Fm.$$.fragment,i),f(Am.$$.fragment,i),f(Om.$$.fragment,i),f(jm.$$.fragment,i),f(Sm.$$.fragment,i),qD=!0)},o(i){u(ge.$$.fragment,i),u(wt.$$.fragment,i),u(yo.$$.fragment,i),u(Do.$$.fragment,i),u(wo.$$.fragment,i),u(xo.$$.fragment,i),u(Eo.$$.fragment,i),u(ko.$$.fragment,i),u(Io.$$.fragment,i),u(To.$$.fragment,i),u(No.$$.fragment,i),u(Po.$$.fragment,i),u(Ao.$$.fragment,i),u(Oo.$$.fragment,i),u(jo.$$.fragment,i),u(So.$$.fragment,i),u(Co.$$.fragment,i),u(zo.$$.fragment,i),u(Vo.$$.fragment,i),u(Uo.$$.fragment,i),u(Mo.$$.fragment,i),u(Ro.$$.fragment,i),u(Bo.$$.fragment,i),u(Ho.$$.fragment,i),u(Go.$$.fragment,i),u(Wo.$$.fragment,i),u(Ko.$$.fragment,i),u(Jo.$$.fragment,i),u(Xo.$$.fragment,i),u(Qo.$$.fragment,i),u(ei.$$.fragment,i),u(ti.$$.fragment,i),u(ai.$$.fragment,i),u(ni.$$.fragment,i),u(oi.$$.fragment,i),u(ii.$$.fragment,i),u(li.$$.fragment,i),u(ci.$$.fragment,i),u(mi.$$.fragment,i),u(pi.$$.fragment,i),u(hi.$$.fragment,i),u(fi.$$.fragment,i),u(ui.$$.fragment,i),u(_i.$$.fragment,i),u(bi.$$.fragment,i),u(yi.$$.fragment,i),u(Di.$$.fragment,i),u($i.$$.fragment,i),u(wi.$$.fragment,i),u(xi.$$.fragment,i),u(Ei.$$.fragment,i),u(ki.$$.fragment,i),u(Ti.$$.fragment,i),u(Ni.$$.fragment,i),u(Pi.$$.fragment,i),u(Li.$$.fragment,i),u(Ai.$$.fragment,i),u(Oi.$$.fragment,i),u(Si.$$.fragment,i),u(Ci.$$.fragment,i),u(zi.$$.fragment,i),u(Vi.$$.fragment,i),u(Ui.$$.fragment,i),u(Mi.$$.fragment,i),u(Ri.$$.fragment,i),u(Bi.$$.fragment,i),u(Hi.$$.fragment,i),u(Gi.$$.fragment,i),u(Wi.$$.fragment,i),u(Ki.$$.fragment,i),u(Yi.$$.fragment,i),u(Ji.$$.fragment,i),u(Xi.$$.fragment,i),u(Zi.$$.fragment,i),u(Qi.$$.fragment,i),u(el.$$.fragment,i),u(tl.$$.fragment,i),u(al.$$.fragment,i),u(sl.$$.fragment,i),u(nl.$$.fragment,i),u(rl.$$.fragment,i),u(ol.$$.fragment,i),u(il.$$.fragment,i),u(ll.$$.fragment,i),u(cl.$$.fragment,i),u(dl.$$.fragment,i),u(ml.$$.fragment,i),u(pl.$$.fragment,i),u(hl.$$.fragment,i),u(fl.$$.fragment,i),u(ul.$$.fragment,i),u(gl.$$.fragment,i),u(vl.$$.fragment,i),u(bl.$$.fragment,i),u(yl.$$.fragment,i),u(Dl.$$.fragment,i),u($l.$$.fragment,i),u(xl.$$.fragment,i),u(kl.$$.fragment,i),u(Tl.$$.fragment,i),u(Nl.$$.fragment,i),u(Pl.$$.fragment,i),u(Ll.$$.fragment,i),u(Fl.$$.fragment,i),u(Al.$$.fragment,i),u(jl.$$.fragment,i),u(Sl.$$.fragment,i),u(Cl.$$.fragment,i),u(ql.$$.fragment,i),u(zl.$$.fragment,i),u(Vl.$$.fragment,i),u(Ul.$$.fragment,i),u(Ml.$$.fragment,i),u(Rl.$$.fragment,i),u(Hl.$$.fragment,i),u(Wl.$$.fragment,i),u(Kl.$$.fragment,i),u(Jl.$$.fragment,i),u(Xl.$$.fragment,i),u(Zl.$$.fragment,i),u(Ql.$$.fragment,i),u(ec.$$.fragment,i),u(tc.$$.fragment,i),u(sc.$$.fragment,i),u(nc.$$.fragment,i),u(oc.$$.fragment,i),u(ic.$$.fragment,i),u(lc.$$.fragment,i),u(cc.$$.fragment,i),u(dc.$$.fragment,i),u(mc.$$.fragment,i),u(pc.$$.fragment,i),u(hc.$$.fragment,i),u(fc.$$.fragment,i),u(uc.$$.fragment,i),u(gc.$$.fragment,i),u(_c.$$.fragment,i),u(vc.$$.fragment,i),u(bc.$$.fragment,i),u(yc.$$.fragment,i),u(Dc.$$.fragment,i),u(wc.$$.fragment,i),u(xc.$$.fragment,i),u(Ec.$$.fragment,i),u(Ic.$$.fragment,i),u(Nc.$$.fragment,i),u(Lc.$$.fragment,i),u(Fc.$$.fragment,i),u(Ac.$$.fragment,i),u(Oc.$$.fragment,i),u(jc.$$.fragment,i),u(Sc.$$.fragment,i),u(Cc.$$.fragment,i),u(qc.$$.fragment,i),u(zc.$$.fragment,i),u(Vc.$$.fragment,i),u(Uc.$$.fragment,i),u(Mc.$$.fragment,i),u(Rc.$$.fragment,i),u(Bc.$$.fragment,i),u(Hc.$$.fragment,i),u(Gc.$$.fragment,i),u(Wc.$$.fragment,i),u(Kc.$$.fragment,i),u(Jc.$$.fragment,i),u(Xc.$$.fragment,i),u(Qc.$$.fragment,i),u(ed.$$.fragment,i),u(td.$$.fragment,i),u(ad.$$.fragment,i),u(sd.$$.fragment,i),u(nd.$$.fragment,i),u(rd.$$.fragment,i),u(od.$$.fragment,i),u(rr.$$.fragment,i),u(pd.$$.fragment,i),u(hd.$$.fragment,i),u(fd.$$.fragment,i),u(ud.$$.fragment,i),u(gd.$$.fragment,i),u(_d.$$.fragment,i),u(vd.$$.fragment,i),u(bd.$$.fragment,i),u(yd.$$.fragment,i),u(Dd.$$.fragment,i),u($d.$$.fragment,i),u(wd.$$.fragment,i),u(xd.$$.fragment,i),u(Ed.$$.fragment,i),u(Id.$$.fragment,i),u(Td.$$.fragment,i),u(Nd.$$.fragment,i),u(Pd.$$.fragment,i),u(Fd.$$.fragment,i),u(Ad.$$.fragment,i),u(Od.$$.fragment,i),u(jd.$$.fragment,i),u(Sd.$$.fragment,i),u(qd.$$.fragment,i),u(Vd.$$.fragment,i),u(Md.$$.fragment,i),u(Bd.$$.fragment,i),u(Hd.$$.fragment,i),u(Jd.$$.fragment,i),u(Xd.$$.fragment,i),u(Zd.$$.fragment,i),u(Qd.$$.fragment,i),u(em.$$.fragment,i),u(tm.$$.fragment,i),u(im.$$.fragment,i),u(lm.$$.fragment,i),u(cm.$$.fragment,i),u(dm.$$.fragment,i),u(mm.$$.fragment,i),u(pm.$$.fragment,i),u(hm.$$.fragment,i),u(fm.$$.fragment,i),u(gm.$$.fragment,i),u(_m.$$.fragment,i),u(vm.$$.fragment,i),u(bm.$$.fragment,i),u(ym.$$.fragment,i),u(Dm.$$.fragment,i),u($m.$$.fragment,i),u(wm.$$.fragment,i),u(xm.$$.fragment,i),u(Im.$$.fragment,i),u(Tm.$$.fragment,i),u(Nm.$$.fragment,i),u(Pm.$$.fragment,i),u(Lm.$$.fragment,i),u(Fm.$$.fragment,i),u(Am.$$.fragment,i),u(Om.$$.fragment,i),u(jm.$$.fragment,i),u(Sm.$$.fragment,i),qD=!1},d(i){t(A),i&&t(_s),i&&t(W),g(ge),i&&t(vs),i&&t(_e),g(wt),i&&t(Y2),i&&t(R),g(yo),g(Do),g(wo),i&&t(J2),i&&t(ga),g(xo),i&&t(X2),i&&t($s),i&&t(Z2),i&&t(v),g(Eo),g(ko),g(Io),g(To),g(No),g(Po),g(Ao),g(Oo),g(jo),g(So),g(Co),g(zo),g(Vo),g(Uo),g(Mo),g(Ro),g(Bo),g(Ho),g(Go),g(Wo),g(Ko),g(Jo),g(Xo),g(Qo),g(ei),g(ti),g(ai),g(ni),g(oi),g(ii),g(li),g(ci),g(mi),g(pi),g(hi),g(fi),g(ui),g(_i),g(bi),g(yi),g(Di),g($i),g(wi),g(xi),g(Ei),g(ki),g(Ti),g(Ni),g(Pi),g(Li),g(Ai),g(Oi),g(Si),g(Ci),g(zi),g(Vi),g(Ui),g(Mi),g(Ri),g(Bi),g(Hi),g(Gi),g(Wi),g(Ki),g(Yi),g(Ji),g(Xi),g(Zi),g(Qi),g(el),g(tl),g(al),g(sl),g(nl),g(rl),g(ol),g(il),g(ll),g(cl),g(dl),g(ml),g(pl),g(hl),g(fl),g(ul),g(gl),g(vl),i&&t(Q2),i&&t(Na),g(bl),i&&t(eD),i&&t(S),g(yl),g(Dl),i&&t(tD),i&&t(te),g($l),i&&t(aD),i&&t(ae),g(xl),i&&t(sD),i&&t(se),g(kl),i&&t(nD),i&&t(Fa),g(Tl),i&&t(rD),i&&t(gn),i&&t(oD),i&&t($),g(Nl),g(Pl),g(Ll),g(Fl),g(Al),g(jl),g(Sl),g(Cl),g(ql),g(zl),g(Vl),g(Ul),g(Ml),g(Rl),g(Hl),g(Wl),g(Kl),g(Jl),g(Xl),g(Zl),g(Ql),g(ec),g(tc),g(sc),g(nc),g(oc),g(ic),g(lc),g(cc),g(dc),g(mc),g(pc),g(hc),g(fc),i&&t(iD),i&&t(Yp),i&&t(lD),i&&t(Ba),g(uc),i&&t(cD),i&&t(zn),i&&t(dD),i&&t(x),g(gc),g(_c),g(vc),g(bc),g(yc),g(Dc),g(wc),g(xc),g(Ec),g(Ic),g(Nc),g(Lc),g(Fc),g(Ac),g(Oc),g(jc),g(Sc),g(Cc),g(qc),g(zc),g(Vc),g(Uc),g(Mc),g(Rc),g(Bc),g(Hc),i&&t(mD),i&&t(Wa),g(Gc),i&&t(pD),i&&t(Jn),i&&t(hD),i&&t(P),g(Wc),g(Kc),g(Jc),g(Xc),g(Qc),g(ed),g(td),g(ad),g(sd),g(nd),i&&t(fD),i&&t(Ja),g(rd),i&&t(uD),i&&t(T),g(od),g(rr),g(pd),g(hd),g(fd),g(ud),g(gd),g(_d),g(vd),g(bd),g(yd),g(Dd),g($d),g(wd),i&&t(gD),i&&t(Xa),g(xd),i&&t(_D),i&&t(B),g(Ed),g(Id),g(Td),i&&t(vD),i&&t(_t),g(Nd),i&&t(bD),i&&t(q),g(Pd),g(Fd),g(Ad),i&&t(yD),i&&t(z),g(Od),g(jd),g(Sd),i&&t(DD),i&&t(Cd),g(qd),i&&t($D),i&&t(zd),g(Vd),i&&t(wD),i&&t(Ud),g(Md),i&&t(xD),i&&t(Rd),g(Bd),i&&t(ED),i&&t(L),g(Hd),g(Jd),g(Xd),g(Zd),g(Qd),g(em),i&&t(kD),i&&t(F),g(tm),g(im),g(lm),g(cm),g(dm),g(mm),i&&t(ID),i&&t(ns),g(pm),i&&t(TD),i&&t(H),g(hm),g(fm),g(gm),i&&t(ND),i&&t(os),g(_m),i&&t(PD),i&&t(Gt),i&&t(LD),i&&t(G),g(vm),g(bm),g(ym),g(Dm),g($m),i&&t(FD),i&&t(is),g(wm),i&&t(AD),i&&t(k),g(xm),g(Im),g(Tm),g(Nm),g(Pm),g(Lm),g(Fm),i&&t(OD),i&&t(ds),g(Am),i&&t(jD),i&&t(ps),g(Om),i&&t(SD),i&&t(hs),g(jm),i&&t(CD),i&&t(fs),g(Sm)}}}const VZ={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function UZ(K2){return SZ(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class WZ extends FZ{constructor(A){super();AZ(this,A,UZ,zZ,OZ,{})}}export{WZ as default,VZ as metadata};
