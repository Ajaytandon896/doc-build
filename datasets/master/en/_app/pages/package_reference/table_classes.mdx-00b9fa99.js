import{S as h$,i as b$,s as u$,e as s,k as r,w as m,t as c,M as g$,c as n,d as a,m as l,a as o,x as p,h as d,b as i,F as e,g as D,y as h,L as f$,q as b,o as u,B as g,v as v$}from"../../chunks/vendor-aa873a46.js";import{D as f}from"../../chunks/Docstring-337b9264.js";import{C as y$}from"../../chunks/CodeBlock-1f14baf3.js";import{I as Mn}from"../../chunks/IconCopyLink-d0ca3106.js";function $$(cf){let W,yl,X,ee,Pn,Vt,xd,Cn,Dd,$l,P,Id,Ln,Md,Pd,nn,Cd,Ld,_l,H,te,An,St,Ad,Nn,Nd,Tl,k,qt,jd,jn,Fd,Vd,Fn,Sd,qd,Vn,Rd,Ud,C,Rt,zd,Sn,Bd,Od,Ut,Wd,qn,Xd,Hd,Gd,ae,zt,Yd,Rn,Jd,Kd,se,Bt,Qd,Un,Zd,ei,ne,Ot,ti,zn,ai,si,oe,Wt,ni,Bn,oi,ri,on,Xt,li,re,Ht,ci,On,di,ii,le,Gt,mi,Wn,pi,hi,ce,Yt,bi,Xn,ui,gi,de,Jt,fi,Hn,vi,yi,ie,Kt,$i,Gn,_i,Ti,me,Qt,wi,Yn,ki,Ei,L,Zt,xi,Jn,Di,Ii,Kn,Mi,Pi,pe,ea,Ci,Qn,Li,Ai,he,ta,Ni,Zn,ji,wl,G,be,eo,aa,Fi,to,Vi,kl,v,sa,Si,ao,qi,Ri,so,Ui,zi,no,Bi,Oi,oo,Wi,Xi,A,na,Hi,ro,Gi,Yi,oa,Ji,lo,Ki,Qi,Zi,ue,ra,em,co,tm,am,ge,la,sm,io,nm,om,fe,ca,rm,mo,lm,cm,ve,da,dm,po,im,mm,rn,ia,pm,ye,ma,hm,ho,bm,um,$e,pa,gm,bo,fm,vm,_e,ha,ym,uo,$m,_m,Te,ba,Tm,go,wm,km,we,ua,Em,fo,xm,Dm,ke,ga,Im,vo,Mm,Pm,N,fa,Cm,yo,Lm,Am,$o,Nm,jm,Ee,va,Fm,_o,Vm,Sm,xe,ya,qm,To,Rm,Um,De,$a,zm,wo,Bm,Om,Ie,_a,Wm,ko,Xm,Hm,Me,Ta,Gm,Eo,Ym,Jm,Pe,wa,Km,xo,Qm,Zm,j,ka,ep,Do,tp,ap,Io,sp,np,Ce,Ea,op,Mo,rp,lp,Le,xa,cp,Po,dp,ip,F,Da,mp,Co,pp,hp,Lo,bp,up,Ae,Ia,gp,Ao,fp,vp,Ne,Ma,yp,No,$p,_p,je,Pa,Tp,jo,wp,kp,Fe,Ca,Ep,Fo,xp,Dp,Ve,La,Ip,Vo,Mp,Pp,ln,Aa,Cp,cn,Na,Lp,I,ja,Ap,So,Np,jp,Fa,Fp,qo,Vp,Sp,qp,Va,Rp,Ro,Up,zp,Bp,Uo,Op,Wp,Sa,Xp,Se,qa,Hp,zo,Gp,Yp,qe,Ra,Jp,Bo,Kp,Qp,Re,Ua,Zp,Oo,eh,El,Y,Ue,Wo,za,th,Xo,ah,xl,_,Ba,sh,Ho,nh,oh,Go,rh,lh,Yo,ch,dh,Jo,ih,mh,Ko,ph,hh,V,Oa,bh,Qo,uh,gh,Wa,fh,Zo,vh,yh,$h,ze,Xa,_h,er,Th,wh,Be,Ha,kh,tr,Eh,xh,Oe,Ga,Dh,ar,Ih,Mh,We,Ya,Ph,sr,Ch,Lh,dn,Ja,Ah,Xe,Ka,Nh,nr,jh,Fh,He,Qa,Vh,or,Sh,qh,Ge,Za,Rh,rr,Uh,zh,Ye,es,Bh,lr,Oh,Wh,Je,ts,Xh,cr,Hh,Gh,Ke,as,Yh,dr,Jh,Kh,S,ss,Qh,ir,Zh,eb,mr,tb,ab,Qe,ns,sb,pr,nb,ob,Ze,os,rb,hr,lb,cb,et,rs,db,br,ib,mb,tt,ls,pb,ur,hb,bb,at,cs,ub,gr,gb,fb,st,ds,vb,fr,yb,$b,q,is,_b,vr,Tb,wb,yr,kb,Eb,nt,ms,xb,$r,Db,Ib,ot,ps,Mb,_r,Pb,Cb,R,hs,Lb,Tr,Ab,Nb,wr,jb,Fb,rt,bs,Vb,kr,Sb,qb,lt,us,Rb,Er,Ub,zb,ct,gs,Bb,xr,Ob,Wb,dt,fs,Xb,Dr,Hb,Gb,it,vs,Yb,Ir,Jb,Kb,mn,ys,Dl,J,mt,Mr,$s,Qb,Pr,Zb,Il,$,_s,eu,Cr,tu,au,Lr,su,nu,Ts,Ar,ou,ru,Nr,lu,cu,ws,du,jr,iu,mu,pu,Fr,hu,bu,U,ks,uu,Vr,gu,fu,Es,vu,Sr,yu,$u,_u,pt,xs,Tu,qr,wu,ku,ht,Ds,Eu,Rr,xu,Du,bt,Is,Iu,Ur,Mu,Pu,ut,Ms,Cu,zr,Lu,Au,pn,Ps,Nu,gt,Cs,ju,Br,Fu,Vu,ft,Ls,Su,Or,qu,Ru,vt,As,Uu,Wr,zu,Bu,yt,Ns,Ou,Xr,Wu,Xu,$t,js,Hu,Hr,Gu,Yu,_t,Fs,Ju,Gr,Ku,Qu,z,Vs,Zu,Yr,eg,tg,Jr,ag,sg,Tt,Ss,ng,Kr,og,rg,wt,qs,lg,Qr,cg,dg,kt,Rs,ig,Zr,mg,pg,Et,Us,hg,el,bg,ug,xt,zs,gg,tl,fg,vg,Dt,Bs,yg,al,$g,_g,B,Os,Tg,sl,wg,kg,nl,Eg,xg,It,Ws,Dg,ol,Ig,Mg,Mt,Xs,Pg,rl,Cg,Lg,O,Hs,Ag,ll,Ng,jg,cl,Fg,Vg,Pt,Gs,Sg,dl,qg,Rg,Ct,Ys,Ug,il,zg,Bg,Lt,Js,Og,ml,Wg,Xg,At,Ks,Hg,pl,Gg,Yg,Nt,Qs,Jg,hl,Kg,Qg,hn,Zs,Zg,jt,en,ef,bl,tf,Ml,K,Ft,ul,tn,af,gl,sf,Pl,Q,an,nf,fl,of,Cl,Z,sn,rf,vl,lf,Ll;return Vt=new Mn({}),St=new Mn({}),qt=new f({props:{name:"class datasets.table.Table",anchor:"datasets.table.Table",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L147"}}),Rt=new f({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L198",parametersDescription:[{anchor:"datasets.table.Table.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}]}}),zt=new f({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L214",parametersDescription:[{anchor:"datasets.table.Table.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.Table.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],returnType:`
<p><code>bool</code></p>
`}}),Bt=new f({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231",parametersDescription:[{anchor:"datasets.table.Table.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Ot=new f({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Wt=new f({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254",parametersDescription:[{anchor:"datasets.table.Table.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.Table.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.Table.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.Table.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.Table.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.Table.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.Table.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.Table.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.Table.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.Table.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.Table.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.Table.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.Table.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.Table.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Xt=new f({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L316"}}),Ht=new f({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L319",parametersDescription:[{anchor:"datasets.table.Table.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.Field</code></p>
`}}),Gt=new f({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L332",parametersDescription:[{anchor:"datasets.table.Table.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Yt=new f({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L345"}}),Jt=new f({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),Kt=new f({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),Qt=new f({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),Zt=new f({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),ea=new f({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),ta=new f({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L407"}}),aa=new Mn({}),sa=new f({props:{name:"class datasets.table.InMemoryTable",anchor:"datasets.table.InMemoryTable",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L630"}}),na=new f({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L198",parametersDescription:[{anchor:"datasets.table.Table.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}]}}),ra=new f({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L214",parametersDescription:[{anchor:"datasets.table.Table.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.Table.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],returnType:`
<p><code>bool</code></p>
`}}),la=new f({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231",parametersDescription:[{anchor:"datasets.table.Table.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),ca=new f({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),da=new f({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254",parametersDescription:[{anchor:"datasets.table.Table.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.Table.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.Table.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.Table.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.Table.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.Table.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.Table.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.Table.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.Table.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.Table.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.Table.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.Table.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.Table.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.Table.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),ia=new f({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L316"}}),ma=new f({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L319",parametersDescription:[{anchor:"datasets.table.Table.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.Field</code></p>
`}}),pa=new f({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L332",parametersDescription:[{anchor:"datasets.table.Table.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),ha=new f({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L345"}}),ba=new f({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),ua=new f({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),ga=new f({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),fa=new f({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),va=new f({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),ya=new f({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L407"}}),$a=new f({props:{name:"column_names",anchor:"datasets.table.Table.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L414"}}),_a=new f({props:{name:"slice",anchor:"datasets.table.InMemoryTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L767",parametersDescription:[{anchor:"datasets.table.InMemoryTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.InMemoryTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ta=new f({props:{name:"filter",anchor:"datasets.table.InMemoryTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L784"}}),wa=new f({props:{name:"flatten",anchor:"datasets.table.InMemoryTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L790",parametersDescription:[{anchor:"datasets.table.InMemoryTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ka=new f({props:{name:"combine_chunks",anchor:"datasets.table.InMemoryTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L804",parametersDescription:[{anchor:"datasets.table.InMemoryTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ea=new f({props:{name:"cast",anchor:"datasets.table.InMemoryTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L820",parametersDescription:[{anchor:"datasets.table.InMemoryTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.InMemoryTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),xa=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.InMemoryTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L835",parametersDescription:[{anchor:"datasets.table.InMemoryTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Da=new f({props:{name:"add_column",anchor:"datasets.table.InMemoryTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L849",parametersDescription:[{anchor:"datasets.table.InMemoryTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.InMemoryTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ia=new f({props:{name:"append_column",anchor:"datasets.table.InMemoryTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L870",parametersDescription:[{anchor:"datasets.table.InMemoryTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ma=new f({props:{name:"remove_column",anchor:"datasets.table.InMemoryTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L887",parametersDescription:[{anchor:"datasets.table.InMemoryTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Pa=new f({props:{name:"set_column",anchor:"datasets.table.InMemoryTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L901",parametersDescription:[{anchor:"datasets.table.InMemoryTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.InMemoryTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.InMemoryTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ca=new f({props:{name:"rename_columns",anchor:"datasets.table.InMemoryTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L920"}}),La=new f({props:{name:"drop",anchor:"datasets.table.InMemoryTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L926",parametersDescription:[{anchor:"datasets.table.InMemoryTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Aa=new f({props:{name:"from_file",anchor:"datasets.table.InMemoryTable.from_file",parameters:[{name:"filename",val:": str"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L645"}}),Na=new f({props:{name:"from_buffer",anchor:"datasets.table.InMemoryTable.from_buffer",parameters:[{name:"buffer",val:": Buffer"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L650"}}),ja=new f({props:{name:"from_pandas",anchor:"datasets.table.InMemoryTable.from_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L655",parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014;",name:"df"},{anchor:"datasets.table.InMemoryTable.from_pandas.schema",description:`<strong>schema</strong> (<code>pyarrow.Schema</code>, optional) &#x2014;
The expected schema of the Arrow Table. This can be used to
indicate the type of columns if we cannot infer it automatically.
If passed, the output will have exactly this schema. Columns
specified in the schema that are not found in the DataFrame columns
or its index will raise an error. Additional columns or index
levels in the DataFrame which are not specified in the schema will
be ignored.`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014;
Whether to store the index as an additional column in the resulting
<code>Table</code>. The default of None will store the index as a column,
except for RangeIndex which is stored as metadata only. Use
<code>preserve_index=True</code> to force it to be stored as a column.`,name:"preserve_index"},{anchor:"datasets.table.InMemoryTable.from_pandas.nthreads",description:`<strong>nthreads</strong> (<code>int</code>, defaults to <code>None</code> (may use up to system CPU count threads)) &#x2014;
If greater than 1, convert columns to Arrow in parallel using
indicated number of threads`,name:"nthreads"},{anchor:"datasets.table.InMemoryTable.from_pandas.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014;
List of column to be converted. If None, use all columns.`,name:"columns"},{anchor:"datasets.table.InMemoryTable.from_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Sa=new y$({props:{code:`import pandas as pd
import pyarrow as pa
df = pd.DataFrame({
pa.Table.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pyarrow <span class="hljs-keyword">as</span> pa
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({
    ...     <span class="hljs-string">&#x27;int&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],
    ...     <span class="hljs-string">&#x27;str&#x27;</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]
    ... })
<span class="hljs-meta">&gt;&gt;&gt; </span>pa.Table.from_pandas(df)
&lt;pyarrow.lib.Table <span class="hljs-built_in">object</span> at <span class="hljs-number">0x7f05d1fb1b40</span>&gt;`}}),qa=new f({props:{name:"from_arrays",anchor:"datasets.table.InMemoryTable.from_arrays",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L713",parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_arrays.arrays",description:`<strong>arrays</strong> (<code>List[Union[pyarrow.Array, pyarrow.ChunkedArray]]</code>) &#x2014;
Equal-length arrays that should form the table.`,name:"arrays"},{anchor:"datasets.table.InMemoryTable.from_arrays.names",description:`<strong>names</strong> (<code>List[str]</code>, optional) &#x2014;
Names for the table columns. If not passed, schema must be passed`,name:"names"},{anchor:"datasets.table.InMemoryTable.from_arrays.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
Schema for the created table. If not passed, names must be passed`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_arrays.metadata",description:`<strong>metadata</strong> (<code>Union[dict, Mapping]</code>, default None) &#x2014;
Optional metadata for the schema (if inferred).`,name:"metadata"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ra=new f({props:{name:"from_pydict",anchor:"datasets.table.InMemoryTable.from_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L733",parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_pydict.mapping",description:`<strong>mapping</strong> (<code>Union[dict, Mapping]</code>) &#x2014;
A mapping of strings to Arrays or Python lists.`,name:"mapping"},{anchor:"datasets.table.InMemoryTable.from_pydict.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
If not passed, will be inferred from the Mapping values`,name:"schema"},{anchor:"datasets.table.InMemoryTable.from_pydict.metadata",description:`<strong>metadata</strong> (<code>Union[dict, Mapping]</code>, default None) &#x2014;
Optional metadata for the schema (if inferred).`,name:"metadata"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ua=new f({props:{name:"from_batches",anchor:"datasets.table.InMemoryTable.from_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L751",parametersDescription:[{anchor:"datasets.table.InMemoryTable.from_batches.batches",description:`<strong>batches</strong> (<code>Union[Sequence[pyarrow.RecordBatch], Iterator[pyarrow.RecordBatch]]</code>) &#x2014;
Sequence of RecordBatch to be converted, all schemas must be equal.`,name:"batches"},{anchor:"datasets.table.InMemoryTable.from_batches.schema",description:`<strong>schema</strong> (<code>Schema</code>, defaults to <code>None</code>) &#x2014;
If not passed, will be inferred from the first RecordBatch.`,name:"schema"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),za=new Mn({}),Ba=new f({props:{name:"class datasets.table.MemoryMappedTable",anchor:"datasets.table.MemoryMappedTable",parameters:[{name:"table",val:": Table"},{name:"path",val:": str"},{name:"replays",val:": typing.Union[typing.List[typing.Tuple[str, tuple, dict]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L948"}}),Oa=new f({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L198",parametersDescription:[{anchor:"datasets.table.Table.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}]}}),Xa=new f({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L214",parametersDescription:[{anchor:"datasets.table.Table.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.Table.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],returnType:`
<p><code>bool</code></p>
`}}),Ha=new f({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231",parametersDescription:[{anchor:"datasets.table.Table.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Ga=new f({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Ya=new f({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254",parametersDescription:[{anchor:"datasets.table.Table.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.Table.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.Table.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.Table.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.Table.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.Table.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.Table.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.Table.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.Table.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.Table.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.Table.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.Table.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.Table.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.Table.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Ja=new f({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L316"}}),Ka=new f({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L319",parametersDescription:[{anchor:"datasets.table.Table.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.Field</code></p>
`}}),Qa=new f({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L332",parametersDescription:[{anchor:"datasets.table.Table.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),Za=new f({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L345"}}),es=new f({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),ts=new f({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),as=new f({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),ss=new f({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),ns=new f({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),os=new f({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L407"}}),rs=new f({props:{name:"column_names",anchor:"datasets.table.Table.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L414"}}),ls=new f({props:{name:"slice",anchor:"datasets.table.MemoryMappedTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1007",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.MemoryMappedTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),cs=new f({props:{name:"filter",anchor:"datasets.table.MemoryMappedTable.filter",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1026"}}),ds=new f({props:{name:"flatten",anchor:"datasets.table.MemoryMappedTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1034",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),is=new f({props:{name:"combine_chunks",anchor:"datasets.table.MemoryMappedTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1050",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ms=new f({props:{name:"cast",anchor:"datasets.table.MemoryMappedTable.cast",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1068",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.MemoryMappedTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ps=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1085",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),hs=new f({props:{name:"add_column",anchor:"datasets.table.MemoryMappedTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1101",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.MemoryMappedTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),bs=new f({props:{name:"append_column",anchor:"datasets.table.MemoryMappedTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1124",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),us=new f({props:{name:"remove_column",anchor:"datasets.table.MemoryMappedTable.remove_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1143",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),gs=new f({props:{name:"set_column",anchor:"datasets.table.MemoryMappedTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1159",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.MemoryMappedTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.MemoryMappedTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),fs=new f({props:{name:"rename_columns",anchor:"datasets.table.MemoryMappedTable.rename_columns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1180"}}),vs=new f({props:{name:"drop",anchor:"datasets.table.MemoryMappedTable.drop",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1188",parametersDescription:[{anchor:"datasets.table.MemoryMappedTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),ys=new f({props:{name:"from_file",anchor:"datasets.table.MemoryMappedTable.from_file",parameters:[{name:"filename",val:": str"},{name:"replays",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L974"}}),$s=new Mn({}),_s=new f({props:{name:"class datasets.table.ConcatenationTable",anchor:"datasets.table.ConcatenationTable",parameters:[{name:"table",val:": Table"},{name:"blocks",val:": typing.List[typing.List[datasets.table.TableBlock]]"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1215"}}),ks=new f({props:{name:"validate",anchor:"datasets.table.Table.validate",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L198",parametersDescription:[{anchor:"datasets.table.Table.validate.full",description:`<strong>full</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, run expensive checks, otherwise cheap checks only.`,name:"full"}]}}),xs=new f({props:{name:"equals",anchor:"datasets.table.Table.equals",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L214",parametersDescription:[{anchor:"datasets.table.Table.equals.other",description:`<strong>other</strong> (<a href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table">datasets.table.Table</a>) &#x2014;
Table to compare against.`,name:"other"},{anchor:"datasets.table.Table.equals.check_metadata",description:`<strong>check_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether schema metadata equality should be checked as well.`,name:"check_metadata"}],returnType:`
<p><code>bool</code></p>
`}}),Ds=new f({props:{name:"to_batches",anchor:"datasets.table.Table.to_batches",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L231",parametersDescription:[{anchor:"datasets.table.Table.to_batches.max_chunksize",description:`<strong>max_chunksize</strong> (<code>int</code>, defaults to <em>None</em>) &#x2014;
Maximum size for RecordBatch chunks. Individual chunks may be
smaller depending on the chunk layout of individual columns.`,name:"max_chunksize"}],returnType:`
<p><code>List[pyarrow.RecordBatch]</code></p>
`}}),Is=new f({props:{name:"to_pydict",anchor:"datasets.table.Table.to_pydict",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L245",returnType:`
<p><code>dict</code></p>
`}}),Ms=new f({props:{name:"to_pandas",anchor:"datasets.table.Table.to_pandas",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L254",parametersDescription:[{anchor:"datasets.table.Table.to_pandas.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
Arrow MemoryPool to use for allocations. Uses the default memory
pool is not passed.`,name:"memory_pool"},{anchor:"datasets.table.Table.to_pandas.strings_to_categorical",description:`<strong>strings_to_categorical</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Encode string (UTF8) and binary types to pandas.Categorical.`,name:"strings_to_categorical"},{anchor:"datasets.table.Table.to_pandas.categories",description:`<strong>categories</strong> (<code>list</code>, defaults to <code>empty</code>) &#x2014;
List of fields that should be returned as pandas.Categorical. Only
applies to table-like data structures.`,name:"categories"},{anchor:"datasets.table.Table.to_pandas.zero_copy_only",description:`<strong>zero_copy_only</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Raise an ArrowException if this function call would require copying
the underlying data.`,name:"zero_copy_only"},{anchor:"datasets.table.Table.to_pandas.integer_object_nulls",description:`<strong>integer_object_nulls</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast integers with nulls to objects`,name:"integer_object_nulls"},{anchor:"datasets.table.Table.to_pandas.date_as_object",description:`<strong>date_as_object</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Cast dates to objects. If False, convert to datetime64[ns] dtype.`,name:"date_as_object"},{anchor:"datasets.table.Table.to_pandas.timestamp_as_object",description:`<strong>timestamp_as_object</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Cast non-nanosecond timestamps (np.datetime64) to objects. This is
useful if you have timestamps that don&#x2019;t fit in the normal date
range of nanosecond timestamps (1678 CE-2262 CE).
If False, all timestamps are converted to datetime64[ns] dtype.`,name:"timestamp_as_object"},{anchor:"datasets.table.Table.to_pandas.use_threads",description:`<strong>use_threads</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Whether to parallelize the conversion using multiple threads.`,name:"use_threads"},{anchor:"datasets.table.Table.to_pandas.deduplicate_objects",description:`<strong>deduplicate_objects</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
Do not create multiple copies Python objects when created, to save
on memory use. Conversion will be slower.`,name:"deduplicate_objects"},{anchor:"datasets.table.Table.to_pandas.ignore_metadata",description:`<strong>ignore_metadata</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, do not use the &#x2018;pandas&#x2019; metadata to reconstruct the
DataFrame index, if present`,name:"ignore_metadata"},{anchor:"datasets.table.Table.to_pandas.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
For certain data types, a cast is needed in order to store the
data in a pandas DataFrame or Series (e.g. timestamps are always
stored as nanoseconds in pandas). This option controls whether it
is a safe cast or not.`,name:"safe"},{anchor:"datasets.table.Table.to_pandas.split_blocks",description:`<strong>split_blocks</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
If True, generate one internal &#x201C;block&#x201D; for each column when
creating a pandas.DataFrame from a RecordBatch or Table. While this
can temporarily reduce memory note that various pandas operations
can trigger &#x201C;consolidation&#x201D; which may balloon memory use.`,name:"split_blocks"},{anchor:"datasets.table.Table.to_pandas.self_destruct",description:`<strong>self_destruct</strong> (<code>bool</code>, defaults to <code>False</code>) &#x2014;
EXPERIMENTAL: If True, attempt to deallocate the originating Arrow
memory while converting the Arrow object to pandas. If you use the
object after calling to_pandas with this option it will crash your
program.`,name:"self_destruct"},{anchor:"datasets.table.Table.to_pandas.types_mapper",description:`<strong>types_mapper</strong> (<code>function</code>, defaults to <code>None</code>) &#x2014;
A function mapping a pyarrow DataType to a pandas ExtensionDtype.
This can be used to override the default pandas type for conversion
of built-in pyarrow types or in absence of pandas_metadata in the
Table schema. The function receives a pyarrow DataType and is
expected to return a pandas ExtensionDtype or <code>None</code> if the
default conversion should be used for that type. If you have
a dictionary mapping, you can pass <code>dict.get</code> as function.`,name:"types_mapper"}],returnDescription:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code> depending on type of object</p>
`,returnType:`
<p><code>pandas.Series</code> or <code>pandas.DataFrame</code></p>
`}}),Ps=new f({props:{name:"to_string",anchor:"datasets.table.Table.to_string",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L316"}}),Cs=new f({props:{name:"field",anchor:"datasets.table.Table.field",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L319",parametersDescription:[{anchor:"datasets.table.Table.field.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the field to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.Field</code></p>
`}}),Ls=new f({props:{name:"column",anchor:"datasets.table.Table.column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L332",parametersDescription:[{anchor:"datasets.table.Table.column.i",description:`<strong>i</strong> (<code>Union[int, str]</code>) &#x2014;
The index or name of the column to retrieve.`,name:"i"}],returnType:`
<p><code>pyarrow.ChunkedArray</code></p>
`}}),As=new f({props:{name:"itercolumns",anchor:"datasets.table.Table.itercolumns",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L345"}}),Ns=new f({props:{name:"schema",anchor:"datasets.table.Table.schema",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L354",returnType:`
<p><code>pyarrow.Schema</code></p>
`}}),js=new f({props:{name:"columns",anchor:"datasets.table.Table.columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L364",returnType:`
<p><code>List[pa.ChunkedArray]</code></p>
`}}),Fs=new f({props:{name:"num_columns",anchor:"datasets.table.Table.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L374",returnType:`
<p>int</p>
`}}),Vs=new f({props:{name:"num_rows",anchor:"datasets.table.Table.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L384",returnType:`
<p>int</p>
`}}),Ss=new f({props:{name:"shape",anchor:"datasets.table.Table.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L397",returnDescription:`
<p>Number of rows and number of columns.</p>
`,returnType:`
<p><code>(int, int)</code></p>
`}}),qs=new f({props:{name:"nbytes",anchor:"datasets.table.Table.nbytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L407"}}),Rs=new f({props:{name:"column_names",anchor:"datasets.table.Table.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L414"}}),Us=new f({props:{name:"slice",anchor:"datasets.table.ConcatenationTable.slice",parameters:[{name:"offset",val:" = 0"},{name:"length",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1383",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.slice.offset",description:`<strong>offset</strong> (<code>int</code>, defaults to <code>0</code>) &#x2014;
Offset from start of table to slice`,name:"offset"},{anchor:"datasets.table.ConcatenationTable.slice.length",description:`<strong>length</strong> (<code>int</code>, defaults to <code>None</code>) &#x2014;
Length of slice (default is until end of table starting from
offset)`,name:"length"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),zs=new f({props:{name:"filter",anchor:"datasets.table.ConcatenationTable.filter",parameters:[{name:"mask",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1414"}}),Bs=new f({props:{name:"flatten",anchor:"datasets.table.ConcatenationTable.flatten",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1425",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.flatten.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Os=new f({props:{name:"combine_chunks",anchor:"datasets.table.ConcatenationTable.combine_chunks",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1443",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.combine_chunks.memory_pool",description:`<strong>memory_pool</strong> (<code>MemoryPool</code>, defaults to <code>None</code>) &#x2014;
For memory allocations, if required, otherwise use default pool`,name:"memory_pool"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ws=new f({props:{name:"cast",anchor:"datasets.table.ConcatenationTable.cast",parameters:[{name:"target_schema",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1463",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.cast.target_schema",description:`<strong>target_schema</strong> (<code>Schema</code>) &#x2014;
Schema to cast to, the names and order of fields must match`,name:"target_schema"},{anchor:"datasets.table.ConcatenationTable.cast.safe",description:`<strong>safe</strong> (<code>bool</code>, defaults to <code>True</code>) &#x2014;
Check for overflows or other unsafe conversions`,name:"safe"}],returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Xs=new f({props:{name:"replace_schema_metadata",anchor:"datasets.table.ConcatenationTable.replace_schema_metadata",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1490",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.replace_schema_metadata.metadata",description:"<strong>metadata</strong> (<code>dict</code>, defaults to <code>None</code>) &#x2014;",name:"metadata"}],returnDescription:`
<p>shallow_copy</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Hs=new f({props:{name:"add_column",anchor:"datasets.table.ConcatenationTable.add_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1508",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.add_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.ConcatenationTable.add_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.add_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Gs=new f({props:{name:"append_column",anchor:"datasets.table.ConcatenationTable.append_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1529",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.append_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.append_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column added.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ys=new f({props:{name:"remove_column",anchor:"datasets.table.ConcatenationTable.remove_column",parameters:[{name:"i",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1546",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.remove_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index of column to remove.`,name:"i"}],returnDescription:`
<p>New table without the column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Js=new f({props:{name:"set_column",anchor:"datasets.table.ConcatenationTable.set_column",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1570",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.set_column.i",description:`<strong>i</strong> (<code>int</code>) &#x2014;
Index to place the column at.`,name:"i"},{anchor:"datasets.table.ConcatenationTable.set_column.field_",description:`<strong>field_</strong> (<code>Union[str, pyarrow.Field]</code>) &#x2014;
If a string is passed then the type is deduced from the column
data.`,name:"field_"},{anchor:"datasets.table.ConcatenationTable.set_column.column",description:`<strong>column</strong> (<code>Union[pyarrow.Array, List[pyarrow.Array]]</code>) &#x2014;
Column data.`,name:"column"}],returnDescription:`
<p>New table with the passed column set.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Ks=new f({props:{name:"rename_columns",anchor:"datasets.table.ConcatenationTable.rename_columns",parameters:[{name:"names",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1589"}}),Qs=new f({props:{name:"drop",anchor:"datasets.table.ConcatenationTable.drop",parameters:[{name:"columns",val:""},{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1602",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.drop.columns",description:`<strong>columns</strong> (<code>List[str]</code>) &#x2014;
List of field names referencing existing columns.`,name:"columns"}],returnDescription:`
<p>New table without the columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),Zs=new f({props:{name:"from_blocks",anchor:"datasets.table.ConcatenationTable.from_blocks",parameters:[{name:"blocks",val:": TableBlockContainer"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1310"}}),en=new f({props:{name:"from_tables",anchor:"datasets.table.ConcatenationTable.from_tables",parameters:[{name:"tables",val:": typing.List[typing.Union[pyarrow.lib.Table, datasets.table.Table]]"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1324",parametersDescription:[{anchor:"datasets.table.ConcatenationTable.from_tables.tables",description:`<strong>tables</strong> (list of <code>Table</code> or list of <code>pyarrow.Table</code>) &#x2014; List of tables.
axis &#x2014; (<code>{0, 1}</code>, defaults to <code>0</code>, meaning over rows):`,name:"tables"},{anchor:"datasets.table.ConcatenationTable.from_tables.Axis",description:`<strong>Axis</strong> to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns &#x2014;
(horizontally). &#x2014;`,name:"Axis"},{anchor:"datasets.table.ConcatenationTable.from_tables.*New",description:"<strong>*New</strong> in version 1.6.0* &#x2014;",name:"*New"}]}}),tn=new Mn({}),an=new f({props:{name:"datasets.table.concat_tables",anchor:"datasets.table.concat_tables",parameters:[{name:"tables",val:": typing.List[datasets.table.Table]"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1624",parametersDescription:[{anchor:"datasets.table.concat_tables.tables",description:"<strong>tables</strong> (list of <code>Table</code>) &#x2014; List of tables to be concatenated.",name:"tables"},{anchor:"datasets.table.concat_tables.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, defaults to <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],returnDescription:`
<p>If the number of input tables is > 1, then the returned table is a <code>datasets.table.ConcatenationTable</code>.
Otherwise if there\u2019s only one table, it is returned as is.</p>
`,returnType:`
<p><a
  href="/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"
>datasets.table.Table</a></p>
`}}),sn=new f({props:{name:"datasets.table.list_table_cache_files",anchor:"datasets.table.list_table_cache_files",parameters:[{name:"table",val:": Table"}],source:"https://github.com/huggingface/datasets/blob/master/src/datasets/table.py#L1647",returnDescription:`
<p>a list of paths to the cache files loaded by the table</p>
`,returnType:`
<p><code>List[str]</code></p>
`}}),{c(){W=s("meta"),yl=r(),X=s("h1"),ee=s("a"),Pn=s("span"),m(Vt.$$.fragment),xd=r(),Cn=s("span"),Dd=c("Table Classes"),$l=r(),P=s("p"),Id=c("Each "),Ln=s("code"),Md=c("Dataset"),Pd=c(` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),nn=s("a"),Cd=c("table.Table"),Ld=c("."),_l=r(),H=s("h2"),te=s("a"),An=s("span"),m(St.$$.fragment),Ad=r(),Nn=s("span"),Nd=c("Table"),Tl=r(),k=s("div"),m(qt.$$.fragment),jd=r(),jn=s("p"),Fd=c(`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),Vd=r(),Fn=s("p"),Sd=c(`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),qd=r(),Vn=s("p"),Rd=c("The implementation of these methods differs for the subclasses."),Ud=r(),C=s("div"),m(Rt.$$.fragment),zd=r(),Sn=s("p"),Bd=c("Perform validation checks.  An exception is raised if validation fails."),Od=r(),Ut=s("p"),Wd=c("By default only cheap validation checks are run.  Pass "),qn=s("em"),Xd=c("full=True"),Hd=c(`
for thorough validation checks (potentially O(n)).`),Gd=r(),ae=s("div"),m(zt.$$.fragment),Yd=r(),Rn=s("p"),Jd=c("Check if contents of two tables are equal."),Kd=r(),se=s("div"),m(Bt.$$.fragment),Qd=r(),Un=s("p"),Zd=c("Convert Table to list of (contiguous) RecordBatch objects."),ei=r(),ne=s("div"),m(Ot.$$.fragment),ti=r(),zn=s("p"),ai=c("Convert the Table to a dict or OrderedDict."),si=r(),oe=s("div"),m(Wt.$$.fragment),ni=r(),Bn=s("p"),oi=c("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),ri=r(),on=s("div"),m(Xt.$$.fragment),li=r(),re=s("div"),m(Ht.$$.fragment),ci=r(),On=s("p"),di=c("Select a schema field by its column name or numeric index."),ii=r(),le=s("div"),m(Gt.$$.fragment),mi=r(),Wn=s("p"),pi=c("Select a column by its column name, or numeric index."),hi=r(),ce=s("div"),m(Yt.$$.fragment),bi=r(),Xn=s("p"),ui=c("Iterator over all columns in their numerical order."),gi=r(),de=s("div"),m(Jt.$$.fragment),fi=r(),Hn=s("p"),vi=c("Schema of the table and its columns."),yi=r(),ie=s("div"),m(Kt.$$.fragment),$i=r(),Gn=s("p"),_i=c("List of all columns in numerical order."),Ti=r(),me=s("div"),m(Qt.$$.fragment),wi=r(),Yn=s("p"),ki=c("Number of columns in this table."),Ei=r(),L=s("div"),m(Zt.$$.fragment),xi=r(),Jn=s("p"),Di=c("Number of rows in this table."),Ii=r(),Kn=s("p"),Mi=c(`Due to the definition of a table, all columns have the same number of
rows.`),Pi=r(),pe=s("div"),m(ea.$$.fragment),Ci=r(),Qn=s("p"),Li=c("Dimensions of the table: (#rows, #columns)."),Ai=r(),he=s("div"),m(ta.$$.fragment),Ni=r(),Zn=s("p"),ji=c("Total number of bytes consumed by the elements of the table."),wl=r(),G=s("h2"),be=s("a"),eo=s("span"),m(aa.$$.fragment),Fi=r(),to=s("span"),Vi=c("InMemoryTable"),kl=r(),v=s("div"),m(sa.$$.fragment),Si=r(),ao=s("p"),qi=c("The table is said in-memory when it is loaded into the user\u2019s RAM."),Ri=r(),so=s("p"),Ui=c(`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),zi=r(),no=s("p"),Bi=c(`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Oi=r(),oo=s("p"),Wi=c(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Xi=r(),A=s("div"),m(na.$$.fragment),Hi=r(),ro=s("p"),Gi=c("Perform validation checks.  An exception is raised if validation fails."),Yi=r(),oa=s("p"),Ji=c("By default only cheap validation checks are run.  Pass "),lo=s("em"),Ki=c("full=True"),Qi=c(`
for thorough validation checks (potentially O(n)).`),Zi=r(),ue=s("div"),m(ra.$$.fragment),em=r(),co=s("p"),tm=c("Check if contents of two tables are equal."),am=r(),ge=s("div"),m(la.$$.fragment),sm=r(),io=s("p"),nm=c("Convert Table to list of (contiguous) RecordBatch objects."),om=r(),fe=s("div"),m(ca.$$.fragment),rm=r(),mo=s("p"),lm=c("Convert the Table to a dict or OrderedDict."),cm=r(),ve=s("div"),m(da.$$.fragment),dm=r(),po=s("p"),im=c("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),mm=r(),rn=s("div"),m(ia.$$.fragment),pm=r(),ye=s("div"),m(ma.$$.fragment),hm=r(),ho=s("p"),bm=c("Select a schema field by its column name or numeric index."),um=r(),$e=s("div"),m(pa.$$.fragment),gm=r(),bo=s("p"),fm=c("Select a column by its column name, or numeric index."),vm=r(),_e=s("div"),m(ha.$$.fragment),ym=r(),uo=s("p"),$m=c("Iterator over all columns in their numerical order."),_m=r(),Te=s("div"),m(ba.$$.fragment),Tm=r(),go=s("p"),wm=c("Schema of the table and its columns."),km=r(),we=s("div"),m(ua.$$.fragment),Em=r(),fo=s("p"),xm=c("List of all columns in numerical order."),Dm=r(),ke=s("div"),m(ga.$$.fragment),Im=r(),vo=s("p"),Mm=c("Number of columns in this table."),Pm=r(),N=s("div"),m(fa.$$.fragment),Cm=r(),yo=s("p"),Lm=c("Number of rows in this table."),Am=r(),$o=s("p"),Nm=c(`Due to the definition of a table, all columns have the same number of
rows.`),jm=r(),Ee=s("div"),m(va.$$.fragment),Fm=r(),_o=s("p"),Vm=c("Dimensions of the table: (#rows, #columns)."),Sm=r(),xe=s("div"),m(ya.$$.fragment),qm=r(),To=s("p"),Rm=c("Total number of bytes consumed by the elements of the table."),Um=r(),De=s("div"),m($a.$$.fragment),zm=r(),wo=s("p"),Bm=c("Names of the table\u2019s columns"),Om=r(),Ie=s("div"),m(_a.$$.fragment),Wm=r(),ko=s("p"),Xm=c("Compute zero-copy slice of this Table"),Hm=r(),Me=s("div"),m(Ta.$$.fragment),Gm=r(),Eo=s("p"),Ym=c("Select records from a Table. See pyarrow.compute.filter for full usage."),Jm=r(),Pe=s("div"),m(wa.$$.fragment),Km=r(),xo=s("p"),Qm=c(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),Zm=r(),j=s("div"),m(ka.$$.fragment),ep=r(),Do=s("p"),tp=c("Make a new table by combining the chunks this table has."),ap=r(),Io=s("p"),sp=c(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),np=r(),Ce=s("div"),m(Ea.$$.fragment),op=r(),Mo=s("p"),rp=c("Cast table values to another schema"),lp=r(),Le=s("div"),m(xa.$$.fragment),cp=r(),Po=s("p"),dp=c(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),ip=r(),F=s("div"),m(Da.$$.fragment),mp=r(),Co=s("p"),pp=c("Add column to Table at position."),hp=r(),Lo=s("p"),bp=c(`A new table is returned with the column added, the original table
object is left unchanged.`),up=r(),Ae=s("div"),m(Ia.$$.fragment),gp=r(),Ao=s("p"),fp=c("Append column at end of columns."),vp=r(),Ne=s("div"),m(Ma.$$.fragment),yp=r(),No=s("p"),$p=c("Create new Table with the indicated column removed."),_p=r(),je=s("div"),m(Pa.$$.fragment),Tp=r(),jo=s("p"),wp=c("Replace column in Table at position."),kp=r(),Fe=s("div"),m(Ca.$$.fragment),Ep=r(),Fo=s("p"),xp=c("Create new table with columns renamed to provided names."),Dp=r(),Ve=s("div"),m(La.$$.fragment),Ip=r(),Vo=s("p"),Mp=c("Drop one or more columns and return a new table."),Pp=r(),ln=s("div"),m(Aa.$$.fragment),Cp=r(),cn=s("div"),m(Na.$$.fragment),Lp=r(),I=s("div"),m(ja.$$.fragment),Ap=r(),So=s("p"),Np=c("Convert pandas.DataFrame to an Arrow Table."),jp=r(),Fa=s("p"),Fp=c(`The column types in the resulting Arrow Table are inferred from the
dtypes of the pandas.Series in the DataFrame. In the case of non-object
Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),qo=s("em"),Vp=c("object"),Sp=c(`, we need to guess the datatype by looking at the
Python objects in this Series.`),qp=r(),Va=s("p"),Rp=c("Be aware that Series of the "),Ro=s("em"),Up=c("object"),zp=c(` dtype don\u2019t carry enough
information to always lead to a meaningful Arrow type. In the case that
we cannot infer a type, e.g. because the DataFrame is of length 0 or
the Series only contains None/nan objects, the type is set to
null. This behavior can be avoided by constructing an explicit schema
and passing it to this function.`),Bp=r(),Uo=s("p"),Op=c("Examples:"),Wp=r(),m(Sa.$$.fragment),Xp=r(),Se=s("div"),m(qa.$$.fragment),Hp=r(),zo=s("p"),Gp=c("Construct a Table from Arrow arrays"),Yp=r(),qe=s("div"),m(Ra.$$.fragment),Jp=r(),Bo=s("p"),Kp=c("Construct a Table from Arrow arrays or columns"),Qp=r(),Re=s("div"),m(Ua.$$.fragment),Zp=r(),Oo=s("p"),eh=c("Construct a Table from a sequence or iterator of Arrow RecordBatches."),El=r(),Y=s("h2"),Ue=s("a"),Wo=s("span"),m(za.$$.fragment),th=r(),Xo=s("span"),ah=c("MemoryMappedTable"),xl=r(),_=s("div"),m(Ba.$$.fragment),sh=r(),Ho=s("p"),nh=c(`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),oh=r(),Go=s("p"),rh=c(`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),lh=r(),Yo=s("p"),ch=c(`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),dh=r(),Jo=s("p"),ih=c(`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),mh=r(),Ko=s("p"),ph=c(`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),hh=r(),V=s("div"),m(Oa.$$.fragment),bh=r(),Qo=s("p"),uh=c("Perform validation checks.  An exception is raised if validation fails."),gh=r(),Wa=s("p"),fh=c("By default only cheap validation checks are run.  Pass "),Zo=s("em"),vh=c("full=True"),yh=c(`
for thorough validation checks (potentially O(n)).`),$h=r(),ze=s("div"),m(Xa.$$.fragment),_h=r(),er=s("p"),Th=c("Check if contents of two tables are equal."),wh=r(),Be=s("div"),m(Ha.$$.fragment),kh=r(),tr=s("p"),Eh=c("Convert Table to list of (contiguous) RecordBatch objects."),xh=r(),Oe=s("div"),m(Ga.$$.fragment),Dh=r(),ar=s("p"),Ih=c("Convert the Table to a dict or OrderedDict."),Mh=r(),We=s("div"),m(Ya.$$.fragment),Ph=r(),sr=s("p"),Ch=c("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Lh=r(),dn=s("div"),m(Ja.$$.fragment),Ah=r(),Xe=s("div"),m(Ka.$$.fragment),Nh=r(),nr=s("p"),jh=c("Select a schema field by its column name or numeric index."),Fh=r(),He=s("div"),m(Qa.$$.fragment),Vh=r(),or=s("p"),Sh=c("Select a column by its column name, or numeric index."),qh=r(),Ge=s("div"),m(Za.$$.fragment),Rh=r(),rr=s("p"),Uh=c("Iterator over all columns in their numerical order."),zh=r(),Ye=s("div"),m(es.$$.fragment),Bh=r(),lr=s("p"),Oh=c("Schema of the table and its columns."),Wh=r(),Je=s("div"),m(ts.$$.fragment),Xh=r(),cr=s("p"),Hh=c("List of all columns in numerical order."),Gh=r(),Ke=s("div"),m(as.$$.fragment),Yh=r(),dr=s("p"),Jh=c("Number of columns in this table."),Kh=r(),S=s("div"),m(ss.$$.fragment),Qh=r(),ir=s("p"),Zh=c("Number of rows in this table."),eb=r(),mr=s("p"),tb=c(`Due to the definition of a table, all columns have the same number of
rows.`),ab=r(),Qe=s("div"),m(ns.$$.fragment),sb=r(),pr=s("p"),nb=c("Dimensions of the table: (#rows, #columns)."),ob=r(),Ze=s("div"),m(os.$$.fragment),rb=r(),hr=s("p"),lb=c("Total number of bytes consumed by the elements of the table."),cb=r(),et=s("div"),m(rs.$$.fragment),db=r(),br=s("p"),ib=c("Names of the table\u2019s columns"),mb=r(),tt=s("div"),m(ls.$$.fragment),pb=r(),ur=s("p"),hb=c("Compute zero-copy slice of this Table"),bb=r(),at=s("div"),m(cs.$$.fragment),ub=r(),gr=s("p"),gb=c("Select records from a Table. See pyarrow.compute.filter for full usage."),fb=r(),st=s("div"),m(ds.$$.fragment),vb=r(),fr=s("p"),yb=c(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),$b=r(),q=s("div"),m(is.$$.fragment),_b=r(),vr=s("p"),Tb=c("Make a new table by combining the chunks this table has."),wb=r(),yr=s("p"),kb=c(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),Eb=r(),nt=s("div"),m(ms.$$.fragment),xb=r(),$r=s("p"),Db=c("Cast table values to another schema"),Ib=r(),ot=s("div"),m(ps.$$.fragment),Mb=r(),_r=s("p"),Pb=c(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Cb=r(),R=s("div"),m(hs.$$.fragment),Lb=r(),Tr=s("p"),Ab=c("Add column to Table at position."),Nb=r(),wr=s("p"),jb=c(`A new table is returned with the column added, the original table
object is left unchanged.`),Fb=r(),rt=s("div"),m(bs.$$.fragment),Vb=r(),kr=s("p"),Sb=c("Append column at end of columns."),qb=r(),lt=s("div"),m(us.$$.fragment),Rb=r(),Er=s("p"),Ub=c("Create new Table with the indicated column removed."),zb=r(),ct=s("div"),m(gs.$$.fragment),Bb=r(),xr=s("p"),Ob=c("Replace column in Table at position."),Wb=r(),dt=s("div"),m(fs.$$.fragment),Xb=r(),Dr=s("p"),Hb=c("Create new table with columns renamed to provided names."),Gb=r(),it=s("div"),m(vs.$$.fragment),Yb=r(),Ir=s("p"),Jb=c("Drop one or more columns and return a new table."),Kb=r(),mn=s("div"),m(ys.$$.fragment),Dl=r(),J=s("h2"),mt=s("a"),Mr=s("span"),m($s.$$.fragment),Qb=r(),Pr=s("span"),Zb=c("ConcatenationTable"),Il=r(),$=s("div"),m(_s.$$.fragment),eu=r(),Cr=s("p"),tu=c(`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),au=r(),Lr=s("p"),su=c(`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),nu=r(),Ts=s("ul"),Ar=s("li"),ou=c("the InMemoryTable objects are pickled by copying all the data in memory;"),ru=r(),Nr=s("li"),lu=c(`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),cu=r(),ws=s("p"),du=c(`Its implementation requires to store each block separately.
The `),jr=s("code"),iu=c("blocks"),mu=c(` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),pu=r(),Fr=s("p"),hu=c(`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),bu=r(),U=s("div"),m(ks.$$.fragment),uu=r(),Vr=s("p"),gu=c("Perform validation checks.  An exception is raised if validation fails."),fu=r(),Es=s("p"),vu=c("By default only cheap validation checks are run.  Pass "),Sr=s("em"),yu=c("full=True"),$u=c(`
for thorough validation checks (potentially O(n)).`),_u=r(),pt=s("div"),m(xs.$$.fragment),Tu=r(),qr=s("p"),wu=c("Check if contents of two tables are equal."),ku=r(),ht=s("div"),m(Ds.$$.fragment),Eu=r(),Rr=s("p"),xu=c("Convert Table to list of (contiguous) RecordBatch objects."),Du=r(),bt=s("div"),m(Is.$$.fragment),Iu=r(),Ur=s("p"),Mu=c("Convert the Table to a dict or OrderedDict."),Pu=r(),ut=s("div"),m(Ms.$$.fragment),Cu=r(),zr=s("p"),Lu=c("Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Au=r(),pn=s("div"),m(Ps.$$.fragment),Nu=r(),gt=s("div"),m(Cs.$$.fragment),ju=r(),Br=s("p"),Fu=c("Select a schema field by its column name or numeric index."),Vu=r(),ft=s("div"),m(Ls.$$.fragment),Su=r(),Or=s("p"),qu=c("Select a column by its column name, or numeric index."),Ru=r(),vt=s("div"),m(As.$$.fragment),Uu=r(),Wr=s("p"),zu=c("Iterator over all columns in their numerical order."),Bu=r(),yt=s("div"),m(Ns.$$.fragment),Ou=r(),Xr=s("p"),Wu=c("Schema of the table and its columns."),Xu=r(),$t=s("div"),m(js.$$.fragment),Hu=r(),Hr=s("p"),Gu=c("List of all columns in numerical order."),Yu=r(),_t=s("div"),m(Fs.$$.fragment),Ju=r(),Gr=s("p"),Ku=c("Number of columns in this table."),Qu=r(),z=s("div"),m(Vs.$$.fragment),Zu=r(),Yr=s("p"),eg=c("Number of rows in this table."),tg=r(),Jr=s("p"),ag=c(`Due to the definition of a table, all columns have the same number of
rows.`),sg=r(),Tt=s("div"),m(Ss.$$.fragment),ng=r(),Kr=s("p"),og=c("Dimensions of the table: (#rows, #columns)."),rg=r(),wt=s("div"),m(qs.$$.fragment),lg=r(),Qr=s("p"),cg=c("Total number of bytes consumed by the elements of the table."),dg=r(),kt=s("div"),m(Rs.$$.fragment),ig=r(),Zr=s("p"),mg=c("Names of the table\u2019s columns"),pg=r(),Et=s("div"),m(Us.$$.fragment),hg=r(),el=s("p"),bg=c("Compute zero-copy slice of this Table"),ug=r(),xt=s("div"),m(zs.$$.fragment),gg=r(),tl=s("p"),fg=c("Select records from a Table. See pyarrow.compute.filter for full usage."),vg=r(),Dt=s("div"),m(Bs.$$.fragment),yg=r(),al=s("p"),$g=c(`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),_g=r(),B=s("div"),m(Os.$$.fragment),Tg=r(),sl=s("p"),wg=c("Make a new table by combining the chunks this table has."),kg=r(),nl=s("p"),Eg=c(`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),xg=r(),It=s("div"),m(Ws.$$.fragment),Dg=r(),ol=s("p"),Ig=c("Cast table values to another schema"),Mg=r(),Mt=s("div"),m(Xs.$$.fragment),Pg=r(),rl=s("p"),Cg=c(`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Lg=r(),O=s("div"),m(Hs.$$.fragment),Ag=r(),ll=s("p"),Ng=c("Add column to Table at position."),jg=r(),cl=s("p"),Fg=c(`A new table is returned with the column added, the original table
object is left unchanged.`),Vg=r(),Pt=s("div"),m(Gs.$$.fragment),Sg=r(),dl=s("p"),qg=c("Append column at end of columns."),Rg=r(),Ct=s("div"),m(Ys.$$.fragment),Ug=r(),il=s("p"),zg=c("Create new Table with the indicated column removed."),Bg=r(),Lt=s("div"),m(Js.$$.fragment),Og=r(),ml=s("p"),Wg=c("Replace column in Table at position."),Xg=r(),At=s("div"),m(Ks.$$.fragment),Hg=r(),pl=s("p"),Gg=c("Create new table with columns renamed to provided names."),Yg=r(),Nt=s("div"),m(Qs.$$.fragment),Jg=r(),hl=s("p"),Kg=c("Drop one or more columns and return a new table."),Qg=r(),hn=s("div"),m(Zs.$$.fragment),Zg=r(),jt=s("div"),m(en.$$.fragment),ef=r(),bl=s("p"),tf=c("Create ConcatenationTable from list of tables."),Ml=r(),K=s("h2"),Ft=s("a"),ul=s("span"),m(tn.$$.fragment),af=r(),gl=s("span"),sf=c("Utils"),Pl=r(),Q=s("div"),m(an.$$.fragment),nf=r(),fl=s("p"),of=c("Concatenate tables."),Cl=r(),Z=s("div"),m(sn.$$.fragment),rf=r(),vl=s("p"),lf=c(`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),this.h()},l(t){const x=g$('[data-svelte="svelte-1phssyn"]',document.head);W=n(x,"META",{name:!0,content:!0}),x.forEach(a),yl=l(t),X=n(t,"H1",{class:!0});var Al=o(X);ee=n(Al,"A",{id:!0,class:!0,href:!0});var df=o(ee);Pn=n(df,"SPAN",{});var mf=o(Pn);p(Vt.$$.fragment,mf),mf.forEach(a),df.forEach(a),xd=l(Al),Cn=n(Al,"SPAN",{});var pf=o(Cn);Dd=d(pf,"Table Classes"),pf.forEach(a),Al.forEach(a),$l=l(t),P=n(t,"P",{});var bn=o(P);Id=d(bn,"Each "),Ln=n(bn,"CODE",{});var hf=o(Ln);Md=d(hf,"Dataset"),hf.forEach(a),Pd=d(bn,` object is backed by a PyArrow Table.
A Table can be loaded from either the disk (memory mapped) or in memory.
Several Table types are available, and they all inherit from `),nn=n(bn,"A",{href:!0});var bf=o(nn);Cd=d(bf,"table.Table"),bf.forEach(a),Ld=d(bn,"."),bn.forEach(a),_l=l(t),H=n(t,"H2",{class:!0});var Nl=o(H);te=n(Nl,"A",{id:!0,class:!0,href:!0});var uf=o(te);An=n(uf,"SPAN",{});var gf=o(An);p(St.$$.fragment,gf),gf.forEach(a),uf.forEach(a),Ad=l(Nl),Nn=n(Nl,"SPAN",{});var ff=o(Nn);Nd=d(ff,"Table"),ff.forEach(a),Nl.forEach(a),Tl=l(t),k=n(t,"DIV",{class:!0});var E=o(k);p(qt.$$.fragment,E),jd=l(E),jn=n(E,"P",{});var vf=o(jn);Fd=d(vf,`Wraps a pyarrow Table by using composition.
This is the base class for InMemoryTable, MemoryMappedTable and ConcatenationTable.`),vf.forEach(a),Vd=l(E),Fn=n(E,"P",{});var yf=o(Fn);Sd=d(yf,`It implements all the basic attributes/methods of the pyarrow Table class except
the Table transforms: slice, filter, flatten, combine_chunks, cast, add_column,
append_column, remove_column, set_column, rename_columns and drop.`),yf.forEach(a),qd=l(E),Vn=n(E,"P",{});var $f=o(Vn);Rd=d($f,"The implementation of these methods differs for the subclasses."),$f.forEach(a),Ud=l(E),C=n(E,"DIV",{class:!0});var un=o(C);p(Rt.$$.fragment,un),zd=l(un),Sn=n(un,"P",{});var _f=o(Sn);Bd=d(_f,"Perform validation checks.  An exception is raised if validation fails."),_f.forEach(a),Od=l(un),Ut=n(un,"P",{});var jl=o(Ut);Wd=d(jl,"By default only cheap validation checks are run.  Pass "),qn=n(jl,"EM",{});var Tf=o(qn);Xd=d(Tf,"full=True"),Tf.forEach(a),Hd=d(jl,`
for thorough validation checks (potentially O(n)).`),jl.forEach(a),un.forEach(a),Gd=l(E),ae=n(E,"DIV",{class:!0});var Fl=o(ae);p(zt.$$.fragment,Fl),Yd=l(Fl),Rn=n(Fl,"P",{});var wf=o(Rn);Jd=d(wf,"Check if contents of two tables are equal."),wf.forEach(a),Fl.forEach(a),Kd=l(E),se=n(E,"DIV",{class:!0});var Vl=o(se);p(Bt.$$.fragment,Vl),Qd=l(Vl),Un=n(Vl,"P",{});var kf=o(Un);Zd=d(kf,"Convert Table to list of (contiguous) RecordBatch objects."),kf.forEach(a),Vl.forEach(a),ei=l(E),ne=n(E,"DIV",{class:!0});var Sl=o(ne);p(Ot.$$.fragment,Sl),ti=l(Sl),zn=n(Sl,"P",{});var Ef=o(zn);ai=d(Ef,"Convert the Table to a dict or OrderedDict."),Ef.forEach(a),Sl.forEach(a),si=l(E),oe=n(E,"DIV",{class:!0});var ql=o(oe);p(Wt.$$.fragment,ql),ni=l(ql),Bn=n(ql,"P",{});var xf=o(Bn);oi=d(xf,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),xf.forEach(a),ql.forEach(a),ri=l(E),on=n(E,"DIV",{class:!0});var Df=o(on);p(Xt.$$.fragment,Df),Df.forEach(a),li=l(E),re=n(E,"DIV",{class:!0});var Rl=o(re);p(Ht.$$.fragment,Rl),ci=l(Rl),On=n(Rl,"P",{});var If=o(On);di=d(If,"Select a schema field by its column name or numeric index."),If.forEach(a),Rl.forEach(a),ii=l(E),le=n(E,"DIV",{class:!0});var Ul=o(le);p(Gt.$$.fragment,Ul),mi=l(Ul),Wn=n(Ul,"P",{});var Mf=o(Wn);pi=d(Mf,"Select a column by its column name, or numeric index."),Mf.forEach(a),Ul.forEach(a),hi=l(E),ce=n(E,"DIV",{class:!0});var zl=o(ce);p(Yt.$$.fragment,zl),bi=l(zl),Xn=n(zl,"P",{});var Pf=o(Xn);ui=d(Pf,"Iterator over all columns in their numerical order."),Pf.forEach(a),zl.forEach(a),gi=l(E),de=n(E,"DIV",{class:!0});var Bl=o(de);p(Jt.$$.fragment,Bl),fi=l(Bl),Hn=n(Bl,"P",{});var Cf=o(Hn);vi=d(Cf,"Schema of the table and its columns."),Cf.forEach(a),Bl.forEach(a),yi=l(E),ie=n(E,"DIV",{class:!0});var Ol=o(ie);p(Kt.$$.fragment,Ol),$i=l(Ol),Gn=n(Ol,"P",{});var Lf=o(Gn);_i=d(Lf,"List of all columns in numerical order."),Lf.forEach(a),Ol.forEach(a),Ti=l(E),me=n(E,"DIV",{class:!0});var Wl=o(me);p(Qt.$$.fragment,Wl),wi=l(Wl),Yn=n(Wl,"P",{});var Af=o(Yn);ki=d(Af,"Number of columns in this table."),Af.forEach(a),Wl.forEach(a),Ei=l(E),L=n(E,"DIV",{class:!0});var gn=o(L);p(Zt.$$.fragment,gn),xi=l(gn),Jn=n(gn,"P",{});var Nf=o(Jn);Di=d(Nf,"Number of rows in this table."),Nf.forEach(a),Ii=l(gn),Kn=n(gn,"P",{});var jf=o(Kn);Mi=d(jf,`Due to the definition of a table, all columns have the same number of
rows.`),jf.forEach(a),gn.forEach(a),Pi=l(E),pe=n(E,"DIV",{class:!0});var Xl=o(pe);p(ea.$$.fragment,Xl),Ci=l(Xl),Qn=n(Xl,"P",{});var Ff=o(Qn);Li=d(Ff,"Dimensions of the table: (#rows, #columns)."),Ff.forEach(a),Xl.forEach(a),Ai=l(E),he=n(E,"DIV",{class:!0});var Hl=o(he);p(ta.$$.fragment,Hl),Ni=l(Hl),Zn=n(Hl,"P",{});var Vf=o(Zn);ji=d(Vf,"Total number of bytes consumed by the elements of the table."),Vf.forEach(a),Hl.forEach(a),E.forEach(a),wl=l(t),G=n(t,"H2",{class:!0});var Gl=o(G);be=n(Gl,"A",{id:!0,class:!0,href:!0});var Sf=o(be);eo=n(Sf,"SPAN",{});var qf=o(eo);p(aa.$$.fragment,qf),qf.forEach(a),Sf.forEach(a),Fi=l(Gl),to=n(Gl,"SPAN",{});var Rf=o(to);Vi=d(Rf,"InMemoryTable"),Rf.forEach(a),Gl.forEach(a),kl=l(t),v=n(t,"DIV",{class:!0});var y=o(v);p(sa.$$.fragment,y),Si=l(y),ao=n(y,"P",{});var Uf=o(ao);qi=d(Uf,"The table is said in-memory when it is loaded into the user\u2019s RAM."),Uf.forEach(a),Ri=l(y),so=n(y,"P",{});var zf=o(so);Ui=d(zf,`Pickling it does copy all the data using memory.
Its implementation is simple and uses the underlying pyarrow Table methods directly.`),zf.forEach(a),zi=l(y),no=n(y,"P",{});var Bf=o(no);Bi=d(Bf,`This is different from the MemoryMapped table, for which pickling doesn\u2019t copy all the
data in memory. For a MemoryMapped, unpickling instead reloads the table from the disk.`),Bf.forEach(a),Oi=l(y),oo=n(y,"P",{});var Of=o(oo);Wi=d(Of,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),Of.forEach(a),Xi=l(y),A=n(y,"DIV",{class:!0});var fn=o(A);p(na.$$.fragment,fn),Hi=l(fn),ro=n(fn,"P",{});var Wf=o(ro);Gi=d(Wf,"Perform validation checks.  An exception is raised if validation fails."),Wf.forEach(a),Yi=l(fn),oa=n(fn,"P",{});var Yl=o(oa);Ji=d(Yl,"By default only cheap validation checks are run.  Pass "),lo=n(Yl,"EM",{});var Xf=o(lo);Ki=d(Xf,"full=True"),Xf.forEach(a),Qi=d(Yl,`
for thorough validation checks (potentially O(n)).`),Yl.forEach(a),fn.forEach(a),Zi=l(y),ue=n(y,"DIV",{class:!0});var Jl=o(ue);p(ra.$$.fragment,Jl),em=l(Jl),co=n(Jl,"P",{});var Hf=o(co);tm=d(Hf,"Check if contents of two tables are equal."),Hf.forEach(a),Jl.forEach(a),am=l(y),ge=n(y,"DIV",{class:!0});var Kl=o(ge);p(la.$$.fragment,Kl),sm=l(Kl),io=n(Kl,"P",{});var Gf=o(io);nm=d(Gf,"Convert Table to list of (contiguous) RecordBatch objects."),Gf.forEach(a),Kl.forEach(a),om=l(y),fe=n(y,"DIV",{class:!0});var Ql=o(fe);p(ca.$$.fragment,Ql),rm=l(Ql),mo=n(Ql,"P",{});var Yf=o(mo);lm=d(Yf,"Convert the Table to a dict or OrderedDict."),Yf.forEach(a),Ql.forEach(a),cm=l(y),ve=n(y,"DIV",{class:!0});var Zl=o(ve);p(da.$$.fragment,Zl),dm=l(Zl),po=n(Zl,"P",{});var Jf=o(po);im=d(Jf,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Jf.forEach(a),Zl.forEach(a),mm=l(y),rn=n(y,"DIV",{class:!0});var Kf=o(rn);p(ia.$$.fragment,Kf),Kf.forEach(a),pm=l(y),ye=n(y,"DIV",{class:!0});var ec=o(ye);p(ma.$$.fragment,ec),hm=l(ec),ho=n(ec,"P",{});var Qf=o(ho);bm=d(Qf,"Select a schema field by its column name or numeric index."),Qf.forEach(a),ec.forEach(a),um=l(y),$e=n(y,"DIV",{class:!0});var tc=o($e);p(pa.$$.fragment,tc),gm=l(tc),bo=n(tc,"P",{});var Zf=o(bo);fm=d(Zf,"Select a column by its column name, or numeric index."),Zf.forEach(a),tc.forEach(a),vm=l(y),_e=n(y,"DIV",{class:!0});var ac=o(_e);p(ha.$$.fragment,ac),ym=l(ac),uo=n(ac,"P",{});var ev=o(uo);$m=d(ev,"Iterator over all columns in their numerical order."),ev.forEach(a),ac.forEach(a),_m=l(y),Te=n(y,"DIV",{class:!0});var sc=o(Te);p(ba.$$.fragment,sc),Tm=l(sc),go=n(sc,"P",{});var tv=o(go);wm=d(tv,"Schema of the table and its columns."),tv.forEach(a),sc.forEach(a),km=l(y),we=n(y,"DIV",{class:!0});var nc=o(we);p(ua.$$.fragment,nc),Em=l(nc),fo=n(nc,"P",{});var av=o(fo);xm=d(av,"List of all columns in numerical order."),av.forEach(a),nc.forEach(a),Dm=l(y),ke=n(y,"DIV",{class:!0});var oc=o(ke);p(ga.$$.fragment,oc),Im=l(oc),vo=n(oc,"P",{});var sv=o(vo);Mm=d(sv,"Number of columns in this table."),sv.forEach(a),oc.forEach(a),Pm=l(y),N=n(y,"DIV",{class:!0});var vn=o(N);p(fa.$$.fragment,vn),Cm=l(vn),yo=n(vn,"P",{});var nv=o(yo);Lm=d(nv,"Number of rows in this table."),nv.forEach(a),Am=l(vn),$o=n(vn,"P",{});var ov=o($o);Nm=d(ov,`Due to the definition of a table, all columns have the same number of
rows.`),ov.forEach(a),vn.forEach(a),jm=l(y),Ee=n(y,"DIV",{class:!0});var rc=o(Ee);p(va.$$.fragment,rc),Fm=l(rc),_o=n(rc,"P",{});var rv=o(_o);Vm=d(rv,"Dimensions of the table: (#rows, #columns)."),rv.forEach(a),rc.forEach(a),Sm=l(y),xe=n(y,"DIV",{class:!0});var lc=o(xe);p(ya.$$.fragment,lc),qm=l(lc),To=n(lc,"P",{});var lv=o(To);Rm=d(lv,"Total number of bytes consumed by the elements of the table."),lv.forEach(a),lc.forEach(a),Um=l(y),De=n(y,"DIV",{class:!0});var cc=o(De);p($a.$$.fragment,cc),zm=l(cc),wo=n(cc,"P",{});var cv=o(wo);Bm=d(cv,"Names of the table\u2019s columns"),cv.forEach(a),cc.forEach(a),Om=l(y),Ie=n(y,"DIV",{class:!0});var dc=o(Ie);p(_a.$$.fragment,dc),Wm=l(dc),ko=n(dc,"P",{});var dv=o(ko);Xm=d(dv,"Compute zero-copy slice of this Table"),dv.forEach(a),dc.forEach(a),Hm=l(y),Me=n(y,"DIV",{class:!0});var ic=o(Me);p(Ta.$$.fragment,ic),Gm=l(ic),Eo=n(ic,"P",{});var iv=o(Eo);Ym=d(iv,"Select records from a Table. See pyarrow.compute.filter for full usage."),iv.forEach(a),ic.forEach(a),Jm=l(y),Pe=n(y,"DIV",{class:!0});var mc=o(Pe);p(wa.$$.fragment,mc),Km=l(mc),xo=n(mc,"P",{});var mv=o(xo);Qm=d(mv,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),mv.forEach(a),mc.forEach(a),Zm=l(y),j=n(y,"DIV",{class:!0});var yn=o(j);p(ka.$$.fragment,yn),ep=l(yn),Do=n(yn,"P",{});var pv=o(Do);tp=d(pv,"Make a new table by combining the chunks this table has."),pv.forEach(a),ap=l(yn),Io=n(yn,"P",{});var hv=o(Io);sp=d(hv,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),hv.forEach(a),yn.forEach(a),np=l(y),Ce=n(y,"DIV",{class:!0});var pc=o(Ce);p(Ea.$$.fragment,pc),op=l(pc),Mo=n(pc,"P",{});var bv=o(Mo);rp=d(bv,"Cast table values to another schema"),bv.forEach(a),pc.forEach(a),lp=l(y),Le=n(y,"DIV",{class:!0});var hc=o(Le);p(xa.$$.fragment,hc),cp=l(hc),Po=n(hc,"P",{});var uv=o(Po);dp=d(uv,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),uv.forEach(a),hc.forEach(a),ip=l(y),F=n(y,"DIV",{class:!0});var $n=o(F);p(Da.$$.fragment,$n),mp=l($n),Co=n($n,"P",{});var gv=o(Co);pp=d(gv,"Add column to Table at position."),gv.forEach(a),hp=l($n),Lo=n($n,"P",{});var fv=o(Lo);bp=d(fv,`A new table is returned with the column added, the original table
object is left unchanged.`),fv.forEach(a),$n.forEach(a),up=l(y),Ae=n(y,"DIV",{class:!0});var bc=o(Ae);p(Ia.$$.fragment,bc),gp=l(bc),Ao=n(bc,"P",{});var vv=o(Ao);fp=d(vv,"Append column at end of columns."),vv.forEach(a),bc.forEach(a),vp=l(y),Ne=n(y,"DIV",{class:!0});var uc=o(Ne);p(Ma.$$.fragment,uc),yp=l(uc),No=n(uc,"P",{});var yv=o(No);$p=d(yv,"Create new Table with the indicated column removed."),yv.forEach(a),uc.forEach(a),_p=l(y),je=n(y,"DIV",{class:!0});var gc=o(je);p(Pa.$$.fragment,gc),Tp=l(gc),jo=n(gc,"P",{});var $v=o(jo);wp=d($v,"Replace column in Table at position."),$v.forEach(a),gc.forEach(a),kp=l(y),Fe=n(y,"DIV",{class:!0});var fc=o(Fe);p(Ca.$$.fragment,fc),Ep=l(fc),Fo=n(fc,"P",{});var _v=o(Fo);xp=d(_v,"Create new table with columns renamed to provided names."),_v.forEach(a),fc.forEach(a),Dp=l(y),Ve=n(y,"DIV",{class:!0});var vc=o(Ve);p(La.$$.fragment,vc),Ip=l(vc),Vo=n(vc,"P",{});var Tv=o(Vo);Mp=d(Tv,"Drop one or more columns and return a new table."),Tv.forEach(a),vc.forEach(a),Pp=l(y),ln=n(y,"DIV",{class:!0});var wv=o(ln);p(Aa.$$.fragment,wv),wv.forEach(a),Cp=l(y),cn=n(y,"DIV",{class:!0});var kv=o(cn);p(Na.$$.fragment,kv),kv.forEach(a),Lp=l(y),I=n(y,"DIV",{class:!0});var M=o(I);p(ja.$$.fragment,M),Ap=l(M),So=n(M,"P",{});var Ev=o(So);Np=d(Ev,"Convert pandas.DataFrame to an Arrow Table."),Ev.forEach(a),jp=l(M),Fa=n(M,"P",{});var yc=o(Fa);Fp=d(yc,`The column types in the resulting Arrow Table are inferred from the
dtypes of the pandas.Series in the DataFrame. In the case of non-object
Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),qo=n(yc,"EM",{});var xv=o(qo);Vp=d(xv,"object"),xv.forEach(a),Sp=d(yc,`, we need to guess the datatype by looking at the
Python objects in this Series.`),yc.forEach(a),qp=l(M),Va=n(M,"P",{});var $c=o(Va);Rp=d($c,"Be aware that Series of the "),Ro=n($c,"EM",{});var Dv=o(Ro);Up=d(Dv,"object"),Dv.forEach(a),zp=d($c,` dtype don\u2019t carry enough
information to always lead to a meaningful Arrow type. In the case that
we cannot infer a type, e.g. because the DataFrame is of length 0 or
the Series only contains None/nan objects, the type is set to
null. This behavior can be avoided by constructing an explicit schema
and passing it to this function.`),$c.forEach(a),Bp=l(M),Uo=n(M,"P",{});var Iv=o(Uo);Op=d(Iv,"Examples:"),Iv.forEach(a),Wp=l(M),p(Sa.$$.fragment,M),M.forEach(a),Xp=l(y),Se=n(y,"DIV",{class:!0});var _c=o(Se);p(qa.$$.fragment,_c),Hp=l(_c),zo=n(_c,"P",{});var Mv=o(zo);Gp=d(Mv,"Construct a Table from Arrow arrays"),Mv.forEach(a),_c.forEach(a),Yp=l(y),qe=n(y,"DIV",{class:!0});var Tc=o(qe);p(Ra.$$.fragment,Tc),Jp=l(Tc),Bo=n(Tc,"P",{});var Pv=o(Bo);Kp=d(Pv,"Construct a Table from Arrow arrays or columns"),Pv.forEach(a),Tc.forEach(a),Qp=l(y),Re=n(y,"DIV",{class:!0});var wc=o(Re);p(Ua.$$.fragment,wc),Zp=l(wc),Oo=n(wc,"P",{});var Cv=o(Oo);eh=d(Cv,"Construct a Table from a sequence or iterator of Arrow RecordBatches."),Cv.forEach(a),wc.forEach(a),y.forEach(a),El=l(t),Y=n(t,"H2",{class:!0});var kc=o(Y);Ue=n(kc,"A",{id:!0,class:!0,href:!0});var Lv=o(Ue);Wo=n(Lv,"SPAN",{});var Av=o(Wo);p(za.$$.fragment,Av),Av.forEach(a),Lv.forEach(a),th=l(kc),Xo=n(kc,"SPAN",{});var Nv=o(Xo);ah=d(Nv,"MemoryMappedTable"),Nv.forEach(a),kc.forEach(a),xl=l(t),_=n(t,"DIV",{class:!0});var w=o(_);p(Ba.$$.fragment,w),sh=l(w),Ho=n(w,"P",{});var jv=o(Ho);nh=d(jv,`The table is said memory mapped when it doesn\u2019t use the user\u2019s RAM but loads the data
from the disk instead.`),jv.forEach(a),oh=l(w),Go=n(w,"P",{});var Fv=o(Go);rh=d(Fv,`Pickling it doesn\u2019t copy the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplay\u201D when reloading the table from the disk.`),Fv.forEach(a),lh=l(w),Yo=n(w,"P",{});var Vv=o(Yo);ch=d(Vv,`Its implementation requires to store an history of all the transforms that were applied
to the underlying pyarrow Table, so that they can be \u201Creplayed\u201D when reloading the Table
from the disk.`),Vv.forEach(a),dh=l(w),Jo=n(w,"P",{});var Sv=o(Jo);ih=d(Sv,`This is different from the InMemoryTable table, for which pickling does copy all the
data in memory.`),Sv.forEach(a),mh=l(w),Ko=n(w,"P",{});var qv=o(Ko);ph=d(qv,`InMemoryTable must be used when data fit in memory, while MemoryMapped are reserved for
data bigger than memory or when you want the memory footprint of your application to
stay low.`),qv.forEach(a),hh=l(w),V=n(w,"DIV",{class:!0});var _n=o(V);p(Oa.$$.fragment,_n),bh=l(_n),Qo=n(_n,"P",{});var Rv=o(Qo);uh=d(Rv,"Perform validation checks.  An exception is raised if validation fails."),Rv.forEach(a),gh=l(_n),Wa=n(_n,"P",{});var Ec=o(Wa);fh=d(Ec,"By default only cheap validation checks are run.  Pass "),Zo=n(Ec,"EM",{});var Uv=o(Zo);vh=d(Uv,"full=True"),Uv.forEach(a),yh=d(Ec,`
for thorough validation checks (potentially O(n)).`),Ec.forEach(a),_n.forEach(a),$h=l(w),ze=n(w,"DIV",{class:!0});var xc=o(ze);p(Xa.$$.fragment,xc),_h=l(xc),er=n(xc,"P",{});var zv=o(er);Th=d(zv,"Check if contents of two tables are equal."),zv.forEach(a),xc.forEach(a),wh=l(w),Be=n(w,"DIV",{class:!0});var Dc=o(Be);p(Ha.$$.fragment,Dc),kh=l(Dc),tr=n(Dc,"P",{});var Bv=o(tr);Eh=d(Bv,"Convert Table to list of (contiguous) RecordBatch objects."),Bv.forEach(a),Dc.forEach(a),xh=l(w),Oe=n(w,"DIV",{class:!0});var Ic=o(Oe);p(Ga.$$.fragment,Ic),Dh=l(Ic),ar=n(Ic,"P",{});var Ov=o(ar);Ih=d(Ov,"Convert the Table to a dict or OrderedDict."),Ov.forEach(a),Ic.forEach(a),Mh=l(w),We=n(w,"DIV",{class:!0});var Mc=o(We);p(Ya.$$.fragment,Mc),Ph=l(Mc),sr=n(Mc,"P",{});var Wv=o(sr);Ch=d(Wv,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Wv.forEach(a),Mc.forEach(a),Lh=l(w),dn=n(w,"DIV",{class:!0});var Xv=o(dn);p(Ja.$$.fragment,Xv),Xv.forEach(a),Ah=l(w),Xe=n(w,"DIV",{class:!0});var Pc=o(Xe);p(Ka.$$.fragment,Pc),Nh=l(Pc),nr=n(Pc,"P",{});var Hv=o(nr);jh=d(Hv,"Select a schema field by its column name or numeric index."),Hv.forEach(a),Pc.forEach(a),Fh=l(w),He=n(w,"DIV",{class:!0});var Cc=o(He);p(Qa.$$.fragment,Cc),Vh=l(Cc),or=n(Cc,"P",{});var Gv=o(or);Sh=d(Gv,"Select a column by its column name, or numeric index."),Gv.forEach(a),Cc.forEach(a),qh=l(w),Ge=n(w,"DIV",{class:!0});var Lc=o(Ge);p(Za.$$.fragment,Lc),Rh=l(Lc),rr=n(Lc,"P",{});var Yv=o(rr);Uh=d(Yv,"Iterator over all columns in their numerical order."),Yv.forEach(a),Lc.forEach(a),zh=l(w),Ye=n(w,"DIV",{class:!0});var Ac=o(Ye);p(es.$$.fragment,Ac),Bh=l(Ac),lr=n(Ac,"P",{});var Jv=o(lr);Oh=d(Jv,"Schema of the table and its columns."),Jv.forEach(a),Ac.forEach(a),Wh=l(w),Je=n(w,"DIV",{class:!0});var Nc=o(Je);p(ts.$$.fragment,Nc),Xh=l(Nc),cr=n(Nc,"P",{});var Kv=o(cr);Hh=d(Kv,"List of all columns in numerical order."),Kv.forEach(a),Nc.forEach(a),Gh=l(w),Ke=n(w,"DIV",{class:!0});var jc=o(Ke);p(as.$$.fragment,jc),Yh=l(jc),dr=n(jc,"P",{});var Qv=o(dr);Jh=d(Qv,"Number of columns in this table."),Qv.forEach(a),jc.forEach(a),Kh=l(w),S=n(w,"DIV",{class:!0});var Tn=o(S);p(ss.$$.fragment,Tn),Qh=l(Tn),ir=n(Tn,"P",{});var Zv=o(ir);Zh=d(Zv,"Number of rows in this table."),Zv.forEach(a),eb=l(Tn),mr=n(Tn,"P",{});var ey=o(mr);tb=d(ey,`Due to the definition of a table, all columns have the same number of
rows.`),ey.forEach(a),Tn.forEach(a),ab=l(w),Qe=n(w,"DIV",{class:!0});var Fc=o(Qe);p(ns.$$.fragment,Fc),sb=l(Fc),pr=n(Fc,"P",{});var ty=o(pr);nb=d(ty,"Dimensions of the table: (#rows, #columns)."),ty.forEach(a),Fc.forEach(a),ob=l(w),Ze=n(w,"DIV",{class:!0});var Vc=o(Ze);p(os.$$.fragment,Vc),rb=l(Vc),hr=n(Vc,"P",{});var ay=o(hr);lb=d(ay,"Total number of bytes consumed by the elements of the table."),ay.forEach(a),Vc.forEach(a),cb=l(w),et=n(w,"DIV",{class:!0});var Sc=o(et);p(rs.$$.fragment,Sc),db=l(Sc),br=n(Sc,"P",{});var sy=o(br);ib=d(sy,"Names of the table\u2019s columns"),sy.forEach(a),Sc.forEach(a),mb=l(w),tt=n(w,"DIV",{class:!0});var qc=o(tt);p(ls.$$.fragment,qc),pb=l(qc),ur=n(qc,"P",{});var ny=o(ur);hb=d(ny,"Compute zero-copy slice of this Table"),ny.forEach(a),qc.forEach(a),bb=l(w),at=n(w,"DIV",{class:!0});var Rc=o(at);p(cs.$$.fragment,Rc),ub=l(Rc),gr=n(Rc,"P",{});var oy=o(gr);gb=d(oy,"Select records from a Table. See pyarrow.compute.filter for full usage."),oy.forEach(a),Rc.forEach(a),fb=l(w),st=n(w,"DIV",{class:!0});var Uc=o(st);p(ds.$$.fragment,Uc),vb=l(Uc),fr=n(Uc,"P",{});var ry=o(fr);yb=d(ry,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),ry.forEach(a),Uc.forEach(a),$b=l(w),q=n(w,"DIV",{class:!0});var wn=o(q);p(is.$$.fragment,wn),_b=l(wn),vr=n(wn,"P",{});var ly=o(vr);Tb=d(ly,"Make a new table by combining the chunks this table has."),ly.forEach(a),wb=l(wn),yr=n(wn,"P",{});var cy=o(yr);kb=d(cy,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),cy.forEach(a),wn.forEach(a),Eb=l(w),nt=n(w,"DIV",{class:!0});var zc=o(nt);p(ms.$$.fragment,zc),xb=l(zc),$r=n(zc,"P",{});var dy=o($r);Db=d(dy,"Cast table values to another schema"),dy.forEach(a),zc.forEach(a),Ib=l(w),ot=n(w,"DIV",{class:!0});var Bc=o(ot);p(ps.$$.fragment,Bc),Mb=l(Bc),_r=n(Bc,"P",{});var iy=o(_r);Pb=d(iy,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),iy.forEach(a),Bc.forEach(a),Cb=l(w),R=n(w,"DIV",{class:!0});var kn=o(R);p(hs.$$.fragment,kn),Lb=l(kn),Tr=n(kn,"P",{});var my=o(Tr);Ab=d(my,"Add column to Table at position."),my.forEach(a),Nb=l(kn),wr=n(kn,"P",{});var py=o(wr);jb=d(py,`A new table is returned with the column added, the original table
object is left unchanged.`),py.forEach(a),kn.forEach(a),Fb=l(w),rt=n(w,"DIV",{class:!0});var Oc=o(rt);p(bs.$$.fragment,Oc),Vb=l(Oc),kr=n(Oc,"P",{});var hy=o(kr);Sb=d(hy,"Append column at end of columns."),hy.forEach(a),Oc.forEach(a),qb=l(w),lt=n(w,"DIV",{class:!0});var Wc=o(lt);p(us.$$.fragment,Wc),Rb=l(Wc),Er=n(Wc,"P",{});var by=o(Er);Ub=d(by,"Create new Table with the indicated column removed."),by.forEach(a),Wc.forEach(a),zb=l(w),ct=n(w,"DIV",{class:!0});var Xc=o(ct);p(gs.$$.fragment,Xc),Bb=l(Xc),xr=n(Xc,"P",{});var uy=o(xr);Ob=d(uy,"Replace column in Table at position."),uy.forEach(a),Xc.forEach(a),Wb=l(w),dt=n(w,"DIV",{class:!0});var Hc=o(dt);p(fs.$$.fragment,Hc),Xb=l(Hc),Dr=n(Hc,"P",{});var gy=o(Dr);Hb=d(gy,"Create new table with columns renamed to provided names."),gy.forEach(a),Hc.forEach(a),Gb=l(w),it=n(w,"DIV",{class:!0});var Gc=o(it);p(vs.$$.fragment,Gc),Yb=l(Gc),Ir=n(Gc,"P",{});var fy=o(Ir);Jb=d(fy,"Drop one or more columns and return a new table."),fy.forEach(a),Gc.forEach(a),Kb=l(w),mn=n(w,"DIV",{class:!0});var vy=o(mn);p(ys.$$.fragment,vy),vy.forEach(a),w.forEach(a),Dl=l(t),J=n(t,"H2",{class:!0});var Yc=o(J);mt=n(Yc,"A",{id:!0,class:!0,href:!0});var yy=o(mt);Mr=n(yy,"SPAN",{});var $y=o(Mr);p($s.$$.fragment,$y),$y.forEach(a),yy.forEach(a),Qb=l(Yc),Pr=n(Yc,"SPAN",{});var _y=o(Pr);Zb=d(_y,"ConcatenationTable"),_y.forEach(a),Yc.forEach(a),Il=l(t),$=n(t,"DIV",{class:!0});var T=o($);p(_s.$$.fragment,T),eu=l(T),Cr=n(T,"P",{});var Ty=o(Cr);tu=d(Ty,`The table comes from the concatenation of several tables called blocks.
It enables concatenation on both axis 0 (append rows) and axis 1 (append columns).`),Ty.forEach(a),au=l(T),Lr=n(T,"P",{});var wy=o(Lr);su=d(wy,`The underlying tables are called \u201Cblocks\u201D and can be either InMemoryTable
or MemoryMappedTable objects.
This allows to combine tables that come from memory or that are memory mapped.
When a ConcatenationTable is pickled, then each block is pickled:`),wy.forEach(a),nu=l(T),Ts=n(T,"UL",{});var Jc=o(Ts);Ar=n(Jc,"LI",{});var ky=o(Ar);ou=d(ky,"the InMemoryTable objects are pickled by copying all the data in memory;"),ky.forEach(a),ru=l(Jc),Nr=n(Jc,"LI",{});var Ey=o(Nr);lu=d(Ey,`the MemoryMappedTable objects are pickled without copying the data into memory.
Instead, only the path to the memory mapped arrow file is pickled, as well as the list
of transforms to \u201Creplays\u201D when reloading the table from the disk.`),Ey.forEach(a),Jc.forEach(a),cu=l(T),ws=n(T,"P",{});var Kc=o(ws);du=d(Kc,`Its implementation requires to store each block separately.
The `),jr=n(Kc,"CODE",{});var xy=o(jr);iu=d(xy,"blocks"),xy.forEach(a),mu=d(Kc,` attributes stores a list of list of blocks.
The first axis concatenates the tables along the axis 0 (it appends rows),
while the second axis concatenates tables along the axis 1 (it appends columns).`),Kc.forEach(a),pu=l(T),Fr=n(T,"P",{});var Dy=o(Fr);hu=d(Dy,`You can access the fully combined table by accessing the ConcatenationTable.table attribute,
and the blocks by accessing the ConcatenationTable.blocks attribute.`),Dy.forEach(a),bu=l(T),U=n(T,"DIV",{class:!0});var En=o(U);p(ks.$$.fragment,En),uu=l(En),Vr=n(En,"P",{});var Iy=o(Vr);gu=d(Iy,"Perform validation checks.  An exception is raised if validation fails."),Iy.forEach(a),fu=l(En),Es=n(En,"P",{});var Qc=o(Es);vu=d(Qc,"By default only cheap validation checks are run.  Pass "),Sr=n(Qc,"EM",{});var My=o(Sr);yu=d(My,"full=True"),My.forEach(a),$u=d(Qc,`
for thorough validation checks (potentially O(n)).`),Qc.forEach(a),En.forEach(a),_u=l(T),pt=n(T,"DIV",{class:!0});var Zc=o(pt);p(xs.$$.fragment,Zc),Tu=l(Zc),qr=n(Zc,"P",{});var Py=o(qr);wu=d(Py,"Check if contents of two tables are equal."),Py.forEach(a),Zc.forEach(a),ku=l(T),ht=n(T,"DIV",{class:!0});var ed=o(ht);p(Ds.$$.fragment,ed),Eu=l(ed),Rr=n(ed,"P",{});var Cy=o(Rr);xu=d(Cy,"Convert Table to list of (contiguous) RecordBatch objects."),Cy.forEach(a),ed.forEach(a),Du=l(T),bt=n(T,"DIV",{class:!0});var td=o(bt);p(Is.$$.fragment,td),Iu=l(td),Ur=n(td,"P",{});var Ly=o(Ur);Mu=d(Ly,"Convert the Table to a dict or OrderedDict."),Ly.forEach(a),td.forEach(a),Pu=l(T),ut=n(T,"DIV",{class:!0});var ad=o(ut);p(Ms.$$.fragment,ad),Cu=l(ad),zr=n(ad,"P",{});var Ay=o(zr);Lu=d(Ay,"Convert to a pandas-compatible NumPy array or DataFrame, as appropriate"),Ay.forEach(a),ad.forEach(a),Au=l(T),pn=n(T,"DIV",{class:!0});var Ny=o(pn);p(Ps.$$.fragment,Ny),Ny.forEach(a),Nu=l(T),gt=n(T,"DIV",{class:!0});var sd=o(gt);p(Cs.$$.fragment,sd),ju=l(sd),Br=n(sd,"P",{});var jy=o(Br);Fu=d(jy,"Select a schema field by its column name or numeric index."),jy.forEach(a),sd.forEach(a),Vu=l(T),ft=n(T,"DIV",{class:!0});var nd=o(ft);p(Ls.$$.fragment,nd),Su=l(nd),Or=n(nd,"P",{});var Fy=o(Or);qu=d(Fy,"Select a column by its column name, or numeric index."),Fy.forEach(a),nd.forEach(a),Ru=l(T),vt=n(T,"DIV",{class:!0});var od=o(vt);p(As.$$.fragment,od),Uu=l(od),Wr=n(od,"P",{});var Vy=o(Wr);zu=d(Vy,"Iterator over all columns in their numerical order."),Vy.forEach(a),od.forEach(a),Bu=l(T),yt=n(T,"DIV",{class:!0});var rd=o(yt);p(Ns.$$.fragment,rd),Ou=l(rd),Xr=n(rd,"P",{});var Sy=o(Xr);Wu=d(Sy,"Schema of the table and its columns."),Sy.forEach(a),rd.forEach(a),Xu=l(T),$t=n(T,"DIV",{class:!0});var ld=o($t);p(js.$$.fragment,ld),Hu=l(ld),Hr=n(ld,"P",{});var qy=o(Hr);Gu=d(qy,"List of all columns in numerical order."),qy.forEach(a),ld.forEach(a),Yu=l(T),_t=n(T,"DIV",{class:!0});var cd=o(_t);p(Fs.$$.fragment,cd),Ju=l(cd),Gr=n(cd,"P",{});var Ry=o(Gr);Ku=d(Ry,"Number of columns in this table."),Ry.forEach(a),cd.forEach(a),Qu=l(T),z=n(T,"DIV",{class:!0});var xn=o(z);p(Vs.$$.fragment,xn),Zu=l(xn),Yr=n(xn,"P",{});var Uy=o(Yr);eg=d(Uy,"Number of rows in this table."),Uy.forEach(a),tg=l(xn),Jr=n(xn,"P",{});var zy=o(Jr);ag=d(zy,`Due to the definition of a table, all columns have the same number of
rows.`),zy.forEach(a),xn.forEach(a),sg=l(T),Tt=n(T,"DIV",{class:!0});var dd=o(Tt);p(Ss.$$.fragment,dd),ng=l(dd),Kr=n(dd,"P",{});var By=o(Kr);og=d(By,"Dimensions of the table: (#rows, #columns)."),By.forEach(a),dd.forEach(a),rg=l(T),wt=n(T,"DIV",{class:!0});var id=o(wt);p(qs.$$.fragment,id),lg=l(id),Qr=n(id,"P",{});var Oy=o(Qr);cg=d(Oy,"Total number of bytes consumed by the elements of the table."),Oy.forEach(a),id.forEach(a),dg=l(T),kt=n(T,"DIV",{class:!0});var md=o(kt);p(Rs.$$.fragment,md),ig=l(md),Zr=n(md,"P",{});var Wy=o(Zr);mg=d(Wy,"Names of the table\u2019s columns"),Wy.forEach(a),md.forEach(a),pg=l(T),Et=n(T,"DIV",{class:!0});var pd=o(Et);p(Us.$$.fragment,pd),hg=l(pd),el=n(pd,"P",{});var Xy=o(el);bg=d(Xy,"Compute zero-copy slice of this Table"),Xy.forEach(a),pd.forEach(a),ug=l(T),xt=n(T,"DIV",{class:!0});var hd=o(xt);p(zs.$$.fragment,hd),gg=l(hd),tl=n(hd,"P",{});var Hy=o(tl);fg=d(Hy,"Select records from a Table. See pyarrow.compute.filter for full usage."),Hy.forEach(a),hd.forEach(a),vg=l(T),Dt=n(T,"DIV",{class:!0});var bd=o(Dt);p(Bs.$$.fragment,bd),yg=l(bd),al=n(bd,"P",{});var Gy=o(al);$g=d(Gy,`Flatten this Table.  Each column with a struct type is flattened
into one column per struct field.  Other columns are left unchanged.`),Gy.forEach(a),bd.forEach(a),_g=l(T),B=n(T,"DIV",{class:!0});var Dn=o(B);p(Os.$$.fragment,Dn),Tg=l(Dn),sl=n(Dn,"P",{});var Yy=o(sl);wg=d(Yy,"Make a new table by combining the chunks this table has."),Yy.forEach(a),kg=l(Dn),nl=n(Dn,"P",{});var Jy=o(nl);Eg=d(Jy,`All the underlying chunks in the ChunkedArray of each column are
concatenated into zero or one chunk.`),Jy.forEach(a),Dn.forEach(a),xg=l(T),It=n(T,"DIV",{class:!0});var ud=o(It);p(Ws.$$.fragment,ud),Dg=l(ud),ol=n(ud,"P",{});var Ky=o(ol);Ig=d(Ky,"Cast table values to another schema"),Ky.forEach(a),ud.forEach(a),Mg=l(T),Mt=n(T,"DIV",{class:!0});var gd=o(Mt);p(Xs.$$.fragment,gd),Pg=l(gd),rl=n(gd,"P",{});var Qy=o(rl);Cg=d(Qy,`EXPERIMENTAL: Create shallow copy of table by replacing schema
key-value metadata with the indicated new metadata (which may be None,
which deletes any existing metadata`),Qy.forEach(a),gd.forEach(a),Lg=l(T),O=n(T,"DIV",{class:!0});var In=o(O);p(Hs.$$.fragment,In),Ag=l(In),ll=n(In,"P",{});var Zy=o(ll);Ng=d(Zy,"Add column to Table at position."),Zy.forEach(a),jg=l(In),cl=n(In,"P",{});var e$=o(cl);Fg=d(e$,`A new table is returned with the column added, the original table
object is left unchanged.`),e$.forEach(a),In.forEach(a),Vg=l(T),Pt=n(T,"DIV",{class:!0});var fd=o(Pt);p(Gs.$$.fragment,fd),Sg=l(fd),dl=n(fd,"P",{});var t$=o(dl);qg=d(t$,"Append column at end of columns."),t$.forEach(a),fd.forEach(a),Rg=l(T),Ct=n(T,"DIV",{class:!0});var vd=o(Ct);p(Ys.$$.fragment,vd),Ug=l(vd),il=n(vd,"P",{});var a$=o(il);zg=d(a$,"Create new Table with the indicated column removed."),a$.forEach(a),vd.forEach(a),Bg=l(T),Lt=n(T,"DIV",{class:!0});var yd=o(Lt);p(Js.$$.fragment,yd),Og=l(yd),ml=n(yd,"P",{});var s$=o(ml);Wg=d(s$,"Replace column in Table at position."),s$.forEach(a),yd.forEach(a),Xg=l(T),At=n(T,"DIV",{class:!0});var $d=o(At);p(Ks.$$.fragment,$d),Hg=l($d),pl=n($d,"P",{});var n$=o(pl);Gg=d(n$,"Create new table with columns renamed to provided names."),n$.forEach(a),$d.forEach(a),Yg=l(T),Nt=n(T,"DIV",{class:!0});var _d=o(Nt);p(Qs.$$.fragment,_d),Jg=l(_d),hl=n(_d,"P",{});var o$=o(hl);Kg=d(o$,"Drop one or more columns and return a new table."),o$.forEach(a),_d.forEach(a),Qg=l(T),hn=n(T,"DIV",{class:!0});var r$=o(hn);p(Zs.$$.fragment,r$),r$.forEach(a),Zg=l(T),jt=n(T,"DIV",{class:!0});var Td=o(jt);p(en.$$.fragment,Td),ef=l(Td),bl=n(Td,"P",{});var l$=o(bl);tf=d(l$,"Create ConcatenationTable from list of tables."),l$.forEach(a),Td.forEach(a),T.forEach(a),Ml=l(t),K=n(t,"H2",{class:!0});var wd=o(K);Ft=n(wd,"A",{id:!0,class:!0,href:!0});var c$=o(Ft);ul=n(c$,"SPAN",{});var d$=o(ul);p(tn.$$.fragment,d$),d$.forEach(a),c$.forEach(a),af=l(wd),gl=n(wd,"SPAN",{});var i$=o(gl);sf=d(i$,"Utils"),i$.forEach(a),wd.forEach(a),Pl=l(t),Q=n(t,"DIV",{class:!0});var kd=o(Q);p(an.$$.fragment,kd),nf=l(kd),fl=n(kd,"P",{});var m$=o(fl);of=d(m$,"Concatenate tables."),m$.forEach(a),kd.forEach(a),Cl=l(t),Z=n(t,"DIV",{class:!0});var Ed=o(Z);p(sn.$$.fragment,Ed),rf=l(Ed),vl=n(Ed,"P",{});var p$=o(vl);lf=d(p$,`Get the cache files that are loaded by the table.
Cache file are used when parts of the table come from the disk via memory mapping.`),p$.forEach(a),Ed.forEach(a),this.h()},h(){i(W,"name","hf:doc:metadata"),i(W,"content",JSON.stringify(_$)),i(ee,"id","table-classes"),i(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ee,"href","#table-classes"),i(X,"class","relative group"),i(nn,"href","/docs/datasets/master/en/package_reference/table_classes#datasets.table.Table"),i(te,"id","datasets.table.Table"),i(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(te,"href","#datasets.table.Table"),i(H,"class","relative group"),i(C,"class","docstring"),i(ae,"class","docstring"),i(se,"class","docstring"),i(ne,"class","docstring"),i(oe,"class","docstring"),i(on,"class","docstring"),i(re,"class","docstring"),i(le,"class","docstring"),i(ce,"class","docstring"),i(de,"class","docstring"),i(ie,"class","docstring"),i(me,"class","docstring"),i(L,"class","docstring"),i(pe,"class","docstring"),i(he,"class","docstring"),i(k,"class","docstring"),i(be,"id","datasets.table.InMemoryTable"),i(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(be,"href","#datasets.table.InMemoryTable"),i(G,"class","relative group"),i(A,"class","docstring"),i(ue,"class","docstring"),i(ge,"class","docstring"),i(fe,"class","docstring"),i(ve,"class","docstring"),i(rn,"class","docstring"),i(ye,"class","docstring"),i($e,"class","docstring"),i(_e,"class","docstring"),i(Te,"class","docstring"),i(we,"class","docstring"),i(ke,"class","docstring"),i(N,"class","docstring"),i(Ee,"class","docstring"),i(xe,"class","docstring"),i(De,"class","docstring"),i(Ie,"class","docstring"),i(Me,"class","docstring"),i(Pe,"class","docstring"),i(j,"class","docstring"),i(Ce,"class","docstring"),i(Le,"class","docstring"),i(F,"class","docstring"),i(Ae,"class","docstring"),i(Ne,"class","docstring"),i(je,"class","docstring"),i(Fe,"class","docstring"),i(Ve,"class","docstring"),i(ln,"class","docstring"),i(cn,"class","docstring"),i(I,"class","docstring"),i(Se,"class","docstring"),i(qe,"class","docstring"),i(Re,"class","docstring"),i(v,"class","docstring"),i(Ue,"id","datasets.table.MemoryMappedTable"),i(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ue,"href","#datasets.table.MemoryMappedTable"),i(Y,"class","relative group"),i(V,"class","docstring"),i(ze,"class","docstring"),i(Be,"class","docstring"),i(Oe,"class","docstring"),i(We,"class","docstring"),i(dn,"class","docstring"),i(Xe,"class","docstring"),i(He,"class","docstring"),i(Ge,"class","docstring"),i(Ye,"class","docstring"),i(Je,"class","docstring"),i(Ke,"class","docstring"),i(S,"class","docstring"),i(Qe,"class","docstring"),i(Ze,"class","docstring"),i(et,"class","docstring"),i(tt,"class","docstring"),i(at,"class","docstring"),i(st,"class","docstring"),i(q,"class","docstring"),i(nt,"class","docstring"),i(ot,"class","docstring"),i(R,"class","docstring"),i(rt,"class","docstring"),i(lt,"class","docstring"),i(ct,"class","docstring"),i(dt,"class","docstring"),i(it,"class","docstring"),i(mn,"class","docstring"),i(_,"class","docstring"),i(mt,"id","datasets.table.ConcatenationTable"),i(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(mt,"href","#datasets.table.ConcatenationTable"),i(J,"class","relative group"),i(U,"class","docstring"),i(pt,"class","docstring"),i(ht,"class","docstring"),i(bt,"class","docstring"),i(ut,"class","docstring"),i(pn,"class","docstring"),i(gt,"class","docstring"),i(ft,"class","docstring"),i(vt,"class","docstring"),i(yt,"class","docstring"),i($t,"class","docstring"),i(_t,"class","docstring"),i(z,"class","docstring"),i(Tt,"class","docstring"),i(wt,"class","docstring"),i(kt,"class","docstring"),i(Et,"class","docstring"),i(xt,"class","docstring"),i(Dt,"class","docstring"),i(B,"class","docstring"),i(It,"class","docstring"),i(Mt,"class","docstring"),i(O,"class","docstring"),i(Pt,"class","docstring"),i(Ct,"class","docstring"),i(Lt,"class","docstring"),i(At,"class","docstring"),i(Nt,"class","docstring"),i(hn,"class","docstring"),i(jt,"class","docstring"),i($,"class","docstring"),i(Ft,"id","datasets.table.concat_tables"),i(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ft,"href","#datasets.table.concat_tables"),i(K,"class","relative group"),i(Q,"class","docstring"),i(Z,"class","docstring")},m(t,x){e(document.head,W),D(t,yl,x),D(t,X,x),e(X,ee),e(ee,Pn),h(Vt,Pn,null),e(X,xd),e(X,Cn),e(Cn,Dd),D(t,$l,x),D(t,P,x),e(P,Id),e(P,Ln),e(Ln,Md),e(P,Pd),e(P,nn),e(nn,Cd),e(P,Ld),D(t,_l,x),D(t,H,x),e(H,te),e(te,An),h(St,An,null),e(H,Ad),e(H,Nn),e(Nn,Nd),D(t,Tl,x),D(t,k,x),h(qt,k,null),e(k,jd),e(k,jn),e(jn,Fd),e(k,Vd),e(k,Fn),e(Fn,Sd),e(k,qd),e(k,Vn),e(Vn,Rd),e(k,Ud),e(k,C),h(Rt,C,null),e(C,zd),e(C,Sn),e(Sn,Bd),e(C,Od),e(C,Ut),e(Ut,Wd),e(Ut,qn),e(qn,Xd),e(Ut,Hd),e(k,Gd),e(k,ae),h(zt,ae,null),e(ae,Yd),e(ae,Rn),e(Rn,Jd),e(k,Kd),e(k,se),h(Bt,se,null),e(se,Qd),e(se,Un),e(Un,Zd),e(k,ei),e(k,ne),h(Ot,ne,null),e(ne,ti),e(ne,zn),e(zn,ai),e(k,si),e(k,oe),h(Wt,oe,null),e(oe,ni),e(oe,Bn),e(Bn,oi),e(k,ri),e(k,on),h(Xt,on,null),e(k,li),e(k,re),h(Ht,re,null),e(re,ci),e(re,On),e(On,di),e(k,ii),e(k,le),h(Gt,le,null),e(le,mi),e(le,Wn),e(Wn,pi),e(k,hi),e(k,ce),h(Yt,ce,null),e(ce,bi),e(ce,Xn),e(Xn,ui),e(k,gi),e(k,de),h(Jt,de,null),e(de,fi),e(de,Hn),e(Hn,vi),e(k,yi),e(k,ie),h(Kt,ie,null),e(ie,$i),e(ie,Gn),e(Gn,_i),e(k,Ti),e(k,me),h(Qt,me,null),e(me,wi),e(me,Yn),e(Yn,ki),e(k,Ei),e(k,L),h(Zt,L,null),e(L,xi),e(L,Jn),e(Jn,Di),e(L,Ii),e(L,Kn),e(Kn,Mi),e(k,Pi),e(k,pe),h(ea,pe,null),e(pe,Ci),e(pe,Qn),e(Qn,Li),e(k,Ai),e(k,he),h(ta,he,null),e(he,Ni),e(he,Zn),e(Zn,ji),D(t,wl,x),D(t,G,x),e(G,be),e(be,eo),h(aa,eo,null),e(G,Fi),e(G,to),e(to,Vi),D(t,kl,x),D(t,v,x),h(sa,v,null),e(v,Si),e(v,ao),e(ao,qi),e(v,Ri),e(v,so),e(so,Ui),e(v,zi),e(v,no),e(no,Bi),e(v,Oi),e(v,oo),e(oo,Wi),e(v,Xi),e(v,A),h(na,A,null),e(A,Hi),e(A,ro),e(ro,Gi),e(A,Yi),e(A,oa),e(oa,Ji),e(oa,lo),e(lo,Ki),e(oa,Qi),e(v,Zi),e(v,ue),h(ra,ue,null),e(ue,em),e(ue,co),e(co,tm),e(v,am),e(v,ge),h(la,ge,null),e(ge,sm),e(ge,io),e(io,nm),e(v,om),e(v,fe),h(ca,fe,null),e(fe,rm),e(fe,mo),e(mo,lm),e(v,cm),e(v,ve),h(da,ve,null),e(ve,dm),e(ve,po),e(po,im),e(v,mm),e(v,rn),h(ia,rn,null),e(v,pm),e(v,ye),h(ma,ye,null),e(ye,hm),e(ye,ho),e(ho,bm),e(v,um),e(v,$e),h(pa,$e,null),e($e,gm),e($e,bo),e(bo,fm),e(v,vm),e(v,_e),h(ha,_e,null),e(_e,ym),e(_e,uo),e(uo,$m),e(v,_m),e(v,Te),h(ba,Te,null),e(Te,Tm),e(Te,go),e(go,wm),e(v,km),e(v,we),h(ua,we,null),e(we,Em),e(we,fo),e(fo,xm),e(v,Dm),e(v,ke),h(ga,ke,null),e(ke,Im),e(ke,vo),e(vo,Mm),e(v,Pm),e(v,N),h(fa,N,null),e(N,Cm),e(N,yo),e(yo,Lm),e(N,Am),e(N,$o),e($o,Nm),e(v,jm),e(v,Ee),h(va,Ee,null),e(Ee,Fm),e(Ee,_o),e(_o,Vm),e(v,Sm),e(v,xe),h(ya,xe,null),e(xe,qm),e(xe,To),e(To,Rm),e(v,Um),e(v,De),h($a,De,null),e(De,zm),e(De,wo),e(wo,Bm),e(v,Om),e(v,Ie),h(_a,Ie,null),e(Ie,Wm),e(Ie,ko),e(ko,Xm),e(v,Hm),e(v,Me),h(Ta,Me,null),e(Me,Gm),e(Me,Eo),e(Eo,Ym),e(v,Jm),e(v,Pe),h(wa,Pe,null),e(Pe,Km),e(Pe,xo),e(xo,Qm),e(v,Zm),e(v,j),h(ka,j,null),e(j,ep),e(j,Do),e(Do,tp),e(j,ap),e(j,Io),e(Io,sp),e(v,np),e(v,Ce),h(Ea,Ce,null),e(Ce,op),e(Ce,Mo),e(Mo,rp),e(v,lp),e(v,Le),h(xa,Le,null),e(Le,cp),e(Le,Po),e(Po,dp),e(v,ip),e(v,F),h(Da,F,null),e(F,mp),e(F,Co),e(Co,pp),e(F,hp),e(F,Lo),e(Lo,bp),e(v,up),e(v,Ae),h(Ia,Ae,null),e(Ae,gp),e(Ae,Ao),e(Ao,fp),e(v,vp),e(v,Ne),h(Ma,Ne,null),e(Ne,yp),e(Ne,No),e(No,$p),e(v,_p),e(v,je),h(Pa,je,null),e(je,Tp),e(je,jo),e(jo,wp),e(v,kp),e(v,Fe),h(Ca,Fe,null),e(Fe,Ep),e(Fe,Fo),e(Fo,xp),e(v,Dp),e(v,Ve),h(La,Ve,null),e(Ve,Ip),e(Ve,Vo),e(Vo,Mp),e(v,Pp),e(v,ln),h(Aa,ln,null),e(v,Cp),e(v,cn),h(Na,cn,null),e(v,Lp),e(v,I),h(ja,I,null),e(I,Ap),e(I,So),e(So,Np),e(I,jp),e(I,Fa),e(Fa,Fp),e(Fa,qo),e(qo,Vp),e(Fa,Sp),e(I,qp),e(I,Va),e(Va,Rp),e(Va,Ro),e(Ro,Up),e(Va,zp),e(I,Bp),e(I,Uo),e(Uo,Op),e(I,Wp),h(Sa,I,null),e(v,Xp),e(v,Se),h(qa,Se,null),e(Se,Hp),e(Se,zo),e(zo,Gp),e(v,Yp),e(v,qe),h(Ra,qe,null),e(qe,Jp),e(qe,Bo),e(Bo,Kp),e(v,Qp),e(v,Re),h(Ua,Re,null),e(Re,Zp),e(Re,Oo),e(Oo,eh),D(t,El,x),D(t,Y,x),e(Y,Ue),e(Ue,Wo),h(za,Wo,null),e(Y,th),e(Y,Xo),e(Xo,ah),D(t,xl,x),D(t,_,x),h(Ba,_,null),e(_,sh),e(_,Ho),e(Ho,nh),e(_,oh),e(_,Go),e(Go,rh),e(_,lh),e(_,Yo),e(Yo,ch),e(_,dh),e(_,Jo),e(Jo,ih),e(_,mh),e(_,Ko),e(Ko,ph),e(_,hh),e(_,V),h(Oa,V,null),e(V,bh),e(V,Qo),e(Qo,uh),e(V,gh),e(V,Wa),e(Wa,fh),e(Wa,Zo),e(Zo,vh),e(Wa,yh),e(_,$h),e(_,ze),h(Xa,ze,null),e(ze,_h),e(ze,er),e(er,Th),e(_,wh),e(_,Be),h(Ha,Be,null),e(Be,kh),e(Be,tr),e(tr,Eh),e(_,xh),e(_,Oe),h(Ga,Oe,null),e(Oe,Dh),e(Oe,ar),e(ar,Ih),e(_,Mh),e(_,We),h(Ya,We,null),e(We,Ph),e(We,sr),e(sr,Ch),e(_,Lh),e(_,dn),h(Ja,dn,null),e(_,Ah),e(_,Xe),h(Ka,Xe,null),e(Xe,Nh),e(Xe,nr),e(nr,jh),e(_,Fh),e(_,He),h(Qa,He,null),e(He,Vh),e(He,or),e(or,Sh),e(_,qh),e(_,Ge),h(Za,Ge,null),e(Ge,Rh),e(Ge,rr),e(rr,Uh),e(_,zh),e(_,Ye),h(es,Ye,null),e(Ye,Bh),e(Ye,lr),e(lr,Oh),e(_,Wh),e(_,Je),h(ts,Je,null),e(Je,Xh),e(Je,cr),e(cr,Hh),e(_,Gh),e(_,Ke),h(as,Ke,null),e(Ke,Yh),e(Ke,dr),e(dr,Jh),e(_,Kh),e(_,S),h(ss,S,null),e(S,Qh),e(S,ir),e(ir,Zh),e(S,eb),e(S,mr),e(mr,tb),e(_,ab),e(_,Qe),h(ns,Qe,null),e(Qe,sb),e(Qe,pr),e(pr,nb),e(_,ob),e(_,Ze),h(os,Ze,null),e(Ze,rb),e(Ze,hr),e(hr,lb),e(_,cb),e(_,et),h(rs,et,null),e(et,db),e(et,br),e(br,ib),e(_,mb),e(_,tt),h(ls,tt,null),e(tt,pb),e(tt,ur),e(ur,hb),e(_,bb),e(_,at),h(cs,at,null),e(at,ub),e(at,gr),e(gr,gb),e(_,fb),e(_,st),h(ds,st,null),e(st,vb),e(st,fr),e(fr,yb),e(_,$b),e(_,q),h(is,q,null),e(q,_b),e(q,vr),e(vr,Tb),e(q,wb),e(q,yr),e(yr,kb),e(_,Eb),e(_,nt),h(ms,nt,null),e(nt,xb),e(nt,$r),e($r,Db),e(_,Ib),e(_,ot),h(ps,ot,null),e(ot,Mb),e(ot,_r),e(_r,Pb),e(_,Cb),e(_,R),h(hs,R,null),e(R,Lb),e(R,Tr),e(Tr,Ab),e(R,Nb),e(R,wr),e(wr,jb),e(_,Fb),e(_,rt),h(bs,rt,null),e(rt,Vb),e(rt,kr),e(kr,Sb),e(_,qb),e(_,lt),h(us,lt,null),e(lt,Rb),e(lt,Er),e(Er,Ub),e(_,zb),e(_,ct),h(gs,ct,null),e(ct,Bb),e(ct,xr),e(xr,Ob),e(_,Wb),e(_,dt),h(fs,dt,null),e(dt,Xb),e(dt,Dr),e(Dr,Hb),e(_,Gb),e(_,it),h(vs,it,null),e(it,Yb),e(it,Ir),e(Ir,Jb),e(_,Kb),e(_,mn),h(ys,mn,null),D(t,Dl,x),D(t,J,x),e(J,mt),e(mt,Mr),h($s,Mr,null),e(J,Qb),e(J,Pr),e(Pr,Zb),D(t,Il,x),D(t,$,x),h(_s,$,null),e($,eu),e($,Cr),e(Cr,tu),e($,au),e($,Lr),e(Lr,su),e($,nu),e($,Ts),e(Ts,Ar),e(Ar,ou),e(Ts,ru),e(Ts,Nr),e(Nr,lu),e($,cu),e($,ws),e(ws,du),e(ws,jr),e(jr,iu),e(ws,mu),e($,pu),e($,Fr),e(Fr,hu),e($,bu),e($,U),h(ks,U,null),e(U,uu),e(U,Vr),e(Vr,gu),e(U,fu),e(U,Es),e(Es,vu),e(Es,Sr),e(Sr,yu),e(Es,$u),e($,_u),e($,pt),h(xs,pt,null),e(pt,Tu),e(pt,qr),e(qr,wu),e($,ku),e($,ht),h(Ds,ht,null),e(ht,Eu),e(ht,Rr),e(Rr,xu),e($,Du),e($,bt),h(Is,bt,null),e(bt,Iu),e(bt,Ur),e(Ur,Mu),e($,Pu),e($,ut),h(Ms,ut,null),e(ut,Cu),e(ut,zr),e(zr,Lu),e($,Au),e($,pn),h(Ps,pn,null),e($,Nu),e($,gt),h(Cs,gt,null),e(gt,ju),e(gt,Br),e(Br,Fu),e($,Vu),e($,ft),h(Ls,ft,null),e(ft,Su),e(ft,Or),e(Or,qu),e($,Ru),e($,vt),h(As,vt,null),e(vt,Uu),e(vt,Wr),e(Wr,zu),e($,Bu),e($,yt),h(Ns,yt,null),e(yt,Ou),e(yt,Xr),e(Xr,Wu),e($,Xu),e($,$t),h(js,$t,null),e($t,Hu),e($t,Hr),e(Hr,Gu),e($,Yu),e($,_t),h(Fs,_t,null),e(_t,Ju),e(_t,Gr),e(Gr,Ku),e($,Qu),e($,z),h(Vs,z,null),e(z,Zu),e(z,Yr),e(Yr,eg),e(z,tg),e(z,Jr),e(Jr,ag),e($,sg),e($,Tt),h(Ss,Tt,null),e(Tt,ng),e(Tt,Kr),e(Kr,og),e($,rg),e($,wt),h(qs,wt,null),e(wt,lg),e(wt,Qr),e(Qr,cg),e($,dg),e($,kt),h(Rs,kt,null),e(kt,ig),e(kt,Zr),e(Zr,mg),e($,pg),e($,Et),h(Us,Et,null),e(Et,hg),e(Et,el),e(el,bg),e($,ug),e($,xt),h(zs,xt,null),e(xt,gg),e(xt,tl),e(tl,fg),e($,vg),e($,Dt),h(Bs,Dt,null),e(Dt,yg),e(Dt,al),e(al,$g),e($,_g),e($,B),h(Os,B,null),e(B,Tg),e(B,sl),e(sl,wg),e(B,kg),e(B,nl),e(nl,Eg),e($,xg),e($,It),h(Ws,It,null),e(It,Dg),e(It,ol),e(ol,Ig),e($,Mg),e($,Mt),h(Xs,Mt,null),e(Mt,Pg),e(Mt,rl),e(rl,Cg),e($,Lg),e($,O),h(Hs,O,null),e(O,Ag),e(O,ll),e(ll,Ng),e(O,jg),e(O,cl),e(cl,Fg),e($,Vg),e($,Pt),h(Gs,Pt,null),e(Pt,Sg),e(Pt,dl),e(dl,qg),e($,Rg),e($,Ct),h(Ys,Ct,null),e(Ct,Ug),e(Ct,il),e(il,zg),e($,Bg),e($,Lt),h(Js,Lt,null),e(Lt,Og),e(Lt,ml),e(ml,Wg),e($,Xg),e($,At),h(Ks,At,null),e(At,Hg),e(At,pl),e(pl,Gg),e($,Yg),e($,Nt),h(Qs,Nt,null),e(Nt,Jg),e(Nt,hl),e(hl,Kg),e($,Qg),e($,hn),h(Zs,hn,null),e($,Zg),e($,jt),h(en,jt,null),e(jt,ef),e(jt,bl),e(bl,tf),D(t,Ml,x),D(t,K,x),e(K,Ft),e(Ft,ul),h(tn,ul,null),e(K,af),e(K,gl),e(gl,sf),D(t,Pl,x),D(t,Q,x),h(an,Q,null),e(Q,nf),e(Q,fl),e(fl,of),D(t,Cl,x),D(t,Z,x),h(sn,Z,null),e(Z,rf),e(Z,vl),e(vl,lf),Ll=!0},p:f$,i(t){Ll||(b(Vt.$$.fragment,t),b(St.$$.fragment,t),b(qt.$$.fragment,t),b(Rt.$$.fragment,t),b(zt.$$.fragment,t),b(Bt.$$.fragment,t),b(Ot.$$.fragment,t),b(Wt.$$.fragment,t),b(Xt.$$.fragment,t),b(Ht.$$.fragment,t),b(Gt.$$.fragment,t),b(Yt.$$.fragment,t),b(Jt.$$.fragment,t),b(Kt.$$.fragment,t),b(Qt.$$.fragment,t),b(Zt.$$.fragment,t),b(ea.$$.fragment,t),b(ta.$$.fragment,t),b(aa.$$.fragment,t),b(sa.$$.fragment,t),b(na.$$.fragment,t),b(ra.$$.fragment,t),b(la.$$.fragment,t),b(ca.$$.fragment,t),b(da.$$.fragment,t),b(ia.$$.fragment,t),b(ma.$$.fragment,t),b(pa.$$.fragment,t),b(ha.$$.fragment,t),b(ba.$$.fragment,t),b(ua.$$.fragment,t),b(ga.$$.fragment,t),b(fa.$$.fragment,t),b(va.$$.fragment,t),b(ya.$$.fragment,t),b($a.$$.fragment,t),b(_a.$$.fragment,t),b(Ta.$$.fragment,t),b(wa.$$.fragment,t),b(ka.$$.fragment,t),b(Ea.$$.fragment,t),b(xa.$$.fragment,t),b(Da.$$.fragment,t),b(Ia.$$.fragment,t),b(Ma.$$.fragment,t),b(Pa.$$.fragment,t),b(Ca.$$.fragment,t),b(La.$$.fragment,t),b(Aa.$$.fragment,t),b(Na.$$.fragment,t),b(ja.$$.fragment,t),b(Sa.$$.fragment,t),b(qa.$$.fragment,t),b(Ra.$$.fragment,t),b(Ua.$$.fragment,t),b(za.$$.fragment,t),b(Ba.$$.fragment,t),b(Oa.$$.fragment,t),b(Xa.$$.fragment,t),b(Ha.$$.fragment,t),b(Ga.$$.fragment,t),b(Ya.$$.fragment,t),b(Ja.$$.fragment,t),b(Ka.$$.fragment,t),b(Qa.$$.fragment,t),b(Za.$$.fragment,t),b(es.$$.fragment,t),b(ts.$$.fragment,t),b(as.$$.fragment,t),b(ss.$$.fragment,t),b(ns.$$.fragment,t),b(os.$$.fragment,t),b(rs.$$.fragment,t),b(ls.$$.fragment,t),b(cs.$$.fragment,t),b(ds.$$.fragment,t),b(is.$$.fragment,t),b(ms.$$.fragment,t),b(ps.$$.fragment,t),b(hs.$$.fragment,t),b(bs.$$.fragment,t),b(us.$$.fragment,t),b(gs.$$.fragment,t),b(fs.$$.fragment,t),b(vs.$$.fragment,t),b(ys.$$.fragment,t),b($s.$$.fragment,t),b(_s.$$.fragment,t),b(ks.$$.fragment,t),b(xs.$$.fragment,t),b(Ds.$$.fragment,t),b(Is.$$.fragment,t),b(Ms.$$.fragment,t),b(Ps.$$.fragment,t),b(Cs.$$.fragment,t),b(Ls.$$.fragment,t),b(As.$$.fragment,t),b(Ns.$$.fragment,t),b(js.$$.fragment,t),b(Fs.$$.fragment,t),b(Vs.$$.fragment,t),b(Ss.$$.fragment,t),b(qs.$$.fragment,t),b(Rs.$$.fragment,t),b(Us.$$.fragment,t),b(zs.$$.fragment,t),b(Bs.$$.fragment,t),b(Os.$$.fragment,t),b(Ws.$$.fragment,t),b(Xs.$$.fragment,t),b(Hs.$$.fragment,t),b(Gs.$$.fragment,t),b(Ys.$$.fragment,t),b(Js.$$.fragment,t),b(Ks.$$.fragment,t),b(Qs.$$.fragment,t),b(Zs.$$.fragment,t),b(en.$$.fragment,t),b(tn.$$.fragment,t),b(an.$$.fragment,t),b(sn.$$.fragment,t),Ll=!0)},o(t){u(Vt.$$.fragment,t),u(St.$$.fragment,t),u(qt.$$.fragment,t),u(Rt.$$.fragment,t),u(zt.$$.fragment,t),u(Bt.$$.fragment,t),u(Ot.$$.fragment,t),u(Wt.$$.fragment,t),u(Xt.$$.fragment,t),u(Ht.$$.fragment,t),u(Gt.$$.fragment,t),u(Yt.$$.fragment,t),u(Jt.$$.fragment,t),u(Kt.$$.fragment,t),u(Qt.$$.fragment,t),u(Zt.$$.fragment,t),u(ea.$$.fragment,t),u(ta.$$.fragment,t),u(aa.$$.fragment,t),u(sa.$$.fragment,t),u(na.$$.fragment,t),u(ra.$$.fragment,t),u(la.$$.fragment,t),u(ca.$$.fragment,t),u(da.$$.fragment,t),u(ia.$$.fragment,t),u(ma.$$.fragment,t),u(pa.$$.fragment,t),u(ha.$$.fragment,t),u(ba.$$.fragment,t),u(ua.$$.fragment,t),u(ga.$$.fragment,t),u(fa.$$.fragment,t),u(va.$$.fragment,t),u(ya.$$.fragment,t),u($a.$$.fragment,t),u(_a.$$.fragment,t),u(Ta.$$.fragment,t),u(wa.$$.fragment,t),u(ka.$$.fragment,t),u(Ea.$$.fragment,t),u(xa.$$.fragment,t),u(Da.$$.fragment,t),u(Ia.$$.fragment,t),u(Ma.$$.fragment,t),u(Pa.$$.fragment,t),u(Ca.$$.fragment,t),u(La.$$.fragment,t),u(Aa.$$.fragment,t),u(Na.$$.fragment,t),u(ja.$$.fragment,t),u(Sa.$$.fragment,t),u(qa.$$.fragment,t),u(Ra.$$.fragment,t),u(Ua.$$.fragment,t),u(za.$$.fragment,t),u(Ba.$$.fragment,t),u(Oa.$$.fragment,t),u(Xa.$$.fragment,t),u(Ha.$$.fragment,t),u(Ga.$$.fragment,t),u(Ya.$$.fragment,t),u(Ja.$$.fragment,t),u(Ka.$$.fragment,t),u(Qa.$$.fragment,t),u(Za.$$.fragment,t),u(es.$$.fragment,t),u(ts.$$.fragment,t),u(as.$$.fragment,t),u(ss.$$.fragment,t),u(ns.$$.fragment,t),u(os.$$.fragment,t),u(rs.$$.fragment,t),u(ls.$$.fragment,t),u(cs.$$.fragment,t),u(ds.$$.fragment,t),u(is.$$.fragment,t),u(ms.$$.fragment,t),u(ps.$$.fragment,t),u(hs.$$.fragment,t),u(bs.$$.fragment,t),u(us.$$.fragment,t),u(gs.$$.fragment,t),u(fs.$$.fragment,t),u(vs.$$.fragment,t),u(ys.$$.fragment,t),u($s.$$.fragment,t),u(_s.$$.fragment,t),u(ks.$$.fragment,t),u(xs.$$.fragment,t),u(Ds.$$.fragment,t),u(Is.$$.fragment,t),u(Ms.$$.fragment,t),u(Ps.$$.fragment,t),u(Cs.$$.fragment,t),u(Ls.$$.fragment,t),u(As.$$.fragment,t),u(Ns.$$.fragment,t),u(js.$$.fragment,t),u(Fs.$$.fragment,t),u(Vs.$$.fragment,t),u(Ss.$$.fragment,t),u(qs.$$.fragment,t),u(Rs.$$.fragment,t),u(Us.$$.fragment,t),u(zs.$$.fragment,t),u(Bs.$$.fragment,t),u(Os.$$.fragment,t),u(Ws.$$.fragment,t),u(Xs.$$.fragment,t),u(Hs.$$.fragment,t),u(Gs.$$.fragment,t),u(Ys.$$.fragment,t),u(Js.$$.fragment,t),u(Ks.$$.fragment,t),u(Qs.$$.fragment,t),u(Zs.$$.fragment,t),u(en.$$.fragment,t),u(tn.$$.fragment,t),u(an.$$.fragment,t),u(sn.$$.fragment,t),Ll=!1},d(t){a(W),t&&a(yl),t&&a(X),g(Vt),t&&a($l),t&&a(P),t&&a(_l),t&&a(H),g(St),t&&a(Tl),t&&a(k),g(qt),g(Rt),g(zt),g(Bt),g(Ot),g(Wt),g(Xt),g(Ht),g(Gt),g(Yt),g(Jt),g(Kt),g(Qt),g(Zt),g(ea),g(ta),t&&a(wl),t&&a(G),g(aa),t&&a(kl),t&&a(v),g(sa),g(na),g(ra),g(la),g(ca),g(da),g(ia),g(ma),g(pa),g(ha),g(ba),g(ua),g(ga),g(fa),g(va),g(ya),g($a),g(_a),g(Ta),g(wa),g(ka),g(Ea),g(xa),g(Da),g(Ia),g(Ma),g(Pa),g(Ca),g(La),g(Aa),g(Na),g(ja),g(Sa),g(qa),g(Ra),g(Ua),t&&a(El),t&&a(Y),g(za),t&&a(xl),t&&a(_),g(Ba),g(Oa),g(Xa),g(Ha),g(Ga),g(Ya),g(Ja),g(Ka),g(Qa),g(Za),g(es),g(ts),g(as),g(ss),g(ns),g(os),g(rs),g(ls),g(cs),g(ds),g(is),g(ms),g(ps),g(hs),g(bs),g(us),g(gs),g(fs),g(vs),g(ys),t&&a(Dl),t&&a(J),g($s),t&&a(Il),t&&a($),g(_s),g(ks),g(xs),g(Ds),g(Is),g(Ms),g(Ps),g(Cs),g(Ls),g(As),g(Ns),g(js),g(Fs),g(Vs),g(Ss),g(qs),g(Rs),g(Us),g(zs),g(Bs),g(Os),g(Ws),g(Xs),g(Hs),g(Gs),g(Ys),g(Js),g(Ks),g(Qs),g(Zs),g(en),t&&a(Ml),t&&a(K),g(tn),t&&a(Pl),t&&a(Q),g(an),t&&a(Cl),t&&a(Z),g(sn)}}}const _$={local:"table-classes",sections:[{local:"datasets.table.Table",title:"Table"},{local:"datasets.table.InMemoryTable",title:"InMemoryTable"},{local:"datasets.table.MemoryMappedTable",title:"MemoryMappedTable"},{local:"datasets.table.ConcatenationTable",title:"ConcatenationTable"},{local:"datasets.table.concat_tables",title:"Utils"}],title:"Table Classes"};function T$(cf){return v$(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class D$ extends h${constructor(W){super();b$(this,W,T$,$$,u$,{})}}export{D$ as default,_$ as metadata};
