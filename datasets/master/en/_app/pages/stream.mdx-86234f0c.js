import{S as Di,i as Ai,s as Ii,e as t,k as c,w as v,t as n,M as Ti,c as l,d as a,m as d,a as o,x as b,h as r,b as h,N as Ei,F as e,g as i,y as $,q as x,o as w,B as y,L as Pi}from"../chunks/vendor-aa873a46.js";import{T as ut}from"../chunks/Tip-f7f252ab.js";import{I as z}from"../chunks/IconCopyLink-d0ca3106.js";import{C as I}from"../chunks/CodeBlock-1f14baf3.js";import{F as qi,M as Si}from"../chunks/Markdown-28d14b5b.js";import"../chunks/IconTensorflow-b9816778.js";function Ci(P){let f,_,m,j,k,g,E,u;return{c(){f=t("p"),_=n("An "),m=t("a"),j=n("datasets.IterableDataset"),k=n(" is useful for iterative jobs like training a model. You shouldn\u2019t use a "),g=t("a"),E=n("datasets.IterableDataset"),u=n(" for jobs that require random access to examples because you have to iterate all over it using a for loop. Getting the last example in an iterable dataset would require you to iterate over all the previous examples."),this.h()},l(D){f=l(D,"P",{});var A=o(f);_=r(A,"An "),m=l(A,"A",{href:!0});var T=o(m);j=r(T,"datasets.IterableDataset"),T.forEach(a),k=r(A," is useful for iterative jobs like training a model. You shouldn\u2019t use a "),g=l(A,"A",{href:!0});var N=o(g);E=r(N,"datasets.IterableDataset"),N.forEach(a),u=r(A," for jobs that require random access to examples because you have to iterate all over it using a for loop. Getting the last example in an iterable dataset would require you to iterate over all the previous examples."),A.forEach(a),this.h()},h(){h(m,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(g,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset")},m(D,A){i(D,f,A),e(f,_),e(f,m),e(m,j),e(f,k),e(f,g),e(g,E),e(f,u)},d(D){D&&a(f)}}}function zi(P){let f,_,m,j;return{c(){f=t("p"),_=t("a"),m=n("datasets.IterableDataset.shuffle()"),j=n(" will also shuffle the order of the shards if the dataset is sharded into multiple sets."),this.h()},l(k){f=l(k,"P",{});var g=o(f);_=l(g,"A",{href:!0});var E=o(_);m=r(E,"datasets.IterableDataset.shuffle()"),E.forEach(a),j=r(g," will also shuffle the order of the shards if the dataset is sharded into multiple sets."),g.forEach(a),this.h()},h(){h(_,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.shuffle")},m(k,g){i(k,f,g),e(f,_),e(_,m),e(f,j)},d(k){k&&a(f)}}}function Ni(P){let f,_,m,j,k,g,E,u,D,A,T,N,hs;return{c(){f=t("p"),_=t("code"),m=n("take"),j=n(" and "),k=t("code"),g=n("skip"),E=n(" prevent future calls to "),u=t("code"),D=n("shuffle"),A=n(" because they lock in the order of the shards. You should "),T=t("code"),N=n("shuffle"),hs=n(" your dataset before splitting it.")},l(C){f=l(C,"P",{});var q=o(f);_=l(q,"CODE",{});var Da=o(_);m=r(Da,"take"),Da.forEach(a),j=r(q," and "),k=l(q,"CODE",{});var Aa=o(k);g=r(Aa,"skip"),Aa.forEach(a),E=r(q," prevent future calls to "),u=l(q,"CODE",{});var cs=o(u);D=r(cs,"shuffle"),cs.forEach(a),A=r(q," because they lock in the order of the shards. You should "),T=l(q,"CODE",{});var Ia=o(T);N=r(Ia,"shuffle"),Ia.forEach(a),hs=r(q," your dataset before splitting it."),q.forEach(a)},m(C,q){i(C,f,q),e(f,_),e(_,m),e(f,j),e(f,k),e(k,g),e(f,E),e(f,u),e(u,D),e(f,A),e(f,T),e(T,N),e(f,hs)},d(C){C&&a(f)}}}function Mi(P){let f,_,m,j,k,g,E,u;return{c(){f=t("p"),_=n("Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),m=t("code"),j=n("Value('int32')"),k=n(" to "),g=t("code"),E=n("Value('bool')"),u=n(" if the original column only contains ones and zeros.")},l(D){f=l(D,"P",{});var A=o(f);_=r(A,"Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),m=l(A,"CODE",{});var T=o(m);j=r(T,"Value('int32')"),T.forEach(a),k=r(A," to "),g=l(A,"CODE",{});var N=o(g);E=r(N,"Value('bool')"),N.forEach(a),u=r(A," if the original column only contains ones and zeros."),A.forEach(a)},m(D,A){i(D,f,A),e(f,_),e(f,m),e(m,j),e(f,k),e(f,g),e(g,E),e(f,u)},d(D){D&&a(f)}}}function Li(P){let f,_,m,j,k;return{c(){f=t("p"),_=n("See other examples of batch processing in "),m=t("a"),j=n("the batched map processing documentation"),k=n(". They work the same for iterable datasets."),this.h()},l(g){f=l(g,"P",{});var E=o(f);_=r(E,"See other examples of batch processing in "),m=l(E,"A",{href:!0});var u=o(m);j=r(u,"the batched map processing documentation"),u.forEach(a),k=r(E,". They work the same for iterable datasets."),E.forEach(a),this.h()},h(){h(m,"href","./process#batch-processing")},m(g,E){i(g,f,E),e(f,_),e(f,m),e(m,j),e(f,k)},d(g){g&&a(f)}}}function Oi(P){let f,_,m,j,k,g,E;return f=new I({props:{code:`seed, buffer_size = 42, 10_000
dataset = dataset.shuffle(seed, buffer_size=buffer_size)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>seed, buffer_size = <span class="hljs-number">42</span>, <span class="hljs-number">10_000</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.shuffle(seed, buffer_size=buffer_size)`}}),g=new I({props:{code:`import torch
from torch.utils.data import DataLoader
from transformers import AutoModelForMaskedLM, DataCollatorForLanguageModeling
from tqdm import tqdm
dataset = dataset.with_format("torch")
dataloader = DataLoader(dataset, collate_fn=DataCollatorForLanguageModeling(tokenizer))
device = 'cuda' if torch.cuda.is_available() else 'cpu' 
model = AutoModelForMaskedLM.from_pretrained("distilbert-base-uncased")
model.train().to(device)
optimizer = torch.optim.AdamW(params=model.parameters(), lr=1e-5)
for epoch in range(3):
    dataset.set_epoch(epoch)
    for i, batch in enumerate(tqdm(dataloader, total=5)):
        if i == 5:
            break
        batch = {k: v.to(device) for k, v in batch.items()}
        outputs = model(**batch)
        loss = outputs[0]
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()
        if i % 10 == 0:
            print(f"loss: {loss}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForMaskedLM, DataCollatorForLanguageModeling
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-string">&quot;torch&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataloader = DataLoader(dataset, collate_fn=DataCollatorForLanguageModeling(tokenizer))
<span class="hljs-meta">&gt;&gt;&gt; </span>device = <span class="hljs-string">&#x27;cuda&#x27;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span> 
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;distilbert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.train().to(device)
<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer = torch.optim.AdamW(params=model.parameters(), lr=<span class="hljs-number">1e-5</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):
<span class="hljs-meta">... </span>    dataset.set_epoch(epoch)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tqdm(dataloader, total=<span class="hljs-number">5</span>)):
<span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">5</span>:
<span class="hljs-meta">... </span>            <span class="hljs-keyword">break</span>
<span class="hljs-meta">... </span>        batch = {k: v.to(device) <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> batch.items()}
<span class="hljs-meta">... </span>        outputs = model(**batch)
<span class="hljs-meta">... </span>        loss = outputs[<span class="hljs-number">0</span>]
<span class="hljs-meta">... </span>        loss.backward()
<span class="hljs-meta">... </span>        optimizer.step()
<span class="hljs-meta">... </span>        optimizer.zero_grad()
<span class="hljs-meta">... </span>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;loss: <span class="hljs-subst">{loss}</span>&quot;</span>)`}}),{c(){v(f.$$.fragment),_=c(),m=t("p"),j=n("Lastly, create a simple training loop and start training:"),k=c(),v(g.$$.fragment)},l(u){b(f.$$.fragment,u),_=d(u),m=l(u,"P",{});var D=o(m);j=r(D,"Lastly, create a simple training loop and start training:"),D.forEach(a),k=d(u),b(g.$$.fragment,u)},m(u,D){$(f,u,D),i(u,_,D),i(u,m,D),e(m,j),i(u,k,D),$(g,u,D),E=!0},p:Pi,i(u){E||(x(f.$$.fragment,u),x(g.$$.fragment,u),E=!0)},o(u){w(f.$$.fragment,u),w(g.$$.fragment,u),E=!1},d(u){y(f,u),u&&a(_),u&&a(m),u&&a(k),y(g,u)}}}function Vi(P){let f,_;return f=new Si({props:{$$slots:{default:[Oi]},$$scope:{ctx:P}}}),{c(){v(f.$$.fragment)},l(m){b(f.$$.fragment,m)},m(m,j){$(f,m,j),_=!0},p(m,j){const k={};j&2&&(k.$$scope={dirty:j,ctx:m}),f.$set(k)},i(m){_||(x(f.$$.fragment,m),_=!0)},o(m){w(f.$$.fragment,m),_=!1},d(m){y(f,m)}}}function Fi(P){let f,_,m,j,k,g,E,u,D,A,T,N,hs,C,q,Da,Aa,cs,Ia,gt,J,Ta,Lo,Zl,Pa,Oo,_t,L,sn,Bs,an,en,me,tn,ln,qa,nn,rn,jt,Js,vt,H,on,Sa,pn,hn,Ca,cn,dn,bt,ds,$t,W,fs,ue,Ws,fn,ge,mn,xt,O,un,za,gn,_n,Na,jn,vn,Ma,bn,$n,wt,V,xn,_e,wn,yn,je,kn,En,La,Dn,An,yt,Gs,kt,ms,Et,G,us,ve,Ks,In,be,Tn,Dt,gs,Pn,$e,qn,Sn,At,_s,Cn,xe,zn,Nn,It,Qs,Tt,K,js,we,Xs,Mn,ye,Ln,Pt,Oa,On,qt,Va,vs,Fa,Vn,Fn,ke,Rn,Hn,St,Zs,Ct,Ra,bs,Ha,Yn,Un,Ee,Bn,Jn,zt,sa,Nt,$s,Mt,Ya,Lt,Q,xs,De,aa,Wn,Ae,Gn,Ot,X,Ua,Kn,Qn,Ba,Xn,Zn,Vt,ea,Ft,ws,sr,Ie,ar,er,Rt,ta,Ht,Y,tr,Te,lr,nr,Pe,rr,or,Yt,Z,ys,qe,la,pr,Se,ir,Ut,Ja,hr,Bt,ss,ks,Ce,na,cr,ze,dr,Jt,Es,fr,Ne,mr,ur,Wt,Ds,gr,Me,_r,jr,Gt,ra,Kt,as,As,Le,oa,vr,Oe,br,Qt,Is,$r,Wa,xr,wr,Xt,pa,Zt,es,Ts,Ve,ia,yr,Fe,kr,sl,M,Re,Er,Dr,He,Ar,Ir,Ye,Tr,Pr,Ue,qr,Sr,al,ha,el,Ps,tl,qs,Cr,Ga,zr,Nr,ll,ca,nl,ts,Ss,Be,da,Mr,Je,Lr,rl,S,Or,Ka,Vr,Fr,Qa,Rr,Hr,Xa,Yr,Ur,Za,Br,Jr,se,Wr,Gr,ol,ae,Kr,pl,U,Qr,ee,Xr,Zr,We,so,ao,il,fa,hl,Cs,eo,te,to,lo,cl,ma,dl,zs,no,le,ro,oo,fl,B,po,Ge,io,ho,ne,co,fo,ml,ua,ul,ls,Ns,Ke,ga,mo,Qe,uo,gl,R,re,go,_o,Xe,jo,vo,Ze,bo,$o,_l,ns,Ms,st,_a,xo,at,wo,jl,ja,vl,Ls,bl,rs,Os,et,va,yo,tt,ko,$l,Vs,Eo,oe,Do,Ao,xl,ba,wl,os,pe,Io,To,lt,Po,qo,yl,$a,kl,ps,Fs,nt,xa,So,rt,Co,El,wa,ie,zo,No,Dl,Rs,Al;return g=new z({}),Js=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
print(next(iter(dataset)))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataset)))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision of Chief Napoleon Dzombe, which he shared with John Blanchard during his first visit to Malawi. Chief Napoleon conveyed the desperate need for a program to intervene and care for the orphans and vulnerable children (OVC) in Malawi, and John committed to help...</span>`}}),ds=new ut({props:{$$slots:{default:[Ci]},$$scope:{ctx:P}}}),Ws=new z({}),Gs=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
shuffled_dataset = dataset.shuffle(seed=42, buffer_size=10_000)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset = dataset.shuffle(seed=<span class="hljs-number">42</span>, buffer_size=<span class="hljs-number">10_000</span>)`}}),ms=new ut({props:{$$slots:{default:[zi]},$$scope:{ctx:P}}}),Ks=new z({}),Qs=new I({props:{code:`for epoch in range(epochs):
    shuffled_dataset.set_epoch(epoch)
    for example in shuffled_dataset:
        ...`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):
<span class="hljs-meta">... </span>    shuffled_dataset.set_epoch(epoch)
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> shuffled_dataset:
<span class="hljs-meta">... </span>        ...`}}),Xs=new z({}),Zs=new I({props:{code:`dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
dataset_head = dataset.take(2)
list(dataset_head)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_head = dataset.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(dataset_head)
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was...&#x27;</span>}, {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Lily James cannot fight the music...&#x27;</span>}]`}}),sa=new I({props:{code:"train_dataset = shuffled_dataset.skip(1000)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_dataset = shuffled_dataset.skip(<span class="hljs-number">1000</span>)'}}),$s=new ut({props:{warning:"&lcub;true}",$$slots:{default:[Ni]},$$scope:{ctx:P}}}),aa=new z({}),ea=new I({props:{code:`from datasets import interleave_datasets
en_dataset = load_dataset('oscar', "unshuffled_deduplicated_en", split='train', streaming=True)
fr_dataset = load_dataset('oscar', "unshuffled_deduplicated_fr", split='train', streaming=True)

multilingual_dataset = interleave_datasets([en_dataset, fr_dataset])
list(multilingual_dataset.take(2))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>en_dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>fr_dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>, streaming=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>multilingual_dataset = interleave_datasets([en_dataset, fr_dataset])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(multilingual_dataset.take(<span class="hljs-number">2</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...&#x27;</span>}, {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;M\xE9dia de d\xE9bat d&#x27;id\xE9es, de culture et de litt\xE9rature...&quot;</span>}]`}}),ta=new I({props:{code:`multilingual_dataset_with_oversampling = interleave_datasets([en_dataset, fr_dataset], probabilities=[0.8, 0.2], seed=42)
list(multilingual_dataset_with_oversampling.take(2))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>multilingual_dataset_with_oversampling = interleave_datasets([en_dataset, fr_dataset], probabilities=[<span class="hljs-number">0.8</span>, <span class="hljs-number">0.2</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(multilingual_dataset_with_oversampling.take(<span class="hljs-number">2</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...&#x27;</span>}, {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Lily James cannot fight the music...&#x27;</span>}]`}}),la=new z({}),na=new z({}),ra=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('mc4', 'en', streaming=True, split='train')
dataset = dataset.rename_column("text", "content")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;mc4&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>)`}}),oa=new z({}),pa=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('mc4', 'en', streaming=True, split='train')
dataset = dataset.remove_columns('timestamp')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;mc4&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns(<span class="hljs-string">&#x27;timestamp&#x27;</span>)`}}),ia=new z({}),ha=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('glue', 'mrpc', split='train')features

from datasets import ClassLabel, Value
new_features = dataset.features.copy()
new_features["label"] = ClassLabel(names=['negative', 'positive'])
new_features["idx"] = Value('int64')
dataset = dataset.cast(new_features)
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = dataset.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;idx&quot;</span>] = Value(<span class="hljs-string">&#x27;int64&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ps=new ut({props:{$$slots:{default:[Mi]},$$scope:{ctx:P}}}),ca=new I({props:{code:`dataset.features

dataset = dataset.cast_column("audio", Audio(sampling_rate=16000))
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">44100</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),da=new z({}),fa=new I({props:{code:`def add_prefix(example):
    example['text'] = 'My text: ' + example['text']
    return example`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&#x27;text&#x27;</span>] = <span class="hljs-string">&#x27;My text: &#x27;</span> + example[<span class="hljs-string">&#x27;text&#x27;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example`}}),ma=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', 'unshuffled_deduplicated_en', streaming=True, split='train')
updated_dataset = dataset.map(add_prefix)
list(updated_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&#x27;unshuffled_deduplicated_en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(updated_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Mtendere Village was inspired by...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Lily James cannot fight the music...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: &quot;I\\&#x27;d love to help kickstart...&#x27;</span>}]`}}),ua=new I({props:{code:`updated_dataset = dataset.map(add_prefix, remove_columns=["id"])
list(updated_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(add_prefix, remove_columns=[<span class="hljs-string">&quot;id&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(updated_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Mtendere Village was inspired by...&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: Lily James cannot fight the music...&#x27;</span>},
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;My text: &quot;I\\&#x27;d love to help kickstart...&#x27;</span>}]`}}),ga=new z({}),_a=new z({}),ja=new I({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
dataset = load_dataset("mc4", "en", streaming=True, split="train")
tokenizer = AutoTokenizer.from_pretrained('distilbert-base-uncased')
def encode(examples):
    return tokenizer(examples['text'], truncation=True, padding='max_length')
dataset = dataset.map(encode, batched=True, remove_columns=["text", "timestamp", "url"])
next(iter(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;mc4&quot;</span>, <span class="hljs-string">&quot;en&quot;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;distilbert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&#x27;max_length&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(dataset))
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-number">8466</span>, <span class="hljs-number">1018</span>, <span class="hljs-number">1010</span>, <span class="hljs-number">4029</span>, <span class="hljs-number">2475</span>, <span class="hljs-number">2062</span>, <span class="hljs-number">18558</span>, <span class="hljs-number">3100</span>, <span class="hljs-number">2061</span>, ...,<span class="hljs-number">1106</span>, <span class="hljs-number">3739</span>, <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, ..., <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),Ls=new ut({props:{$$slots:{default:[Li]},$$scope:{ctx:P}}}),va=new z({}),ba=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset('oscar', 'unshuffled_deduplicated_en', streaming=True, split='train')
start_with_ar = dataset.filter(lambda example: example['text'].startswith('Ar'))
next(iter(start_with_ar))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;oscar&#x27;</span>, <span class="hljs-string">&#x27;unshuffled_deduplicated_en&#x27;</span>, streaming=<span class="hljs-literal">True</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example: example[<span class="hljs-string">&#x27;text&#x27;</span>].startswith(<span class="hljs-string">&#x27;Ar&#x27;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(start_with_ar))
{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Are you looking for Number the Stars (Essential Modern Classics)?...&#x27;</span>}`}}),$a=new I({props:{code:`even_dataset = dataset.filter(lambda example, idx: idx % 2 == 0, with_indices=True)
list(even_dataset.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>even_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example, idx: idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(even_dataset.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision of Chief Napoleon Dzombe, ...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;&quot;I\\&#x27;d love to help kickstart continued development! And 0 EUR/month...&#x27;</span>},
 {<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Are you looking for Number the Stars (Essential Modern Classics)? Normally, ...&#x27;</span>}]`}}),xa=new z({}),Rs=new qi({props:{pytorch:!0,tensorflow:!1,jax:!1,$$slots:{pytorch:[Vi]},$$scope:{ctx:P}}}),{c(){f=t("meta"),_=c(),m=t("h1"),j=t("a"),k=t("span"),v(g.$$.fragment),E=c(),u=t("span"),D=n("Stream"),A=c(),T=t("p"),N=n("Dataset streaming lets you get started with a dataset without waiting for the entire dataset to download. The data is downloaded progressively as you iterate over the dataset. This is especially helpful when:"),hs=c(),C=t("ul"),q=t("li"),Da=n("You don\u2019t want to wait for an extremely large dataset to download."),Aa=c(),cs=t("li"),Ia=n("The dataset size exceeds the amount of disk space on your computer."),gt=c(),J=t("div"),Ta=t("img"),Zl=c(),Pa=t("img"),_t=c(),L=t("p"),sn=n("For example, the English split of the "),Bs=t("a"),an=n("OSCAR"),en=n(" dataset is 1.2 terabytes, but you can use it instantly with streaming. Stream a dataset by setting "),me=t("code"),tn=n("streaming=True"),ln=n(" in "),qa=t("a"),nn=n("datasets.load_dataset()"),rn=n(" as shown below:"),jt=c(),v(Js.$$.fragment),vt=c(),H=t("p"),on=n("Loading a dataset in streaming mode creates a new dataset type instance (instead of the classic "),Sa=t("a"),pn=n("datasets.Dataset"),hn=n(" object), known as an "),Ca=t("a"),cn=n("datasets.IterableDataset"),dn=n(". This special type of dataset has its own set of processing methods shown below."),bt=c(),v(ds.$$.fragment),$t=c(),W=t("h2"),fs=t("a"),ue=t("span"),v(Ws.$$.fragment),fn=c(),ge=t("span"),mn=n("Shuffle"),xt=c(),O=t("p"),un=n("Like a regular "),za=t("a"),gn=n("datasets.Dataset"),_n=n(" object, you can also shuffle a "),Na=t("a"),jn=n("datasets.IterableDataset"),vn=n(" with "),Ma=t("a"),bn=n("datasets.IterableDataset.shuffle()"),$n=n("."),wt=c(),V=t("p"),xn=n("The "),_e=t("code"),wn=n("buffer_size"),yn=n(" argument controls the size of the buffer to randomly sample examples from. Let\u2019s say your dataset has one million examples, and you set the "),je=t("code"),kn=n("buffer_size"),En=n(" to ten thousand. "),La=t("a"),Dn=n("datasets.IterableDataset.shuffle()"),An=n(" will randomly select examples from the first ten thousand examples in the buffer. Selected examples in the buffer are replaced with new examples. By default, the buffer size is 1,000."),yt=c(),v(Gs.$$.fragment),kt=c(),v(ms.$$.fragment),Et=c(),G=t("h2"),us=t("a"),ve=t("span"),v(Ks.$$.fragment),In=c(),be=t("span"),Tn=n("Reshuffle"),Dt=c(),gs=t("p"),Pn=n("Sometimes you may want to reshuffle the dataset after each epoch. This will require you to set a different seed for each epoch. Use "),$e=t("code"),qn=n("datasets.IterableDataset.set_epoch()"),Sn=n("in between epochs to tell the dataset what epoch you\u2019re on."),At=c(),_s=t("p"),Cn=n("Your seed effectively becomes: "),xe=t("code"),zn=n("initial seed + current epoch"),Nn=n("."),It=c(),v(Qs.$$.fragment),Tt=c(),K=t("h2"),js=t("a"),we=t("span"),v(Xs.$$.fragment),Mn=c(),ye=t("span"),Ln=n("Split dataset"),Pt=c(),Oa=t("p"),On=n("You can split your dataset one of two ways:"),qt=c(),Va=t("ul"),vs=t("li"),Fa=t("a"),Vn=n("datasets.IterableDataset.take()"),Fn=n(" returns the first "),ke=t("code"),Rn=n("n"),Hn=n(" examples in a dataset:"),St=c(),v(Zs.$$.fragment),Ct=c(),Ra=t("ul"),bs=t("li"),Ha=t("a"),Yn=n("datasets.IterableDataset.skip()"),Un=n(" omits the first "),Ee=t("code"),Bn=n("n"),Jn=n(" examples in a dataset and returns the remaining examples:"),zt=c(),v(sa.$$.fragment),Nt=c(),v($s.$$.fragment),Mt=c(),Ya=t("a"),Lt=c(),Q=t("h2"),xs=t("a"),De=t("span"),v(aa.$$.fragment),Wn=c(),Ae=t("span"),Gn=n("Interleave"),Ot=c(),X=t("p"),Ua=t("a"),Kn=n("datasets.interleave_datasets()"),Qn=n(" can combine an "),Ba=t("a"),Xn=n("datasets.IterableDataset"),Zn=n(" with other datasets. The combined dataset returns alternating examples from each of the original datasets."),Vt=c(),v(ea.$$.fragment),Ft=c(),ws=t("p"),sr=n("Define sampling probabilities from each of the original datasets for more control over how each of them are sampled and combined. Set the "),Ie=t("code"),ar=n("probabilities"),er=n(" argument with your desired sampling probabilities:"),Rt=c(),v(ta.$$.fragment),Ht=c(),Y=t("p"),tr=n("Around 80% of the final dataset is made of the "),Te=t("code"),lr=n("en_dataset"),nr=n(", and 20% of the "),Pe=t("code"),rr=n("fr_dataset"),or=n("."),Yt=c(),Z=t("h2"),ys=t("a"),qe=t("span"),v(la.$$.fragment),pr=c(),Se=t("span"),ir=n("Rename, remove, and cast"),Ut=c(),Ja=t("p"),hr=n("The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns and changing columns to a new set of features."),Bt=c(),ss=t("h3"),ks=t("a"),Ce=t("span"),v(na.$$.fragment),cr=c(),ze=t("span"),dr=n("Rename"),Jt=c(),Es=t("p"),fr=n("Use "),Ne=t("code"),mr=n("datasets.IterableDataset.rename_column()"),ur=n("when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Wt=c(),Ds=t("p"),gr=n("Provide "),Me=t("code"),_r=n("datasets.IterableDataset.rename_column()"),jr=n("with the name of the original column, and the new column name:"),Gt=c(),v(ra.$$.fragment),Kt=c(),as=t("h3"),As=t("a"),Le=t("span"),v(oa.$$.fragment),vr=c(),Oe=t("span"),br=n("Remove"),Qt=c(),Is=t("p"),$r=n("When you need to remove one or more columns, give "),Wa=t("a"),xr=n("datasets.IterableDataset.remove_columns()"),wr=n(" the name of the column to remove. Remove more than one column by providing a list of column names:"),Xt=c(),v(pa.$$.fragment),Zt=c(),es=t("h3"),Ts=t("a"),Ve=t("span"),v(ia.$$.fragment),yr=c(),Fe=t("span"),kr=n("Cast"),sl=c(),M=t("p"),Re=t("code"),Er=n("datasets.IterableDataset.cast()"),Dr=n("changes the feature type of one or more columns. This method takes your new "),He=t("code"),Ar=n("datasets.Features"),Ir=n(" as its argument. The following sample code shows how to change the feature types of "),Ye=t("code"),Tr=n("datasets.ClassLabel"),Pr=n(" and "),Ue=t("code"),qr=n("datasets.Value"),Sr=n(":"),al=c(),v(ha.$$.fragment),el=c(),v(Ps.$$.fragment),tl=c(),qs=t("p"),Cr=n("Use "),Ga=t("a"),zr=n("datasets.Dataset.cast_column()"),Nr=n(" to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),ll=c(),v(ca.$$.fragment),nl=c(),ts=t("h2"),Ss=t("a"),Be=t("span"),v(da.$$.fragment),Mr=c(),Je=t("span"),Lr=n("Map"),rl=c(),S=t("p"),Or=n("Similar to the "),Ka=t("a"),Vr=n("datasets.Dataset.map()"),Fr=n(" function for a regular "),Qa=t("a"),Rr=n("datasets.Dataset"),Hr=n(", \u{1F917}  Datasets features "),Xa=t("a"),Yr=n("datasets.IterableDataset.map()"),Ur=n(" for processing "),Za=t("a"),Br=n("datasets.IterableDataset"),Jr=n(`\\s.
`),se=t("a"),Wr=n("datasets.IterableDataset.map()"),Gr=n(" applies processing on-the-fly when examples are streamed."),ol=c(),ae=t("p"),Kr=n("It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),pl=c(),U=t("p"),Qr=n("The following example demonstrates how to tokenize a "),ee=t("a"),Xr=n("datasets.IterableDataset"),Zr=n(". The function needs to accept and output a "),We=t("code"),so=n("dict"),ao=n(":"),il=c(),v(fa.$$.fragment),hl=c(),Cs=t("p"),eo=n("Next, apply this function to the dataset with "),te=t("a"),to=n("datasets.IterableDataset.map()"),lo=n(":"),cl=c(),v(ma.$$.fragment),dl=c(),zs=t("p"),no=n("Let\u2019s take a look at another example, except this time, you will remove a column with "),le=t("a"),ro=n("datasets.IterableDataset.map()"),oo=n(". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),fl=c(),B=t("p"),po=n("Specify the column to remove with the "),Ge=t("code"),io=n("remove_columns"),ho=n(" argument in "),ne=t("a"),co=n("datasets.IterableDataset.map()"),fo=n(":"),ml=c(),v(ua.$$.fragment),ul=c(),ls=t("h3"),Ns=t("a"),Ke=t("span"),v(ga.$$.fragment),mo=c(),Qe=t("span"),uo=n("Batch processing"),gl=c(),R=t("p"),re=t("a"),go=n("datasets.IterableDataset.map()"),_o=n(" also supports working with batches of examples. Operate on batches by setting "),Xe=t("code"),jo=n("batched=True"),vo=n(". The default batch size is 1000, but you can adjust it with the "),Ze=t("code"),bo=n("batch_size"),$o=n(" argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),_l=c(),ns=t("h4"),Ms=t("a"),st=t("span"),v(_a.$$.fragment),xo=c(),at=t("span"),wo=n("Tokenization"),jl=c(),v(ja.$$.fragment),vl=c(),v(Ls.$$.fragment),bl=c(),rs=t("h3"),Os=t("a"),et=t("span"),v(va.$$.fragment),yo=c(),tt=t("span"),ko=n("Filter"),$l=c(),Vs=t("p"),Eo=n("You can filter rows in the dataset based on a predicate function using "),oe=t("a"),Do=n("datasets.Dataset.filter()"),Ao=n(". It returns rows that match a specified condition:"),xl=c(),v(ba.$$.fragment),wl=c(),os=t("p"),pe=t("a"),Io=n("datasets.Dataset.filter()"),To=n(" can also filter by indices if you set "),lt=t("code"),Po=n("with_indices=True"),qo=n(":"),yl=c(),v($a.$$.fragment),kl=c(),ps=t("h2"),Fs=t("a"),nt=t("span"),v(xa.$$.fragment),So=c(),rt=t("span"),Co=n("Stream in a training loop"),El=c(),wa=t("p"),ie=t("a"),zo=n("datasets.IterableDataset"),No=n(" can be integrated into a training loop. First, shuffle the dataset:"),Dl=c(),v(Rs.$$.fragment),this.h()},l(s){const p=Ti('[data-svelte="svelte-1phssyn"]',document.head);f=l(p,"META",{name:!0,content:!0}),p.forEach(a),_=d(s),m=l(s,"H1",{class:!0});var ya=o(m);j=l(ya,"A",{id:!0,class:!0,href:!0});var ot=o(j);k=l(ot,"SPAN",{});var pt=o(k);b(g.$$.fragment,pt),pt.forEach(a),ot.forEach(a),E=d(ya),u=l(ya,"SPAN",{});var it=o(u);D=r(it,"Stream"),it.forEach(a),ya.forEach(a),A=d(s),T=l(s,"P",{});var ht=o(T);N=r(ht,"Dataset streaming lets you get started with a dataset without waiting for the entire dataset to download. The data is downloaded progressively as you iterate over the dataset. This is especially helpful when:"),ht.forEach(a),hs=d(s),C=l(s,"UL",{});var ka=o(C);q=l(ka,"LI",{});var Vo=o(q);Da=r(Vo,"You don\u2019t want to wait for an extremely large dataset to download."),Vo.forEach(a),Aa=d(ka),cs=l(ka,"LI",{});var Fo=o(cs);Ia=r(Fo,"The dataset size exceeds the amount of disk space on your computer."),Fo.forEach(a),ka.forEach(a),gt=d(s),J=l(s,"DIV",{class:!0});var Il=o(J);Ta=l(Il,"IMG",{class:!0,src:!0}),Zl=d(Il),Pa=l(Il,"IMG",{class:!0,src:!0}),Il.forEach(a),_t=d(s),L=l(s,"P",{});var Hs=o(L);sn=r(Hs,"For example, the English split of the "),Bs=l(Hs,"A",{href:!0,rel:!0});var Ro=o(Bs);an=r(Ro,"OSCAR"),Ro.forEach(a),en=r(Hs," dataset is 1.2 terabytes, but you can use it instantly with streaming. Stream a dataset by setting "),me=l(Hs,"CODE",{});var Ho=o(me);tn=r(Ho,"streaming=True"),Ho.forEach(a),ln=r(Hs," in "),qa=l(Hs,"A",{href:!0});var Yo=o(qa);nn=r(Yo,"datasets.load_dataset()"),Yo.forEach(a),rn=r(Hs," as shown below:"),Hs.forEach(a),jt=d(s),b(Js.$$.fragment,s),vt=d(s),H=l(s,"P",{});var he=o(H);on=r(he,"Loading a dataset in streaming mode creates a new dataset type instance (instead of the classic "),Sa=l(he,"A",{href:!0});var Uo=o(Sa);pn=r(Uo,"datasets.Dataset"),Uo.forEach(a),hn=r(he," object), known as an "),Ca=l(he,"A",{href:!0});var Bo=o(Ca);cn=r(Bo,"datasets.IterableDataset"),Bo.forEach(a),dn=r(he,". This special type of dataset has its own set of processing methods shown below."),he.forEach(a),bt=d(s),b(ds.$$.fragment,s),$t=d(s),W=l(s,"H2",{class:!0});var Tl=o(W);fs=l(Tl,"A",{id:!0,class:!0,href:!0});var Jo=o(fs);ue=l(Jo,"SPAN",{});var Wo=o(ue);b(Ws.$$.fragment,Wo),Wo.forEach(a),Jo.forEach(a),fn=d(Tl),ge=l(Tl,"SPAN",{});var Go=o(ge);mn=r(Go,"Shuffle"),Go.forEach(a),Tl.forEach(a),xt=d(s),O=l(s,"P",{});var Ys=o(O);un=r(Ys,"Like a regular "),za=l(Ys,"A",{href:!0});var Ko=o(za);gn=r(Ko,"datasets.Dataset"),Ko.forEach(a),_n=r(Ys," object, you can also shuffle a "),Na=l(Ys,"A",{href:!0});var Qo=o(Na);jn=r(Qo,"datasets.IterableDataset"),Qo.forEach(a),vn=r(Ys," with "),Ma=l(Ys,"A",{href:!0});var Xo=o(Ma);bn=r(Xo,"datasets.IterableDataset.shuffle()"),Xo.forEach(a),$n=r(Ys,"."),Ys.forEach(a),wt=d(s),V=l(s,"P",{});var Us=o(V);xn=r(Us,"The "),_e=l(Us,"CODE",{});var Zo=o(_e);wn=r(Zo,"buffer_size"),Zo.forEach(a),yn=r(Us," argument controls the size of the buffer to randomly sample examples from. Let\u2019s say your dataset has one million examples, and you set the "),je=l(Us,"CODE",{});var sp=o(je);kn=r(sp,"buffer_size"),sp.forEach(a),En=r(Us," to ten thousand. "),La=l(Us,"A",{href:!0});var ap=o(La);Dn=r(ap,"datasets.IterableDataset.shuffle()"),ap.forEach(a),An=r(Us," will randomly select examples from the first ten thousand examples in the buffer. Selected examples in the buffer are replaced with new examples. By default, the buffer size is 1,000."),Us.forEach(a),yt=d(s),b(Gs.$$.fragment,s),kt=d(s),b(ms.$$.fragment,s),Et=d(s),G=l(s,"H2",{class:!0});var Pl=o(G);us=l(Pl,"A",{id:!0,class:!0,href:!0});var ep=o(us);ve=l(ep,"SPAN",{});var tp=o(ve);b(Ks.$$.fragment,tp),tp.forEach(a),ep.forEach(a),In=d(Pl),be=l(Pl,"SPAN",{});var lp=o(be);Tn=r(lp,"Reshuffle"),lp.forEach(a),Pl.forEach(a),Dt=d(s),gs=l(s,"P",{});var ql=o(gs);Pn=r(ql,"Sometimes you may want to reshuffle the dataset after each epoch. This will require you to set a different seed for each epoch. Use "),$e=l(ql,"CODE",{});var np=o($e);qn=r(np,"datasets.IterableDataset.set_epoch()"),np.forEach(a),Sn=r(ql,"in between epochs to tell the dataset what epoch you\u2019re on."),ql.forEach(a),At=d(s),_s=l(s,"P",{});var Sl=o(_s);Cn=r(Sl,"Your seed effectively becomes: "),xe=l(Sl,"CODE",{});var rp=o(xe);zn=r(rp,"initial seed + current epoch"),rp.forEach(a),Nn=r(Sl,"."),Sl.forEach(a),It=d(s),b(Qs.$$.fragment,s),Tt=d(s),K=l(s,"H2",{class:!0});var Cl=o(K);js=l(Cl,"A",{id:!0,class:!0,href:!0});var op=o(js);we=l(op,"SPAN",{});var pp=o(we);b(Xs.$$.fragment,pp),pp.forEach(a),op.forEach(a),Mn=d(Cl),ye=l(Cl,"SPAN",{});var ip=o(ye);Ln=r(ip,"Split dataset"),ip.forEach(a),Cl.forEach(a),Pt=d(s),Oa=l(s,"P",{});var hp=o(Oa);On=r(hp,"You can split your dataset one of two ways:"),hp.forEach(a),qt=d(s),Va=l(s,"UL",{});var cp=o(Va);vs=l(cp,"LI",{});var ct=o(vs);Fa=l(ct,"A",{href:!0});var dp=o(Fa);Vn=r(dp,"datasets.IterableDataset.take()"),dp.forEach(a),Fn=r(ct," returns the first "),ke=l(ct,"CODE",{});var fp=o(ke);Rn=r(fp,"n"),fp.forEach(a),Hn=r(ct," examples in a dataset:"),ct.forEach(a),cp.forEach(a),St=d(s),b(Zs.$$.fragment,s),Ct=d(s),Ra=l(s,"UL",{});var mp=o(Ra);bs=l(mp,"LI",{});var dt=o(bs);Ha=l(dt,"A",{href:!0});var up=o(Ha);Yn=r(up,"datasets.IterableDataset.skip()"),up.forEach(a),Un=r(dt," omits the first "),Ee=l(dt,"CODE",{});var gp=o(Ee);Bn=r(gp,"n"),gp.forEach(a),Jn=r(dt," examples in a dataset and returns the remaining examples:"),dt.forEach(a),mp.forEach(a),zt=d(s),b(sa.$$.fragment,s),Nt=d(s),b($s.$$.fragment,s),Mt=d(s),Ya=l(s,"A",{id:!0}),o(Ya).forEach(a),Lt=d(s),Q=l(s,"H2",{class:!0});var zl=o(Q);xs=l(zl,"A",{id:!0,class:!0,href:!0});var _p=o(xs);De=l(_p,"SPAN",{});var jp=o(De);b(aa.$$.fragment,jp),jp.forEach(a),_p.forEach(a),Wn=d(zl),Ae=l(zl,"SPAN",{});var vp=o(Ae);Gn=r(vp,"Interleave"),vp.forEach(a),zl.forEach(a),Ot=d(s),X=l(s,"P",{});var ft=o(X);Ua=l(ft,"A",{href:!0});var bp=o(Ua);Kn=r(bp,"datasets.interleave_datasets()"),bp.forEach(a),Qn=r(ft," can combine an "),Ba=l(ft,"A",{href:!0});var $p=o(Ba);Xn=r($p,"datasets.IterableDataset"),$p.forEach(a),Zn=r(ft," with other datasets. The combined dataset returns alternating examples from each of the original datasets."),ft.forEach(a),Vt=d(s),b(ea.$$.fragment,s),Ft=d(s),ws=l(s,"P",{});var Nl=o(ws);sr=r(Nl,"Define sampling probabilities from each of the original datasets for more control over how each of them are sampled and combined. Set the "),Ie=l(Nl,"CODE",{});var xp=o(Ie);ar=r(xp,"probabilities"),xp.forEach(a),er=r(Nl," argument with your desired sampling probabilities:"),Nl.forEach(a),Rt=d(s),b(ta.$$.fragment,s),Ht=d(s),Y=l(s,"P",{});var ce=o(Y);tr=r(ce,"Around 80% of the final dataset is made of the "),Te=l(ce,"CODE",{});var wp=o(Te);lr=r(wp,"en_dataset"),wp.forEach(a),nr=r(ce,", and 20% of the "),Pe=l(ce,"CODE",{});var yp=o(Pe);rr=r(yp,"fr_dataset"),yp.forEach(a),or=r(ce,"."),ce.forEach(a),Yt=d(s),Z=l(s,"H2",{class:!0});var Ml=o(Z);ys=l(Ml,"A",{id:!0,class:!0,href:!0});var kp=o(ys);qe=l(kp,"SPAN",{});var Ep=o(qe);b(la.$$.fragment,Ep),Ep.forEach(a),kp.forEach(a),pr=d(Ml),Se=l(Ml,"SPAN",{});var Dp=o(Se);ir=r(Dp,"Rename, remove, and cast"),Dp.forEach(a),Ml.forEach(a),Ut=d(s),Ja=l(s,"P",{});var Ap=o(Ja);hr=r(Ap,"The following methods allow you to modify the columns of a dataset. These methods are useful for renaming or removing columns and changing columns to a new set of features."),Ap.forEach(a),Bt=d(s),ss=l(s,"H3",{class:!0});var Ll=o(ss);ks=l(Ll,"A",{id:!0,class:!0,href:!0});var Ip=o(ks);Ce=l(Ip,"SPAN",{});var Tp=o(Ce);b(na.$$.fragment,Tp),Tp.forEach(a),Ip.forEach(a),cr=d(Ll),ze=l(Ll,"SPAN",{});var Pp=o(ze);dr=r(Pp,"Rename"),Pp.forEach(a),Ll.forEach(a),Jt=d(s),Es=l(s,"P",{});var Ol=o(Es);fr=r(Ol,"Use "),Ne=l(Ol,"CODE",{});var qp=o(Ne);mr=r(qp,"datasets.IterableDataset.rename_column()"),qp.forEach(a),ur=r(Ol,"when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Ol.forEach(a),Wt=d(s),Ds=l(s,"P",{});var Vl=o(Ds);gr=r(Vl,"Provide "),Me=l(Vl,"CODE",{});var Sp=o(Me);_r=r(Sp,"datasets.IterableDataset.rename_column()"),Sp.forEach(a),jr=r(Vl,"with the name of the original column, and the new column name:"),Vl.forEach(a),Gt=d(s),b(ra.$$.fragment,s),Kt=d(s),as=l(s,"H3",{class:!0});var Fl=o(as);As=l(Fl,"A",{id:!0,class:!0,href:!0});var Cp=o(As);Le=l(Cp,"SPAN",{});var zp=o(Le);b(oa.$$.fragment,zp),zp.forEach(a),Cp.forEach(a),vr=d(Fl),Oe=l(Fl,"SPAN",{});var Np=o(Oe);br=r(Np,"Remove"),Np.forEach(a),Fl.forEach(a),Qt=d(s),Is=l(s,"P",{});var Rl=o(Is);$r=r(Rl,"When you need to remove one or more columns, give "),Wa=l(Rl,"A",{href:!0});var Mp=o(Wa);xr=r(Mp,"datasets.IterableDataset.remove_columns()"),Mp.forEach(a),wr=r(Rl," the name of the column to remove. Remove more than one column by providing a list of column names:"),Rl.forEach(a),Xt=d(s),b(pa.$$.fragment,s),Zt=d(s),es=l(s,"H3",{class:!0});var Hl=o(es);Ts=l(Hl,"A",{id:!0,class:!0,href:!0});var Lp=o(Ts);Ve=l(Lp,"SPAN",{});var Op=o(Ve);b(ia.$$.fragment,Op),Op.forEach(a),Lp.forEach(a),yr=d(Hl),Fe=l(Hl,"SPAN",{});var Vp=o(Fe);kr=r(Vp,"Cast"),Vp.forEach(a),Hl.forEach(a),sl=d(s),M=l(s,"P",{});var is=o(M);Re=l(is,"CODE",{});var Fp=o(Re);Er=r(Fp,"datasets.IterableDataset.cast()"),Fp.forEach(a),Dr=r(is,"changes the feature type of one or more columns. This method takes your new "),He=l(is,"CODE",{});var Rp=o(He);Ar=r(Rp,"datasets.Features"),Rp.forEach(a),Ir=r(is," as its argument. The following sample code shows how to change the feature types of "),Ye=l(is,"CODE",{});var Hp=o(Ye);Tr=r(Hp,"datasets.ClassLabel"),Hp.forEach(a),Pr=r(is," and "),Ue=l(is,"CODE",{});var Yp=o(Ue);qr=r(Yp,"datasets.Value"),Yp.forEach(a),Sr=r(is,":"),is.forEach(a),al=d(s),b(ha.$$.fragment,s),el=d(s),b(Ps.$$.fragment,s),tl=d(s),qs=l(s,"P",{});var Yl=o(qs);Cr=r(Yl,"Use "),Ga=l(Yl,"A",{href:!0});var Up=o(Ga);zr=r(Up,"datasets.Dataset.cast_column()"),Up.forEach(a),Nr=r(Yl," to change the feature type of just one column. Pass the column name and its new feature type as arguments:"),Yl.forEach(a),ll=d(s),b(ca.$$.fragment,s),nl=d(s),ts=l(s,"H2",{class:!0});var Ul=o(ts);Ss=l(Ul,"A",{id:!0,class:!0,href:!0});var Bp=o(Ss);Be=l(Bp,"SPAN",{});var Jp=o(Be);b(da.$$.fragment,Jp),Jp.forEach(a),Bp.forEach(a),Mr=d(Ul),Je=l(Ul,"SPAN",{});var Wp=o(Je);Lr=r(Wp,"Map"),Wp.forEach(a),Ul.forEach(a),rl=d(s),S=l(s,"P",{});var F=o(S);Or=r(F,"Similar to the "),Ka=l(F,"A",{href:!0});var Gp=o(Ka);Vr=r(Gp,"datasets.Dataset.map()"),Gp.forEach(a),Fr=r(F," function for a regular "),Qa=l(F,"A",{href:!0});var Kp=o(Qa);Rr=r(Kp,"datasets.Dataset"),Kp.forEach(a),Hr=r(F,", \u{1F917}  Datasets features "),Xa=l(F,"A",{href:!0});var Qp=o(Xa);Yr=r(Qp,"datasets.IterableDataset.map()"),Qp.forEach(a),Ur=r(F," for processing "),Za=l(F,"A",{href:!0});var Xp=o(Za);Br=r(Xp,"datasets.IterableDataset"),Xp.forEach(a),Jr=r(F,`\\s.
`),se=l(F,"A",{href:!0});var Zp=o(se);Wr=r(Zp,"datasets.IterableDataset.map()"),Zp.forEach(a),Gr=r(F," applies processing on-the-fly when examples are streamed."),F.forEach(a),ol=d(s),ae=l(s,"P",{});var si=o(ae);Kr=r(si,"It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),si.forEach(a),pl=d(s),U=l(s,"P",{});var de=o(U);Qr=r(de,"The following example demonstrates how to tokenize a "),ee=l(de,"A",{href:!0});var ai=o(ee);Xr=r(ai,"datasets.IterableDataset"),ai.forEach(a),Zr=r(de,". The function needs to accept and output a "),We=l(de,"CODE",{});var ei=o(We);so=r(ei,"dict"),ei.forEach(a),ao=r(de,":"),de.forEach(a),il=d(s),b(fa.$$.fragment,s),hl=d(s),Cs=l(s,"P",{});var Bl=o(Cs);eo=r(Bl,"Next, apply this function to the dataset with "),te=l(Bl,"A",{href:!0});var ti=o(te);to=r(ti,"datasets.IterableDataset.map()"),ti.forEach(a),lo=r(Bl,":"),Bl.forEach(a),cl=d(s),b(ma.$$.fragment,s),dl=d(s),zs=l(s,"P",{});var Jl=o(zs);no=r(Jl,"Let\u2019s take a look at another example, except this time, you will remove a column with "),le=l(Jl,"A",{href:!0});var li=o(le);ro=r(li,"datasets.IterableDataset.map()"),li.forEach(a),oo=r(Jl,". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),Jl.forEach(a),fl=d(s),B=l(s,"P",{});var fe=o(B);po=r(fe,"Specify the column to remove with the "),Ge=l(fe,"CODE",{});var ni=o(Ge);io=r(ni,"remove_columns"),ni.forEach(a),ho=r(fe," argument in "),ne=l(fe,"A",{href:!0});var ri=o(ne);co=r(ri,"datasets.IterableDataset.map()"),ri.forEach(a),fo=r(fe,":"),fe.forEach(a),ml=d(s),b(ua.$$.fragment,s),ul=d(s),ls=l(s,"H3",{class:!0});var Wl=o(ls);Ns=l(Wl,"A",{id:!0,class:!0,href:!0});var oi=o(Ns);Ke=l(oi,"SPAN",{});var pi=o(Ke);b(ga.$$.fragment,pi),pi.forEach(a),oi.forEach(a),mo=d(Wl),Qe=l(Wl,"SPAN",{});var ii=o(Qe);uo=r(ii,"Batch processing"),ii.forEach(a),Wl.forEach(a),gl=d(s),R=l(s,"P",{});var Ea=o(R);re=l(Ea,"A",{href:!0});var hi=o(re);go=r(hi,"datasets.IterableDataset.map()"),hi.forEach(a),_o=r(Ea," also supports working with batches of examples. Operate on batches by setting "),Xe=l(Ea,"CODE",{});var ci=o(Xe);jo=r(ci,"batched=True"),ci.forEach(a),vo=r(Ea,". The default batch size is 1000, but you can adjust it with the "),Ze=l(Ea,"CODE",{});var di=o(Ze);bo=r(di,"batch_size"),di.forEach(a),$o=r(Ea," argument. This opens the door to many interesting applications such as tokenization, splitting long sentences into shorter chunks, and data augmentation."),Ea.forEach(a),_l=d(s),ns=l(s,"H4",{class:!0});var Gl=o(ns);Ms=l(Gl,"A",{id:!0,class:!0,href:!0});var fi=o(Ms);st=l(fi,"SPAN",{});var mi=o(st);b(_a.$$.fragment,mi),mi.forEach(a),fi.forEach(a),xo=d(Gl),at=l(Gl,"SPAN",{});var ui=o(at);wo=r(ui,"Tokenization"),ui.forEach(a),Gl.forEach(a),jl=d(s),b(ja.$$.fragment,s),vl=d(s),b(Ls.$$.fragment,s),bl=d(s),rs=l(s,"H3",{class:!0});var Kl=o(rs);Os=l(Kl,"A",{id:!0,class:!0,href:!0});var gi=o(Os);et=l(gi,"SPAN",{});var _i=o(et);b(va.$$.fragment,_i),_i.forEach(a),gi.forEach(a),yo=d(Kl),tt=l(Kl,"SPAN",{});var ji=o(tt);ko=r(ji,"Filter"),ji.forEach(a),Kl.forEach(a),$l=d(s),Vs=l(s,"P",{});var Ql=o(Vs);Eo=r(Ql,"You can filter rows in the dataset based on a predicate function using "),oe=l(Ql,"A",{href:!0});var vi=o(oe);Do=r(vi,"datasets.Dataset.filter()"),vi.forEach(a),Ao=r(Ql,". It returns rows that match a specified condition:"),Ql.forEach(a),xl=d(s),b(ba.$$.fragment,s),wl=d(s),os=l(s,"P",{});var mt=o(os);pe=l(mt,"A",{href:!0});var bi=o(pe);Io=r(bi,"datasets.Dataset.filter()"),bi.forEach(a),To=r(mt," can also filter by indices if you set "),lt=l(mt,"CODE",{});var $i=o(lt);Po=r($i,"with_indices=True"),$i.forEach(a),qo=r(mt,":"),mt.forEach(a),yl=d(s),b($a.$$.fragment,s),kl=d(s),ps=l(s,"H2",{class:!0});var Xl=o(ps);Fs=l(Xl,"A",{id:!0,class:!0,href:!0});var xi=o(Fs);nt=l(xi,"SPAN",{});var wi=o(nt);b(xa.$$.fragment,wi),wi.forEach(a),xi.forEach(a),So=d(Xl),rt=l(Xl,"SPAN",{});var yi=o(rt);Co=r(yi,"Stream in a training loop"),yi.forEach(a),Xl.forEach(a),El=d(s),wa=l(s,"P",{});var Mo=o(wa);ie=l(Mo,"A",{href:!0});var ki=o(ie);zo=r(ki,"datasets.IterableDataset"),ki.forEach(a),No=r(Mo," can be integrated into a training loop. First, shuffle the dataset:"),Mo.forEach(a),Dl=d(s),b(Rs.$$.fragment,s),this.h()},h(){h(f,"name","hf:doc:metadata"),h(f,"content",JSON.stringify(Ri)),h(j,"id","stream"),h(j,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(j,"href","#stream"),h(m,"class","relative group"),h(Ta,"class","block dark:hidden"),Ei(Ta.src,Lo="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/datasets/streaming.gif")||h(Ta,"src",Lo),h(Pa,"class","hidden dark:block"),Ei(Pa.src,Oo="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/datasets/streaming-dark.gif")||h(Pa,"src",Oo),h(J,"class","flex justify-center"),h(Bs,"href","https://huggingface.co/datasets/oscar"),h(Bs,"rel","nofollow"),h(qa,"href","/docs/datasets/master/en/package_reference/loading_methods#datasets.load_dataset"),h(Sa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),h(Ca,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(fs,"id","shuffle"),h(fs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(fs,"href","#shuffle"),h(W,"class","relative group"),h(za,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),h(Na,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(Ma,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.shuffle"),h(La,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.shuffle"),h(us,"id","reshuffle"),h(us,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(us,"href","#reshuffle"),h(G,"class","relative group"),h(js,"id","split-dataset"),h(js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(js,"href","#split-dataset"),h(K,"class","relative group"),h(Fa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.take"),h(Ha,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.skip"),h(Ya,"id","interleave_datasets"),h(xs,"id","interleave"),h(xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(xs,"href","#interleave"),h(Q,"class","relative group"),h(Ua,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.interleave_datasets"),h(Ba,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(ys,"id","rename-remove-and-cast"),h(ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ys,"href","#rename-remove-and-cast"),h(Z,"class","relative group"),h(ks,"id","rename"),h(ks,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(ks,"href","#rename"),h(ss,"class","relative group"),h(As,"id","remove"),h(As,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(As,"href","#remove"),h(as,"class","relative group"),h(Wa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.remove_columns"),h(Ts,"id","cast"),h(Ts,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ts,"href","#cast"),h(es,"class","relative group"),h(Ga,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.cast_column"),h(Ss,"id","map"),h(Ss,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ss,"href","#map"),h(ts,"class","relative group"),h(Ka,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.map"),h(Qa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset"),h(Xa,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(Za,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(se,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(ee,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset"),h(te,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(le,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(ne,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(Ns,"id","batch-processing"),h(Ns,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ns,"href","#batch-processing"),h(ls,"class","relative group"),h(re,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset.map"),h(Ms,"id","tokenization"),h(Ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Ms,"href","#tokenization"),h(ns,"class","relative group"),h(Os,"id","filter"),h(Os,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Os,"href","#filter"),h(rs,"class","relative group"),h(oe,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.filter"),h(pe,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.Dataset.filter"),h(Fs,"id","stream-in-a-training-loop"),h(Fs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),h(Fs,"href","#stream-in-a-training-loop"),h(ps,"class","relative group"),h(ie,"href","/docs/datasets/master/en/package_reference/main_classes#datasets.IterableDataset")},m(s,p){e(document.head,f),i(s,_,p),i(s,m,p),e(m,j),e(j,k),$(g,k,null),e(m,E),e(m,u),e(u,D),i(s,A,p),i(s,T,p),e(T,N),i(s,hs,p),i(s,C,p),e(C,q),e(q,Da),e(C,Aa),e(C,cs),e(cs,Ia),i(s,gt,p),i(s,J,p),e(J,Ta),e(J,Zl),e(J,Pa),i(s,_t,p),i(s,L,p),e(L,sn),e(L,Bs),e(Bs,an),e(L,en),e(L,me),e(me,tn),e(L,ln),e(L,qa),e(qa,nn),e(L,rn),i(s,jt,p),$(Js,s,p),i(s,vt,p),i(s,H,p),e(H,on),e(H,Sa),e(Sa,pn),e(H,hn),e(H,Ca),e(Ca,cn),e(H,dn),i(s,bt,p),$(ds,s,p),i(s,$t,p),i(s,W,p),e(W,fs),e(fs,ue),$(Ws,ue,null),e(W,fn),e(W,ge),e(ge,mn),i(s,xt,p),i(s,O,p),e(O,un),e(O,za),e(za,gn),e(O,_n),e(O,Na),e(Na,jn),e(O,vn),e(O,Ma),e(Ma,bn),e(O,$n),i(s,wt,p),i(s,V,p),e(V,xn),e(V,_e),e(_e,wn),e(V,yn),e(V,je),e(je,kn),e(V,En),e(V,La),e(La,Dn),e(V,An),i(s,yt,p),$(Gs,s,p),i(s,kt,p),$(ms,s,p),i(s,Et,p),i(s,G,p),e(G,us),e(us,ve),$(Ks,ve,null),e(G,In),e(G,be),e(be,Tn),i(s,Dt,p),i(s,gs,p),e(gs,Pn),e(gs,$e),e($e,qn),e(gs,Sn),i(s,At,p),i(s,_s,p),e(_s,Cn),e(_s,xe),e(xe,zn),e(_s,Nn),i(s,It,p),$(Qs,s,p),i(s,Tt,p),i(s,K,p),e(K,js),e(js,we),$(Xs,we,null),e(K,Mn),e(K,ye),e(ye,Ln),i(s,Pt,p),i(s,Oa,p),e(Oa,On),i(s,qt,p),i(s,Va,p),e(Va,vs),e(vs,Fa),e(Fa,Vn),e(vs,Fn),e(vs,ke),e(ke,Rn),e(vs,Hn),i(s,St,p),$(Zs,s,p),i(s,Ct,p),i(s,Ra,p),e(Ra,bs),e(bs,Ha),e(Ha,Yn),e(bs,Un),e(bs,Ee),e(Ee,Bn),e(bs,Jn),i(s,zt,p),$(sa,s,p),i(s,Nt,p),$($s,s,p),i(s,Mt,p),i(s,Ya,p),i(s,Lt,p),i(s,Q,p),e(Q,xs),e(xs,De),$(aa,De,null),e(Q,Wn),e(Q,Ae),e(Ae,Gn),i(s,Ot,p),i(s,X,p),e(X,Ua),e(Ua,Kn),e(X,Qn),e(X,Ba),e(Ba,Xn),e(X,Zn),i(s,Vt,p),$(ea,s,p),i(s,Ft,p),i(s,ws,p),e(ws,sr),e(ws,Ie),e(Ie,ar),e(ws,er),i(s,Rt,p),$(ta,s,p),i(s,Ht,p),i(s,Y,p),e(Y,tr),e(Y,Te),e(Te,lr),e(Y,nr),e(Y,Pe),e(Pe,rr),e(Y,or),i(s,Yt,p),i(s,Z,p),e(Z,ys),e(ys,qe),$(la,qe,null),e(Z,pr),e(Z,Se),e(Se,ir),i(s,Ut,p),i(s,Ja,p),e(Ja,hr),i(s,Bt,p),i(s,ss,p),e(ss,ks),e(ks,Ce),$(na,Ce,null),e(ss,cr),e(ss,ze),e(ze,dr),i(s,Jt,p),i(s,Es,p),e(Es,fr),e(Es,Ne),e(Ne,mr),e(Es,ur),i(s,Wt,p),i(s,Ds,p),e(Ds,gr),e(Ds,Me),e(Me,_r),e(Ds,jr),i(s,Gt,p),$(ra,s,p),i(s,Kt,p),i(s,as,p),e(as,As),e(As,Le),$(oa,Le,null),e(as,vr),e(as,Oe),e(Oe,br),i(s,Qt,p),i(s,Is,p),e(Is,$r),e(Is,Wa),e(Wa,xr),e(Is,wr),i(s,Xt,p),$(pa,s,p),i(s,Zt,p),i(s,es,p),e(es,Ts),e(Ts,Ve),$(ia,Ve,null),e(es,yr),e(es,Fe),e(Fe,kr),i(s,sl,p),i(s,M,p),e(M,Re),e(Re,Er),e(M,Dr),e(M,He),e(He,Ar),e(M,Ir),e(M,Ye),e(Ye,Tr),e(M,Pr),e(M,Ue),e(Ue,qr),e(M,Sr),i(s,al,p),$(ha,s,p),i(s,el,p),$(Ps,s,p),i(s,tl,p),i(s,qs,p),e(qs,Cr),e(qs,Ga),e(Ga,zr),e(qs,Nr),i(s,ll,p),$(ca,s,p),i(s,nl,p),i(s,ts,p),e(ts,Ss),e(Ss,Be),$(da,Be,null),e(ts,Mr),e(ts,Je),e(Je,Lr),i(s,rl,p),i(s,S,p),e(S,Or),e(S,Ka),e(Ka,Vr),e(S,Fr),e(S,Qa),e(Qa,Rr),e(S,Hr),e(S,Xa),e(Xa,Yr),e(S,Ur),e(S,Za),e(Za,Br),e(S,Jr),e(S,se),e(se,Wr),e(S,Gr),i(s,ol,p),i(s,ae,p),e(ae,Kr),i(s,pl,p),i(s,U,p),e(U,Qr),e(U,ee),e(ee,Xr),e(U,Zr),e(U,We),e(We,so),e(U,ao),i(s,il,p),$(fa,s,p),i(s,hl,p),i(s,Cs,p),e(Cs,eo),e(Cs,te),e(te,to),e(Cs,lo),i(s,cl,p),$(ma,s,p),i(s,dl,p),i(s,zs,p),e(zs,no),e(zs,le),e(le,ro),e(zs,oo),i(s,fl,p),i(s,B,p),e(B,po),e(B,Ge),e(Ge,io),e(B,ho),e(B,ne),e(ne,co),e(B,fo),i(s,ml,p),$(ua,s,p),i(s,ul,p),i(s,ls,p),e(ls,Ns),e(Ns,Ke),$(ga,Ke,null),e(ls,mo),e(ls,Qe),e(Qe,uo),i(s,gl,p),i(s,R,p),e(R,re),e(re,go),e(R,_o),e(R,Xe),e(Xe,jo),e(R,vo),e(R,Ze),e(Ze,bo),e(R,$o),i(s,_l,p),i(s,ns,p),e(ns,Ms),e(Ms,st),$(_a,st,null),e(ns,xo),e(ns,at),e(at,wo),i(s,jl,p),$(ja,s,p),i(s,vl,p),$(Ls,s,p),i(s,bl,p),i(s,rs,p),e(rs,Os),e(Os,et),$(va,et,null),e(rs,yo),e(rs,tt),e(tt,ko),i(s,$l,p),i(s,Vs,p),e(Vs,Eo),e(Vs,oe),e(oe,Do),e(Vs,Ao),i(s,xl,p),$(ba,s,p),i(s,wl,p),i(s,os,p),e(os,pe),e(pe,Io),e(os,To),e(os,lt),e(lt,Po),e(os,qo),i(s,yl,p),$($a,s,p),i(s,kl,p),i(s,ps,p),e(ps,Fs),e(Fs,nt),$(xa,nt,null),e(ps,So),e(ps,rt),e(rt,Co),i(s,El,p),i(s,wa,p),e(wa,ie),e(ie,zo),e(wa,No),i(s,Dl,p),$(Rs,s,p),Al=!0},p(s,[p]){const ya={};p&2&&(ya.$$scope={dirty:p,ctx:s}),ds.$set(ya);const ot={};p&2&&(ot.$$scope={dirty:p,ctx:s}),ms.$set(ot);const pt={};p&2&&(pt.$$scope={dirty:p,ctx:s}),$s.$set(pt);const it={};p&2&&(it.$$scope={dirty:p,ctx:s}),Ps.$set(it);const ht={};p&2&&(ht.$$scope={dirty:p,ctx:s}),Ls.$set(ht);const ka={};p&2&&(ka.$$scope={dirty:p,ctx:s}),Rs.$set(ka)},i(s){Al||(x(g.$$.fragment,s),x(Js.$$.fragment,s),x(ds.$$.fragment,s),x(Ws.$$.fragment,s),x(Gs.$$.fragment,s),x(ms.$$.fragment,s),x(Ks.$$.fragment,s),x(Qs.$$.fragment,s),x(Xs.$$.fragment,s),x(Zs.$$.fragment,s),x(sa.$$.fragment,s),x($s.$$.fragment,s),x(aa.$$.fragment,s),x(ea.$$.fragment,s),x(ta.$$.fragment,s),x(la.$$.fragment,s),x(na.$$.fragment,s),x(ra.$$.fragment,s),x(oa.$$.fragment,s),x(pa.$$.fragment,s),x(ia.$$.fragment,s),x(ha.$$.fragment,s),x(Ps.$$.fragment,s),x(ca.$$.fragment,s),x(da.$$.fragment,s),x(fa.$$.fragment,s),x(ma.$$.fragment,s),x(ua.$$.fragment,s),x(ga.$$.fragment,s),x(_a.$$.fragment,s),x(ja.$$.fragment,s),x(Ls.$$.fragment,s),x(va.$$.fragment,s),x(ba.$$.fragment,s),x($a.$$.fragment,s),x(xa.$$.fragment,s),x(Rs.$$.fragment,s),Al=!0)},o(s){w(g.$$.fragment,s),w(Js.$$.fragment,s),w(ds.$$.fragment,s),w(Ws.$$.fragment,s),w(Gs.$$.fragment,s),w(ms.$$.fragment,s),w(Ks.$$.fragment,s),w(Qs.$$.fragment,s),w(Xs.$$.fragment,s),w(Zs.$$.fragment,s),w(sa.$$.fragment,s),w($s.$$.fragment,s),w(aa.$$.fragment,s),w(ea.$$.fragment,s),w(ta.$$.fragment,s),w(la.$$.fragment,s),w(na.$$.fragment,s),w(ra.$$.fragment,s),w(oa.$$.fragment,s),w(pa.$$.fragment,s),w(ia.$$.fragment,s),w(ha.$$.fragment,s),w(Ps.$$.fragment,s),w(ca.$$.fragment,s),w(da.$$.fragment,s),w(fa.$$.fragment,s),w(ma.$$.fragment,s),w(ua.$$.fragment,s),w(ga.$$.fragment,s),w(_a.$$.fragment,s),w(ja.$$.fragment,s),w(Ls.$$.fragment,s),w(va.$$.fragment,s),w(ba.$$.fragment,s),w($a.$$.fragment,s),w(xa.$$.fragment,s),w(Rs.$$.fragment,s),Al=!1},d(s){a(f),s&&a(_),s&&a(m),y(g),s&&a(A),s&&a(T),s&&a(hs),s&&a(C),s&&a(gt),s&&a(J),s&&a(_t),s&&a(L),s&&a(jt),y(Js,s),s&&a(vt),s&&a(H),s&&a(bt),y(ds,s),s&&a($t),s&&a(W),y(Ws),s&&a(xt),s&&a(O),s&&a(wt),s&&a(V),s&&a(yt),y(Gs,s),s&&a(kt),y(ms,s),s&&a(Et),s&&a(G),y(Ks),s&&a(Dt),s&&a(gs),s&&a(At),s&&a(_s),s&&a(It),y(Qs,s),s&&a(Tt),s&&a(K),y(Xs),s&&a(Pt),s&&a(Oa),s&&a(qt),s&&a(Va),s&&a(St),y(Zs,s),s&&a(Ct),s&&a(Ra),s&&a(zt),y(sa,s),s&&a(Nt),y($s,s),s&&a(Mt),s&&a(Ya),s&&a(Lt),s&&a(Q),y(aa),s&&a(Ot),s&&a(X),s&&a(Vt),y(ea,s),s&&a(Ft),s&&a(ws),s&&a(Rt),y(ta,s),s&&a(Ht),s&&a(Y),s&&a(Yt),s&&a(Z),y(la),s&&a(Ut),s&&a(Ja),s&&a(Bt),s&&a(ss),y(na),s&&a(Jt),s&&a(Es),s&&a(Wt),s&&a(Ds),s&&a(Gt),y(ra,s),s&&a(Kt),s&&a(as),y(oa),s&&a(Qt),s&&a(Is),s&&a(Xt),y(pa,s),s&&a(Zt),s&&a(es),y(ia),s&&a(sl),s&&a(M),s&&a(al),y(ha,s),s&&a(el),y(Ps,s),s&&a(tl),s&&a(qs),s&&a(ll),y(ca,s),s&&a(nl),s&&a(ts),y(da),s&&a(rl),s&&a(S),s&&a(ol),s&&a(ae),s&&a(pl),s&&a(U),s&&a(il),y(fa,s),s&&a(hl),s&&a(Cs),s&&a(cl),y(ma,s),s&&a(dl),s&&a(zs),s&&a(fl),s&&a(B),s&&a(ml),y(ua,s),s&&a(ul),s&&a(ls),y(ga),s&&a(gl),s&&a(R),s&&a(_l),s&&a(ns),y(_a),s&&a(jl),y(ja,s),s&&a(vl),y(Ls,s),s&&a(bl),s&&a(rs),y(va),s&&a($l),s&&a(Vs),s&&a(xl),y(ba,s),s&&a(wl),s&&a(os),s&&a(yl),y($a,s),s&&a(kl),s&&a(ps),y(xa),s&&a(El),s&&a(wa),s&&a(Dl),y(Rs,s)}}}const Ri={local:"stream",sections:[{local:"shuffle",title:"Shuffle"},{local:"reshuffle",title:"Reshuffle"},{local:"split-dataset",title:"Split dataset"},{local:"interleave",title:"Interleave"},{local:"rename-remove-and-cast",sections:[{local:"rename",title:"Rename"},{local:"remove",title:"Remove"},{local:"cast",title:"Cast"}],title:"Rename, remove, and cast"},{local:"map",sections:[{local:"batch-processing",sections:[{local:"tokenization",title:"Tokenization"}],title:"Batch processing"},{local:"filter",title:"Filter"}],title:"Map"},{local:"stream-in-a-training-loop",title:"Stream in a training loop"}],title:"Stream"};function Hi(P,f,_){let{fw:m}=f;return P.$$set=j=>{"fw"in j&&_(0,m=j.fw)},[m]}class Ki extends Di{constructor(f){super();Ai(this,f,Hi,Fi,Ii,{fw:0})}}export{Ki as default,Ri as metadata};
