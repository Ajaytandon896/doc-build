import{S as Dm,i as Tm,s as Nm,e as l,k as d,w as u,t as r,M as Cm,c as o,d as a,m as f,a as n,x as m,h as i,b as c,G as s,g as p,y as _,q as g,o as v,B as $,v as Im}from"../chunks/vendor-hf-doc-builder.js";import{T as Ws}from"../chunks/Tip-hf-doc-builder.js";import{I as A}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";import{C as So}from"../chunks/CodeBlockFw-hf-doc-builder.js";import"../chunks/IconTensorflow-hf-doc-builder.js";function Om(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Refer to the "),y=l("a"),b=r("Upload a dataset to the Hub"),q=r(" tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Refer to the "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Upload a dataset to the Hub"),P.forEach(a),q=i(j," tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),j.forEach(a),this.h()},h(){c(y,"href","./upload_dataset")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function Hm(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("If you don\u2019t specify which data files to use, "),y=l("a"),b=r("load_dataset()"),q=r(" will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"If you don\u2019t specify which data files to use, "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"load_dataset()"),P.forEach(a),q=i(j," will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),j.forEach(a),this.h()},h(){c(y,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function Lm(D){let h,k,y,b,q,w,j,P,et,Pt,U,lt,xt,Y,B,At,S,V,Pa,xa,z,Aa,Sa,H,Da,Ta;return{c(){h=l("p"),k=r("An object data type in "),y=l("a"),b=r("pandas.Series"),q=r(" doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=l("code"),j=r("0"),P=r(" or the Series only contains "),et=l("code"),Pt=r("None/NaN"),U=r(" objects, the type is set to "),lt=l("code"),xt=r("null"),Y=r(". Avoid potential errors by constructing an explicit schema with "),B=l("a"),At=r("Features"),S=r(" using the "),V=l("code"),Pa=r("from_dict"),xa=r(" or "),z=l("code"),Aa=r("from_pandas"),Sa=r(" methods. See the "),H=l("a"),Da=r("troubleshoot"),Ta=r(" section for more details on how to explicitly specify your own features."),this.h()},l(J){h=o(J,"P",{});var x=n(h);k=i(x,"An object data type in "),y=o(x,"A",{href:!0,rel:!0});var Gs=n(y);b=i(Gs,"pandas.Series"),Gs.forEach(a),q=i(x," doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=o(x,"CODE",{});var St=n(w);j=i(St,"0"),St.forEach(a),P=i(x," or the Series only contains "),et=o(x,"CODE",{});var Qs=n(et);Pt=i(Qs,"None/NaN"),Qs.forEach(a),U=i(x," objects, the type is set to "),lt=o(x,"CODE",{});var Ks=n(lt);xt=i(Ks,"null"),Ks.forEach(a),Y=i(x,". Avoid potential errors by constructing an explicit schema with "),B=o(x,"A",{href:!0});var Dt=n(B);At=i(Dt,"Features"),Dt.forEach(a),S=i(x," using the "),V=o(x,"CODE",{});var Xs=n(V);Pa=i(Xs,"from_dict"),Xs.forEach(a),xa=i(x," or "),z=o(x,"CODE",{});var Na=n(z);Aa=i(Na,"from_pandas"),Na.forEach(a),Sa=i(x," methods. See the "),H=o(x,"A",{href:!0});var C=n(H);Da=i(C,"troubleshoot"),C.forEach(a),Ta=i(x," section for more details on how to explicitly specify your own features."),x.forEach(a),this.h()},h(){c(y,"href","https://pandas.pydata.org/docs/reference/api/pandas.Series.html"),c(y,"rel","nofollow"),c(B,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.Features"),c(H,"href","./loading#specify-features")},m(J,x){p(J,h,x),s(h,k),s(h,y),s(y,b),s(h,q),s(h,w),s(w,j),s(h,P),s(h,et),s(et,Pt),s(h,U),s(h,lt),s(lt,xt),s(h,Y),s(h,B),s(B,At),s(h,S),s(h,V),s(V,Pa),s(h,xa),s(h,z),s(z,Aa),s(h,Sa),s(h,H),s(H,Da),s(h,Ta)},d(J){J&&a(h)}}}function Fm(D){let h,k,y,b;return{c(){h=l("p"),k=l("code"),y=r("pct1_dropremainder"),b=r(" rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100.")},l(q){h=o(q,"P",{});var w=n(h);k=o(w,"CODE",{});var j=n(k);y=i(j,"pct1_dropremainder"),j.forEach(a),b=i(w," rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100."),w.forEach(a)},m(q,w){p(q,h,w),s(h,k),s(k,y),s(h,b)},d(q){q&&a(h)}}}function Rm(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=l("a"),b=r("Evaluate"),q=r("! In addition to metrics, you can find more tools for evaluating models and datasets."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=o(j,"A",{href:!0,rel:!0});var P=n(y);b=i(P,"Evaluate"),P.forEach(a),q=i(j,"! In addition to metrics, you can find more tools for evaluating models and datasets."),j.forEach(a),this.h()},h(){c(y,"href","https://huggingface.co/docs/evaluate/index"),c(y,"rel","nofollow")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function Mm(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("See the "),y=l("a"),b=r("Metrics"),q=r(" guide for more details on how to write your own metric loading script."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"See the "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Metrics"),P.forEach(a),q=i(j," guide for more details on how to write your own metric loading script."),j.forEach(a),this.h()},h(){c(y,"href","./how_to_metrics#custom-metric-loading-script")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function Vm(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=l("a"),b=r("Metric.compute()"),q=r(" gathers all the predictions and references from the nodes, and computes the final metric."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Metric.compute()"),P.forEach(a),q=i(j," gathers all the predictions and references from the nodes, and computes the final metric."),j.forEach(a),this.h()},h(){c(y,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.Metric.compute")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function zm(D){let h,k,y,b,q,w,j,P,et,Pt,U,lt,xt,Y,B,At,S,V,Pa,xa,z,Aa,Sa,H,Da,Ta,J,x,Gs,St,Qs,Ks,Dt,Xs,Na,C,Ci,Ca,Ii,Oi,Ia,Hi,Li,Oa,Fi,Ri,Do,Zs,To,ot,Tt,Ze,Ha,Mi,tl,Vi,No,W,zi,te,Ji,Ui,ae,Yi,Bi,Co,Nt,Wi,La,Gi,Qi,Io,Fa,Oo,Ct,Ki,al,Xi,Zi,Ho,Ra,Lo,It,Fo,T,tp,sl,ap,sp,el,ep,lp,ll,op,np,ol,rp,ip,nl,pp,dp,Ro,Ma,Mo,Ot,Vo,G,fp,rl,cp,hp,il,up,mp,zo,Va,Jo,Ht,_p,pl,gp,vp,Uo,za,Yo,nt,Lt,dl,Ja,$p,fl,yp,Bo,Ft,wp,se,jp,bp,Wo,Rt,cl,qp,kp,hl,Ep,Go,Ua,Qo,rt,Mt,ul,Ya,Pp,ml,xp,Ko,ee,Ap,Xo,Ba,Zo,Vt,Sp,le,Dp,Tp,tn,Wa,an,it,zt,_l,Ga,Np,gl,Cp,sn,N,Ip,vl,Op,Hp,$l,Lp,Fp,yl,Rp,Mp,wl,Vp,zp,oe,Jp,Up,en,pt,Jt,jl,Qa,Yp,bl,Bp,ln,ne,Wp,on,Ka,nn,re,Gp,rn,Xa,pn,ie,Qp,dn,Za,fn,pe,Kp,cn,ts,hn,de,Xp,un,as,mn,dt,Ut,ql,ss,Zp,kl,td,_n,Yt,ad,fe,sd,ed,gn,es,vn,ce,ld,$n,ls,yn,Bt,od,El,nd,rd,wn,os,jn,he,id,bn,ns,qn,ue,pd,kn,ft,Wt,Pl,rs,dd,xl,fd,En,me,cd,Pn,_e,hd,xn,is,An,ge,ud,Sn,ps,Dn,ct,Gt,Al,ds,md,Sl,_d,Tn,Qt,gd,ve,vd,$d,Nn,ht,Kt,Dl,fs,yd,Tl,wd,Cn,Xt,jd,$e,bd,qd,In,cs,On,ut,Zt,Nl,hs,kd,Cl,Ed,Hn,ta,Pd,Il,xd,Ad,Ln,us,Fn,mt,aa,Ol,ms,Sd,Hl,Dd,Rn,sa,Td,ye,Nd,Cd,Mn,_s,Vn,we,Id,zn,_t,ea,Ll,gs,Od,Fl,Hd,Jn,la,Ld,je,Fd,Rd,Un,vs,Yn,oa,Bn,gt,na,Rl,$s,Md,Ml,Vd,Wn,be,zd,Gn,Q,Jd,Vl,Ud,Yd,zl,Bd,Wd,Qn,vt,ra,Jl,ys,Gd,Ul,Qd,Kn,K,Kd,qe,Xd,Zd,ke,tf,af,Xn,X,sf,Yl,ef,lf,Bl,of,nf,Zn,ws,tr,ia,rf,Wl,pf,df,ar,js,sr,Ee,ff,er,bs,lr,Pe,cf,or,qs,nr,xe,hf,rr,ks,ir,$t,pa,Gl,Es,uf,Ql,mf,pr,Ae,_f,dr,Ps,fr,da,gf,Kl,vf,$f,cr,xs,hr,fa,ur,Se,mr,yt,ca,Xl,As,yf,Zl,wf,_r,De,jf,gr,wt,ha,to,Ss,bf,ao,qf,vr,L,kf,Te,Ef,Pf,so,xf,Af,eo,Sf,Df,$r,ua,Tf,Ds,Nf,Cf,yr,Ts,wr,O,If,lo,Of,Hf,oo,Lf,Ff,no,Rf,Mf,Ne,Vf,zf,jr,jt,ma,ro,Ns,Jf,io,Uf,br,F,Yf,Ce,Bf,Wf,Cs,Gf,Qf,Ie,Kf,Xf,qr,_a,Zf,Oe,tc,ac,kr,Is,Er,Z,sc,po,ec,lc,He,oc,nc,Pr,Os,xr,Le,rc,Ar,Hs,Sr,bt,ga,fo,Ls,ic,co,pc,Dr,va,Tr,Fe,dc,Nr,Fs,Cr,$a,Ir,qt,ya,ho,Rs,fc,uo,cc,Or,tt,hc,mo,uc,mc,Re,_c,gc,Hr,Ms,Lr,kt,wa,_o,Vs,vc,go,$c,Fr,Me,yc,Rr,Ve,wc,Mr,at,vo,zs,jc,$o,bc,qc,kc,yo,Et,Ec,wo,Pc,xc,jo,Ac,Sc,Dc,bo,Js,Tc,ze,Nc,Cc,Vr,Us,zr,ja,Jr,ba,Ic,qo,Oc,Hc,Ur,Ys,Yr;return w=new A({}),Ha=new A({}),Fa=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("lhoestq/demo1")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;lhoestq/demo1&quot;</span>)`}}),Ra=new E({props:{code:`dataset = load_dataset(
  "lhoestq/custom_squad",
  revision="main"  # tag name, or branch name, or commit hash
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;lhoestq/custom_squad&quot;</span>,
<span class="hljs-meta">... </span>  revision=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-comment"># tag name, or branch name, or commit hash</span>
<span class="hljs-meta">... </span>)`}}),It=new Ws({props:{$$slots:{default:[Om]},$$scope:{ctx:D}}}),Ma=new E({props:{code:`data_files = {"train": "train.csv", "test": "test.csv"}
dataset = load_dataset("namespace/your_dataset_name", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;train.csv&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;test.csv&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;namespace/your_dataset_name&quot;</span>, data_files=data_files)`}}),Ot=new Ws({props:{warning:!0,$$slots:{default:[Hm]},$$scope:{ctx:D}}}),Va=new E({props:{code:`from datasets import load_dataset

c4_subset = load_dataset("allenai/c4", data_files="en/c4-train.0000*-of-01024.json.gz")

c4_subset = load_dataset("allenai/c4", data_dir="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load files that match the grep pattern</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=<span class="hljs-string">&quot;en/c4-train.0000*-of-01024.json.gz&quot;</span>)

<span class="hljs-comment"># load dataset from the en directory on the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_dir=<span class="hljs-string">&quot;en&quot;</span>)`}}),za=new E({props:{code:`data_files = {"validation": "en/c4-validation.*.json.gz"}
c4_validation = load_dataset("allenai/c4", data_files=data_files, split="validation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;en/c4-validation.*.json.gz&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_validation = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;validation&quot;</span>)`}}),Ja=new A({}),Ua=new E({props:{code:`dataset = load_dataset("path/to/local/loading_script/loading_script.py", split="train")
dataset = load_dataset("path/to/local/loading_script", split="train")  # equivalent because the file has the same name as the directory`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script/loading_script.py&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)  <span class="hljs-comment"># equivalent because the file has the same name as the directory</span>`}}),Ya=new A({}),Ba=new E({props:{code:"git clone https://huggingface.co/datasets/eli5",highlighted:'git <span class="hljs-built_in">clone</span> https://huggingface.co/datasets/eli5'}}),Wa=new E({props:{code:`from datasets import load_dataset
eli5 = load_dataset("path/to/local/eli5")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>eli5 = load_dataset(<span class="hljs-string">&quot;path/to/local/eli5&quot;</span>)`}}),Ga=new A({}),Qa=new A({}),Ka=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("csv", data_files="my_file.csv")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.csv&quot;</span>)`}}),Xa=new E({props:{code:'dataset = load_dataset("csv", data_files=["my_file_1.csv", "my_file_2.csv", "my_file_3.csv"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=[<span class="hljs-string">&quot;my_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_file_2.csv&quot;</span>, <span class="hljs-string">&quot;my_file_3.csv&quot;</span>])'}}),Za=new E({props:{code:'dataset = load_dataset("csv", data_files={"train": ["my_train_file_1.csv", "my_train_file_2.csv"], "test": "my_test_file.csv"})',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: [<span class="hljs-string">&quot;my_train_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_train_file_2.csv&quot;</span>], <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.csv&quot;</span>})'}}),ts=new E({props:{code:`base_url = "https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/"
dataset = load_dataset('csv', data_files={'train': base_url + 'train.csv', 'test': base_url + 'test.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: base_url + <span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: base_url + <span class="hljs-string">&#x27;test.csv&#x27;</span>})`}}),as=new E({props:{code:`url = "https://domain.org/train_data.zip"
data_files = {"train": url}
dataset = load_dataset("csv", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;https://domain.org/train_data.zip&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: url}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=data_files)`}}),ss=new A({}),es=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>)`}}),ls=new E({props:{code:`{"a": 1, "b": 2.0, "c": "foo", "d": false}
{"a": 4, "b": -5.5, "c": null, "d": true}`,highlighted:`<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-5.5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span>`}}),os=new E({props:{code:`
from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json", field="data")`,highlighted:`{<span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,
 <span class="hljs-string">&quot;data&quot;</span>: [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2.0</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>: false},
          {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;b&quot;</span>: -<span class="hljs-number">5.5</span>, <span class="hljs-string">&quot;c&quot;</span>: null, <span class="hljs-string">&quot;d&quot;</span>: true}]
}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),ns=new E({props:{code:`base_url = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
dataset = load_dataset("json", data_files={"train": base_url + "train-v1.1.json", "validation": base_url + "dev-v1.1.json"}, field="data")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>, <span class="hljs-string">&quot;validation&quot;</span>: base_url + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>}, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),rs=new A({}),is=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("parquet", data_files={'train': 'train.parquet', 'test': 'test.parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.parquet&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.parquet&#x27;</span>})`}}),ps=new E({props:{code:`base_url = "https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/"
data_files = {"train": base_url + "wikipedia-train.parquet"}
wiki = load_dataset("parquet", data_files=data_files, split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;wikipedia-train.parquet&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),ds=new A({}),fs=new A({}),cs=new E({props:{code:`from datasets import Dataset
my_dict = {"a": [1, 2, 3]}
dataset = Dataset.from_dict(my_dict)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_dict = {<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict(my_dict)`}}),hs=new A({}),us=new E({props:{code:`from datasets import Dataset
my_list = [{"a": 1}, {"a": 2}, {"a": 3}]
dataset = Dataset.from_list(my_list)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_list = [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>}, {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">2</span>}, {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">3</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_list(my_list)`}}),ms=new A({}),_s=new E({props:{code:`from datasets import Dataset
def my_gen():
    for i in range(1, 4):
        yield {"a": i}
dataset = Dataset.from_generator(my_dict)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):
<span class="hljs-meta">... </span>        <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;a&quot;</span>: i}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_generator(my_dict)`}}),gs=new A({}),vs=new E({props:{code:`from datasets import Dataset
import pandas as pd
df = pd.DataFrame({"a": [1, 2, 3]})
dataset = Dataset.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_pandas(df)`}}),oa=new Ws({props:{warning:!0,$$slots:{default:[Lm]},$$scope:{ctx:D}}}),$s=new A({}),ys=new A({}),ws=new So({props:{group1:{id:"stringapi",code:'train_test_ds = datasets.load_dataset("bookcorpus", split="train+test")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train+test&quot;</span>)'},group2:{id:"readinstruction",code:`ri = datasets.ReadInstruction("train") + datasets.ReadInstruction("test")
train_test_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;test&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),js=new So({props:{group1:{id:"stringapi",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split="train[10:20]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[10:20]&quot;</span>)'},group2:{id:"readinstruction",code:`train_10_20_ds = datasets.load_dataset("bookcorpu"', split=datasets.ReadInstruction("train", from_=10, to=20, unit="abs"))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpu&quot;</span><span class="hljs-string">&#x27;, split=datasets.ReadInstruction(&quot;train&quot;, from_=10, to=20, unit=&quot;abs&quot;))</span>'}}}),bs=new So({props:{group1:{id:"stringapi",code:'train_10pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]&quot;</span>)'},group2:{id:"readinstruction",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", to=10, unit="%"))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))'}}}),qs=new So({props:{group1:{id:"stringapi",code:'train_10_80pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]+train[-80%:]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]+train[-80%:]&quot;</span>)'},group2:{id:"readinstruction",code:`ri = (datasets.ReadInstruction("train", to=10, unit="%") + datasets.ReadInstruction("train", from_=-80, unit="%"))
train_10_80pct_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = (datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=-<span class="hljs-number">80</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),ks=new So({props:{group1:{id:"stringapi",code:`val_ds = datasets.load_dataset("bookcorpus", split=[f"train[{k}%:{k+10}%]" for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", split=[f"train[:{k}%]+train[{k+10}%:]" for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[<span class="hljs-subst">{k}</span>%:<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[:<span class="hljs-subst">{k}</span>%]+train[<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%:]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`},group2:{id:"readinstruction",code:`val_ds = datasets.load_dataset("bookcorpus", [datasets.ReadInstruction("train", from_=k, to=k+10, unit="%") for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", [(datasets.ReadInstruction("train", to=k, unit="%") + datasets.ReadInstruction("train", from_=k+10, unit="%")) for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [(datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=k, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>)) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}}),Es=new A({}),Ps=new E({props:{code:`train_50_52_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%]")
train_52_54_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%]")`,highlighted:`<span class="hljs-comment"># 19 records, from 500 (included) to 519 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%]&quot;</span>)
<span class="hljs-comment"># 20 records, from 519 (included) to 539 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%]&quot;</span>)`}}),xs=new E({props:{code:`train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", from_=50, to=52, unit="%", rounding="pct1_dropremainder"))
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train",from_=52, to=54, unit="%", rounding="pct1_dropremainder"))
train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%](pct1_dropremainder)")
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%](pct1_dropremainder)")`,highlighted:`<span class="hljs-comment"># 18 records, from 450 (included) to 468 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=<span class="hljs-number">50</span>, to=<span class="hljs-number">52</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># 18 records, from 468 (included) to 486 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>,from_=<span class="hljs-number">52</span>, to=<span class="hljs-number">54</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># Or equivalently:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%](pct1_dropremainder)&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%](pct1_dropremainder)&quot;</span>)`}}),fa=new Ws({props:{warning:!0,$$slots:{default:[Fm]},$$scope:{ctx:D}}}),As=new A({}),Ss=new A({}),Ts=new E({props:{code:'dataset = load_dataset("matinf", "summarization")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;matinf&quot;</span>, <span class="hljs-string">&quot;summarization&quot;</span>)
Downloading <span class="hljs-keyword">and</span> preparing dataset matinf/summarization (download: Unknown size, generated: <span class="hljs-number">246.89</span> MiB, post-processed: Unknown size, total: <span class="hljs-number">246.89</span> MiB) to /root/.cache/huggingface/datasets/matinf/summarization/<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>/82eee5e71c3ceaf20d909bca36ff237452b4e4ab195d3be7ee1c78b53e6f540e...
AssertionError: The dataset matinf <span class="hljs-keyword">with</span> config summarization requires manual data. 
Please follow the manual download instructions: To use MATINF you have to download it manually. Please fill this google form (https://forms.gle/nkH4LVE4iNQeDzsc9). You will receive a download link <span class="hljs-keyword">and</span> a password once you complete the form. Please extract <span class="hljs-built_in">all</span> files <span class="hljs-keyword">in</span> one folder <span class="hljs-keyword">and</span> load the dataset <span class="hljs-keyword">with</span>: *datasets.load_dataset(<span class="hljs-string">&#x27;matinf&#x27;</span>, data_dir=<span class="hljs-string">&#x27;path/to/folder/folder_name&#x27;</span>)*. 
Manual data can be loaded <span class="hljs-keyword">with</span> \`datasets.load_dataset(matinf, data_dir=<span class="hljs-string">&#x27;&lt;path/to/manual/data&gt;&#x27;</span>) `}}),Ns=new A({}),Is=new E({props:{code:`class_names = ["sadness", "joy", "love", "anger", "fear", "surprise"]
emotion_features = Features({'text': Value('string'), 'label': ClassLabel(names=class_names)})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>class_names = [<span class="hljs-string">&quot;sadness&quot;</span>, <span class="hljs-string">&quot;joy&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;anger&quot;</span>, <span class="hljs-string">&quot;fear&quot;</span>, <span class="hljs-string">&quot;surprise&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>emotion_features = Features({<span class="hljs-string">&#x27;text&#x27;</span>: Value(<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=class_names)})`}}),Os=new E({props:{code:"dataset = load_dataset('csv', data_files=file_dict, delimiter=';', column_names=['text', 'label'], features=emotion_features)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=file_dict, delimiter=<span class="hljs-string">&#x27;;&#x27;</span>, column_names=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>], features=emotion_features)'}}),Hs=new E({props:{code:"dataset['train'].features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;train&#x27;</span>].features
{<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">6</span>, names=[<span class="hljs-string">&#x27;sadness&#x27;</span>, <span class="hljs-string">&#x27;joy&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;anger&#x27;</span>, <span class="hljs-string">&#x27;fear&#x27;</span>, <span class="hljs-string">&#x27;surprise&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ls=new A({}),va=new Ws({props:{warning:!0,$$slots:{default:[Rm]},$$scope:{ctx:D}}}),Fs=new E({props:{code:`from datasets import load_metric
metric = load_metric('PATH/TO/MY/METRIC/SCRIPT')

# Example of typical usage
for batch in dataset:
    inputs, references = batch
    predictions = model(inputs)
    metric.add_batch(predictions=predictions, references=references)
score = metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;PATH/TO/MY/METRIC/SCRIPT&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Example of typical usage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> dataset:
<span class="hljs-meta">... </span>    inputs, references = batch
<span class="hljs-meta">... </span>    predictions = model(inputs)
<span class="hljs-meta">... </span>    metric.add_batch(predictions=predictions, references=references)
<span class="hljs-meta">&gt;&gt;&gt; </span>score = metric.compute()`}}),$a=new Ws({props:{$$slots:{default:[Mm]},$$scope:{ctx:D}}}),Rs=new A({}),Ms=new E({props:{code:`from datasets import load_metric
metric = load_metric('bleurt', name='bleurt-base-128')
metric = load_metric('bleurt', name='bleurt-base-512')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-128&#x27;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-512&#x27;</span>)</span>`}}),Vs=new A({}),Us=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=rank)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=rank)`}}),ja=new Ws({props:{$$slots:{default:[Vm]},$$scope:{ctx:D}}}),Ys=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=process_id, experiment_id="My_experiment_10")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=process_id, experiment_id=<span class="hljs-string">&quot;My_experiment_10&quot;</span>)`}}),{c(){h=l("meta"),k=d(),y=l("h1"),b=l("a"),q=l("span"),u(w.$$.fragment),j=d(),P=l("span"),et=r("Load"),Pt=d(),U=l("p"),lt=r("Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),xt=d(),Y=l("p"),B=r("This guide will show you how to load a dataset from:"),At=d(),S=l("ul"),V=l("li"),Pa=r("The Hub without a dataset loading script"),xa=d(),z=l("li"),Aa=r("Local loading script"),Sa=d(),H=l("li"),Da=r("Local files"),Ta=d(),J=l("li"),x=r("In-memory data"),Gs=d(),St=l("li"),Qs=r("Offline"),Ks=d(),Dt=l("li"),Xs=r("A specific slice of a split"),Na=d(),C=l("p"),Ci=r("For more details specific to loading other dataset modalities, take a look at the "),Ca=l("a"),Ii=r("load audio dataset guide"),Oi=r(", the "),Ia=l("a"),Hi=r("load image dataset guide"),Li=r(", or the "),Oa=l("a"),Fi=r("load text dataset guide"),Ri=r("."),Do=d(),Zs=l("a"),To=d(),ot=l("h2"),Tt=l("a"),Ze=l("span"),u(Ha.$$.fragment),Mi=d(),tl=l("span"),Vi=r("Hugging Face Hub"),No=d(),W=l("p"),zi=r("Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),te=l("a"),Ji=r("creating a dataset repository"),Ui=r(" and upload your data files. Now you can use the "),ae=l("a"),Yi=r("load_dataset()"),Bi=r(" function to load the dataset."),Co=d(),Nt=l("p"),Wi=r("For example, try loading the files from this "),La=l("a"),Gi=r("demo repository"),Qi=r(" by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),Io=d(),u(Fa.$$.fragment),Oo=d(),Ct=l("p"),Ki=r("Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),al=l("code"),Xi=r("revision"),Zi=r(" parameter to specify the dataset version you want to load:"),Ho=d(),u(Ra.$$.fragment),Lo=d(),u(It.$$.fragment),Fo=d(),T=l("p"),tp=r("A dataset without a loading script by default loads all the data into the "),sl=l("code"),ap=r("train"),sp=r(" split. Use the "),el=l("code"),ep=r("data_files"),lp=r(" parameter to map data files to splits like "),ll=l("code"),op=r("train"),np=r(", "),ol=l("code"),rp=r("validation"),ip=r(" and "),nl=l("code"),pp=r("test"),dp=r(":"),Ro=d(),u(Ma.$$.fragment),Mo=d(),u(Ot.$$.fragment),Vo=d(),G=l("p"),fp=r("You can also load a specific subset of the files with the "),rl=l("code"),cp=r("data_files"),hp=r(" or "),il=l("code"),up=r("data_dir"),mp=r(" parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),zo=d(),u(Va.$$.fragment),Jo=d(),Ht=l("p"),_p=r("The "),pl=l("code"),gp=r("split"),vp=r(" parameter can also map a data file to a specific split:"),Uo=d(),u(za.$$.fragment),Yo=d(),nt=l("h2"),Lt=l("a"),dl=l("span"),u(Ja.$$.fragment),$p=d(),fl=l("span"),yp=r("Local loading script"),Bo=d(),Ft=l("p"),wp=r("You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),se=l("a"),jp=r("load_dataset()"),bp=r(":"),Wo=d(),Rt=l("ul"),cl=l("li"),qp=r("The local path to the loading script file."),kp=d(),hl=l("li"),Ep=r("The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),Go=d(),u(Ua.$$.fragment),Qo=d(),rt=l("h3"),Mt=l("a"),ul=l("span"),u(Ya.$$.fragment),Pp=d(),ml=l("span"),xp=r("Edit loading script"),Ko=d(),ee=l("p"),Ap=r("You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),Xo=d(),u(Ba.$$.fragment),Zo=d(),Vt=l("p"),Sp=r("Make your edits to the loading script and then load it by passing its local path to "),le=l("a"),Dp=r("load_dataset()"),Tp=r(":"),tn=d(),u(Wa.$$.fragment),an=d(),it=l("h2"),zt=l("a"),_l=l("span"),u(Ga.$$.fragment),Np=d(),gl=l("span"),Cp=r("Local and remote files"),sn=d(),N=l("p"),Ip=r("Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),vl=l("code"),Op=r("csv"),Hp=r(", "),$l=l("code"),Lp=r("json"),Fp=r(", "),yl=l("code"),Rp=r("txt"),Mp=r(" or "),wl=l("code"),Vp=r("parquet"),zp=r(" file. The "),oe=l("a"),Jp=r("load_dataset()"),Up=r(" function can load each of these file types."),en=d(),pt=l("h3"),Jt=l("a"),jl=l("span"),u(Qa.$$.fragment),Yp=d(),bl=l("span"),Bp=r("CSV"),ln=d(),ne=l("p"),Wp=r("\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),on=d(),u(Ka.$$.fragment),nn=d(),re=l("p"),Gp=r("If you have more than one CSV file:"),rn=d(),u(Xa.$$.fragment),pn=d(),ie=l("p"),Qp=r("You can also map the training and test splits to specific CSV files:"),dn=d(),u(Za.$$.fragment),fn=d(),pe=l("p"),Kp=r("To load remote CSV files via HTTP, pass the URLs instead:"),cn=d(),u(ts.$$.fragment),hn=d(),de=l("p"),Xp=r("To load zipped CSV files:"),un=d(),u(as.$$.fragment),mn=d(),dt=l("h3"),Ut=l("a"),ql=l("span"),u(ss.$$.fragment),Zp=d(),kl=l("span"),td=r("JSON"),_n=d(),Yt=l("p"),ad=r("JSON files are loaded directly with "),fe=l("a"),sd=r("load_dataset()"),ed=r(" as shown below:"),gn=d(),u(es.$$.fragment),vn=d(),ce=l("p"),ld=r("JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),$n=d(),u(ls.$$.fragment),yn=d(),Bt=l("p"),od=r("Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),El=l("code"),nd=r("field"),rd=r(" argument as shown in the following:"),wn=d(),u(os.$$.fragment),jn=d(),he=l("p"),id=r("To load remote JSON files via HTTP, pass the URLs instead:"),bn=d(),u(ns.$$.fragment),qn=d(),ue=l("p"),pd=r("While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),kn=d(),ft=l("h3"),Wt=l("a"),Pl=l("span"),u(rs.$$.fragment),dd=d(),xl=l("span"),fd=r("Parquet"),En=d(),me=l("p"),cd=r("Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),Pn=d(),_e=l("p"),hd=r("To load a Parquet file:"),xn=d(),u(is.$$.fragment),An=d(),ge=l("p"),ud=r("To load remote Parquet files via HTTP, pass the URLs instead:"),Sn=d(),u(ps.$$.fragment),Dn=d(),ct=l("h2"),Gt=l("a"),Al=l("span"),u(ds.$$.fragment),md=d(),Sl=l("span"),_d=r("In-memory data"),Tn=d(),Qt=l("p"),gd=r("\u{1F917} Datasets will also allow you to create a "),ve=l("a"),vd=r("Dataset"),$d=r(" directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),Nn=d(),ht=l("h3"),Kt=l("a"),Dl=l("span"),u(fs.$$.fragment),yd=d(),Tl=l("span"),wd=r("Python dictionary"),Cn=d(),Xt=l("p"),jd=r("Load Python dictionaries with "),$e=l("a"),bd=r("from_dict()"),qd=r(":"),In=d(),u(cs.$$.fragment),On=d(),ut=l("h3"),Zt=l("a"),Nl=l("span"),u(hs.$$.fragment),kd=d(),Cl=l("span"),Ed=r("Python list of dictionaries"),Hn=d(),ta=l("p"),Pd=r("Load a list of Python dictionaries with "),Il=l("code"),xd=r("from_list()"),Ad=r(":"),Ln=d(),u(us.$$.fragment),Fn=d(),mt=l("h3"),aa=l("a"),Ol=l("span"),u(ms.$$.fragment),Sd=d(),Hl=l("span"),Dd=r("Python generator"),Rn=d(),sa=l("p"),Td=r("Create a dataset from a Python generator with "),ye=l("a"),Nd=r("from_generator()"),Cd=r(":"),Mn=d(),u(_s.$$.fragment),Vn=d(),we=l("p"),Id=r("This approach supports loading data larger than available memory."),zn=d(),_t=l("h3"),ea=l("a"),Ll=l("span"),u(gs.$$.fragment),Od=d(),Fl=l("span"),Hd=r("Pandas DataFrame"),Jn=d(),la=l("p"),Ld=r("Load Pandas DataFrames with "),je=l("a"),Fd=r("from_pandas()"),Rd=r(":"),Un=d(),u(vs.$$.fragment),Yn=d(),u(oa.$$.fragment),Bn=d(),gt=l("h2"),na=l("a"),Rl=l("span"),u($s.$$.fragment),Md=d(),Ml=l("span"),Vd=r("Offline"),Wn=d(),be=l("p"),zd=r("Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub or \u{1F917} Datasets GitHub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),Gn=d(),Q=l("p"),Jd=r("If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),Vl=l("code"),Ud=r("HF_DATASETS_OFFLINE"),Yd=r(" to "),zl=l("code"),Bd=r("1"),Wd=r(" to enable full offline mode."),Qn=d(),vt=l("h2"),ra=l("a"),Jl=l("span"),u(ys.$$.fragment),Gd=d(),Ul=l("span"),Qd=r("Slice splits"),Kn=d(),K=l("p"),Kd=r("You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),qe=l("a"),Xd=r("ReadInstruction"),Zd=r(" API. Strings are more compact and readable for simple cases, while "),ke=l("a"),tf=r("ReadInstruction"),af=r(" is easier to use with variable slicing parameters."),Xn=d(),X=l("p"),sf=r("Concatenate a "),Yl=l("code"),ef=r("train"),lf=r(" and "),Bl=l("code"),of=r("test"),nf=r(" split by:"),Zn=d(),u(ws.$$.fragment),tr=d(),ia=l("p"),rf=r("Select specific rows of the "),Wl=l("code"),pf=r("train"),df=r(" split:"),ar=d(),u(js.$$.fragment),sr=d(),Ee=l("p"),ff=r("Or select a percentage of a split with:"),er=d(),u(bs.$$.fragment),lr=d(),Pe=l("p"),cf=r("Select a combination of percentages from each split:"),or=d(),u(qs.$$.fragment),nr=d(),xe=l("p"),hf=r("Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),rr=d(),u(ks.$$.fragment),ir=d(),$t=l("h3"),pa=l("a"),Gl=l("span"),u(Es.$$.fragment),uf=d(),Ql=l("span"),mf=r("Percent slicing and rounding"),pr=d(),Ae=l("p"),_f=r("The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),dr=d(),u(Ps.$$.fragment),fr=d(),da=l("p"),gf=r("If you want equal sized splits, use "),Kl=l("code"),vf=r("pct1_dropremainder"),$f=r(" rounding instead. This treats the specified percentage boundaries as multiples of 1%."),cr=d(),u(xs.$$.fragment),hr=d(),u(fa.$$.fragment),ur=d(),Se=l("a"),mr=d(),yt=l("h2"),ca=l("a"),Xl=l("span"),u(As.$$.fragment),yf=d(),Zl=l("span"),wf=r("Troubleshooting"),_r=d(),De=l("p"),jf=r("Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),gr=d(),wt=l("h3"),ha=l("a"),to=l("span"),u(Ss.$$.fragment),bf=d(),ao=l("span"),qf=r("Manual download"),vr=d(),L=l("p"),kf=r("Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),Te=l("a"),Ef=r("load_dataset()"),Pf=r(" to throw an "),so=l("code"),xf=r("AssertionError"),Af=r(". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),eo=l("code"),Sf=r("data_dir"),Df=r(" argument to specify the path to the files you just downloaded."),$r=d(),ua=l("p"),Tf=r("For example, if you try to download a configuration from the "),Ds=l("a"),Nf=r("MATINF"),Cf=r(" dataset:"),yr=d(),u(Ts.$$.fragment),wr=d(),O=l("p"),If=r("If you\u2019ve already downloaded a dataset from the "),lo=l("em"),Of=r("Hub with a loading script"),Hf=r(" to your computer, then you need to pass an absolute path to the "),oo=l("code"),Lf=r("data_dir"),Ff=r(" or "),no=l("code"),Rf=r("data_files"),Mf=r(" parameter to load that dataset. Otherwise, if you pass a relative path, "),Ne=l("a"),Vf=r("load_dataset()"),zf=r(" will load the directory from the repository on the Hub instead of the local directory."),jr=d(),jt=l("h3"),ma=l("a"),ro=l("span"),u(Ns.$$.fragment),Jf=d(),io=l("span"),Uf=r("Specify features"),br=d(),F=l("p"),Yf=r("When you create a dataset from local files, the "),Ce=l("a"),Bf=r("Features"),Wf=r(" are automatically inferred by "),Cs=l("a"),Gf=r("Apache Arrow"),Qf=r(". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),Ie=l("a"),Kf=r("ClassLabel"),Xf=r(" feature."),qr=d(),_a=l("p"),Zf=r("Start by defining your own labels with the "),Oe=l("a"),tc=r("Features"),ac=r(" class:"),kr=d(),u(Is.$$.fragment),Er=d(),Z=l("p"),sc=r("Next, specify the "),po=l("code"),ec=r("features"),lc=r(" parameter in "),He=l("a"),oc=r("load_dataset()"),nc=r(" with the features you just created:"),Pr=d(),u(Os.$$.fragment),xr=d(),Le=l("p"),rc=r("Now when you look at your dataset features, you can see it uses the custom labels you defined:"),Ar=d(),u(Hs.$$.fragment),Sr=d(),bt=l("h2"),ga=l("a"),fo=l("span"),u(Ls.$$.fragment),ic=d(),co=l("span"),pc=r("Metrics"),Dr=d(),u(va.$$.fragment),Tr=d(),Fe=l("p"),dc=r("When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),Nr=d(),u(Fs.$$.fragment),Cr=d(),u($a.$$.fragment),Ir=d(),qt=l("h3"),ya=l("a"),ho=l("span"),u(Rs.$$.fragment),fc=d(),uo=l("span"),cc=r("Load configurations"),Or=d(),tt=l("p"),hc=r("It is possible for a metric to have different configurations. The configurations are stored in the "),mo=l("code"),uc=r("config_name"),mc=r(" parameter in "),Re=l("a"),_c=r("MetricInfo"),gc=r(" attribute. When you load a metric, provide the configuration name as shown in the following:"),Hr=d(),u(Ms.$$.fragment),Lr=d(),kt=l("h3"),wa=l("a"),_o=l("span"),u(Vs.$$.fragment),vc=d(),go=l("span"),$c=r("Distributed setup"),Fr=d(),Me=l("p"),yc=r("When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),Rr=d(),Ve=l("p"),wc=r("For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),Mr=d(),at=l("ol"),vo=l("li"),zs=l("p"),jc=r("Define the total number of processes with the "),$o=l("code"),bc=r("num_process"),qc=r(" argument."),kc=d(),yo=l("li"),Et=l("p"),Ec=r("Set the process "),wo=l("code"),Pc=r("rank"),xc=r(" as an integer between zero and "),jo=l("code"),Ac=r("num_process - 1"),Sc=r("."),Dc=d(),bo=l("li"),Js=l("p"),Tc=r("Load your metric with "),ze=l("a"),Nc=r("load_metric()"),Cc=r(" with these arguments:"),Vr=d(),u(Us.$$.fragment),zr=d(),u(ja.$$.fragment),Jr=d(),ba=l("p"),Ic=r("In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),qo=l("code"),Oc=r("experiment_id"),Hc=r(" to distinguish the separate evaluations:"),Ur=d(),u(Ys.$$.fragment),this.h()},l(t){const e=Cm('[data-svelte="svelte-1phssyn"]',document.head);h=o(e,"META",{name:!0,content:!0}),e.forEach(a),k=f(t),y=o(t,"H1",{class:!0});var Bs=n(y);b=o(Bs,"A",{id:!0,class:!0,href:!0});var ko=n(b);q=o(ko,"SPAN",{});var Eo=n(q);m(w.$$.fragment,Eo),Eo.forEach(a),ko.forEach(a),j=f(Bs),P=o(Bs,"SPAN",{});var Po=n(P);et=i(Po,"Load"),Po.forEach(a),Bs.forEach(a),Pt=f(t),U=o(t,"P",{});var xo=n(U);lt=i(xo,"Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),xo.forEach(a),xt=f(t),Y=o(t,"P",{});var Ao=n(Y);B=i(Ao,"This guide will show you how to load a dataset from:"),Ao.forEach(a),At=f(t),S=o(t,"UL",{});var I=n(S);V=o(I,"LI",{});var Lc=n(V);Pa=i(Lc,"The Hub without a dataset loading script"),Lc.forEach(a),xa=f(I),z=o(I,"LI",{});var Fc=n(z);Aa=i(Fc,"Local loading script"),Fc.forEach(a),Sa=f(I),H=o(I,"LI",{});var Rc=n(H);Da=i(Rc,"Local files"),Rc.forEach(a),Ta=f(I),J=o(I,"LI",{});var Mc=n(J);x=i(Mc,"In-memory data"),Mc.forEach(a),Gs=f(I),St=o(I,"LI",{});var Vc=n(St);Qs=i(Vc,"Offline"),Vc.forEach(a),Ks=f(I),Dt=o(I,"LI",{});var zc=n(Dt);Xs=i(zc,"A specific slice of a split"),zc.forEach(a),I.forEach(a),Na=f(t),C=o(t,"P",{});var qa=n(C);Ci=i(qa,"For more details specific to loading other dataset modalities, take a look at the "),Ca=o(qa,"A",{class:!0,href:!0});var Jc=n(Ca);Ii=i(Jc,"load audio dataset guide"),Jc.forEach(a),Oi=i(qa,", the "),Ia=o(qa,"A",{class:!0,href:!0});var Uc=n(Ia);Hi=i(Uc,"load image dataset guide"),Uc.forEach(a),Li=i(qa,", or the "),Oa=o(qa,"A",{class:!0,href:!0});var Yc=n(Oa);Fi=i(Yc,"load text dataset guide"),Yc.forEach(a),Ri=i(qa,"."),qa.forEach(a),Do=f(t),Zs=o(t,"A",{id:!0}),n(Zs).forEach(a),To=f(t),ot=o(t,"H2",{class:!0});var Br=n(ot);Tt=o(Br,"A",{id:!0,class:!0,href:!0});var Bc=n(Tt);Ze=o(Bc,"SPAN",{});var Wc=n(Ze);m(Ha.$$.fragment,Wc),Wc.forEach(a),Bc.forEach(a),Mi=f(Br),tl=o(Br,"SPAN",{});var Gc=n(tl);Vi=i(Gc,"Hugging Face Hub"),Gc.forEach(a),Br.forEach(a),No=f(t),W=o(t,"P",{});var Je=n(W);zi=i(Je,"Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),te=o(Je,"A",{href:!0});var Qc=n(te);Ji=i(Qc,"creating a dataset repository"),Qc.forEach(a),Ui=i(Je," and upload your data files. Now you can use the "),ae=o(Je,"A",{href:!0});var Kc=n(ae);Yi=i(Kc,"load_dataset()"),Kc.forEach(a),Bi=i(Je," function to load the dataset."),Je.forEach(a),Co=f(t),Nt=o(t,"P",{});var Wr=n(Nt);Wi=i(Wr,"For example, try loading the files from this "),La=o(Wr,"A",{href:!0,rel:!0});var Xc=n(La);Gi=i(Xc,"demo repository"),Xc.forEach(a),Qi=i(Wr," by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),Wr.forEach(a),Io=f(t),m(Fa.$$.fragment,t),Oo=f(t),Ct=o(t,"P",{});var Gr=n(Ct);Ki=i(Gr,"Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),al=o(Gr,"CODE",{});var Zc=n(al);Xi=i(Zc,"revision"),Zc.forEach(a),Zi=i(Gr," parameter to specify the dataset version you want to load:"),Gr.forEach(a),Ho=f(t),m(Ra.$$.fragment,t),Lo=f(t),m(It.$$.fragment,t),Fo=f(t),T=o(t,"P",{});var R=n(T);tp=i(R,"A dataset without a loading script by default loads all the data into the "),sl=o(R,"CODE",{});var th=n(sl);ap=i(th,"train"),th.forEach(a),sp=i(R," split. Use the "),el=o(R,"CODE",{});var ah=n(el);ep=i(ah,"data_files"),ah.forEach(a),lp=i(R," parameter to map data files to splits like "),ll=o(R,"CODE",{});var sh=n(ll);op=i(sh,"train"),sh.forEach(a),np=i(R,", "),ol=o(R,"CODE",{});var eh=n(ol);rp=i(eh,"validation"),eh.forEach(a),ip=i(R," and "),nl=o(R,"CODE",{});var lh=n(nl);pp=i(lh,"test"),lh.forEach(a),dp=i(R,":"),R.forEach(a),Ro=f(t),m(Ma.$$.fragment,t),Mo=f(t),m(Ot.$$.fragment,t),Vo=f(t),G=o(t,"P",{});var Ue=n(G);fp=i(Ue,"You can also load a specific subset of the files with the "),rl=o(Ue,"CODE",{});var oh=n(rl);cp=i(oh,"data_files"),oh.forEach(a),hp=i(Ue," or "),il=o(Ue,"CODE",{});var nh=n(il);up=i(nh,"data_dir"),nh.forEach(a),mp=i(Ue," parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),Ue.forEach(a),zo=f(t),m(Va.$$.fragment,t),Jo=f(t),Ht=o(t,"P",{});var Qr=n(Ht);_p=i(Qr,"The "),pl=o(Qr,"CODE",{});var rh=n(pl);gp=i(rh,"split"),rh.forEach(a),vp=i(Qr," parameter can also map a data file to a specific split:"),Qr.forEach(a),Uo=f(t),m(za.$$.fragment,t),Yo=f(t),nt=o(t,"H2",{class:!0});var Kr=n(nt);Lt=o(Kr,"A",{id:!0,class:!0,href:!0});var ih=n(Lt);dl=o(ih,"SPAN",{});var ph=n(dl);m(Ja.$$.fragment,ph),ph.forEach(a),ih.forEach(a),$p=f(Kr),fl=o(Kr,"SPAN",{});var dh=n(fl);yp=i(dh,"Local loading script"),dh.forEach(a),Kr.forEach(a),Bo=f(t),Ft=o(t,"P",{});var Xr=n(Ft);wp=i(Xr,"You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),se=o(Xr,"A",{href:!0});var fh=n(se);jp=i(fh,"load_dataset()"),fh.forEach(a),bp=i(Xr,":"),Xr.forEach(a),Wo=f(t),Rt=o(t,"UL",{});var Zr=n(Rt);cl=o(Zr,"LI",{});var ch=n(cl);qp=i(ch,"The local path to the loading script file."),ch.forEach(a),kp=f(Zr),hl=o(Zr,"LI",{});var hh=n(hl);Ep=i(hh,"The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),hh.forEach(a),Zr.forEach(a),Go=f(t),m(Ua.$$.fragment,t),Qo=f(t),rt=o(t,"H3",{class:!0});var ti=n(rt);Mt=o(ti,"A",{id:!0,class:!0,href:!0});var uh=n(Mt);ul=o(uh,"SPAN",{});var mh=n(ul);m(Ya.$$.fragment,mh),mh.forEach(a),uh.forEach(a),Pp=f(ti),ml=o(ti,"SPAN",{});var _h=n(ml);xp=i(_h,"Edit loading script"),_h.forEach(a),ti.forEach(a),Ko=f(t),ee=o(t,"P",{});var gh=n(ee);Ap=i(gh,"You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),gh.forEach(a),Xo=f(t),m(Ba.$$.fragment,t),Zo=f(t),Vt=o(t,"P",{});var ai=n(Vt);Sp=i(ai,"Make your edits to the loading script and then load it by passing its local path to "),le=o(ai,"A",{href:!0});var vh=n(le);Dp=i(vh,"load_dataset()"),vh.forEach(a),Tp=i(ai,":"),ai.forEach(a),tn=f(t),m(Wa.$$.fragment,t),an=f(t),it=o(t,"H2",{class:!0});var si=n(it);zt=o(si,"A",{id:!0,class:!0,href:!0});var $h=n(zt);_l=o($h,"SPAN",{});var yh=n(_l);m(Ga.$$.fragment,yh),yh.forEach(a),$h.forEach(a),Np=f(si),gl=o(si,"SPAN",{});var wh=n(gl);Cp=i(wh,"Local and remote files"),wh.forEach(a),si.forEach(a),sn=f(t),N=o(t,"P",{});var M=n(N);Ip=i(M,"Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),vl=o(M,"CODE",{});var jh=n(vl);Op=i(jh,"csv"),jh.forEach(a),Hp=i(M,", "),$l=o(M,"CODE",{});var bh=n($l);Lp=i(bh,"json"),bh.forEach(a),Fp=i(M,", "),yl=o(M,"CODE",{});var qh=n(yl);Rp=i(qh,"txt"),qh.forEach(a),Mp=i(M," or "),wl=o(M,"CODE",{});var kh=n(wl);Vp=i(kh,"parquet"),kh.forEach(a),zp=i(M," file. The "),oe=o(M,"A",{href:!0});var Eh=n(oe);Jp=i(Eh,"load_dataset()"),Eh.forEach(a),Up=i(M," function can load each of these file types."),M.forEach(a),en=f(t),pt=o(t,"H3",{class:!0});var ei=n(pt);Jt=o(ei,"A",{id:!0,class:!0,href:!0});var Ph=n(Jt);jl=o(Ph,"SPAN",{});var xh=n(jl);m(Qa.$$.fragment,xh),xh.forEach(a),Ph.forEach(a),Yp=f(ei),bl=o(ei,"SPAN",{});var Ah=n(bl);Bp=i(Ah,"CSV"),Ah.forEach(a),ei.forEach(a),ln=f(t),ne=o(t,"P",{});var Sh=n(ne);Wp=i(Sh,"\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),Sh.forEach(a),on=f(t),m(Ka.$$.fragment,t),nn=f(t),re=o(t,"P",{});var Dh=n(re);Gp=i(Dh,"If you have more than one CSV file:"),Dh.forEach(a),rn=f(t),m(Xa.$$.fragment,t),pn=f(t),ie=o(t,"P",{});var Th=n(ie);Qp=i(Th,"You can also map the training and test splits to specific CSV files:"),Th.forEach(a),dn=f(t),m(Za.$$.fragment,t),fn=f(t),pe=o(t,"P",{});var Nh=n(pe);Kp=i(Nh,"To load remote CSV files via HTTP, pass the URLs instead:"),Nh.forEach(a),cn=f(t),m(ts.$$.fragment,t),hn=f(t),de=o(t,"P",{});var Ch=n(de);Xp=i(Ch,"To load zipped CSV files:"),Ch.forEach(a),un=f(t),m(as.$$.fragment,t),mn=f(t),dt=o(t,"H3",{class:!0});var li=n(dt);Ut=o(li,"A",{id:!0,class:!0,href:!0});var Ih=n(Ut);ql=o(Ih,"SPAN",{});var Oh=n(ql);m(ss.$$.fragment,Oh),Oh.forEach(a),Ih.forEach(a),Zp=f(li),kl=o(li,"SPAN",{});var Hh=n(kl);td=i(Hh,"JSON"),Hh.forEach(a),li.forEach(a),_n=f(t),Yt=o(t,"P",{});var oi=n(Yt);ad=i(oi,"JSON files are loaded directly with "),fe=o(oi,"A",{href:!0});var Lh=n(fe);sd=i(Lh,"load_dataset()"),Lh.forEach(a),ed=i(oi," as shown below:"),oi.forEach(a),gn=f(t),m(es.$$.fragment,t),vn=f(t),ce=o(t,"P",{});var Fh=n(ce);ld=i(Fh,"JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),Fh.forEach(a),$n=f(t),m(ls.$$.fragment,t),yn=f(t),Bt=o(t,"P",{});var ni=n(Bt);od=i(ni,"Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),El=o(ni,"CODE",{});var Rh=n(El);nd=i(Rh,"field"),Rh.forEach(a),rd=i(ni," argument as shown in the following:"),ni.forEach(a),wn=f(t),m(os.$$.fragment,t),jn=f(t),he=o(t,"P",{});var Mh=n(he);id=i(Mh,"To load remote JSON files via HTTP, pass the URLs instead:"),Mh.forEach(a),bn=f(t),m(ns.$$.fragment,t),qn=f(t),ue=o(t,"P",{});var Vh=n(ue);pd=i(Vh,"While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),Vh.forEach(a),kn=f(t),ft=o(t,"H3",{class:!0});var ri=n(ft);Wt=o(ri,"A",{id:!0,class:!0,href:!0});var zh=n(Wt);Pl=o(zh,"SPAN",{});var Jh=n(Pl);m(rs.$$.fragment,Jh),Jh.forEach(a),zh.forEach(a),dd=f(ri),xl=o(ri,"SPAN",{});var Uh=n(xl);fd=i(Uh,"Parquet"),Uh.forEach(a),ri.forEach(a),En=f(t),me=o(t,"P",{});var Yh=n(me);cd=i(Yh,"Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),Yh.forEach(a),Pn=f(t),_e=o(t,"P",{});var Bh=n(_e);hd=i(Bh,"To load a Parquet file:"),Bh.forEach(a),xn=f(t),m(is.$$.fragment,t),An=f(t),ge=o(t,"P",{});var Wh=n(ge);ud=i(Wh,"To load remote Parquet files via HTTP, pass the URLs instead:"),Wh.forEach(a),Sn=f(t),m(ps.$$.fragment,t),Dn=f(t),ct=o(t,"H2",{class:!0});var ii=n(ct);Gt=o(ii,"A",{id:!0,class:!0,href:!0});var Gh=n(Gt);Al=o(Gh,"SPAN",{});var Qh=n(Al);m(ds.$$.fragment,Qh),Qh.forEach(a),Gh.forEach(a),md=f(ii),Sl=o(ii,"SPAN",{});var Kh=n(Sl);_d=i(Kh,"In-memory data"),Kh.forEach(a),ii.forEach(a),Tn=f(t),Qt=o(t,"P",{});var pi=n(Qt);gd=i(pi,"\u{1F917} Datasets will also allow you to create a "),ve=o(pi,"A",{href:!0});var Xh=n(ve);vd=i(Xh,"Dataset"),Xh.forEach(a),$d=i(pi," directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),pi.forEach(a),Nn=f(t),ht=o(t,"H3",{class:!0});var di=n(ht);Kt=o(di,"A",{id:!0,class:!0,href:!0});var Zh=n(Kt);Dl=o(Zh,"SPAN",{});var tu=n(Dl);m(fs.$$.fragment,tu),tu.forEach(a),Zh.forEach(a),yd=f(di),Tl=o(di,"SPAN",{});var au=n(Tl);wd=i(au,"Python dictionary"),au.forEach(a),di.forEach(a),Cn=f(t),Xt=o(t,"P",{});var fi=n(Xt);jd=i(fi,"Load Python dictionaries with "),$e=o(fi,"A",{href:!0});var su=n($e);bd=i(su,"from_dict()"),su.forEach(a),qd=i(fi,":"),fi.forEach(a),In=f(t),m(cs.$$.fragment,t),On=f(t),ut=o(t,"H3",{class:!0});var ci=n(ut);Zt=o(ci,"A",{id:!0,class:!0,href:!0});var eu=n(Zt);Nl=o(eu,"SPAN",{});var lu=n(Nl);m(hs.$$.fragment,lu),lu.forEach(a),eu.forEach(a),kd=f(ci),Cl=o(ci,"SPAN",{});var ou=n(Cl);Ed=i(ou,"Python list of dictionaries"),ou.forEach(a),ci.forEach(a),Hn=f(t),ta=o(t,"P",{});var hi=n(ta);Pd=i(hi,"Load a list of Python dictionaries with "),Il=o(hi,"CODE",{});var nu=n(Il);xd=i(nu,"from_list()"),nu.forEach(a),Ad=i(hi,":"),hi.forEach(a),Ln=f(t),m(us.$$.fragment,t),Fn=f(t),mt=o(t,"H3",{class:!0});var ui=n(mt);aa=o(ui,"A",{id:!0,class:!0,href:!0});var ru=n(aa);Ol=o(ru,"SPAN",{});var iu=n(Ol);m(ms.$$.fragment,iu),iu.forEach(a),ru.forEach(a),Sd=f(ui),Hl=o(ui,"SPAN",{});var pu=n(Hl);Dd=i(pu,"Python generator"),pu.forEach(a),ui.forEach(a),Rn=f(t),sa=o(t,"P",{});var mi=n(sa);Td=i(mi,"Create a dataset from a Python generator with "),ye=o(mi,"A",{href:!0});var du=n(ye);Nd=i(du,"from_generator()"),du.forEach(a),Cd=i(mi,":"),mi.forEach(a),Mn=f(t),m(_s.$$.fragment,t),Vn=f(t),we=o(t,"P",{});var fu=n(we);Id=i(fu,"This approach supports loading data larger than available memory."),fu.forEach(a),zn=f(t),_t=o(t,"H3",{class:!0});var _i=n(_t);ea=o(_i,"A",{id:!0,class:!0,href:!0});var cu=n(ea);Ll=o(cu,"SPAN",{});var hu=n(Ll);m(gs.$$.fragment,hu),hu.forEach(a),cu.forEach(a),Od=f(_i),Fl=o(_i,"SPAN",{});var uu=n(Fl);Hd=i(uu,"Pandas DataFrame"),uu.forEach(a),_i.forEach(a),Jn=f(t),la=o(t,"P",{});var gi=n(la);Ld=i(gi,"Load Pandas DataFrames with "),je=o(gi,"A",{href:!0});var mu=n(je);Fd=i(mu,"from_pandas()"),mu.forEach(a),Rd=i(gi,":"),gi.forEach(a),Un=f(t),m(vs.$$.fragment,t),Yn=f(t),m(oa.$$.fragment,t),Bn=f(t),gt=o(t,"H2",{class:!0});var vi=n(gt);na=o(vi,"A",{id:!0,class:!0,href:!0});var _u=n(na);Rl=o(_u,"SPAN",{});var gu=n(Rl);m($s.$$.fragment,gu),gu.forEach(a),_u.forEach(a),Md=f(vi),Ml=o(vi,"SPAN",{});var vu=n(Ml);Vd=i(vu,"Offline"),vu.forEach(a),vi.forEach(a),Wn=f(t),be=o(t,"P",{});var $u=n(be);zd=i($u,"Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub or \u{1F917} Datasets GitHub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),$u.forEach(a),Gn=f(t),Q=o(t,"P",{});var Ye=n(Q);Jd=i(Ye,"If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),Vl=o(Ye,"CODE",{});var yu=n(Vl);Ud=i(yu,"HF_DATASETS_OFFLINE"),yu.forEach(a),Yd=i(Ye," to "),zl=o(Ye,"CODE",{});var wu=n(zl);Bd=i(wu,"1"),wu.forEach(a),Wd=i(Ye," to enable full offline mode."),Ye.forEach(a),Qn=f(t),vt=o(t,"H2",{class:!0});var $i=n(vt);ra=o($i,"A",{id:!0,class:!0,href:!0});var ju=n(ra);Jl=o(ju,"SPAN",{});var bu=n(Jl);m(ys.$$.fragment,bu),bu.forEach(a),ju.forEach(a),Gd=f($i),Ul=o($i,"SPAN",{});var qu=n(Ul);Qd=i(qu,"Slice splits"),qu.forEach(a),$i.forEach(a),Kn=f(t),K=o(t,"P",{});var Be=n(K);Kd=i(Be,"You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),qe=o(Be,"A",{href:!0});var ku=n(qe);Xd=i(ku,"ReadInstruction"),ku.forEach(a),Zd=i(Be," API. Strings are more compact and readable for simple cases, while "),ke=o(Be,"A",{href:!0});var Eu=n(ke);tf=i(Eu,"ReadInstruction"),Eu.forEach(a),af=i(Be," is easier to use with variable slicing parameters."),Be.forEach(a),Xn=f(t),X=o(t,"P",{});var We=n(X);sf=i(We,"Concatenate a "),Yl=o(We,"CODE",{});var Pu=n(Yl);ef=i(Pu,"train"),Pu.forEach(a),lf=i(We," and "),Bl=o(We,"CODE",{});var xu=n(Bl);of=i(xu,"test"),xu.forEach(a),nf=i(We," split by:"),We.forEach(a),Zn=f(t),m(ws.$$.fragment,t),tr=f(t),ia=o(t,"P",{});var yi=n(ia);rf=i(yi,"Select specific rows of the "),Wl=o(yi,"CODE",{});var Au=n(Wl);pf=i(Au,"train"),Au.forEach(a),df=i(yi," split:"),yi.forEach(a),ar=f(t),m(js.$$.fragment,t),sr=f(t),Ee=o(t,"P",{});var Su=n(Ee);ff=i(Su,"Or select a percentage of a split with:"),Su.forEach(a),er=f(t),m(bs.$$.fragment,t),lr=f(t),Pe=o(t,"P",{});var Du=n(Pe);cf=i(Du,"Select a combination of percentages from each split:"),Du.forEach(a),or=f(t),m(qs.$$.fragment,t),nr=f(t),xe=o(t,"P",{});var Tu=n(xe);hf=i(Tu,"Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),Tu.forEach(a),rr=f(t),m(ks.$$.fragment,t),ir=f(t),$t=o(t,"H3",{class:!0});var wi=n($t);pa=o(wi,"A",{id:!0,class:!0,href:!0});var Nu=n(pa);Gl=o(Nu,"SPAN",{});var Cu=n(Gl);m(Es.$$.fragment,Cu),Cu.forEach(a),Nu.forEach(a),uf=f(wi),Ql=o(wi,"SPAN",{});var Iu=n(Ql);mf=i(Iu,"Percent slicing and rounding"),Iu.forEach(a),wi.forEach(a),pr=f(t),Ae=o(t,"P",{});var Ou=n(Ae);_f=i(Ou,"The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),Ou.forEach(a),dr=f(t),m(Ps.$$.fragment,t),fr=f(t),da=o(t,"P",{});var ji=n(da);gf=i(ji,"If you want equal sized splits, use "),Kl=o(ji,"CODE",{});var Hu=n(Kl);vf=i(Hu,"pct1_dropremainder"),Hu.forEach(a),$f=i(ji," rounding instead. This treats the specified percentage boundaries as multiples of 1%."),ji.forEach(a),cr=f(t),m(xs.$$.fragment,t),hr=f(t),m(fa.$$.fragment,t),ur=f(t),Se=o(t,"A",{id:!0}),n(Se).forEach(a),mr=f(t),yt=o(t,"H2",{class:!0});var bi=n(yt);ca=o(bi,"A",{id:!0,class:!0,href:!0});var Lu=n(ca);Xl=o(Lu,"SPAN",{});var Fu=n(Xl);m(As.$$.fragment,Fu),Fu.forEach(a),Lu.forEach(a),yf=f(bi),Zl=o(bi,"SPAN",{});var Ru=n(Zl);wf=i(Ru,"Troubleshooting"),Ru.forEach(a),bi.forEach(a),_r=f(t),De=o(t,"P",{});var Mu=n(De);jf=i(Mu,"Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),Mu.forEach(a),gr=f(t),wt=o(t,"H3",{class:!0});var qi=n(wt);ha=o(qi,"A",{id:!0,class:!0,href:!0});var Vu=n(ha);to=o(Vu,"SPAN",{});var zu=n(to);m(Ss.$$.fragment,zu),zu.forEach(a),Vu.forEach(a),bf=f(qi),ao=o(qi,"SPAN",{});var Ju=n(ao);qf=i(Ju,"Manual download"),Ju.forEach(a),qi.forEach(a),vr=f(t),L=o(t,"P",{});var ka=n(L);kf=i(ka,"Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),Te=o(ka,"A",{href:!0});var Uu=n(Te);Ef=i(Uu,"load_dataset()"),Uu.forEach(a),Pf=i(ka," to throw an "),so=o(ka,"CODE",{});var Yu=n(so);xf=i(Yu,"AssertionError"),Yu.forEach(a),Af=i(ka,". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),eo=o(ka,"CODE",{});var Bu=n(eo);Sf=i(Bu,"data_dir"),Bu.forEach(a),Df=i(ka," argument to specify the path to the files you just downloaded."),ka.forEach(a),$r=f(t),ua=o(t,"P",{});var ki=n(ua);Tf=i(ki,"For example, if you try to download a configuration from the "),Ds=o(ki,"A",{href:!0,rel:!0});var Wu=n(Ds);Nf=i(Wu,"MATINF"),Wu.forEach(a),Cf=i(ki," dataset:"),ki.forEach(a),yr=f(t),m(Ts.$$.fragment,t),wr=f(t),O=o(t,"P",{});var st=n(O);If=i(st,"If you\u2019ve already downloaded a dataset from the "),lo=o(st,"EM",{});var Gu=n(lo);Of=i(Gu,"Hub with a loading script"),Gu.forEach(a),Hf=i(st," to your computer, then you need to pass an absolute path to the "),oo=o(st,"CODE",{});var Qu=n(oo);Lf=i(Qu,"data_dir"),Qu.forEach(a),Ff=i(st," or "),no=o(st,"CODE",{});var Ku=n(no);Rf=i(Ku,"data_files"),Ku.forEach(a),Mf=i(st," parameter to load that dataset. Otherwise, if you pass a relative path, "),Ne=o(st,"A",{href:!0});var Xu=n(Ne);Vf=i(Xu,"load_dataset()"),Xu.forEach(a),zf=i(st," will load the directory from the repository on the Hub instead of the local directory."),st.forEach(a),jr=f(t),jt=o(t,"H3",{class:!0});var Ei=n(jt);ma=o(Ei,"A",{id:!0,class:!0,href:!0});var Zu=n(ma);ro=o(Zu,"SPAN",{});var tm=n(ro);m(Ns.$$.fragment,tm),tm.forEach(a),Zu.forEach(a),Jf=f(Ei),io=o(Ei,"SPAN",{});var am=n(io);Uf=i(am,"Specify features"),am.forEach(a),Ei.forEach(a),br=f(t),F=o(t,"P",{});var Ea=n(F);Yf=i(Ea,"When you create a dataset from local files, the "),Ce=o(Ea,"A",{href:!0});var sm=n(Ce);Bf=i(sm,"Features"),sm.forEach(a),Wf=i(Ea," are automatically inferred by "),Cs=o(Ea,"A",{href:!0,rel:!0});var em=n(Cs);Gf=i(em,"Apache Arrow"),em.forEach(a),Qf=i(Ea,". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),Ie=o(Ea,"A",{href:!0});var lm=n(Ie);Kf=i(lm,"ClassLabel"),lm.forEach(a),Xf=i(Ea," feature."),Ea.forEach(a),qr=f(t),_a=o(t,"P",{});var Pi=n(_a);Zf=i(Pi,"Start by defining your own labels with the "),Oe=o(Pi,"A",{href:!0});var om=n(Oe);tc=i(om,"Features"),om.forEach(a),ac=i(Pi," class:"),Pi.forEach(a),kr=f(t),m(Is.$$.fragment,t),Er=f(t),Z=o(t,"P",{});var Ge=n(Z);sc=i(Ge,"Next, specify the "),po=o(Ge,"CODE",{});var nm=n(po);ec=i(nm,"features"),nm.forEach(a),lc=i(Ge," parameter in "),He=o(Ge,"A",{href:!0});var rm=n(He);oc=i(rm,"load_dataset()"),rm.forEach(a),nc=i(Ge," with the features you just created:"),Ge.forEach(a),Pr=f(t),m(Os.$$.fragment,t),xr=f(t),Le=o(t,"P",{});var im=n(Le);rc=i(im,"Now when you look at your dataset features, you can see it uses the custom labels you defined:"),im.forEach(a),Ar=f(t),m(Hs.$$.fragment,t),Sr=f(t),bt=o(t,"H2",{class:!0});var xi=n(bt);ga=o(xi,"A",{id:!0,class:!0,href:!0});var pm=n(ga);fo=o(pm,"SPAN",{});var dm=n(fo);m(Ls.$$.fragment,dm),dm.forEach(a),pm.forEach(a),ic=f(xi),co=o(xi,"SPAN",{});var fm=n(co);pc=i(fm,"Metrics"),fm.forEach(a),xi.forEach(a),Dr=f(t),m(va.$$.fragment,t),Tr=f(t),Fe=o(t,"P",{});var cm=n(Fe);dc=i(cm,"When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),cm.forEach(a),Nr=f(t),m(Fs.$$.fragment,t),Cr=f(t),m($a.$$.fragment,t),Ir=f(t),qt=o(t,"H3",{class:!0});var Ai=n(qt);ya=o(Ai,"A",{id:!0,class:!0,href:!0});var hm=n(ya);ho=o(hm,"SPAN",{});var um=n(ho);m(Rs.$$.fragment,um),um.forEach(a),hm.forEach(a),fc=f(Ai),uo=o(Ai,"SPAN",{});var mm=n(uo);cc=i(mm,"Load configurations"),mm.forEach(a),Ai.forEach(a),Or=f(t),tt=o(t,"P",{});var Qe=n(tt);hc=i(Qe,"It is possible for a metric to have different configurations. The configurations are stored in the "),mo=o(Qe,"CODE",{});var _m=n(mo);uc=i(_m,"config_name"),_m.forEach(a),mc=i(Qe," parameter in "),Re=o(Qe,"A",{href:!0});var gm=n(Re);_c=i(gm,"MetricInfo"),gm.forEach(a),gc=i(Qe," attribute. When you load a metric, provide the configuration name as shown in the following:"),Qe.forEach(a),Hr=f(t),m(Ms.$$.fragment,t),Lr=f(t),kt=o(t,"H3",{class:!0});var Si=n(kt);wa=o(Si,"A",{id:!0,class:!0,href:!0});var vm=n(wa);_o=o(vm,"SPAN",{});var $m=n(_o);m(Vs.$$.fragment,$m),$m.forEach(a),vm.forEach(a),vc=f(Si),go=o(Si,"SPAN",{});var ym=n(go);$c=i(ym,"Distributed setup"),ym.forEach(a),Si.forEach(a),Fr=f(t),Me=o(t,"P",{});var wm=n(Me);yc=i(wm,"When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),wm.forEach(a),Rr=f(t),Ve=o(t,"P",{});var jm=n(Ve);wc=i(jm,"For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),jm.forEach(a),Mr=f(t),at=o(t,"OL",{});var Ke=n(at);vo=o(Ke,"LI",{});var bm=n(vo);zs=o(bm,"P",{});var Di=n(zs);jc=i(Di,"Define the total number of processes with the "),$o=o(Di,"CODE",{});var qm=n($o);bc=i(qm,"num_process"),qm.forEach(a),qc=i(Di," argument."),Di.forEach(a),bm.forEach(a),kc=f(Ke),yo=o(Ke,"LI",{});var km=n(yo);Et=o(km,"P",{});var Xe=n(Et);Ec=i(Xe,"Set the process "),wo=o(Xe,"CODE",{});var Em=n(wo);Pc=i(Em,"rank"),Em.forEach(a),xc=i(Xe," as an integer between zero and "),jo=o(Xe,"CODE",{});var Pm=n(jo);Ac=i(Pm,"num_process - 1"),Pm.forEach(a),Sc=i(Xe,"."),Xe.forEach(a),km.forEach(a),Dc=f(Ke),bo=o(Ke,"LI",{});var xm=n(bo);Js=o(xm,"P",{});var Ti=n(Js);Tc=i(Ti,"Load your metric with "),ze=o(Ti,"A",{href:!0});var Am=n(ze);Nc=i(Am,"load_metric()"),Am.forEach(a),Cc=i(Ti," with these arguments:"),Ti.forEach(a),xm.forEach(a),Ke.forEach(a),Vr=f(t),m(Us.$$.fragment,t),zr=f(t),m(ja.$$.fragment,t),Jr=f(t),ba=o(t,"P",{});var Ni=n(ba);Ic=i(Ni,"In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),qo=o(Ni,"CODE",{});var Sm=n(qo);Oc=i(Sm,"experiment_id"),Sm.forEach(a),Hc=i(Ni," to distinguish the separate evaluations:"),Ni.forEach(a),Ur=f(t),m(Ys.$$.fragment,t),this.h()},h(){c(h,"name","hf:doc:metadata"),c(h,"content",JSON.stringify(Jm)),c(b,"id","load"),c(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b,"href","#load"),c(y,"class","relative group"),c(Ca,"class","underline decoration-pink-400 decoration-2 font-semibold"),c(Ca,"href","./audio_load"),c(Ia,"class","underline decoration-yellow-400 decoration-2 font-semibold"),c(Ia,"href","./image_load"),c(Oa,"class","underline decoration-green-400 decoration-2 font-semibold"),c(Oa,"href","./nlp_load"),c(Zs,"id","load-from-the-hub"),c(Tt,"id","hugging-face-hub"),c(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tt,"href","#hugging-face-hub"),c(ot,"class","relative group"),c(te,"href","share#create-the-repository"),c(ae,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset"),c(La,"href","https://huggingface.co/datasets/lhoestq/demo1"),c(La,"rel","nofollow"),c(Lt,"id","local-loading-script"),c(Lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lt,"href","#local-loading-script"),c(nt,"class","relative group"),c(se,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset"),c(Mt,"id","edit-loading-script"),c(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mt,"href","#edit-loading-script"),c(rt,"class","relative group"),c(le,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset"),c(zt,"id","local-and-remote-files"),c(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zt,"href","#local-and-remote-files"),c(it,"class","relative group"),c(oe,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset"),c(Jt,"id","csv"),c(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jt,"href","#csv"),c(pt,"class","relative group"),c(Ut,"id","json"),c(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ut,"href","#json"),c(dt,"class","relative group"),c(fe,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset"),c(Wt,"id","parquet"),c(Wt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wt,"href","#parquet"),c(ft,"class","relative group"),c(Gt,"id","inmemory-data"),c(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gt,"href","#inmemory-data"),c(ct,"class","relative group"),c(ve,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.Dataset"),c(Kt,"id","python-dictionary"),c(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kt,"href","#python-dictionary"),c(ht,"class","relative group"),c($e,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.Dataset.from_dict"),c(Zt,"id","python-list-of-dictionaries"),c(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zt,"href","#python-list-of-dictionaries"),c(ut,"class","relative group"),c(aa,"id","python-generator"),c(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aa,"href","#python-generator"),c(mt,"class","relative group"),c(ye,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.Dataset.from_generator"),c(ea,"id","pandas-dataframe"),c(ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ea,"href","#pandas-dataframe"),c(_t,"class","relative group"),c(je,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.Dataset.from_pandas"),c(na,"id","offline"),c(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(na,"href","#offline"),c(gt,"class","relative group"),c(ra,"id","slice-splits"),c(ra,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ra,"href","#slice-splits"),c(vt,"class","relative group"),c(qe,"href","/docs/datasets/v2.5.0/en/package_reference/builder_classes#datasets.ReadInstruction"),c(ke,"href","/docs/datasets/v2.5.0/en/package_reference/builder_classes#datasets.ReadInstruction"),c(pa,"id","percent-slicing-and-rounding"),c(pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pa,"href","#percent-slicing-and-rounding"),c($t,"class","relative group"),c(Se,"id","troubleshoot"),c(ca,"id","troubleshooting"),c(ca,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ca,"href","#troubleshooting"),c(yt,"class","relative group"),c(ha,"id","manual-download"),c(ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ha,"href","#manual-download"),c(wt,"class","relative group"),c(Te,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset"),c(Ds,"href","https://huggingface.co/datasets/matinf"),c(Ds,"rel","nofollow"),c(Ne,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset"),c(ma,"id","specify-features"),c(ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ma,"href","#specify-features"),c(jt,"class","relative group"),c(Ce,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.Features"),c(Cs,"href","https://arrow.apache.org/docs/"),c(Cs,"rel","nofollow"),c(Ie,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.ClassLabel"),c(Oe,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.Features"),c(He,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_dataset"),c(ga,"id","metrics"),c(ga,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ga,"href","#metrics"),c(bt,"class","relative group"),c(ya,"id","load-configurations"),c(ya,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ya,"href","#load-configurations"),c(qt,"class","relative group"),c(Re,"href","/docs/datasets/v2.5.0/en/package_reference/main_classes#datasets.MetricInfo"),c(wa,"id","distributed-setup"),c(wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wa,"href","#distributed-setup"),c(kt,"class","relative group"),c(ze,"href","/docs/datasets/v2.5.0/en/package_reference/loading_methods#datasets.load_metric")},m(t,e){s(document.head,h),p(t,k,e),p(t,y,e),s(y,b),s(b,q),_(w,q,null),s(y,j),s(y,P),s(P,et),p(t,Pt,e),p(t,U,e),s(U,lt),p(t,xt,e),p(t,Y,e),s(Y,B),p(t,At,e),p(t,S,e),s(S,V),s(V,Pa),s(S,xa),s(S,z),s(z,Aa),s(S,Sa),s(S,H),s(H,Da),s(S,Ta),s(S,J),s(J,x),s(S,Gs),s(S,St),s(St,Qs),s(S,Ks),s(S,Dt),s(Dt,Xs),p(t,Na,e),p(t,C,e),s(C,Ci),s(C,Ca),s(Ca,Ii),s(C,Oi),s(C,Ia),s(Ia,Hi),s(C,Li),s(C,Oa),s(Oa,Fi),s(C,Ri),p(t,Do,e),p(t,Zs,e),p(t,To,e),p(t,ot,e),s(ot,Tt),s(Tt,Ze),_(Ha,Ze,null),s(ot,Mi),s(ot,tl),s(tl,Vi),p(t,No,e),p(t,W,e),s(W,zi),s(W,te),s(te,Ji),s(W,Ui),s(W,ae),s(ae,Yi),s(W,Bi),p(t,Co,e),p(t,Nt,e),s(Nt,Wi),s(Nt,La),s(La,Gi),s(Nt,Qi),p(t,Io,e),_(Fa,t,e),p(t,Oo,e),p(t,Ct,e),s(Ct,Ki),s(Ct,al),s(al,Xi),s(Ct,Zi),p(t,Ho,e),_(Ra,t,e),p(t,Lo,e),_(It,t,e),p(t,Fo,e),p(t,T,e),s(T,tp),s(T,sl),s(sl,ap),s(T,sp),s(T,el),s(el,ep),s(T,lp),s(T,ll),s(ll,op),s(T,np),s(T,ol),s(ol,rp),s(T,ip),s(T,nl),s(nl,pp),s(T,dp),p(t,Ro,e),_(Ma,t,e),p(t,Mo,e),_(Ot,t,e),p(t,Vo,e),p(t,G,e),s(G,fp),s(G,rl),s(rl,cp),s(G,hp),s(G,il),s(il,up),s(G,mp),p(t,zo,e),_(Va,t,e),p(t,Jo,e),p(t,Ht,e),s(Ht,_p),s(Ht,pl),s(pl,gp),s(Ht,vp),p(t,Uo,e),_(za,t,e),p(t,Yo,e),p(t,nt,e),s(nt,Lt),s(Lt,dl),_(Ja,dl,null),s(nt,$p),s(nt,fl),s(fl,yp),p(t,Bo,e),p(t,Ft,e),s(Ft,wp),s(Ft,se),s(se,jp),s(Ft,bp),p(t,Wo,e),p(t,Rt,e),s(Rt,cl),s(cl,qp),s(Rt,kp),s(Rt,hl),s(hl,Ep),p(t,Go,e),_(Ua,t,e),p(t,Qo,e),p(t,rt,e),s(rt,Mt),s(Mt,ul),_(Ya,ul,null),s(rt,Pp),s(rt,ml),s(ml,xp),p(t,Ko,e),p(t,ee,e),s(ee,Ap),p(t,Xo,e),_(Ba,t,e),p(t,Zo,e),p(t,Vt,e),s(Vt,Sp),s(Vt,le),s(le,Dp),s(Vt,Tp),p(t,tn,e),_(Wa,t,e),p(t,an,e),p(t,it,e),s(it,zt),s(zt,_l),_(Ga,_l,null),s(it,Np),s(it,gl),s(gl,Cp),p(t,sn,e),p(t,N,e),s(N,Ip),s(N,vl),s(vl,Op),s(N,Hp),s(N,$l),s($l,Lp),s(N,Fp),s(N,yl),s(yl,Rp),s(N,Mp),s(N,wl),s(wl,Vp),s(N,zp),s(N,oe),s(oe,Jp),s(N,Up),p(t,en,e),p(t,pt,e),s(pt,Jt),s(Jt,jl),_(Qa,jl,null),s(pt,Yp),s(pt,bl),s(bl,Bp),p(t,ln,e),p(t,ne,e),s(ne,Wp),p(t,on,e),_(Ka,t,e),p(t,nn,e),p(t,re,e),s(re,Gp),p(t,rn,e),_(Xa,t,e),p(t,pn,e),p(t,ie,e),s(ie,Qp),p(t,dn,e),_(Za,t,e),p(t,fn,e),p(t,pe,e),s(pe,Kp),p(t,cn,e),_(ts,t,e),p(t,hn,e),p(t,de,e),s(de,Xp),p(t,un,e),_(as,t,e),p(t,mn,e),p(t,dt,e),s(dt,Ut),s(Ut,ql),_(ss,ql,null),s(dt,Zp),s(dt,kl),s(kl,td),p(t,_n,e),p(t,Yt,e),s(Yt,ad),s(Yt,fe),s(fe,sd),s(Yt,ed),p(t,gn,e),_(es,t,e),p(t,vn,e),p(t,ce,e),s(ce,ld),p(t,$n,e),_(ls,t,e),p(t,yn,e),p(t,Bt,e),s(Bt,od),s(Bt,El),s(El,nd),s(Bt,rd),p(t,wn,e),_(os,t,e),p(t,jn,e),p(t,he,e),s(he,id),p(t,bn,e),_(ns,t,e),p(t,qn,e),p(t,ue,e),s(ue,pd),p(t,kn,e),p(t,ft,e),s(ft,Wt),s(Wt,Pl),_(rs,Pl,null),s(ft,dd),s(ft,xl),s(xl,fd),p(t,En,e),p(t,me,e),s(me,cd),p(t,Pn,e),p(t,_e,e),s(_e,hd),p(t,xn,e),_(is,t,e),p(t,An,e),p(t,ge,e),s(ge,ud),p(t,Sn,e),_(ps,t,e),p(t,Dn,e),p(t,ct,e),s(ct,Gt),s(Gt,Al),_(ds,Al,null),s(ct,md),s(ct,Sl),s(Sl,_d),p(t,Tn,e),p(t,Qt,e),s(Qt,gd),s(Qt,ve),s(ve,vd),s(Qt,$d),p(t,Nn,e),p(t,ht,e),s(ht,Kt),s(Kt,Dl),_(fs,Dl,null),s(ht,yd),s(ht,Tl),s(Tl,wd),p(t,Cn,e),p(t,Xt,e),s(Xt,jd),s(Xt,$e),s($e,bd),s(Xt,qd),p(t,In,e),_(cs,t,e),p(t,On,e),p(t,ut,e),s(ut,Zt),s(Zt,Nl),_(hs,Nl,null),s(ut,kd),s(ut,Cl),s(Cl,Ed),p(t,Hn,e),p(t,ta,e),s(ta,Pd),s(ta,Il),s(Il,xd),s(ta,Ad),p(t,Ln,e),_(us,t,e),p(t,Fn,e),p(t,mt,e),s(mt,aa),s(aa,Ol),_(ms,Ol,null),s(mt,Sd),s(mt,Hl),s(Hl,Dd),p(t,Rn,e),p(t,sa,e),s(sa,Td),s(sa,ye),s(ye,Nd),s(sa,Cd),p(t,Mn,e),_(_s,t,e),p(t,Vn,e),p(t,we,e),s(we,Id),p(t,zn,e),p(t,_t,e),s(_t,ea),s(ea,Ll),_(gs,Ll,null),s(_t,Od),s(_t,Fl),s(Fl,Hd),p(t,Jn,e),p(t,la,e),s(la,Ld),s(la,je),s(je,Fd),s(la,Rd),p(t,Un,e),_(vs,t,e),p(t,Yn,e),_(oa,t,e),p(t,Bn,e),p(t,gt,e),s(gt,na),s(na,Rl),_($s,Rl,null),s(gt,Md),s(gt,Ml),s(Ml,Vd),p(t,Wn,e),p(t,be,e),s(be,zd),p(t,Gn,e),p(t,Q,e),s(Q,Jd),s(Q,Vl),s(Vl,Ud),s(Q,Yd),s(Q,zl),s(zl,Bd),s(Q,Wd),p(t,Qn,e),p(t,vt,e),s(vt,ra),s(ra,Jl),_(ys,Jl,null),s(vt,Gd),s(vt,Ul),s(Ul,Qd),p(t,Kn,e),p(t,K,e),s(K,Kd),s(K,qe),s(qe,Xd),s(K,Zd),s(K,ke),s(ke,tf),s(K,af),p(t,Xn,e),p(t,X,e),s(X,sf),s(X,Yl),s(Yl,ef),s(X,lf),s(X,Bl),s(Bl,of),s(X,nf),p(t,Zn,e),_(ws,t,e),p(t,tr,e),p(t,ia,e),s(ia,rf),s(ia,Wl),s(Wl,pf),s(ia,df),p(t,ar,e),_(js,t,e),p(t,sr,e),p(t,Ee,e),s(Ee,ff),p(t,er,e),_(bs,t,e),p(t,lr,e),p(t,Pe,e),s(Pe,cf),p(t,or,e),_(qs,t,e),p(t,nr,e),p(t,xe,e),s(xe,hf),p(t,rr,e),_(ks,t,e),p(t,ir,e),p(t,$t,e),s($t,pa),s(pa,Gl),_(Es,Gl,null),s($t,uf),s($t,Ql),s(Ql,mf),p(t,pr,e),p(t,Ae,e),s(Ae,_f),p(t,dr,e),_(Ps,t,e),p(t,fr,e),p(t,da,e),s(da,gf),s(da,Kl),s(Kl,vf),s(da,$f),p(t,cr,e),_(xs,t,e),p(t,hr,e),_(fa,t,e),p(t,ur,e),p(t,Se,e),p(t,mr,e),p(t,yt,e),s(yt,ca),s(ca,Xl),_(As,Xl,null),s(yt,yf),s(yt,Zl),s(Zl,wf),p(t,_r,e),p(t,De,e),s(De,jf),p(t,gr,e),p(t,wt,e),s(wt,ha),s(ha,to),_(Ss,to,null),s(wt,bf),s(wt,ao),s(ao,qf),p(t,vr,e),p(t,L,e),s(L,kf),s(L,Te),s(Te,Ef),s(L,Pf),s(L,so),s(so,xf),s(L,Af),s(L,eo),s(eo,Sf),s(L,Df),p(t,$r,e),p(t,ua,e),s(ua,Tf),s(ua,Ds),s(Ds,Nf),s(ua,Cf),p(t,yr,e),_(Ts,t,e),p(t,wr,e),p(t,O,e),s(O,If),s(O,lo),s(lo,Of),s(O,Hf),s(O,oo),s(oo,Lf),s(O,Ff),s(O,no),s(no,Rf),s(O,Mf),s(O,Ne),s(Ne,Vf),s(O,zf),p(t,jr,e),p(t,jt,e),s(jt,ma),s(ma,ro),_(Ns,ro,null),s(jt,Jf),s(jt,io),s(io,Uf),p(t,br,e),p(t,F,e),s(F,Yf),s(F,Ce),s(Ce,Bf),s(F,Wf),s(F,Cs),s(Cs,Gf),s(F,Qf),s(F,Ie),s(Ie,Kf),s(F,Xf),p(t,qr,e),p(t,_a,e),s(_a,Zf),s(_a,Oe),s(Oe,tc),s(_a,ac),p(t,kr,e),_(Is,t,e),p(t,Er,e),p(t,Z,e),s(Z,sc),s(Z,po),s(po,ec),s(Z,lc),s(Z,He),s(He,oc),s(Z,nc),p(t,Pr,e),_(Os,t,e),p(t,xr,e),p(t,Le,e),s(Le,rc),p(t,Ar,e),_(Hs,t,e),p(t,Sr,e),p(t,bt,e),s(bt,ga),s(ga,fo),_(Ls,fo,null),s(bt,ic),s(bt,co),s(co,pc),p(t,Dr,e),_(va,t,e),p(t,Tr,e),p(t,Fe,e),s(Fe,dc),p(t,Nr,e),_(Fs,t,e),p(t,Cr,e),_($a,t,e),p(t,Ir,e),p(t,qt,e),s(qt,ya),s(ya,ho),_(Rs,ho,null),s(qt,fc),s(qt,uo),s(uo,cc),p(t,Or,e),p(t,tt,e),s(tt,hc),s(tt,mo),s(mo,uc),s(tt,mc),s(tt,Re),s(Re,_c),s(tt,gc),p(t,Hr,e),_(Ms,t,e),p(t,Lr,e),p(t,kt,e),s(kt,wa),s(wa,_o),_(Vs,_o,null),s(kt,vc),s(kt,go),s(go,$c),p(t,Fr,e),p(t,Me,e),s(Me,yc),p(t,Rr,e),p(t,Ve,e),s(Ve,wc),p(t,Mr,e),p(t,at,e),s(at,vo),s(vo,zs),s(zs,jc),s(zs,$o),s($o,bc),s(zs,qc),s(at,kc),s(at,yo),s(yo,Et),s(Et,Ec),s(Et,wo),s(wo,Pc),s(Et,xc),s(Et,jo),s(jo,Ac),s(Et,Sc),s(at,Dc),s(at,bo),s(bo,Js),s(Js,Tc),s(Js,ze),s(ze,Nc),s(Js,Cc),p(t,Vr,e),_(Us,t,e),p(t,zr,e),_(ja,t,e),p(t,Jr,e),p(t,ba,e),s(ba,Ic),s(ba,qo),s(qo,Oc),s(ba,Hc),p(t,Ur,e),_(Ys,t,e),Yr=!0},p(t,[e]){const Bs={};e&2&&(Bs.$$scope={dirty:e,ctx:t}),It.$set(Bs);const ko={};e&2&&(ko.$$scope={dirty:e,ctx:t}),Ot.$set(ko);const Eo={};e&2&&(Eo.$$scope={dirty:e,ctx:t}),oa.$set(Eo);const Po={};e&2&&(Po.$$scope={dirty:e,ctx:t}),fa.$set(Po);const xo={};e&2&&(xo.$$scope={dirty:e,ctx:t}),va.$set(xo);const Ao={};e&2&&(Ao.$$scope={dirty:e,ctx:t}),$a.$set(Ao);const I={};e&2&&(I.$$scope={dirty:e,ctx:t}),ja.$set(I)},i(t){Yr||(g(w.$$.fragment,t),g(Ha.$$.fragment,t),g(Fa.$$.fragment,t),g(Ra.$$.fragment,t),g(It.$$.fragment,t),g(Ma.$$.fragment,t),g(Ot.$$.fragment,t),g(Va.$$.fragment,t),g(za.$$.fragment,t),g(Ja.$$.fragment,t),g(Ua.$$.fragment,t),g(Ya.$$.fragment,t),g(Ba.$$.fragment,t),g(Wa.$$.fragment,t),g(Ga.$$.fragment,t),g(Qa.$$.fragment,t),g(Ka.$$.fragment,t),g(Xa.$$.fragment,t),g(Za.$$.fragment,t),g(ts.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(es.$$.fragment,t),g(ls.$$.fragment,t),g(os.$$.fragment,t),g(ns.$$.fragment,t),g(rs.$$.fragment,t),g(is.$$.fragment,t),g(ps.$$.fragment,t),g(ds.$$.fragment,t),g(fs.$$.fragment,t),g(cs.$$.fragment,t),g(hs.$$.fragment,t),g(us.$$.fragment,t),g(ms.$$.fragment,t),g(_s.$$.fragment,t),g(gs.$$.fragment,t),g(vs.$$.fragment,t),g(oa.$$.fragment,t),g($s.$$.fragment,t),g(ys.$$.fragment,t),g(ws.$$.fragment,t),g(js.$$.fragment,t),g(bs.$$.fragment,t),g(qs.$$.fragment,t),g(ks.$$.fragment,t),g(Es.$$.fragment,t),g(Ps.$$.fragment,t),g(xs.$$.fragment,t),g(fa.$$.fragment,t),g(As.$$.fragment,t),g(Ss.$$.fragment,t),g(Ts.$$.fragment,t),g(Ns.$$.fragment,t),g(Is.$$.fragment,t),g(Os.$$.fragment,t),g(Hs.$$.fragment,t),g(Ls.$$.fragment,t),g(va.$$.fragment,t),g(Fs.$$.fragment,t),g($a.$$.fragment,t),g(Rs.$$.fragment,t),g(Ms.$$.fragment,t),g(Vs.$$.fragment,t),g(Us.$$.fragment,t),g(ja.$$.fragment,t),g(Ys.$$.fragment,t),Yr=!0)},o(t){v(w.$$.fragment,t),v(Ha.$$.fragment,t),v(Fa.$$.fragment,t),v(Ra.$$.fragment,t),v(It.$$.fragment,t),v(Ma.$$.fragment,t),v(Ot.$$.fragment,t),v(Va.$$.fragment,t),v(za.$$.fragment,t),v(Ja.$$.fragment,t),v(Ua.$$.fragment,t),v(Ya.$$.fragment,t),v(Ba.$$.fragment,t),v(Wa.$$.fragment,t),v(Ga.$$.fragment,t),v(Qa.$$.fragment,t),v(Ka.$$.fragment,t),v(Xa.$$.fragment,t),v(Za.$$.fragment,t),v(ts.$$.fragment,t),v(as.$$.fragment,t),v(ss.$$.fragment,t),v(es.$$.fragment,t),v(ls.$$.fragment,t),v(os.$$.fragment,t),v(ns.$$.fragment,t),v(rs.$$.fragment,t),v(is.$$.fragment,t),v(ps.$$.fragment,t),v(ds.$$.fragment,t),v(fs.$$.fragment,t),v(cs.$$.fragment,t),v(hs.$$.fragment,t),v(us.$$.fragment,t),v(ms.$$.fragment,t),v(_s.$$.fragment,t),v(gs.$$.fragment,t),v(vs.$$.fragment,t),v(oa.$$.fragment,t),v($s.$$.fragment,t),v(ys.$$.fragment,t),v(ws.$$.fragment,t),v(js.$$.fragment,t),v(bs.$$.fragment,t),v(qs.$$.fragment,t),v(ks.$$.fragment,t),v(Es.$$.fragment,t),v(Ps.$$.fragment,t),v(xs.$$.fragment,t),v(fa.$$.fragment,t),v(As.$$.fragment,t),v(Ss.$$.fragment,t),v(Ts.$$.fragment,t),v(Ns.$$.fragment,t),v(Is.$$.fragment,t),v(Os.$$.fragment,t),v(Hs.$$.fragment,t),v(Ls.$$.fragment,t),v(va.$$.fragment,t),v(Fs.$$.fragment,t),v($a.$$.fragment,t),v(Rs.$$.fragment,t),v(Ms.$$.fragment,t),v(Vs.$$.fragment,t),v(Us.$$.fragment,t),v(ja.$$.fragment,t),v(Ys.$$.fragment,t),Yr=!1},d(t){a(h),t&&a(k),t&&a(y),$(w),t&&a(Pt),t&&a(U),t&&a(xt),t&&a(Y),t&&a(At),t&&a(S),t&&a(Na),t&&a(C),t&&a(Do),t&&a(Zs),t&&a(To),t&&a(ot),$(Ha),t&&a(No),t&&a(W),t&&a(Co),t&&a(Nt),t&&a(Io),$(Fa,t),t&&a(Oo),t&&a(Ct),t&&a(Ho),$(Ra,t),t&&a(Lo),$(It,t),t&&a(Fo),t&&a(T),t&&a(Ro),$(Ma,t),t&&a(Mo),$(Ot,t),t&&a(Vo),t&&a(G),t&&a(zo),$(Va,t),t&&a(Jo),t&&a(Ht),t&&a(Uo),$(za,t),t&&a(Yo),t&&a(nt),$(Ja),t&&a(Bo),t&&a(Ft),t&&a(Wo),t&&a(Rt),t&&a(Go),$(Ua,t),t&&a(Qo),t&&a(rt),$(Ya),t&&a(Ko),t&&a(ee),t&&a(Xo),$(Ba,t),t&&a(Zo),t&&a(Vt),t&&a(tn),$(Wa,t),t&&a(an),t&&a(it),$(Ga),t&&a(sn),t&&a(N),t&&a(en),t&&a(pt),$(Qa),t&&a(ln),t&&a(ne),t&&a(on),$(Ka,t),t&&a(nn),t&&a(re),t&&a(rn),$(Xa,t),t&&a(pn),t&&a(ie),t&&a(dn),$(Za,t),t&&a(fn),t&&a(pe),t&&a(cn),$(ts,t),t&&a(hn),t&&a(de),t&&a(un),$(as,t),t&&a(mn),t&&a(dt),$(ss),t&&a(_n),t&&a(Yt),t&&a(gn),$(es,t),t&&a(vn),t&&a(ce),t&&a($n),$(ls,t),t&&a(yn),t&&a(Bt),t&&a(wn),$(os,t),t&&a(jn),t&&a(he),t&&a(bn),$(ns,t),t&&a(qn),t&&a(ue),t&&a(kn),t&&a(ft),$(rs),t&&a(En),t&&a(me),t&&a(Pn),t&&a(_e),t&&a(xn),$(is,t),t&&a(An),t&&a(ge),t&&a(Sn),$(ps,t),t&&a(Dn),t&&a(ct),$(ds),t&&a(Tn),t&&a(Qt),t&&a(Nn),t&&a(ht),$(fs),t&&a(Cn),t&&a(Xt),t&&a(In),$(cs,t),t&&a(On),t&&a(ut),$(hs),t&&a(Hn),t&&a(ta),t&&a(Ln),$(us,t),t&&a(Fn),t&&a(mt),$(ms),t&&a(Rn),t&&a(sa),t&&a(Mn),$(_s,t),t&&a(Vn),t&&a(we),t&&a(zn),t&&a(_t),$(gs),t&&a(Jn),t&&a(la),t&&a(Un),$(vs,t),t&&a(Yn),$(oa,t),t&&a(Bn),t&&a(gt),$($s),t&&a(Wn),t&&a(be),t&&a(Gn),t&&a(Q),t&&a(Qn),t&&a(vt),$(ys),t&&a(Kn),t&&a(K),t&&a(Xn),t&&a(X),t&&a(Zn),$(ws,t),t&&a(tr),t&&a(ia),t&&a(ar),$(js,t),t&&a(sr),t&&a(Ee),t&&a(er),$(bs,t),t&&a(lr),t&&a(Pe),t&&a(or),$(qs,t),t&&a(nr),t&&a(xe),t&&a(rr),$(ks,t),t&&a(ir),t&&a($t),$(Es),t&&a(pr),t&&a(Ae),t&&a(dr),$(Ps,t),t&&a(fr),t&&a(da),t&&a(cr),$(xs,t),t&&a(hr),$(fa,t),t&&a(ur),t&&a(Se),t&&a(mr),t&&a(yt),$(As),t&&a(_r),t&&a(De),t&&a(gr),t&&a(wt),$(Ss),t&&a(vr),t&&a(L),t&&a($r),t&&a(ua),t&&a(yr),$(Ts,t),t&&a(wr),t&&a(O),t&&a(jr),t&&a(jt),$(Ns),t&&a(br),t&&a(F),t&&a(qr),t&&a(_a),t&&a(kr),$(Is,t),t&&a(Er),t&&a(Z),t&&a(Pr),$(Os,t),t&&a(xr),t&&a(Le),t&&a(Ar),$(Hs,t),t&&a(Sr),t&&a(bt),$(Ls),t&&a(Dr),$(va,t),t&&a(Tr),t&&a(Fe),t&&a(Nr),$(Fs,t),t&&a(Cr),$($a,t),t&&a(Ir),t&&a(qt),$(Rs),t&&a(Or),t&&a(tt),t&&a(Hr),$(Ms,t),t&&a(Lr),t&&a(kt),$(Vs),t&&a(Fr),t&&a(Me),t&&a(Rr),t&&a(Ve),t&&a(Mr),t&&a(at),t&&a(Vr),$(Us,t),t&&a(zr),$(ja,t),t&&a(Jr),t&&a(ba),t&&a(Ur),$(Ys,t)}}}const Jm={local:"load",sections:[{local:"hugging-face-hub",title:"Hugging Face Hub"},{local:"local-loading-script",sections:[{local:"edit-loading-script",title:"Edit loading script"}],title:"Local loading script"},{local:"local-and-remote-files",sections:[{local:"csv",title:"CSV"},{local:"json",title:"JSON"},{local:"parquet",title:"Parquet"}],title:"Local and remote files"},{local:"inmemory-data",sections:[{local:"python-dictionary",title:"Python dictionary"},{local:"python-list-of-dictionaries",title:"Python list of dictionaries"},{local:"python-generator",title:"Python generator"},{local:"pandas-dataframe",title:"Pandas DataFrame"}],title:"In-memory data"},{local:"offline",title:"Offline"},{local:"slice-splits",sections:[{local:"percent-slicing-and-rounding",title:"Percent slicing and rounding"}],title:"Slice splits"},{local:"troubleshooting",sections:[{local:"manual-download",title:"Manual download"},{local:"specify-features",title:"Specify features"}],title:"Troubleshooting"},{local:"metrics",sections:[{local:"load-configurations",title:"Load configurations"},{local:"distributed-setup",title:"Distributed setup"}],title:"Metrics"}],title:"Load"};function Um(D){return Im(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Xm extends Dm{constructor(h){super();Tm(this,h,Um,zm,Nm,{})}}export{Xm as default,Jm as metadata};
