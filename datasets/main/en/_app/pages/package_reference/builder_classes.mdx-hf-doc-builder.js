import{S as hm,i as _m,s as $m,e as n,k as p,w as v,t as m,M as vm,c as r,d as a,m as c,a as o,x as b,h as g,b as y,G as e,g as $,y as x,q as w,o as E,B as D,v as bm,L as B}from"../../chunks/vendor-hf-doc-builder.js";import{D as j}from"../../chunks/Docstring-hf-doc-builder.js";import{C as N}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as nr}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function xm(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder('rotten_tomatoes')
ds = builder.download_and_prepare()
ds = builder.as_dataset(split='train')
ds`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.as_dataset(split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">8530</span>
})`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function wm(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
builder = load_dataset_builder('rotten_tomatoes')
ds = builder.download_and_prepare()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = builder.download_and_prepare()`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Em(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.get_all_exported_dataset_infos()
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.get_all_exported_dataset_infos()
{<span class="hljs-string">&#x27;default&#x27;</span>: DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
a dataset of containing 5,331 positive and 5,331 negative processed
s from Rotten Tomatoes movie reviews. This data was first used in Bo
 Lillian Lee, \`\`Seeing stars: Exploiting class relationships for
t categorization with respect to rating scales.&#x27;&#x27;, Proceedings of the
5.
ion=&#x27;@InProceedings{Pang+Lee:05a,
 =       {Bo Pang and Lillian Lee},
=        {Seeing stars: Exploiting class relationships for sentiment
          categorization with respect to rating scales},
tle =    {Proceedings of the ACL},
         2005

age=&#x27;http://www.cs.cornell.edu/people/pabo/movie-review-data/&#x27;, license=&#x27;&#x27;, features={&#x27;text&#x27;: Value(dtype=&#x27;string&#x27;, id=None), &#x27;label&#x27;: ClassLabel(num_classes=2, names=[&#x27;neg&#x27;, &#x27;pos&#x27;], id=None)}, post_processed=None, supervised_keys=SupervisedKeysData(input=&#x27;&#x27;, output=&#x27;&#x27;), task_templates=[TextClassification(task=&#x27;text-classification&#x27;, text_column=&#x27;text&#x27;, label_column=&#x27;label&#x27;)], builder_name=&#x27;rotten_tomatoes_movie_review&#x27;, config_name=&#x27;default&#x27;, version=1.0.0, splits={&#x27;train&#x27;: SplitInfo(name=&#x27;train&#x27;, num_bytes=1074810, num_examples=8530, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;validation&#x27;: SplitInfo(name=&#x27;validation&#x27;, num_bytes=134679, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;test&#x27;: SplitInfo(name=&#x27;test&#x27;, num_bytes=135972, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;)}, download_checksums={&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;: {&#x27;num_bytes&#x27;: 487770, &#x27;checksum&#x27;: &#x27;a05befe52aafda71d458d188a1c54506a998b1308613ba76bbda2e5029409ce9&#x27;}}, download_size=487770, post_processing_size=None, dataset_size=1345461, size_in_bytes=1833231)}</span>`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Dm(k){let d,h,f,l,u;return l=new N({props:{code:`from datasets import load_dataset_builder
ds_builder = load_dataset_builder('rotten_tomatoes')
ds_builder.get_exported_dataset_info()
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset_builder
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder = load_dataset_builder(<span class="hljs-string">&#x27;rotten_tomatoes&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_builder.get_exported_dataset_info()
DatasetInfo(description=<span class="hljs-string">&quot;Movie Review Dataset.
a dataset of containing 5,331 positive and 5,331 negative processed
s from Rotten Tomatoes movie reviews. This data was first used in Bo
 Lillian Lee, \`\`Seeing stars: Exploiting class relationships for
t categorization with respect to rating scales.&#x27;&#x27;, Proceedings of the
5.
ion=&#x27;@InProceedings{Pang+Lee:05a,
 =       {Bo Pang and Lillian Lee},
=        {Seeing stars: Exploiting class relationships for sentiment
          categorization with respect to rating scales},
tle =    {Proceedings of the ACL},
         2005

age=&#x27;http://www.cs.cornell.edu/people/pabo/movie-review-data/&#x27;, license=&#x27;&#x27;, features={&#x27;text&#x27;: Value(dtype=&#x27;string&#x27;, id=None), &#x27;label&#x27;: ClassLabel(num_classes=2, names=[&#x27;neg&#x27;, &#x27;pos&#x27;], id=None)}, post_processed=None, supervised_keys=SupervisedKeysData(input=&#x27;&#x27;, output=&#x27;&#x27;), task_templates=[TextClassification(task=&#x27;text-classification&#x27;, text_column=&#x27;text&#x27;, label_column=&#x27;label&#x27;)], builder_name=&#x27;rotten_tomatoes_movie_review&#x27;, config_name=&#x27;default&#x27;, version=1.0.0, splits={&#x27;train&#x27;: SplitInfo(name=&#x27;train&#x27;, num_bytes=1074810, num_examples=8530, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;validation&#x27;: SplitInfo(name=&#x27;validation&#x27;, num_bytes=134679, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;), &#x27;test&#x27;: SplitInfo(name=&#x27;test&#x27;, num_bytes=135972, num_examples=1066, dataset_name=&#x27;rotten_tomatoes_movie_review&#x27;)}, download_checksums={&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;: {&#x27;num_bytes&#x27;: 487770, &#x27;checksum&#x27;: &#x27;a05befe52aafda71d458d188a1c54506a998b1308613ba76bbda2e5029409ce9&#x27;}}, download_size=487770, post_processing_size=None, dataset_size=1345461, size_in_bytes=1833231)</span>`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function ym(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)'}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function km(k){let d,h,f,l,u;return l=new N({props:{code:"extracted_paths = dl_manager.extract(dl_manager.download(url_or_urls))",highlighted:'<span class="hljs-attr">extracted_paths</span> = dl_manager.extract(dl_manager.download(url_or_urls))'}}),{c(){d=n("p"),h=m("Is roughly equivalent to:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Is roughly equivalent to:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function jm(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download_custom('s3://my-bucket/data.zip', custom_download_for_my_private_bucket)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download_custom(<span class="hljs-string">&#x27;s3://my-bucket/data.zip&#x27;</span>, custom_download_for_my_private_bucket)'}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Tm(k){let d,h,f,l,u;return l=new N({props:{code:`downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
extracted_files = dl_manager.extract(downloaded_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>extracted_files = dl_manager.extract(downloaded_files)`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Sm(k){let d,h,f,l,u;return l=new N({props:{code:`archive = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
files = dl_manager.iter_archive(archive)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archive = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_archive(archive)`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Im(k){let d,h,f,l,u;return l=new N({props:{code:`files = dl_manager.download_and_extract('https://huggingface.co/datasets/beans/resolve/main/data/train.zip')
files = dl_manager.iter_files(files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.download_and_extract(<span class="hljs-string">&#x27;https://huggingface.co/datasets/beans/resolve/main/data/train.zip&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_files(files)`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Bm(k){let d,h,f,l,u;return l=new N({props:{code:"downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)'}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Nm(k){let d,h,f,l,u;return l=new N({props:{code:"extracted_paths = dl_manager.extract(dl_manager.download(url_or_urls))",highlighted:'<span class="hljs-attr">extracted_paths</span> = dl_manager.extract(dl_manager.download(url_or_urls))'}}),{c(){d=n("p"),h=m("Is roughly equivalent to:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Is roughly equivalent to:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Pm(k){let d,h,f,l,u;return l=new N({props:{code:`downloaded_files = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
extracted_files = dl_manager.extract(downloaded_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>downloaded_files = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>extracted_files = dl_manager.extract(downloaded_files)`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Rm(k){let d,h,f,l,u;return l=new N({props:{code:`archive = dl_manager.download('https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz')
files = dl_manager.iter_archive(archive)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>archive = dl_manager.download(<span class="hljs-string">&#x27;https://storage.googleapis.com/seldon-datasets/sentence_polarity_v1/rt-polaritydata.tar.gz&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_archive(archive)`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Cm(k){let d,h,f,l,u;return l=new N({props:{code:`files = dl_manager.download_and_extract('https://huggingface.co/datasets/beans/resolve/main/data/train.zip')
files = dl_manager.iter_files(files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.download_and_extract(<span class="hljs-string">&#x27;https://huggingface.co/datasets/beans/resolve/main/data/train.zip&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>files = dl_manager.iter_files(files)`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Lm(k){let d,h,f,l,u;return l=new N({props:{code:`datasets.SplitGenerator(
    name=datasets.Split.TRAIN,
    gen_kwargs={"split_key": "train", "files": dl_manager.download_and_extract(url)},
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TRAIN,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and_extract(url)},
<span class="hljs-meta">... </span>)`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Am(k){let d,h,f,l,u;return l=new N({props:{code:`datasets.SplitGenerator(
    name=datasets.Split.TRAIN,
    gen_kwargs={"split_key": "train", "files": dl_manager.download_and extract(url)},
),
datasets.SplitGenerator(
    name=datasets.Split.VALIDATION,
    gen_kwargs={"split_key": "validation", "files": dl_manager.download_and extract(url)},
),
datasets.SplitGenerator(
    name=datasets.Split.TEST,
    gen_kwargs={"split_key": "test", "files": dl_manager.download_and extract(url)},
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TRAIN,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>),
<span class="hljs-meta">... </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.VALIDATION,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;validation&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>),
<span class="hljs-meta">... </span>datasets.SplitGenerator(
<span class="hljs-meta">... </span>    name=datasets.Split.TEST,
<span class="hljs-meta">... </span>    gen_kwargs={<span class="hljs-string">&quot;split_key&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;files&quot;</span>: dl_manager.download_and extract(url)},
<span class="hljs-meta">... </span>)`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Om(k){let d,h,f,l,u;return l=new N({props:{code:`Each descriptor can be composed with other using addition or slice. Ex
split = datasets.Split.TRAIN.subsplit(datasets.percent[0:25]) + datasets.Split.TEST

The resulting split will correspond to 25% of the train split merged with
100% of the test split.`,highlighted:`Each descriptor can be composed <span class="hljs-keyword">with</span> other using addition <span class="hljs-keyword">or</span> <span class="hljs-built_in">slice</span>. Ex
split = datasets.Split.TRAIN.subsplit(datasets.percent[<span class="hljs-number">0</span>:<span class="hljs-number">25</span>]) + datasets.Split.TEST

The resulting split will correspond to <span class="hljs-number">25</span>% of the train split merged <span class="hljs-keyword">with</span>
<span class="hljs-number">100</span>% of the test split.`}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function qm(k){let d,h,f,l,u;return l=new N({props:{code:`split = (
        datasets.Split.TRAIN.subsplit(datasets.percent[:25]) +
        datasets.Split.TRAIN.subsplit(datasets.percent[75:])
)  # Error
split = datasets.Split.TEST + datasets.Split.ALL  # Error`,highlighted:`split = (
        datasets.Split.TRAIN.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) +
        datasets.Split.TRAIN.subsplit(datasets.percent[<span class="hljs-number">75</span>:])
)  <span class="hljs-comment"># Error</span>
split = datasets.Split.TEST + datasets.Split.ALL  <span class="hljs-comment"># Error</span>`}}),{c(){d=n("p"),h=m("A split cannot be added twice, so the following will fail:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"A split cannot be added twice, so the following will fail:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Vm(k){let d,h,f,l,u;return l=new N({props:{code:`split = (
datasets.Split.TRAIN.subsplit(datasets.percent[:25]) +
datasets.Split.TEST.subsplit(datasets.percent[:50])
)
split = (datasets.Split.TRAIN + datasets.Split.TEST).subsplit(datasets.percent[:50])`,highlighted:`split = (
datasets.Split.TRAIN.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) +
datasets.Split.TEST.subsplit(datasets.percent[:<span class="hljs-number">50</span>])
)
split = (datasets.Split.TRAIN + datasets.Split.TEST).subsplit(datasets.percent[:<span class="hljs-number">50</span>])`}}),{c(){d=n("p"),h=m("The slices can be applied only one time. So the following are valid:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"The slices can be applied only one time. So the following are valid:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Mm(k){let d,h,f,l,u;return l=new N({props:{code:`train = datasets.Split.TRAIN
test = datasets.Split.TEST
split = train.subsplit(datasets.percent[:25]).subsplit(datasets.percent[:25])
split = (train.subsplit(datasets.percent[:25]) + test).subsplit(datasets.percent[:50])`,highlighted:`train = datasets.Split.TRAIN
test = datasets.Split.TEST
split = train.subsplit(datasets.percent[:<span class="hljs-number">25</span>]).subsplit(datasets.percent[:<span class="hljs-number">25</span>])
split = (train.subsplit(datasets.percent[:<span class="hljs-number">25</span>]) + test).subsplit(datasets.percent[:<span class="hljs-number">50</span>])`}}),{c(){d=n("p"),h=m("But not:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"But not:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Fm(k){let d,h,f,l,u;return l=new N({props:{code:`# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%]')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec('test[:33%]'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction('test', to=33, unit='%'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction(
'test', from_=0, to=33, unit='%'))

# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%]+train[1:-1]')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec(
'test[:33%]+train[1:-1]'))
ds = datasets.load_dataset('mnist', split=(
datasets.ReadInstruction('test', to=33, unit='%') +
datasets.ReadInstruction('train', from_=1, to=-1, unit='abs')))

# The following lines are equivalent:
ds = datasets.load_dataset('mnist', split='test[:33%](pct1_dropremainder)')
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction.from_spec(
'test[:33%](pct1_dropremainder)'))
ds = datasets.load_dataset('mnist', split=datasets.ReadInstruction(
'test', from_=0, to=33, unit='%', rounding="pct1_dropremainder"))

# 10-fold validation:
tests = datasets.load_dataset(
'mnist',
[datasets.ReadInstruction('train', from_=k, to=k+10, unit='%')
for k in range(0, 100, 10)])
trains = datasets.load_dataset(
'mnist',
[datasets.ReadInstruction('train', to=k, unit='%') + datasets.ReadInstruction('train', from_=k+10, unit='%')
for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%]&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(<span class="hljs-string">&#x27;test[:33%]&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&#x27;test&#x27;</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(
<span class="hljs-string">&#x27;test&#x27;</span>, from_=<span class="hljs-number">0</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>))

<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%]+train[1:-1]&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(
<span class="hljs-string">&#x27;test[:33%]+train[1:-1]&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=(
datasets.ReadInstruction(<span class="hljs-string">&#x27;test&#x27;</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>) +
datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=<span class="hljs-number">1</span>, to=-<span class="hljs-number">1</span>, unit=<span class="hljs-string">&#x27;abs&#x27;</span>)))

<span class="hljs-comment"># The following lines are equivalent:</span>
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=<span class="hljs-string">&#x27;test[:33%](pct1_dropremainder)&#x27;</span>)
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction.from_spec(
<span class="hljs-string">&#x27;test[:33%](pct1_dropremainder)&#x27;</span>))
ds = datasets.load_dataset(<span class="hljs-string">&#x27;mnist&#x27;</span>, split=datasets.ReadInstruction(
<span class="hljs-string">&#x27;test&#x27;</span>, from_=<span class="hljs-number">0</span>, to=<span class="hljs-number">33</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))

<span class="hljs-comment"># 10-fold validation:</span>
tests = datasets.load_dataset(
<span class="hljs-string">&#x27;mnist&#x27;</span>,
[datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>)
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
trains = datasets.load_dataset(
<span class="hljs-string">&#x27;mnist&#x27;</span>,
[datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, to=k, unit=<span class="hljs-string">&#x27;%&#x27;</span>) + datasets.ReadInstruction(<span class="hljs-string">&#x27;train&#x27;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&#x27;%&#x27;</span>)
<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}),{c(){d=n("p"),h=m("Examples:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Examples:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function Um(k){let d,h,f,l,u;return l=new N({props:{code:'VERSION = datasets.Version("1.0.0")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>VERSION = datasets.Version(<span class="hljs-string">&quot;1.0.0&quot;</span>)'}}),{c(){d=n("p"),h=m("Example:"),f=p(),v(l.$$.fragment)},l(t){d=r(t,"P",{});var i=o(d);h=g(i,"Example:"),i.forEach(a),f=c(t),b(l.$$.fragment,t)},m(t,i){$(t,d,i),e(d,h),$(t,f,i),x(l,t,i),u=!0},p:B,i(t){u||(w(l.$$.fragment,t),u=!0)},o(t){E(l.$$.fragment,t),u=!1},d(t){t&&a(d),t&&a(f),D(l,t)}}}function zm(k){let d,h,f,l,u,t,i,os,zr,rr,$e,Ve,ls,wt,Gr,ds,Hr,or,Y,Wr,xa,Xr,Jr,wa,Kr,Yr,lr,T,Et,Qr,is,Zr,eo,Ea,ps,to,ao,so,ve,Dt,no,cs,ro,oo,lo,yt,io,ms,po,co,mo,be,go,gs,fo,uo,fs,ho,_o,$o,W,us,vo,bo,hs,xo,wo,_s,Eo,Do,$s,yo,ko,jo,Q,kt,To,vs,So,Io,Me,Bo,Z,jt,No,bs,Po,Ro,Fe,Co,ee,Tt,Lo,xs,Ao,Oo,Ue,qo,te,St,Vo,ws,Mo,Fo,ze,Uo,Ge,It,zo,Es,Go,dr,J,Bt,Ho,Ds,Wo,Xo,ae,ys,Jo,Ko,ks,Yo,Qo,js,Zo,el,ir,xe,Nt,tl,Ts,al,pr,we,Pt,sl,Ss,nl,cr,U,Rt,rl,Ct,ol,Da,ll,dl,il,Lt,pl,ya,cl,ml,gl,se,At,fl,Is,ul,hl,Ee,Bs,_l,$l,Ns,vl,bl,Ps,xl,mr,De,He,Rs,Ot,wl,Cs,El,gr,P,qt,Dl,X,Vt,yl,Ls,kl,jl,ye,Tl,As,Sl,Il,Os,Bl,Nl,Pl,We,Rl,ne,Mt,Cl,qs,Ll,Al,Xe,Ol,re,Ft,ql,Ut,Vl,Vs,Ml,Fl,Ul,Je,zl,oe,zt,Gl,Ms,Hl,Wl,Ke,Xl,le,Gt,Jl,Fs,Kl,Yl,Ye,Ql,de,Ht,Zl,Us,ed,td,Qe,ad,Ze,Wt,sd,zs,nd,fr,C,Xt,rd,z,od,Gs,ld,dd,Hs,id,pd,Ws,cd,md,Xs,gd,fd,ud,ie,Jt,hd,Js,_d,$d,et,vd,pe,Kt,bd,Ks,xd,wd,tt,Ed,ce,Yt,Dd,Ys,yd,kd,at,jd,me,Qt,Td,Qs,Sd,Id,st,Bd,ge,Zt,Nd,Zs,Pd,Rd,nt,ur,ke,ea,Cd,en,Ld,hr,q,ta,Ad,ka,tn,Od,qd,Vd,aa,Md,an,Fd,Ud,zd,sn,Gd,Hd,sa,nn,je,_r,Wd,rn,Xd,Jd,on,Kd,Yd,Te,Se,ja,ln,Qd,Zd,ei,dn,ti,ai,pn,si,ni,Ie,cn,mn,ri,oi,gn,li,di,fn,ii,pi,Be,un,hn,ci,mi,_n,gi,fi,$n,ui,$r,Ne,rt,vn,na,hi,bn,_i,vr,G,ra,$i,xn,vi,bi,Pe,xi,wn,wi,Ei,En,Di,yi,ki,ot,br,L,oa,ji,Ta,Dn,Ti,Si,Ii,yn,Bi,Ni,K,Sa,kn,Pi,Ri,Ci,Ia,jn,Li,Ai,Oi,Ba,Tn,qi,Vi,Mi,Na,Sn,Fi,Ui,zi,Pa,Gi,In,Hi,Wi,la,Xi,Bn,Ji,Ki,Yi,lt,xr,R,da,Qi,Nn,Zi,ep,dt,tp,Pn,ap,sp,it,np,Rn,rp,op,pt,lp,ct,wr,Re,ia,dp,Cn,ip,Er,V,pa,pp,Ln,cp,mp,mt,gp,gt,ca,fp,An,up,hp,fe,ma,_p,On,$p,vp,qn,bp,Dr,Ce,ft,Vn,ga,xp,Mn,wp,yr,H,fa,Ep,Fn,Dp,yp,ut,kp,ht,ua,jp,Un,Tp,kr;return t=new nr({}),wt=new nr({}),Et=new j({props:{name:"class datasets.DatasetBuilder",anchor:"datasets.DatasetBuilder",parameters:[{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"hash",val:": typing.Optional[str] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"repo_id",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, list, dict, datasets.data_files.DataFilesDict, NoneType] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"name",val:" = 'deprecated'"},{name:"**config_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetBuilder.cache_dir",description:"<strong>cache_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014; Directory to cache data. Defaults to <code>&quot;~/.cache/huggingface/datasets&quot;</code>.",name:"cache_dir"},{anchor:"datasets.DatasetBuilder.config_name",description:`<strong>config_name</strong> (<em>str</em>, <em>optional</em>) &#x2014; Name of the dataset configuration.
It affects the data generated on disk: different configurations will have their own subdirectories and
versions.
If not provided, the default configuration is used (if it exists).</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.3.0</p>
						
<p>Parameter <em>name</em> was renamed to <em>config_name</em>.</p>

					</div>`,name:"config_name"},{anchor:"datasets.DatasetBuilder.hash",description:`<strong>hash</strong> (<em>str</em>, <em>optional</em>) &#x2014; Hash specific to the dataset code. Used to update the caching directory when the
dataset loading script code is updated (to avoid reusing old data).
The typical caching directory (defined in <code>self._relative_data_dir</code>) is: <code>name/version/hash/</code>.`,name:"hash"},{anchor:"datasets.DatasetBuilder.base_path",description:`<strong>base_path</strong> (<em>str</em>, <em>optional</em>) &#x2014; Base path for relative paths that are used to download files.
This can be a remote URL.`,name:"base_path"},{anchor:"datasets.DatasetBuilder.features",description:`<strong>features</strong> ([<em>Features</em>], <em>optional</em>) &#x2014; Features types to use with this dataset.
It can be used to change the Features types of a dataset, for example.`,name:"features"},{anchor:"datasets.DatasetBuilder.use_auth_token",description:`<strong>use_auth_token</strong> (<em>str</em> or <em>bool</em>, <em>optional</em>) &#x2014; String or boolean to use as Bearer token for remote files on the
Datasets Hub. If <em>True</em>, will get token from <code>&quot;~/.huggingface&quot;</code>.`,name:"use_auth_token"},{anchor:"datasets.DatasetBuilder.repo_id",description:`<strong>repo_id</strong> (<em>str</em>, <em>optional</em>) &#x2014; ID of the dataset repository.
Used to distinguish builders with the same name but not coming from the same namespace, for example &#x201C;squad&#x201D;
and &#x201C;lhoestq/squad&#x201D; repo IDs. In the latter, the builder name would be &#x201C;lhoestq___squad&#x201D;.`,name:"repo_id"},{anchor:"datasets.DatasetBuilder.data_files",description:`<strong>data_files</strong> (<em>str</em> or <em>Sequence</em> or <em>Mapping</em>, <em>optional</em>) &#x2014; Path(s) to source data file(s).
For builders like &#x201C;csv&#x201D; or &#x201C;json&#x201D; that need the user to specify data files. They can be either
local or remote files. For convenience, you can use a DataFilesDict.`,name:"data_files"},{anchor:"datasets.DatasetBuilder.data_dir",description:`<strong>data_dir</strong> (<em>str</em>, <em>optional</em>) &#x2014; Path to directory containing source data file(s).
Use only if <em>data_files</em> is not passed, in which case it is equivalent to passing
<code>os.path.join(data_dir, &quot;**&quot;)</code> as <em>data_files</em>.
For builders that require manual download, it must be the path to the local directory containing the
manually downloaded data.`,name:"data_dir"},{anchor:"datasets.DatasetBuilder.name",description:`<strong>name</strong> (<em>str</em>) &#x2014; Configuration name for the dataset.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						<p class="font-medium">Deprecated in 2.3.0</p>
						
<p>Use <em>config_name</em> instead.</p>

					</div>`,name:"name"},{anchor:"datasets.DatasetBuilder.*config_kwargs",description:`*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the corresponding builder
configuration class, set on the class attribute [<em>DatasetBuilder.BUILDER_CONFIG_CLASS</em>]. The builder
configuration class is [<em>BuilderConfig</em>] or a subclass of it.`,name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L181"}}),kt=new j({props:{name:"as_dataset",anchor:"datasets.DatasetBuilder.as_dataset",parameters:[{name:"split",val:": typing.Optional[datasets.splits.Split] = None"},{name:"run_post_process",val:" = True"},{name:"ignore_verifications",val:" = False"},{name:"in_memory",val:" = False"}],parametersDescription:[{anchor:"datasets.DatasetBuilder.as_dataset.split",description:"<strong>split</strong> (<code>datasets.Split</code>) &#x2014; Which subset of the data to return.",name:"split"},{anchor:"datasets.DatasetBuilder.as_dataset.run_post_process",description:`<strong>run_post_process</strong> (bool, default=True) &#x2014; Whether to run post-processing dataset transforms and/or add
indexes.`,name:"run_post_process"},{anchor:"datasets.DatasetBuilder.as_dataset.ignore_verifications",description:`<strong>ignore_verifications</strong> (bool, default=False) &#x2014; Whether to ignore the verifications of the
downloaded/processed dataset information (checksums/size/splits/&#x2026;).`,name:"ignore_verifications"},{anchor:"datasets.DatasetBuilder.as_dataset.in_memory",description:"<strong>in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L849",returnDescription:`
<p>datasets.Dataset</p>
`}}),Me=new I({props:{anchor:"datasets.DatasetBuilder.as_dataset.example",$$slots:{default:[xm]},$$scope:{ctx:k}}}),jt=new j({props:{name:"download_and_prepare",anchor:"datasets.DatasetBuilder.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"download_mode",val:": typing.Optional[datasets.download.download_manager.DownloadMode] = None"},{name:"ignore_verifications",val:": bool = False"},{name:"try_from_hf_gcs",val:": bool = True"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"**download_and_prepare_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetBuilder.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; specific download configuration parameters.',name:"download_config"},{anchor:"datasets.DatasetBuilder.download_and_prepare.download_mode",description:'<strong>download_mode</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadMode">DownloadMode</a>, optional) &#x2014; select the download/generate mode - Default to <code>REUSE_DATASET_IF_EXISTS</code>',name:"download_mode"},{anchor:"datasets.DatasetBuilder.download_and_prepare.ignore_verifications",description:"<strong>ignore_verifications</strong> (<code>bool</code>) &#x2014; Ignore the verifications of the downloaded/processed dataset information (checksums/size/splits/&#x2026;)",name:"ignore_verifications"},{anchor:"datasets.DatasetBuilder.download_and_prepare.try_from_hf_gcs",description:"<strong>try_from_hf_gcs</strong> (<code>bool</code>) &#x2014; If True, it will try to download the already prepared dataset from the Hf google cloud storage",name:"try_from_hf_gcs"},{anchor:"datasets.DatasetBuilder.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; specific Download Manger to use',name:"dl_manager"},{anchor:"datasets.DatasetBuilder.download_and_prepare.base_path",description:`<strong>base_path</strong> (<code>str</code>, optional) &#x2014; base path for relative paths that are used to download files. This can be a remote url.
If not specified, the value of the <em>base_path</em> attribute (<em>self.base_path</em>) will be used instead.`,name:"base_path"},{anchor:"datasets.DatasetBuilder.download_and_prepare.use_auth_token",description:`<strong>use_auth_token</strong> (<code>Union[str, bool]</code>, optional) &#x2014; Optional string or boolean to use as Bearer token for remote files on the Datasets Hub.
If True, will get token from ~/.huggingface.`,name:"use_auth_token"},{anchor:"datasets.DatasetBuilder.download_and_prepare.*download_and_prepare_kwargs",description:"*<strong>*download_and_prepare_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments.",name:"*download_and_prepare_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L571"}}),Fe=new I({props:{anchor:"datasets.DatasetBuilder.download_and_prepare.example",$$slots:{default:[wm]},$$scope:{ctx:k}}}),Tt=new j({props:{name:"get_all_exported_dataset_infos",anchor:"datasets.DatasetBuilder.get_all_exported_dataset_infos",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L375"}}),Ue=new I({props:{anchor:"datasets.DatasetBuilder.get_all_exported_dataset_infos.example",$$slots:{default:[Em]},$$scope:{ctx:k}}}),St=new j({props:{name:"get_exported_dataset_info",anchor:"datasets.DatasetBuilder.get_exported_dataset_info",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L393"}}),ze=new I({props:{anchor:"datasets.DatasetBuilder.get_exported_dataset_info.example",$$slots:{default:[Dm]},$$scope:{ctx:k}}}),It=new j({props:{name:"get_imported_module_dir",anchor:"datasets.DatasetBuilder.get_imported_module_dir",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L566"}}),Bt=new j({props:{name:"class datasets.GeneratorBasedBuilder",anchor:"datasets.GeneratorBasedBuilder",parameters:[{name:"*args",val:""},{name:"writer_batch_size",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L1135"}}),Nt=new j({props:{name:"class datasets.BeamBasedBuilder",anchor:"datasets.BeamBasedBuilder",parameters:[{name:"*args",val:""},{name:"beam_runner",val:" = None"},{name:"beam_options",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L1295"}}),Pt=new j({props:{name:"class datasets.ArrowBasedBuilder",anchor:"datasets.ArrowBasedBuilder",parameters:[{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"hash",val:": typing.Optional[str] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"repo_id",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Union[str, list, dict, datasets.data_files.DataFilesDict, NoneType] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"name",val:" = 'deprecated'"},{name:"**config_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L1233"}}),Rt=new j({props:{name:"class datasets.BuilderConfig",anchor:"datasets.BuilderConfig",parameters:[{name:"name",val:": str = 'default'"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = 0.0.0"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"data_files",val:": typing.Optional[datasets.data_files.DataFilesDict] = None"},{name:"description",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.BuilderConfig.name",description:"<strong>name</strong> (<code>str</code>, default <code>&quot;default&quot;</code>) &#x2014;",name:"name"},{anchor:"datasets.BuilderConfig.version",description:'<strong>version</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.Version">Version</a> or <code>str</code>, optional) &#x2014;',name:"version"},{anchor:"datasets.BuilderConfig.data_dir",description:"<strong>data_dir</strong> (<code>str</code>, optional) &#x2014;",name:"data_dir"},{anchor:"datasets.BuilderConfig.data_files",description:"<strong>data_files</strong> (<code>str</code> or <code>Sequence</code> or <code>Mapping</code>, optional) &#x2014; Path(s) to source data file(s).",name:"data_files"},{anchor:"datasets.BuilderConfig.description",description:"<strong>description</strong> (<code>str</code>, optional) &#x2014;",name:"description"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L86"}}),At=new j({props:{name:"create_config_id",anchor:"datasets.BuilderConfig.create_config_id",parameters:[{name:"config_kwargs",val:": dict"},{name:"custom_features",val:": typing.Optional[datasets.features.features.Features] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/builder.py#L124"}}),Ot=new nr({}),qt=new j({props:{name:"class datasets.DownloadManager",anchor:"datasets.DownloadManager",parameters:[{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"base_path",val:": typing.Optional[str] = None"},{name:"record_checksums",val:" = True"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L148"}}),Vt=new j({props:{name:"download",anchor:"datasets.DownloadManager.download",parameters:[{name:"url_or_urls",val:""}],parametersDescription:[{anchor:"datasets.DownloadManager.download.url_or_urls",description:"<strong>url_or_urls</strong> (<code>str</code> or <code>list</code> or <code>dict</code>) &#x2014; URL or list/dict of URLs to download. Each URL is a <code>str</code>.",name:"url_or_urls"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L280",returnDescription:`
<p>The downloaded paths matching the given input <code>url_or_urls</code>.</p>
`,returnType:`
<p><code>str</code> or <code>list</code> or <code>dict</code></p>
`}}),We=new I({props:{anchor:"datasets.DownloadManager.download.example",$$slots:{default:[ym]},$$scope:{ctx:k}}}),Mt=new j({props:{name:"download_and_extract",anchor:"datasets.DownloadManager.download_and_extract",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L417",returnDescription:`
<p><code>str</code>, extracted paths of given URL(s).</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),Xe=new I({props:{anchor:"datasets.DownloadManager.download_and_extract.example",$$slots:{default:[km]},$$scope:{ctx:k}}}),Ft=new j({props:{name:"download_custom",anchor:"datasets.DownloadManager.download_custom",parameters:[{name:"url_or_urls",val:""},{name:"custom_download",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L233",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),Je=new I({props:{anchor:"datasets.DownloadManager.download_custom.example",$$slots:{default:[jm]},$$scope:{ctx:k}}}),zt=new j({props:{name:"extract",anchor:"datasets.DownloadManager.extract",parameters:[{name:"path_or_paths",val:""},{name:"num_proc",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L380",returnDescription:`
<p><code>str</code>, The extracted paths matching the given input
path_or_paths.</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),Ke=new I({props:{anchor:"datasets.DownloadManager.extract.example",$$slots:{default:[Tm]},$$scope:{ctx:k}}}),Gt=new j({props:{name:"iter_archive",anchor:"datasets.DownloadManager.iter_archive",parameters:[{name:"path_or_buf",val:": typing.Union[str, _io.BufferedReader]"}],parametersDescription:[{anchor:"datasets.DownloadManager.iter_archive.path_or_buf",description:"<strong>path_or_buf</strong> (<code>str</code> or <code>io.BufferedReader</code>) &#x2014; Archive path or archive binary file object.",name:"path_or_buf"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L339",returnType:"\n<p><code>tuple</code>[<code>str`, `io.BufferedReader</code>]</p>\n",isYield:!0}}),Ye=new I({props:{anchor:"datasets.DownloadManager.iter_archive.example",$$slots:{default:[Sm]},$$scope:{ctx:k}}}),Ht=new j({props:{name:"iter_files",anchor:"datasets.DownloadManager.iter_files",parameters:[{name:"paths",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DownloadManager.iter_files.paths",description:"<strong>paths</strong> (<code>str</code> or <code>list</code> of <code>str</code>) &#x2014; Root paths.",name:"paths"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L362",returnType:`
<p>str</p>
`,isYield:!0}}),Qe=new I({props:{anchor:"datasets.DownloadManager.iter_files.example",$$slots:{default:[Im]},$$scope:{ctx:k}}}),Wt=new j({props:{name:"ship_files_with_pipeline",anchor:"datasets.DownloadManager.ship_files_with_pipeline",parameters:[{name:"downloaded_path_or_paths",val:""},{name:"pipeline",val:""}],parametersDescription:[{anchor:"datasets.DownloadManager.ship_files_with_pipeline.downloaded_path_or_paths",description:`<strong>downloaded_path_or_paths</strong> (<code>str</code> or <code>list[str]</code> or <code>dict[str, str]</code>) &#x2014; Nested structure containing the
downloaded path(s).`,name:"downloaded_path_or_paths"},{anchor:"datasets.DownloadManager.ship_files_with_pipeline.pipeline",description:"<strong>pipeline</strong> (<code>utils.beam_utils.BeamPipeline</code>) &#x2014; Apache Beam Pipeline.",name:"pipeline"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L190",returnDescription:`
<p><code>str</code> or <code>list[str]</code> or <code>dict[str, str]</code></p>
`}}),Xt=new j({props:{name:"class datasets.StreamingDownloadManager",anchor:"datasets.StreamingDownloadManager",parameters:[{name:"dataset_name",val:": typing.Optional[str] = None"},{name:"data_dir",val:": typing.Optional[str] = None"},{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"base_path",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L834"}}),Jt=new j({props:{name:"download",anchor:"datasets.StreamingDownloadManager.download",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L860",returnDescription:`
<p><code>str</code>, The downloaded paths matching the given input
url_or_urls.</p>
`,returnType:`
<p>downloaded_path(s)</p>
`}}),et=new I({props:{anchor:"datasets.StreamingDownloadManager.download.example",$$slots:{default:[Bm]},$$scope:{ctx:k}}}),Kt=new j({props:{name:"download_and_extract",anchor:"datasets.StreamingDownloadManager.download_and_extract",parameters:[{name:"url_or_urls",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L928",returnDescription:`
<p><code>str</code>, extracted paths of given URL(s).</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),tt=new I({props:{anchor:"datasets.StreamingDownloadManager.download_and_extract.example",$$slots:{default:[Nm]},$$scope:{ctx:k}}}),Yt=new j({props:{name:"extract",anchor:"datasets.StreamingDownloadManager.extract",parameters:[{name:"path_or_paths",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L887",returnDescription:`
<p><code>str</code>, The extracted paths matching the given input
path_or_paths.</p>
`,returnType:`
<p>extracted_path(s)</p>
`}}),at=new I({props:{anchor:"datasets.StreamingDownloadManager.extract.example",$$slots:{default:[Pm]},$$scope:{ctx:k}}}),Qt=new j({props:{name:"iter_archive",anchor:"datasets.StreamingDownloadManager.iter_archive",parameters:[{name:"urlpath_or_buf",val:": typing.Union[str, _io.BufferedReader]"}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.iter_archive.urlpath_or_buf",description:"<strong>urlpath_or_buf</strong> (<code>str</code> or <code>io.BufferedReader</code>) &#x2014; Archive path or archive binary file object.",name:"urlpath_or_buf"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L946",returnType:"\n<p><code>tuple</code>[<code>str`, `io.BufferedReader</code>]</p>\n",isYield:!0}}),st=new I({props:{anchor:"datasets.StreamingDownloadManager.iter_archive.example",$$slots:{default:[Rm]},$$scope:{ctx:k}}}),Zt=new j({props:{name:"iter_files",anchor:"datasets.StreamingDownloadManager.iter_files",parameters:[{name:"urlpaths",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.StreamingDownloadManager.iter_files.urlpaths",description:"<strong>urlpaths</strong> (<code>str</code> or <code>list</code> of <code>str</code>) &#x2014; Root paths.",name:"urlpaths"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/streaming_download_manager.py#L969",returnType:`
<p>str</p>
`,isYield:!0}}),nt=new I({props:{anchor:"datasets.StreamingDownloadManager.iter_files.example",$$slots:{default:[Cm]},$$scope:{ctx:k}}}),ea=new j({props:{name:"class datasets.DownloadConfig",anchor:"datasets.DownloadConfig",parameters:[{name:"cache_dir",val:": typing.Union[str, pathlib.Path, NoneType] = None"},{name:"force_download",val:": bool = False"},{name:"resume_download",val:": bool = False"},{name:"local_files_only",val:": bool = False"},{name:"proxies",val:": typing.Optional[typing.Dict] = None"},{name:"user_agent",val:": typing.Optional[str] = None"},{name:"extract_compressed_file",val:": bool = False"},{name:"force_extract",val:": bool = False"},{name:"delete_extracted",val:": bool = False"},{name:"use_etag",val:": bool = True"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"max_retries",val:": int = 1"},{name:"use_auth_token",val:": typing.Union[bool, str, NoneType] = None"},{name:"ignore_url_params",val:": bool = False"},{name:"download_desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DownloadConfig.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>Path</code>, optional) &#x2014; Specify a cache directory to save the file to (overwrite the
default cache dir).`,name:"cache_dir"},{anchor:"datasets.DownloadConfig.force_download",description:`<strong>force_download</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True, re-dowload the file even if it&#x2019;s already cached in
the cache dir.`,name:"force_download"},{anchor:"datasets.DownloadConfig.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True, resume the download if incompletly recieved file is
found.`,name:"resume_download"},{anchor:"datasets.DownloadConfig.proxies",description:"<strong>proxies</strong> (<code>dict</code>, optional) &#x2014;",name:"proxies"},{anchor:"datasets.DownloadConfig.user_agent",description:`<strong>user_agent</strong> (<code>str</code>, optional) &#x2014; Optional string or dict that will be appended to the user-agent on remote
requests.`,name:"user_agent"},{anchor:"datasets.DownloadConfig.extract_compressed_file",description:`<strong>extract_compressed_file</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True and the path point to a zip or tar file,
extract the compressed file in a folder along the archive.`,name:"extract_compressed_file"},{anchor:"datasets.DownloadConfig.force_extract",description:`<strong>force_extract</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If True when extract_compressed_file is True and the archive
was already extracted, re-extract the archive and override the folder where it was extracted.`,name:"force_extract"},{anchor:"datasets.DownloadConfig.delete_extracted",description:"<strong>delete_extracted</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to delete (or keep) the extracted files.",name:"delete_extracted"},{anchor:"datasets.DownloadConfig.use_etag",description:"<strong>use_etag</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to use the ETag HTTP response header to validate the cached files.",name:"use_etag"},{anchor:"datasets.DownloadConfig.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; The number of processes to launch to download the files in parallel.",name:"num_proc"},{anchor:"datasets.DownloadConfig.max_retries",description:"<strong>max_retries</strong> (<code>int</code>, default <code>1</code>) &#x2014; The number of times to retry an HTTP request if it fails.",name:"max_retries"},{anchor:"datasets.DownloadConfig.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <code>bool</code>, optional) &#x2014; Optional string or boolean to use as Bearer token
for remote files on the Datasets Hub. If True, will get token from ~/.huggingface.`,name:"use_auth_token"},{anchor:"datasets.DownloadConfig.ignore_url_params",description:`<strong>ignore_url_params</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to strip all query parameters and #fragments from
the download URL before using it for caching the file.`,name:"ignore_url_params"},{anchor:"datasets.DownloadConfig.download_desc",description:"<strong>download_desc</strong> (<code>str</code>, optional) &#x2014; A description to be displayed alongside with the progress bar while downloading the files.",name:"download_desc"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_config.py#L8"}}),ta=new j({props:{name:"class datasets.DownloadMode",anchor:"datasets.DownloadMode",parameters:[{name:"value",val:""},{name:"names",val:" = None"},{name:"module",val:" = None"},{name:"qualname",val:" = None"},{name:"type",val:" = None"},{name:"start",val:" = 1"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/download/download_manager.py#L39"}}),na=new nr({}),ra=new j({props:{name:"class datasets.SplitGenerator",anchor:"datasets.SplitGenerator",parameters:[{name:"name",val:": str"},{name:"gen_kwargs",val:": typing.Dict = <factory>"}],parametersDescription:[{anchor:"datasets.SplitGenerator.name",description:`<strong>name</strong> (str) &#x2014; Name of the Split for which the generator will
create the examples.
**gen_kwargs &#x2014; Keyword arguments to forward to the <code>DatasetBuilder._generate_examples</code> method
of the builder.`,name:"name"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/splits.py#L569"}}),ot=new I({props:{anchor:"datasets.SplitGenerator.example",$$slots:{default:[Lm]},$$scope:{ctx:k}}}),oa=new j({props:{name:"class datasets.Split",anchor:"datasets.Split",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/splits.py#L390"}}),lt=new I({props:{anchor:"datasets.Split.example",$$slots:{default:[Am]},$$scope:{ctx:k}}}),da=new j({props:{name:"class datasets.NamedSplit",anchor:"datasets.NamedSplit",parameters:[{name:"name",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/splits.py#L303"}}),dt=new I({props:{anchor:"datasets.NamedSplit.example",$$slots:{default:[Om]},$$scope:{ctx:k}}}),it=new I({props:{anchor:"datasets.NamedSplit.example-2",$$slots:{default:[qm]},$$scope:{ctx:k}}}),pt=new I({props:{anchor:"datasets.NamedSplit.example-3",$$slots:{default:[Vm]},$$scope:{ctx:k}}}),ct=new I({props:{anchor:"datasets.NamedSplit.example-4",$$slots:{default:[Mm]},$$scope:{ctx:k}}}),ia=new j({props:{name:"class datasets.NamedSplitAll",anchor:"datasets.NamedSplitAll",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/splits.py#L375"}}),pa=new j({props:{name:"class datasets.ReadInstruction",anchor:"datasets.ReadInstruction",parameters:[{name:"split_name",val:""},{name:"rounding",val:" = None"},{name:"from_",val:" = None"},{name:"to",val:" = None"},{name:"unit",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_reader.py#L457"}}),mt=new I({props:{anchor:"datasets.ReadInstruction.example",$$slots:{default:[Fm]},$$scope:{ctx:k}}}),ca=new j({props:{name:"from_spec",anchor:"datasets.ReadInstruction.from_spec",parameters:[{name:"spec",val:""}],parametersDescription:[{anchor:"datasets.ReadInstruction.from_spec.spec",description:`<strong>spec</strong> (str) &#x2014; split(s) + optional slice(s) to read + optional rounding
if percents are used as the slicing unit. A slice can be specified,
using absolute numbers (int) or percentages (int). E.g.
<code>test</code>: test split.
<code>test + validation</code>: test split + validation split.
<code>test[10:]</code>: test split, minus its first 10 records.
<code>test[:10%]</code>: first 10% records of test split.
<code>test[:20%](pct1_dropremainder)</code>: first 10% records, rounded with
the <code>pct1_dropremainder</code> rounding.
<code>test[:-5%]+train[40%:60%]</code>: first 95% of test + middle 20% of
train.`,name:"spec"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_reader.py#L537",returnDescription:`
<p>ReadInstruction instance.</p>
`}}),ma=new j({props:{name:"to_absolute",anchor:"datasets.ReadInstruction.to_absolute",parameters:[{name:"name2len",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_reader.py#L605",returnDescription:`
<p>list of _AbsoluteInstruction instances (corresponds to the + in spec).</p>
`}}),ga=new nr({}),fa=new j({props:{name:"class datasets.Version",anchor:"datasets.Version",parameters:[{name:"version_str",val:": str"},{name:"description",val:": typing.Optional[str] = None"},{name:"major",val:": typing.Union[str, int, NoneType] = None"},{name:"minor",val:": typing.Union[str, int, NoneType] = None"},{name:"patch",val:": typing.Union[str, int, NoneType] = None"}],parametersDescription:[{anchor:"datasets.Version.version_str",description:"<strong>version_str</strong> (<code>str</code>) &#x2014; Eg: &#x201C;1.2.3&#x201D;.",name:"version_str"},{anchor:"datasets.Version.description",description:"<strong>description</strong> (<code>str</code>) &#x2014; A description of what is new in this version.",name:"description"},{anchor:"datasets.Version.version_str",description:"<strong>version_str</strong> (<code>str</code>) &#x2014; Eg: &#x201C;1.2.3&#x201D;.",name:"version_str"},{anchor:"datasets.Version.description",description:"<strong>description</strong> (<code>str</code>) &#x2014; A description of what is new in this version.",name:"description"},{anchor:"datasets.Version.major",description:"<strong>major</strong> (<code>str</code>) &#x2014;",name:"major"},{anchor:"datasets.Version.minor",description:"<strong>minor</strong> (<code>str</code>) &#x2014;",name:"minor"},{anchor:"datasets.Version.patch",description:"<strong>patch</strong> (<code>str</code>) &#x2014;",name:"patch"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/utils/version.py#L30"}}),ut=new I({props:{anchor:"datasets.Version.example",$$slots:{default:[Um]},$$scope:{ctx:k}}}),ua=new j({props:{name:"match",anchor:"datasets.Version.match",parameters:[{name:"other_version",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/utils/version.py#L101"}}),{c(){d=n("meta"),h=p(),f=n("h1"),l=n("a"),u=n("span"),v(t.$$.fragment),i=p(),os=n("span"),zr=m("Builder classes"),rr=p(),$e=n("h2"),Ve=n("a"),ls=n("span"),v(wt.$$.fragment),Gr=p(),ds=n("span"),Hr=m("Builders"),or=p(),Y=n("p"),Wr=m("\u{1F917} Datasets relies on two main classes during the dataset building process: "),xa=n("a"),Xr=m("DatasetBuilder"),Jr=m(" and "),wa=n("a"),Kr=m("BuilderConfig"),Yr=m("."),lr=p(),T=n("div"),v(Et.$$.fragment),Qr=p(),is=n("p"),Zr=m("Abstract base class for all datasets."),eo=p(),Ea=n("p"),ps=n("em"),to=m("DatasetBuilder"),ao=m(" has 3 key methods:"),so=p(),ve=n("ul"),Dt=n("li"),no=m("["),cs=n("em"),ro=m("DatasetBuilder.info"),oo=m(`]: Documents the dataset, including feature
names, types, and shapes, version, splits, citation, etc.`),lo=p(),yt=n("li"),io=m("["),ms=n("em"),po=m("DatasetBuilder.download_and_prepare"),co=m(`]: Downloads the source data
and writes it to disk.`),mo=p(),be=n("li"),go=m("["),gs=n("em"),fo=m("DatasetBuilder.as_dataset"),uo=m("]: Generates a ["),fs=n("em"),ho=m("Dataset"),_o=m("]."),$o=p(),W=n("p"),us=n("strong"),vo=m("Configuration"),bo=m(": Some "),hs=n("em"),xo=m("DatasetBuilder"),wo=m(`s expose multiple variants of the
dataset by defining a [`),_s=n("em"),Eo=m("BuilderConfig"),Do=m(`] subclass and accepting a
config object (or name) on construction. Configurable datasets expose a
pre-defined set of configurations in [`),$s=n("em"),yo=m("DatasetBuilder.builder_configs"),ko=m("]."),jo=p(),Q=n("div"),v(kt.$$.fragment),To=p(),vs=n("p"),So=m("Return a Dataset for the specified split."),Io=p(),v(Me.$$.fragment),Bo=p(),Z=n("div"),v(jt.$$.fragment),No=p(),bs=n("p"),Po=m("Downloads and prepares dataset for reading."),Ro=p(),v(Fe.$$.fragment),Co=p(),ee=n("div"),v(Tt.$$.fragment),Lo=p(),xs=n("p"),Ao=m("Empty dict if doesn\u2019t exist"),Oo=p(),v(Ue.$$.fragment),qo=p(),te=n("div"),v(St.$$.fragment),Vo=p(),ws=n("p"),Mo=m("Empty DatasetInfo if doesn\u2019t exist"),Fo=p(),v(ze.$$.fragment),Uo=p(),Ge=n("div"),v(It.$$.fragment),zo=p(),Es=n("p"),Go=m("Return the path of the module of this class or subclass."),dr=p(),J=n("div"),v(Bt.$$.fragment),Ho=p(),Ds=n("p"),Wo=m("Base class for datasets with data generation based on dict generators."),Xo=p(),ae=n("p"),ys=n("code"),Jo=m("GeneratorBasedBuilder"),Ko=m(` is a convenience class that abstracts away much
of the data writing and reading of `),ks=n("code"),Yo=m("DatasetBuilder"),Qo=m(`. It expects subclasses to
implement generators of feature dictionaries across the dataset splits
(`),js=n("code"),Zo=m("_split_generators"),el=m("). See the method docstrings for details."),ir=p(),xe=n("div"),v(Nt.$$.fragment),tl=p(),Ts=n("p"),al=m("Beam based Builder."),pr=p(),we=n("div"),v(Pt.$$.fragment),sl=p(),Ss=n("p"),nl=m("Base class for datasets with data generation based on Arrow loading functions (CSV/JSON/Parquet)."),cr=p(),U=n("div"),v(Rt.$$.fragment),rl=p(),Ct=n("p"),ol=m("Base class for "),Da=n("a"),ll=m("DatasetBuilder"),dl=m(" data configuration."),il=p(),Lt=n("p"),pl=m(`DatasetBuilder subclasses with data configuration options should subclass
`),ya=n("a"),cl=m("BuilderConfig"),ml=m(" and add their own properties."),gl=p(),se=n("div"),v(At.$$.fragment),fl=p(),Is=n("p"),ul=m(`The config id is used to build the cache directory.
By default it is equal to the config name.
However the name of a config is not sufficient to have a unique identifier for the dataset being generated
since it doesn\u2019t take into account:`),hl=p(),Ee=n("ul"),Bs=n("li"),_l=m("the config kwargs that can be used to overwrite attributes"),$l=p(),Ns=n("li"),vl=m("the custom features used to write the dataset"),bl=p(),Ps=n("li"),xl=m(`the data_files for json/text/csv/pandas datasets
Therefore the config id is just the config name with an optional suffix based on these.`),mr=p(),De=n("h2"),He=n("a"),Rs=n("span"),v(Ot.$$.fragment),wl=p(),Cs=n("span"),El=m("Download"),gr=p(),P=n("div"),v(qt.$$.fragment),Dl=p(),X=n("div"),v(Vt.$$.fragment),yl=p(),Ls=n("p"),kl=m("Download given URL(s)."),jl=p(),ye=n("p"),Tl=m("By default, if there is more than one URL to download, multiprocessing is used with maximum "),As=n("code"),Sl=m("num_proc = 16"),Il=m(`.
Pass customized `),Os=n("code"),Bl=m("download_config.num_proc"),Nl=m(" to change this behavior."),Pl=p(),v(We.$$.fragment),Rl=p(),ne=n("div"),v(Mt.$$.fragment),Cl=p(),qs=n("p"),Ll=m("Download and extract given url_or_urls."),Al=p(),v(Xe.$$.fragment),Ol=p(),re=n("div"),v(Ft.$$.fragment),ql=p(),Ut=n("p"),Vl=m("Download given urls(s) by calling "),Vs=n("code"),Ml=m("custom_download"),Fl=m("."),Ul=p(),v(Je.$$.fragment),zl=p(),oe=n("div"),v(zt.$$.fragment),Gl=p(),Ms=n("p"),Hl=m("Extract given path(s)."),Wl=p(),v(Ke.$$.fragment),Xl=p(),le=n("div"),v(Gt.$$.fragment),Jl=p(),Fs=n("p"),Kl=m("Iterate over files within an archive."),Yl=p(),v(Ye.$$.fragment),Ql=p(),de=n("div"),v(Ht.$$.fragment),Zl=p(),Us=n("p"),ed=m("Iterate over file paths."),td=p(),v(Qe.$$.fragment),ad=p(),Ze=n("div"),v(Wt.$$.fragment),sd=p(),zs=n("p"),nd=m("Ship the files using Beam FileSystems to the pipeline temp dir."),fr=p(),C=n("div"),v(Xt.$$.fragment),rd=p(),z=n("p"),od=m(`Download manager that uses the \u201D::\u201D separator to navigate through (possibly remote) compressed archives.
Contrary to the regular DownloadManager, the `),Gs=n("code"),ld=m("download"),dd=m(" and "),Hs=n("code"),id=m("extract"),pd=m(` methods don\u2019t actually download nor extract
data, but they rather return the path or url that could be opened using the `),Ws=n("code"),cd=m("xopen"),md=m(` function which extends the
builtin `),Xs=n("code"),gd=m("open"),fd=m(" function to stream data from remote files."),ud=p(),ie=n("div"),v(Jt.$$.fragment),hd=p(),Js=n("p"),_d=m("Download given url(s)."),$d=p(),v(et.$$.fragment),vd=p(),pe=n("div"),v(Kt.$$.fragment),bd=p(),Ks=n("p"),xd=m("Download and extract given url_or_urls."),wd=p(),v(tt.$$.fragment),Ed=p(),ce=n("div"),v(Yt.$$.fragment),Dd=p(),Ys=n("p"),yd=m("Extract given path(s)."),kd=p(),v(at.$$.fragment),jd=p(),me=n("div"),v(Qt.$$.fragment),Td=p(),Qs=n("p"),Sd=m("Iterate over files within an archive."),Id=p(),v(st.$$.fragment),Bd=p(),ge=n("div"),v(Zt.$$.fragment),Nd=p(),Zs=n("p"),Pd=m("Iterate over files."),Rd=p(),v(nt.$$.fragment),ur=p(),ke=n("div"),v(ea.$$.fragment),Cd=p(),en=n("p"),Ld=m("Configuration for our cached path manager."),hr=p(),q=n("div"),v(ta.$$.fragment),Ad=p(),ka=n("p"),tn=n("code"),Od=m("Enum"),qd=m(" for how to treat pre-existing downloads and data."),Vd=p(),aa=n("p"),Md=m("The default mode is "),an=n("code"),Fd=m("REUSE_DATASET_IF_EXISTS"),Ud=m(`, which will reuse both
raw downloads and the prepared dataset if they exist.`),zd=p(),sn=n("p"),Gd=m("The generations modes:"),Hd=p(),sa=n("table"),nn=n("thead"),je=n("tr"),_r=n("th"),Wd=p(),rn=n("th"),Xd=m("Downloads"),Jd=p(),on=n("th"),Kd=m("Dataset"),Yd=p(),Te=n("tbody"),Se=n("tr"),ja=n("td"),ln=n("code"),Qd=m("REUSE_DATASET_IF_EXISTS"),Zd=m(" (default)"),ei=p(),dn=n("td"),ti=m("Reuse"),ai=p(),pn=n("td"),si=m("Reuse"),ni=p(),Ie=n("tr"),cn=n("td"),mn=n("code"),ri=m("REUSE_CACHE_IF_EXISTS"),oi=p(),gn=n("td"),li=m("Reuse"),di=p(),fn=n("td"),ii=m("Fresh"),pi=p(),Be=n("tr"),un=n("td"),hn=n("code"),ci=m("FORCE_REDOWNLOAD"),mi=p(),_n=n("td"),gi=m("Fresh"),fi=p(),$n=n("td"),ui=m("Fresh"),$r=p(),Ne=n("h2"),rt=n("a"),vn=n("span"),v(na.$$.fragment),hi=p(),bn=n("span"),_i=m("Splits"),vr=p(),G=n("div"),v(ra.$$.fragment),$i=p(),xn=n("p"),vi=m("Defines the split information for the generator."),bi=p(),Pe=n("p"),xi=m(`This should be used as returned value of
`),wn=n("code"),wi=m("GeneratorBasedBuilder._split_generators()"),Ei=m(`.
See `),En=n("code"),Di=m("GeneratorBasedBuilder._split_generators()"),yi=m(` for more info and example
of usage.`),ki=p(),v(ot.$$.fragment),br=p(),L=n("div"),v(oa.$$.fragment),ji=p(),Ta=n("p"),Dn=n("code"),Ti=m("Enum"),Si=m(" for dataset splits."),Ii=p(),yn=n("p"),Bi=m(`Datasets are typically split into different subsets to be used at various
stages of training and evaluation.`),Ni=p(),K=n("ul"),Sa=n("li"),kn=n("code"),Pi=m("TRAIN"),Ri=m(": the training data."),Ci=p(),Ia=n("li"),jn=n("code"),Li=m("VALIDATION"),Ai=m(`: the validation data. If present, this is typically used as
evaluation data while iterating on a model (e.g. changing hyperparameters,
model architecture, etc.).`),Oi=p(),Ba=n("li"),Tn=n("code"),qi=m("TEST"),Vi=m(`: the testing data. This is the data to report metrics on. Typically
you do not want to use this during model iteration as you may overfit to it.`),Mi=p(),Na=n("li"),Sn=n("code"),Fi=m("ALL"),Ui=m(": the union of all defined dataset splits."),zi=p(),Pa=n("p"),Gi=m("Note: All splits, including compositions inherit from "),In=n("code"),Hi=m("datasets.SplitBase"),Wi=p(),la=n("p"),Xi=m("See the :doc:"),Bn=n("code"),Ji=m("guide on splits </loading>"),Ki=m(" for more information."),Yi=p(),v(lt.$$.fragment),xr=p(),R=n("div"),v(da.$$.fragment),Qi=p(),Nn=n("p"),Zi=m("Descriptor corresponding to a named split (train, test, \u2026)."),ep=p(),v(dt.$$.fragment),tp=p(),Pn=n("p"),ap=m("Warning:"),sp=p(),v(it.$$.fragment),np=p(),Rn=n("p"),rp=m("Warning:"),op=p(),v(pt.$$.fragment),lp=p(),v(ct.$$.fragment),wr=p(),Re=n("div"),v(ia.$$.fragment),dp=p(),Cn=n("p"),ip=m("Split corresponding to the union of all defined dataset splits."),Er=p(),V=n("div"),v(pa.$$.fragment),pp=p(),Ln=n("p"),cp=m("Reading instruction for a dataset."),mp=p(),v(mt.$$.fragment),gp=p(),gt=n("div"),v(ca.$$.fragment),fp=p(),An=n("p"),up=m("Creates a ReadInstruction instance out of a string spec."),hp=p(),fe=n("div"),v(ma.$$.fragment),_p=p(),On=n("p"),$p=m("Translate instruction into a list of absolute instructions."),vp=p(),qn=n("p"),bp=m("Those absolute instructions are then to be added together."),Dr=p(),Ce=n("h2"),ft=n("a"),Vn=n("span"),v(ga.$$.fragment),xp=p(),Mn=n("span"),wp=m("Version"),yr=p(),H=n("div"),v(fa.$$.fragment),Ep=p(),Fn=n("p"),Dp=m("Dataset version MAJOR.MINOR.PATCH."),yp=p(),v(ut.$$.fragment),kp=p(),ht=n("div"),v(ua.$$.fragment),jp=p(),Un=n("p"),Tp=m("Returns True if other_version matches."),this.h()},l(s){const _=vm('[data-svelte="svelte-1phssyn"]',document.head);d=r(_,"META",{name:!0,content:!0}),_.forEach(a),h=c(s),f=r(s,"H1",{class:!0});var ha=o(f);l=r(ha,"A",{id:!0,class:!0,href:!0});var zn=o(l);u=r(zn,"SPAN",{});var Gn=o(u);b(t.$$.fragment,Gn),Gn.forEach(a),zn.forEach(a),i=c(ha),os=r(ha,"SPAN",{});var Hn=o(os);zr=g(Hn,"Builder classes"),Hn.forEach(a),ha.forEach(a),rr=c(s),$e=r(s,"H2",{class:!0});var _a=o($e);Ve=r(_a,"A",{id:!0,class:!0,href:!0});var Wn=o(Ve);ls=r(Wn,"SPAN",{});var Xn=o(ls);b(wt.$$.fragment,Xn),Xn.forEach(a),Wn.forEach(a),Gr=c(_a),ds=r(_a,"SPAN",{});var Jn=o(ds);Hr=g(Jn,"Builders"),Jn.forEach(a),_a.forEach(a),or=c(s),Y=r(s,"P",{});var Le=o(Y);Wr=g(Le,"\u{1F917} Datasets relies on two main classes during the dataset building process: "),xa=r(Le,"A",{href:!0});var Kn=o(xa);Xr=g(Kn,"DatasetBuilder"),Kn.forEach(a),Jr=g(Le," and "),wa=r(Le,"A",{href:!0});var Yn=o(wa);Kr=g(Yn,"BuilderConfig"),Yn.forEach(a),Yr=g(Le,"."),Le.forEach(a),lr=c(s),T=r(s,"DIV",{class:!0});var S=o(T);b(Et.$$.fragment,S),Qr=c(S),is=r(S,"P",{});var Qn=o(is);Zr=g(Qn,"Abstract base class for all datasets."),Qn.forEach(a),eo=c(S),Ea=r(S,"P",{});var Ra=o(Ea);ps=r(Ra,"EM",{});var Zn=o(ps);to=g(Zn,"DatasetBuilder"),Zn.forEach(a),ao=g(Ra," has 3 key methods:"),Ra.forEach(a),so=c(S),ve=r(S,"UL",{});var Ae=o(ve);Dt=r(Ae,"LI",{});var $a=o(Dt);no=g($a,"["),cs=r($a,"EM",{});var er=o(cs);ro=g(er,"DatasetBuilder.info"),er.forEach(a),oo=g($a,`]: Documents the dataset, including feature
names, types, and shapes, version, splits, citation, etc.`),$a.forEach(a),lo=c(Ae),yt=r(Ae,"LI",{});var va=o(yt);io=g(va,"["),ms=r(va,"EM",{});var tr=o(ms);po=g(tr,"DatasetBuilder.download_and_prepare"),tr.forEach(a),co=g(va,`]: Downloads the source data
and writes it to disk.`),va.forEach(a),mo=c(Ae),be=r(Ae,"LI",{});var Oe=o(be);go=g(Oe,"["),gs=r(Oe,"EM",{});var ar=o(gs);fo=g(ar,"DatasetBuilder.as_dataset"),ar.forEach(a),uo=g(Oe,"]: Generates a ["),fs=r(Oe,"EM",{});var sr=o(fs);ho=g(sr,"Dataset"),sr.forEach(a),_o=g(Oe,"]."),Oe.forEach(a),Ae.forEach(a),$o=c(S),W=r(S,"P",{});var qe=o(W);us=r(qe,"STRONG",{});var Ap=o(us);vo=g(Ap,"Configuration"),Ap.forEach(a),bo=g(qe,": Some "),hs=r(qe,"EM",{});var Op=o(hs);xo=g(Op,"DatasetBuilder"),Op.forEach(a),wo=g(qe,`s expose multiple variants of the
dataset by defining a [`),_s=r(qe,"EM",{});var qp=o(_s);Eo=g(qp,"BuilderConfig"),qp.forEach(a),Do=g(qe,`] subclass and accepting a
config object (or name) on construction. Configurable datasets expose a
pre-defined set of configurations in [`),$s=r(qe,"EM",{});var Vp=o($s);yo=g(Vp,"DatasetBuilder.builder_configs"),Vp.forEach(a),ko=g(qe,"]."),qe.forEach(a),jo=c(S),Q=r(S,"DIV",{class:!0});var Ca=o(Q);b(kt.$$.fragment,Ca),To=c(Ca),vs=r(Ca,"P",{});var Mp=o(vs);So=g(Mp,"Return a Dataset for the specified split."),Mp.forEach(a),Io=c(Ca),b(Me.$$.fragment,Ca),Ca.forEach(a),Bo=c(S),Z=r(S,"DIV",{class:!0});var La=o(Z);b(jt.$$.fragment,La),No=c(La),bs=r(La,"P",{});var Fp=o(bs);Po=g(Fp,"Downloads and prepares dataset for reading."),Fp.forEach(a),Ro=c(La),b(Fe.$$.fragment,La),La.forEach(a),Co=c(S),ee=r(S,"DIV",{class:!0});var Aa=o(ee);b(Tt.$$.fragment,Aa),Lo=c(Aa),xs=r(Aa,"P",{});var Up=o(xs);Ao=g(Up,"Empty dict if doesn\u2019t exist"),Up.forEach(a),Oo=c(Aa),b(Ue.$$.fragment,Aa),Aa.forEach(a),qo=c(S),te=r(S,"DIV",{class:!0});var Oa=o(te);b(St.$$.fragment,Oa),Vo=c(Oa),ws=r(Oa,"P",{});var zp=o(ws);Mo=g(zp,"Empty DatasetInfo if doesn\u2019t exist"),zp.forEach(a),Fo=c(Oa),b(ze.$$.fragment,Oa),Oa.forEach(a),Uo=c(S),Ge=r(S,"DIV",{class:!0});var jr=o(Ge);b(It.$$.fragment,jr),zo=c(jr),Es=r(jr,"P",{});var Gp=o(Es);Go=g(Gp,"Return the path of the module of this class or subclass."),Gp.forEach(a),jr.forEach(a),S.forEach(a),dr=c(s),J=r(s,"DIV",{class:!0});var qa=o(J);b(Bt.$$.fragment,qa),Ho=c(qa),Ds=r(qa,"P",{});var Hp=o(Ds);Wo=g(Hp,"Base class for datasets with data generation based on dict generators."),Hp.forEach(a),Xo=c(qa),ae=r(qa,"P",{});var ba=o(ae);ys=r(ba,"CODE",{});var Wp=o(ys);Jo=g(Wp,"GeneratorBasedBuilder"),Wp.forEach(a),Ko=g(ba,` is a convenience class that abstracts away much
of the data writing and reading of `),ks=r(ba,"CODE",{});var Xp=o(ks);Yo=g(Xp,"DatasetBuilder"),Xp.forEach(a),Qo=g(ba,`. It expects subclasses to
implement generators of feature dictionaries across the dataset splits
(`),js=r(ba,"CODE",{});var Jp=o(js);Zo=g(Jp,"_split_generators"),Jp.forEach(a),el=g(ba,"). See the method docstrings for details."),ba.forEach(a),qa.forEach(a),ir=c(s),xe=r(s,"DIV",{class:!0});var Tr=o(xe);b(Nt.$$.fragment,Tr),tl=c(Tr),Ts=r(Tr,"P",{});var Kp=o(Ts);al=g(Kp,"Beam based Builder."),Kp.forEach(a),Tr.forEach(a),pr=c(s),we=r(s,"DIV",{class:!0});var Sr=o(we);b(Pt.$$.fragment,Sr),sl=c(Sr),Ss=r(Sr,"P",{});var Yp=o(Ss);nl=g(Yp,"Base class for datasets with data generation based on Arrow loading functions (CSV/JSON/Parquet)."),Yp.forEach(a),Sr.forEach(a),cr=c(s),U=r(s,"DIV",{class:!0});var _t=o(U);b(Rt.$$.fragment,_t),rl=c(_t),Ct=r(_t,"P",{});var Ir=o(Ct);ol=g(Ir,"Base class for "),Da=r(Ir,"A",{href:!0});var Qp=o(Da);ll=g(Qp,"DatasetBuilder"),Qp.forEach(a),dl=g(Ir," data configuration."),Ir.forEach(a),il=c(_t),Lt=r(_t,"P",{});var Br=o(Lt);pl=g(Br,`DatasetBuilder subclasses with data configuration options should subclass
`),ya=r(Br,"A",{href:!0});var Zp=o(ya);cl=g(Zp,"BuilderConfig"),Zp.forEach(a),ml=g(Br," and add their own properties."),Br.forEach(a),gl=c(_t),se=r(_t,"DIV",{class:!0});var Va=o(se);b(At.$$.fragment,Va),fl=c(Va),Is=r(Va,"P",{});var ec=o(Is);ul=g(ec,`The config id is used to build the cache directory.
By default it is equal to the config name.
However the name of a config is not sufficient to have a unique identifier for the dataset being generated
since it doesn\u2019t take into account:`),ec.forEach(a),hl=c(Va),Ee=r(Va,"UL",{});var Ma=o(Ee);Bs=r(Ma,"LI",{});var tc=o(Bs);_l=g(tc,"the config kwargs that can be used to overwrite attributes"),tc.forEach(a),$l=c(Ma),Ns=r(Ma,"LI",{});var ac=o(Ns);vl=g(ac,"the custom features used to write the dataset"),ac.forEach(a),bl=c(Ma),Ps=r(Ma,"LI",{});var sc=o(Ps);xl=g(sc,`the data_files for json/text/csv/pandas datasets
Therefore the config id is just the config name with an optional suffix based on these.`),sc.forEach(a),Ma.forEach(a),Va.forEach(a),_t.forEach(a),mr=c(s),De=r(s,"H2",{class:!0});var Nr=o(De);He=r(Nr,"A",{id:!0,class:!0,href:!0});var nc=o(He);Rs=r(nc,"SPAN",{});var rc=o(Rs);b(Ot.$$.fragment,rc),rc.forEach(a),nc.forEach(a),wl=c(Nr),Cs=r(Nr,"SPAN",{});var oc=o(Cs);El=g(oc,"Download"),oc.forEach(a),Nr.forEach(a),gr=c(s),P=r(s,"DIV",{class:!0});var A=o(P);b(qt.$$.fragment,A),Dl=c(A),X=r(A,"DIV",{class:!0});var $t=o(X);b(Vt.$$.fragment,$t),yl=c($t),Ls=r($t,"P",{});var lc=o(Ls);kl=g(lc,"Download given URL(s)."),lc.forEach(a),jl=c($t),ye=r($t,"P",{});var Fa=o(ye);Tl=g(Fa,"By default, if there is more than one URL to download, multiprocessing is used with maximum "),As=r(Fa,"CODE",{});var dc=o(As);Sl=g(dc,"num_proc = 16"),dc.forEach(a),Il=g(Fa,`.
Pass customized `),Os=r(Fa,"CODE",{});var ic=o(Os);Bl=g(ic,"download_config.num_proc"),ic.forEach(a),Nl=g(Fa," to change this behavior."),Fa.forEach(a),Pl=c($t),b(We.$$.fragment,$t),$t.forEach(a),Rl=c(A),ne=r(A,"DIV",{class:!0});var Ua=o(ne);b(Mt.$$.fragment,Ua),Cl=c(Ua),qs=r(Ua,"P",{});var pc=o(qs);Ll=g(pc,"Download and extract given url_or_urls."),pc.forEach(a),Al=c(Ua),b(Xe.$$.fragment,Ua),Ua.forEach(a),Ol=c(A),re=r(A,"DIV",{class:!0});var za=o(re);b(Ft.$$.fragment,za),ql=c(za),Ut=r(za,"P",{});var Pr=o(Ut);Vl=g(Pr,"Download given urls(s) by calling "),Vs=r(Pr,"CODE",{});var cc=o(Vs);Ml=g(cc,"custom_download"),cc.forEach(a),Fl=g(Pr,"."),Pr.forEach(a),Ul=c(za),b(Je.$$.fragment,za),za.forEach(a),zl=c(A),oe=r(A,"DIV",{class:!0});var Ga=o(oe);b(zt.$$.fragment,Ga),Gl=c(Ga),Ms=r(Ga,"P",{});var mc=o(Ms);Hl=g(mc,"Extract given path(s)."),mc.forEach(a),Wl=c(Ga),b(Ke.$$.fragment,Ga),Ga.forEach(a),Xl=c(A),le=r(A,"DIV",{class:!0});var Ha=o(le);b(Gt.$$.fragment,Ha),Jl=c(Ha),Fs=r(Ha,"P",{});var gc=o(Fs);Kl=g(gc,"Iterate over files within an archive."),gc.forEach(a),Yl=c(Ha),b(Ye.$$.fragment,Ha),Ha.forEach(a),Ql=c(A),de=r(A,"DIV",{class:!0});var Wa=o(de);b(Ht.$$.fragment,Wa),Zl=c(Wa),Us=r(Wa,"P",{});var fc=o(Us);ed=g(fc,"Iterate over file paths."),fc.forEach(a),td=c(Wa),b(Qe.$$.fragment,Wa),Wa.forEach(a),ad=c(A),Ze=r(A,"DIV",{class:!0});var Rr=o(Ze);b(Wt.$$.fragment,Rr),sd=c(Rr),zs=r(Rr,"P",{});var uc=o(zs);nd=g(uc,"Ship the files using Beam FileSystems to the pipeline temp dir."),uc.forEach(a),Rr.forEach(a),A.forEach(a),fr=c(s),C=r(s,"DIV",{class:!0});var M=o(C);b(Xt.$$.fragment,M),rd=c(M),z=r(M,"P",{});var ue=o(z);od=g(ue,`Download manager that uses the \u201D::\u201D separator to navigate through (possibly remote) compressed archives.
Contrary to the regular DownloadManager, the `),Gs=r(ue,"CODE",{});var hc=o(Gs);ld=g(hc,"download"),hc.forEach(a),dd=g(ue," and "),Hs=r(ue,"CODE",{});var _c=o(Hs);id=g(_c,"extract"),_c.forEach(a),pd=g(ue,` methods don\u2019t actually download nor extract
data, but they rather return the path or url that could be opened using the `),Ws=r(ue,"CODE",{});var $c=o(Ws);cd=g($c,"xopen"),$c.forEach(a),md=g(ue,` function which extends the
builtin `),Xs=r(ue,"CODE",{});var vc=o(Xs);gd=g(vc,"open"),vc.forEach(a),fd=g(ue," function to stream data from remote files."),ue.forEach(a),ud=c(M),ie=r(M,"DIV",{class:!0});var Xa=o(ie);b(Jt.$$.fragment,Xa),hd=c(Xa),Js=r(Xa,"P",{});var bc=o(Js);_d=g(bc,"Download given url(s)."),bc.forEach(a),$d=c(Xa),b(et.$$.fragment,Xa),Xa.forEach(a),vd=c(M),pe=r(M,"DIV",{class:!0});var Ja=o(pe);b(Kt.$$.fragment,Ja),bd=c(Ja),Ks=r(Ja,"P",{});var xc=o(Ks);xd=g(xc,"Download and extract given url_or_urls."),xc.forEach(a),wd=c(Ja),b(tt.$$.fragment,Ja),Ja.forEach(a),Ed=c(M),ce=r(M,"DIV",{class:!0});var Ka=o(ce);b(Yt.$$.fragment,Ka),Dd=c(Ka),Ys=r(Ka,"P",{});var wc=o(Ys);yd=g(wc,"Extract given path(s)."),wc.forEach(a),kd=c(Ka),b(at.$$.fragment,Ka),Ka.forEach(a),jd=c(M),me=r(M,"DIV",{class:!0});var Ya=o(me);b(Qt.$$.fragment,Ya),Td=c(Ya),Qs=r(Ya,"P",{});var Ec=o(Qs);Sd=g(Ec,"Iterate over files within an archive."),Ec.forEach(a),Id=c(Ya),b(st.$$.fragment,Ya),Ya.forEach(a),Bd=c(M),ge=r(M,"DIV",{class:!0});var Qa=o(ge);b(Zt.$$.fragment,Qa),Nd=c(Qa),Zs=r(Qa,"P",{});var Dc=o(Zs);Pd=g(Dc,"Iterate over files."),Dc.forEach(a),Rd=c(Qa),b(nt.$$.fragment,Qa),Qa.forEach(a),M.forEach(a),ur=c(s),ke=r(s,"DIV",{class:!0});var Cr=o(ke);b(ea.$$.fragment,Cr),Cd=c(Cr),en=r(Cr,"P",{});var yc=o(en);Ld=g(yc,"Configuration for our cached path manager."),yc.forEach(a),Cr.forEach(a),hr=c(s),q=r(s,"DIV",{class:!0});var he=o(q);b(ta.$$.fragment,he),Ad=c(he),ka=r(he,"P",{});var Sp=o(ka);tn=r(Sp,"CODE",{});var kc=o(tn);Od=g(kc,"Enum"),kc.forEach(a),qd=g(Sp," for how to treat pre-existing downloads and data."),Sp.forEach(a),Vd=c(he),aa=r(he,"P",{});var Lr=o(aa);Md=g(Lr,"The default mode is "),an=r(Lr,"CODE",{});var jc=o(an);Fd=g(jc,"REUSE_DATASET_IF_EXISTS"),jc.forEach(a),Ud=g(Lr,`, which will reuse both
raw downloads and the prepared dataset if they exist.`),Lr.forEach(a),zd=c(he),sn=r(he,"P",{});var Tc=o(sn);Gd=g(Tc,"The generations modes:"),Tc.forEach(a),Hd=c(he),sa=r(he,"TABLE",{});var Ar=o(sa);nn=r(Ar,"THEAD",{});var Sc=o(nn);je=r(Sc,"TR",{});var Za=o(je);_r=r(Za,"TH",{}),o(_r).forEach(a),Wd=c(Za),rn=r(Za,"TH",{});var Ic=o(rn);Xd=g(Ic,"Downloads"),Ic.forEach(a),Jd=c(Za),on=r(Za,"TH",{});var Bc=o(on);Kd=g(Bc,"Dataset"),Bc.forEach(a),Za.forEach(a),Sc.forEach(a),Yd=c(Ar),Te=r(Ar,"TBODY",{});var es=o(Te);Se=r(es,"TR",{});var ts=o(Se);ja=r(ts,"TD",{});var Ip=o(ja);ln=r(Ip,"CODE",{});var Nc=o(ln);Qd=g(Nc,"REUSE_DATASET_IF_EXISTS"),Nc.forEach(a),Zd=g(Ip," (default)"),Ip.forEach(a),ei=c(ts),dn=r(ts,"TD",{});var Pc=o(dn);ti=g(Pc,"Reuse"),Pc.forEach(a),ai=c(ts),pn=r(ts,"TD",{});var Rc=o(pn);si=g(Rc,"Reuse"),Rc.forEach(a),ts.forEach(a),ni=c(es),Ie=r(es,"TR",{});var as=o(Ie);cn=r(as,"TD",{});var Cc=o(cn);mn=r(Cc,"CODE",{});var Lc=o(mn);ri=g(Lc,"REUSE_CACHE_IF_EXISTS"),Lc.forEach(a),Cc.forEach(a),oi=c(as),gn=r(as,"TD",{});var Ac=o(gn);li=g(Ac,"Reuse"),Ac.forEach(a),di=c(as),fn=r(as,"TD",{});var Oc=o(fn);ii=g(Oc,"Fresh"),Oc.forEach(a),as.forEach(a),pi=c(es),Be=r(es,"TR",{});var ss=o(Be);un=r(ss,"TD",{});var qc=o(un);hn=r(qc,"CODE",{});var Vc=o(hn);ci=g(Vc,"FORCE_REDOWNLOAD"),Vc.forEach(a),qc.forEach(a),mi=c(ss),_n=r(ss,"TD",{});var Mc=o(_n);gi=g(Mc,"Fresh"),Mc.forEach(a),fi=c(ss),$n=r(ss,"TD",{});var Fc=o($n);ui=g(Fc,"Fresh"),Fc.forEach(a),ss.forEach(a),es.forEach(a),Ar.forEach(a),he.forEach(a),$r=c(s),Ne=r(s,"H2",{class:!0});var Or=o(Ne);rt=r(Or,"A",{id:!0,class:!0,href:!0});var Uc=o(rt);vn=r(Uc,"SPAN",{});var zc=o(vn);b(na.$$.fragment,zc),zc.forEach(a),Uc.forEach(a),hi=c(Or),bn=r(Or,"SPAN",{});var Gc=o(bn);_i=g(Gc,"Splits"),Gc.forEach(a),Or.forEach(a),vr=c(s),G=r(s,"DIV",{class:!0});var vt=o(G);b(ra.$$.fragment,vt),$i=c(vt),xn=r(vt,"P",{});var Hc=o(xn);vi=g(Hc,"Defines the split information for the generator."),Hc.forEach(a),bi=c(vt),Pe=r(vt,"P",{});var ns=o(Pe);xi=g(ns,`This should be used as returned value of
`),wn=r(ns,"CODE",{});var Wc=o(wn);wi=g(Wc,"GeneratorBasedBuilder._split_generators()"),Wc.forEach(a),Ei=g(ns,`.
See `),En=r(ns,"CODE",{});var Xc=o(En);Di=g(Xc,"GeneratorBasedBuilder._split_generators()"),Xc.forEach(a),yi=g(ns,` for more info and example
of usage.`),ns.forEach(a),ki=c(vt),b(ot.$$.fragment,vt),vt.forEach(a),br=c(s),L=r(s,"DIV",{class:!0});var F=o(L);b(oa.$$.fragment,F),ji=c(F),Ta=r(F,"P",{});var Bp=o(Ta);Dn=r(Bp,"CODE",{});var Jc=o(Dn);Ti=g(Jc,"Enum"),Jc.forEach(a),Si=g(Bp," for dataset splits."),Bp.forEach(a),Ii=c(F),yn=r(F,"P",{});var Kc=o(yn);Bi=g(Kc,`Datasets are typically split into different subsets to be used at various
stages of training and evaluation.`),Kc.forEach(a),Ni=c(F),K=r(F,"UL",{});var bt=o(K);Sa=r(bt,"LI",{});var Np=o(Sa);kn=r(Np,"CODE",{});var Yc=o(kn);Pi=g(Yc,"TRAIN"),Yc.forEach(a),Ri=g(Np,": the training data."),Np.forEach(a),Ci=c(bt),Ia=r(bt,"LI",{});var Pp=o(Ia);jn=r(Pp,"CODE",{});var Qc=o(jn);Li=g(Qc,"VALIDATION"),Qc.forEach(a),Ai=g(Pp,`: the validation data. If present, this is typically used as
evaluation data while iterating on a model (e.g. changing hyperparameters,
model architecture, etc.).`),Pp.forEach(a),Oi=c(bt),Ba=r(bt,"LI",{});var Rp=o(Ba);Tn=r(Rp,"CODE",{});var Zc=o(Tn);qi=g(Zc,"TEST"),Zc.forEach(a),Vi=g(Rp,`: the testing data. This is the data to report metrics on. Typically
you do not want to use this during model iteration as you may overfit to it.`),Rp.forEach(a),Mi=c(bt),Na=r(bt,"LI",{});var Cp=o(Na);Sn=r(Cp,"CODE",{});var em=o(Sn);Fi=g(em,"ALL"),em.forEach(a),Ui=g(Cp,": the union of all defined dataset splits."),Cp.forEach(a),bt.forEach(a),zi=c(F),Pa=r(F,"P",{});var Lp=o(Pa);Gi=g(Lp,"Note: All splits, including compositions inherit from "),In=r(Lp,"CODE",{});var tm=o(In);Hi=g(tm,"datasets.SplitBase"),tm.forEach(a),Lp.forEach(a),Wi=c(F),la=r(F,"P",{});var qr=o(la);Xi=g(qr,"See the :doc:"),Bn=r(qr,"CODE",{});var am=o(Bn);Ji=g(am,"guide on splits </loading>"),am.forEach(a),Ki=g(qr," for more information."),qr.forEach(a),Yi=c(F),b(lt.$$.fragment,F),F.forEach(a),xr=c(s),R=r(s,"DIV",{class:!0});var O=o(R);b(da.$$.fragment,O),Qi=c(O),Nn=r(O,"P",{});var sm=o(Nn);Zi=g(sm,"Descriptor corresponding to a named split (train, test, \u2026)."),sm.forEach(a),ep=c(O),b(dt.$$.fragment,O),tp=c(O),Pn=r(O,"P",{});var nm=o(Pn);ap=g(nm,"Warning:"),nm.forEach(a),sp=c(O),b(it.$$.fragment,O),np=c(O),Rn=r(O,"P",{});var rm=o(Rn);rp=g(rm,"Warning:"),rm.forEach(a),op=c(O),b(pt.$$.fragment,O),lp=c(O),b(ct.$$.fragment,O),O.forEach(a),wr=c(s),Re=r(s,"DIV",{class:!0});var Vr=o(Re);b(ia.$$.fragment,Vr),dp=c(Vr),Cn=r(Vr,"P",{});var om=o(Cn);ip=g(om,"Split corresponding to the union of all defined dataset splits."),om.forEach(a),Vr.forEach(a),Er=c(s),V=r(s,"DIV",{class:!0});var _e=o(V);b(pa.$$.fragment,_e),pp=c(_e),Ln=r(_e,"P",{});var lm=o(Ln);cp=g(lm,"Reading instruction for a dataset."),lm.forEach(a),mp=c(_e),b(mt.$$.fragment,_e),gp=c(_e),gt=r(_e,"DIV",{class:!0});var Mr=o(gt);b(ca.$$.fragment,Mr),fp=c(Mr),An=r(Mr,"P",{});var dm=o(An);up=g(dm,"Creates a ReadInstruction instance out of a string spec."),dm.forEach(a),Mr.forEach(a),hp=c(_e),fe=r(_e,"DIV",{class:!0});var rs=o(fe);b(ma.$$.fragment,rs),_p=c(rs),On=r(rs,"P",{});var im=o(On);$p=g(im,"Translate instruction into a list of absolute instructions."),im.forEach(a),vp=c(rs),qn=r(rs,"P",{});var pm=o(qn);bp=g(pm,"Those absolute instructions are then to be added together."),pm.forEach(a),rs.forEach(a),_e.forEach(a),Dr=c(s),Ce=r(s,"H2",{class:!0});var Fr=o(Ce);ft=r(Fr,"A",{id:!0,class:!0,href:!0});var cm=o(ft);Vn=r(cm,"SPAN",{});var mm=o(Vn);b(ga.$$.fragment,mm),mm.forEach(a),cm.forEach(a),xp=c(Fr),Mn=r(Fr,"SPAN",{});var gm=o(Mn);wp=g(gm,"Version"),gm.forEach(a),Fr.forEach(a),yr=c(s),H=r(s,"DIV",{class:!0});var xt=o(H);b(fa.$$.fragment,xt),Ep=c(xt),Fn=r(xt,"P",{});var fm=o(Fn);Dp=g(fm,"Dataset version MAJOR.MINOR.PATCH."),fm.forEach(a),yp=c(xt),b(ut.$$.fragment,xt),kp=c(xt),ht=r(xt,"DIV",{class:!0});var Ur=o(ht);b(ua.$$.fragment,Ur),jp=c(Ur),Un=r(Ur,"P",{});var um=o(Un);Tp=g(um,"Returns True if other_version matches."),um.forEach(a),Ur.forEach(a),xt.forEach(a),this.h()},h(){y(d,"name","hf:doc:metadata"),y(d,"content",JSON.stringify(Gm)),y(l,"id","builder-classes"),y(l,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(l,"href","#builder-classes"),y(f,"class","relative group"),y(Ve,"id","datasets.DatasetBuilder"),y(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(Ve,"href","#datasets.DatasetBuilder"),y($e,"class","relative group"),y(xa,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DatasetBuilder"),y(wa,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig"),y(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Da,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.DatasetBuilder"),y(ya,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig"),y(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(He,"id","datasets.DownloadManager"),y(He,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(He,"href","#datasets.DownloadManager"),y(De,"class","relative group"),y(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(rt,"id","datasets.SplitGenerator"),y(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(rt,"href","#datasets.SplitGenerator"),y(Ne,"class","relative group"),y(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(ft,"id","datasets.Version"),y(ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),y(ft,"href","#datasets.Version"),y(Ce,"class","relative group"),y(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),y(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,_){e(document.head,d),$(s,h,_),$(s,f,_),e(f,l),e(l,u),x(t,u,null),e(f,i),e(f,os),e(os,zr),$(s,rr,_),$(s,$e,_),e($e,Ve),e(Ve,ls),x(wt,ls,null),e($e,Gr),e($e,ds),e(ds,Hr),$(s,or,_),$(s,Y,_),e(Y,Wr),e(Y,xa),e(xa,Xr),e(Y,Jr),e(Y,wa),e(wa,Kr),e(Y,Yr),$(s,lr,_),$(s,T,_),x(Et,T,null),e(T,Qr),e(T,is),e(is,Zr),e(T,eo),e(T,Ea),e(Ea,ps),e(ps,to),e(Ea,ao),e(T,so),e(T,ve),e(ve,Dt),e(Dt,no),e(Dt,cs),e(cs,ro),e(Dt,oo),e(ve,lo),e(ve,yt),e(yt,io),e(yt,ms),e(ms,po),e(yt,co),e(ve,mo),e(ve,be),e(be,go),e(be,gs),e(gs,fo),e(be,uo),e(be,fs),e(fs,ho),e(be,_o),e(T,$o),e(T,W),e(W,us),e(us,vo),e(W,bo),e(W,hs),e(hs,xo),e(W,wo),e(W,_s),e(_s,Eo),e(W,Do),e(W,$s),e($s,yo),e(W,ko),e(T,jo),e(T,Q),x(kt,Q,null),e(Q,To),e(Q,vs),e(vs,So),e(Q,Io),x(Me,Q,null),e(T,Bo),e(T,Z),x(jt,Z,null),e(Z,No),e(Z,bs),e(bs,Po),e(Z,Ro),x(Fe,Z,null),e(T,Co),e(T,ee),x(Tt,ee,null),e(ee,Lo),e(ee,xs),e(xs,Ao),e(ee,Oo),x(Ue,ee,null),e(T,qo),e(T,te),x(St,te,null),e(te,Vo),e(te,ws),e(ws,Mo),e(te,Fo),x(ze,te,null),e(T,Uo),e(T,Ge),x(It,Ge,null),e(Ge,zo),e(Ge,Es),e(Es,Go),$(s,dr,_),$(s,J,_),x(Bt,J,null),e(J,Ho),e(J,Ds),e(Ds,Wo),e(J,Xo),e(J,ae),e(ae,ys),e(ys,Jo),e(ae,Ko),e(ae,ks),e(ks,Yo),e(ae,Qo),e(ae,js),e(js,Zo),e(ae,el),$(s,ir,_),$(s,xe,_),x(Nt,xe,null),e(xe,tl),e(xe,Ts),e(Ts,al),$(s,pr,_),$(s,we,_),x(Pt,we,null),e(we,sl),e(we,Ss),e(Ss,nl),$(s,cr,_),$(s,U,_),x(Rt,U,null),e(U,rl),e(U,Ct),e(Ct,ol),e(Ct,Da),e(Da,ll),e(Ct,dl),e(U,il),e(U,Lt),e(Lt,pl),e(Lt,ya),e(ya,cl),e(Lt,ml),e(U,gl),e(U,se),x(At,se,null),e(se,fl),e(se,Is),e(Is,ul),e(se,hl),e(se,Ee),e(Ee,Bs),e(Bs,_l),e(Ee,$l),e(Ee,Ns),e(Ns,vl),e(Ee,bl),e(Ee,Ps),e(Ps,xl),$(s,mr,_),$(s,De,_),e(De,He),e(He,Rs),x(Ot,Rs,null),e(De,wl),e(De,Cs),e(Cs,El),$(s,gr,_),$(s,P,_),x(qt,P,null),e(P,Dl),e(P,X),x(Vt,X,null),e(X,yl),e(X,Ls),e(Ls,kl),e(X,jl),e(X,ye),e(ye,Tl),e(ye,As),e(As,Sl),e(ye,Il),e(ye,Os),e(Os,Bl),e(ye,Nl),e(X,Pl),x(We,X,null),e(P,Rl),e(P,ne),x(Mt,ne,null),e(ne,Cl),e(ne,qs),e(qs,Ll),e(ne,Al),x(Xe,ne,null),e(P,Ol),e(P,re),x(Ft,re,null),e(re,ql),e(re,Ut),e(Ut,Vl),e(Ut,Vs),e(Vs,Ml),e(Ut,Fl),e(re,Ul),x(Je,re,null),e(P,zl),e(P,oe),x(zt,oe,null),e(oe,Gl),e(oe,Ms),e(Ms,Hl),e(oe,Wl),x(Ke,oe,null),e(P,Xl),e(P,le),x(Gt,le,null),e(le,Jl),e(le,Fs),e(Fs,Kl),e(le,Yl),x(Ye,le,null),e(P,Ql),e(P,de),x(Ht,de,null),e(de,Zl),e(de,Us),e(Us,ed),e(de,td),x(Qe,de,null),e(P,ad),e(P,Ze),x(Wt,Ze,null),e(Ze,sd),e(Ze,zs),e(zs,nd),$(s,fr,_),$(s,C,_),x(Xt,C,null),e(C,rd),e(C,z),e(z,od),e(z,Gs),e(Gs,ld),e(z,dd),e(z,Hs),e(Hs,id),e(z,pd),e(z,Ws),e(Ws,cd),e(z,md),e(z,Xs),e(Xs,gd),e(z,fd),e(C,ud),e(C,ie),x(Jt,ie,null),e(ie,hd),e(ie,Js),e(Js,_d),e(ie,$d),x(et,ie,null),e(C,vd),e(C,pe),x(Kt,pe,null),e(pe,bd),e(pe,Ks),e(Ks,xd),e(pe,wd),x(tt,pe,null),e(C,Ed),e(C,ce),x(Yt,ce,null),e(ce,Dd),e(ce,Ys),e(Ys,yd),e(ce,kd),x(at,ce,null),e(C,jd),e(C,me),x(Qt,me,null),e(me,Td),e(me,Qs),e(Qs,Sd),e(me,Id),x(st,me,null),e(C,Bd),e(C,ge),x(Zt,ge,null),e(ge,Nd),e(ge,Zs),e(Zs,Pd),e(ge,Rd),x(nt,ge,null),$(s,ur,_),$(s,ke,_),x(ea,ke,null),e(ke,Cd),e(ke,en),e(en,Ld),$(s,hr,_),$(s,q,_),x(ta,q,null),e(q,Ad),e(q,ka),e(ka,tn),e(tn,Od),e(ka,qd),e(q,Vd),e(q,aa),e(aa,Md),e(aa,an),e(an,Fd),e(aa,Ud),e(q,zd),e(q,sn),e(sn,Gd),e(q,Hd),e(q,sa),e(sa,nn),e(nn,je),e(je,_r),e(je,Wd),e(je,rn),e(rn,Xd),e(je,Jd),e(je,on),e(on,Kd),e(sa,Yd),e(sa,Te),e(Te,Se),e(Se,ja),e(ja,ln),e(ln,Qd),e(ja,Zd),e(Se,ei),e(Se,dn),e(dn,ti),e(Se,ai),e(Se,pn),e(pn,si),e(Te,ni),e(Te,Ie),e(Ie,cn),e(cn,mn),e(mn,ri),e(Ie,oi),e(Ie,gn),e(gn,li),e(Ie,di),e(Ie,fn),e(fn,ii),e(Te,pi),e(Te,Be),e(Be,un),e(un,hn),e(hn,ci),e(Be,mi),e(Be,_n),e(_n,gi),e(Be,fi),e(Be,$n),e($n,ui),$(s,$r,_),$(s,Ne,_),e(Ne,rt),e(rt,vn),x(na,vn,null),e(Ne,hi),e(Ne,bn),e(bn,_i),$(s,vr,_),$(s,G,_),x(ra,G,null),e(G,$i),e(G,xn),e(xn,vi),e(G,bi),e(G,Pe),e(Pe,xi),e(Pe,wn),e(wn,wi),e(Pe,Ei),e(Pe,En),e(En,Di),e(Pe,yi),e(G,ki),x(ot,G,null),$(s,br,_),$(s,L,_),x(oa,L,null),e(L,ji),e(L,Ta),e(Ta,Dn),e(Dn,Ti),e(Ta,Si),e(L,Ii),e(L,yn),e(yn,Bi),e(L,Ni),e(L,K),e(K,Sa),e(Sa,kn),e(kn,Pi),e(Sa,Ri),e(K,Ci),e(K,Ia),e(Ia,jn),e(jn,Li),e(Ia,Ai),e(K,Oi),e(K,Ba),e(Ba,Tn),e(Tn,qi),e(Ba,Vi),e(K,Mi),e(K,Na),e(Na,Sn),e(Sn,Fi),e(Na,Ui),e(L,zi),e(L,Pa),e(Pa,Gi),e(Pa,In),e(In,Hi),e(L,Wi),e(L,la),e(la,Xi),e(la,Bn),e(Bn,Ji),e(la,Ki),e(L,Yi),x(lt,L,null),$(s,xr,_),$(s,R,_),x(da,R,null),e(R,Qi),e(R,Nn),e(Nn,Zi),e(R,ep),x(dt,R,null),e(R,tp),e(R,Pn),e(Pn,ap),e(R,sp),x(it,R,null),e(R,np),e(R,Rn),e(Rn,rp),e(R,op),x(pt,R,null),e(R,lp),x(ct,R,null),$(s,wr,_),$(s,Re,_),x(ia,Re,null),e(Re,dp),e(Re,Cn),e(Cn,ip),$(s,Er,_),$(s,V,_),x(pa,V,null),e(V,pp),e(V,Ln),e(Ln,cp),e(V,mp),x(mt,V,null),e(V,gp),e(V,gt),x(ca,gt,null),e(gt,fp),e(gt,An),e(An,up),e(V,hp),e(V,fe),x(ma,fe,null),e(fe,_p),e(fe,On),e(On,$p),e(fe,vp),e(fe,qn),e(qn,bp),$(s,Dr,_),$(s,Ce,_),e(Ce,ft),e(ft,Vn),x(ga,Vn,null),e(Ce,xp),e(Ce,Mn),e(Mn,wp),$(s,yr,_),$(s,H,_),x(fa,H,null),e(H,Ep),e(H,Fn),e(Fn,Dp),e(H,yp),x(ut,H,null),e(H,kp),e(H,ht),x(ua,ht,null),e(ht,jp),e(ht,Un),e(Un,Tp),kr=!0},p(s,[_]){const ha={};_&2&&(ha.$$scope={dirty:_,ctx:s}),Me.$set(ha);const zn={};_&2&&(zn.$$scope={dirty:_,ctx:s}),Fe.$set(zn);const Gn={};_&2&&(Gn.$$scope={dirty:_,ctx:s}),Ue.$set(Gn);const Hn={};_&2&&(Hn.$$scope={dirty:_,ctx:s}),ze.$set(Hn);const _a={};_&2&&(_a.$$scope={dirty:_,ctx:s}),We.$set(_a);const Wn={};_&2&&(Wn.$$scope={dirty:_,ctx:s}),Xe.$set(Wn);const Xn={};_&2&&(Xn.$$scope={dirty:_,ctx:s}),Je.$set(Xn);const Jn={};_&2&&(Jn.$$scope={dirty:_,ctx:s}),Ke.$set(Jn);const Le={};_&2&&(Le.$$scope={dirty:_,ctx:s}),Ye.$set(Le);const Kn={};_&2&&(Kn.$$scope={dirty:_,ctx:s}),Qe.$set(Kn);const Yn={};_&2&&(Yn.$$scope={dirty:_,ctx:s}),et.$set(Yn);const S={};_&2&&(S.$$scope={dirty:_,ctx:s}),tt.$set(S);const Qn={};_&2&&(Qn.$$scope={dirty:_,ctx:s}),at.$set(Qn);const Ra={};_&2&&(Ra.$$scope={dirty:_,ctx:s}),st.$set(Ra);const Zn={};_&2&&(Zn.$$scope={dirty:_,ctx:s}),nt.$set(Zn);const Ae={};_&2&&(Ae.$$scope={dirty:_,ctx:s}),ot.$set(Ae);const $a={};_&2&&($a.$$scope={dirty:_,ctx:s}),lt.$set($a);const er={};_&2&&(er.$$scope={dirty:_,ctx:s}),dt.$set(er);const va={};_&2&&(va.$$scope={dirty:_,ctx:s}),it.$set(va);const tr={};_&2&&(tr.$$scope={dirty:_,ctx:s}),pt.$set(tr);const Oe={};_&2&&(Oe.$$scope={dirty:_,ctx:s}),ct.$set(Oe);const ar={};_&2&&(ar.$$scope={dirty:_,ctx:s}),mt.$set(ar);const sr={};_&2&&(sr.$$scope={dirty:_,ctx:s}),ut.$set(sr)},i(s){kr||(w(t.$$.fragment,s),w(wt.$$.fragment,s),w(Et.$$.fragment,s),w(kt.$$.fragment,s),w(Me.$$.fragment,s),w(jt.$$.fragment,s),w(Fe.$$.fragment,s),w(Tt.$$.fragment,s),w(Ue.$$.fragment,s),w(St.$$.fragment,s),w(ze.$$.fragment,s),w(It.$$.fragment,s),w(Bt.$$.fragment,s),w(Nt.$$.fragment,s),w(Pt.$$.fragment,s),w(Rt.$$.fragment,s),w(At.$$.fragment,s),w(Ot.$$.fragment,s),w(qt.$$.fragment,s),w(Vt.$$.fragment,s),w(We.$$.fragment,s),w(Mt.$$.fragment,s),w(Xe.$$.fragment,s),w(Ft.$$.fragment,s),w(Je.$$.fragment,s),w(zt.$$.fragment,s),w(Ke.$$.fragment,s),w(Gt.$$.fragment,s),w(Ye.$$.fragment,s),w(Ht.$$.fragment,s),w(Qe.$$.fragment,s),w(Wt.$$.fragment,s),w(Xt.$$.fragment,s),w(Jt.$$.fragment,s),w(et.$$.fragment,s),w(Kt.$$.fragment,s),w(tt.$$.fragment,s),w(Yt.$$.fragment,s),w(at.$$.fragment,s),w(Qt.$$.fragment,s),w(st.$$.fragment,s),w(Zt.$$.fragment,s),w(nt.$$.fragment,s),w(ea.$$.fragment,s),w(ta.$$.fragment,s),w(na.$$.fragment,s),w(ra.$$.fragment,s),w(ot.$$.fragment,s),w(oa.$$.fragment,s),w(lt.$$.fragment,s),w(da.$$.fragment,s),w(dt.$$.fragment,s),w(it.$$.fragment,s),w(pt.$$.fragment,s),w(ct.$$.fragment,s),w(ia.$$.fragment,s),w(pa.$$.fragment,s),w(mt.$$.fragment,s),w(ca.$$.fragment,s),w(ma.$$.fragment,s),w(ga.$$.fragment,s),w(fa.$$.fragment,s),w(ut.$$.fragment,s),w(ua.$$.fragment,s),kr=!0)},o(s){E(t.$$.fragment,s),E(wt.$$.fragment,s),E(Et.$$.fragment,s),E(kt.$$.fragment,s),E(Me.$$.fragment,s),E(jt.$$.fragment,s),E(Fe.$$.fragment,s),E(Tt.$$.fragment,s),E(Ue.$$.fragment,s),E(St.$$.fragment,s),E(ze.$$.fragment,s),E(It.$$.fragment,s),E(Bt.$$.fragment,s),E(Nt.$$.fragment,s),E(Pt.$$.fragment,s),E(Rt.$$.fragment,s),E(At.$$.fragment,s),E(Ot.$$.fragment,s),E(qt.$$.fragment,s),E(Vt.$$.fragment,s),E(We.$$.fragment,s),E(Mt.$$.fragment,s),E(Xe.$$.fragment,s),E(Ft.$$.fragment,s),E(Je.$$.fragment,s),E(zt.$$.fragment,s),E(Ke.$$.fragment,s),E(Gt.$$.fragment,s),E(Ye.$$.fragment,s),E(Ht.$$.fragment,s),E(Qe.$$.fragment,s),E(Wt.$$.fragment,s),E(Xt.$$.fragment,s),E(Jt.$$.fragment,s),E(et.$$.fragment,s),E(Kt.$$.fragment,s),E(tt.$$.fragment,s),E(Yt.$$.fragment,s),E(at.$$.fragment,s),E(Qt.$$.fragment,s),E(st.$$.fragment,s),E(Zt.$$.fragment,s),E(nt.$$.fragment,s),E(ea.$$.fragment,s),E(ta.$$.fragment,s),E(na.$$.fragment,s),E(ra.$$.fragment,s),E(ot.$$.fragment,s),E(oa.$$.fragment,s),E(lt.$$.fragment,s),E(da.$$.fragment,s),E(dt.$$.fragment,s),E(it.$$.fragment,s),E(pt.$$.fragment,s),E(ct.$$.fragment,s),E(ia.$$.fragment,s),E(pa.$$.fragment,s),E(mt.$$.fragment,s),E(ca.$$.fragment,s),E(ma.$$.fragment,s),E(ga.$$.fragment,s),E(fa.$$.fragment,s),E(ut.$$.fragment,s),E(ua.$$.fragment,s),kr=!1},d(s){a(d),s&&a(h),s&&a(f),D(t),s&&a(rr),s&&a($e),D(wt),s&&a(or),s&&a(Y),s&&a(lr),s&&a(T),D(Et),D(kt),D(Me),D(jt),D(Fe),D(Tt),D(Ue),D(St),D(ze),D(It),s&&a(dr),s&&a(J),D(Bt),s&&a(ir),s&&a(xe),D(Nt),s&&a(pr),s&&a(we),D(Pt),s&&a(cr),s&&a(U),D(Rt),D(At),s&&a(mr),s&&a(De),D(Ot),s&&a(gr),s&&a(P),D(qt),D(Vt),D(We),D(Mt),D(Xe),D(Ft),D(Je),D(zt),D(Ke),D(Gt),D(Ye),D(Ht),D(Qe),D(Wt),s&&a(fr),s&&a(C),D(Xt),D(Jt),D(et),D(Kt),D(tt),D(Yt),D(at),D(Qt),D(st),D(Zt),D(nt),s&&a(ur),s&&a(ke),D(ea),s&&a(hr),s&&a(q),D(ta),s&&a($r),s&&a(Ne),D(na),s&&a(vr),s&&a(G),D(ra),D(ot),s&&a(br),s&&a(L),D(oa),D(lt),s&&a(xr),s&&a(R),D(da),D(dt),D(it),D(pt),D(ct),s&&a(wr),s&&a(Re),D(ia),s&&a(Er),s&&a(V),D(pa),D(mt),D(ca),D(ma),s&&a(Dr),s&&a(Ce),D(ga),s&&a(yr),s&&a(H),D(fa),D(ut),D(ua)}}}const Gm={local:"builder-classes",sections:[{local:"datasets.DatasetBuilder",title:"Builders"},{local:"datasets.DownloadManager",title:"Download"},{local:"datasets.SplitGenerator",title:"Splits"},{local:"datasets.Version",title:"Version"}],title:"Builder classes"};function Hm(k){return bm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Qm extends hm{constructor(d){super();_m(this,d,Hm,zm,$m,{})}}export{Qm as default,Gm as metadata};
