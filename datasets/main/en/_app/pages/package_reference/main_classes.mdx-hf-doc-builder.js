import{S as wse,i as Dse,s as kse,e as r,k as m,w as _,t as i,M as Ese,c as o,d as a,m as h,a as l,x as b,h as p,b as w,G as e,g as D,y as $,q as x,o as v,B as y,v as qse,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Ise}from"../../chunks/Tip-hf-doc-builder.js";import{D as E}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as ha}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as T}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";import{D as Tse}from"../../chunks/Deprecated-hf-doc-builder.js";function Nse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetInfo
ds_info = DatasetInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_info = DatasetInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Pse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ase(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
more_text = ds["text"]
ds.add_column(name="text_2", column=more_text)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>more_text = ds[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_column(name=<span class="hljs-string">&quot;text_2&quot;</span>, column=more_text)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;text_2&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Fse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
new_review = {'label': 0, 'text': 'this movie is the absolute worst thing I have ever seen'}
ds = ds.add_item(new_review)
ds[-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>new_review = {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.add_item(new_review)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[-<span class="hljs-number">1</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;this movie is the absolute worst thing I have ever seen&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Lse(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_pandas(df)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_pandas(df)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Sse(k){let c,g,f,n,u;return n=new P({props:{code:`def gen():
    yield {"text": "Good", "label": 0}
    yield {"text": "Bad", "label": 1}
ds = Dataset.from_generator(gen)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Good&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}
<span class="hljs-meta">... </span>    <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Bad&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_generator(gen)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ose(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data
MemoryMappedTable
text: string
label: int64
----
text: [[<span class="hljs-string">&quot;compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&quot;</span>,<span class="hljs-string">&quot;the soundtrack alone is worth the price of admission .&quot;</span>,<span class="hljs-string">&quot;rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&quot;</span>,<span class="hljs-string">&quot;beneath the film&#x27;s obvious determination to shock at any cost lies considerable skill and determination , backed by sheer nerve .&quot;</span>,<span class="hljs-string">&quot;bielinsky is a filmmaker of impressive talent .&quot;</span>,<span class="hljs-string">&quot;so beautifully acted and directed , it&#x27;s clear that washington most certainly has a new career ahead of him if he so chooses .&quot;</span>,<span class="hljs-string">&quot;a visual spectacle full of stunning images and effects .&quot;</span>,<span class="hljs-string">&quot;a gentle and engrossing character study .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s enough to watch huppert scheming , with her small , intelligent eyes as steady as any noir villain , and to enjoy the perfectly pitched web of tension that chabrol spins .&quot;</span>,<span class="hljs-string">&quot;an engrossing portrait of uncompromising artists trying to create something original against the backdrop of a corporate music industry that only seems to care about the bottom line .&quot;</span>,...,<span class="hljs-string">&quot;ultimately , jane learns her place as a girl , softens up and loses some of the intensity that made her an interesting character to begin with .&quot;</span>,<span class="hljs-string">&quot;ah-nuld&#x27;s action hero days might be over .&quot;</span>,<span class="hljs-string">&quot;it&#x27;s clear why deuces wild , which was shot two years ago , has been gathering dust on mgm&#x27;s shelf .&quot;</span>,<span class="hljs-string">&quot;feels like nothing quite so much as a middle-aged moviemaker&#x27;s attempt to surround himself with beautiful , half-naked women .&quot;</span>,<span class="hljs-string">&quot;when the precise nature of matthew&#x27;s predicament finally comes into sharp focus , the revelation fails to justify the build-up .&quot;</span>,<span class="hljs-string">&quot;this picture is murder by numbers , and as easy to be bored by as your abc&#x27;s , despite a few whopping shootouts .&quot;</span>,<span class="hljs-string">&quot;hilarious musical comedy though stymied by accents thick as mud .&quot;</span>,<span class="hljs-string">&quot;if you are into splatter movies , then you will probably have a reasonably good time with the salton sea .&quot;</span>,<span class="hljs-string">&quot;a dull , simple-minded and stereotypical tale of drugs , death and mind-numbing indifference on the inner-city streets .&quot;</span>,<span class="hljs-string">&quot;the feature-length stretch . . . strains the show&#x27;s concept .&quot;</span>]]
label: [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,...,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Cse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
[{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function zse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
<span class="hljs-number">2</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Vse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
<span class="hljs-number">1066</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Use(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Mse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
(<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Rse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.unique('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&#x27;label&#x27;</span>)
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Bse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
    num_rows: <span class="hljs-number">87599</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Gse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, ClassLabel, Value
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
new_features = ds.features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Hse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Wse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.remove_columns('label')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&#x27;label&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Yse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_column('label', 'label_new')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Jse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
Dataset({
    features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Kse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq", split="validation")
ds.features
ds = ds.class_encode_column('answer')
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&#x27;answer&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Zse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.__len__`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.__len__
&lt;bound method Dataset.__len__ of Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})&gt;`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Xse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['text', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Qse(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')
def encode(batch):
    return tokenizer(batch['text'], padding=True, truncation=True, return_tensors='pt')
ds.set_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&#x27;bert-base-uncased&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&#x27;text&#x27;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">29353</span>,  <span class="hljs-number">2135</span>, <span class="hljs-number">15102</span>,  <span class="hljs-number">1996</span>,  <span class="hljs-number">9428</span>, <span class="hljs-number">20868</span>,  <span class="hljs-number">2890</span>,  <span class="hljs-number">8663</span>,  <span class="hljs-number">6895</span>,
         <span class="hljs-number">20470</span>,  <span class="hljs-number">2571</span>,  <span class="hljs-number">3663</span>,  <span class="hljs-number">2090</span>,  <span class="hljs-number">4603</span>,  <span class="hljs-number">3017</span>,  <span class="hljs-number">3008</span>,  <span class="hljs-number">1998</span>,  <span class="hljs-number">2037</span>, <span class="hljs-number">24211</span>,
         <span class="hljs-number">5637</span>,  <span class="hljs-number">1998</span>, <span class="hljs-number">11690</span>,  <span class="hljs-number">2336</span>,  <span class="hljs-number">1012</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function ene(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.set_format(type='numpy', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format
ds.reset_format()
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;numpy&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function tne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds.format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function ane(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes", split="validation")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example["text"], padding=True, truncation=True, return_tensors='pt')
ds = ds.with_transform(encode)
ds[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>], padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>, <span class="hljs-number">18027</span>, <span class="hljs-number">16310</span>, <span class="hljs-number">16001</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">9321</span>,   <span class="hljs-number">178</span>, <span class="hljs-number">11604</span>,  <span class="hljs-number">7235</span>,  <span class="hljs-number">6617</span>,
         <span class="hljs-number">1742</span>,  <span class="hljs-number">2165</span>,  <span class="hljs-number">2820</span>,  <span class="hljs-number">1206</span>,  <span class="hljs-number">6588</span>, <span class="hljs-number">22572</span>, <span class="hljs-number">12937</span>,  <span class="hljs-number">1811</span>,  <span class="hljs-number">2153</span>,  <span class="hljs-number">1105</span>,
         <span class="hljs-number">1147</span>, <span class="hljs-number">12890</span>, <span class="hljs-number">19587</span>,  <span class="hljs-number">6463</span>,  <span class="hljs-number">1105</span>, <span class="hljs-number">15026</span>,  <span class="hljs-number">1482</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
         <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function sne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
<span class="hljs-number">10</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function nne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds[0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: compassionately explores the seemingly irreconcilable situation between conservative christian parents and their estranged gay and lesbian children .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the soundtrack alone is worth the price of admission .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: rodriguez does a splendid job of racial profiling hollywood style--casting excellent latin actors of all ages--a trend long overdue .&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function rne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function one(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds.select(range(4))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.select(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>))
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">4</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function lne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]
sorted_ds = ds.sort('label')
sorted_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&#x27;label&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function ine(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds['label'][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds['label'][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&#x27;label&#x27;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function pne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds = ds.train_test_split(test_size=0.2, shuffle=True)

ds = ds.train_test_split(test_size=0.2, seed=42)

ds = load_dataset("imdb",split="train")
ds = ds.train_test_split(test_size=0.2, stratify_by_column="label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, shuffle=<span class="hljs-literal">True</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">852</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">214</span>
    })
})

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, seed=<span class="hljs-number">42</span>)

<span class="hljs-comment"># stratified split</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>,split=<span class="hljs-string">&quot;train&quot;</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.train_test_split(test_size=<span class="hljs-number">0.2</span>, stratify_by_column=<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">20000</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">5000</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function cne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="validation")
ds
ds.shard(num_shards=2, index=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">1066</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shard(num_shards=<span class="hljs-number">2</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">533</span>
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function dne(k){let c,g,f,n,u;return n=new P({props:{code:`ds_train = ds["train"].to_tf_dataset(
   columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'],
   shuffle=True,
   batch_size=16,
   collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds_train = ds[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>   columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
<span class="hljs-meta">... </span>   shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>   batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>   collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function mne(k){let c,g,f,n,u;return n=new P({props:{code:'dataset.push_to_hub("<organization>/<dataset_id>", split="evaluation")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>, split=<span class="hljs-string">&quot;evaluation&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function hne(k){let c,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=r("p"),g=i("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function fne(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function une(k){let c,g,f,n,u;return n=new P({props:{code:'saved_ds = ds.save_to_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>saved_ds = ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function gne(k){let c,g,f,n,u;return n=new P({props:{code:'ds = load_from_disk("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function _ne(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_csv("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_csv(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function bne(k){let c,g,f,n,u;return n=new P({props:{code:"ds.to_pandas()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_pandas()'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function $ne(k){let c,g,f,n,u;return n=new P({props:{code:"ds.to_dict()",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_dict()'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function xne(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_json("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_json(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function vne(k){let c,g,f,n,u;return n=new P({props:{code:'ds.to_parquet("path/to/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds.to_parquet(<span class="hljs-string">&quot;path/to/dataset/directory&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function yne(k){let c,g,f,n,u;return n=new P({props:{code:`ds = datasets.load_dataset('crime_and_punish', split='train')
ds_with_embeddings = ds.map(lambda example: {'embeddings': embed(example['line']}))
ds_with_embeddings.add_faiss_index(column='embeddings')
# query
scores, retrieved_examples = ds_with_embeddings.get_nearest_examples('embeddings', embed('my new query'), k=10)
# save index
ds_with_embeddings.save_faiss_index('embeddings', 'my_index.faiss')

ds = datasets.load_dataset('crime_and_punish', split='train')
# load index
ds.load_faiss_index('embeddings', 'my_index.faiss')
# query
scores, retrieved_examples = ds.get_nearest_examples('embeddings', embed('my new query'), k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&#x27;embeddings&#x27;</span>: embed(example[<span class="hljs-string">&#x27;line&#x27;</span>]}))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.add_faiss_index(column=<span class="hljs-string">&#x27;embeddings&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># save index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_with_embeddings.save_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load index</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.load_faiss_index(<span class="hljs-string">&#x27;embeddings&#x27;</span>, <span class="hljs-string">&#x27;my_index.faiss&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># query</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;embeddings&#x27;</span>, embed(<span class="hljs-string">&#x27;my new query&#x27;</span>), k=<span class="hljs-number">10</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function jne(k){let c,g,f,n,u;return n=new P({props:{code:`es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset('crime_and_punish', split='train')
ds.add_elasticsearch_index(column='line', es_client=es_client, es_index_name="my_es_index")
scores, retrieved_examples = ds.get_nearest_examples('line', 'my new query', k=10)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>es_client = elasticsearch.Elasticsearch()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = datasets.load_dataset(<span class="hljs-string">&#x27;crime_and_punish&#x27;</span>, split=<span class="hljs-string">&#x27;train&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.add_elasticsearch_index(column=<span class="hljs-string">&#x27;line&#x27;</span>, es_client=es_client, es_index_name=<span class="hljs-string">&quot;my_es_index&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>scores, retrieved_examples = ds.get_nearest_examples(<span class="hljs-string">&#x27;line&#x27;</span>, <span class="hljs-string">&#x27;my new query&#x27;</span>, k=<span class="hljs-number">10</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function wne(k){let c,g,f,n,u;return n=new P({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),{c(){c=r("p"),g=i("Default config is:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Default config is:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Dne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_csv('path/to/dataset.csv')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_csv(<span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function kne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_json('path/to/dataset.json')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_json(<span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ene(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_parquet('path/to/dataset.parquet')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_parquet(<span class="hljs-string">&#x27;path/to/dataset.parquet&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function qne(k){let c,g,f,n,u;return n=new P({props:{code:"ds = Dataset.from_text('path/to/dataset.txt')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = Dataset.from_text(<span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ine(k){let c,g,f,n,u;return n=new P({props:{code:`# dataset with mapping {'entailment': 0, 'neutral': 1, 'contradiction': 2}
ds = load_dataset("glue", "mnli", split="train")
# mapping to align with
label2id = {'CONTRADICTION': 0, 'NEUTRAL': 1, 'ENTAILMENT': 2}
ds_aligned = ds.align_labels_with_mapping(label2id, "label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># dataset with mapping {&#x27;entailment&#x27;: 0, &#x27;neutral&#x27;: 1, &#x27;contradiction&#x27;: 2}</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mnli&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mapping to align with</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>label2id = {<span class="hljs-string">&#x27;CONTRADICTION&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;NEUTRAL&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ENTAILMENT&#x27;</span>: <span class="hljs-number">2</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds_aligned = ds.align_labels_with_mapping(label2id, <span class="hljs-string">&quot;label&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Tne(k){let c,g,f,n,u;return n=new P({props:{code:"ds3 = concatenate_datasets([ds1, ds2])",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds3 = concatenate_datasets([ds1, ds2])'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Nne(k){let c,g,f,n,u;return n=new P({props:{code:`

from datasets import Dataset, interleave_datasets
d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12]})
d3 = Dataset.from_dict({"a": [20, 21, 22]})
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42, stopping_strategy="all_exhausted")
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
dataset["a"]
dataset = interleave_datasets([d1, d2, d3])
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], stopping_strategy="all_exhausted")
dataset["a"]
d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12, 13]})
d3 = Dataset.from_dict({"a": [20, 21, 22, 23, 24]})
dataset = interleave_datasets([d1, d2, d3])
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], stopping_strategy="all_exhausted")
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
dataset["a"]
dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42, stopping_strategy="all_exhausted")
dataset["a"]

from datasets import load_dataset, interleave_datasets
d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
dataset = interleave_datasets([d1, d2])
iterator = iter(dataset)
next(iterator)
next(iterator)`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>, stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>, stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, ..., <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">24</span>]
For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Pne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.data`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.data`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ane(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cache_files`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cache_files
{<span class="hljs-string">&#x27;test&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-test.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;train&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-train.arrow&#x27;</span>}],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [{<span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/rotten_tomatoes_movie_review/default/1.0.0/40d411e45a6ce3484deed7cc15b82a53dad9a72aafd9f86f8f227134bec5ca46/rotten_tomatoes_movie_review-validation.arrow&#x27;</span>}]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Fne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_columns`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_columns
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">2</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Lne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.num_rows`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.num_rows
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">1066</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">8530</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">1066</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Sne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.column_names
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function One(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.shape`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.shape
{<span class="hljs-string">&#x27;test&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;train&#x27;</span>: (<span class="hljs-number">8530</span>, <span class="hljs-number">2</span>), <span class="hljs-string">&#x27;validation&#x27;</span>: (<span class="hljs-number">1066</span>, <span class="hljs-number">2</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Cne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.unique("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.unique(<span class="hljs-string">&quot;label&quot;</span>)
{<span class="hljs-string">&#x27;test&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;train&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <span class="hljs-string">&#x27;validation&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function zne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.cleanup_cache_files()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.cleanup_cache_files()
{<span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;validation&#x27;</span>: <span class="hljs-number">0</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Vne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
ds["train"][0:3]["text"]

ds = ds.map(lambda example: tokenizer(example["text"]), batched=True)
ds = ds.map(add_prefix, num_proc=4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>:<span class="hljs-number">3</span>][<span class="hljs-string">&quot;text&quot;</span>]
[<span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>,
 <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>]

<span class="hljs-comment"># process a batch of examples</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: tokenizer(example[<span class="hljs-string">&quot;text&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-comment"># set number of processors</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix, num_proc=<span class="hljs-number">4</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Une(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.filter(lambda x: x["label"] == 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">1</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">4265</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
        num_rows: <span class="hljs-number">533</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Mne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]
sorted_ds = ds.sort("label")
sorted_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds = ds.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Rne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"]["label"][:10]

shuffled_ds = ds.shuffle(seed=42)
shuffled_ds["train"]["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]

<span class="hljs-comment"># set a seed</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Bne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Gne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x["text"], truncation=True, padding=True), batched=True)
ds.set_format(type="numpy", columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format
ds.reset_format()
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;numpy&quot;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;numpy&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Hne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
ds = ds.map(lambda x: tokenizer(x['text'], truncation=True, padding=True), batched=True)
ds["train"].format
ds = ds.with_format(type='tensorflow', columns=['input_ids', 'token_type_ids', 'attention_mask', 'label'])
ds["train"].format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: tokenizer(x[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-literal">None</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;tensorflow&#x27;</span>, columns=[<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
 <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {},
 <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>,
 <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;tensorflow&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Wne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
from transformers import AutoTokenizer
ds = load_dataset("rotten_tomatoes")
tokenizer = AutoTokenizer.from_pretrained("bert-base-cased")
def encode(example):
    return tokenizer(example['text'], truncation=True, padding=True, return_tensors="pt")
ds = ds.with_transform(encode)
ds["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&#x27;text&#x27;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>,
 <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: tensor([  <span class="hljs-number">101</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">2067</span>,  <span class="hljs-number">1110</span>, <span class="hljs-number">17348</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1129</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">6880</span>,  <span class="hljs-number">1432</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1207</span>,   <span class="hljs-number">107</span>, <span class="hljs-number">14255</span>,  <span class="hljs-number">1389</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1105</span>,  <span class="hljs-number">1115</span>,  <span class="hljs-number">1119</span>,
        <span class="hljs-number">112</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1280</span>,  <span class="hljs-number">1106</span>,  <span class="hljs-number">1294</span>,   <span class="hljs-number">170</span>, <span class="hljs-number">24194</span>,  <span class="hljs-number">1256</span>,  <span class="hljs-number">3407</span>,  <span class="hljs-number">1190</span>,
        <span class="hljs-number">170</span>, <span class="hljs-number">11791</span>,  <span class="hljs-number">5253</span>,   <span class="hljs-number">188</span>,  <span class="hljs-number">1732</span>,  <span class="hljs-number">7200</span>, <span class="hljs-number">10947</span>, <span class="hljs-number">12606</span>,  <span class="hljs-number">2895</span>,   <span class="hljs-number">117</span>,
        <span class="hljs-number">179</span>,  <span class="hljs-number">7766</span>,   <span class="hljs-number">118</span>,   <span class="hljs-number">172</span>, <span class="hljs-number">15554</span>,  <span class="hljs-number">1181</span>,  <span class="hljs-number">3498</span>,  <span class="hljs-number">6961</span>,  <span class="hljs-number">3263</span>,  <span class="hljs-number">1137</span>,
        <span class="hljs-number">188</span>,  <span class="hljs-number">1566</span>,  <span class="hljs-number">7912</span>, <span class="hljs-number">14516</span>,  <span class="hljs-number">6997</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: tensor([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
        <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Yne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad")
ds["train"].features
ds.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.flatten()
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Jne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Kne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Zne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.remove_columns("label")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Xne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_column("label", "label_new")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;label&quot;</span>, <span class="hljs-string">&quot;label_new&quot;</span>)
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Qne(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes")
ds.rename_columns({'text': 'text_new', 'label': 'label_new'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_columns({<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;label_new&#x27;</span>})
DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">8530</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;text_new&#x27;</span>, <span class="hljs-string">&#x27;label_new&#x27;</span>],
        num_rows: <span class="hljs-number">1066</span>
    })
})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function ere(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("boolq")
ds["train"].features
ds = ds.class_encode_column("answer")
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;boolq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.class_encode_column(<span class="hljs-string">&quot;answer&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;answer&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;passage&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function tre(k){let c,g,f,n,u;return n=new P({props:{code:'dataset_dict.push_to_hub("<organization>/<dataset_id>")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset_dict.push_to_hub(<span class="hljs-string">&quot;&lt;organization&gt;/&lt;dataset_id&gt;&quot;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function are(k){let c,g,f,n,u;return n=new P({props:{code:`def read_image_file(example):
    with open(example["image"].filename, "rb") as f:
        return {"image": {"bytes": f.read()}}
ds = ds.map(read_image_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_image_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;image&quot;</span>].filename, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;image&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_image_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){c=r("p"),g=i("This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"This can be done by storing the \u201Cbytes\u201D instead of the \u201Cpath\u201D of the images or audio files:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function sre(k){let c,g;return c=new P({props:{code:`def read_audio_file(example):
    with open(example["audio"]["path"], "rb") as f:
        return {"audio": {"bytes": f.read()}}
ds = ds.map(read_audio_file)
ds.save_to_disk("path/to/dataset/dir")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(example[<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
<span class="hljs-meta">... </span>        <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;audio&quot;</span>: {<span class="hljs-string">&quot;bytes&quot;</span>: f.read()}}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(read_audio_file)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.save_to_disk(<span class="hljs-string">&quot;path/to/dataset/dir&quot;</span>)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function nre(k){let c,g,f,n,u;return n=new P({props:{code:"ds = load_from_disk('path/to/dataset/directory')",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_from_disk(<span class="hljs-string">&#x27;path/to/dataset/directory&#x27;</span>)'}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function rre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_csv({'train': 'path/to/dataset.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_csv({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.csv&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function ore(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_json({'train': 'path/to/dataset.json'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_json({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.json&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function lre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_parquet({'train': 'path/to/dataset/parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_parquet({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset/parquet&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function ire(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import DatasetDict
ds = DatasetDict.from_text({'train': 'path/to/dataset.txt'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> DatasetDict
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = DatasetDict.from_text({<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;path/to/dataset.txt&#x27;</span>})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function pre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds = ds.remove_columns("label")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function cre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train", streaming=True)
ds.features
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">8000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;english_transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;intent_class&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;abroad&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;app_error&#x27;</span>, <span class="hljs-string">&#x27;atm_limit&#x27;</span>, <span class="hljs-string">&#x27;balance&#x27;</span>, <span class="hljs-string">&#x27;business_loan&#x27;</span>,  <span class="hljs-string">&#x27;card_issues&#x27;</span>, <span class="hljs-string">&#x27;cash_deposit&#x27;</span>, <span class="hljs-string">&#x27;direct_debit&#x27;</span>, <span class="hljs-string">&#x27;freeze&#x27;</span>, <span class="hljs-string">&#x27;high_value_payment&#x27;</span>, <span class="hljs-string">&#x27;joint_account&#x27;</span>, <span class="hljs-string">&#x27;latest_transactions&#x27;</span>, <span class="hljs-string">&#x27;pay_bill&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;lang_id&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">14</span>, names=[<span class="hljs-string">&#x27;cs-CZ&#x27;</span>, <span class="hljs-string">&#x27;de-DE&#x27;</span>, <span class="hljs-string">&#x27;en-AU&#x27;</span>, <span class="hljs-string">&#x27;en-GB&#x27;</span>, <span class="hljs-string">&#x27;en-US&#x27;</span>, <span class="hljs-string">&#x27;es-ES&#x27;</span>, <span class="hljs-string">&#x27;fr-FR&#x27;</span>, <span class="hljs-string">&#x27;it-IT&#x27;</span>, <span class="hljs-string">&#x27;ko-KR&#x27;</span>,  <span class="hljs-string">&#x27;nl-NL&#x27;</span>, <span class="hljs-string">&#x27;pl-PL&#x27;</span>, <span class="hljs-string">&#x27;pt-PT&#x27;</span>, <span class="hljs-string">&#x27;ru-RU&#x27;</span>, <span class="hljs-string">&#x27;zh-CN&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;path&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;transcription&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function dre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds.features
new_features = ds.features.copy()
new_features["label"] = ClassLabel(names=["bad", "good"])
new_features["text"] = Value("large_string")
ds = ds.cast(new_features)
ds.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;bad&quot;</span>, <span class="hljs-string">&quot;good&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;text&quot;</span>] = Value(<span class="hljs-string">&quot;large_string&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function mre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: effective but too-tepid biopic&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function hre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
next(iter(ds))
ds.rename_column("text", "movie_review")
next(iter(ds))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function fre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&quot;it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function ure(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
shuffled_ds = ds.shuffle(seed=42)
list(shuffled_ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(shuffled_ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function gre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
list(ds.take(3))
ds = ds.skip(1)
list(ds.take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.skip(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds.take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;if you sometimes like to go to the movies to have fun , wasabi is a good place to start .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function _re(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train", streaming=True)
small_ds = ds.take(2)
list(small_ds)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>small_ds = ds.take(<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(small_ds)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function bre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
def add_prefix(example):
    example["text"] = "Review: " + example["text"]
    return example
ds = ds.map(add_prefix)
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;text&quot;</span>] = <span class="hljs-string">&quot;Review: &quot;</span> + example[<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> example
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function $re(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.filter(lambda x: x["label"] == 0)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>] == <span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: simplistic , silly and tedious .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;Review: it&#x27;s so laddish and juvenile , only teenage boys could possibly find it funny .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Review: exploitative and largely devoid of the depth or sophistication that would make watching such a graphic treatment of the crimes bearable .&#x27;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function xre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
list(ds["train"].take(3))
ds = ds.shuffle(seed=42)
list(ds["train"].take(3))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the gorgeously elaborate continuation of &quot; the lord of the rings &quot; trilogy is so huge that a column of words cannot adequately describe co-writer/director peter jackson&#x27;</span>s expanded vision of j . r . r . tolkien<span class="hljs-string">&#x27;s middle-earth .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;effective but too-tepid biopic&#x27;</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(ds[<span class="hljs-string">&quot;train&quot;</span>].take(<span class="hljs-number">3</span>))
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;a sports movie with action that&#x27;s exciting on the field and a story you care about off it .&quot;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;at its best , the good girl is a refreshingly adult take on adultery . . .&#x27;</span>},
 {<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;sam jones became a very lucky filmmaker the day wilco got dropped from their record label , proving that one man&#x27;s ruin may be another&#x27;s fortune .&quot;</span>}]`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function vre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(example):
    return tokenizer(examples["text"], truncation=True, padding="max_length")
ds = ds.map(encode, batched=True, remove_columns=["text"])
ds = ds.with_format("torch")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(examples[<span class="hljs-string">&quot;text&quot;</span>], truncation=<span class="hljs-literal">True</span>, padding=<span class="hljs-string">&quot;max_length&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.<span class="hljs-built_in">map</span>(encode, batched=<span class="hljs-literal">True</span>, remove_columns=[<span class="hljs-string">&quot;text&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.with_format(<span class="hljs-string">&quot;torch&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function yre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
new_features = ds["train"].features.copy()
new_features['label'] = ClassLabel(names=['bad', 'good'])
new_features['text'] = Value('large_string')
ds = ds.cast(new_features)
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = ds[<span class="hljs-string">&quot;train&quot;</span>].features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;label&#x27;</span>] = ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&#x27;text&#x27;</span>] = Value(<span class="hljs-string">&#x27;large_string&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;large_string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function jre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds["train"].features
ds = ds.cast_column('label', ClassLabel(names=['bad', 'good']))
ds["train"].features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;label&#x27;</span>, ClassLabel(names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>]))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-string">&quot;train&quot;</span>].features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function wre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.remove_columns("label")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Dre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_column("text", "movie_review")
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_column(<span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-string">&quot;movie_review&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function kre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", streaming=True)
ds = ds.rename_columns({"text": "movie_review", "label": "rating"})
next(iter(ds["train"]))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.rename_columns({<span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;movie_review&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;rating&quot;</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(ds[<span class="hljs-string">&quot;train&quot;</span>]))
{<span class="hljs-string">&#x27;movie_review&#x27;</span>: <span class="hljs-string">&#x27;the rock is destined to be the 21st century&#x27;</span>s new <span class="hljs-string">&quot; conan &quot;</span> <span class="hljs-keyword">and</span> that he<span class="hljs-string">&#x27;s going to make a splash even greater than arnold schwarzenegger , jean-claud van damme or steven segal .&#x27;</span>,
 <span class="hljs-string">&#x27;rating&#x27;</span>: <span class="hljs-number">1</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ere(k){let c,g,f,n,u,t,d,mn,fa,Fr,Oe;return{c(){c=r("p"),g=i("A "),f=r("a"),n=i("datasets.Sequence"),u=i(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=r("code"),d=i("list"),mn=i(` instead of the
`),fa=r("a"),Fr=i("datasets.Sequence"),Oe=i("."),this.h()},l(be){c=o(be,"P",{});var ne=l(c);g=p(ne,"A "),f=o(ne,"A",{href:!0});var ua=l(f);n=p(ua,"datasets.Sequence"),ua.forEach(a),u=p(ne,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),t=o(ne,"CODE",{});var nu=l(t);d=p(nu,"list"),nu.forEach(a),mn=p(ne,` instead of the
`),fa=o(ne,"A",{href:!0});var Lr=l(fa);Fr=p(Lr,"datasets.Sequence"),Lr.forEach(a),Oe=p(ne,"."),ne.forEach(a),this.h()},h(){w(f,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Sequence"),w(fa,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Sequence")},m(be,ne){D(be,c,ne),e(c,g),e(c,f),e(f,n),e(c,u),e(c,t),e(t,d),e(c,mn),e(c,fa),e(fa,Fr),e(c,Oe)},d(be){be&&a(c)}}}function qre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
copy_of_features = ds.features.copy()
copy_of_features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features = ds.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>copy_of_features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;neg&#x27;</span>, <span class="hljs-string">&#x27;pos&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ire(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("squad", split="train")
ds.features.flatten()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features.flatten()
{<span class="hljs-string">&#x27;answers.answer_start&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;answers.text&#x27;</span>: <span class="hljs-type">Sequence</span>(feature=Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Tre(k){let c,g,f,n,u;return n=new P({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Nre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Pre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features, Sequence, Value, ClassLabel
features = Features({'post': Sequence(feature={'text': Value(dtype='string'), 'upvotes': Value(dtype='int32'), 'label': ClassLabel(num_classes=2, names=['hot', 'cold'])})})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value, ClassLabel
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>])})})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;upvotes&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;hot&#x27;</span>, <span class="hljs-string">&#x27;cold&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Are(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'label': ClassLabel(num_classes=3, names=['bad', 'ok', 'good'])})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>])})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">3</span>, names=[<span class="hljs-string">&#x27;bad&#x27;</span>, <span class="hljs-string">&#x27;ok&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>], <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Fre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].int2str(0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].int2str(<span class="hljs-number">0</span>)
<span class="hljs-string">&#x27;neg&#x27;</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Lre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset
ds = load_dataset("rotten_tomatoes", split="train")
ds.features["label"].str2int('neg')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;rotten_tomatoes&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;label&quot;</span>].str2int(<span class="hljs-string">&#x27;neg&#x27;</span>)
<span class="hljs-number">0</span>`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Sre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'stars': Value(dtype='int32')})
features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})
<span class="hljs-meta">&gt;&gt;&gt; </span>features
{<span class="hljs-string">&#x27;stars&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ore(k){let c,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.Translation(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': 'le chat',
        'de': 'die katze'
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Cre(k){let c,g,f,n,u;return n=new P({props:{code:`# At construction time:
datasets.features.TranslationVariableLanguages(languages=['en', 'fr', 'de'])
# During data generation:
yield {
        'en': 'the cat',
        'fr': ['le chat', 'la chatte,']
        'de': 'die katze'
}
# Tensor returned :
{
        'language': ['en', 'de', 'fr', 'fr'],
        'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># At construction time:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets.features.TranslationVariableLanguages(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># During data generation:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">yield</span> {
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Tensor returned :</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>{
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-meta">... </span>        <span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
<span class="hljs-meta">... </span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function zre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array2D(shape=(1, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array2D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Vre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array3D(shape=(1, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array3D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Ure(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array4D(shape=(1, 2, 2, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array4D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Mre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import Features
features = Features({'x': Array5D(shape=(1, 2, 2, 3, 3), dtype='int32')})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features
<span class="hljs-meta">&gt;&gt;&gt; </span>features = Features({<span class="hljs-string">&#x27;x&#x27;</span>: Array5D(shape=(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>), dtype=<span class="hljs-string">&#x27;int32&#x27;</span>)})`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Rre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Audio
ds = load_dataset("PolyAI/minds14", name="en-US", split="train")
ds = ds.cast_column("audio", Audio(sampling_rate=16000))
ds[0]["audio"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Audio
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>]
{<span class="hljs-string">&#x27;array&#x27;</span>: array([ <span class="hljs-number">2.3443763e-05</span>,  <span class="hljs-number">2.1729663e-04</span>,  <span class="hljs-number">2.2145823e-04</span>, ...,
     <span class="hljs-number">3.8356509e-05</span>, -<span class="hljs-number">7.3497440e-06</span>, -<span class="hljs-number">2.1754686e-05</span>], dtype=float32),
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/f14948e0e84be638dd7943ac36518a4cf3324e8b7aa331c5ab11541518e9368c/en-US~JOINT_ACCOUNT/602ba55abb1e6d0fbce92065.wav&#x27;</span>,
 <span class="hljs-string">&#x27;sampling_rate&#x27;</span>: <span class="hljs-number">16000</span>}`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Bre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_dataset, Image
ds = load_dataset("beans", split="train")
ds.features["image"]
ds[0]["image"]
ds = ds.cast_column('image', Image(decode=False))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds.features[<span class="hljs-string">&quot;image&quot;</span>]
Image(decode=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>ds[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=500x500 at <span class="hljs-number">0x15E52E7F0</span>&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>ds = ds.cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/healthy/healthy_train.85.jpg&#x27;</span>}`}}),{c(){c=r("p"),g=i("Examples:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Examples:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Gre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import MetricInfo
metric_info = MetricInfo.from_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> MetricInfo
<span class="hljs-meta">&gt;&gt;&gt; </span>metric_info = MetricInfo.from_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Hre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.info.write_to_directory("/path/to/directory/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.info.write_to_directory(<span class="hljs-string">&quot;/path/to/directory/&quot;</span>)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Wre(k){let c,g,f,n;return{c(){c=r("p"),g=i("Use the new library \u{1F917} Evaluate instead: "),f=r("a"),n=i("https://huggingface.co/docs/evaluate"),this.h()},l(u){c=o(u,"P",{});var t=l(c);g=p(t,"Use the new library \u{1F917} Evaluate instead: "),f=o(t,"A",{href:!0,rel:!0});var d=l(f);n=p(d,"https://huggingface.co/docs/evaluate"),d.forEach(a),t.forEach(a),this.h()},h(){w(f,"href","https://huggingface.co/docs/evaluate"),w(f,"rel","nofollow")},m(u,t){D(u,c,t),e(c,g),e(c,f),e(f,n)},d(u){u&&a(c)}}}function Yre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add(predictions=model_predictions, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add(predictions=model_predictions, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Jre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
metric.add_batch(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>metric.add_batch(predictions=model_prediction, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Kre(k){let c,g,f,n,u;return n=new P({props:{code:`from datasets import load_metric
metric = load_metric("accuracy")
accuracy = metric.compute(predictions=model_prediction, references=labels)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&quot;accuracy&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>accuracy = metric.compute(predictions=model_prediction, references=labels)`}}),{c(){c=r("p"),g=i("Example:"),f=m(),_(n.$$.fragment)},l(t){c=o(t,"P",{});var d=l(c);g=p(d,"Example:"),d.forEach(a),f=h(t),b(n.$$.fragment,t)},m(t,d){D(t,c,d),e(c,g),D(t,f,d),$(n,t,d),u=!0},p:N,i(t){u||(x(n.$$.fragment,t),u=!0)},o(t){v(n.$$.fragment,t),u=!1},d(t){t&&a(c),t&&a(f),y(n,t)}}}function Zre(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)
s3.ls('public-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Xre(k){let c,g;return c=new P({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
s3.ls('my-private-datasets/imdb/train')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function Qre(k){let c,g;return c=new P({props:{code:`import botocore
from datasets.filesystems import S3Filesystem

s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function eoe(k){let c,g;return c=new P({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem

s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset = load_from_disk('s3://my-private-datasets/imdb/train', fs=s3)
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function toe(k){let c,g;return c=new P({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem

dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
dataset.save_to_disk('s3://my-private-datasets/imdb/train', fs=s3)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>, fs=s3)`}}),{c(){_(c.$$.fragment)},l(f){b(c.$$.fragment,f)},m(f,n){$(c,f,n),g=!0},p:N,i(f){g||(x(c.$$.fragment,f),g=!0)},o(f){v(c.$$.fragment,f),g=!1},d(f){y(c,f)}}}function aoe(k){let c,g,f,n,u,t,d,mn,fa,Fr,Oe,be,ne,ua,nu,Lr,Xk,q7,Q,zp,Qk,$$,e4,t4,ru,x$,a4,s4,n4,v$,r4,o4,$e,Vp,l4,Up,i4,y$,p4,c4,d4,j$,m4,h4,w$,f4,u4,Sr,g4,ga,Mp,_4,hn,b4,D$,$4,x4,k$,v4,y4,j4,Or,I7,fn,Cr,E$,Rp,w4,q$,D4,T7,zr,k4,ou,E4,q4,N7,q,Bp,I4,I$,T4,N4,tt,Gp,P4,T$,A4,F4,N$,P$,L4,S4,Vr,O4,at,Hp,C4,A$,z4,V4,F$,L$,U4,M4,Ur,R4,Mr,Wp,B4,S$,G4,H4,Rr,Yp,W4,O$,Y4,J4,xe,Jp,K4,At,Z4,C$,X4,Q4,z$,e3,t3,lu,a3,s3,n3,Kp,r3,V$,o3,l3,i3,Zp,p3,U$,c3,d3,m3,Br,h3,Gr,Xp,f3,Ft,u3,M$,g3,_3,R$,b3,$3,iu,x3,v3,y3,_a,Qp,j3,B$,w3,D3,Hr,k3,ba,ec,E3,G$,q3,I3,Wr,T3,$a,tc,N3,H$,P3,A3,Yr,F3,xa,ac,L3,W$,S3,O3,Jr,C3,va,sc,z3,nc,V3,Kr,U3,Y$,M3,R3,B3,G3,Zr,H3,ya,rc,W3,J$,Y3,J3,Xr,K3,ja,oc,Z3,K$,X3,Q3,Qr,eE,st,lc,tE,Z$,aE,sE,X$,nE,rE,eo,oE,wa,ic,lE,Q$,iE,pE,to,cE,Da,pc,dE,e2,mE,hE,ao,fE,ka,cc,uE,t2,gE,_E,so,bE,nt,dc,$E,a2,xE,vE,un,yE,pu,jE,wE,s2,DE,kE,EE,no,qE,Ea,mc,IE,n2,TE,NE,ro,PE,qa,hc,AE,r2,FE,LE,oo,SE,Ia,fc,OE,uc,CE,o2,zE,VE,UE,lo,ME,Ta,gc,RE,l2,BE,GE,io,HE,Na,_c,WE,i2,YE,JE,bc,KE,cu,ZE,XE,QE,po,$c,e5,gn,t5,p2,a5,s5,c2,n5,r5,o5,ve,xc,l5,Ce,i5,d2,p5,c5,m2,d5,m5,h2,h5,f5,du,u5,g5,_5,ze,b5,f2,$5,x5,u2,v5,y5,g2,j5,w5,_2,D5,k5,E5,b2,q5,I5,co,T5,Pa,vc,N5,rt,P5,$2,A5,F5,x2,L5,S5,mu,O5,C5,hu,z5,V5,mo,U5,ot,yc,M5,jc,R5,v2,B5,G5,H5,fu,W5,y2,Y5,J5,ho,K5,ye,wc,Z5,Lt,X5,j2,Q5,e6,w2,t6,a6,D2,s6,n6,r6,Dc,o6,uu,l6,i6,p6,_n,c6,gu,d6,m6,k2,h6,f6,u6,fo,g6,je,kc,_6,bn,b6,E2,$6,x6,q2,v6,y6,j6,$n,w6,_u,D6,k6,bu,E6,q6,I6,xn,T6,$u,N6,P6,I2,A6,F6,L6,uo,S6,go,Ec,O6,T2,C6,z6,lt,qc,V6,N2,U6,M6,P2,R6,B6,_o,G6,we,Ic,H6,A2,W6,Y6,Tc,J6,F2,K6,Z6,X6,vn,L2,Q6,e8,S2,t8,a8,de,s8,O2,n8,r8,C2,o8,l8,z2,i8,p8,V2,c8,d8,U2,m8,h8,f8,bo,u8,Aa,Nc,g8,M2,_8,b8,$o,$8,Fa,Pc,x8,R2,v8,y8,xo,j8,it,Ac,w8,B2,D8,k8,G2,E8,q8,vo,I8,pt,Fc,T8,H2,N8,P8,W2,A8,F8,yo,L8,ct,Lc,S8,Y,O8,Y2,C8,z8,J2,V8,U8,K2,M8,R8,Z2,B8,G8,X2,H8,W8,Q2,Y8,J8,ex,K8,Z8,X8,Sc,Q8,tx,eq,tq,aq,jo,sq,re,Oc,nq,yn,rq,ax,oq,lq,sx,iq,pq,cq,nx,dq,mq,Cc,hq,rx,fq,uq,gq,ox,_q,bq,wo,$q,La,zc,xq,lx,vq,yq,Do,jq,dt,Vc,wq,ix,Dq,kq,St,Eq,xu,qq,Iq,vu,Tq,Nq,px,Pq,Aq,Fq,ko,Lq,Z,Uc,Sq,jn,Oq,yu,Cq,zq,cx,Vq,Uq,Mq,wn,Rq,ju,Bq,Gq,wu,Hq,Wq,Yq,Mc,Jq,dx,Kq,Zq,Xq,Eo,Qq,qo,e9,Io,t9,Sa,Rc,a9,Ot,s9,mx,n9,r9,Du,o9,l9,hx,i9,p9,c9,To,d9,No,Bc,m9,fx,h9,f9,Oa,Gc,u9,ux,g9,_9,Po,b9,Ca,Hc,$9,Wc,x9,gx,v9,y9,j9,Ao,w9,za,Yc,D9,_x,k9,E9,Fo,q9,Va,Jc,I9,bx,T9,N9,Lo,P9,Ua,Kc,A9,$x,F9,L9,So,S9,mt,Zc,O9,Dn,C9,xx,z9,V9,vx,U9,M9,R9,yx,ku,B9,Xc,G9,H9,Oo,W9,Ma,Qc,Y9,Ct,J9,jx,K9,Z9,wx,X9,Q9,Dx,eI,tI,aI,kx,Eu,sI,ed,nI,rI,Co,td,oI,Ex,lI,iI,Ra,ad,pI,qx,cI,dI,sd,mI,Ix,hI,fI,uI,Ba,nd,gI,Tx,_I,bI,zo,$I,Ga,rd,xI,Nx,vI,yI,Vo,jI,Uo,od,wI,Px,DI,kI,Mo,ld,EI,Ax,qI,II,Ro,id,TI,Fx,NI,PI,Bo,pd,AI,Lx,FI,LI,Go,cd,SI,Sx,OI,CI,Ho,dd,zI,Ox,VI,UI,Wo,md,MI,Cx,RI,BI,Yo,hd,GI,qu,Iu,HI,WI,YI,Jo,fd,JI,Tu,Nu,KI,ZI,XI,Pu,ud,QI,Au,gd,eT,Fu,_d,tT,Lu,bd,aT,Su,$d,sT,Ou,xd,nT,Cu,vd,rT,zu,yd,oT,Vu,jd,lT,Uu,wd,iT,Mu,Dd,pT,Ru,kd,cT,Bu,Ed,dT,Ha,qd,mT,zx,hT,fT,Ko,uT,Wa,Id,gT,Vx,_T,bT,Zo,$T,Ya,Td,xT,Ux,vT,yT,Xo,jT,Ja,Nd,wT,Mx,DT,kT,Qo,ET,Ka,Pd,qT,kn,IT,Gu,TT,NT,Hu,PT,AT,FT,En,LT,Rx,ST,OT,Bx,CT,zT,VT,Za,Ad,UT,Fd,MT,Gx,RT,BT,GT,el,P7,zt,Ld,HT,qn,WT,Wu,YT,JT,Yu,KT,ZT,XT,tl,A7,ee,Sd,QT,Hx,eN,tN,In,aN,Ju,sN,nN,Ku,rN,oN,lN,Ve,iN,Wx,pN,cN,Yx,dN,mN,Jx,hN,fN,Kx,uN,gN,_N,Tn,bN,Zx,$N,xN,Xx,vN,yN,jN,al,F7,me,Od,wN,Qx,DN,kN,e1,EN,qN,t1,IN,TN,Ue,a1,NN,PN,s1,AN,FN,n1,LN,SN,Cd,ON,Zu,CN,zN,VN,Vt,UN,Xu,MN,RN,r1,BN,GN,Qu,HN,WN,L7,he,zd,YN,o1,JN,KN,l1,ZN,XN,i1,QN,eP,Me,p1,tP,aP,c1,sP,nP,d1,rP,oP,Vd,lP,eg,iP,pP,cP,Ut,dP,tg,mP,hP,m1,fP,uP,ag,gP,_P,S7,fe,Ud,bP,h1,$P,xP,f1,vP,yP,u1,jP,wP,Re,g1,DP,kP,_1,EP,qP,b1,IP,TP,Md,NP,sg,PP,AP,FP,Mt,LP,ng,SP,OP,$1,CP,zP,rg,VP,UP,O7,Nn,sl,x1,Rd,MP,v1,RP,C7,nl,BP,y1,GP,HP,z7,A,Bd,WP,j1,YP,JP,Xa,Gd,KP,w1,ZP,XP,rl,QP,Qa,Hd,eA,D1,tA,aA,ol,sA,es,Wd,nA,k1,rA,oA,ll,lA,ts,Yd,iA,Jd,pA,il,cA,E1,dA,mA,hA,fA,pl,uA,as,Kd,gA,q1,_A,bA,cl,$A,ss,Zd,xA,I1,vA,yA,dl,jA,ht,Xd,wA,T1,DA,kA,N1,EA,qA,ml,IA,ns,Qd,TA,P1,NA,PA,hl,AA,rs,em,FA,A1,LA,SA,fl,OA,os,tm,CA,F1,zA,VA,ul,UA,ft,am,MA,L1,RA,BA,S1,GA,HA,gl,WA,De,sm,YA,O1,JA,KA,C1,ZA,XA,z1,QA,eF,_l,tF,ke,nm,aF,rm,sF,V1,nF,rF,oF,Be,lF,U1,iF,pF,M1,cF,dF,R1,mF,hF,B1,fF,uF,gF,G1,_F,bF,bl,$F,ut,om,xF,lm,vF,H1,yF,jF,wF,og,DF,W1,kF,EF,$l,qF,xl,im,IF,Pn,TF,Y1,NF,PF,J1,AF,FF,LF,Ee,pm,SF,Rt,OF,K1,CF,zF,Z1,VF,UF,X1,MF,RF,BF,cm,GF,lg,HF,WF,YF,An,JF,ig,KF,ZF,Q1,XF,QF,eL,vl,tL,qe,dm,aL,Fn,sL,ev,nL,rL,tv,oL,lL,iL,Ln,pL,pg,cL,dL,cg,mL,hL,fL,Sn,uL,av,gL,_L,sv,bL,$L,xL,yl,vL,ls,mm,yL,nv,jL,wL,jl,DL,gt,hm,kL,rv,EL,qL,Bt,IL,dg,TL,NL,ov,PL,AL,lv,FL,LL,SL,wl,OL,is,fm,CL,iv,zL,VL,Dl,UL,Ie,um,ML,pv,RL,BL,cv,GL,HL,On,WL,mg,YL,JL,dv,KL,ZL,XL,kl,QL,Te,gm,eS,mv,tS,aS,Cn,sS,hg,nS,rS,hv,oS,lS,iS,_m,fv,pS,cS,uv,dS,mS,El,hS,ps,bm,fS,gv,uS,gS,ql,_S,cs,$m,bS,xm,$S,_v,xS,vS,yS,Il,jS,Ne,vm,wS,zn,DS,bv,kS,ES,$v,qS,IS,TS,xv,NS,PS,Gt,AS,fg,FS,LS,ug,SS,OS,vv,CS,zS,VS,Tl,US,oe,ym,MS,Vn,RS,gg,BS,GS,yv,HS,WS,YS,Un,JS,_g,KS,ZS,bg,XS,QS,eO,jm,tO,jv,aO,sO,nO,Nl,rO,Pl,oO,ds,wm,lO,Ht,iO,wv,pO,cO,$g,dO,mO,Dv,hO,fO,uO,Al,gO,ms,Dm,_O,kv,bO,$O,Fl,xO,hs,km,vO,Ev,yO,jO,Ll,wO,fs,Em,DO,qv,kO,EO,Sl,qO,us,qm,IO,Iv,TO,NO,Ol,PO,gs,Im,AO,Mn,FO,xg,LO,SO,vg,OO,CO,zO,Rn,VO,Tv,UO,MO,Nv,RO,BO,V7,yg,U7,Bn,Cl,Pv,Tm,GO,Av,HO,M7,zl,WO,jg,YO,JO,R7,L,Nm,KO,Fv,ZO,XO,_s,Pm,QO,Lv,eC,tC,Vl,aC,bs,Am,sC,Sv,nC,rC,Ul,oC,$s,Fm,lC,Ov,iC,pC,Ml,cC,wg,Lm,dC,Pe,Sm,mC,Cv,hC,fC,Om,uC,zv,gC,_C,bC,Gn,Vv,$C,xC,Uv,vC,yC,ue,jC,Mv,wC,DC,Rv,kC,EC,Bv,qC,IC,Gv,TC,NC,Hv,PC,AC,FC,Rl,LC,xs,Cm,SC,Wv,OC,CC,Bl,zC,vs,zm,VC,Yv,UC,MC,Gl,RC,le,Vm,BC,Jv,GC,HC,Kv,WC,YC,Um,JC,Zv,KC,ZC,XC,Hn,QC,Dg,ez,tz,kg,az,sz,nz,Hl,rz,ys,Mm,oz,Rm,lz,Xv,iz,pz,cz,Wl,dz,js,Bm,mz,Gm,hz,Qv,fz,uz,gz,Yl,_z,Jl,Hm,bz,Eg,qg,$z,xz,vz,Kl,Wm,yz,Ig,Tg,jz,wz,Dz,Ng,Ym,kz,Pg,Jm,Ez,Ag,Km,qz,Fg,Zm,Iz,Lg,Xm,Tz,Sg,Qm,Nz,Og,eh,Pz,Cg,th,Az,zg,ah,Fz,Vg,sh,Lz,Ug,nh,Sz,Mg,rh,Oz,Rg,oh,B7,Wn,Zl,ey,lh,Cz,ty,zz,G7,Xl,Vz,ay,Uz,Mz,H7,U,ih,Rz,Ae,ph,Bz,sy,Gz,Hz,ch,Wz,ny,Yz,Jz,Kz,Yn,ry,Zz,Xz,oy,Qz,eV,ge,tV,ly,aV,sV,iy,nV,rV,py,oV,lV,cy,iV,pV,dy,cV,dV,mV,Ql,hV,ws,dh,fV,my,uV,gV,ei,_V,ie,mh,bV,hy,$V,xV,fy,vV,yV,hh,jV,uy,wV,DV,kV,Jn,EV,Bg,qV,IV,Gg,TV,NV,PV,ti,AV,Ds,fh,FV,gy,LV,SV,ai,OV,ks,uh,CV,_y,zV,VV,si,UV,Es,gh,MV,by,RV,BV,ni,GV,qs,_h,HV,$y,WV,YV,ri,JV,Is,bh,KV,xy,ZV,XV,oi,QV,Ts,$h,eU,vy,tU,aU,li,W7,Kn,ii,yy,xh,sU,jy,nU,Y7,O,vh,rU,wy,oU,lU,yh,iU,Dy,pU,cU,dU,Hg,ky,mU,hU,fU,J,Ey,Ns,uU,Wg,gU,_U,qy,bU,$U,Iy,xU,vU,Ty,jh,yU,Yg,jU,wU,DU,Ny,wh,kU,Py,EU,qU,IU,Dh,Ge,TU,Ay,NU,PU,Jg,AU,FU,Fy,LU,SU,Kg,OU,CU,zU,pi,VU,Ly,He,UU,Zg,MU,RU,Xg,BU,GU,Qg,HU,WU,e_,YU,JU,KU,Sy,kh,ZU,t_,XU,QU,eM,Oy,Wt,tM,a_,aM,sM,Cy,nM,rM,zy,oM,lM,iM,Vy,ci,s_,pM,cM,n_,dM,mM,hM,Ps,Eh,fM,Uy,uM,gM,di,_M,mi,qh,bM,My,$M,xM,hi,Ih,vM,Ry,yM,jM,fi,Th,wM,By,DM,kM,ui,Nh,EM,Gy,qM,IM,gi,Ph,TM,Hy,NM,PM,_t,Ah,AM,Wy,FM,LM,Yy,SM,OM,_i,CM,bi,Fh,zM,Jy,VM,UM,Fe,Lh,MM,Ky,RM,BM,Zy,GM,HM,Yt,WM,r_,YM,JM,o_,KM,ZM,l_,XM,QM,eR,$i,tR,bt,Sh,aR,Xy,sR,nR,Qy,rR,oR,xi,J7,Jt,Oh,lR,ej,iR,pR,vi,K7,B,Ch,cR,tj,dR,mR,zh,hR,aj,fR,uR,gR,Zn,i_,sj,_R,bR,$R,p_,nj,xR,vR,yR,c_,rj,jR,wR,DR,oj,kR,ER,yi,qR,As,Vh,IR,lj,TR,NR,Uh,ij,PR,AR,pj,FR,LR,$t,Mh,SR,cj,OR,CR,dj,zR,VR,ji,UR,Fs,Rh,MR,mj,RR,BR,wi,Z7,We,Bh,GR,hj,HR,WR,fj,YR,JR,Di,X7,te,Gh,KR,d_,uj,ZR,XR,QR,gj,eB,tB,Hh,aB,_j,sB,nB,rB,ki,oB,Ei,Wh,lB,bj,iB,Q7,ae,Yh,pB,m_,$j,cB,dB,mB,xj,hB,fB,vj,uB,gB,qi,_B,Ii,Jh,bB,yj,$B,eD,Kt,Kh,xB,jj,vB,yB,Ti,tD,Zt,Zh,jB,wj,wB,DB,Ni,aD,Xt,Xh,kB,Dj,EB,qB,Pi,sD,Qt,Qh,IB,kj,TB,NB,Ai,nD,M,ef,PB,Ej,AB,FB,qj,LB,SB,Xn,Ij,tf,OB,Tj,CB,zB,VB,Qn,af,UB,Nj,MB,RB,BB,sf,Pj,GB,HB,Aj,WB,YB,Fj,JB,KB,er,nf,ZB,Lj,XB,QB,eG,tr,Sj,tG,aG,Oj,sG,nG,Cj,rG,oG,zj,lG,iG,Fi,pG,Ls,rf,cG,Vj,dG,mG,ea,Uj,hG,fG,Mj,uG,gG,Rj,_G,bG,Bj,$G,xG,Li,of,vG,Gj,yG,jG,Si,lf,wG,Hj,DG,kG,Oi,pf,EG,Wj,qG,IG,Ci,cf,TG,Yj,NG,rD,R,df,PG,Jj,AG,FG,Kj,LG,SG,ta,Zj,mf,OG,Xj,CG,zG,VG,ar,hf,UG,Qj,MG,RG,BG,ff,e0,GG,HG,t0,WG,YG,a0,JG,KG,s0,uf,ZG,n0,XG,QG,eH,r0,gf,tH,o0,aH,sH,nH,zi,rH,Ss,_f,oH,l0,lH,iH,Ye,i0,pH,cH,p0,dH,mH,c0,hH,fH,d0,uH,gH,m0,_H,bH,Vi,bf,$H,h0,xH,vH,Ui,$f,yH,f0,jH,wH,Mi,xf,DH,u0,kH,EH,Ri,vf,qH,g0,IH,oD,sr,Bi,_0,yf,TH,b0,NH,lD,se,jf,PH,$0,AH,FH,h_,x0,LH,SH,OH,v0,CH,zH,Os,wf,VH,Df,UH,y0,MH,RH,BH,Gi,GH,Cs,kf,HH,aa,WH,j0,YH,JH,w0,KH,ZH,D0,XH,QH,eW,Hi,iD,nr,Wi,k0,Ef,tW,E0,aW,pD,zs,sW,q0,nW,rW,f_,oW,lW,cD,K,qf,iW,I0,pW,cW,Yi,dW,Vs,If,mW,T0,hW,fW,Ji,uW,Us,Tf,gW,N0,_W,bW,Ki,$W,xt,Nf,xW,P0,vW,yW,A0,jW,wW,Zi,DW,Xi,Pf,kW,F0,EW,dD,rr,Qi,L0,Af,qW,S0,IW,mD,C,Ff,TW,ep,O0,NW,PW,Lf,C0,AW,FW,LW,sa,SW,z0,OW,CW,V0,zW,VW,U0,UW,MW,RW,M0,BW,GW,R0,HW,WW,tp,YW,or,JW,B0,KW,ZW,G0,XW,QW,eY,ap,tY,na,aY,H0,sY,nY,W0,rY,oY,Y0,lY,iY,pY,sp,cY,lr,dY,J0,mY,hY,u_,fY,uY,gY,np,_Y,ir,bY,K0,$Y,xY,g_,vY,yY,jY,rp,hD,pr,Sf,wY,cr,DY,Z0,kY,EY,X0,qY,IY,fD,dr,Of,TY,Q0,NY,uD,mr,op,ew,Cf,PY,tw,AY,gD,hr,zf,FY,aw,LY,_D;return t=new ha({}),ua=new ha({}),zp=new E({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:'<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.',name:"task_templates"},{anchor:"datasets.DatasetInfo.*config_kwargs",description:'*<strong>*config_kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.',name:"*config_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/info.py#L93"}}),Vp=new E({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<em>str</em>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.from_directory.fs",description:`<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.5.0</p>
						
					</div>`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/info.py#L260"}}),Sr=new T({props:{anchor:"datasets.DatasetInfo.from_directory.example",$$slots:{default:[Nse]},$$scope:{ctx:k}}}),Mp=new E({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""},{name:"pretty_print",val:" = False"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetInfo.write_to_directory.dataset_info_dir",description:"<strong>dataset_info_dir</strong> (str) &#x2014; Destination directory.",name:"dataset_info_dir"},{anchor:"datasets.DatasetInfo.write_to_directory.pretty_print",description:"<strong>pretty_print</strong> (bool, default <code>False</code>) &#x2014; If True, the JSON will be pretty-printed with the indent level of 4.",name:"pretty_print"},{anchor:"datasets.DatasetInfo.write_to_directory.fs",description:`<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.5.0</p>
						
					</div>`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/info.py#L193"}}),Or=new T({props:{anchor:"datasets.DatasetInfo.write_to_directory.example",$$slots:{default:[Pse]},$$scope:{ctx:k}}}),Rp=new ha({}),Bp=new E({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L642"}}),Gp=new E({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4527",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Vr=new T({props:{anchor:"datasets.Dataset.add_column.example",$$slots:{default:[Ase]},$$scope:{ctx:k}}}),Hp=new E({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4768",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ur=new T({props:{anchor:"datasets.Dataset.add_item.example",$$slots:{default:[Fse]},$$scope:{ctx:k}}}),Wp=new E({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L713",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Yp=new E({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L748",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Jp=new E({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L776",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Br=new T({props:{anchor:"datasets.Dataset.from_pandas.example",$$slots:{default:[Lse]},$$scope:{ctx:k}}}),Xp=new E({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"}],parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L833",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Qp=new E({props:{name:"from_generator",anchor:"datasets.Dataset.from_generator",parameters:[{name:"generator",val:": typing.Callable"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"gen_kwargs",val:": typing.Optional[dict] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_generator.generator",description:"<strong>generator</strong> (<code>Callable</code>) &#x2014; A generator function that <em>yields</em> examples.",name:"generator"},{anchor:"datasets.Dataset.from_generator.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_generator.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_generator.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_generator.gen_kwargs(dict,",description:"<strong>gen_kwargs(<code>dict</code>,</strong> optional) &#x2014; Keyword arguments to be passed to the <em>generator</em> callable.",name:"gen_kwargs(dict,"},{anchor:"datasets.Dataset.from_generator.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>GeneratorConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L934",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Hr=new T({props:{anchor:"datasets.Dataset.from_generator.example",$$slots:{default:[Sse]},$$scope:{ctx:k}}}),ec=new E({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1302"}}),Wr=new T({props:{anchor:"datasets.Dataset.data.example",$$slots:{default:[Ose]},$$scope:{ctx:k}}}),tc=new E({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1322"}}),Yr=new T({props:{anchor:"datasets.Dataset.cache_files.example",$$slots:{default:[Cse]},$$scope:{ctx:k}}}),ac=new E({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1340"}}),Jr=new T({props:{anchor:"datasets.Dataset.num_columns.example",$$slots:{default:[zse]},$$scope:{ctx:k}}}),sc=new E({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1355"}}),Zr=new T({props:{anchor:"datasets.Dataset.num_rows.example",$$slots:{default:[Vse]},$$scope:{ctx:k}}}),rc=new E({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1372"}}),Xr=new T({props:{anchor:"datasets.Dataset.column_names.example",$$slots:{default:[Use]},$$scope:{ctx:k}}}),oc=new E({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1387"}}),Qr=new T({props:{anchor:"datasets.Dataset.shape.example",$$slots:{default:[Mse]},$$scope:{ctx:k}}}),lc=new E({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>).',name:"column"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1404",returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),eo=new T({props:{anchor:"datasets.Dataset.unique.example",$$slots:{default:[Rse]},$$scope:{ctx:k}}}),ic=new E({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"max_depth",val:" = 16"}],parametersDescription:[{anchor:"datasets.Dataset.flatten.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1508",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),to=new T({props:{anchor:"datasets.Dataset.flatten.example",$$slots:{default:[Bse]},$$scope:{ctx:k}}}),pc=new E({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1551",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ao=new T({props:{anchor:"datasets.Dataset.cast.example",$$slots:{default:[Gse]},$$scope:{ctx:k}}}),cc=new E({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"},{anchor:"datasets.Dataset.cast_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1627",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),so=new T({props:{anchor:"datasets.Dataset.cast_column.example",$$slots:{default:[Hse]},$$scope:{ctx:k}}}),dc=new E({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1666",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),no=new T({props:{anchor:"datasets.Dataset.remove_columns.example",$$slots:{default:[Wse]},$$scope:{ctx:k}}}),mc=new E({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1715",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ro=new T({props:{anchor:"datasets.Dataset.rename_column.example",$$slots:{default:[Yse]},$$scope:{ctx:k}}}),hc=new E({props:{name:"rename_columns",anchor:"datasets.Dataset.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"},{anchor:"datasets.Dataset.rename_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1779",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),oo=new T({props:{anchor:"datasets.Dataset.rename_columns.example",$$slots:{default:[Jse]},$$scope:{ctx:k}}}),fc=new E({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1434"}}),lo=new T({props:{anchor:"datasets.Dataset.class_encode_column.example",$$slots:{default:[Kse]},$$scope:{ctx:k}}}),gc=new E({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1845"}}),io=new T({props:{anchor:"datasets.Dataset.__len__.example",$$slots:{default:[Zse]},$$scope:{ctx:k}}}),_c=new E({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1921"}}),$c=new E({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.formatted_as.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1941"}}),xc=new E({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.set_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1969"}}),co=new T({props:{anchor:"datasets.Dataset.set_format.example",$$slots:{default:[Xse]},$$scope:{ctx:k}}}),vc=new E({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2070"}}),mo=new T({props:{anchor:"datasets.Dataset.set_transform.example",$$slots:{default:[Qse]},$$scope:{ctx:k}}}),yc=new E({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2041"}}),ho=new T({props:{anchor:"datasets.Dataset.reset_format.example",$$slots:{default:[ene]},$$scope:{ctx:k}}}),wc=new E({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.Dataset.with_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2110"}}),fo=new T({props:{anchor:"datasets.Dataset.with_format.example",$$slots:{default:[tne]},$$scope:{ctx:k}}}),kc=new E({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2158"}}),uo=new T({props:{anchor:"datasets.Dataset.with_transform.example",$$slots:{default:[ane]},$$scope:{ctx:k}}}),Ec=new E({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2277"}}),qc=new E({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2283",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),_o=new T({props:{anchor:"datasets.Dataset.cleanup_cache_files.example",$$slots:{default:[sne]},$$scope:{ctx:k}}}),Ic=new E({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Dict[str, Any], </em>extra_args) -&gt; Dict[str, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Dict[str, List], </em>extra_args) -&gt; Dict[str, List]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2330"}}),bo=new T({props:{anchor:"datasets.Dataset.map.example",$$slots:{default:[nne]},$$scope:{ctx:k}}}),Nc=new E({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2953"}}),$o=new T({props:{anchor:"datasets.Dataset.filter.example",$$slots:{default:[rne]},$$scope:{ctx:k}}}),Pc=new E({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:`<strong>indices</strong> (range, list, iterable, ndarray or Series) &#x2014; Range, list or 1D-array of integer indices for indexing.
If the indices correspond to a contiguous range, the Arrow table is simply sliced.
However passing a list of indices that are not contiguous creates indices mapping, which is much less efficient,
but still faster than recreating an Arrow table made of the requested rows.`,name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L3127"}}),xo=new T({props:{anchor:"datasets.Dataset.select.example",$$slots:{default:[one]},$$scope:{ctx:k}}}),Ac=new E({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L3368"}}),vo=new T({props:{anchor:"datasets.Dataset.sort.example",$$slots:{default:[lne]},$$scope:{ctx:k}}}),Fc=new E({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L3462"}}),yo=new T({props:{anchor:"datasets.Dataset.shuffle.example",$$slots:{default:[ine]},$$scope:{ctx:k}}}),Lc=new E({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"stratify_by_column",val:": typing.Optional[str] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.stratify_by_column",description:"<strong>stratify_by_column</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The column name of labels to be used to perform stratified split of data.",name:"stratify_by_column"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L3554"}}),jo=new T({props:{anchor:"datasets.Dataset.train_test_split.example",$$slots:{default:[pne]},$$scope:{ctx:k}}}),Oc=new E({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L3822"}}),wo=new T({props:{anchor:"datasets.Dataset.shard.example",$$slots:{default:[cne]},$$scope:{ctx:k}}}),zc=new E({props:{name:"to_tf_dataset",anchor:"datasets.Dataset.to_tf_dataset",parameters:[{name:"batch_size",val:": int"},{name:"columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"shuffle",val:": bool = False"},{name:"collate_fn",val:": typing.Optional[typing.Callable] = None"},{name:"drop_remainder",val:": bool = False"},{name:"collate_fn_args",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"prefetch",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.to_tf_dataset.batch_size",description:"<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.",name:"batch_size"},{anchor:"datasets.Dataset.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>, optional) &#x2014; Dataset column(s) to load in the tf.data.Dataset. Column
names that are created by the <em>collate_fn</em> and that do not exist in the original dataset can be used.`,name:"columns"},{anchor:"datasets.Dataset.to_tf_dataset.shuffle(bool,",description:`<strong>shuffle(<code>bool</code>,</strong> default to <em>False</em>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"shuffle(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>False</code>) &#x2014; Drop the last incomplete batch when loading. Ensures
that all batches yielded by the dataset will have the same length on the batch dimension.`,name:"drop_remainder(bool,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn(Callable,",description:`<strong>collate_fn(<code>Callable</code>,</strong> optional) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"collate_fn(Callable,"},{anchor:"datasets.Dataset.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.Dataset.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case
passing the labels here is optional, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.Dataset.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L330",returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),Do=new T({props:{anchor:"datasets.Dataset.to_tf_dataset.example",$$slots:{default:[dne]},$$scope:{ctx:k}}}),Vc=new E({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = None"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;5MB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4373"}}),ko=new T({props:{anchor:"datasets.Dataset.push_to_hub.example",$$slots:{default:[mne]},$$scope:{ctx:k}}}),Uc=new E({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1113"}}),Eo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example",$$slots:{default:[hne]},$$scope:{ctx:k}}}),qo=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-2",$$slots:{default:[fne]},$$scope:{ctx:k}}}),Io=new T({props:{anchor:"datasets.Dataset.save_to_disk.example-3",$$slots:{default:[une]},$$scope:{ctx:k}}}),Rc=new E({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/main/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1235",returnDescription:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset directory: the dataset requested.</li>
<li>If <em>dataset_path</em> is a path of a dataset dict directory: a <code>datasets.DatasetDict</code> with each split.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),To=new T({props:{anchor:"datasets.Dataset.load_from_disk.example",$$slots:{default:[gne]},$$scope:{ctx:k}}}),Bc=new E({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L3058"}}),Gc=new E({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_csv.*to_csv_kwargs",description:"*<strong>*to_csv_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>",name:"*to_csv_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L3978",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),Po=new T({props:{anchor:"datasets.Dataset.to_csv.example",$$slots:{default:[_ne]},$$scope:{ctx:k}}}),Hc=new E({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasets once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4091",returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),Ao=new T({props:{anchor:"datasets.Dataset.to_pandas.example",$$slots:{default:[bne]},$$scope:{ctx:k}}}),Yc=new E({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasets once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4011",returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),Fo=new T({props:{anchor:"datasets.Dataset.to_dict.example",$$slots:{default:[$ne]},$$scope:{ctx:k}}}),Jc=new E({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code></li>
</ul>`,name:"lines"},{anchor:"datasets.Dataset.to_json.*to_json_kwargs",description:'*<strong>*to_json_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.',name:"*to_json_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4046",returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),Lo=new T({props:{anchor:"datasets.Dataset.to_json.example",$$slots:{default:[xne]},$$scope:{ctx:k}}}),Kc=new E({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.to_parquet.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_parquet.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_parquet.*parquet_writer_kwargs",description:"*<strong>*parquet_writer_kwargs</strong> (additional keyword arguments) &#x2014; Parameters to pass to PyArrow&#x2019;s <code>pyarrow.parquet.ParquetWriter</code>",name:"*parquet_writer_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4128",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),So=new T({props:{anchor:"datasets.Dataset.to_parquet.example",$$slots:{default:[vne]},$$scope:{ctx:k}}}),Zc=new E({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.batch_size",description:`<strong>batch_size</strong> (Optional <code>int</code>) &#x2014; Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4565"}}),Oo=new T({props:{anchor:"datasets.Dataset.add_faiss_index.example",$$slots:{default:[yne]},$$scope:{ctx:k}}}),Qc=new E({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"batch_size",val:": int = 1000"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">datasets.Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.search">datasets.Dataset.search()</a>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.batch_size",description:`<strong>batch_size</strong> (Optional <code>int</code>) &#x2014; Size of the batch to use while adding vectors to the FaissIndex. Default value is 1000.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"batch_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4642"}}),td=new E({props:{name:"save_faiss_index",anchor:"datasets.Dataset.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],parametersDescription:[{anchor:"datasets.Dataset.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L523"}}),ad=new E({props:{name:"load_faiss_index",anchor:"datasets.Dataset.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.Dataset.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.Dataset.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L536"}}),nd=new E({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.get_nearest_examples">Dataset.get_nearest_examples()</a> or <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.search">Dataset.search()</a>.
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.
Default config is:`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4698"}}),zo=new T({props:{anchor:"datasets.Dataset.add_elasticsearch_index.example",$$slots:{default:[jne]},$$scope:{ctx:k}}}),rd=new E({props:{name:"load_elasticsearch_index",anchor:"datasets.Dataset.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.Dataset.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.Dataset.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L614"}}),Vo=new T({props:{anchor:"datasets.Dataset.load_elasticsearch_index.example",$$slots:{default:[wne]},$$scope:{ctx:k}}}),od=new E({props:{name:"list_indexes",anchor:"datasets.Dataset.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L426"}}),ld=new E({props:{name:"get_index",anchor:"datasets.Dataset.get_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L430",returnType:`
<p><code>BaseIndex</code></p>
`}}),id=new E({props:{name:"drop_index",anchor:"datasets.Dataset.drop_index",parameters:[{name:"index_name",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L658"}}),pd=new E({props:{name:"search",anchor:"datasets.Dataset.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L666",returnDescription:`
<p>The retrieval scores of the retrieved examples.
indices (<code>List[List[int]]</code>): The indices of the retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[List[float]</code>)</p>
`}}),cd=new E({props:{name:"search_batch",anchor:"datasets.Dataset.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L681",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_indices (<code>List[List[int]]</code>): The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<code>List[List[float]</code>)</p>
`}}),dd=new E({props:{name:"get_nearest_examples",anchor:"datasets.Dataset.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.Dataset.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L696",returnDescription:`
<p>The retrieval scores of the retrieved examples.
examples (<code>dict</code>): The retrieved examples.</p>
`,returnType:`
<p>scores (<code>List[float]</code>)</p>
`}}),md=new E({props:{name:"get_nearest_examples_batch",anchor:"datasets.Dataset.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],parametersDescription:[{anchor:"datasets.Dataset.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.Dataset.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.Dataset.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/search.py#L715",returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
total_examples (<em>List[dict]</em>): The retrieved examples per query.</p>
`,returnType:`
<p>total_scores (<em>List[List[float]</em>)</p>
`}}),hd=new E({props:{name:"info",anchor:"datasets.Dataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L162"}}),fd=new E({props:{name:"split",anchor:"datasets.Dataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L167"}}),ud=new E({props:{name:"builder_name",anchor:"datasets.Dataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L172"}}),gd=new E({props:{name:"citation",anchor:"datasets.Dataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L176"}}),_d=new E({props:{name:"config_name",anchor:"datasets.Dataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L180"}}),bd=new E({props:{name:"dataset_size",anchor:"datasets.Dataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L184"}}),$d=new E({props:{name:"description",anchor:"datasets.Dataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L188"}}),xd=new E({props:{name:"download_checksums",anchor:"datasets.Dataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L192"}}),vd=new E({props:{name:"download_size",anchor:"datasets.Dataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L196"}}),yd=new E({props:{name:"features",anchor:"datasets.Dataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L200"}}),jd=new E({props:{name:"homepage",anchor:"datasets.Dataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L204"}}),wd=new E({props:{name:"license",anchor:"datasets.Dataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L208"}}),Dd=new E({props:{name:"size_in_bytes",anchor:"datasets.Dataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L212"}}),kd=new E({props:{name:"supervised_keys",anchor:"datasets.Dataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L216"}}),Ed=new E({props:{name:"version",anchor:"datasets.Dataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L224"}}),qd=new E({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_csv.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L899",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ko=new T({props:{anchor:"datasets.Dataset.from_csv.example",$$slots:{default:[Dne]},$$scope:{ctx:k}}}),Id=new E({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:"<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.",name:"field"},{anchor:"datasets.Dataset.from_json.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L977",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Zo=new T({props:{anchor:"datasets.Dataset.from_json.example",$$slots:{default:[kne]},$$scope:{ctx:k}}}),Td=new E({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.Dataset.from_parquet.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1020",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Xo=new T({props:{anchor:"datasets.Dataset.from_parquet.example",$$slots:{default:[Ene]},$$scope:{ctx:k}}}),Nd=new E({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_text.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L1065",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Qo=new T({props:{anchor:"datasets.Dataset.from_text.example",$$slots:{default:[qne]},$$scope:{ctx:k}}}),Pd=new E({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L2203"}}),Ad=new E({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L4819"}}),el=new T({props:{anchor:"datasets.Dataset.align_labels_with_mapping.example",$$slots:{default:[Ine]},$$scope:{ctx:k}}}),Ld=new E({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"axis",val:": int = 0"}],parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/combine.py#L133"}}),tl=new T({props:{anchor:"datasets.concatenate_datasets.example",$$slots:{default:[Tne]},$$scope:{ctx:k}}}),Sd=new E({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"stopping_strategy",val:": typing.Optional[str] = 'first_exhausted'"}],parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructed by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:"<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.",name:"seed"},{anchor:"datasets.interleave_datasets.info",description:`<strong>info</strong> ([<em>DatasetInfo</em>], <em>optional</em>) &#x2014; Dataset information, like description, citation, etc.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"info"},{anchor:"datasets.interleave_datasets.split",description:`<strong>split</strong> ([<em>NamedSplit</em>], <em>optional</em>) &#x2014; Name of the dataset split.<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						<p class="font-medium">Added in 2.4.0</p>
						
					</div>`,name:"split"},{anchor:"datasets.interleave_datasets.stopping_strategy",description:`<strong>stopping_strategy</strong> (Optional <code>str</code>, defaults to <em>first_exhausted</em>) &#x2014;
Two strategies are proposed right now, <em>first_exhausted</em> and <em>all_exhausted</em>.
By default, <em>first_exhausted</em> is an undersampling strategy, i.e the dataset construction is stopped as soon as one dataset has ran out of samples.
If the strategy is <em>all_exhausted</em>,  we use an oversampling strategy, i.e the dataset construction is stopped as soon as every samples of every dataset has been added at least once.
Note that if the strategy is <em>all_exhausted</em>, the interleaved dataset size can get enormous:<ul>
<li>with no probabilities, the resulting dataset will have max_length_datasets*nb_dataset samples.</li>
<li>with given probabilities, the resulting dataset will have more samples if some datasets have really low probability of visiting.</li>
</ul>`,name:"stopping_strategy"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/combine.py#L16",returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a> or <a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),al=new T({props:{anchor:"datasets.interleave_datasets.example",$$slots:{default:[Nne]},$$scope:{ctx:k}}}),Od=new E({props:{name:"datasets.enable_caching",anchor:"datasets.enable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/fingerprint.py#L96"}}),zd=new E({props:{name:"datasets.disable_caching",anchor:"datasets.disable_caching",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/fingerprint.py#L117"}}),Ud=new E({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/fingerprint.py#L162"}}),Rd=new ha({}),Bd=new E({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L38"}}),Gd=new E({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L68"}}),rl=new T({props:{anchor:"datasets.DatasetDict.data.example",$$slots:{default:[Pne]},$$scope:{ctx:k}}}),Hd=new E({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L83"}}),ol=new T({props:{anchor:"datasets.DatasetDict.cache_files.example",$$slots:{default:[Ane]},$$scope:{ctx:k}}}),Wd=new E({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L101"}}),ll=new T({props:{anchor:"datasets.DatasetDict.num_columns.example",$$slots:{default:[Fne]},$$scope:{ctx:k}}}),Yd=new E({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L117"}}),pl=new T({props:{anchor:"datasets.DatasetDict.num_rows.example",$$slots:{default:[Lne]},$$scope:{ctx:k}}}),Kd=new E({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L133"}}),cl=new T({props:{anchor:"datasets.DatasetDict.column_names.example",$$slots:{default:[Sne]},$$scope:{ctx:k}}}),Zd=new E({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L151"}}),dl=new T({props:{anchor:"datasets.DatasetDict.shape.example",$$slots:{default:[One]},$$scope:{ctx:k}}}),Xd=new E({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names</a>)`,name:"column"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L199",returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),ml=new T({props:{anchor:"datasets.DatasetDict.unique.example",$$slots:{default:[Cne]},$$scope:{ctx:k}}}),Qd=new E({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L223",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),hl=new T({props:{anchor:"datasets.DatasetDict.cleanup_cache_files.example",$$slots:{default:[zne]},$$scope:{ctx:k}}}),em=new E({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], indices: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L688"}}),fl=new T({props:{anchor:"datasets.DatasetDict.map.example",$$slots:{default:[Vne]},$$scope:{ctx:k}}}),tm=new E({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L800"}}),ul=new T({props:{anchor:"datasets.DatasetDict.filter.example",$$slots:{default:[Une]},$$scope:{ctx:k}}}),am=new E({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L890"}}),gl=new T({props:{anchor:"datasets.DatasetDict.sort.example",$$slots:{default:[Mne]},$$scope:{ctx:k}}}),sm=new E({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (a <em>ValueError</em> is raised if both are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L958"}}),_l=new T({props:{anchor:"datasets.DatasetDict.shuffle.example",$$slots:{default:[Rne]},$$scope:{ctx:k}}}),nm=new E({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.set_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L490"}}),bl=new T({props:{anchor:"datasets.DatasetDict.set_format.example",$$slots:{default:[Bne]},$$scope:{ctx:k}}}),om=new E({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L532"}}),$l=new T({props:{anchor:"datasets.DatasetDict.reset_format.example",$$slots:{default:[Gne]},$$scope:{ctx:k}}}),im=new E({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.formatted_as.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L457"}}),pm=new E({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:"<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)",name:"output_all_columns"},{anchor:"datasets.DatasetDict.with_format.*format_kwargs",description:"*<strong>*format_kwargs</strong> (additional keyword arguments) &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.",name:"*format_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L588"}}),vl=new T({props:{anchor:"datasets.DatasetDict.with_format.example",$$slots:{default:[Hne]},$$scope:{ctx:k}}}),dm=new E({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L637"}}),yl=new T({props:{anchor:"datasets.DatasetDict.with_transform.example",$$slots:{default:[Wne]},$$scope:{ctx:k}}}),mm=new E({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L167"}}),jl=new T({props:{anchor:"datasets.DatasetDict.flatten.example",$$slots:{default:[Yne]},$$scope:{ctx:k}}}),hm=new E({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L247"}}),wl=new T({props:{anchor:"datasets.DatasetDict.cast.example",$$slots:{default:[Jne]},$$scope:{ctx:k}}}),fm=new E({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L281",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Dl=new T({props:{anchor:"datasets.DatasetDict.cast_column.example",$$slots:{default:[Kne]},$$scope:{ctx:k}}}),um=new E({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L308"}}),kl=new T({props:{anchor:"datasets.DatasetDict.remove_columns.example",$$slots:{default:[Zne]},$$scope:{ctx:k}}}),gm=new E({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L346"}}),El=new T({props:{anchor:"datasets.DatasetDict.rename_column.example",$$slots:{default:[Xne]},$$scope:{ctx:k}}}),bm=new E({props:{name:"rename_columns",anchor:"datasets.DatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.DatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L389",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),ql=new T({props:{anchor:"datasets.DatasetDict.rename_columns.example",$$slots:{default:[Qne]},$$scope:{ctx:k}}}),$m=new E({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L426"}}),Il=new T({props:{anchor:"datasets.DatasetDict.class_encode_column.example",$$slots:{default:[ere]},$$scope:{ctx:k}}}),vm=new E({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"max_shard_size",val:": typing.Union[int, str, NoneType] = None"},{name:"shard_size",val:": typing.Optional[int] = 'deprecated'"},{name:"embed_external_files",val:": bool = True"}],parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <code>&lt;user&gt;/&lt;dataset_name&gt;</code> or
<code>&lt;org&gt;/&lt;dataset_name&gt;</code>. Also accepts <code>&lt;dataset_name&gt;</code>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.max_shard_size",description:`<strong>max_shard_size</strong> (<em>int</em> or <em>str</em>, <em>optional</em>, defaults to <em>&#x201C;500MB&#x201D;</em>) &#x2014;
The maximum size of the dataset shards to be uploaded to the hub. If expressed as a string, needs to be digits followed by a unit
(like <em>&#x201C;500MB&#x201D;</em> or <em>&#x201C;1GB&#x201D;</em>).`,name:"max_shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
Deprecated: &#x2018;shard_size&#x2019; was renamed to &#x2018;max_shard_size&#x2019; in version 2.1.1 and will be removed in 2.4.0.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1289"}}),Tl=new T({props:{anchor:"datasets.DatasetDict.push_to_hub.example",$$slots:{default:[tre]},$$scope:{ctx:k}}}),ym=new E({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1034"}}),Nl=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example",$$slots:{default:[are]},$$scope:{ctx:k}}}),Pl=new T({props:{anchor:"datasets.DatasetDict.save_to_disk.example-2",$$slots:{default:[sre]},$$scope:{ctx:k}}}),wm=new E({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/main/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1082",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Al=new T({props:{anchor:"datasets.DatasetDict.load_from_disk.example",$$slots:{default:[nre]},$$scope:{ctx:k}}}),Dm=new E({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_csv.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1129",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Fl=new T({props:{anchor:"datasets.DatasetDict.from_csv.example",$$slots:{default:[rre]},$$scope:{ctx:k}}}),km=new E({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_json.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1163",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ll=new T({props:{anchor:"datasets.DatasetDict.from_json.example",$$slots:{default:[ore]},$$scope:{ctx:k}}}),Em=new E({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.`,name:"columns"},{anchor:"datasets.DatasetDict.from_parquet.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1197",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Sl=new T({props:{anchor:"datasets.DatasetDict.from_parquet.example",$$slots:{default:[lre]},$$scope:{ctx:k}}}),qm=new E({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_text.*kwargs",description:"*<strong>*kwargs</strong> (additional keyword arguments) &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.",name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1240",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ol=new T({props:{anchor:"datasets.DatasetDict.from_text.example",$$slots:{default:[ire]},$$scope:{ctx:k}}}),Im=new E({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code>, must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1274"}}),Tm=new ha({}),Nm=new E({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L728"}}),Pm=new E({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L1201",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Vl=new T({props:{anchor:"datasets.IterableDataset.remove_columns.example",$$slots:{default:[pre]},$$scope:{ctx:k}}}),Am=new E({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L1227",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Ul=new T({props:{anchor:"datasets.IterableDataset.cast_column.example",$$slots:{default:[cre]},$$scope:{ctx:k}}}),Fm=new E({props:{name:"cast",anchor:"datasets.IterableDataset.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L1275",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Ml=new T({props:{anchor:"datasets.IterableDataset.cast.example",$$slots:{default:[dre]},$$scope:{ctx:k}}}),Lm=new E({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L781"}}),Sm=new E({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"}],parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.IterableDataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L816"}}),Rl=new T({props:{anchor:"datasets.IterableDataset.map.example",$$slots:{default:[mre]},$$scope:{ctx:k}}}),Cm=new E({props:{name:"rename_column",anchor:"datasets.IterableDataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L1133",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Bl=new T({props:{anchor:"datasets.IterableDataset.rename_column.example",$$slots:{default:[hre]},$$scope:{ctx:k}}}),zm=new E({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L915"}}),Gl=new T({props:{anchor:"datasets.IterableDataset.filter.example",$$slots:{default:[fre]},$$scope:{ctx:k}}}),Vm=new E({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L982"}}),Hl=new T({props:{anchor:"datasets.IterableDataset.shuffle.example",$$slots:{default:[ure]},$$scope:{ctx:k}}}),Mm=new E({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L1048"}}),Wl=new T({props:{anchor:"datasets.IterableDataset.skip.example",$$slots:{default:[gre]},$$scope:{ctx:k}}}),Bm=new E({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/iterable_dataset.py#L1085"}}),Yl=new T({props:{anchor:"datasets.IterableDataset.take.example",$$slots:{default:[_re]},$$scope:{ctx:k}}}),Hm=new E({props:{name:"info",anchor:"datasets.IterableDataset.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L162"}}),Wm=new E({props:{name:"split",anchor:"datasets.IterableDataset.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L167"}}),Ym=new E({props:{name:"builder_name",anchor:"datasets.IterableDataset.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L172"}}),Jm=new E({props:{name:"citation",anchor:"datasets.IterableDataset.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L176"}}),Km=new E({props:{name:"config_name",anchor:"datasets.IterableDataset.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L180"}}),Zm=new E({props:{name:"dataset_size",anchor:"datasets.IterableDataset.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L184"}}),Xm=new E({props:{name:"description",anchor:"datasets.IterableDataset.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L188"}}),Qm=new E({props:{name:"download_checksums",anchor:"datasets.IterableDataset.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L192"}}),eh=new E({props:{name:"download_size",anchor:"datasets.IterableDataset.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L196"}}),th=new E({props:{name:"features",anchor:"datasets.IterableDataset.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L200"}}),ah=new E({props:{name:"homepage",anchor:"datasets.IterableDataset.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L204"}}),sh=new E({props:{name:"license",anchor:"datasets.IterableDataset.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L208"}}),nh=new E({props:{name:"size_in_bytes",anchor:"datasets.IterableDataset.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L212"}}),rh=new E({props:{name:"supervised_keys",anchor:"datasets.IterableDataset.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L216"}}),oh=new E({props:{name:"version",anchor:"datasets.IterableDataset.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/arrow_dataset.py#L224"}}),lh=new ha({}),ih=new E({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1419"}}),ph=new E({props:{name:"map",anchor:"datasets.IterableDatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; Function applied on-the-fly on the examples when you iterate on the dataset
It must have one of the following signatures:</p>
<ul>
<li><em>function(example: Dict[str, Any]) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict[str, Any], idx: int) -&gt; Dict[str, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[str, List]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[str, List], indices: List[int]) -&gt; Dict[str, List]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>
<p>For advanced usage, the function can also return a <em>pyarrow.Table</em>.
Moreover if your function returns nothing (<em>None</em>), then <em>map</em> will run your function and return the dataset unchanged.
If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDatasetDict.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.IterableDatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1449"}}),Ql=new T({props:{anchor:"datasets.IterableDatasetDict.map.example",$$slots:{default:[bre]},$$scope:{ctx:k}}}),dh=new E({props:{name:"filter",anchor:"datasets.IterableDatasetDict.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Dict[str, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Dict[str, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Dict[str, List]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Dict[str, List], indices: List[int]) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDatasetDict.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDatasetDict.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1527"}}),ei=new T({props:{anchor:"datasets.IterableDatasetDict.filter.example",$$slots:{default:[$re]},$$scope:{ctx:k}}}),mh=new E({props:{name:"shuffle",anchor:"datasets.IterableDatasetDict.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDatasetDict.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDatasetDict.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1581"}}),ti=new T({props:{anchor:"datasets.IterableDatasetDict.shuffle.example",$$slots:{default:[xre]},$$scope:{ctx:k}}}),fh=new E({props:{name:"with_format",anchor:"datasets.IterableDatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional, default None) &#x2014; if set to &#x201C;torch&#x201D;, the returned dataset
will be a subclass of torch.utils.data.IterableDataset to be used in a DataLoader`,name:"type"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1420"}}),ai=new T({props:{anchor:"datasets.IterableDatasetDict.with_format.example",$$slots:{default:[vre]},$$scope:{ctx:k}}}),uh=new E({props:{name:"cast",anchor:"datasets.IterableDatasetDict.cast",parameters:[{name:"features",val:": Features"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1748",returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),si=new T({props:{anchor:"datasets.IterableDatasetDict.cast.example",$$slots:{default:[yre]},$$scope:{ctx:k}}}),gh=new E({props:{name:"cast_column",anchor:"datasets.IterableDatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1719",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ni=new T({props:{anchor:"datasets.IterableDatasetDict.cast_column.example",$$slots:{default:[jre]},$$scope:{ctx:k}}}),_h=new E({props:{name:"remove_columns",anchor:"datasets.IterableDatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1694",returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),ri=new T({props:{anchor:"datasets.IterableDatasetDict.remove_columns.example",$$slots:{default:[wre]},$$scope:{ctx:k}}}),bh=new E({props:{name:"rename_column",anchor:"datasets.IterableDatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.IterableDatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1636",returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),oi=new T({props:{anchor:"datasets.IterableDatasetDict.rename_column.example",$$slots:{default:[Dre]},$$scope:{ctx:k}}}),$h=new E({props:{name:"rename_columns",anchor:"datasets.IterableDatasetDict.rename_columns",parameters:[{name:"column_mapping",val:": typing.Dict[str, str]"}],parametersDescription:[{anchor:"datasets.IterableDatasetDict.rename_columns.column_mapping",description:"<strong>column_mapping</strong> (<code>Dict[str, str]</code>) &#x2014; A mapping of columns to rename to their new names",name:"column_mapping"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/dataset_dict.py#L1667",returnDescription:`
<p>A copy of the dataset with renamed columns</p>
`,returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDatasetDict"
>IterableDatasetDict</a></p>
`}}),li=new T({props:{anchor:"datasets.IterableDatasetDict.rename_columns.example",$$slots:{default:[kre]},$$scope:{ctx:k}}}),xh=new ha({}),vh=new E({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1483"}}),pi=new Ise({props:{$$slots:{default:[Ere]},$$scope:{ctx:k}}}),Eh=new E({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1834",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),di=new T({props:{anchor:"datasets.Features.copy.example",$$slots:{default:[qre]},$$scope:{ctx:k}}}),qh=new E({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1816",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Ih=new E({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1800",returnDescription:`
<p><code>list[Any]</code></p>
`}}),Th=new E({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"},{anchor:"datasets.Features.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio or image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1778",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Nh=new E({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1760",returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Ph=new E({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1747",returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Ah=new E({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1920",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),_i=new T({props:{anchor:"datasets.Features.flatten.example",$$slots:{default:[Ire]},$$scope:{ctx:k}}}),Fh=new E({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1554",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Lh=new E({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1574",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),$i=new T({props:{anchor:"datasets.Features.from_dict.example",$$slots:{default:[Tre]},$$scope:{ctx:k}}}),Sh=new E({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1854",returnType:`
<p><a
  href="/docs/datasets/main/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),xi=new T({props:{anchor:"datasets.Features.reorder_fields_as.example",$$slots:{default:[Nre]},$$scope:{ctx:k}}}),Oh=new E({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Sequence.length",description:"<strong>length</strong> (<code>int</code>) &#x2014; Length of the sequence.",name:"length"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1055"}}),vi=new T({props:{anchor:"datasets.Sequence.example",$$slots:{default:[Pre]},$$scope:{ctx:k}}}),Ch=new E({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": dataclasses.InitVar[typing.Optional[int]] = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L863"}}),yi=new T({props:{anchor:"datasets.ClassLabel.example",$$slots:{default:[Are]},$$scope:{ctx:k}}}),Vh=new E({props:{name:"cast_storage",anchor:"datasets.ClassLabel.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.IntegerArray]"}],parametersDescription:[{anchor:"datasets.ClassLabel.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.IntegerArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L1023",returnDescription:`
<p>Array in the ClassLabel arrow storage type</p>
`,returnType:`
<p>pa.Int64Array</p>
`}}),Mh=new E({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L977"}}),ji=new T({props:{anchor:"datasets.ClassLabel.int2str.example",$$slots:{default:[Fre]},$$scope:{ctx:k}}}),Rh=new E({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L932"}}),wi=new T({props:{anchor:"datasets.ClassLabel.str2int.example",$$slots:{default:[Lre]},$$scope:{ctx:k}}}),Bh=new E({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L419"}}),Di=new T({props:{anchor:"datasets.Value.example",$$slots:{default:[Sre]},$$scope:{ctx:k}}}),Gh=new E({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/translation.py#L12"}}),ki=new T({props:{anchor:"datasets.Translation.example",$$slots:{default:[Ore]},$$scope:{ctx:k}}}),Wh=new E({props:{name:"flatten",anchor:"datasets.Translation.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/translation.py#L46"}}),Yh=new E({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/translation.py#L54"}}),qi=new T({props:{anchor:"datasets.TranslationVariableLanguages.example",$$slots:{default:[Cre]},$$scope:{ctx:k}}}),Jh=new E({props:{name:"flatten",anchor:"datasets.TranslationVariableLanguages.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/translation.py#L123"}}),Kh=new E({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array2D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array2D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L504"}}),Ti=new T({props:{anchor:"datasets.Array2D.example",$$slots:{default:[zre]},$$scope:{ctx:k}}}),Zh=new E({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array3D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array3D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L527"}}),Ni=new T({props:{anchor:"datasets.Array3D.example",$$slots:{default:[Vre]},$$scope:{ctx:k}}}),Xh=new E({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array4D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array4D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L550"}}),Pi=new T({props:{anchor:"datasets.Array4D.example",$$slots:{default:[Ure]},$$scope:{ctx:k}}}),Qh=new E({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Array5D.shape",description:"<strong>shape</strong> (<code>tuple</code>) &#x2014; The size of each dimension.",name:"shape"},{anchor:"datasets.Array5D.dtype",description:"<strong>dtype</strong> (<code>str</code>) &#x2014; The value of the data type.",name:"dtype"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/features.py#L573"}}),Ai=new T({props:{anchor:"datasets.Array5D.example",$$slots:{default:[Mre]},$$scope:{ctx:k}}}),ef=new E({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/audio.py#L22"}}),Fi=new T({props:{anchor:"datasets.Audio.example",$$slots:{default:[Rre]},$$scope:{ctx:k}}}),rf=new E({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/audio.py#L171",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),of=new E({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:": typing.Union[typing.Dict[str, typing.Union[str, bool, NoneType]], NoneType] = None"}],parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"},{anchor:"datasets.Audio.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
audio files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/audio.py#L121",returnDescription:`
<p>dict</p>
`}}),lf=new E({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/audio.py#L204",returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),pf=new E({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/audio.py#L75",returnType:`
<p><code>dict</code></p>
`}}),cf=new E({props:{name:"flatten",anchor:"datasets.Audio.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/audio.py#L160"}}),df=new E({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/image.py#L26"}}),zi=new T({props:{anchor:"datasets.Image.example",$$slots:{default:[Bre]},$$scope:{ctx:k}}}),_f=new E({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/image.py#L166",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),bf=new E({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"},{name:"token_per_repo_id",val:" = None"}],parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"},{anchor:"datasets.Image.decode_example.token_per_repo_id",description:`<strong>token_per_repo_id</strong> (<code>dict</code>, optional) &#x2014; To access and decode
image files from private repositories on the Hub, you can pass
a dictionary repo_id (str) -&gt; token (bool or str)`,name:"token_per_repo_id"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/image.py#L104",returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),$f=new E({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/image.py#L215",returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),xf=new E({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/image.py#L70",returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),vf=new E({props:{name:"flatten",anchor:"datasets.Image.flatten",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/features/image.py#L153"}}),yf=new ha({}),jf=new E({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/info.py#L424"}}),wf=new E({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/info.py#L479"}}),Gi=new T({props:{anchor:"datasets.MetricInfo.from_directory.example",$$slots:{default:[Gre]},$$scope:{ctx:k}}}),kf=new E({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""},{name:"pretty_print",val:" = False"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/info.py#L459"}}),Hi=new T({props:{anchor:"datasets.MetricInfo.write_to_directory.example",$$slots:{default:[Hre]},$$scope:{ctx:k}}}),Ef=new ha({}),qf=new E({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/metric.py#L146"}}),Yi=new Tse({props:{version:"2.5.0",$$slots:{default:[Wre]},$$scope:{ctx:k}}}),If=new E({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/metric.py#L521"}}),Ji=new T({props:{anchor:"datasets.Metric.add.example",$$slots:{default:[Yre]},$$scope:{ctx:k}}}),Tf=new E({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/metric.py#L474"}}),Ki=new T({props:{anchor:"datasets.Metric.add_batch.example",$$slots:{default:[Jre]},$$scope:{ctx:k}}}),Nf=new E({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/metric.py#L403",returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),Zi=new T({props:{anchor:"datasets.Metric.compute.example",$$slots:{default:[Kre]},$$scope:{ctx:k}}}),Pf=new E({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.download.download_config.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.download.download_manager.DownloadManager] = None"}],parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/main/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/metric.py#L604"}}),Af=new ha({}),Ff=new E({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"datasets.filesystems.S3FileSystem.anon",description:`<strong>anon</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to use anonymous connection (public buckets only). If False, uses the key/secret given,
or boto&#x2019;s credential resolver (client_kwargs, environment, variables, config files, EC2 IAM server, in that order).`,name:"anon"},{anchor:"datasets.filesystems.S3FileSystem.key",description:"<strong>key</strong> (<code>str</code>) &#x2014; If not anonymous, use this access key ID, if specified.",name:"key"},{anchor:"datasets.filesystems.S3FileSystem.secret",description:"<strong>secret</strong> (<code>str</code>) &#x2014; If not anonymous, use this secret access key, if specified.",name:"secret"},{anchor:"datasets.filesystems.S3FileSystem.token",description:"<strong>token</strong> (<code>str</code>) &#x2014; If not anonymous, use this security token, if specified.",name:"token"},{anchor:"datasets.filesystems.S3FileSystem.use_ssl",description:`<strong>use_ssl</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use SSL in connections to S3; may be faster without, but insecure. If <code>use_ssl</code> is
also set in <code>client_kwargs</code>, the value set in <code>client_kwargs</code> will take priority.`,name:"use_ssl"},{anchor:"datasets.filesystems.S3FileSystem.s3_additional_kwargs",description:`<strong>s3_additional_kwargs</strong> (<code>dict</code>) &#x2014; Parameters that are used when calling S3 API methods. Typically used for things
like ServerSideEncryption.`,name:"s3_additional_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.client_kwargs",description:"<strong>client_kwargs</strong> (<code>dict</code>) &#x2014; Parameters for the botocore client.",name:"client_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.requester_pays",description:"<strong>requester_pays</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether RequesterPays buckets are supported.",name:"requester_pays"},{anchor:"datasets.filesystems.S3FileSystem.default_block_size",description:`<strong>default_block_size</strong> (<code>int</code>) &#x2014; If given, the default block size value used for <code>open()</code>, if no specific value is given at all time.
The built-in default is 5MB.`,name:"default_block_size"},{anchor:"datasets.filesystems.S3FileSystem.default_fill_cache",description:"<strong>default_fill_cache</strong> (<code>bool</code>, default to <code>True</code>) &#x2014; Whether to use cache filling with open by default. Refer to <code>S3File.open</code>.",name:"default_fill_cache"},{anchor:"datasets.filesystems.S3FileSystem.default_cache_type",description:`<strong>default_cache_type</strong> (<code>str</code>, default to <code>bytes</code>) &#x2014; If given, the default cache_type value used for <code>open()</code>. Set to <code>none</code> if no
caching is desired. See fsspec&#x2019;s documentation for other available cache_type values.`,name:"default_cache_type"},{anchor:"datasets.filesystems.S3FileSystem.version_aware",description:`<strong>version_aware</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to support bucket versioning. If enable this will require the user to have
the necessary IAM permissions for dealing with versioned objects.`,name:"version_aware"},{anchor:"datasets.filesystems.S3FileSystem.cache_regions",description:`<strong>cache_regions</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether to cache bucket regions. Whenever a new bucket is used, it will
first find out which region it belongs to and then use the client for that region.`,name:"cache_regions"},{anchor:"datasets.filesystems.S3FileSystem.asynchronous",description:"<strong>asynchronous</strong> (<code>bool</code>, default to <code>False</code>) &#x2014; Whether this instance is to be used from inside coroutines.",name:"asynchronous"},{anchor:"datasets.filesystems.S3FileSystem.config_kwargs",description:`<strong>config_kwargs</strong> (<code>dict</code>) &#x2014; Parameters passed to <code>botocore.client.Config</code>.
kwargs &#x2014; Other parameters for core session.`,name:"config_kwargs"},{anchor:"datasets.filesystems.S3FileSystem.session",description:`<strong>session</strong> (<code>aiobotocore.session.AioSession</code>) &#x2014; Session to be used for all connections. This session will be used inplace of creating
a new session inside S3FileSystem. For example: <code>aiobotocore.session.AioSession(profile=&apos;test_user&apos;)</code>.`,name:"session"},{anchor:"datasets.filesystems.S3FileSystem.skip_instance_cache",description:"<strong>skip_instance_cache</strong> (<code>bool</code>) &#x2014; Control reuse of instances. Passed on to <code>fsspec</code>.",name:"skip_instance_cache"},{anchor:"datasets.filesystems.S3FileSystem.use_listings_cache",description:"<strong>use_listings_cache</strong> (<code>bool</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"use_listings_cache"},{anchor:"datasets.filesystems.S3FileSystem.listings_expiry_time",description:"<strong>listings_expiry_time</strong> (<code>int</code> or <code>float</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"listings_expiry_time"},{anchor:"datasets.filesystems.S3FileSystem.max_paths",description:"<strong>max_paths</strong> (<code>int</code>) &#x2014; Control reuse of directory listings. Passed on to <code>fsspec</code>.",name:"max_paths"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/filesystems/s3filesystem.py#L4"}}),tp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example",$$slots:{default:[Zre]},$$scope:{ctx:k}}}),ap=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-2",$$slots:{default:[Xre]},$$scope:{ctx:k}}}),sp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-3",$$slots:{default:[Qre]},$$scope:{ctx:k}}}),np=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-4",$$slots:{default:[eoe]},$$scope:{ctx:k}}}),rp=new T({props:{anchor:"datasets.filesystems.S3FileSystem.example-5",$$slots:{default:[toe]},$$scope:{ctx:k}}}),Sf=new E({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/filesystems/__init__.py#L28"}}),Of=new E({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/filesystems/__init__.py#L40"}}),Cf=new ha({}),zf=new E({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/main/src/datasets/fingerprint.py#L212"}}),{c(){c=r("meta"),g=m(),f=r("h1"),n=r("a"),u=r("span"),_(t.$$.fragment),d=m(),mn=r("span"),fa=i("Main classes"),Fr=m(),Oe=r("h2"),be=r("a"),ne=r("span"),_(ua.$$.fragment),nu=m(),Lr=r("span"),Xk=i("DatasetInfo"),q7=m(),Q=r("div"),_(zp.$$.fragment),Qk=m(),$$=r("p"),e4=i("Information about a dataset."),t4=m(),ru=r("p"),x$=r("em"),a4=i("DatasetInfo"),s4=i(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),n4=m(),v$=r("p"),r4=i("Note: Not all fields are known on construction and may be updated later."),o4=m(),$e=r("div"),_(Vp.$$.fragment),l4=m(),Up=r("p"),i4=i("Create DatasetInfo from the JSON file in "),y$=r("em"),p4=i("dataset_info_dir"),c4=i("."),d4=m(),j$=r("p"),m4=i(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),h4=m(),w$=r("p"),f4=i("This will overwrite all previous metadata."),u4=m(),_(Sr.$$.fragment),g4=m(),ga=r("div"),_(Mp.$$.fragment),_4=m(),hn=r("p"),b4=i("Write "),D$=r("em"),$4=i("DatasetInfo"),x4=i(" and license (if present) as JSON files to "),k$=r("em"),v4=i("dataset_info_dir"),y4=i("."),j4=m(),_(Or.$$.fragment),I7=m(),fn=r("h2"),Cr=r("a"),E$=r("span"),_(Rp.$$.fragment),w4=m(),q$=r("span"),D4=i("Dataset"),T7=m(),zr=r("p"),k4=i("The base class "),ou=r("a"),E4=i("Dataset"),q4=i(" implements a Dataset backed by an Apache Arrow table."),N7=m(),q=r("div"),_(Bp.$$.fragment),I4=m(),I$=r("p"),T4=i("A Dataset backed by an Arrow table."),N4=m(),tt=r("div"),_(Gp.$$.fragment),P4=m(),T$=r("p"),A4=i("Add column to Dataset."),F4=m(),N$=r("p"),P$=r("em"),L4=i("New in version 1.7."),S4=m(),_(Vr.$$.fragment),O4=m(),at=r("div"),_(Hp.$$.fragment),C4=m(),A$=r("p"),z4=i("Add item to Dataset."),V4=m(),F$=r("p"),L$=r("em"),U4=i("New in version 1.7."),M4=m(),_(Ur.$$.fragment),R4=m(),Mr=r("div"),_(Wp.$$.fragment),B4=m(),S$=r("p"),G4=i("Instantiate a Dataset backed by an Arrow table at filename."),H4=m(),Rr=r("div"),_(Yp.$$.fragment),W4=m(),O$=r("p"),Y4=i("Instantiate a Dataset backed by an Arrow buffer."),J4=m(),xe=r("div"),_(Jp.$$.fragment),K4=m(),At=r("p"),Z4=i("Convert "),C$=r("code"),X4=i("pandas.DataFrame"),Q4=i(" to a "),z$=r("code"),e3=i("pyarrow.Table"),t3=i(" to create a "),lu=r("a"),a3=i("Dataset"),s3=i("."),n3=m(),Kp=r("p"),r3=i(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),V$=r("em"),o3=i("object"),l3=i(", we need to guess the datatype by looking at the Python objects in this Series."),i3=m(),Zp=r("p"),p3=i("Be aware that Series of the "),U$=r("em"),c3=i("object"),d3=i(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),m3=m(),_(Br.$$.fragment),h3=m(),Gr=r("div"),_(Xp.$$.fragment),f3=m(),Ft=r("p"),u3=i("Convert "),M$=r("code"),g3=i("dict"),_3=i(" to a "),R$=r("code"),b3=i("pyarrow.Table"),$3=i(" to create a "),iu=r("a"),x3=i("Dataset"),v3=i("."),y3=m(),_a=r("div"),_(Qp.$$.fragment),j3=m(),B$=r("p"),w3=i("Create a Dataset from a generator."),D3=m(),_(Hr.$$.fragment),k3=m(),ba=r("div"),_(ec.$$.fragment),E3=m(),G$=r("p"),q3=i("The Apache Arrow table backing the dataset."),I3=m(),_(Wr.$$.fragment),T3=m(),$a=r("div"),_(tc.$$.fragment),N3=m(),H$=r("p"),P3=i("The cache files containing the Apache Arrow table backing the dataset."),A3=m(),_(Yr.$$.fragment),F3=m(),xa=r("div"),_(ac.$$.fragment),L3=m(),W$=r("p"),S3=i("Number of columns in the dataset."),O3=m(),_(Jr.$$.fragment),C3=m(),va=r("div"),_(sc.$$.fragment),z3=m(),nc=r("p"),V3=i("Number of rows in the dataset (same as "),Kr=r("a"),U3=i("Dataset."),Y$=r("strong"),M3=i("len"),R3=i("()"),B3=i(")."),G3=m(),_(Zr.$$.fragment),H3=m(),ya=r("div"),_(rc.$$.fragment),W3=m(),J$=r("p"),Y3=i("Names of the columns in the dataset."),J3=m(),_(Xr.$$.fragment),K3=m(),ja=r("div"),_(oc.$$.fragment),Z3=m(),K$=r("p"),X3=i("Shape of the dataset (number of columns, number of rows)."),Q3=m(),_(Qr.$$.fragment),eE=m(),st=r("div"),_(lc.$$.fragment),tE=m(),Z$=r("p"),aE=i("Return a list of the unique elements in a column."),sE=m(),X$=r("p"),nE=i("This is implemented in the low-level backend and as such, very fast."),rE=m(),_(eo.$$.fragment),oE=m(),wa=r("div"),_(ic.$$.fragment),lE=m(),Q$=r("p"),iE=i(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),pE=m(),_(to.$$.fragment),cE=m(),Da=r("div"),_(pc.$$.fragment),dE=m(),e2=r("p"),mE=i("Cast the dataset to a new set of features."),hE=m(),_(ao.$$.fragment),fE=m(),ka=r("div"),_(cc.$$.fragment),uE=m(),t2=r("p"),gE=i("Cast column to feature for decoding."),_E=m(),_(so.$$.fragment),bE=m(),nt=r("div"),_(dc.$$.fragment),$E=m(),a2=r("p"),xE=i("Remove one or several column(s) in the dataset and the features associated to them."),vE=m(),un=r("p"),yE=i("You can also remove a column using "),pu=r("a"),jE=i("Dataset.map()"),wE=i(" with "),s2=r("em"),DE=i("remove_columns"),kE=i(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),EE=m(),_(no.$$.fragment),qE=m(),Ea=r("div"),_(mc.$$.fragment),IE=m(),n2=r("p"),TE=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),NE=m(),_(ro.$$.fragment),PE=m(),qa=r("div"),_(hc.$$.fragment),AE=m(),r2=r("p"),FE=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),LE=m(),_(oo.$$.fragment),SE=m(),Ia=r("div"),_(fc.$$.fragment),OE=m(),uc=r("p"),CE=i("Casts the given column as :obj:"),o2=r("code"),zE=i("datasets.features.ClassLabel"),VE=i(" and updates the table."),UE=m(),_(lo.$$.fragment),ME=m(),Ta=r("div"),_(gc.$$.fragment),RE=m(),l2=r("p"),BE=i("Number of rows in the dataset."),GE=m(),_(io.$$.fragment),HE=m(),Na=r("div"),_(_c.$$.fragment),WE=m(),i2=r("p"),YE=i("Iterate through the examples."),JE=m(),bc=r("p"),KE=i("If a formatting is set with "),cu=r("a"),ZE=i("Dataset.set_format()"),XE=i(` rows will be returned with the
selected format.`),QE=m(),po=r("div"),_($c.$$.fragment),e5=m(),gn=r("p"),t5=i("To be used in a "),p2=r("code"),a5=i("with"),s5=i(" statement. Set "),c2=r("code"),n5=i("__getitem__"),r5=i(" return format (type and columns)."),o5=m(),ve=r("div"),_(xc.$$.fragment),l5=m(),Ce=r("p"),i5=i("Set "),d2=r("strong"),p5=i("getitem"),c5=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),m2=r("code"),d5=i("type"),m5=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),h2=r("strong"),h5=i("getitem"),f5=i(`.
It\u2019s also possible to use custom transforms for formatting using `),du=r("a"),u5=i("datasets.Dataset.set_transform()"),g5=i("."),_5=m(),ze=r("p"),b5=i("It is possible to call "),f2=r("code"),$5=i("map"),x5=i(" after calling "),u2=r("code"),v5=i("set_format"),y5=i(". Since "),g2=r("code"),j5=i("map"),w5=i(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),_2=r("code"),D5=i("map"),k5=i(" on a dataset to add a new column, then this column will be formatted:"),E5=m(),b2=r("p"),q5=i("new formatted columns = (all columns - previously unformatted columns)"),I5=m(),_(co.$$.fragment),T5=m(),Pa=r("div"),_(vc.$$.fragment),N5=m(),rt=r("p"),P5=i("Set "),$2=r("strong"),A5=i("getitem"),F5=i(" return format using this transform. The transform is applied on-the-fly on batches when "),x2=r("strong"),L5=i("getitem"),S5=i(` is called.
As `),mu=r("a"),O5=i("datasets.Dataset.set_format()"),C5=i(", this can be reset using "),hu=r("a"),z5=i("datasets.Dataset.reset_format()"),V5=m(),_(mo.$$.fragment),U5=m(),ot=r("div"),_(yc.$$.fragment),M5=m(),jc=r("p"),R5=i("Reset "),v2=r("strong"),B5=i("getitem"),G5=i(" return format to python objects and all columns."),H5=m(),fu=r("p"),W5=i("Same as "),y2=r("code"),Y5=i("self.set_format()"),J5=m(),_(ho.$$.fragment),K5=m(),ye=r("div"),_(wc.$$.fragment),Z5=m(),Lt=r("p"),X5=i("Set "),j2=r("strong"),Q5=i("getitem"),e6=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),w2=r("code"),t6=i("type"),a6=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),D2=r("strong"),s6=i("getitem"),n6=i("."),r6=m(),Dc=r("p"),o6=i("It\u2019s also possible to use custom transforms for formatting using "),uu=r("a"),l6=i("datasets.Dataset.with_transform()"),i6=i("."),p6=m(),_n=r("p"),c6=i("Contrary to "),gu=r("a"),d6=i("datasets.Dataset.set_format()"),m6=i(", "),k2=r("code"),h6=i("with_format"),f6=i(" returns a new Dataset object."),u6=m(),_(fo.$$.fragment),g6=m(),je=r("div"),_(kc.$$.fragment),_6=m(),bn=r("p"),b6=i("Set "),E2=r("strong"),$6=i("getitem"),x6=i(" return format using this transform. The transform is applied on-the-fly on batches when "),q2=r("strong"),v6=i("getitem"),y6=i(" is called."),j6=m(),$n=r("p"),w6=i("As "),_u=r("a"),D6=i("datasets.Dataset.set_format()"),k6=i(", this can be reset using "),bu=r("a"),E6=i("datasets.Dataset.reset_format()"),q6=i("."),I6=m(),xn=r("p"),T6=i("Contrary to "),$u=r("a"),N6=i("datasets.Dataset.set_transform()"),P6=i(", "),I2=r("code"),A6=i("with_transform"),F6=i(" returns a new Dataset object."),L6=m(),_(uo.$$.fragment),S6=m(),go=r("div"),_(Ec.$$.fragment),O6=m(),T2=r("p"),C6=i("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),z6=m(),lt=r("div"),_(qc.$$.fragment),V6=m(),N2=r("p"),U6=i(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),M6=m(),P2=r("p"),R6=i("Be careful when running this command that no other process is currently using other cache files."),B6=m(),_(_o.$$.fragment),G6=m(),we=r("div"),_(Ic.$$.fragment),H6=m(),A2=r("p"),W6=i(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),Y6=m(),Tc=r("p"),J6=i("You can specify whether the function should be batched or not with the "),F2=r("code"),K6=i("batched"),Z6=i(" parameter:"),X6=m(),vn=r("ul"),L2=r("li"),Q6=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),e8=m(),S2=r("li"),t8=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),a8=m(),de=r("li"),s8=i("If batched is True and batch_size is "),O2=r("code"),n8=i("n"),r8=i(" > 1, then the function takes a batch of "),C2=r("code"),o8=i("n"),l8=i(" examples as input and can return a batch with "),z2=r("code"),i8=i("n"),p8=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),V2=r("code"),c8=i("n"),d8=i(` examples.
A batch is a dictionary, e.g. a batch of `),U2=r("code"),m8=i("n"),h8=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),f8=m(),_(bo.$$.fragment),u8=m(),Aa=r("div"),_(Nc.$$.fragment),g8=m(),M2=r("p"),_8=i(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),b8=m(),_($o.$$.fragment),$8=m(),Fa=r("div"),_(Pc.$$.fragment),x8=m(),R2=r("p"),v8=i("Create a new dataset with rows selected following the list/array of indices."),y8=m(),_(xo.$$.fragment),j8=m(),it=r("div"),_(Ac.$$.fragment),w8=m(),B2=r("p"),D8=i("Create a new dataset sorted according to a column."),k8=m(),G2=r("p"),E8=i(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),q8=m(),_(vo.$$.fragment),I8=m(),pt=r("div"),_(Fc.$$.fragment),T8=m(),H2=r("p"),N8=i("Create a new Dataset where the rows are shuffled."),P8=m(),W2=r("p"),A8=i(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),F8=m(),_(yo.$$.fragment),L8=m(),ct=r("div"),_(Lc.$$.fragment),S8=m(),Y=r("p"),O8=i("Return a dictionary ("),Y2=r("code"),C8=i("datasets.DatasetDict"),z8=i(") with two random train and test subsets ("),J2=r("em"),V8=i("train"),U8=i(" and "),K2=r("em"),M8=i("test"),R8=m(),Z2=r("code"),B8=i("Dataset"),G8=i(` splits).
Splits are created from the dataset according to `),X2=r("em"),H8=i("test_size"),W8=i(", "),Q2=r("em"),Y8=i("train_size"),J8=i(" and "),ex=r("em"),K8=i("shuffle"),Z8=i("."),X8=m(),Sc=r("p"),Q8=i("This method is similar to scikit-learn "),tx=r("em"),eq=i("train_test_split"),tq=i("."),aq=m(),_(jo.$$.fragment),sq=m(),re=r("div"),_(Oc.$$.fragment),nq=m(),yn=r("p"),rq=i("Return the "),ax=r("em"),oq=i("index"),lq=i("-nth shard from dataset split into "),sx=r("em"),iq=i("num_shards"),pq=i(" pieces."),cq=m(),nx=r("p"),dq=i(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),mq=m(),Cc=r("p"),hq=i(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),rx=r("em"),fq=i("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),uq=i(` will return
a dataset with the same order as the original.`),gq=m(),ox=r("p"),_q=i(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),bq=m(),_(wo.$$.fragment),$q=m(),La=r("div"),_(zc.$$.fragment),xq=m(),lx=r("p"),vq=i(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict(). The dataset will yield
dicts for both inputs and labels unless the dict would contain only a single key, in which case a raw
tf.Tensor is yielded instead.`),yq=m(),_(Do.$$.fragment),jq=m(),dt=r("div"),_(Vc.$$.fragment),wq=m(),ix=r("p"),Dq=i(`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),kq=m(),St=r("p"),Eq=i("The resulting Parquet files are self-contained by default: if your dataset contains "),xu=r("a"),qq=i("Image"),Iq=i(" or "),vu=r("a"),Tq=i("Audio"),Nq=i(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),px=r("em"),Pq=i("embed_external_files"),Aq=i(" to False."),Fq=m(),_(ko.$$.fragment),Lq=m(),Z=r("div"),_(Uc.$$.fragment),Sq=m(),jn=r("p"),Oq=i("Saves a dataset to a dataset directory, or in a filesystem using either "),yu=r("a"),Cq=i("S3FileSystem"),zq=i(` or
any implementation of `),cx=r("code"),Vq=i("fsspec.spec.AbstractFileSystem"),Uq=i("."),Mq=m(),wn=r("p"),Rq=i("For "),ju=r("a"),Bq=i("Image"),Gq=i(" and "),wu=r("a"),Hq=i("Audio"),Wq=i(" data:"),Yq=m(),Mc=r("p"),Jq=i(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),dx=r("em"),Kq=i("read()"),Zq=i(" those files first."),Xq=m(),_(Eo.$$.fragment),Qq=m(),_(qo.$$.fragment),e9=m(),_(Io.$$.fragment),t9=m(),Sa=r("div"),_(Rc.$$.fragment),a9=m(),Ot=r("p"),s9=i("Loads a dataset that was previously saved using "),mx=r("code"),n9=i("save_to_disk"),r9=i(` from a dataset directory, or from a
filesystem using either `),Du=r("a"),o9=i("S3FileSystem"),l9=i(` or any implementation of
`),hx=r("code"),i9=i("fsspec.spec.AbstractFileSystem"),p9=i("."),c9=m(),_(To.$$.fragment),d9=m(),No=r("div"),_(Bc.$$.fragment),m9=m(),fx=r("p"),h9=i("Create and cache a new Dataset by flattening the indices mapping."),f9=m(),Oa=r("div"),_(Gc.$$.fragment),u9=m(),ux=r("p"),g9=i("Exports the dataset to csv"),_9=m(),_(Po.$$.fragment),b9=m(),Ca=r("div"),_(Hc.$$.fragment),$9=m(),Wc=r("p"),x9=i("Returns the dataset as a "),gx=r("code"),v9=i("pandas.DataFrame"),y9=i(". Can also return a generator for large datasets."),j9=m(),_(Ao.$$.fragment),w9=m(),za=r("div"),_(Yc.$$.fragment),D9=m(),_x=r("p"),k9=i("Returns the dataset as a Python dict. Can also return a generator for large datasets."),E9=m(),_(Fo.$$.fragment),q9=m(),Va=r("div"),_(Jc.$$.fragment),I9=m(),bx=r("p"),T9=i("Export the dataset to JSON Lines or JSON."),N9=m(),_(Lo.$$.fragment),P9=m(),Ua=r("div"),_(Kc.$$.fragment),A9=m(),$x=r("p"),F9=i("Exports the dataset to parquet"),L9=m(),_(So.$$.fragment),S9=m(),mt=r("div"),_(Zc.$$.fragment),O9=m(),Dn=r("p"),C9=i(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),xx=r("code"),z9=i("device"),V9=i(" if you want to run it on GPU ("),vx=r("code"),U9=i("device"),M9=i(` must be the GPU index).
You can find more information about Faiss here:`),R9=m(),yx=r("ul"),ku=r("li"),B9=i("For "),Xc=r("a"),G9=i("string factory"),H9=m(),_(Oo.$$.fragment),W9=m(),Ma=r("div"),_(Qc.$$.fragment),Y9=m(),Ct=r("p"),J9=i(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),jx=r("em"),K9=i("external_arrays"),Z9=i(`.
You can specify `),wx=r("em"),X9=i("device"),Q9=i(" if you want to run it on GPU ("),Dx=r("em"),eI=i("device"),tI=i(` must be the GPU index).
You can find more information about Faiss here:`),aI=m(),kx=r("ul"),Eu=r("li"),sI=i("For "),ed=r("a"),nI=i("string factory"),rI=m(),Co=r("div"),_(td.$$.fragment),oI=m(),Ex=r("p"),lI=i("Save a FaissIndex on disk."),iI=m(),Ra=r("div"),_(ad.$$.fragment),pI=m(),qx=r("p"),cI=i("Load a FaissIndex from disk."),dI=m(),sd=r("p"),mI=i(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),Ix=r("em"),hI=i(".get_index(index_name).faiss_index"),fI=i(" to make it fit your needs."),uI=m(),Ba=r("div"),_(nd.$$.fragment),gI=m(),Tx=r("p"),_I=i("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),bI=m(),_(zo.$$.fragment),$I=m(),Ga=r("div"),_(rd.$$.fragment),xI=m(),Nx=r("p"),vI=i("Load an existing text index using ElasticSearch for fast retrieval."),yI=m(),_(Vo.$$.fragment),jI=m(),Uo=r("div"),_(od.$$.fragment),wI=m(),Px=r("p"),DI=i("List the colindex_nameumns/identifiers of all the attached indexes."),kI=m(),Mo=r("div"),_(ld.$$.fragment),EI=m(),Ax=r("p"),qI=i("List the index_name/identifiers of all the attached indexes."),II=m(),Ro=r("div"),_(id.$$.fragment),TI=m(),Fx=r("p"),NI=i("Drop the index with the specified column."),PI=m(),Bo=r("div"),_(pd.$$.fragment),AI=m(),Lx=r("p"),FI=i("Find the nearest examples indices in the dataset to the query."),LI=m(),Go=r("div"),_(cd.$$.fragment),SI=m(),Sx=r("p"),OI=i("Find the nearest examples indices in the dataset to the query."),CI=m(),Ho=r("div"),_(dd.$$.fragment),zI=m(),Ox=r("p"),VI=i("Find the nearest examples in the dataset to the query."),UI=m(),Wo=r("div"),_(md.$$.fragment),MI=m(),Cx=r("p"),RI=i("Find the nearest examples in the dataset to the query."),BI=m(),Yo=r("div"),_(hd.$$.fragment),GI=m(),qu=r("p"),Iu=r("a"),HI=i("datasets.DatasetInfo"),WI=i(" object containing all the metadata in the dataset."),YI=m(),Jo=r("div"),_(fd.$$.fragment),JI=m(),Tu=r("p"),Nu=r("a"),KI=i("datasets.NamedSplit"),ZI=i(" object corresponding to a named dataset split."),XI=m(),Pu=r("div"),_(ud.$$.fragment),QI=m(),Au=r("div"),_(gd.$$.fragment),eT=m(),Fu=r("div"),_(_d.$$.fragment),tT=m(),Lu=r("div"),_(bd.$$.fragment),aT=m(),Su=r("div"),_($d.$$.fragment),sT=m(),Ou=r("div"),_(xd.$$.fragment),nT=m(),Cu=r("div"),_(vd.$$.fragment),rT=m(),zu=r("div"),_(yd.$$.fragment),oT=m(),Vu=r("div"),_(jd.$$.fragment),lT=m(),Uu=r("div"),_(wd.$$.fragment),iT=m(),Mu=r("div"),_(Dd.$$.fragment),pT=m(),Ru=r("div"),_(kd.$$.fragment),cT=m(),Bu=r("div"),_(Ed.$$.fragment),dT=m(),Ha=r("div"),_(qd.$$.fragment),mT=m(),zx=r("p"),hT=i("Create Dataset from CSV file(s)."),fT=m(),_(Ko.$$.fragment),uT=m(),Wa=r("div"),_(Id.$$.fragment),gT=m(),Vx=r("p"),_T=i("Create Dataset from JSON or JSON Lines file(s)."),bT=m(),_(Zo.$$.fragment),$T=m(),Ya=r("div"),_(Td.$$.fragment),xT=m(),Ux=r("p"),vT=i("Create Dataset from Parquet file(s)."),yT=m(),_(Xo.$$.fragment),jT=m(),Ja=r("div"),_(Nd.$$.fragment),wT=m(),Mx=r("p"),DT=i("Create Dataset from text file(s)."),kT=m(),_(Qo.$$.fragment),ET=m(),Ka=r("div"),_(Pd.$$.fragment),qT=m(),kn=r("p"),IT=i("Prepare a dataset for the given task by casting the dataset\u2019s "),Gu=r("a"),TT=i("Features"),NT=i(" to standardized column names and types as detailed in "),Hu=r("a"),PT=i("datasets.tasks"),AT=i("."),FT=m(),En=r("p"),LT=i("Casts "),Rx=r("code"),ST=i("datasets.DatasetInfo.features"),OT=i(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Bx=r("code"),CT=i("datasets.DatasetInfo.task_templates"),zT=i(" after casting."),VT=m(),Za=r("div"),_(Ad.$$.fragment),UT=m(),Fd=r("p"),MT=i("Align the dataset\u2019s label ID and label name mapping to match an input "),Gx=r("code"),RT=i("label2id"),BT=i(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),GT=m(),_(el.$$.fragment),P7=m(),zt=r("div"),_(Ld.$$.fragment),HT=m(),qn=r("p"),WT=i("Converts a list of "),Wu=r("a"),YT=i("Dataset"),JT=i(" with the same schema into a single "),Yu=r("a"),KT=i("Dataset"),ZT=i("."),XT=m(),_(tl.$$.fragment),A7=m(),ee=r("div"),_(Sd.$$.fragment),QT=m(),Hx=r("p"),eN=i(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),tN=m(),In=r("p"),aN=i("You can use this function on a list of "),Ju=r("a"),sN=i("Dataset"),nN=i(" objects, or on a list of "),Ku=r("a"),rN=i("IterableDataset"),oN=i(" objects."),lN=m(),Ve=r("p"),iN=i("If "),Wx=r("code"),pN=i("probabilities"),cN=i(" is "),Yx=r("code"),dN=i("None"),mN=i(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Jx=r("code"),hN=i("probabilities"),fN=i(" is not "),Kx=r("code"),uN=i("None"),gN=i(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),_N=m(),Tn=r("p"),bN=i("The resulting dataset ends when one of the source datasets runs out of examples except when "),Zx=r("code"),$N=i("oversampling"),xN=i(" is "),Xx=r("code"),vN=i("True"),yN=i(`,
in which case, the resulting dataset ends when all datasets have ran out of examples at least one time.`),jN=m(),_(al.$$.fragment),F7=m(),me=r("div"),_(Od.$$.fragment),wN=m(),Qx=r("p"),DN=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),kN=m(),e1=r("p"),EN=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),qN=m(),t1=r("p"),IN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),TN=m(),Ue=r("ul"),a1=r("li"),NN=i("cache files are always recreated"),PN=m(),s1=r("li"),AN=i("cache files are written to a temporary directory that is deleted when session closes"),FN=m(),n1=r("li"),LN=i("cache files are named using a random hash instead of the dataset fingerprint"),SN=m(),Cd=r("li"),ON=i("use "),Zu=r("a"),CN=i("datasets.Dataset.save_to_disk()"),zN=i(" to save a transformed dataset or it will be deleted when session closes"),VN=m(),Vt=r("li"),UN=i("caching doesn\u2019t affect "),Xu=r("a"),MN=i("datasets.load_dataset()"),RN=i(`. If you want to regenerate a dataset from scratch you should use
the `),r1=r("code"),BN=i("download_mode"),GN=i(" parameter in "),Qu=r("a"),HN=i("datasets.load_dataset()"),WN=i("."),L7=m(),he=r("div"),_(zd.$$.fragment),YN=m(),o1=r("p"),JN=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),KN=m(),l1=r("p"),ZN=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),XN=m(),i1=r("p"),QN=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),eP=m(),Me=r("ul"),p1=r("li"),tP=i("cache files are always recreated"),aP=m(),c1=r("li"),sP=i("cache files are written to a temporary directory that is deleted when session closes"),nP=m(),d1=r("li"),rP=i("cache files are named using a random hash instead of the dataset fingerprint"),oP=m(),Vd=r("li"),lP=i("use "),eg=r("a"),iP=i("datasets.Dataset.save_to_disk()"),pP=i(" to save a transformed dataset or it will be deleted when session closes"),cP=m(),Ut=r("li"),dP=i("caching doesn\u2019t affect "),tg=r("a"),mP=i("datasets.load_dataset()"),hP=i(`. If you want to regenerate a dataset from scratch you should use
the `),m1=r("code"),fP=i("download_mode"),uP=i(" parameter in "),ag=r("a"),gP=i("datasets.load_dataset()"),_P=i("."),S7=m(),fe=r("div"),_(Ud.$$.fragment),bP=m(),h1=r("p"),$P=i(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),xP=m(),f1=r("p"),vP=i(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),yP=m(),u1=r("p"),jP=i(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),wP=m(),Re=r("ul"),g1=r("li"),DP=i("cache files are always recreated"),kP=m(),_1=r("li"),EP=i("cache files are written to a temporary directory that is deleted when session closes"),qP=m(),b1=r("li"),IP=i("cache files are named using a random hash instead of the dataset fingerprint"),TP=m(),Md=r("li"),NP=i("use "),sg=r("a"),PP=i("datasets.Dataset.save_to_disk()"),AP=i(" to save a transformed dataset or it will be deleted when session closes"),FP=m(),Mt=r("li"),LP=i("caching doesn\u2019t affect "),ng=r("a"),SP=i("datasets.load_dataset()"),OP=i(`. If you want to regenerate a dataset from scratch you should use
the `),$1=r("code"),CP=i("download_mode"),zP=i(" parameter in "),rg=r("a"),VP=i("datasets.load_dataset()"),UP=i("."),O7=m(),Nn=r("h2"),sl=r("a"),x1=r("span"),_(Rd.$$.fragment),MP=m(),v1=r("span"),RP=i("DatasetDict"),C7=m(),nl=r("p"),BP=i("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),y1=r("code"),GP=i("Dataset"),HP=i(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),z7=m(),A=r("div"),_(Bd.$$.fragment),WP=m(),j1=r("p"),YP=i("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),JP=m(),Xa=r("div"),_(Gd.$$.fragment),KP=m(),w1=r("p"),ZP=i("The Apache Arrow tables backing each split."),XP=m(),_(rl.$$.fragment),QP=m(),Qa=r("div"),_(Hd.$$.fragment),eA=m(),D1=r("p"),tA=i("The cache files containing the Apache Arrow table backing each split."),aA=m(),_(ol.$$.fragment),sA=m(),es=r("div"),_(Wd.$$.fragment),nA=m(),k1=r("p"),rA=i("Number of columns in each split of the dataset."),oA=m(),_(ll.$$.fragment),lA=m(),ts=r("div"),_(Yd.$$.fragment),iA=m(),Jd=r("p"),pA=i("Number of rows in each split of the dataset (same as "),il=r("a"),cA=i("datasets.Dataset."),E1=r("strong"),dA=i("len"),mA=i("()"),hA=i(")."),fA=m(),_(pl.$$.fragment),uA=m(),as=r("div"),_(Kd.$$.fragment),gA=m(),q1=r("p"),_A=i("Names of the columns in each split of the dataset."),bA=m(),_(cl.$$.fragment),$A=m(),ss=r("div"),_(Zd.$$.fragment),xA=m(),I1=r("p"),vA=i("Shape of each split of the dataset (number of columns, number of rows)."),yA=m(),_(dl.$$.fragment),jA=m(),ht=r("div"),_(Xd.$$.fragment),wA=m(),T1=r("p"),DA=i("Return a list of the unique elements in a column for each split."),kA=m(),N1=r("p"),EA=i("This is implemented in the low-level backend and as such, very fast."),qA=m(),_(ml.$$.fragment),IA=m(),ns=r("div"),_(Qd.$$.fragment),TA=m(),P1=r("p"),NA=i(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),PA=m(),_(hl.$$.fragment),AA=m(),rs=r("div"),_(em.$$.fragment),FA=m(),A1=r("p"),LA=i(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),SA=m(),_(fl.$$.fragment),OA=m(),os=r("div"),_(tm.$$.fragment),CA=m(),F1=r("p"),zA=i(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),VA=m(),_(ul.$$.fragment),UA=m(),ft=r("div"),_(am.$$.fragment),MA=m(),L1=r("p"),RA=i(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),BA=m(),S1=r("p"),GA=i(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),HA=m(),_(gl.$$.fragment),WA=m(),De=r("div"),_(sm.$$.fragment),YA=m(),O1=r("p"),JA=i("Create a new Dataset where the rows are shuffled."),KA=m(),C1=r("p"),ZA=i("The transformation is applied to all the datasets of the dataset dictionary."),XA=m(),z1=r("p"),QA=i(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),eF=m(),_(_l.$$.fragment),tF=m(),ke=r("div"),_(nm.$$.fragment),aF=m(),rm=r("p"),sF=i("Set "),V1=r("code"),nF=i("__getitem__"),rF=i(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),oF=m(),Be=r("p"),lF=i("It is possible to call "),U1=r("code"),iF=i("map"),pF=i(" after calling "),M1=r("code"),cF=i("set_format"),dF=i(". Since "),R1=r("code"),mF=i("map"),hF=i(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),B1=r("code"),fF=i("map"),uF=i(" on a dataset to add a new column, then this column will be formatted:"),gF=m(),G1=r("p"),_F=i("new formatted columns = (all columns - previously unformatted columns)"),bF=m(),_(bl.$$.fragment),$F=m(),ut=r("div"),_(om.$$.fragment),xF=m(),lm=r("p"),vF=i("Reset "),H1=r("code"),yF=i("__getitem__"),jF=i(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),wF=m(),og=r("p"),DF=i("Same as "),W1=r("code"),kF=i("self.set_format()"),EF=m(),_($l.$$.fragment),qF=m(),xl=r("div"),_(im.$$.fragment),IF=m(),Pn=r("p"),TF=i("To be used in a "),Y1=r("em"),NF=i("with"),PF=i(" statement. Set "),J1=r("code"),AF=i("__getitem__"),FF=i(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),LF=m(),Ee=r("div"),_(pm.$$.fragment),SF=m(),Rt=r("p"),OF=i("Set "),K1=r("code"),CF=i("__getitem__"),zF=i(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Z1=r("code"),VF=i("type"),UF=i(" (for example \u201Cnumpy\u201D) is used to format batches when using "),X1=r("code"),MF=i("__getitem__"),RF=i(`.
The format is set for every dataset in the dataset dictionary`),BF=m(),cm=r("p"),GF=i("It\u2019s also possible to use custom transforms for formatting using "),lg=r("a"),HF=i("datasets.Dataset.with_transform()"),WF=i("."),YF=m(),An=r("p"),JF=i("Contrary to "),ig=r("a"),KF=i("datasets.DatasetDict.set_format()"),ZF=i(", "),Q1=r("code"),XF=i("with_format"),QF=i(" returns a new DatasetDict object with new Dataset objects."),eL=m(),_(vl.$$.fragment),tL=m(),qe=r("div"),_(dm.$$.fragment),aL=m(),Fn=r("p"),sL=i("Set "),ev=r("code"),nL=i("__getitem__"),rL=i(" return format using this transform. The transform is applied on-the-fly on batches when "),tv=r("code"),oL=i("__getitem__"),lL=i(` is called.
The transform is set for every dataset in the dataset dictionary`),iL=m(),Ln=r("p"),pL=i("As "),pg=r("a"),cL=i("datasets.Dataset.set_format()"),dL=i(", this can be reset using "),cg=r("a"),mL=i("datasets.Dataset.reset_format()"),hL=i("."),fL=m(),Sn=r("p"),uL=i("Contrary to "),av=r("code"),gL=i("datasets.DatasetDict.set_transform()"),_L=i(", "),sv=r("code"),bL=i("with_transform"),$L=i(" returns a new DatasetDict object with new Dataset objects."),xL=m(),_(yl.$$.fragment),vL=m(),ls=r("div"),_(mm.$$.fragment),yL=m(),nv=r("p"),jL=i(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),wL=m(),_(jl.$$.fragment),DL=m(),gt=r("div"),_(hm.$$.fragment),kL=m(),rv=r("p"),EL=i(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),qL=m(),Bt=r("p"),IL=i("You can also remove a column using "),dg=r("a"),TL=i("Dataset.map()"),NL=i(" with "),ov=r("em"),PL=i("feature"),AL=i(" but "),lv=r("code"),FL=i("cast_"),LL=i(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),SL=m(),_(wl.$$.fragment),OL=m(),is=r("div"),_(fm.$$.fragment),CL=m(),iv=r("p"),zL=i("Cast column to feature for decoding."),VL=m(),_(Dl.$$.fragment),UL=m(),Ie=r("div"),_(um.$$.fragment),ML=m(),pv=r("p"),RL=i(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),BL=m(),cv=r("p"),GL=i("The transformation is applied to all the splits of the dataset dictionary."),HL=m(),On=r("p"),WL=i("You can also remove a column using "),mg=r("a"),YL=i("Dataset.map()"),JL=i(" with "),dv=r("em"),KL=i("remove_columns"),ZL=i(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),XL=m(),_(kl.$$.fragment),QL=m(),Te=r("div"),_(gm.$$.fragment),eS=m(),mv=r("p"),tS=i(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),aS=m(),Cn=r("p"),sS=i("You can also rename a column using "),hg=r("a"),nS=i("Dataset.map()"),rS=i(" with "),hv=r("em"),oS=i("remove_columns"),lS=i(" but the present method:"),iS=m(),_m=r("ul"),fv=r("li"),pS=i("takes care of moving the original features under the new column name."),cS=m(),uv=r("li"),dS=i("doesn\u2019t copy the data to a new dataset and is thus much faster."),mS=m(),_(El.$$.fragment),hS=m(),ps=r("div"),_(bm.$$.fragment),fS=m(),gv=r("p"),uS=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),gS=m(),_(ql.$$.fragment),_S=m(),cs=r("div"),_($m.$$.fragment),bS=m(),xm=r("p"),$S=i("Casts the given column as :obj:"),_v=r("code"),xS=i("datasets.features.ClassLabel"),vS=i(" and updates the tables."),yS=m(),_(Il.$$.fragment),jS=m(),Ne=r("div"),_(vm.$$.fragment),wS=m(),zn=r("p"),DS=i("Pushes the "),bv=r("code"),kS=i("DatasetDict"),ES=i(` to the hub as a Parquet dataset.
The `),$v=r("code"),qS=i("DatasetDict"),IS=i(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),TS=m(),xv=r("p"),NS=i("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),PS=m(),Gt=r("p"),AS=i("The resulting Parquet files are self-contained by default: if your dataset contains "),fg=r("a"),FS=i("Image"),LS=i(" or "),ug=r("a"),SS=i("Audio"),OS=i(`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),vv=r("em"),CS=i("embed_external_files"),zS=i(" to False."),VS=m(),_(Tl.$$.fragment),US=m(),oe=r("div"),_(ym.$$.fragment),MS=m(),Vn=r("p"),RS=i("Saves a dataset dict to a filesystem using either "),gg=r("a"),BS=i("S3FileSystem"),GS=i(` or
`),yv=r("code"),HS=i("fsspec.spec.AbstractFileSystem"),WS=i("."),YS=m(),Un=r("p"),JS=i("For "),_g=r("a"),KS=i("Image"),ZS=i(" and "),bg=r("a"),XS=i("Audio"),QS=i(" data:"),eO=m(),jm=r("p"),tO=i(`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),jv=r("em"),aO=i("read()"),sO=i(" those files first."),nO=m(),_(Nl.$$.fragment),rO=m(),_(Pl.$$.fragment),oO=m(),ds=r("div"),_(wm.$$.fragment),lO=m(),Ht=r("p"),iO=i("Load a dataset that was previously saved using "),wv=r("code"),pO=i("save_to_disk"),cO=i(` from a filesystem using either
`),$g=r("a"),dO=i("S3FileSystem"),mO=i(" or "),Dv=r("code"),hO=i("fsspec.spec.AbstractFileSystem"),fO=i("."),uO=m(),_(Al.$$.fragment),gO=m(),ms=r("div"),_(Dm.$$.fragment),_O=m(),kv=r("p"),bO=i("Create DatasetDict from CSV file(s)."),$O=m(),_(Fl.$$.fragment),xO=m(),hs=r("div"),_(km.$$.fragment),vO=m(),Ev=r("p"),yO=i("Create DatasetDict from JSON Lines file(s)."),jO=m(),_(Ll.$$.fragment),wO=m(),fs=r("div"),_(Em.$$.fragment),DO=m(),qv=r("p"),kO=i("Create DatasetDict from Parquet file(s)."),EO=m(),_(Sl.$$.fragment),qO=m(),us=r("div"),_(qm.$$.fragment),IO=m(),Iv=r("p"),TO=i("Create DatasetDict from text file(s)."),NO=m(),_(Ol.$$.fragment),PO=m(),gs=r("div"),_(Im.$$.fragment),AO=m(),Mn=r("p"),FO=i("Prepare a dataset for the given task by casting the dataset\u2019s "),xg=r("a"),LO=i("Features"),SO=i(" to standardized column names and types as detailed in "),vg=r("a"),OO=i("datasets.tasks"),CO=i("."),zO=m(),Rn=r("p"),VO=i("Casts "),Tv=r("code"),UO=i("datasets.DatasetInfo.features"),MO=i(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Nv=r("code"),RO=i("datasets.DatasetInfo.task_templates"),BO=i(" after casting."),V7=m(),yg=r("a"),U7=m(),Bn=r("h2"),Cl=r("a"),Pv=r("span"),_(Tm.$$.fragment),GO=m(),Av=r("span"),HO=i("IterableDataset"),M7=m(),zl=r("p"),WO=i("The base class "),jg=r("a"),YO=i("IterableDataset"),JO=i(" implements an iterable Dataset backed by python generators."),R7=m(),L=r("div"),_(Nm.$$.fragment),KO=m(),Fv=r("p"),ZO=i("A Dataset backed by an iterable."),XO=m(),_s=r("div"),_(Pm.$$.fragment),QO=m(),Lv=r("p"),eC=i(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),tC=m(),_(Vl.$$.fragment),aC=m(),bs=r("div"),_(Am.$$.fragment),sC=m(),Sv=r("p"),nC=i("Cast column to feature for decoding."),rC=m(),_(Ul.$$.fragment),oC=m(),$s=r("div"),_(Fm.$$.fragment),lC=m(),Ov=r("p"),iC=i("Cast the dataset to a new set of features."),pC=m(),_(Ml.$$.fragment),cC=m(),wg=r("div"),_(Lm.$$.fragment),dC=m(),Pe=r("div"),_(Sm.$$.fragment),mC=m(),Cv=r("p"),hC=i(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),fC=m(),Om=r("p"),uC=i("You can specify whether the function should be batched or not with the "),zv=r("code"),gC=i("batched"),_C=i(" parameter:"),bC=m(),Gn=r("ul"),Vv=r("li"),$C=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),xC=m(),Uv=r("li"),vC=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),yC=m(),ue=r("li"),jC=i("If batched is True and batch_size is "),Mv=r("code"),wC=i("n"),DC=i(" > 1, then the function takes a batch of "),Rv=r("code"),kC=i("n"),EC=i(" examples as input and can return a batch with "),Bv=r("code"),qC=i("n"),IC=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Gv=r("code"),TC=i("n"),NC=i(` examples.
A batch is a dictionary, e.g. a batch of `),Hv=r("code"),PC=i("n"),AC=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),FC=m(),_(Rl.$$.fragment),LC=m(),xs=r("div"),_(Cm.$$.fragment),SC=m(),Wv=r("p"),OC=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),CC=m(),_(Bl.$$.fragment),zC=m(),vs=r("div"),_(zm.$$.fragment),VC=m(),Yv=r("p"),UC=i(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),MC=m(),_(Gl.$$.fragment),RC=m(),le=r("div"),_(Vm.$$.fragment),BC=m(),Jv=r("p"),GC=i("Randomly shuffles the elements of this dataset."),HC=m(),Kv=r("p"),WC=i(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),YC=m(),Um=r("p"),JC=i("For instance, if your dataset contains 10,000 elements but "),Zv=r("code"),KC=i("buffer_size"),ZC=i(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),XC=m(),Hn=r("p"),QC=i(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Dg=r("a"),ez=i("datasets.IterableDataset.skip()"),tz=i(" or "),kg=r("a"),az=i("datasets.IterableDataset.take()"),sz=i(`
then the order of the shards is kept unchanged.`),nz=m(),_(Hl.$$.fragment),rz=m(),ys=r("div"),_(Mm.$$.fragment),oz=m(),Rm=r("p"),lz=i("Create a new IterableDataset that skips the first "),Xv=r("code"),iz=i("n"),pz=i(" elements."),cz=m(),_(Wl.$$.fragment),dz=m(),js=r("div"),_(Bm.$$.fragment),mz=m(),Gm=r("p"),hz=i("Create a new IterableDataset with only the first "),Qv=r("code"),fz=i("n"),uz=i(" elements."),gz=m(),_(Yl.$$.fragment),_z=m(),Jl=r("div"),_(Hm.$$.fragment),bz=m(),Eg=r("p"),qg=r("a"),$z=i("datasets.DatasetInfo"),xz=i(" object containing all the metadata in the dataset."),vz=m(),Kl=r("div"),_(Wm.$$.fragment),yz=m(),Ig=r("p"),Tg=r("a"),jz=i("datasets.NamedSplit"),wz=i(" object corresponding to a named dataset split."),Dz=m(),Ng=r("div"),_(Ym.$$.fragment),kz=m(),Pg=r("div"),_(Jm.$$.fragment),Ez=m(),Ag=r("div"),_(Km.$$.fragment),qz=m(),Fg=r("div"),_(Zm.$$.fragment),Iz=m(),Lg=r("div"),_(Xm.$$.fragment),Tz=m(),Sg=r("div"),_(Qm.$$.fragment),Nz=m(),Og=r("div"),_(eh.$$.fragment),Pz=m(),Cg=r("div"),_(th.$$.fragment),Az=m(),zg=r("div"),_(ah.$$.fragment),Fz=m(),Vg=r("div"),_(sh.$$.fragment),Lz=m(),Ug=r("div"),_(nh.$$.fragment),Sz=m(),Mg=r("div"),_(rh.$$.fragment),Oz=m(),Rg=r("div"),_(oh.$$.fragment),B7=m(),Wn=r("h2"),Zl=r("a"),ey=r("span"),_(lh.$$.fragment),Cz=m(),ty=r("span"),zz=i("IterableDatasetDict"),G7=m(),Xl=r("p"),Vz=i("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),ay=r("code"),Uz=i("IterableDataset"),Mz=i(" objects as values."),H7=m(),U=r("div"),_(ih.$$.fragment),Rz=m(),Ae=r("div"),_(ph.$$.fragment),Bz=m(),sy=r("p"),Gz=i(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),Hz=m(),ch=r("p"),Wz=i("You can specify whether the function should be batched or not with the "),ny=r("code"),Yz=i("batched"),Jz=i(" parameter:"),Kz=m(),Yn=r("ul"),ry=r("li"),Zz=i(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),Xz=m(),oy=r("li"),Qz=i(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),eV=m(),ge=r("li"),tV=i("If batched is True and batch_size is "),ly=r("code"),aV=i("n"),sV=i(" > 1, then the function takes a batch of "),iy=r("code"),nV=i("n"),rV=i(" examples as input and can return a batch with "),py=r("code"),oV=i("n"),lV=i(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),cy=r("code"),iV=i("n"),pV=i(` examples.
A batch is a dictionary, e.g. a batch of `),dy=r("code"),cV=i("n"),dV=i(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),mV=m(),_(Ql.$$.fragment),hV=m(),ws=r("div"),_(dh.$$.fragment),fV=m(),my=r("p"),uV=i(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),gV=m(),_(ei.$$.fragment),_V=m(),ie=r("div"),_(mh.$$.fragment),bV=m(),hy=r("p"),$V=i(`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),xV=m(),fy=r("p"),vV=i(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),yV=m(),hh=r("p"),jV=i("For instance, if your dataset contains 10,000 elements but "),uy=r("code"),wV=i("buffer_size"),DV=i(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),kV=m(),Jn=r("p"),EV=i(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Bg=r("a"),qV=i("datasets.IterableDataset.skip()"),IV=i(" or "),Gg=r("a"),TV=i("datasets.IterableDataset.take()"),NV=i(`
then the order of the shards is kept unchanged.`),PV=m(),_(ti.$$.fragment),AV=m(),Ds=r("div"),_(fh.$$.fragment),FV=m(),gy=r("p"),LV=i(`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),SV=m(),_(ai.$$.fragment),OV=m(),ks=r("div"),_(uh.$$.fragment),CV=m(),_y=r("p"),zV=i(`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),VV=m(),_(si.$$.fragment),UV=m(),Es=r("div"),_(gh.$$.fragment),MV=m(),by=r("p"),RV=i(`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),BV=m(),_(ni.$$.fragment),GV=m(),qs=r("div"),_(_h.$$.fragment),HV=m(),$y=r("p"),WV=i(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),YV=m(),_(ri.$$.fragment),JV=m(),Is=r("div"),_(bh.$$.fragment),KV=m(),xy=r("p"),ZV=i(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),XV=m(),_(oi.$$.fragment),QV=m(),Ts=r("div"),_($h.$$.fragment),eU=m(),vy=r("p"),tU=i(`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),aU=m(),_(li.$$.fragment),W7=m(),Kn=r("h2"),ii=r("a"),yy=r("span"),_(xh.$$.fragment),sU=m(),jy=r("span"),nU=i("Features"),Y7=m(),O=r("div"),_(vh.$$.fragment),rU=m(),wy=r("p"),oU=i("A special dictionary that defines the internal structure of a dataset."),lU=m(),yh=r("p"),iU=i("Instantiated with a dictionary of type "),Dy=r("code"),pU=i("dict[str, FieldType]"),cU=i(`, where keys are the desired column names,
and values are the type of that column.`),dU=m(),Hg=r("p"),ky=r("code"),mU=i("FieldType"),hU=i(" can be one of the following:"),fU=m(),J=r("ul"),Ey=r("li"),Ns=r("p"),uU=i("a "),Wg=r("a"),gU=i("datasets.Value"),_U=i(" feature specifies a single typed value, e.g. "),qy=r("code"),bU=i("int64"),$U=i(" or "),Iy=r("code"),xU=i("string"),vU=m(),Ty=r("li"),jh=r("p"),yU=i("a "),Yg=r("a"),jU=i("datasets.ClassLabel"),wU=i(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),DU=m(),Ny=r("li"),wh=r("p"),kU=i("a python "),Py=r("code"),EU=i("dict"),qU=i(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),IU=m(),Dh=r("li"),Ge=r("p"),TU=i("a python "),Ay=r("code"),NU=i("list"),PU=i(" or a "),Jg=r("a"),AU=i("datasets.Sequence"),FU=i(` specifies that the field contains a list of objects. The python
`),Fy=r("code"),LU=i("list"),SU=i(" or "),Kg=r("a"),OU=i("datasets.Sequence"),CU=i(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),zU=m(),_(pi.$$.fragment),VU=m(),Ly=r("li"),He=r("p"),UU=i("a "),Zg=r("a"),MU=i("Array2D"),RU=i(", "),Xg=r("a"),BU=i("Array3D"),GU=i(", "),Qg=r("a"),HU=i("Array4D"),WU=i(" or "),e_=r("a"),YU=i("Array5D"),JU=i(" feature for multidimensional arrays"),KU=m(),Sy=r("li"),kh=r("p"),ZU=i("an "),t_=r("a"),XU=i("Audio"),QU=i(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),eM=m(),Oy=r("li"),Wt=r("p"),tM=i("an "),a_=r("a"),aM=i("Image"),sM=i(" feature to store the absolute path to an image file, an "),Cy=r("code"),nM=i("np.ndarray"),rM=i(" object, a "),zy=r("code"),oM=i("PIL.Image.Image"),lM=i(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),iM=m(),Vy=r("li"),ci=r("p"),s_=r("a"),pM=i("datasets.Translation"),cM=i(" and "),n_=r("a"),dM=i("datasets.TranslationVariableLanguages"),mM=i(", the two features specific to Machine Translation"),hM=m(),Ps=r("div"),_(Eh.$$.fragment),fM=m(),Uy=r("p"),uM=i("Make a deep copy of Features."),gM=m(),_(di.$$.fragment),_M=m(),mi=r("div"),_(qh.$$.fragment),bM=m(),My=r("p"),$M=i("Decode batch with custom feature decoding."),xM=m(),hi=r("div"),_(Ih.$$.fragment),vM=m(),Ry=r("p"),yM=i("Decode column with custom feature decoding."),jM=m(),fi=r("div"),_(Th.$$.fragment),wM=m(),By=r("p"),DM=i("Decode example with custom feature decoding."),kM=m(),ui=r("div"),_(Nh.$$.fragment),EM=m(),Gy=r("p"),qM=i("Encode batch into a format for Arrow."),IM=m(),gi=r("div"),_(Ph.$$.fragment),TM=m(),Hy=r("p"),NM=i("Encode example into a format for Arrow."),PM=m(),_t=r("div"),_(Ah.$$.fragment),AM=m(),Wy=r("p"),FM=i(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),LM=m(),Yy=r("p"),SM=i(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),OM=m(),_(_i.$$.fragment),CM=m(),bi=r("div"),_(Fh.$$.fragment),zM=m(),Jy=r("p"),VM=i(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),UM=m(),Fe=r("div"),_(Lh.$$.fragment),MM=m(),Ky=r("p"),RM=i("Construct Features from dict."),BM=m(),Zy=r("p"),GM=i(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),HM=m(),Yt=r("p"),WM=i(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),r_=r("a"),YM=i("DatasetInfo"),JM=i(` that was dumped to a JSON object. This acts as an analogue to
`),o_=r("a"),KM=i("Features.from_arrow_schema()"),ZM=i(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),l_=r("a"),XM=i("Value"),QM=i(" automatically performs."),eR=m(),_($i.$$.fragment),tR=m(),bt=r("div"),_(Sh.$$.fragment),aR=m(),Xy=r("p"),sR=i("Reorder Features fields to match the field order of other Features."),nR=m(),Qy=r("p"),rR=i(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),oR=m(),_(xi.$$.fragment),J7=m(),Jt=r("div"),_(Oh.$$.fragment),lR=m(),ej=r("p"),iR=i(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),pR=m(),_(vi.$$.fragment),K7=m(),B=r("div"),_(Ch.$$.fragment),cR=m(),tj=r("p"),dR=i("Feature type for integer class labels."),mR=m(),zh=r("p"),hR=i("There are 3 ways to define a "),aj=r("em"),fR=i("ClassLabel"),uR=i(", which correspond to the 3 arguments:"),gR=m(),Zn=r("ul"),i_=r("li"),sj=r("em"),_R=i("num_classes"),bR=i(": Create 0 to (num_classes-1) labels."),$R=m(),p_=r("li"),nj=r("em"),xR=i("names"),vR=i(": List of label strings."),yR=m(),c_=r("li"),rj=r("em"),jR=i("names_file"),wR=i(": File containing the list of labels."),DR=m(),oj=r("p"),kR=i(`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`),ER=m(),_(yi.$$.fragment),qR=m(),As=r("div"),_(Vh.$$.fragment),IR=m(),lj=r("p"),TR=i(`Cast an Arrow array to the ClassLabel arrow storage type.
The Arrow types that can be converted to the ClassLabel pyarrow storage type are:`),NR=m(),Uh=r("ul"),ij=r("li"),PR=i("pa.string()"),AR=m(),pj=r("li"),FR=i("pa.int()"),LR=m(),$t=r("div"),_(Mh.$$.fragment),SR=m(),cj=r("p"),OR=i("Conversion integer => class name string."),CR=m(),dj=r("p"),zR=i("Regarding unknown/missing labels: passing negative integers raises ValueError."),VR=m(),_(ji.$$.fragment),UR=m(),Fs=r("div"),_(Rh.$$.fragment),MR=m(),mj=r("p"),RR=i("Conversion class name string => integer."),BR=m(),_(wi.$$.fragment),Z7=m(),We=r("div"),_(Bh.$$.fragment),GR=m(),hj=r("p"),HR=i("The Value dtypes are as follows:"),WR=m(),fj=r("p"),YR=i(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),JR=m(),_(Di.$$.fragment),X7=m(),te=r("div"),_(Gh.$$.fragment),KR=m(),d_=r("p"),uj=r("code"),ZR=i("FeatureConnector"),XR=i(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),QR=m(),gj=r("p"),eB=i(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),tB=m(),Hh=r("p"),aB=i("Output: A dictionary mapping string language codes to translations as "),_j=r("code"),sB=i("Text"),nB=i(`
features.`),rB=m(),_(ki.$$.fragment),oB=m(),Ei=r("div"),_(Wh.$$.fragment),lB=m(),bj=r("p"),iB=i("Flatten the Translation feature into a dictionary."),Q7=m(),ae=r("div"),_(Yh.$$.fragment),pB=m(),m_=r("p"),$j=r("code"),cB=i("FeatureConnector"),dB=i(` for translations with variable languages per example.
Here for compatiblity with tfds.`),mB=m(),xj=r("p"),hB=i(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),fB=m(),vj=r("p"),uB=i(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),gB=m(),_(qi.$$.fragment),_B=m(),Ii=r("div"),_(Jh.$$.fragment),bB=m(),yj=r("p"),$B=i("Flatten the TranslationVariableLanguages feature into a dictionary."),eD=m(),Kt=r("div"),_(Kh.$$.fragment),xB=m(),jj=r("p"),vB=i("Create a two-dimensional array."),yB=m(),_(Ti.$$.fragment),tD=m(),Zt=r("div"),_(Zh.$$.fragment),jB=m(),wj=r("p"),wB=i("Create a three-dimensional array."),DB=m(),_(Ni.$$.fragment),aD=m(),Xt=r("div"),_(Xh.$$.fragment),kB=m(),Dj=r("p"),EB=i("Create a four-dimensional array."),qB=m(),_(Pi.$$.fragment),sD=m(),Qt=r("div"),_(Qh.$$.fragment),IB=m(),kj=r("p"),TB=i("Create a five-dimensional array."),NB=m(),_(Ai.$$.fragment),nD=m(),M=r("div"),_(ef.$$.fragment),PB=m(),Ej=r("p"),AB=i("Audio Feature to extract audio data from an audio file."),FB=m(),qj=r("p"),LB=i("Input: The Audio feature accepts as input:"),SB=m(),Xn=r("ul"),Ij=r("li"),tf=r("p"),OB=i("A "),Tj=r("code"),CB=i("str"),zB=i(": Absolute path to the audio file (i.e. random access is allowed)."),VB=m(),Qn=r("li"),af=r("p"),UB=i("A "),Nj=r("code"),MB=i("dict"),RB=i(" with the keys:"),BB=m(),sf=r("ul"),Pj=r("li"),GB=i("path: String with relative path of the audio file to the archive file."),HB=m(),Aj=r("li"),WB=i("bytes: Bytes content of the audio file."),YB=m(),Fj=r("p"),JB=i("This is useful for archived files with sequential access."),KB=m(),er=r("li"),nf=r("p"),ZB=i("A "),Lj=r("code"),XB=i("dict"),QB=i(" with the keys:"),eG=m(),tr=r("ul"),Sj=r("li"),tG=i("path: String with relative path of the audio file to the archive file."),aG=m(),Oj=r("li"),sG=i("array: Array containing the audio sample"),nG=m(),Cj=r("li"),rG=i("sampling_rate: Integer corresponding to the sampling rate of the audio sample."),oG=m(),zj=r("p"),lG=i("This is useful for archived files with sequential access."),iG=m(),_(Fi.$$.fragment),pG=m(),Ls=r("div"),_(rf.$$.fragment),cG=m(),Vj=r("p"),dG=i(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),mG=m(),ea=r("ul"),Uj=r("li"),hG=i("pa.string() - it must contain the \u201Cpath\u201D data"),fG=m(),Mj=r("li"),uG=i("pa.struct({\u201Cbytes\u201D: pa.binary()})"),gG=m(),Rj=r("li"),_G=i("pa.struct({\u201Cpath\u201D: pa.string()})"),bG=m(),Bj=r("li"),$G=i("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),xG=m(),Li=r("div"),_(of.$$.fragment),vG=m(),Gj=r("p"),yG=i("Decode example audio file into audio data."),jG=m(),Si=r("div"),_(lf.$$.fragment),wG=m(),Hj=r("p"),DG=i("Embed audio files into the Arrow array."),kG=m(),Oi=r("div"),_(pf.$$.fragment),EG=m(),Wj=r("p"),qG=i("Encode example into a format for Arrow."),IG=m(),Ci=r("div"),_(cf.$$.fragment),TG=m(),Yj=r("p"),NG=i("If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),rD=m(),R=r("div"),_(df.$$.fragment),PG=m(),Jj=r("p"),AG=i("Image feature to read image data from an image file."),FG=m(),Kj=r("p"),LG=i("Input: The Image feature accepts as input:"),SG=m(),ta=r("ul"),Zj=r("li"),mf=r("p"),OG=i("A "),Xj=r("code"),CG=i("str"),zG=i(": Absolute path to the image file (i.e. random access is allowed)."),VG=m(),ar=r("li"),hf=r("p"),UG=i("A "),Qj=r("code"),MG=i("dict"),RG=i(" with the keys:"),BG=m(),ff=r("ul"),e0=r("li"),GG=i("path: String with relative path of the image file to the archive file."),HG=m(),t0=r("li"),WG=i("bytes: Bytes of the image file."),YG=m(),a0=r("p"),JG=i("This is useful for archived files with sequential access."),KG=m(),s0=r("li"),uf=r("p"),ZG=i("An "),n0=r("code"),XG=i("np.ndarray"),QG=i(": NumPy array representing an image."),eH=m(),r0=r("li"),gf=r("p"),tH=i("A "),o0=r("code"),aH=i("PIL.Image.Image"),sH=i(": PIL image object."),nH=m(),_(zi.$$.fragment),rH=m(),Ss=r("div"),_(_f.$$.fragment),oH=m(),l0=r("p"),lH=i(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),iH=m(),Ye=r("ul"),i0=r("li"),pH=i("pa.string() - it must contain the \u201Cpath\u201D data"),cH=m(),p0=r("li"),dH=i("pa.struct({\u201Cbytes\u201D: pa.binary()})"),mH=m(),c0=r("li"),hH=i("pa.struct({\u201Cpath\u201D: pa.string()})"),fH=m(),d0=r("li"),uH=i("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),gH=m(),m0=r("li"),_H=i("pa.list(*) - it must contain the image array data"),bH=m(),Vi=r("div"),_(bf.$$.fragment),$H=m(),h0=r("p"),xH=i("Decode example image file into image data."),vH=m(),Ui=r("div"),_($f.$$.fragment),yH=m(),f0=r("p"),jH=i("Embed image files into the Arrow array."),wH=m(),Mi=r("div"),_(xf.$$.fragment),DH=m(),u0=r("p"),kH=i("Encode example into a format for Arrow."),EH=m(),Ri=r("div"),_(vf.$$.fragment),qH=m(),g0=r("p"),IH=i("If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),oD=m(),sr=r("h2"),Bi=r("a"),_0=r("span"),_(yf.$$.fragment),TH=m(),b0=r("span"),NH=i("MetricInfo"),lD=m(),se=r("div"),_(jf.$$.fragment),PH=m(),$0=r("p"),AH=i("Information about a metric."),FH=m(),h_=r("p"),x0=r("code"),LH=i("MetricInfo"),SH=i(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),OH=m(),v0=r("p"),CH=i("Note: Not all fields are known on construction and may be updated later."),zH=m(),Os=r("div"),_(wf.$$.fragment),VH=m(),Df=r("p"),UH=i("Create MetricInfo from the JSON file in "),y0=r("code"),MH=i("metric_info_dir"),RH=i("."),BH=m(),_(Gi.$$.fragment),GH=m(),Cs=r("div"),_(kf.$$.fragment),HH=m(),aa=r("p"),WH=i("Write "),j0=r("code"),YH=i("MetricInfo"),JH=i(" as JSON to "),w0=r("code"),KH=i("metric_info_dir"),ZH=i(`.
Also save the license separately in LICENCE.
If `),D0=r("code"),XH=i("pretty_print"),QH=i(" is True, the JSON will be pretty-printed with the indent level of 4."),eW=m(),_(Hi.$$.fragment),iD=m(),nr=r("h2"),Wi=r("a"),k0=r("span"),_(Ef.$$.fragment),tW=m(),E0=r("span"),aW=i("Metric"),pD=m(),zs=r("p"),sW=i("The base class "),q0=r("code"),nW=i("Metric"),rW=i(" implements a Metric backed by one or several "),f_=r("a"),oW=i("Dataset"),lW=i("."),cD=m(),K=r("div"),_(qf.$$.fragment),iW=m(),I0=r("p"),pW=i("A Metric is the base class and common API for all metrics."),cW=m(),_(Yi.$$.fragment),dW=m(),Vs=r("div"),_(If.$$.fragment),mW=m(),T0=r("p"),hW=i("Add one prediction and reference for the metric\u2019s stack."),fW=m(),_(Ji.$$.fragment),uW=m(),Us=r("div"),_(Tf.$$.fragment),gW=m(),N0=r("p"),_W=i("Add a batch of predictions and references for the metric\u2019s stack."),bW=m(),_(Ki.$$.fragment),$W=m(),xt=r("div"),_(Nf.$$.fragment),xW=m(),P0=r("p"),vW=i("Compute the metrics."),yW=m(),A0=r("p"),jW=i("Usage of positional arguments is not allowed to prevent mistakes."),wW=m(),_(Zi.$$.fragment),DW=m(),Xi=r("div"),_(Pf.$$.fragment),kW=m(),F0=r("p"),EW=i("Downloads and prepares dataset for reading."),dD=m(),rr=r("h2"),Qi=r("a"),L0=r("span"),_(Af.$$.fragment),qW=m(),S0=r("span"),IW=i("Filesystems"),mD=m(),C=r("div"),_(Ff.$$.fragment),TW=m(),ep=r("p"),O0=r("code"),NW=i("datasets.filesystems.S3FileSystem"),PW=i(" is a subclass of "),Lf=r("a"),C0=r("code"),AW=i("s3fs.S3FileSystem"),FW=i("."),LW=m(),sa=r("p"),SW=i("Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),z0=r("code"),OW=i("key="),CW=i(", "),V0=r("code"),zW=i("secret="),VW=i(") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are available, use "),U0=r("code"),UW=i("anon=True"),MW=i("."),RW=m(),M0=r("p"),BW=i("Examples:"),GW=m(),R0=r("p"),HW=i("Listing files from public S3 bucket."),WW=m(),_(tp.$$.fragment),YW=m(),or=r("p"),JW=i("Listing files from private S3 bucket using "),B0=r("code"),KW=i("aws_access_key_id"),ZW=i(" and "),G0=r("code"),XW=i("aws_secret_access_key"),QW=i("."),eY=m(),_(ap.$$.fragment),tY=m(),na=r("p"),aY=i("Using "),H0=r("code"),sY=i("S3Filesystem"),nY=i(" with "),W0=r("code"),rY=i("botocore.session.Session"),oY=i(" and custom "),Y0=r("code"),lY=i("aws_profile"),iY=i("."),pY=m(),_(sp.$$.fragment),cY=m(),lr=r("p"),dY=i("Loading dataset from S3 using "),J0=r("code"),mY=i("S3Filesystem"),hY=i(" and "),u_=r("a"),fY=i("load_from_disk()"),uY=i("."),gY=m(),_(np.$$.fragment),_Y=m(),ir=r("p"),bY=i("Saving dataset to S3 using "),K0=r("code"),$Y=i("S3Filesystem"),xY=i(" and "),g_=r("a"),vY=i("Dataset.save_to_disk()"),yY=i("."),jY=m(),_(rp.$$.fragment),hD=m(),pr=r("div"),_(Sf.$$.fragment),wY=m(),cr=r("p"),DY=i("preprocesses "),Z0=r("em"),kY=i("dataset_path"),EY=i(" and removes remote filesystem (e.g. removing "),X0=r("code"),qY=i("s3://"),IY=i(")"),fD=m(),dr=r("div"),_(Of.$$.fragment),TY=m(),Q0=r("p"),NY=i("Validates if filesystem has remote protocol."),uD=m(),mr=r("h2"),op=r("a"),ew=r("span"),_(Cf.$$.fragment),PY=m(),tw=r("span"),AY=i("Fingerprint"),gD=m(),hr=r("div"),_(zf.$$.fragment),FY=m(),aw=r("p"),LY=i("Hasher that accepts python objects as inputs."),this.h()},l(s){const j=Ese('[data-svelte="svelte-1phssyn"]',document.head);c=o(j,"META",{name:!0,content:!0}),j.forEach(a),g=h(s),f=o(s,"H1",{class:!0});var Vf=l(f);n=o(Vf,"A",{id:!0,class:!0,href:!0});var sw=l(n);u=o(sw,"SPAN",{});var nw=l(u);b(t.$$.fragment,nw),nw.forEach(a),sw.forEach(a),d=h(Vf),mn=o(Vf,"SPAN",{});var rw=l(mn);fa=p(rw,"Main classes"),rw.forEach(a),Vf.forEach(a),Fr=h(s),Oe=o(s,"H2",{class:!0});var Uf=l(Oe);be=o(Uf,"A",{id:!0,class:!0,href:!0});var ow=l(be);ne=o(ow,"SPAN",{});var lw=l(ne);b(ua.$$.fragment,lw),lw.forEach(a),ow.forEach(a),nu=h(Uf),Lr=o(Uf,"SPAN",{});var iw=l(Lr);Xk=p(iw,"DatasetInfo"),iw.forEach(a),Uf.forEach(a),q7=h(s),Q=o(s,"DIV",{class:!0});var _e=l(Q);b(zp.$$.fragment,_e),Qk=h(_e),$$=o(_e,"P",{});var pw=l($$);e4=p(pw,"Information about a dataset."),pw.forEach(a),t4=h(_e),ru=o(_e,"P",{});var __=l(ru);x$=o(__,"EM",{});var cw=l(x$);a4=p(cw,"DatasetInfo"),cw.forEach(a),s4=p(__,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),__.forEach(a),n4=h(_e),v$=o(_e,"P",{});var dw=l(v$);r4=p(dw,"Note: Not all fields are known on construction and may be updated later."),dw.forEach(a),o4=h(_e),$e=o(_e,"DIV",{class:!0});var Je=l($e);b(Vp.$$.fragment,Je),l4=h(Je),Up=o(Je,"P",{});var Mf=l(Up);i4=p(Mf,"Create DatasetInfo from the JSON file in "),y$=o(Mf,"EM",{});var mw=l(y$);p4=p(mw,"dataset_info_dir"),mw.forEach(a),c4=p(Mf,"."),Mf.forEach(a),d4=h(Je),j$=o(Je,"P",{});var hw=l(j$);m4=p(hw,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),hw.forEach(a),h4=h(Je),w$=o(Je,"P",{});var fw=l(w$);f4=p(fw,"This will overwrite all previous metadata."),fw.forEach(a),u4=h(Je),b(Sr.$$.fragment,Je),Je.forEach(a),g4=h(_e),ga=o(_e,"DIV",{class:!0});var fr=l(ga);b(Mp.$$.fragment,fr),_4=h(fr),hn=o(fr,"P",{});var ur=l(hn);b4=p(ur,"Write "),D$=o(ur,"EM",{});var uw=l(D$);$4=p(uw,"DatasetInfo"),uw.forEach(a),x4=p(ur," and license (if present) as JSON files to "),k$=o(ur,"EM",{});var gw=l(k$);v4=p(gw,"dataset_info_dir"),gw.forEach(a),y4=p(ur,"."),ur.forEach(a),j4=h(fr),b(Or.$$.fragment,fr),fr.forEach(a),_e.forEach(a),I7=h(s),fn=o(s,"H2",{class:!0});var Rf=l(fn);Cr=o(Rf,"A",{id:!0,class:!0,href:!0});var _w=l(Cr);E$=o(_w,"SPAN",{});var bw=l(E$);b(Rp.$$.fragment,bw),bw.forEach(a),_w.forEach(a),w4=h(Rf),q$=o(Rf,"SPAN",{});var $w=l(q$);D4=p($w,"Dataset"),$w.forEach(a),Rf.forEach(a),T7=h(s),zr=o(s,"P",{});var Bf=l(zr);k4=p(Bf,"The base class "),ou=o(Bf,"A",{href:!0});var xw=l(ou);E4=p(xw,"Dataset"),xw.forEach(a),q4=p(Bf," implements a Dataset backed by an Apache Arrow table."),Bf.forEach(a),N7=h(s),q=o(s,"DIV",{class:!0});var I=l(q);b(Bp.$$.fragment,I),I4=h(I),I$=o(I,"P",{});var vw=l(I$);T4=p(vw,"A Dataset backed by an Arrow table."),vw.forEach(a),N4=h(I),tt=o(I,"DIV",{class:!0});var ra=l(tt);b(Gp.$$.fragment,ra),P4=h(ra),T$=o(ra,"P",{});var yw=l(T$);A4=p(yw,"Add column to Dataset."),yw.forEach(a),F4=h(ra),N$=o(ra,"P",{});var jw=l(N$);P$=o(jw,"EM",{});var ww=l(P$);L4=p(ww,"New in version 1.7."),ww.forEach(a),jw.forEach(a),S4=h(ra),b(Vr.$$.fragment,ra),ra.forEach(a),O4=h(I),at=o(I,"DIV",{class:!0});var oa=l(at);b(Hp.$$.fragment,oa),C4=h(oa),A$=o(oa,"P",{});var Dw=l(A$);z4=p(Dw,"Add item to Dataset."),Dw.forEach(a),V4=h(oa),F$=o(oa,"P",{});var kw=l(F$);L$=o(kw,"EM",{});var Ew=l(L$);U4=p(Ew,"New in version 1.7."),Ew.forEach(a),kw.forEach(a),M4=h(oa),b(Ur.$$.fragment,oa),oa.forEach(a),R4=h(I),Mr=o(I,"DIV",{class:!0});var Gf=l(Mr);b(Wp.$$.fragment,Gf),B4=h(Gf),S$=o(Gf,"P",{});var qw=l(S$);G4=p(qw,"Instantiate a Dataset backed by an Arrow table at filename."),qw.forEach(a),Gf.forEach(a),H4=h(I),Rr=o(I,"DIV",{class:!0});var Hf=l(Rr);b(Yp.$$.fragment,Hf),W4=h(Hf),O$=o(Hf,"P",{});var Iw=l(O$);Y4=p(Iw,"Instantiate a Dataset backed by an Arrow buffer."),Iw.forEach(a),Hf.forEach(a),J4=h(I),xe=o(I,"DIV",{class:!0});var Ke=l(xe);b(Jp.$$.fragment,Ke),K4=h(Ke),At=o(Ke,"P",{});var la=l(At);Z4=p(la,"Convert "),C$=o(la,"CODE",{});var Tw=l(C$);X4=p(Tw,"pandas.DataFrame"),Tw.forEach(a),Q4=p(la," to a "),z$=o(la,"CODE",{});var Nw=l(z$);e3=p(Nw,"pyarrow.Table"),Nw.forEach(a),t3=p(la," to create a "),lu=o(la,"A",{href:!0});var Pw=l(lu);a3=p(Pw,"Dataset"),Pw.forEach(a),s3=p(la,"."),la.forEach(a),n3=h(Ke),Kp=o(Ke,"P",{});var Wf=l(Kp);r3=p(Wf,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),V$=o(Wf,"EM",{});var Aw=l(V$);o3=p(Aw,"object"),Aw.forEach(a),l3=p(Wf,", we need to guess the datatype by looking at the Python objects in this Series."),Wf.forEach(a),i3=h(Ke),Zp=o(Ke,"P",{});var Yf=l(Zp);p3=p(Yf,"Be aware that Series of the "),U$=o(Yf,"EM",{});var Fw=l(U$);c3=p(Fw,"object"),Fw.forEach(a),d3=p(Yf,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),Yf.forEach(a),m3=h(Ke),b(Br.$$.fragment,Ke),Ke.forEach(a),h3=h(I),Gr=o(I,"DIV",{class:!0});var Jf=l(Gr);b(Xp.$$.fragment,Jf),f3=h(Jf),Ft=o(Jf,"P",{});var ia=l(Ft);u3=p(ia,"Convert "),M$=o(ia,"CODE",{});var Lw=l(M$);g3=p(Lw,"dict"),Lw.forEach(a),_3=p(ia," to a "),R$=o(ia,"CODE",{});var Sw=l(R$);b3=p(Sw,"pyarrow.Table"),Sw.forEach(a),$3=p(ia," to create a "),iu=o(ia,"A",{href:!0});var Ow=l(iu);x3=p(Ow,"Dataset"),Ow.forEach(a),v3=p(ia,"."),ia.forEach(a),Jf.forEach(a),y3=h(I),_a=o(I,"DIV",{class:!0});var gr=l(_a);b(Qp.$$.fragment,gr),j3=h(gr),B$=o(gr,"P",{});var Cw=l(B$);w3=p(Cw,"Create a Dataset from a generator."),Cw.forEach(a),D3=h(gr),b(Hr.$$.fragment,gr),gr.forEach(a),k3=h(I),ba=o(I,"DIV",{class:!0});var _r=l(ba);b(ec.$$.fragment,_r),E3=h(_r),G$=o(_r,"P",{});var zw=l(G$);q3=p(zw,"The Apache Arrow table backing the dataset."),zw.forEach(a),I3=h(_r),b(Wr.$$.fragment,_r),_r.forEach(a),T3=h(I),$a=o(I,"DIV",{class:!0});var br=l($a);b(tc.$$.fragment,br),N3=h(br),H$=o(br,"P",{});var Vw=l(H$);P3=p(Vw,"The cache files containing the Apache Arrow table backing the dataset."),Vw.forEach(a),A3=h(br),b(Yr.$$.fragment,br),br.forEach(a),F3=h(I),xa=o(I,"DIV",{class:!0});var $r=l(xa);b(ac.$$.fragment,$r),L3=h($r),W$=o($r,"P",{});var Uw=l(W$);S3=p(Uw,"Number of columns in the dataset."),Uw.forEach(a),O3=h($r),b(Jr.$$.fragment,$r),$r.forEach(a),C3=h(I),va=o(I,"DIV",{class:!0});var xr=l(va);b(sc.$$.fragment,xr),z3=h(xr),nc=o(xr,"P",{});var Kf=l(nc);V3=p(Kf,"Number of rows in the dataset (same as "),Kr=o(Kf,"A",{href:!0});var Zf=l(Kr);U3=p(Zf,"Dataset."),Y$=o(Zf,"STRONG",{});var Mw=l(Y$);M3=p(Mw,"len"),Mw.forEach(a),R3=p(Zf,"()"),Zf.forEach(a),B3=p(Kf,")."),Kf.forEach(a),G3=h(xr),b(Zr.$$.fragment,xr),xr.forEach(a),H3=h(I),ya=o(I,"DIV",{class:!0});var vr=l(ya);b(rc.$$.fragment,vr),W3=h(vr),J$=o(vr,"P",{});var Rw=l(J$);Y3=p(Rw,"Names of the columns in the dataset."),Rw.forEach(a),J3=h(vr),b(Xr.$$.fragment,vr),vr.forEach(a),K3=h(I),ja=o(I,"DIV",{class:!0});var yr=l(ja);b(oc.$$.fragment,yr),Z3=h(yr),K$=o(yr,"P",{});var Bw=l(K$);X3=p(Bw,"Shape of the dataset (number of columns, number of rows)."),Bw.forEach(a),Q3=h(yr),b(Qr.$$.fragment,yr),yr.forEach(a),eE=h(I),st=o(I,"DIV",{class:!0});var pa=l(st);b(lc.$$.fragment,pa),tE=h(pa),Z$=o(pa,"P",{});var Gw=l(Z$);aE=p(Gw,"Return a list of the unique elements in a column."),Gw.forEach(a),sE=h(pa),X$=o(pa,"P",{});var Hw=l(X$);nE=p(Hw,"This is implemented in the low-level backend and as such, very fast."),Hw.forEach(a),rE=h(pa),b(eo.$$.fragment,pa),pa.forEach(a),oE=h(I),wa=o(I,"DIV",{class:!0});var jr=l(wa);b(ic.$$.fragment,jr),lE=h(jr),Q$=o(jr,"P",{});var Ww=l(Q$);iE=p(Ww,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),Ww.forEach(a),pE=h(jr),b(to.$$.fragment,jr),jr.forEach(a),cE=h(I),Da=o(I,"DIV",{class:!0});var wr=l(Da);b(pc.$$.fragment,wr),dE=h(wr),e2=o(wr,"P",{});var Yw=l(e2);mE=p(Yw,"Cast the dataset to a new set of features."),Yw.forEach(a),hE=h(wr),b(ao.$$.fragment,wr),wr.forEach(a),fE=h(I),ka=o(I,"DIV",{class:!0});var Dr=l(ka);b(cc.$$.fragment,Dr),uE=h(Dr),t2=o(Dr,"P",{});var Jw=l(t2);gE=p(Jw,"Cast column to feature for decoding."),Jw.forEach(a),_E=h(Dr),b(so.$$.fragment,Dr),Dr.forEach(a),bE=h(I),nt=o(I,"DIV",{class:!0});var ca=l(nt);b(dc.$$.fragment,ca),$E=h(ca),a2=o(ca,"P",{});var Kw=l(a2);xE=p(Kw,"Remove one or several column(s) in the dataset and the features associated to them."),Kw.forEach(a),vE=h(ca),un=o(ca,"P",{});var kr=l(un);yE=p(kr,"You can also remove a column using "),pu=o(kr,"A",{href:!0});var Zw=l(pu);jE=p(Zw,"Dataset.map()"),Zw.forEach(a),wE=p(kr," with "),s2=o(kr,"EM",{});var Xw=l(s2);DE=p(Xw,"remove_columns"),Xw.forEach(a),kE=p(kr,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),kr.forEach(a),EE=h(ca),b(no.$$.fragment,ca),ca.forEach(a),qE=h(I),Ea=o(I,"DIV",{class:!0});var Er=l(Ea);b(mc.$$.fragment,Er),IE=h(Er),n2=o(Er,"P",{});var Qw=l(n2);TE=p(Qw,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),Qw.forEach(a),NE=h(Er),b(ro.$$.fragment,Er),Er.forEach(a),PE=h(I),qa=o(I,"DIV",{class:!0});var qr=l(qa);b(hc.$$.fragment,qr),AE=h(qr),r2=o(qr,"P",{});var e7=l(r2);FE=p(e7,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.`),e7.forEach(a),LE=h(qr),b(oo.$$.fragment,qr),qr.forEach(a),SE=h(I),Ia=o(I,"DIV",{class:!0});var Ir=l(Ia);b(fc.$$.fragment,Ir),OE=h(Ir),uc=o(Ir,"P",{});var Xf=l(uc);CE=p(Xf,"Casts the given column as :obj:"),o2=o(Xf,"CODE",{});var t7=l(o2);zE=p(t7,"datasets.features.ClassLabel"),t7.forEach(a),VE=p(Xf," and updates the table."),Xf.forEach(a),UE=h(Ir),b(lo.$$.fragment,Ir),Ir.forEach(a),ME=h(I),Ta=o(I,"DIV",{class:!0});var Tr=l(Ta);b(gc.$$.fragment,Tr),RE=h(Tr),l2=o(Tr,"P",{});var a7=l(l2);BE=p(a7,"Number of rows in the dataset."),a7.forEach(a),GE=h(Tr),b(io.$$.fragment,Tr),Tr.forEach(a),HE=h(I),Na=o(I,"DIV",{class:!0});var Nr=l(Na);b(_c.$$.fragment,Nr),WE=h(Nr),i2=o(Nr,"P",{});var s7=l(i2);YE=p(s7,"Iterate through the examples."),s7.forEach(a),JE=h(Nr),bc=o(Nr,"P",{});var Qf=l(bc);KE=p(Qf,"If a formatting is set with "),cu=o(Qf,"A",{href:!0});var n7=l(cu);ZE=p(n7,"Dataset.set_format()"),n7.forEach(a),XE=p(Qf,` rows will be returned with the
selected format.`),Qf.forEach(a),Nr.forEach(a),QE=h(I),po=o(I,"DIV",{class:!0});var eu=l(po);b($c.$$.fragment,eu),e5=h(eu),gn=o(eu,"P",{});var Pr=l(gn);t5=p(Pr,"To be used in a "),p2=o(Pr,"CODE",{});var r7=l(p2);a5=p(r7,"with"),r7.forEach(a),s5=p(Pr," statement. Set "),c2=o(Pr,"CODE",{});var o7=l(c2);n5=p(o7,"__getitem__"),o7.forEach(a),r5=p(Pr," return format (type and columns)."),Pr.forEach(a),eu.forEach(a),o5=h(I),ve=o(I,"DIV",{class:!0});var Ze=l(ve);b(xc.$$.fragment,Ze),l5=h(Ze),Ce=o(Ze,"P",{});var Xe=l(Ce);i5=p(Xe,"Set "),d2=o(Xe,"STRONG",{});var l7=l(d2);p5=p(l7,"getitem"),l7.forEach(a),c5=p(Xe,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),m2=o(Xe,"CODE",{});var i7=l(m2);d5=p(i7,"type"),i7.forEach(a),m5=p(Xe," (for example \u201Cnumpy\u201D) is used to format batches when using "),h2=o(Xe,"STRONG",{});var p7=l(h2);h5=p(p7,"getitem"),p7.forEach(a),f5=p(Xe,`.
It\u2019s also possible to use custom transforms for formatting using `),du=o(Xe,"A",{href:!0});var c7=l(du);u5=p(c7,"datasets.Dataset.set_transform()"),c7.forEach(a),g5=p(Xe,"."),Xe.forEach(a),_5=h(Ze),ze=o(Ze,"P",{});var Qe=l(ze);b5=p(Qe,"It is possible to call "),f2=o(Qe,"CODE",{});var d7=l(f2);$5=p(d7,"map"),d7.forEach(a),x5=p(Qe," after calling "),u2=o(Qe,"CODE",{});var m7=l(u2);v5=p(m7,"set_format"),m7.forEach(a),y5=p(Qe,". Since "),g2=o(Qe,"CODE",{});var h7=l(g2);j5=p(h7,"map"),h7.forEach(a),w5=p(Qe,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),_2=o(Qe,"CODE",{});var f7=l(_2);D5=p(f7,"map"),f7.forEach(a),k5=p(Qe," on a dataset to add a new column, then this column will be formatted:"),Qe.forEach(a),E5=h(Ze),b2=o(Ze,"P",{});var u7=l(b2);q5=p(u7,"new formatted columns = (all columns - previously unformatted columns)"),u7.forEach(a),I5=h(Ze),b(co.$$.fragment,Ze),Ze.forEach(a),T5=h(I),Pa=o(I,"DIV",{class:!0});var Ar=l(Pa);b(vc.$$.fragment,Ar),N5=h(Ar),rt=o(Ar,"P",{});var vt=l(rt);P5=p(vt,"Set "),$2=o(vt,"STRONG",{});var g7=l($2);A5=p(g7,"getitem"),g7.forEach(a),F5=p(vt," return format using this transform. The transform is applied on-the-fly on batches when "),x2=o(vt,"STRONG",{});var _7=l(x2);L5=p(_7,"getitem"),_7.forEach(a),S5=p(vt,` is called.
As `),mu=o(vt,"A",{href:!0});var b7=l(mu);O5=p(b7,"datasets.Dataset.set_format()"),b7.forEach(a),C5=p(vt,", this can be reset using "),hu=o(vt,"A",{href:!0});var $7=l(hu);z5=p($7,"datasets.Dataset.reset_format()"),$7.forEach(a),vt.forEach(a),V5=h(Ar),b(mo.$$.fragment,Ar),Ar.forEach(a),U5=h(I),ot=o(I,"DIV",{class:!0});var da=l(ot);b(yc.$$.fragment,da),M5=h(da),jc=o(da,"P",{});var tu=l(jc);R5=p(tu,"Reset "),v2=o(tu,"STRONG",{});var x7=l(v2);B5=p(x7,"getitem"),x7.forEach(a),G5=p(tu," return format to python objects and all columns."),tu.forEach(a),H5=h(da),fu=o(da,"P",{});var b_=l(fu);W5=p(b_,"Same as "),y2=o(b_,"CODE",{});var v7=l(y2);Y5=p(v7,"self.set_format()"),v7.forEach(a),b_.forEach(a),J5=h(da),b(ho.$$.fragment,da),da.forEach(a),K5=h(I),ye=o(I,"DIV",{class:!0});var et=l(ye);b(wc.$$.fragment,et),Z5=h(et),Lt=o(et,"P",{});var ma=l(Lt);X5=p(ma,"Set "),j2=o(ma,"STRONG",{});var y7=l(j2);Q5=p(y7,"getitem"),y7.forEach(a),e6=p(ma,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),w2=o(ma,"CODE",{});var j7=l(w2);t6=p(j7,"type"),j7.forEach(a),a6=p(ma," (for example \u201Cnumpy\u201D) is used to format batches when using "),D2=o(ma,"STRONG",{});var w7=l(D2);s6=p(w7,"getitem"),w7.forEach(a),n6=p(ma,"."),ma.forEach(a),r6=h(et),Dc=o(et,"P",{});var au=l(Dc);o6=p(au,"It\u2019s also possible to use custom transforms for formatting using "),uu=o(au,"A",{href:!0});var D7=l(uu);l6=p(D7,"datasets.Dataset.with_transform()"),D7.forEach(a),i6=p(au,"."),au.forEach(a),p6=h(et),_n=o(et,"P",{});var $_=l(_n);c6=p($_,"Contrary to "),gu=o($_,"A",{href:!0});var KY=l(gu);d6=p(KY,"datasets.Dataset.set_format()"),KY.forEach(a),m6=p($_,", "),k2=o($_,"CODE",{});var ZY=l(k2);h6=p(ZY,"with_format"),ZY.forEach(a),f6=p($_," returns a new Dataset object."),$_.forEach(a),u6=h(et),b(fo.$$.fragment,et),et.forEach(a),g6=h(I),je=o(I,"DIV",{class:!0});var Ms=l(je);b(kc.$$.fragment,Ms),_6=h(Ms),bn=o(Ms,"P",{});var x_=l(bn);b6=p(x_,"Set "),E2=o(x_,"STRONG",{});var XY=l(E2);$6=p(XY,"getitem"),XY.forEach(a),x6=p(x_," return format using this transform. The transform is applied on-the-fly on batches when "),q2=o(x_,"STRONG",{});var QY=l(q2);v6=p(QY,"getitem"),QY.forEach(a),y6=p(x_," is called."),x_.forEach(a),j6=h(Ms),$n=o(Ms,"P",{});var v_=l($n);w6=p(v_,"As "),_u=o(v_,"A",{href:!0});var eJ=l(_u);D6=p(eJ,"datasets.Dataset.set_format()"),eJ.forEach(a),k6=p(v_,", this can be reset using "),bu=o(v_,"A",{href:!0});var tJ=l(bu);E6=p(tJ,"datasets.Dataset.reset_format()"),tJ.forEach(a),q6=p(v_,"."),v_.forEach(a),I6=h(Ms),xn=o(Ms,"P",{});var y_=l(xn);T6=p(y_,"Contrary to "),$u=o(y_,"A",{href:!0});var aJ=l($u);N6=p(aJ,"datasets.Dataset.set_transform()"),aJ.forEach(a),P6=p(y_,", "),I2=o(y_,"CODE",{});var sJ=l(I2);A6=p(sJ,"with_transform"),sJ.forEach(a),F6=p(y_," returns a new Dataset object."),y_.forEach(a),L6=h(Ms),b(uo.$$.fragment,Ms),Ms.forEach(a),S6=h(I),go=o(I,"DIV",{class:!0});var bD=l(go);b(Ec.$$.fragment,bD),O6=h(bD),T2=o(bD,"P",{});var nJ=l(T2);C6=p(nJ,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),nJ.forEach(a),bD.forEach(a),z6=h(I),lt=o(I,"DIV",{class:!0});var lp=l(lt);b(qc.$$.fragment,lp),V6=h(lp),N2=o(lp,"P",{});var rJ=l(N2);U6=p(rJ,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),rJ.forEach(a),M6=h(lp),P2=o(lp,"P",{});var oJ=l(P2);R6=p(oJ,"Be careful when running this command that no other process is currently using other cache files."),oJ.forEach(a),B6=h(lp),b(_o.$$.fragment,lp),lp.forEach(a),G6=h(I),we=o(I,"DIV",{class:!0});var Rs=l(we);b(Ic.$$.fragment,Rs),H6=h(Rs),A2=o(Rs,"P",{});var lJ=l(A2);W6=p(lJ,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),lJ.forEach(a),Y6=h(Rs),Tc=o(Rs,"P",{});var $D=l(Tc);J6=p($D,"You can specify whether the function should be batched or not with the "),F2=o($D,"CODE",{});var iJ=l(F2);K6=p(iJ,"batched"),iJ.forEach(a),Z6=p($D," parameter:"),$D.forEach(a),X6=h(Rs),vn=o(Rs,"UL",{});var j_=l(vn);L2=o(j_,"LI",{});var pJ=l(L2);Q6=p(pJ,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),pJ.forEach(a),e8=h(j_),S2=o(j_,"LI",{});var cJ=l(S2);t8=p(cJ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),cJ.forEach(a),a8=h(j_),de=o(j_,"LI",{});var yt=l(de);s8=p(yt,"If batched is True and batch_size is "),O2=o(yt,"CODE",{});var dJ=l(O2);n8=p(dJ,"n"),dJ.forEach(a),r8=p(yt," > 1, then the function takes a batch of "),C2=o(yt,"CODE",{});var mJ=l(C2);o8=p(mJ,"n"),mJ.forEach(a),l8=p(yt," examples as input and can return a batch with "),z2=o(yt,"CODE",{});var hJ=l(z2);i8=p(hJ,"n"),hJ.forEach(a),p8=p(yt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),V2=o(yt,"CODE",{});var fJ=l(V2);c8=p(fJ,"n"),fJ.forEach(a),d8=p(yt,` examples.
A batch is a dictionary, e.g. a batch of `),U2=o(yt,"CODE",{});var uJ=l(U2);m8=p(uJ,"n"),uJ.forEach(a),h8=p(yt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),yt.forEach(a),j_.forEach(a),f8=h(Rs),b(bo.$$.fragment,Rs),Rs.forEach(a),u8=h(I),Aa=o(I,"DIV",{class:!0});var w_=l(Aa);b(Nc.$$.fragment,w_),g8=h(w_),M2=o(w_,"P",{});var gJ=l(M2);_8=p(gJ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),gJ.forEach(a),b8=h(w_),b($o.$$.fragment,w_),w_.forEach(a),$8=h(I),Fa=o(I,"DIV",{class:!0});var D_=l(Fa);b(Pc.$$.fragment,D_),x8=h(D_),R2=o(D_,"P",{});var _J=l(R2);v8=p(_J,"Create a new dataset with rows selected following the list/array of indices."),_J.forEach(a),y8=h(D_),b(xo.$$.fragment,D_),D_.forEach(a),j8=h(I),it=o(I,"DIV",{class:!0});var ip=l(it);b(Ac.$$.fragment,ip),w8=h(ip),B2=o(ip,"P",{});var bJ=l(B2);D8=p(bJ,"Create a new dataset sorted according to a column."),bJ.forEach(a),k8=h(ip),G2=o(ip,"P",{});var $J=l(G2);E8=p($J,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),$J.forEach(a),q8=h(ip),b(vo.$$.fragment,ip),ip.forEach(a),I8=h(I),pt=o(I,"DIV",{class:!0});var pp=l(pt);b(Fc.$$.fragment,pp),T8=h(pp),H2=o(pp,"P",{});var xJ=l(H2);N8=p(xJ,"Create a new Dataset where the rows are shuffled."),xJ.forEach(a),P8=h(pp),W2=o(pp,"P",{});var vJ=l(W2);A8=p(vJ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),vJ.forEach(a),F8=h(pp),b(yo.$$.fragment,pp),pp.forEach(a),L8=h(I),ct=o(I,"DIV",{class:!0});var cp=l(ct);b(Lc.$$.fragment,cp),S8=h(cp),Y=o(cp,"P",{});var pe=l(Y);O8=p(pe,"Return a dictionary ("),Y2=o(pe,"CODE",{});var yJ=l(Y2);C8=p(yJ,"datasets.DatasetDict"),yJ.forEach(a),z8=p(pe,") with two random train and test subsets ("),J2=o(pe,"EM",{});var jJ=l(J2);V8=p(jJ,"train"),jJ.forEach(a),U8=p(pe," and "),K2=o(pe,"EM",{});var wJ=l(K2);M8=p(wJ,"test"),wJ.forEach(a),R8=h(pe),Z2=o(pe,"CODE",{});var DJ=l(Z2);B8=p(DJ,"Dataset"),DJ.forEach(a),G8=p(pe,` splits).
Splits are created from the dataset according to `),X2=o(pe,"EM",{});var kJ=l(X2);H8=p(kJ,"test_size"),kJ.forEach(a),W8=p(pe,", "),Q2=o(pe,"EM",{});var EJ=l(Q2);Y8=p(EJ,"train_size"),EJ.forEach(a),J8=p(pe," and "),ex=o(pe,"EM",{});var qJ=l(ex);K8=p(qJ,"shuffle"),qJ.forEach(a),Z8=p(pe,"."),pe.forEach(a),X8=h(cp),Sc=o(cp,"P",{});var xD=l(Sc);Q8=p(xD,"This method is similar to scikit-learn "),tx=o(xD,"EM",{});var IJ=l(tx);eq=p(IJ,"train_test_split"),IJ.forEach(a),tq=p(xD,"."),xD.forEach(a),aq=h(cp),b(jo.$$.fragment,cp),cp.forEach(a),sq=h(I),re=o(I,"DIV",{class:!0});var jt=l(re);b(Oc.$$.fragment,jt),nq=h(jt),yn=o(jt,"P",{});var k_=l(yn);rq=p(k_,"Return the "),ax=o(k_,"EM",{});var TJ=l(ax);oq=p(TJ,"index"),TJ.forEach(a),lq=p(k_,"-nth shard from dataset split into "),sx=o(k_,"EM",{});var NJ=l(sx);iq=p(NJ,"num_shards"),NJ.forEach(a),pq=p(k_," pieces."),k_.forEach(a),cq=h(jt),nx=o(jt,"P",{});var PJ=l(nx);dq=p(PJ,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),PJ.forEach(a),mq=h(jt),Cc=o(jt,"P",{});var vD=l(Cc);hq=p(vD,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),rx=o(vD,"EM",{});var AJ=l(rx);fq=p(AJ,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),AJ.forEach(a),uq=p(vD,` will return
a dataset with the same order as the original.`),vD.forEach(a),gq=h(jt),ox=o(jt,"P",{});var FJ=l(ox);_q=p(FJ,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),FJ.forEach(a),bq=h(jt),b(wo.$$.fragment,jt),jt.forEach(a),$q=h(I),La=o(I,"DIV",{class:!0});var E_=l(La);b(zc.$$.fragment,E_),xq=h(E_),lx=o(E_,"P",{});var LJ=l(lx);vq=p(LJ,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict(). The dataset will yield
dicts for both inputs and labels unless the dict would contain only a single key, in which case a raw
tf.Tensor is yielded instead.`),LJ.forEach(a),yq=h(E_),b(Do.$$.fragment,E_),E_.forEach(a),jq=h(I),dt=o(I,"DIV",{class:!0});var dp=l(dt);b(Vc.$$.fragment,dp),wq=h(dp),ix=o(dp,"P",{});var SJ=l(ix);Dq=p(SJ,`Pushes the dataset to the hub as a Parquet dataset.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),SJ.forEach(a),kq=h(dp),St=o(dp,"P",{});var mp=l(St);Eq=p(mp,"The resulting Parquet files are self-contained by default: if your dataset contains "),xu=o(mp,"A",{href:!0});var OJ=l(xu);qq=p(OJ,"Image"),OJ.forEach(a),Iq=p(mp," or "),vu=o(mp,"A",{href:!0});var CJ=l(vu);Tq=p(CJ,"Audio"),CJ.forEach(a),Nq=p(mp,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),px=o(mp,"EM",{});var zJ=l(px);Pq=p(zJ,"embed_external_files"),zJ.forEach(a),Aq=p(mp," to False."),mp.forEach(a),Fq=h(dp),b(ko.$$.fragment,dp),dp.forEach(a),Lq=h(I),Z=o(I,"DIV",{class:!0});var Le=l(Z);b(Uc.$$.fragment,Le),Sq=h(Le),jn=o(Le,"P",{});var q_=l(jn);Oq=p(q_,"Saves a dataset to a dataset directory, or in a filesystem using either "),yu=o(q_,"A",{href:!0});var VJ=l(yu);Cq=p(VJ,"S3FileSystem"),VJ.forEach(a),zq=p(q_,` or
any implementation of `),cx=o(q_,"CODE",{});var UJ=l(cx);Vq=p(UJ,"fsspec.spec.AbstractFileSystem"),UJ.forEach(a),Uq=p(q_,"."),q_.forEach(a),Mq=h(Le),wn=o(Le,"P",{});var I_=l(wn);Rq=p(I_,"For "),ju=o(I_,"A",{href:!0});var MJ=l(ju);Bq=p(MJ,"Image"),MJ.forEach(a),Gq=p(I_," and "),wu=o(I_,"A",{href:!0});var RJ=l(wu);Hq=p(RJ,"Audio"),RJ.forEach(a),Wq=p(I_," data:"),I_.forEach(a),Yq=h(Le),Mc=o(Le,"P",{});var yD=l(Mc);Jq=p(yD,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),dx=o(yD,"EM",{});var BJ=l(dx);Kq=p(BJ,"read()"),BJ.forEach(a),Zq=p(yD," those files first."),yD.forEach(a),Xq=h(Le),b(Eo.$$.fragment,Le),Qq=h(Le),b(qo.$$.fragment,Le),e9=h(Le),b(Io.$$.fragment,Le),Le.forEach(a),t9=h(I),Sa=o(I,"DIV",{class:!0});var T_=l(Sa);b(Rc.$$.fragment,T_),a9=h(T_),Ot=o(T_,"P",{});var hp=l(Ot);s9=p(hp,"Loads a dataset that was previously saved using "),mx=o(hp,"CODE",{});var GJ=l(mx);n9=p(GJ,"save_to_disk"),GJ.forEach(a),r9=p(hp,` from a dataset directory, or from a
filesystem using either `),Du=o(hp,"A",{href:!0});var HJ=l(Du);o9=p(HJ,"S3FileSystem"),HJ.forEach(a),l9=p(hp,` or any implementation of
`),hx=o(hp,"CODE",{});var WJ=l(hx);i9=p(WJ,"fsspec.spec.AbstractFileSystem"),WJ.forEach(a),p9=p(hp,"."),hp.forEach(a),c9=h(T_),b(To.$$.fragment,T_),T_.forEach(a),d9=h(I),No=o(I,"DIV",{class:!0});var jD=l(No);b(Bc.$$.fragment,jD),m9=h(jD),fx=o(jD,"P",{});var YJ=l(fx);h9=p(YJ,"Create and cache a new Dataset by flattening the indices mapping."),YJ.forEach(a),jD.forEach(a),f9=h(I),Oa=o(I,"DIV",{class:!0});var N_=l(Oa);b(Gc.$$.fragment,N_),u9=h(N_),ux=o(N_,"P",{});var JJ=l(ux);g9=p(JJ,"Exports the dataset to csv"),JJ.forEach(a),_9=h(N_),b(Po.$$.fragment,N_),N_.forEach(a),b9=h(I),Ca=o(I,"DIV",{class:!0});var P_=l(Ca);b(Hc.$$.fragment,P_),$9=h(P_),Wc=o(P_,"P",{});var wD=l(Wc);x9=p(wD,"Returns the dataset as a "),gx=o(wD,"CODE",{});var KJ=l(gx);v9=p(KJ,"pandas.DataFrame"),KJ.forEach(a),y9=p(wD,". Can also return a generator for large datasets."),wD.forEach(a),j9=h(P_),b(Ao.$$.fragment,P_),P_.forEach(a),w9=h(I),za=o(I,"DIV",{class:!0});var A_=l(za);b(Yc.$$.fragment,A_),D9=h(A_),_x=o(A_,"P",{});var ZJ=l(_x);k9=p(ZJ,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),ZJ.forEach(a),E9=h(A_),b(Fo.$$.fragment,A_),A_.forEach(a),q9=h(I),Va=o(I,"DIV",{class:!0});var F_=l(Va);b(Jc.$$.fragment,F_),I9=h(F_),bx=o(F_,"P",{});var XJ=l(bx);T9=p(XJ,"Export the dataset to JSON Lines or JSON."),XJ.forEach(a),N9=h(F_),b(Lo.$$.fragment,F_),F_.forEach(a),P9=h(I),Ua=o(I,"DIV",{class:!0});var L_=l(Ua);b(Kc.$$.fragment,L_),A9=h(L_),$x=o(L_,"P",{});var QJ=l($x);F9=p(QJ,"Exports the dataset to parquet"),QJ.forEach(a),L9=h(L_),b(So.$$.fragment,L_),L_.forEach(a),S9=h(I),mt=o(I,"DIV",{class:!0});var fp=l(mt);b(Zc.$$.fragment,fp),O9=h(fp),Dn=o(fp,"P",{});var S_=l(Dn);C9=p(S_,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),xx=o(S_,"CODE",{});var eK=l(xx);z9=p(eK,"device"),eK.forEach(a),V9=p(S_," if you want to run it on GPU ("),vx=o(S_,"CODE",{});var tK=l(vx);U9=p(tK,"device"),tK.forEach(a),M9=p(S_,` must be the GPU index).
You can find more information about Faiss here:`),S_.forEach(a),R9=h(fp),yx=o(fp,"UL",{});var aK=l(yx);ku=o(aK,"LI",{});var SY=l(ku);B9=p(SY,"For "),Xc=o(SY,"A",{href:!0,rel:!0});var sK=l(Xc);G9=p(sK,"string factory"),sK.forEach(a),SY.forEach(a),aK.forEach(a),H9=h(fp),b(Oo.$$.fragment,fp),fp.forEach(a),W9=h(I),Ma=o(I,"DIV",{class:!0});var O_=l(Ma);b(Qc.$$.fragment,O_),Y9=h(O_),Ct=o(O_,"P",{});var up=l(Ct);J9=p(up,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),jx=o(up,"EM",{});var nK=l(jx);K9=p(nK,"external_arrays"),nK.forEach(a),Z9=p(up,`.
You can specify `),wx=o(up,"EM",{});var rK=l(wx);X9=p(rK,"device"),rK.forEach(a),Q9=p(up," if you want to run it on GPU ("),Dx=o(up,"EM",{});var oK=l(Dx);eI=p(oK,"device"),oK.forEach(a),tI=p(up,` must be the GPU index).
You can find more information about Faiss here:`),up.forEach(a),aI=h(O_),kx=o(O_,"UL",{});var lK=l(kx);Eu=o(lK,"LI",{});var OY=l(Eu);sI=p(OY,"For "),ed=o(OY,"A",{href:!0,rel:!0});var iK=l(ed);nI=p(iK,"string factory"),iK.forEach(a),OY.forEach(a),lK.forEach(a),O_.forEach(a),rI=h(I),Co=o(I,"DIV",{class:!0});var DD=l(Co);b(td.$$.fragment,DD),oI=h(DD),Ex=o(DD,"P",{});var pK=l(Ex);lI=p(pK,"Save a FaissIndex on disk."),pK.forEach(a),DD.forEach(a),iI=h(I),Ra=o(I,"DIV",{class:!0});var C_=l(Ra);b(ad.$$.fragment,C_),pI=h(C_),qx=o(C_,"P",{});var cK=l(qx);cI=p(cK,"Load a FaissIndex from disk."),cK.forEach(a),dI=h(C_),sd=o(C_,"P",{});var kD=l(sd);mI=p(kD,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),Ix=o(kD,"EM",{});var dK=l(Ix);hI=p(dK,".get_index(index_name).faiss_index"),dK.forEach(a),fI=p(kD," to make it fit your needs."),kD.forEach(a),C_.forEach(a),uI=h(I),Ba=o(I,"DIV",{class:!0});var z_=l(Ba);b(nd.$$.fragment,z_),gI=h(z_),Tx=o(z_,"P",{});var mK=l(Tx);_I=p(mK,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),mK.forEach(a),bI=h(z_),b(zo.$$.fragment,z_),z_.forEach(a),$I=h(I),Ga=o(I,"DIV",{class:!0});var V_=l(Ga);b(rd.$$.fragment,V_),xI=h(V_),Nx=o(V_,"P",{});var hK=l(Nx);vI=p(hK,"Load an existing text index using ElasticSearch for fast retrieval."),hK.forEach(a),yI=h(V_),b(Vo.$$.fragment,V_),V_.forEach(a),jI=h(I),Uo=o(I,"DIV",{class:!0});var ED=l(Uo);b(od.$$.fragment,ED),wI=h(ED),Px=o(ED,"P",{});var fK=l(Px);DI=p(fK,"List the colindex_nameumns/identifiers of all the attached indexes."),fK.forEach(a),ED.forEach(a),kI=h(I),Mo=o(I,"DIV",{class:!0});var qD=l(Mo);b(ld.$$.fragment,qD),EI=h(qD),Ax=o(qD,"P",{});var uK=l(Ax);qI=p(uK,"List the index_name/identifiers of all the attached indexes."),uK.forEach(a),qD.forEach(a),II=h(I),Ro=o(I,"DIV",{class:!0});var ID=l(Ro);b(id.$$.fragment,ID),TI=h(ID),Fx=o(ID,"P",{});var gK=l(Fx);NI=p(gK,"Drop the index with the specified column."),gK.forEach(a),ID.forEach(a),PI=h(I),Bo=o(I,"DIV",{class:!0});var TD=l(Bo);b(pd.$$.fragment,TD),AI=h(TD),Lx=o(TD,"P",{});var _K=l(Lx);FI=p(_K,"Find the nearest examples indices in the dataset to the query."),_K.forEach(a),TD.forEach(a),LI=h(I),Go=o(I,"DIV",{class:!0});var ND=l(Go);b(cd.$$.fragment,ND),SI=h(ND),Sx=o(ND,"P",{});var bK=l(Sx);OI=p(bK,"Find the nearest examples indices in the dataset to the query."),bK.forEach(a),ND.forEach(a),CI=h(I),Ho=o(I,"DIV",{class:!0});var PD=l(Ho);b(dd.$$.fragment,PD),zI=h(PD),Ox=o(PD,"P",{});var $K=l(Ox);VI=p($K,"Find the nearest examples in the dataset to the query."),$K.forEach(a),PD.forEach(a),UI=h(I),Wo=o(I,"DIV",{class:!0});var AD=l(Wo);b(md.$$.fragment,AD),MI=h(AD),Cx=o(AD,"P",{});var xK=l(Cx);RI=p(xK,"Find the nearest examples in the dataset to the query."),xK.forEach(a),AD.forEach(a),BI=h(I),Yo=o(I,"DIV",{class:!0});var FD=l(Yo);b(hd.$$.fragment,FD),GI=h(FD),qu=o(FD,"P",{});var CY=l(qu);Iu=o(CY,"A",{href:!0});var vK=l(Iu);HI=p(vK,"datasets.DatasetInfo"),vK.forEach(a),WI=p(CY," object containing all the metadata in the dataset."),CY.forEach(a),FD.forEach(a),YI=h(I),Jo=o(I,"DIV",{class:!0});var LD=l(Jo);b(fd.$$.fragment,LD),JI=h(LD),Tu=o(LD,"P",{});var zY=l(Tu);Nu=o(zY,"A",{href:!0});var yK=l(Nu);KI=p(yK,"datasets.NamedSplit"),yK.forEach(a),ZI=p(zY," object corresponding to a named dataset split."),zY.forEach(a),LD.forEach(a),XI=h(I),Pu=o(I,"DIV",{class:!0});var jK=l(Pu);b(ud.$$.fragment,jK),jK.forEach(a),QI=h(I),Au=o(I,"DIV",{class:!0});var wK=l(Au);b(gd.$$.fragment,wK),wK.forEach(a),eT=h(I),Fu=o(I,"DIV",{class:!0});var DK=l(Fu);b(_d.$$.fragment,DK),DK.forEach(a),tT=h(I),Lu=o(I,"DIV",{class:!0});var kK=l(Lu);b(bd.$$.fragment,kK),kK.forEach(a),aT=h(I),Su=o(I,"DIV",{class:!0});var EK=l(Su);b($d.$$.fragment,EK),EK.forEach(a),sT=h(I),Ou=o(I,"DIV",{class:!0});var qK=l(Ou);b(xd.$$.fragment,qK),qK.forEach(a),nT=h(I),Cu=o(I,"DIV",{class:!0});var IK=l(Cu);b(vd.$$.fragment,IK),IK.forEach(a),rT=h(I),zu=o(I,"DIV",{class:!0});var TK=l(zu);b(yd.$$.fragment,TK),TK.forEach(a),oT=h(I),Vu=o(I,"DIV",{class:!0});var NK=l(Vu);b(jd.$$.fragment,NK),NK.forEach(a),lT=h(I),Uu=o(I,"DIV",{class:!0});var PK=l(Uu);b(wd.$$.fragment,PK),PK.forEach(a),iT=h(I),Mu=o(I,"DIV",{class:!0});var AK=l(Mu);b(Dd.$$.fragment,AK),AK.forEach(a),pT=h(I),Ru=o(I,"DIV",{class:!0});var FK=l(Ru);b(kd.$$.fragment,FK),FK.forEach(a),cT=h(I),Bu=o(I,"DIV",{class:!0});var LK=l(Bu);b(Ed.$$.fragment,LK),LK.forEach(a),dT=h(I),Ha=o(I,"DIV",{class:!0});var U_=l(Ha);b(qd.$$.fragment,U_),mT=h(U_),zx=o(U_,"P",{});var SK=l(zx);hT=p(SK,"Create Dataset from CSV file(s)."),SK.forEach(a),fT=h(U_),b(Ko.$$.fragment,U_),U_.forEach(a),uT=h(I),Wa=o(I,"DIV",{class:!0});var M_=l(Wa);b(Id.$$.fragment,M_),gT=h(M_),Vx=o(M_,"P",{});var OK=l(Vx);_T=p(OK,"Create Dataset from JSON or JSON Lines file(s)."),OK.forEach(a),bT=h(M_),b(Zo.$$.fragment,M_),M_.forEach(a),$T=h(I),Ya=o(I,"DIV",{class:!0});var R_=l(Ya);b(Td.$$.fragment,R_),xT=h(R_),Ux=o(R_,"P",{});var CK=l(Ux);vT=p(CK,"Create Dataset from Parquet file(s)."),CK.forEach(a),yT=h(R_),b(Xo.$$.fragment,R_),R_.forEach(a),jT=h(I),Ja=o(I,"DIV",{class:!0});var B_=l(Ja);b(Nd.$$.fragment,B_),wT=h(B_),Mx=o(B_,"P",{});var zK=l(Mx);DT=p(zK,"Create Dataset from text file(s)."),zK.forEach(a),kT=h(B_),b(Qo.$$.fragment,B_),B_.forEach(a),ET=h(I),Ka=o(I,"DIV",{class:!0});var G_=l(Ka);b(Pd.$$.fragment,G_),qT=h(G_),kn=o(G_,"P",{});var H_=l(kn);IT=p(H_,"Prepare a dataset for the given task by casting the dataset\u2019s "),Gu=o(H_,"A",{href:!0});var VK=l(Gu);TT=p(VK,"Features"),VK.forEach(a),NT=p(H_," to standardized column names and types as detailed in "),Hu=o(H_,"A",{href:!0});var UK=l(Hu);PT=p(UK,"datasets.tasks"),UK.forEach(a),AT=p(H_,"."),H_.forEach(a),FT=h(G_),En=o(G_,"P",{});var W_=l(En);LT=p(W_,"Casts "),Rx=o(W_,"CODE",{});var MK=l(Rx);ST=p(MK,"datasets.DatasetInfo.features"),MK.forEach(a),OT=p(W_," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Bx=o(W_,"CODE",{});var RK=l(Bx);CT=p(RK,"datasets.DatasetInfo.task_templates"),RK.forEach(a),zT=p(W_," after casting."),W_.forEach(a),G_.forEach(a),VT=h(I),Za=o(I,"DIV",{class:!0});var Y_=l(Za);b(Ad.$$.fragment,Y_),UT=h(Y_),Fd=o(Y_,"P",{});var SD=l(Fd);MT=p(SD,"Align the dataset\u2019s label ID and label name mapping to match an input "),Gx=o(SD,"CODE",{});var BK=l(Gx);RT=p(BK,"label2id"),BK.forEach(a),BT=p(SD,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),SD.forEach(a),GT=h(Y_),b(el.$$.fragment,Y_),Y_.forEach(a),I.forEach(a),P7=h(s),zt=o(s,"DIV",{class:!0});var J_=l(zt);b(Ld.$$.fragment,J_),HT=h(J_),qn=o(J_,"P",{});var K_=l(qn);WT=p(K_,"Converts a list of "),Wu=o(K_,"A",{href:!0});var GK=l(Wu);YT=p(GK,"Dataset"),GK.forEach(a),JT=p(K_," with the same schema into a single "),Yu=o(K_,"A",{href:!0});var HK=l(Yu);KT=p(HK,"Dataset"),HK.forEach(a),ZT=p(K_,"."),K_.forEach(a),XT=h(J_),b(tl.$$.fragment,J_),J_.forEach(a),A7=h(s),ee=o(s,"DIV",{class:!0});var wt=l(ee);b(Sd.$$.fragment,wt),QT=h(wt),Hx=o(wt,"P",{});var WK=l(Hx);eN=p(WK,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),WK.forEach(a),tN=h(wt),In=o(wt,"P",{});var Z_=l(In);aN=p(Z_,"You can use this function on a list of "),Ju=o(Z_,"A",{href:!0});var YK=l(Ju);sN=p(YK,"Dataset"),YK.forEach(a),nN=p(Z_," objects, or on a list of "),Ku=o(Z_,"A",{href:!0});var JK=l(Ku);rN=p(JK,"IterableDataset"),JK.forEach(a),oN=p(Z_," objects."),Z_.forEach(a),lN=h(wt),Ve=o(wt,"P",{});var Bs=l(Ve);iN=p(Bs,"If "),Wx=o(Bs,"CODE",{});var KK=l(Wx);pN=p(KK,"probabilities"),KK.forEach(a),cN=p(Bs," is "),Yx=o(Bs,"CODE",{});var ZK=l(Yx);dN=p(ZK,"None"),ZK.forEach(a),mN=p(Bs,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),Jx=o(Bs,"CODE",{});var XK=l(Jx);hN=p(XK,"probabilities"),XK.forEach(a),fN=p(Bs," is not "),Kx=o(Bs,"CODE",{});var QK=l(Kx);uN=p(QK,"None"),QK.forEach(a),gN=p(Bs,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Bs.forEach(a),_N=h(wt),Tn=o(wt,"P",{});var X_=l(Tn);bN=p(X_,"The resulting dataset ends when one of the source datasets runs out of examples except when "),Zx=o(X_,"CODE",{});var eZ=l(Zx);$N=p(eZ,"oversampling"),eZ.forEach(a),xN=p(X_," is "),Xx=o(X_,"CODE",{});var tZ=l(Xx);vN=p(tZ,"True"),tZ.forEach(a),yN=p(X_,`,
in which case, the resulting dataset ends when all datasets have ran out of examples at least one time.`),X_.forEach(a),jN=h(wt),b(al.$$.fragment,wt),wt.forEach(a),F7=h(s),me=o(s,"DIV",{class:!0});var Gs=l(me);b(Od.$$.fragment,Gs),wN=h(Gs),Qx=o(Gs,"P",{});var aZ=l(Qx);DN=p(aZ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),aZ.forEach(a),kN=h(Gs),e1=o(Gs,"P",{});var sZ=l(e1);EN=p(sZ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),sZ.forEach(a),qN=h(Gs),t1=o(Gs,"P",{});var nZ=l(t1);IN=p(nZ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),nZ.forEach(a),TN=h(Gs),Ue=o(Gs,"UL",{});var Hs=l(Ue);a1=o(Hs,"LI",{});var rZ=l(a1);NN=p(rZ,"cache files are always recreated"),rZ.forEach(a),PN=h(Hs),s1=o(Hs,"LI",{});var oZ=l(s1);AN=p(oZ,"cache files are written to a temporary directory that is deleted when session closes"),oZ.forEach(a),FN=h(Hs),n1=o(Hs,"LI",{});var lZ=l(n1);LN=p(lZ,"cache files are named using a random hash instead of the dataset fingerprint"),lZ.forEach(a),SN=h(Hs),Cd=o(Hs,"LI",{});var OD=l(Cd);ON=p(OD,"use "),Zu=o(OD,"A",{href:!0});var iZ=l(Zu);CN=p(iZ,"datasets.Dataset.save_to_disk()"),iZ.forEach(a),zN=p(OD," to save a transformed dataset or it will be deleted when session closes"),OD.forEach(a),VN=h(Hs),Vt=o(Hs,"LI",{});var gp=l(Vt);UN=p(gp,"caching doesn\u2019t affect "),Xu=o(gp,"A",{href:!0});var pZ=l(Xu);MN=p(pZ,"datasets.load_dataset()"),pZ.forEach(a),RN=p(gp,`. If you want to regenerate a dataset from scratch you should use
the `),r1=o(gp,"CODE",{});var cZ=l(r1);BN=p(cZ,"download_mode"),cZ.forEach(a),GN=p(gp," parameter in "),Qu=o(gp,"A",{href:!0});var dZ=l(Qu);HN=p(dZ,"datasets.load_dataset()"),dZ.forEach(a),WN=p(gp,"."),gp.forEach(a),Hs.forEach(a),Gs.forEach(a),L7=h(s),he=o(s,"DIV",{class:!0});var Ws=l(he);b(zd.$$.fragment,Ws),YN=h(Ws),o1=o(Ws,"P",{});var mZ=l(o1);JN=p(mZ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),mZ.forEach(a),KN=h(Ws),l1=o(Ws,"P",{});var hZ=l(l1);ZN=p(hZ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),hZ.forEach(a),XN=h(Ws),i1=o(Ws,"P",{});var fZ=l(i1);QN=p(fZ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),fZ.forEach(a),eP=h(Ws),Me=o(Ws,"UL",{});var Ys=l(Me);p1=o(Ys,"LI",{});var uZ=l(p1);tP=p(uZ,"cache files are always recreated"),uZ.forEach(a),aP=h(Ys),c1=o(Ys,"LI",{});var gZ=l(c1);sP=p(gZ,"cache files are written to a temporary directory that is deleted when session closes"),gZ.forEach(a),nP=h(Ys),d1=o(Ys,"LI",{});var _Z=l(d1);rP=p(_Z,"cache files are named using a random hash instead of the dataset fingerprint"),_Z.forEach(a),oP=h(Ys),Vd=o(Ys,"LI",{});var CD=l(Vd);lP=p(CD,"use "),eg=o(CD,"A",{href:!0});var bZ=l(eg);iP=p(bZ,"datasets.Dataset.save_to_disk()"),bZ.forEach(a),pP=p(CD," to save a transformed dataset or it will be deleted when session closes"),CD.forEach(a),cP=h(Ys),Ut=o(Ys,"LI",{});var _p=l(Ut);dP=p(_p,"caching doesn\u2019t affect "),tg=o(_p,"A",{href:!0});var $Z=l(tg);mP=p($Z,"datasets.load_dataset()"),$Z.forEach(a),hP=p(_p,`. If you want to regenerate a dataset from scratch you should use
the `),m1=o(_p,"CODE",{});var xZ=l(m1);fP=p(xZ,"download_mode"),xZ.forEach(a),uP=p(_p," parameter in "),ag=o(_p,"A",{href:!0});var vZ=l(ag);gP=p(vZ,"datasets.load_dataset()"),vZ.forEach(a),_P=p(_p,"."),_p.forEach(a),Ys.forEach(a),Ws.forEach(a),S7=h(s),fe=o(s,"DIV",{class:!0});var Js=l(fe);b(Ud.$$.fragment,Js),bP=h(Js),h1=o(Js,"P",{});var yZ=l(h1);$P=p(yZ,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),yZ.forEach(a),xP=h(Js),f1=o(Js,"P",{});var jZ=l(f1);vP=p(jZ,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),jZ.forEach(a),yP=h(Js),u1=o(Js,"P",{});var wZ=l(u1);jP=p(wZ,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),wZ.forEach(a),wP=h(Js),Re=o(Js,"UL",{});var Ks=l(Re);g1=o(Ks,"LI",{});var DZ=l(g1);DP=p(DZ,"cache files are always recreated"),DZ.forEach(a),kP=h(Ks),_1=o(Ks,"LI",{});var kZ=l(_1);EP=p(kZ,"cache files are written to a temporary directory that is deleted when session closes"),kZ.forEach(a),qP=h(Ks),b1=o(Ks,"LI",{});var EZ=l(b1);IP=p(EZ,"cache files are named using a random hash instead of the dataset fingerprint"),EZ.forEach(a),TP=h(Ks),Md=o(Ks,"LI",{});var zD=l(Md);NP=p(zD,"use "),sg=o(zD,"A",{href:!0});var qZ=l(sg);PP=p(qZ,"datasets.Dataset.save_to_disk()"),qZ.forEach(a),AP=p(zD," to save a transformed dataset or it will be deleted when session closes"),zD.forEach(a),FP=h(Ks),Mt=o(Ks,"LI",{});var bp=l(Mt);LP=p(bp,"caching doesn\u2019t affect "),ng=o(bp,"A",{href:!0});var IZ=l(ng);SP=p(IZ,"datasets.load_dataset()"),IZ.forEach(a),OP=p(bp,`. If you want to regenerate a dataset from scratch you should use
the `),$1=o(bp,"CODE",{});var TZ=l($1);CP=p(TZ,"download_mode"),TZ.forEach(a),zP=p(bp," parameter in "),rg=o(bp,"A",{href:!0});var NZ=l(rg);VP=p(NZ,"datasets.load_dataset()"),NZ.forEach(a),UP=p(bp,"."),bp.forEach(a),Ks.forEach(a),Js.forEach(a),O7=h(s),Nn=o(s,"H2",{class:!0});var VD=l(Nn);sl=o(VD,"A",{id:!0,class:!0,href:!0});var PZ=l(sl);x1=o(PZ,"SPAN",{});var AZ=l(x1);b(Rd.$$.fragment,AZ),AZ.forEach(a),PZ.forEach(a),MP=h(VD),v1=o(VD,"SPAN",{});var FZ=l(v1);RP=p(FZ,"DatasetDict"),FZ.forEach(a),VD.forEach(a),C7=h(s),nl=o(s,"P",{});var UD=l(nl);BP=p(UD,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),y1=o(UD,"CODE",{});var LZ=l(y1);GP=p(LZ,"Dataset"),LZ.forEach(a),HP=p(UD,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),UD.forEach(a),z7=h(s),A=o(s,"DIV",{class:!0});var F=l(A);b(Bd.$$.fragment,F),WP=h(F),j1=o(F,"P",{});var SZ=l(j1);YP=p(SZ,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),SZ.forEach(a),JP=h(F),Xa=o(F,"DIV",{class:!0});var Q_=l(Xa);b(Gd.$$.fragment,Q_),KP=h(Q_),w1=o(Q_,"P",{});var OZ=l(w1);ZP=p(OZ,"The Apache Arrow tables backing each split."),OZ.forEach(a),XP=h(Q_),b(rl.$$.fragment,Q_),Q_.forEach(a),QP=h(F),Qa=o(F,"DIV",{class:!0});var eb=l(Qa);b(Hd.$$.fragment,eb),eA=h(eb),D1=o(eb,"P",{});var CZ=l(D1);tA=p(CZ,"The cache files containing the Apache Arrow table backing each split."),CZ.forEach(a),aA=h(eb),b(ol.$$.fragment,eb),eb.forEach(a),sA=h(F),es=o(F,"DIV",{class:!0});var tb=l(es);b(Wd.$$.fragment,tb),nA=h(tb),k1=o(tb,"P",{});var zZ=l(k1);rA=p(zZ,"Number of columns in each split of the dataset."),zZ.forEach(a),oA=h(tb),b(ll.$$.fragment,tb),tb.forEach(a),lA=h(F),ts=o(F,"DIV",{class:!0});var ab=l(ts);b(Yd.$$.fragment,ab),iA=h(ab),Jd=o(ab,"P",{});var MD=l(Jd);pA=p(MD,"Number of rows in each split of the dataset (same as "),il=o(MD,"A",{href:!0});var RD=l(il);cA=p(RD,"datasets.Dataset."),E1=o(RD,"STRONG",{});var VZ=l(E1);dA=p(VZ,"len"),VZ.forEach(a),mA=p(RD,"()"),RD.forEach(a),hA=p(MD,")."),MD.forEach(a),fA=h(ab),b(pl.$$.fragment,ab),ab.forEach(a),uA=h(F),as=o(F,"DIV",{class:!0});var sb=l(as);b(Kd.$$.fragment,sb),gA=h(sb),q1=o(sb,"P",{});var UZ=l(q1);_A=p(UZ,"Names of the columns in each split of the dataset."),UZ.forEach(a),bA=h(sb),b(cl.$$.fragment,sb),sb.forEach(a),$A=h(F),ss=o(F,"DIV",{class:!0});var nb=l(ss);b(Zd.$$.fragment,nb),xA=h(nb),I1=o(nb,"P",{});var MZ=l(I1);vA=p(MZ,"Shape of each split of the dataset (number of columns, number of rows)."),MZ.forEach(a),yA=h(nb),b(dl.$$.fragment,nb),nb.forEach(a),jA=h(F),ht=o(F,"DIV",{class:!0});var $p=l(ht);b(Xd.$$.fragment,$p),wA=h($p),T1=o($p,"P",{});var RZ=l(T1);DA=p(RZ,"Return a list of the unique elements in a column for each split."),RZ.forEach(a),kA=h($p),N1=o($p,"P",{});var BZ=l(N1);EA=p(BZ,"This is implemented in the low-level backend and as such, very fast."),BZ.forEach(a),qA=h($p),b(ml.$$.fragment,$p),$p.forEach(a),IA=h(F),ns=o(F,"DIV",{class:!0});var rb=l(ns);b(Qd.$$.fragment,rb),TA=h(rb),P1=o(rb,"P",{});var GZ=l(P1);NA=p(GZ,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be careful when running this command that no other process is currently using other cache files.`),GZ.forEach(a),PA=h(rb),b(hl.$$.fragment,rb),rb.forEach(a),AA=h(F),rs=o(F,"DIV",{class:!0});var ob=l(rs);b(em.$$.fragment,ob),FA=h(ob),A1=o(ob,"P",{});var HZ=l(A1);LA=p(HZ,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),HZ.forEach(a),SA=h(ob),b(fl.$$.fragment,ob),ob.forEach(a),OA=h(F),os=o(F,"DIV",{class:!0});var lb=l(os);b(tm.$$.fragment,lb),CA=h(lb),F1=o(lb,"P",{});var WZ=l(F1);zA=p(WZ,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),WZ.forEach(a),VA=h(lb),b(ul.$$.fragment,lb),lb.forEach(a),UA=h(F),ft=o(F,"DIV",{class:!0});var xp=l(ft);b(am.$$.fragment,xp),MA=h(xp),L1=o(xp,"P",{});var YZ=l(L1);RA=p(YZ,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),YZ.forEach(a),BA=h(xp),S1=o(xp,"P",{});var JZ=l(S1);GA=p(JZ,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),JZ.forEach(a),HA=h(xp),b(gl.$$.fragment,xp),xp.forEach(a),WA=h(F),De=o(F,"DIV",{class:!0});var Zs=l(De);b(sm.$$.fragment,Zs),YA=h(Zs),O1=o(Zs,"P",{});var KZ=l(O1);JA=p(KZ,"Create a new Dataset where the rows are shuffled."),KZ.forEach(a),KA=h(Zs),C1=o(Zs,"P",{});var ZZ=l(C1);ZA=p(ZZ,"The transformation is applied to all the datasets of the dataset dictionary."),ZZ.forEach(a),XA=h(Zs),z1=o(Zs,"P",{});var XZ=l(z1);QA=p(XZ,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),XZ.forEach(a),eF=h(Zs),b(_l.$$.fragment,Zs),Zs.forEach(a),tF=h(F),ke=o(F,"DIV",{class:!0});var Xs=l(ke);b(nm.$$.fragment,Xs),aF=h(Xs),rm=o(Xs,"P",{});var BD=l(rm);sF=p(BD,"Set "),V1=o(BD,"CODE",{});var QZ=l(V1);nF=p(QZ,"__getitem__"),QZ.forEach(a),rF=p(BD,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),BD.forEach(a),oF=h(Xs),Be=o(Xs,"P",{});var Qs=l(Be);lF=p(Qs,"It is possible to call "),U1=o(Qs,"CODE",{});var eX=l(U1);iF=p(eX,"map"),eX.forEach(a),pF=p(Qs," after calling "),M1=o(Qs,"CODE",{});var tX=l(M1);cF=p(tX,"set_format"),tX.forEach(a),dF=p(Qs,". Since "),R1=o(Qs,"CODE",{});var aX=l(R1);mF=p(aX,"map"),aX.forEach(a),hF=p(Qs,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),B1=o(Qs,"CODE",{});var sX=l(B1);fF=p(sX,"map"),sX.forEach(a),uF=p(Qs," on a dataset to add a new column, then this column will be formatted:"),Qs.forEach(a),gF=h(Xs),G1=o(Xs,"P",{});var nX=l(G1);_F=p(nX,"new formatted columns = (all columns - previously unformatted columns)"),nX.forEach(a),bF=h(Xs),b(bl.$$.fragment,Xs),Xs.forEach(a),$F=h(F),ut=o(F,"DIV",{class:!0});var vp=l(ut);b(om.$$.fragment,vp),xF=h(vp),lm=o(vp,"P",{});var GD=l(lm);vF=p(GD,"Reset "),H1=o(GD,"CODE",{});var rX=l(H1);yF=p(rX,"__getitem__"),rX.forEach(a),jF=p(GD,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),GD.forEach(a),wF=h(vp),og=o(vp,"P",{});var VY=l(og);DF=p(VY,"Same as "),W1=o(VY,"CODE",{});var oX=l(W1);kF=p(oX,"self.set_format()"),oX.forEach(a),VY.forEach(a),EF=h(vp),b($l.$$.fragment,vp),vp.forEach(a),qF=h(F),xl=o(F,"DIV",{class:!0});var HD=l(xl);b(im.$$.fragment,HD),IF=h(HD),Pn=o(HD,"P",{});var ib=l(Pn);TF=p(ib,"To be used in a "),Y1=o(ib,"EM",{});var lX=l(Y1);NF=p(lX,"with"),lX.forEach(a),PF=p(ib," statement. Set "),J1=o(ib,"CODE",{});var iX=l(J1);AF=p(iX,"__getitem__"),iX.forEach(a),FF=p(ib,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),ib.forEach(a),HD.forEach(a),LF=h(F),Ee=o(F,"DIV",{class:!0});var en=l(Ee);b(pm.$$.fragment,en),SF=h(en),Rt=o(en,"P",{});var yp=l(Rt);OF=p(yp,"Set "),K1=o(yp,"CODE",{});var pX=l(K1);CF=p(pX,"__getitem__"),pX.forEach(a),zF=p(yp,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),Z1=o(yp,"CODE",{});var cX=l(Z1);VF=p(cX,"type"),cX.forEach(a),UF=p(yp," (for example \u201Cnumpy\u201D) is used to format batches when using "),X1=o(yp,"CODE",{});var dX=l(X1);MF=p(dX,"__getitem__"),dX.forEach(a),RF=p(yp,`.
The format is set for every dataset in the dataset dictionary`),yp.forEach(a),BF=h(en),cm=o(en,"P",{});var WD=l(cm);GF=p(WD,"It\u2019s also possible to use custom transforms for formatting using "),lg=o(WD,"A",{href:!0});var mX=l(lg);HF=p(mX,"datasets.Dataset.with_transform()"),mX.forEach(a),WF=p(WD,"."),WD.forEach(a),YF=h(en),An=o(en,"P",{});var pb=l(An);JF=p(pb,"Contrary to "),ig=o(pb,"A",{href:!0});var hX=l(ig);KF=p(hX,"datasets.DatasetDict.set_format()"),hX.forEach(a),ZF=p(pb,", "),Q1=o(pb,"CODE",{});var fX=l(Q1);XF=p(fX,"with_format"),fX.forEach(a),QF=p(pb," returns a new DatasetDict object with new Dataset objects."),pb.forEach(a),eL=h(en),b(vl.$$.fragment,en),en.forEach(a),tL=h(F),qe=o(F,"DIV",{class:!0});var tn=l(qe);b(dm.$$.fragment,tn),aL=h(tn),Fn=o(tn,"P",{});var cb=l(Fn);sL=p(cb,"Set "),ev=o(cb,"CODE",{});var uX=l(ev);nL=p(uX,"__getitem__"),uX.forEach(a),rL=p(cb," return format using this transform. The transform is applied on-the-fly on batches when "),tv=o(cb,"CODE",{});var gX=l(tv);oL=p(gX,"__getitem__"),gX.forEach(a),lL=p(cb,` is called.
The transform is set for every dataset in the dataset dictionary`),cb.forEach(a),iL=h(tn),Ln=o(tn,"P",{});var db=l(Ln);pL=p(db,"As "),pg=o(db,"A",{href:!0});var _X=l(pg);cL=p(_X,"datasets.Dataset.set_format()"),_X.forEach(a),dL=p(db,", this can be reset using "),cg=o(db,"A",{href:!0});var bX=l(cg);mL=p(bX,"datasets.Dataset.reset_format()"),bX.forEach(a),hL=p(db,"."),db.forEach(a),fL=h(tn),Sn=o(tn,"P",{});var mb=l(Sn);uL=p(mb,"Contrary to "),av=o(mb,"CODE",{});var $X=l(av);gL=p($X,"datasets.DatasetDict.set_transform()"),$X.forEach(a),_L=p(mb,", "),sv=o(mb,"CODE",{});var xX=l(sv);bL=p(xX,"with_transform"),xX.forEach(a),$L=p(mb," returns a new DatasetDict object with new Dataset objects."),mb.forEach(a),xL=h(tn),b(yl.$$.fragment,tn),tn.forEach(a),vL=h(F),ls=o(F,"DIV",{class:!0});var hb=l(ls);b(mm.$$.fragment,hb),yL=h(hb),nv=o(hb,"P",{});var vX=l(nv);jL=p(vX,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),vX.forEach(a),wL=h(hb),b(jl.$$.fragment,hb),hb.forEach(a),DL=h(F),gt=o(F,"DIV",{class:!0});var jp=l(gt);b(hm.$$.fragment,jp),kL=h(jp),rv=o(jp,"P",{});var yX=l(rv);EL=p(yX,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),yX.forEach(a),qL=h(jp),Bt=o(jp,"P",{});var wp=l(Bt);IL=p(wp,"You can also remove a column using "),dg=o(wp,"A",{href:!0});var jX=l(dg);TL=p(jX,"Dataset.map()"),jX.forEach(a),NL=p(wp," with "),ov=o(wp,"EM",{});var wX=l(ov);PL=p(wX,"feature"),wX.forEach(a),AL=p(wp," but "),lv=o(wp,"CODE",{});var DX=l(lv);FL=p(DX,"cast_"),DX.forEach(a),LL=p(wp,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),wp.forEach(a),SL=h(jp),b(wl.$$.fragment,jp),jp.forEach(a),OL=h(F),is=o(F,"DIV",{class:!0});var fb=l(is);b(fm.$$.fragment,fb),CL=h(fb),iv=o(fb,"P",{});var kX=l(iv);zL=p(kX,"Cast column to feature for decoding."),kX.forEach(a),VL=h(fb),b(Dl.$$.fragment,fb),fb.forEach(a),UL=h(F),Ie=o(F,"DIV",{class:!0});var an=l(Ie);b(um.$$.fragment,an),ML=h(an),pv=o(an,"P",{});var EX=l(pv);RL=p(EX,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),EX.forEach(a),BL=h(an),cv=o(an,"P",{});var qX=l(cv);GL=p(qX,"The transformation is applied to all the splits of the dataset dictionary."),qX.forEach(a),HL=h(an),On=o(an,"P",{});var ub=l(On);WL=p(ub,"You can also remove a column using "),mg=o(ub,"A",{href:!0});var IX=l(mg);YL=p(IX,"Dataset.map()"),IX.forEach(a),JL=p(ub," with "),dv=o(ub,"EM",{});var TX=l(dv);KL=p(TX,"remove_columns"),TX.forEach(a),ZL=p(ub,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),ub.forEach(a),XL=h(an),b(kl.$$.fragment,an),an.forEach(a),QL=h(F),Te=o(F,"DIV",{class:!0});var sn=l(Te);b(gm.$$.fragment,sn),eS=h(sn),mv=o(sn,"P",{});var NX=l(mv);tS=p(NX,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),NX.forEach(a),aS=h(sn),Cn=o(sn,"P",{});var gb=l(Cn);sS=p(gb,"You can also rename a column using "),hg=o(gb,"A",{href:!0});var PX=l(hg);nS=p(PX,"Dataset.map()"),PX.forEach(a),rS=p(gb," with "),hv=o(gb,"EM",{});var AX=l(hv);oS=p(AX,"remove_columns"),AX.forEach(a),lS=p(gb," but the present method:"),gb.forEach(a),iS=h(sn),_m=o(sn,"UL",{});var YD=l(_m);fv=o(YD,"LI",{});var FX=l(fv);pS=p(FX,"takes care of moving the original features under the new column name."),FX.forEach(a),cS=h(YD),uv=o(YD,"LI",{});var LX=l(uv);dS=p(LX,"doesn\u2019t copy the data to a new dataset and is thus much faster."),LX.forEach(a),YD.forEach(a),mS=h(sn),b(El.$$.fragment,sn),sn.forEach(a),hS=h(F),ps=o(F,"DIV",{class:!0});var _b=l(ps);b(bm.$$.fragment,_b),fS=h(_b),gv=o(_b,"P",{});var SX=l(gv);uS=p(SX,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The transformation is applied to all the datasets of the dataset dictionary.`),SX.forEach(a),gS=h(_b),b(ql.$$.fragment,_b),_b.forEach(a),_S=h(F),cs=o(F,"DIV",{class:!0});var bb=l(cs);b($m.$$.fragment,bb),bS=h(bb),xm=o(bb,"P",{});var JD=l(xm);$S=p(JD,"Casts the given column as :obj:"),_v=o(JD,"CODE",{});var OX=l(_v);xS=p(OX,"datasets.features.ClassLabel"),OX.forEach(a),vS=p(JD," and updates the tables."),JD.forEach(a),yS=h(bb),b(Il.$$.fragment,bb),bb.forEach(a),jS=h(F),Ne=o(F,"DIV",{class:!0});var nn=l(Ne);b(vm.$$.fragment,nn),wS=h(nn),zn=o(nn,"P",{});var $b=l(zn);DS=p($b,"Pushes the "),bv=o($b,"CODE",{});var CX=l(bv);kS=p(CX,"DatasetDict"),CX.forEach(a),ES=p($b,` to the hub as a Parquet dataset.
The `),$v=o($b,"CODE",{});var zX=l($v);qS=p(zX,"DatasetDict"),zX.forEach(a),IS=p($b," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),$b.forEach(a),TS=h(nn),xv=o(nn,"P",{});var VX=l(xv);NS=p(VX,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),VX.forEach(a),PS=h(nn),Gt=o(nn,"P",{});var Dp=l(Gt);AS=p(Dp,"The resulting Parquet files are self-contained by default: if your dataset contains "),fg=o(Dp,"A",{href:!0});var UX=l(fg);FS=p(UX,"Image"),UX.forEach(a),LS=p(Dp," or "),ug=o(Dp,"A",{href:!0});var MX=l(ug);SS=p(MX,"Audio"),MX.forEach(a),OS=p(Dp,`
data, the Parquet files will store the bytes of your images or audio files.
You can disable this by setting `),vv=o(Dp,"EM",{});var RX=l(vv);CS=p(RX,"embed_external_files"),RX.forEach(a),zS=p(Dp," to False."),Dp.forEach(a),VS=h(nn),b(Tl.$$.fragment,nn),nn.forEach(a),US=h(F),oe=o(F,"DIV",{class:!0});var Dt=l(oe);b(ym.$$.fragment,Dt),MS=h(Dt),Vn=o(Dt,"P",{});var xb=l(Vn);RS=p(xb,"Saves a dataset dict to a filesystem using either "),gg=o(xb,"A",{href:!0});var BX=l(gg);BS=p(BX,"S3FileSystem"),BX.forEach(a),GS=p(xb,` or
`),yv=o(xb,"CODE",{});var GX=l(yv);HS=p(GX,"fsspec.spec.AbstractFileSystem"),GX.forEach(a),WS=p(xb,"."),xb.forEach(a),YS=h(Dt),Un=o(Dt,"P",{});var vb=l(Un);JS=p(vb,"For "),_g=o(vb,"A",{href:!0});var HX=l(_g);KS=p(HX,"Image"),HX.forEach(a),ZS=p(vb," and "),bg=o(vb,"A",{href:!0});var WX=l(bg);XS=p(WX,"Audio"),WX.forEach(a),QS=p(vb," data:"),vb.forEach(a),eO=h(Dt),jm=o(Dt,"P",{});var KD=l(jm);tO=p(KD,`If your images and audio files are local files, then the resulting arrow file will store paths to these files.
If you want to include the bytes or your images or audio files instead, you must `),jv=o(KD,"EM",{});var YX=l(jv);aO=p(YX,"read()"),YX.forEach(a),sO=p(KD," those files first."),KD.forEach(a),nO=h(Dt),b(Nl.$$.fragment,Dt),rO=h(Dt),b(Pl.$$.fragment,Dt),Dt.forEach(a),oO=h(F),ds=o(F,"DIV",{class:!0});var yb=l(ds);b(wm.$$.fragment,yb),lO=h(yb),Ht=o(yb,"P",{});var kp=l(Ht);iO=p(kp,"Load a dataset that was previously saved using "),wv=o(kp,"CODE",{});var JX=l(wv);pO=p(JX,"save_to_disk"),JX.forEach(a),cO=p(kp,` from a filesystem using either
`),$g=o(kp,"A",{href:!0});var KX=l($g);dO=p(KX,"S3FileSystem"),KX.forEach(a),mO=p(kp," or "),Dv=o(kp,"CODE",{});var ZX=l(Dv);hO=p(ZX,"fsspec.spec.AbstractFileSystem"),ZX.forEach(a),fO=p(kp,"."),kp.forEach(a),uO=h(yb),b(Al.$$.fragment,yb),yb.forEach(a),gO=h(F),ms=o(F,"DIV",{class:!0});var jb=l(ms);b(Dm.$$.fragment,jb),_O=h(jb),kv=o(jb,"P",{});var XX=l(kv);bO=p(XX,"Create DatasetDict from CSV file(s)."),XX.forEach(a),$O=h(jb),b(Fl.$$.fragment,jb),jb.forEach(a),xO=h(F),hs=o(F,"DIV",{class:!0});var wb=l(hs);b(km.$$.fragment,wb),vO=h(wb),Ev=o(wb,"P",{});var QX=l(Ev);yO=p(QX,"Create DatasetDict from JSON Lines file(s)."),QX.forEach(a),jO=h(wb),b(Ll.$$.fragment,wb),wb.forEach(a),wO=h(F),fs=o(F,"DIV",{class:!0});var Db=l(fs);b(Em.$$.fragment,Db),DO=h(Db),qv=o(Db,"P",{});var eQ=l(qv);kO=p(eQ,"Create DatasetDict from Parquet file(s)."),eQ.forEach(a),EO=h(Db),b(Sl.$$.fragment,Db),Db.forEach(a),qO=h(F),us=o(F,"DIV",{class:!0});var kb=l(us);b(qm.$$.fragment,kb),IO=h(kb),Iv=o(kb,"P",{});var tQ=l(Iv);TO=p(tQ,"Create DatasetDict from text file(s)."),tQ.forEach(a),NO=h(kb),b(Ol.$$.fragment,kb),kb.forEach(a),PO=h(F),gs=o(F,"DIV",{class:!0});var Eb=l(gs);b(Im.$$.fragment,Eb),AO=h(Eb),Mn=o(Eb,"P",{});var qb=l(Mn);FO=p(qb,"Prepare a dataset for the given task by casting the dataset\u2019s "),xg=o(qb,"A",{href:!0});var aQ=l(xg);LO=p(aQ,"Features"),aQ.forEach(a),SO=p(qb," to standardized column names and types as detailed in "),vg=o(qb,"A",{href:!0});var sQ=l(vg);OO=p(sQ,"datasets.tasks"),sQ.forEach(a),CO=p(qb,"."),qb.forEach(a),zO=h(Eb),Rn=o(Eb,"P",{});var Ib=l(Rn);VO=p(Ib,"Casts "),Tv=o(Ib,"CODE",{});var nQ=l(Tv);UO=p(nQ,"datasets.DatasetInfo.features"),nQ.forEach(a),MO=p(Ib," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),Nv=o(Ib,"CODE",{});var rQ=l(Nv);RO=p(rQ,"datasets.DatasetInfo.task_templates"),rQ.forEach(a),BO=p(Ib," after casting."),Ib.forEach(a),Eb.forEach(a),F.forEach(a),V7=h(s),yg=o(s,"A",{id:!0}),l(yg).forEach(a),U7=h(s),Bn=o(s,"H2",{class:!0});var ZD=l(Bn);Cl=o(ZD,"A",{id:!0,class:!0,href:!0});var oQ=l(Cl);Pv=o(oQ,"SPAN",{});var lQ=l(Pv);b(Tm.$$.fragment,lQ),lQ.forEach(a),oQ.forEach(a),GO=h(ZD),Av=o(ZD,"SPAN",{});var iQ=l(Av);HO=p(iQ,"IterableDataset"),iQ.forEach(a),ZD.forEach(a),M7=h(s),zl=o(s,"P",{});var XD=l(zl);WO=p(XD,"The base class "),jg=o(XD,"A",{href:!0});var pQ=l(jg);YO=p(pQ,"IterableDataset"),pQ.forEach(a),JO=p(XD," implements an iterable Dataset backed by python generators."),XD.forEach(a),R7=h(s),L=o(s,"DIV",{class:!0});var S=l(L);b(Nm.$$.fragment,S),KO=h(S),Fv=o(S,"P",{});var cQ=l(Fv);ZO=p(cQ,"A Dataset backed by an iterable."),cQ.forEach(a),XO=h(S),_s=o(S,"DIV",{class:!0});var Tb=l(_s);b(Pm.$$.fragment,Tb),QO=h(Tb),Lv=o(Tb,"P",{});var dQ=l(Lv);eC=p(dQ,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),dQ.forEach(a),tC=h(Tb),b(Vl.$$.fragment,Tb),Tb.forEach(a),aC=h(S),bs=o(S,"DIV",{class:!0});var Nb=l(bs);b(Am.$$.fragment,Nb),sC=h(Nb),Sv=o(Nb,"P",{});var mQ=l(Sv);nC=p(mQ,"Cast column to feature for decoding."),mQ.forEach(a),rC=h(Nb),b(Ul.$$.fragment,Nb),Nb.forEach(a),oC=h(S),$s=o(S,"DIV",{class:!0});var Pb=l($s);b(Fm.$$.fragment,Pb),lC=h(Pb),Ov=o(Pb,"P",{});var hQ=l(Ov);iC=p(hQ,"Cast the dataset to a new set of features."),hQ.forEach(a),pC=h(Pb),b(Ml.$$.fragment,Pb),Pb.forEach(a),cC=h(S),wg=o(S,"DIV",{class:!0});var fQ=l(wg);b(Lm.$$.fragment,fQ),fQ.forEach(a),dC=h(S),Pe=o(S,"DIV",{class:!0});var rn=l(Pe);b(Sm.$$.fragment,rn),mC=h(rn),Cv=o(rn,"P",{});var uQ=l(Cv);hC=p(uQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),uQ.forEach(a),fC=h(rn),Om=o(rn,"P",{});var QD=l(Om);uC=p(QD,"You can specify whether the function should be batched or not with the "),zv=o(QD,"CODE",{});var gQ=l(zv);gC=p(gQ,"batched"),gQ.forEach(a),_C=p(QD," parameter:"),QD.forEach(a),bC=h(rn),Gn=o(rn,"UL",{});var Ab=l(Gn);Vv=o(Ab,"LI",{});var _Q=l(Vv);$C=p(_Q,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),_Q.forEach(a),xC=h(Ab),Uv=o(Ab,"LI",{});var bQ=l(Uv);vC=p(bQ,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),bQ.forEach(a),yC=h(Ab),ue=o(Ab,"LI",{});var kt=l(ue);jC=p(kt,"If batched is True and batch_size is "),Mv=o(kt,"CODE",{});var $Q=l(Mv);wC=p($Q,"n"),$Q.forEach(a),DC=p(kt," > 1, then the function takes a batch of "),Rv=o(kt,"CODE",{});var xQ=l(Rv);kC=p(xQ,"n"),xQ.forEach(a),EC=p(kt," examples as input and can return a batch with "),Bv=o(kt,"CODE",{});var vQ=l(Bv);qC=p(vQ,"n"),vQ.forEach(a),IC=p(kt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Gv=o(kt,"CODE",{});var yQ=l(Gv);TC=p(yQ,"n"),yQ.forEach(a),NC=p(kt,` examples.
A batch is a dictionary, e.g. a batch of `),Hv=o(kt,"CODE",{});var jQ=l(Hv);PC=p(jQ,"n"),jQ.forEach(a),AC=p(kt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),kt.forEach(a),Ab.forEach(a),FC=h(rn),b(Rl.$$.fragment,rn),rn.forEach(a),LC=h(S),xs=o(S,"DIV",{class:!0});var Fb=l(xs);b(Cm.$$.fragment,Fb),SC=h(Fb),Wv=o(Fb,"P",{});var wQ=l(Wv);OC=p(wQ,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),wQ.forEach(a),CC=h(Fb),b(Bl.$$.fragment,Fb),Fb.forEach(a),zC=h(S),vs=o(S,"DIV",{class:!0});var Lb=l(vs);b(zm.$$.fragment,Lb),VC=h(Lb),Yv=o(Lb,"P",{});var DQ=l(Yv);UC=p(DQ,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),DQ.forEach(a),MC=h(Lb),b(Gl.$$.fragment,Lb),Lb.forEach(a),RC=h(S),le=o(S,"DIV",{class:!0});var Et=l(le);b(Vm.$$.fragment,Et),BC=h(Et),Jv=o(Et,"P",{});var kQ=l(Jv);GC=p(kQ,"Randomly shuffles the elements of this dataset."),kQ.forEach(a),HC=h(Et),Kv=o(Et,"P",{});var EQ=l(Kv);WC=p(EQ,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),EQ.forEach(a),YC=h(Et),Um=o(Et,"P",{});var ek=l(Um);JC=p(ek,"For instance, if your dataset contains 10,000 elements but "),Zv=o(ek,"CODE",{});var qQ=l(Zv);KC=p(qQ,"buffer_size"),qQ.forEach(a),ZC=p(ek,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),ek.forEach(a),XC=h(Et),Hn=o(Et,"P",{});var Sb=l(Hn);QC=p(Sb,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Dg=o(Sb,"A",{href:!0});var IQ=l(Dg);ez=p(IQ,"datasets.IterableDataset.skip()"),IQ.forEach(a),tz=p(Sb," or "),kg=o(Sb,"A",{href:!0});var TQ=l(kg);az=p(TQ,"datasets.IterableDataset.take()"),TQ.forEach(a),sz=p(Sb,`
then the order of the shards is kept unchanged.`),Sb.forEach(a),nz=h(Et),b(Hl.$$.fragment,Et),Et.forEach(a),rz=h(S),ys=o(S,"DIV",{class:!0});var Ob=l(ys);b(Mm.$$.fragment,Ob),oz=h(Ob),Rm=o(Ob,"P",{});var tk=l(Rm);lz=p(tk,"Create a new IterableDataset that skips the first "),Xv=o(tk,"CODE",{});var NQ=l(Xv);iz=p(NQ,"n"),NQ.forEach(a),pz=p(tk," elements."),tk.forEach(a),cz=h(Ob),b(Wl.$$.fragment,Ob),Ob.forEach(a),dz=h(S),js=o(S,"DIV",{class:!0});var Cb=l(js);b(Bm.$$.fragment,Cb),mz=h(Cb),Gm=o(Cb,"P",{});var ak=l(Gm);hz=p(ak,"Create a new IterableDataset with only the first "),Qv=o(ak,"CODE",{});var PQ=l(Qv);fz=p(PQ,"n"),PQ.forEach(a),uz=p(ak," elements."),ak.forEach(a),gz=h(Cb),b(Yl.$$.fragment,Cb),Cb.forEach(a),_z=h(S),Jl=o(S,"DIV",{class:!0});var sk=l(Jl);b(Hm.$$.fragment,sk),bz=h(sk),Eg=o(sk,"P",{});var UY=l(Eg);qg=o(UY,"A",{href:!0});var AQ=l(qg);$z=p(AQ,"datasets.DatasetInfo"),AQ.forEach(a),xz=p(UY," object containing all the metadata in the dataset."),UY.forEach(a),sk.forEach(a),vz=h(S),Kl=o(S,"DIV",{class:!0});var nk=l(Kl);b(Wm.$$.fragment,nk),yz=h(nk),Ig=o(nk,"P",{});var MY=l(Ig);Tg=o(MY,"A",{href:!0});var FQ=l(Tg);jz=p(FQ,"datasets.NamedSplit"),FQ.forEach(a),wz=p(MY," object corresponding to a named dataset split."),MY.forEach(a),nk.forEach(a),Dz=h(S),Ng=o(S,"DIV",{class:!0});var LQ=l(Ng);b(Ym.$$.fragment,LQ),LQ.forEach(a),kz=h(S),Pg=o(S,"DIV",{class:!0});var SQ=l(Pg);b(Jm.$$.fragment,SQ),SQ.forEach(a),Ez=h(S),Ag=o(S,"DIV",{class:!0});var OQ=l(Ag);b(Km.$$.fragment,OQ),OQ.forEach(a),qz=h(S),Fg=o(S,"DIV",{class:!0});var CQ=l(Fg);b(Zm.$$.fragment,CQ),CQ.forEach(a),Iz=h(S),Lg=o(S,"DIV",{class:!0});var zQ=l(Lg);b(Xm.$$.fragment,zQ),zQ.forEach(a),Tz=h(S),Sg=o(S,"DIV",{class:!0});var VQ=l(Sg);b(Qm.$$.fragment,VQ),VQ.forEach(a),Nz=h(S),Og=o(S,"DIV",{class:!0});var UQ=l(Og);b(eh.$$.fragment,UQ),UQ.forEach(a),Pz=h(S),Cg=o(S,"DIV",{class:!0});var MQ=l(Cg);b(th.$$.fragment,MQ),MQ.forEach(a),Az=h(S),zg=o(S,"DIV",{class:!0});var RQ=l(zg);b(ah.$$.fragment,RQ),RQ.forEach(a),Fz=h(S),Vg=o(S,"DIV",{class:!0});var BQ=l(Vg);b(sh.$$.fragment,BQ),BQ.forEach(a),Lz=h(S),Ug=o(S,"DIV",{class:!0});var GQ=l(Ug);b(nh.$$.fragment,GQ),GQ.forEach(a),Sz=h(S),Mg=o(S,"DIV",{class:!0});var HQ=l(Mg);b(rh.$$.fragment,HQ),HQ.forEach(a),Oz=h(S),Rg=o(S,"DIV",{class:!0});var WQ=l(Rg);b(oh.$$.fragment,WQ),WQ.forEach(a),S.forEach(a),B7=h(s),Wn=o(s,"H2",{class:!0});var rk=l(Wn);Zl=o(rk,"A",{id:!0,class:!0,href:!0});var YQ=l(Zl);ey=o(YQ,"SPAN",{});var JQ=l(ey);b(lh.$$.fragment,JQ),JQ.forEach(a),YQ.forEach(a),Cz=h(rk),ty=o(rk,"SPAN",{});var KQ=l(ty);zz=p(KQ,"IterableDatasetDict"),KQ.forEach(a),rk.forEach(a),G7=h(s),Xl=o(s,"P",{});var ok=l(Xl);Vz=p(ok,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),ay=o(ok,"CODE",{});var ZQ=l(ay);Uz=p(ZQ,"IterableDataset"),ZQ.forEach(a),Mz=p(ok," objects as values."),ok.forEach(a),H7=h(s),U=o(s,"DIV",{class:!0});var G=l(U);b(ih.$$.fragment,G),Rz=h(G),Ae=o(G,"DIV",{class:!0});var on=l(Ae);b(ph.$$.fragment,on),Bz=h(on),sy=o(on,"P",{});var XQ=l(sy);Gz=p(XQ,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.
The transformation is applied to all the datasets of the dataset dictionary.`),XQ.forEach(a),Hz=h(on),ch=o(on,"P",{});var lk=l(ch);Wz=p(lk,"You can specify whether the function should be batched or not with the "),ny=o(lk,"CODE",{});var QQ=l(ny);Yz=p(QQ,"batched"),QQ.forEach(a),Jz=p(lk," parameter:"),lk.forEach(a),Kz=h(on),Yn=o(on,"UL",{});var zb=l(Yn);ry=o(zb,"LI",{});var eee=l(ry);Zz=p(eee,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),eee.forEach(a),Xz=h(zb),oy=o(zb,"LI",{});var tee=l(oy);Qz=p(tee,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),tee.forEach(a),eV=h(zb),ge=o(zb,"LI",{});var qt=l(ge);tV=p(qt,"If batched is True and batch_size is "),ly=o(qt,"CODE",{});var aee=l(ly);aV=p(aee,"n"),aee.forEach(a),sV=p(qt," > 1, then the function takes a batch of "),iy=o(qt,"CODE",{});var see=l(iy);nV=p(see,"n"),see.forEach(a),rV=p(qt," examples as input and can return a batch with "),py=o(qt,"CODE",{});var nee=l(py);oV=p(nee,"n"),nee.forEach(a),lV=p(qt,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),cy=o(qt,"CODE",{});var ree=l(cy);iV=p(ree,"n"),ree.forEach(a),pV=p(qt,` examples.
A batch is a dictionary, e.g. a batch of `),dy=o(qt,"CODE",{});var oee=l(dy);cV=p(oee,"n"),oee.forEach(a),dV=p(qt," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),qt.forEach(a),zb.forEach(a),mV=h(on),b(Ql.$$.fragment,on),on.forEach(a),hV=h(G),ws=o(G,"DIV",{class:!0});var Vb=l(ws);b(dh.$$.fragment,Vb),fV=h(Vb),my=o(Vb,"P",{});var lee=l(my);uV=p(lee,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.
The filtering is applied to all the datasets of the dataset dictionary.`),lee.forEach(a),gV=h(Vb),b(ei.$$.fragment,Vb),Vb.forEach(a),_V=h(G),ie=o(G,"DIV",{class:!0});var It=l(ie);b(mh.$$.fragment,It),bV=h(It),hy=o(It,"P",{});var iee=l(hy);$V=p(iee,`Randomly shuffles the elements of this dataset.
The shuffling is applied to all the datasets of the dataset dictionary.`),iee.forEach(a),xV=h(It),fy=o(It,"P",{});var pee=l(fy);vV=p(pee,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),pee.forEach(a),yV=h(It),hh=o(It,"P",{});var ik=l(hh);jV=p(ik,"For instance, if your dataset contains 10,000 elements but "),uy=o(ik,"CODE",{});var cee=l(uy);wV=p(cee,"buffer_size"),cee.forEach(a),DV=p(ik,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),ik.forEach(a),kV=h(It),Jn=o(It,"P",{});var Ub=l(Jn);EV=p(Ub,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Bg=o(Ub,"A",{href:!0});var dee=l(Bg);qV=p(dee,"datasets.IterableDataset.skip()"),dee.forEach(a),IV=p(Ub," or "),Gg=o(Ub,"A",{href:!0});var mee=l(Gg);TV=p(mee,"datasets.IterableDataset.take()"),mee.forEach(a),NV=p(Ub,`
then the order of the shards is kept unchanged.`),Ub.forEach(a),PV=h(It),b(ti.$$.fragment,It),It.forEach(a),AV=h(G),Ds=o(G,"DIV",{class:!0});var Mb=l(Ds);b(fh.$$.fragment,Mb),FV=h(Mb),gy=o(Mb,"P",{});var hee=l(gy);LV=p(hee,`Return a dataset with the specified format.
This method only supports the \u201Ctorch\u201D format for now.
The format is set to all the datasets of the dataset dictionary.`),hee.forEach(a),SV=h(Mb),b(ai.$$.fragment,Mb),Mb.forEach(a),OV=h(G),ks=o(G,"DIV",{class:!0});var Rb=l(ks);b(uh.$$.fragment,Rb),CV=h(Rb),_y=o(Rb,"P",{});var fee=l(_y);zV=p(fee,`Cast the dataset to a new set of features.
The type casting is applied to all the datasets of the dataset dictionary.`),fee.forEach(a),VV=h(Rb),b(si.$$.fragment,Rb),Rb.forEach(a),UV=h(G),Es=o(G,"DIV",{class:!0});var Bb=l(Es);b(gh.$$.fragment,Bb),MV=h(Bb),by=o(Bb,"P",{});var uee=l(by);RV=p(uee,`Cast column to feature for decoding.
The type casting is applied to all the datasets of the dataset dictionary.`),uee.forEach(a),BV=h(Bb),b(ni.$$.fragment,Bb),Bb.forEach(a),GV=h(G),qs=o(G,"DIV",{class:!0});var Gb=l(qs);b(_h.$$.fragment,Gb),HV=h(Gb),$y=o(Gb,"P",{});var gee=l($y);WV=p(gee,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.
The removal is applied to all the datasets of the dataset dictionary.`),gee.forEach(a),YV=h(Gb),b(ri.$$.fragment,Gb),Gb.forEach(a),JV=h(G),Is=o(G,"DIV",{class:!0});var Hb=l(Is);b(bh.$$.fragment,Hb),KV=h(Hb),xy=o(Hb,"P",{});var _ee=l(xy);ZV=p(_ee,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.
The renaming is applied to all the datasets of the dataset dictionary.`),_ee.forEach(a),XV=h(Hb),b(oi.$$.fragment,Hb),Hb.forEach(a),QV=h(G),Ts=o(G,"DIV",{class:!0});var Wb=l(Ts);b($h.$$.fragment,Wb),eU=h(Wb),vy=o(Wb,"P",{});var bee=l(vy);tU=p(bee,`Rename several columns in the dataset, and move the features associated to the original columns under
the new column names.
The renaming is applied to all the datasets of the dataset dictionary.`),bee.forEach(a),aU=h(Wb),b(li.$$.fragment,Wb),Wb.forEach(a),G.forEach(a),W7=h(s),Kn=o(s,"H2",{class:!0});var pk=l(Kn);ii=o(pk,"A",{id:!0,class:!0,href:!0});var $ee=l(ii);yy=o($ee,"SPAN",{});var xee=l(yy);b(xh.$$.fragment,xee),xee.forEach(a),$ee.forEach(a),sU=h(pk),jy=o(pk,"SPAN",{});var vee=l(jy);nU=p(vee,"Features"),vee.forEach(a),pk.forEach(a),Y7=h(s),O=o(s,"DIV",{class:!0});var z=l(O);b(vh.$$.fragment,z),rU=h(z),wy=o(z,"P",{});var yee=l(wy);oU=p(yee,"A special dictionary that defines the internal structure of a dataset."),yee.forEach(a),lU=h(z),yh=o(z,"P",{});var ck=l(yh);iU=p(ck,"Instantiated with a dictionary of type "),Dy=o(ck,"CODE",{});var jee=l(Dy);pU=p(jee,"dict[str, FieldType]"),jee.forEach(a),cU=p(ck,`, where keys are the desired column names,
and values are the type of that column.`),ck.forEach(a),dU=h(z),Hg=o(z,"P",{});var RY=l(Hg);ky=o(RY,"CODE",{});var wee=l(ky);mU=p(wee,"FieldType"),wee.forEach(a),hU=p(RY," can be one of the following:"),RY.forEach(a),fU=h(z),J=o(z,"UL",{});var ce=l(J);Ey=o(ce,"LI",{});var Dee=l(Ey);Ns=o(Dee,"P",{});var su=l(Ns);uU=p(su,"a "),Wg=o(su,"A",{href:!0});var kee=l(Wg);gU=p(kee,"datasets.Value"),kee.forEach(a),_U=p(su," feature specifies a single typed value, e.g. "),qy=o(su,"CODE",{});var Eee=l(qy);bU=p(Eee,"int64"),Eee.forEach(a),$U=p(su," or "),Iy=o(su,"CODE",{});var qee=l(Iy);xU=p(qee,"string"),qee.forEach(a),su.forEach(a),Dee.forEach(a),vU=h(ce),Ty=o(ce,"LI",{});var Iee=l(Ty);jh=o(Iee,"P",{});var dk=l(jh);yU=p(dk,"a "),Yg=o(dk,"A",{href:!0});var Tee=l(Yg);jU=p(Tee,"datasets.ClassLabel"),Tee.forEach(a),wU=p(dk,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),dk.forEach(a),Iee.forEach(a),DU=h(ce),Ny=o(ce,"LI",{});var Nee=l(Ny);wh=o(Nee,"P",{});var mk=l(wh);kU=p(mk,"a python "),Py=o(mk,"CODE",{});var Pee=l(Py);EU=p(Pee,"dict"),Pee.forEach(a),qU=p(mk,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),mk.forEach(a),Nee.forEach(a),IU=h(ce),Dh=o(ce,"LI",{});var hk=l(Dh);Ge=o(hk,"P",{});var ln=l(Ge);TU=p(ln,"a python "),Ay=o(ln,"CODE",{});var Aee=l(Ay);NU=p(Aee,"list"),Aee.forEach(a),PU=p(ln," or a "),Jg=o(ln,"A",{href:!0});var Fee=l(Jg);AU=p(Fee,"datasets.Sequence"),Fee.forEach(a),FU=p(ln,` specifies that the field contains a list of objects. The python
`),Fy=o(ln,"CODE",{});var Lee=l(Fy);LU=p(Lee,"list"),Lee.forEach(a),SU=p(ln," or "),Kg=o(ln,"A",{href:!0});var See=l(Kg);OU=p(See,"datasets.Sequence"),See.forEach(a),CU=p(ln,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),ln.forEach(a),zU=h(hk),b(pi.$$.fragment,hk),hk.forEach(a),VU=h(ce),Ly=o(ce,"LI",{});var Oee=l(Ly);He=o(Oee,"P",{});var pn=l(He);UU=p(pn,"a "),Zg=o(pn,"A",{href:!0});var Cee=l(Zg);MU=p(Cee,"Array2D"),Cee.forEach(a),RU=p(pn,", "),Xg=o(pn,"A",{href:!0});var zee=l(Xg);BU=p(zee,"Array3D"),zee.forEach(a),GU=p(pn,", "),Qg=o(pn,"A",{href:!0});var Vee=l(Qg);HU=p(Vee,"Array4D"),Vee.forEach(a),WU=p(pn," or "),e_=o(pn,"A",{href:!0});var Uee=l(e_);YU=p(Uee,"Array5D"),Uee.forEach(a),JU=p(pn," feature for multidimensional arrays"),pn.forEach(a),Oee.forEach(a),KU=h(ce),Sy=o(ce,"LI",{});var Mee=l(Sy);kh=o(Mee,"P",{});var fk=l(kh);ZU=p(fk,"an "),t_=o(fk,"A",{href:!0});var Ree=l(t_);XU=p(Ree,"Audio"),Ree.forEach(a),QU=p(fk,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),fk.forEach(a),Mee.forEach(a),eM=h(ce),Oy=o(ce,"LI",{});var Bee=l(Oy);Wt=o(Bee,"P",{});var Ep=l(Wt);tM=p(Ep,"an "),a_=o(Ep,"A",{href:!0});var Gee=l(a_);aM=p(Gee,"Image"),Gee.forEach(a),sM=p(Ep," feature to store the absolute path to an image file, an "),Cy=o(Ep,"CODE",{});var Hee=l(Cy);nM=p(Hee,"np.ndarray"),Hee.forEach(a),rM=p(Ep," object, a "),zy=o(Ep,"CODE",{});var Wee=l(zy);oM=p(Wee,"PIL.Image.Image"),Wee.forEach(a),lM=p(Ep,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),Ep.forEach(a),Bee.forEach(a),iM=h(ce),Vy=o(ce,"LI",{});var Yee=l(Vy);ci=o(Yee,"P",{});var k7=l(ci);s_=o(k7,"A",{href:!0});var Jee=l(s_);pM=p(Jee,"datasets.Translation"),Jee.forEach(a),cM=p(k7," and "),n_=o(k7,"A",{href:!0});var Kee=l(n_);dM=p(Kee,"datasets.TranslationVariableLanguages"),Kee.forEach(a),mM=p(k7,", the two features specific to Machine Translation"),k7.forEach(a),Yee.forEach(a),ce.forEach(a),hM=h(z),Ps=o(z,"DIV",{class:!0});var Yb=l(Ps);b(Eh.$$.fragment,Yb),fM=h(Yb),Uy=o(Yb,"P",{});var Zee=l(Uy);uM=p(Zee,"Make a deep copy of Features."),Zee.forEach(a),gM=h(Yb),b(di.$$.fragment,Yb),Yb.forEach(a),_M=h(z),mi=o(z,"DIV",{class:!0});var uk=l(mi);b(qh.$$.fragment,uk),bM=h(uk),My=o(uk,"P",{});var Xee=l(My);$M=p(Xee,"Decode batch with custom feature decoding."),Xee.forEach(a),uk.forEach(a),xM=h(z),hi=o(z,"DIV",{class:!0});var gk=l(hi);b(Ih.$$.fragment,gk),vM=h(gk),Ry=o(gk,"P",{});var Qee=l(Ry);yM=p(Qee,"Decode column with custom feature decoding."),Qee.forEach(a),gk.forEach(a),jM=h(z),fi=o(z,"DIV",{class:!0});var _k=l(fi);b(Th.$$.fragment,_k),wM=h(_k),By=o(_k,"P",{});var ete=l(By);DM=p(ete,"Decode example with custom feature decoding."),ete.forEach(a),_k.forEach(a),kM=h(z),ui=o(z,"DIV",{class:!0});var bk=l(ui);b(Nh.$$.fragment,bk),EM=h(bk),Gy=o(bk,"P",{});var tte=l(Gy);qM=p(tte,"Encode batch into a format for Arrow."),tte.forEach(a),bk.forEach(a),IM=h(z),gi=o(z,"DIV",{class:!0});var $k=l(gi);b(Ph.$$.fragment,$k),TM=h($k),Hy=o($k,"P",{});var ate=l(Hy);NM=p(ate,"Encode example into a format for Arrow."),ate.forEach(a),$k.forEach(a),PM=h(z),_t=o(z,"DIV",{class:!0});var qp=l(_t);b(Ah.$$.fragment,qp),AM=h(qp),Wy=o(qp,"P",{});var ste=l(Wy);FM=p(ste,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),ste.forEach(a),LM=h(qp),Yy=o(qp,"P",{});var nte=l(Yy);SM=p(nte,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),nte.forEach(a),OM=h(qp),b(_i.$$.fragment,qp),qp.forEach(a),CM=h(z),bi=o(z,"DIV",{class:!0});var xk=l(bi);b(Fh.$$.fragment,xk),zM=h(xk),Jy=o(xk,"P",{});var rte=l(Jy);VM=p(rte,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),rte.forEach(a),xk.forEach(a),UM=h(z),Fe=o(z,"DIV",{class:!0});var cn=l(Fe);b(Lh.$$.fragment,cn),MM=h(cn),Ky=o(cn,"P",{});var ote=l(Ky);RM=p(ote,"Construct Features from dict."),ote.forEach(a),BM=h(cn),Zy=o(cn,"P",{});var lte=l(Zy);GM=p(lte,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),lte.forEach(a),HM=h(cn),Yt=o(cn,"P",{});var Ip=l(Yt);WM=p(Ip,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),r_=o(Ip,"A",{href:!0});var ite=l(r_);YM=p(ite,"DatasetInfo"),ite.forEach(a),JM=p(Ip,` that was dumped to a JSON object. This acts as an analogue to
`),o_=o(Ip,"A",{href:!0});var pte=l(o_);KM=p(pte,"Features.from_arrow_schema()"),pte.forEach(a),ZM=p(Ip,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),l_=o(Ip,"A",{href:!0});var cte=l(l_);XM=p(cte,"Value"),cte.forEach(a),QM=p(Ip," automatically performs."),Ip.forEach(a),eR=h(cn),b($i.$$.fragment,cn),cn.forEach(a),tR=h(z),bt=o(z,"DIV",{class:!0});var Tp=l(bt);b(Sh.$$.fragment,Tp),aR=h(Tp),Xy=o(Tp,"P",{});var dte=l(Xy);sR=p(dte,"Reorder Features fields to match the field order of other Features."),dte.forEach(a),nR=h(Tp),Qy=o(Tp,"P",{});var mte=l(Qy);rR=p(mte,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),mte.forEach(a),oR=h(Tp),b(xi.$$.fragment,Tp),Tp.forEach(a),z.forEach(a),J7=h(s),Jt=o(s,"DIV",{class:!0});var Jb=l(Jt);b(Oh.$$.fragment,Jb),lR=h(Jb),ej=o(Jb,"P",{});var hte=l(ej);iR=p(hte,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),hte.forEach(a),pR=h(Jb),b(vi.$$.fragment,Jb),Jb.forEach(a),K7=h(s),B=o(s,"DIV",{class:!0});var X=l(B);b(Ch.$$.fragment,X),cR=h(X),tj=o(X,"P",{});var fte=l(tj);dR=p(fte,"Feature type for integer class labels."),fte.forEach(a),mR=h(X),zh=o(X,"P",{});var vk=l(zh);hR=p(vk,"There are 3 ways to define a "),aj=o(vk,"EM",{});var ute=l(aj);fR=p(ute,"ClassLabel"),ute.forEach(a),uR=p(vk,", which correspond to the 3 arguments:"),vk.forEach(a),gR=h(X),Zn=o(X,"UL",{});var Kb=l(Zn);i_=o(Kb,"LI",{});var BY=l(i_);sj=o(BY,"EM",{});var gte=l(sj);_R=p(gte,"num_classes"),gte.forEach(a),bR=p(BY,": Create 0 to (num_classes-1) labels."),BY.forEach(a),$R=h(Kb),p_=o(Kb,"LI",{});var GY=l(p_);nj=o(GY,"EM",{});var _te=l(nj);xR=p(_te,"names"),_te.forEach(a),vR=p(GY,": List of label strings."),GY.forEach(a),yR=h(Kb),c_=o(Kb,"LI",{});var HY=l(c_);rj=o(HY,"EM",{});var bte=l(rj);jR=p(bte,"names_file"),bte.forEach(a),wR=p(HY,": File containing the list of labels."),HY.forEach(a),Kb.forEach(a),DR=h(X),oj=o(X,"P",{});var $te=l(oj);kR=p($te,`Under the hood the labels are stored as integers.
You can use negative integers to represent unknown/missing labels.`),$te.forEach(a),ER=h(X),b(yi.$$.fragment,X),qR=h(X),As=o(X,"DIV",{class:!0});var Zb=l(As);b(Vh.$$.fragment,Zb),IR=h(Zb),lj=o(Zb,"P",{});var xte=l(lj);TR=p(xte,`Cast an Arrow array to the ClassLabel arrow storage type.
The Arrow types that can be converted to the ClassLabel pyarrow storage type are:`),xte.forEach(a),NR=h(Zb),Uh=o(Zb,"UL",{});var yk=l(Uh);ij=o(yk,"LI",{});var vte=l(ij);PR=p(vte,"pa.string()"),vte.forEach(a),AR=h(yk),pj=o(yk,"LI",{});var yte=l(pj);FR=p(yte,"pa.int()"),yte.forEach(a),yk.forEach(a),Zb.forEach(a),LR=h(X),$t=o(X,"DIV",{class:!0});var Np=l($t);b(Mh.$$.fragment,Np),SR=h(Np),cj=o(Np,"P",{});var jte=l(cj);OR=p(jte,"Conversion integer => class name string."),jte.forEach(a),CR=h(Np),dj=o(Np,"P",{});var wte=l(dj);zR=p(wte,"Regarding unknown/missing labels: passing negative integers raises ValueError."),wte.forEach(a),VR=h(Np),b(ji.$$.fragment,Np),Np.forEach(a),UR=h(X),Fs=o(X,"DIV",{class:!0});var Xb=l(Fs);b(Rh.$$.fragment,Xb),MR=h(Xb),mj=o(Xb,"P",{});var Dte=l(mj);RR=p(Dte,"Conversion class name string => integer."),Dte.forEach(a),BR=h(Xb),b(wi.$$.fragment,Xb),Xb.forEach(a),X.forEach(a),Z7=h(s),We=o(s,"DIV",{class:!0});var Pp=l(We);b(Bh.$$.fragment,Pp),GR=h(Pp),hj=o(Pp,"P",{});var kte=l(hj);HR=p(kte,"The Value dtypes are as follows:"),kte.forEach(a),WR=h(Pp),fj=o(Pp,"P",{});var Ete=l(fj);YR=p(Ete,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),Ete.forEach(a),JR=h(Pp),b(Di.$$.fragment,Pp),Pp.forEach(a),X7=h(s),te=o(s,"DIV",{class:!0});var Tt=l(te);b(Gh.$$.fragment,Tt),KR=h(Tt),d_=o(Tt,"P",{});var WY=l(d_);uj=o(WY,"CODE",{});var qte=l(uj);ZR=p(qte,"FeatureConnector"),qte.forEach(a),XR=p(WY,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),WY.forEach(a),QR=h(Tt),gj=o(Tt,"P",{});var Ite=l(gj);eB=p(Ite,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),Ite.forEach(a),tB=h(Tt),Hh=o(Tt,"P",{});var jk=l(Hh);aB=p(jk,"Output: A dictionary mapping string language codes to translations as "),_j=o(jk,"CODE",{});var Tte=l(_j);sB=p(Tte,"Text"),Tte.forEach(a),nB=p(jk,`
features.`),jk.forEach(a),rB=h(Tt),b(ki.$$.fragment,Tt),oB=h(Tt),Ei=o(Tt,"DIV",{class:!0});var wk=l(Ei);b(Wh.$$.fragment,wk),lB=h(wk),bj=o(wk,"P",{});var Nte=l(bj);iB=p(Nte,"Flatten the Translation feature into a dictionary."),Nte.forEach(a),wk.forEach(a),Tt.forEach(a),Q7=h(s),ae=o(s,"DIV",{class:!0});var Nt=l(ae);b(Yh.$$.fragment,Nt),pB=h(Nt),m_=o(Nt,"P",{});var YY=l(m_);$j=o(YY,"CODE",{});var Pte=l($j);cB=p(Pte,"FeatureConnector"),Pte.forEach(a),dB=p(YY,` for translations with variable languages per example.
Here for compatiblity with tfds.`),YY.forEach(a),mB=h(Nt),xj=o(Nt,"P",{});var Ate=l(xj);hB=p(Ate,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),Ate.forEach(a),fB=h(Nt),vj=o(Nt,"P",{});var Fte=l(vj);uB=p(Fte,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),Fte.forEach(a),gB=h(Nt),b(qi.$$.fragment,Nt),_B=h(Nt),Ii=o(Nt,"DIV",{class:!0});var Dk=l(Ii);b(Jh.$$.fragment,Dk),bB=h(Dk),yj=o(Dk,"P",{});var Lte=l(yj);$B=p(Lte,"Flatten the TranslationVariableLanguages feature into a dictionary."),Lte.forEach(a),Dk.forEach(a),Nt.forEach(a),eD=h(s),Kt=o(s,"DIV",{class:!0});var Qb=l(Kt);b(Kh.$$.fragment,Qb),xB=h(Qb),jj=o(Qb,"P",{});var Ste=l(jj);vB=p(Ste,"Create a two-dimensional array."),Ste.forEach(a),yB=h(Qb),b(Ti.$$.fragment,Qb),Qb.forEach(a),tD=h(s),Zt=o(s,"DIV",{class:!0});var e$=l(Zt);b(Zh.$$.fragment,e$),jB=h(e$),wj=o(e$,"P",{});var Ote=l(wj);wB=p(Ote,"Create a three-dimensional array."),Ote.forEach(a),DB=h(e$),b(Ni.$$.fragment,e$),e$.forEach(a),aD=h(s),Xt=o(s,"DIV",{class:!0});var t$=l(Xt);b(Xh.$$.fragment,t$),kB=h(t$),Dj=o(t$,"P",{});var Cte=l(Dj);EB=p(Cte,"Create a four-dimensional array."),Cte.forEach(a),qB=h(t$),b(Pi.$$.fragment,t$),t$.forEach(a),sD=h(s),Qt=o(s,"DIV",{class:!0});var a$=l(Qt);b(Qh.$$.fragment,a$),IB=h(a$),kj=o(a$,"P",{});var zte=l(kj);TB=p(zte,"Create a five-dimensional array."),zte.forEach(a),NB=h(a$),b(Ai.$$.fragment,a$),a$.forEach(a),nD=h(s),M=o(s,"DIV",{class:!0});var H=l(M);b(ef.$$.fragment,H),PB=h(H),Ej=o(H,"P",{});var Vte=l(Ej);AB=p(Vte,"Audio Feature to extract audio data from an audio file."),Vte.forEach(a),FB=h(H),qj=o(H,"P",{});var Ute=l(qj);LB=p(Ute,"Input: The Audio feature accepts as input:"),Ute.forEach(a),SB=h(H),Xn=o(H,"UL",{});var s$=l(Xn);Ij=o(s$,"LI",{});var Mte=l(Ij);tf=o(Mte,"P",{});var kk=l(tf);OB=p(kk,"A "),Tj=o(kk,"CODE",{});var Rte=l(Tj);CB=p(Rte,"str"),Rte.forEach(a),zB=p(kk,": Absolute path to the audio file (i.e. random access is allowed)."),kk.forEach(a),Mte.forEach(a),VB=h(s$),Qn=o(s$,"LI",{});var n$=l(Qn);af=o(n$,"P",{});var Ek=l(af);UB=p(Ek,"A "),Nj=o(Ek,"CODE",{});var Bte=l(Nj);MB=p(Bte,"dict"),Bte.forEach(a),RB=p(Ek," with the keys:"),Ek.forEach(a),BB=h(n$),sf=o(n$,"UL",{});var qk=l(sf);Pj=o(qk,"LI",{});var Gte=l(Pj);GB=p(Gte,"path: String with relative path of the audio file to the archive file."),Gte.forEach(a),HB=h(qk),Aj=o(qk,"LI",{});var Hte=l(Aj);WB=p(Hte,"bytes: Bytes content of the audio file."),Hte.forEach(a),qk.forEach(a),YB=h(n$),Fj=o(n$,"P",{});var Wte=l(Fj);JB=p(Wte,"This is useful for archived files with sequential access."),Wte.forEach(a),n$.forEach(a),KB=h(s$),er=o(s$,"LI",{});var r$=l(er);nf=o(r$,"P",{});var Ik=l(nf);ZB=p(Ik,"A "),Lj=o(Ik,"CODE",{});var Yte=l(Lj);XB=p(Yte,"dict"),Yte.forEach(a),QB=p(Ik," with the keys:"),Ik.forEach(a),eG=h(r$),tr=o(r$,"UL",{});var o$=l(tr);Sj=o(o$,"LI",{});var Jte=l(Sj);tG=p(Jte,"path: String with relative path of the audio file to the archive file."),Jte.forEach(a),aG=h(o$),Oj=o(o$,"LI",{});var Kte=l(Oj);sG=p(Kte,"array: Array containing the audio sample"),Kte.forEach(a),nG=h(o$),Cj=o(o$,"LI",{});var Zte=l(Cj);rG=p(Zte,"sampling_rate: Integer corresponding to the sampling rate of the audio sample."),Zte.forEach(a),o$.forEach(a),oG=h(r$),zj=o(r$,"P",{});var Xte=l(zj);lG=p(Xte,"This is useful for archived files with sequential access."),Xte.forEach(a),r$.forEach(a),s$.forEach(a),iG=h(H),b(Fi.$$.fragment,H),pG=h(H),Ls=o(H,"DIV",{class:!0});var l$=l(Ls);b(rf.$$.fragment,l$),cG=h(l$),Vj=o(l$,"P",{});var Qte=l(Vj);dG=p(Qte,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),Qte.forEach(a),mG=h(l$),ea=o(l$,"UL",{});var Ap=l(ea);Uj=o(Ap,"LI",{});var eae=l(Uj);hG=p(eae,"pa.string() - it must contain the \u201Cpath\u201D data"),eae.forEach(a),fG=h(Ap),Mj=o(Ap,"LI",{});var tae=l(Mj);uG=p(tae,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),tae.forEach(a),gG=h(Ap),Rj=o(Ap,"LI",{});var aae=l(Rj);_G=p(aae,"pa.struct({\u201Cpath\u201D: pa.string()})"),aae.forEach(a),bG=h(Ap),Bj=o(Ap,"LI",{});var sae=l(Bj);$G=p(sae,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),sae.forEach(a),Ap.forEach(a),l$.forEach(a),xG=h(H),Li=o(H,"DIV",{class:!0});var Tk=l(Li);b(of.$$.fragment,Tk),vG=h(Tk),Gj=o(Tk,"P",{});var nae=l(Gj);yG=p(nae,"Decode example audio file into audio data."),nae.forEach(a),Tk.forEach(a),jG=h(H),Si=o(H,"DIV",{class:!0});var Nk=l(Si);b(lf.$$.fragment,Nk),wG=h(Nk),Hj=o(Nk,"P",{});var rae=l(Hj);DG=p(rae,"Embed audio files into the Arrow array."),rae.forEach(a),Nk.forEach(a),kG=h(H),Oi=o(H,"DIV",{class:!0});var Pk=l(Oi);b(pf.$$.fragment,Pk),EG=h(Pk),Wj=o(Pk,"P",{});var oae=l(Wj);qG=p(oae,"Encode example into a format for Arrow."),oae.forEach(a),Pk.forEach(a),IG=h(H),Ci=o(H,"DIV",{class:!0});var Ak=l(Ci);b(cf.$$.fragment,Ak),TG=h(Ak),Yj=o(Ak,"P",{});var lae=l(Yj);NG=p(lae,"If in the decodable state, raise an error, otherwise flatten the feature into a dictionary."),lae.forEach(a),Ak.forEach(a),H.forEach(a),rD=h(s),R=o(s,"DIV",{class:!0});var W=l(R);b(df.$$.fragment,W),PG=h(W),Jj=o(W,"P",{});var iae=l(Jj);AG=p(iae,"Image feature to read image data from an image file."),iae.forEach(a),FG=h(W),Kj=o(W,"P",{});var pae=l(Kj);LG=p(pae,"Input: The Image feature accepts as input:"),pae.forEach(a),SG=h(W),ta=o(W,"UL",{});var Fp=l(ta);Zj=o(Fp,"LI",{});var cae=l(Zj);mf=o(cae,"P",{});var Fk=l(mf);OG=p(Fk,"A "),Xj=o(Fk,"CODE",{});var dae=l(Xj);CG=p(dae,"str"),dae.forEach(a),zG=p(Fk,": Absolute path to the image file (i.e. random access is allowed)."),Fk.forEach(a),cae.forEach(a),VG=h(Fp),ar=o(Fp,"LI",{});var i$=l(ar);hf=o(i$,"P",{});var Lk=l(hf);UG=p(Lk,"A "),Qj=o(Lk,"CODE",{});var mae=l(Qj);MG=p(mae,"dict"),mae.forEach(a),RG=p(Lk," with the keys:"),Lk.forEach(a),BG=h(i$),ff=o(i$,"UL",{});var Sk=l(ff);e0=o(Sk,"LI",{});var hae=l(e0);GG=p(hae,"path: String with relative path of the image file to the archive file."),hae.forEach(a),HG=h(Sk),t0=o(Sk,"LI",{});var fae=l(t0);WG=p(fae,"bytes: Bytes of the image file."),fae.forEach(a),Sk.forEach(a),YG=h(i$),a0=o(i$,"P",{});var uae=l(a0);JG=p(uae,"This is useful for archived files with sequential access."),uae.forEach(a),i$.forEach(a),KG=h(Fp),s0=o(Fp,"LI",{});var gae=l(s0);uf=o(gae,"P",{});var Ok=l(uf);ZG=p(Ok,"An "),n0=o(Ok,"CODE",{});var _ae=l(n0);XG=p(_ae,"np.ndarray"),_ae.forEach(a),QG=p(Ok,": NumPy array representing an image."),Ok.forEach(a),gae.forEach(a),eH=h(Fp),r0=o(Fp,"LI",{});var bae=l(r0);gf=o(bae,"P",{});var Ck=l(gf);tH=p(Ck,"A "),o0=o(Ck,"CODE",{});var $ae=l(o0);aH=p($ae,"PIL.Image.Image"),$ae.forEach(a),sH=p(Ck,": PIL image object."),Ck.forEach(a),bae.forEach(a),Fp.forEach(a),nH=h(W),b(zi.$$.fragment,W),rH=h(W),Ss=o(W,"DIV",{class:!0});var p$=l(Ss);b(_f.$$.fragment,p$),oH=h(p$),l0=o(p$,"P",{});var xae=l(l0);lH=p(xae,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),xae.forEach(a),iH=h(p$),Ye=o(p$,"UL",{});var dn=l(Ye);i0=o(dn,"LI",{});var vae=l(i0);pH=p(vae,"pa.string() - it must contain the \u201Cpath\u201D data"),vae.forEach(a),cH=h(dn),p0=o(dn,"LI",{});var yae=l(p0);dH=p(yae,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),yae.forEach(a),mH=h(dn),c0=o(dn,"LI",{});var jae=l(c0);hH=p(jae,"pa.struct({\u201Cpath\u201D: pa.string()})"),jae.forEach(a),fH=h(dn),d0=o(dn,"LI",{});var wae=l(d0);uH=p(wae,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),wae.forEach(a),gH=h(dn),m0=o(dn,"LI",{});var Dae=l(m0);_H=p(Dae,"pa.list(*) - it must contain the image array data"),Dae.forEach(a),dn.forEach(a),p$.forEach(a),bH=h(W),Vi=o(W,"DIV",{class:!0});var zk=l(Vi);b(bf.$$.fragment,zk),$H=h(zk),h0=o(zk,"P",{});var kae=l(h0);xH=p(kae,"Decode example image file into image data."),kae.forEach(a),zk.forEach(a),vH=h(W),Ui=o(W,"DIV",{class:!0});var Vk=l(Ui);b($f.$$.fragment,Vk),yH=h(Vk),f0=o(Vk,"P",{});var Eae=l(f0);jH=p(Eae,"Embed image files into the Arrow array."),Eae.forEach(a),Vk.forEach(a),wH=h(W),Mi=o(W,"DIV",{class:!0});var Uk=l(Mi);b(xf.$$.fragment,Uk),DH=h(Uk),u0=o(Uk,"P",{});var qae=l(u0);kH=p(qae,"Encode example into a format for Arrow."),qae.forEach(a),Uk.forEach(a),EH=h(W),Ri=o(W,"DIV",{class:!0});var Mk=l(Ri);b(vf.$$.fragment,Mk),qH=h(Mk),g0=o(Mk,"P",{});var Iae=l(g0);IH=p(Iae,"If in the decodable state, return the feature itself, otherwise flatten the feature into a dictionary."),Iae.forEach(a),Mk.forEach(a),W.forEach(a),oD=h(s),sr=o(s,"H2",{class:!0});var Rk=l(sr);Bi=o(Rk,"A",{id:!0,class:!0,href:!0});var Tae=l(Bi);_0=o(Tae,"SPAN",{});var Nae=l(_0);b(yf.$$.fragment,Nae),Nae.forEach(a),Tae.forEach(a),TH=h(Rk),b0=o(Rk,"SPAN",{});var Pae=l(b0);NH=p(Pae,"MetricInfo"),Pae.forEach(a),Rk.forEach(a),lD=h(s),se=o(s,"DIV",{class:!0});var Pt=l(se);b(jf.$$.fragment,Pt),PH=h(Pt),$0=o(Pt,"P",{});var Aae=l($0);AH=p(Aae,"Information about a metric."),Aae.forEach(a),FH=h(Pt),h_=o(Pt,"P",{});var JY=l(h_);x0=o(JY,"CODE",{});var Fae=l(x0);LH=p(Fae,"MetricInfo"),Fae.forEach(a),SH=p(JY,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),JY.forEach(a),OH=h(Pt),v0=o(Pt,"P",{});var Lae=l(v0);CH=p(Lae,"Note: Not all fields are known on construction and may be updated later."),Lae.forEach(a),zH=h(Pt),Os=o(Pt,"DIV",{class:!0});var c$=l(Os);b(wf.$$.fragment,c$),VH=h(c$),Df=o(c$,"P",{});var Bk=l(Df);UH=p(Bk,"Create MetricInfo from the JSON file in "),y0=o(Bk,"CODE",{});var Sae=l(y0);MH=p(Sae,"metric_info_dir"),Sae.forEach(a),RH=p(Bk,"."),Bk.forEach(a),BH=h(c$),b(Gi.$$.fragment,c$),c$.forEach(a),GH=h(Pt),Cs=o(Pt,"DIV",{class:!0});var d$=l(Cs);b(kf.$$.fragment,d$),HH=h(d$),aa=o(d$,"P",{});var Lp=l(aa);WH=p(Lp,"Write "),j0=o(Lp,"CODE",{});var Oae=l(j0);YH=p(Oae,"MetricInfo"),Oae.forEach(a),JH=p(Lp," as JSON to "),w0=o(Lp,"CODE",{});var Cae=l(w0);KH=p(Cae,"metric_info_dir"),Cae.forEach(a),ZH=p(Lp,`.
Also save the license separately in LICENCE.
If `),D0=o(Lp,"CODE",{});var zae=l(D0);XH=p(zae,"pretty_print"),zae.forEach(a),QH=p(Lp," is True, the JSON will be pretty-printed with the indent level of 4."),Lp.forEach(a),eW=h(d$),b(Hi.$$.fragment,d$),d$.forEach(a),Pt.forEach(a),iD=h(s),nr=o(s,"H2",{class:!0});var Gk=l(nr);Wi=o(Gk,"A",{id:!0,class:!0,href:!0});var Vae=l(Wi);k0=o(Vae,"SPAN",{});var Uae=l(k0);b(Ef.$$.fragment,Uae),Uae.forEach(a),Vae.forEach(a),tW=h(Gk),E0=o(Gk,"SPAN",{});var Mae=l(E0);aW=p(Mae,"Metric"),Mae.forEach(a),Gk.forEach(a),pD=h(s),zs=o(s,"P",{});var m$=l(zs);sW=p(m$,"The base class "),q0=o(m$,"CODE",{});var Rae=l(q0);nW=p(Rae,"Metric"),Rae.forEach(a),rW=p(m$," implements a Metric backed by one or several "),f_=o(m$,"A",{href:!0});var Bae=l(f_);oW=p(Bae,"Dataset"),Bae.forEach(a),lW=p(m$,"."),m$.forEach(a),cD=h(s),K=o(s,"DIV",{class:!0});var Se=l(K);b(qf.$$.fragment,Se),iW=h(Se),I0=o(Se,"P",{});var Gae=l(I0);pW=p(Gae,"A Metric is the base class and common API for all metrics."),Gae.forEach(a),cW=h(Se),b(Yi.$$.fragment,Se),dW=h(Se),Vs=o(Se,"DIV",{class:!0});var h$=l(Vs);b(If.$$.fragment,h$),mW=h(h$),T0=o(h$,"P",{});var Hae=l(T0);hW=p(Hae,"Add one prediction and reference for the metric\u2019s stack."),Hae.forEach(a),fW=h(h$),b(Ji.$$.fragment,h$),h$.forEach(a),uW=h(Se),Us=o(Se,"DIV",{class:!0});var f$=l(Us);b(Tf.$$.fragment,f$),gW=h(f$),N0=o(f$,"P",{});var Wae=l(N0);_W=p(Wae,"Add a batch of predictions and references for the metric\u2019s stack."),Wae.forEach(a),bW=h(f$),b(Ki.$$.fragment,f$),f$.forEach(a),$W=h(Se),xt=o(Se,"DIV",{class:!0});var Sp=l(xt);b(Nf.$$.fragment,Sp),xW=h(Sp),P0=o(Sp,"P",{});var Yae=l(P0);vW=p(Yae,"Compute the metrics."),Yae.forEach(a),yW=h(Sp),A0=o(Sp,"P",{});var Jae=l(A0);jW=p(Jae,"Usage of positional arguments is not allowed to prevent mistakes."),Jae.forEach(a),wW=h(Sp),b(Zi.$$.fragment,Sp),Sp.forEach(a),DW=h(Se),Xi=o(Se,"DIV",{class:!0});var Hk=l(Xi);b(Pf.$$.fragment,Hk),kW=h(Hk),F0=o(Hk,"P",{});var Kae=l(F0);EW=p(Kae,"Downloads and prepares dataset for reading."),Kae.forEach(a),Hk.forEach(a),Se.forEach(a),dD=h(s),rr=o(s,"H2",{class:!0});var Wk=l(rr);Qi=o(Wk,"A",{id:!0,class:!0,href:!0});var Zae=l(Qi);L0=o(Zae,"SPAN",{});var Xae=l(L0);b(Af.$$.fragment,Xae),Xae.forEach(a),Zae.forEach(a),qW=h(Wk),S0=o(Wk,"SPAN",{});var Qae=l(S0);IW=p(Qae,"Filesystems"),Qae.forEach(a),Wk.forEach(a),mD=h(s),C=o(s,"DIV",{class:!0});var V=l(C);b(Ff.$$.fragment,V),TW=h(V),ep=o(V,"P",{});var E7=l(ep);O0=o(E7,"CODE",{});var ese=l(O0);NW=p(ese,"datasets.filesystems.S3FileSystem"),ese.forEach(a),PW=p(E7," is a subclass of "),Lf=o(E7,"A",{href:!0,rel:!0});var tse=l(Lf);C0=o(tse,"CODE",{});var ase=l(C0);AW=p(ase,"s3fs.S3FileSystem"),ase.forEach(a),tse.forEach(a),FW=p(E7,"."),E7.forEach(a),LW=h(V),sa=o(V,"P",{});var Op=l(sa);SW=p(Op,"Users can use this class to access S3 as if it were a file system. It exposes a filesystem-like API (ls, cp, open, etc.) on top of S3 storage. Provide credentials either explicitly ("),z0=o(Op,"CODE",{});var sse=l(z0);OW=p(sse,"key="),sse.forEach(a),CW=p(Op,", "),V0=o(Op,"CODE",{});var nse=l(V0);zW=p(nse,"secret="),nse.forEach(a),VW=p(Op,") or with boto\u2019s credential methods. See botocore documentation for more information. If no credentials are available, use "),U0=o(Op,"CODE",{});var rse=l(U0);UW=p(rse,"anon=True"),rse.forEach(a),MW=p(Op,"."),Op.forEach(a),RW=h(V),M0=o(V,"P",{});var ose=l(M0);BW=p(ose,"Examples:"),ose.forEach(a),GW=h(V),R0=o(V,"P",{});var lse=l(R0);HW=p(lse,"Listing files from public S3 bucket."),lse.forEach(a),WW=h(V),b(tp.$$.fragment,V),YW=h(V),or=o(V,"P",{});var u$=l(or);JW=p(u$,"Listing files from private S3 bucket using "),B0=o(u$,"CODE",{});var ise=l(B0);KW=p(ise,"aws_access_key_id"),ise.forEach(a),ZW=p(u$," and "),G0=o(u$,"CODE",{});var pse=l(G0);XW=p(pse,"aws_secret_access_key"),pse.forEach(a),QW=p(u$,"."),u$.forEach(a),eY=h(V),b(ap.$$.fragment,V),tY=h(V),na=o(V,"P",{});var Cp=l(na);aY=p(Cp,"Using "),H0=o(Cp,"CODE",{});var cse=l(H0);sY=p(cse,"S3Filesystem"),cse.forEach(a),nY=p(Cp," with "),W0=o(Cp,"CODE",{});var dse=l(W0);rY=p(dse,"botocore.session.Session"),dse.forEach(a),oY=p(Cp," and custom "),Y0=o(Cp,"CODE",{});var mse=l(Y0);lY=p(mse,"aws_profile"),mse.forEach(a),iY=p(Cp,"."),Cp.forEach(a),pY=h(V),b(sp.$$.fragment,V),cY=h(V),lr=o(V,"P",{});var g$=l(lr);dY=p(g$,"Loading dataset from S3 using "),J0=o(g$,"CODE",{});var hse=l(J0);mY=p(hse,"S3Filesystem"),hse.forEach(a),hY=p(g$," and "),u_=o(g$,"A",{href:!0});var fse=l(u_);fY=p(fse,"load_from_disk()"),fse.forEach(a),uY=p(g$,"."),g$.forEach(a),gY=h(V),b(np.$$.fragment,V),_Y=h(V),ir=o(V,"P",{});var _$=l(ir);bY=p(_$,"Saving dataset to S3 using "),K0=o(_$,"CODE",{});var use=l(K0);$Y=p(use,"S3Filesystem"),use.forEach(a),xY=p(_$," and "),g_=o(_$,"A",{href:!0});var gse=l(g_);vY=p(gse,"Dataset.save_to_disk()"),gse.forEach(a),yY=p(_$,"."),_$.forEach(a),jY=h(V),b(rp.$$.fragment,V),V.forEach(a),hD=h(s),pr=o(s,"DIV",{class:!0});var Yk=l(pr);b(Sf.$$.fragment,Yk),wY=h(Yk),cr=o(Yk,"P",{});var b$=l(cr);DY=p(b$,"preprocesses "),Z0=o(b$,"EM",{});var _se=l(Z0);kY=p(_se,"dataset_path"),_se.forEach(a),EY=p(b$," and removes remote filesystem (e.g. removing "),X0=o(b$,"CODE",{});var bse=l(X0);qY=p(bse,"s3://"),bse.forEach(a),IY=p(b$,")"),b$.forEach(a),Yk.forEach(a),fD=h(s),dr=o(s,"DIV",{class:!0});var Jk=l(dr);b(Of.$$.fragment,Jk),TY=h(Jk),Q0=o(Jk,"P",{});var $se=l(Q0);NY=p($se,"Validates if filesystem has remote protocol."),$se.forEach(a),Jk.forEach(a),uD=h(s),mr=o(s,"H2",{class:!0});var Kk=l(mr);op=o(Kk,"A",{id:!0,class:!0,href:!0});var xse=l(op);ew=o(xse,"SPAN",{});var vse=l(ew);b(Cf.$$.fragment,vse),vse.forEach(a),xse.forEach(a),PY=h(Kk),tw=o(Kk,"SPAN",{});var yse=l(tw);AY=p(yse,"Fingerprint"),yse.forEach(a),Kk.forEach(a),gD=h(s),hr=o(s,"DIV",{class:!0});var Zk=l(hr);b(zf.$$.fragment,Zk),FY=h(Zk),aw=o(Zk,"P",{});var jse=l(aw);LY=p(jse,"Hasher that accepts python objects as inputs."),jse.forEach(a),Zk.forEach(a),this.h()},h(){w(c,"name","hf:doc:metadata"),w(c,"content",JSON.stringify(soe)),w(n,"id","main-classes"),w(n,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(n,"href","#main-classes"),w(f,"class","relative group"),w(be,"id","datasets.DatasetInfo"),w(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(be,"href","#datasets.DatasetInfo"),w(Oe,"class","relative group"),w($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cr,"id","datasets.Dataset"),w(Cr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Cr,"href","#datasets.Dataset"),w(fn,"class","relative group"),w(ou,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),w(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),w(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(iu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),w(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($a,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Kr,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.__len__"),w(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),w(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format"),w(Na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(du,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format"),w(hu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(Pa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(uu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(gu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format"),w(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_u,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format"),w(bu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.reset_format"),w($u,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_transform"),w(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(La,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),w(vu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Audio"),w(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(yu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(ju,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),w(wu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Audio"),w(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Du,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(Sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ua,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xc,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(Xc,"rel","nofollow"),w(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ed,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),w(ed,"rel","nofollow"),w(Ma,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ga,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Iu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo"),w(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Nu,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit"),w(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Au,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Lu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Su,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ou,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Uu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ru,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ha,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ya,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ja,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Gu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),w(Hu,"href","/docs/datasets/package_reference/task_templates"),w(Ka,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Za,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),w(Yu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),w(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ju,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),w(Ku,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"),w(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zu,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(Xu,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),w(Qu,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),w(me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(eg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(tg,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),w(ag,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),w(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(ng,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),w(rg,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),w(fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(sl,"id","datasets.DatasetDict"),w(sl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(sl,"href","#datasets.DatasetDict"),w(Nn,"class","relative group"),w(Xa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(il,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.__len__"),w(ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(as,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ns,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(rs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(lg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.with_transform"),w(ig,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict.set_format"),w(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format"),w(cg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.reset_format"),w(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(dg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),w(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),w(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),w(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),w(ug,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Audio"),w(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(_g,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),w(bg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Audio"),w(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($g,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),w(ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ms,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),w(vg,"href","/docs/datasets/package_reference/task_templates"),w(gs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(yg,"id","package_reference_features"),w(Cl,"id","datasets.IterableDataset"),w(Cl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Cl,"href","#datasets.IterableDataset"),w(Bn,"class","relative group"),w(jg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"),w(_s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($s,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Dg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(kg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset.take"),w(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ys,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(js,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo"),w(Jl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Tg,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.NamedSplit"),w(Kl,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Og,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Rg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zl,"id","datasets.IterableDatasetDict"),w(Zl,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Zl,"href","#datasets.IterableDatasetDict"),w(Wn,"class","relative group"),w(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ws,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset.skip"),w(Gg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset.take"),w(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ds,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ks,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(qs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ts,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ii,"id","datasets.Features"),w(ii,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(ii,"href","#datasets.Features"),w(Kn,"class","relative group"),w(Wg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Value"),w(Yg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.ClassLabel"),w(Jg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Sequence"),w(Kg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Sequence"),w(Zg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Array2D"),w(Xg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Array3D"),w(Qg,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Array4D"),w(e_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Array5D"),w(t_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Audio"),w(a_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),w(s_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Translation"),w(n_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),w(Ps,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(hi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(fi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(gi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(r_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetInfo"),w(o_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),w(l_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Value"),w(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(As,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Fs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ei,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ii,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ls,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Li,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Si,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Oi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ci,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ss,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Vi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ui,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Mi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Ri,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Bi,"id","datasets.MetricInfo"),w(Bi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Bi,"href","#datasets.MetricInfo"),w(sr,"class","relative group"),w(Os,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Cs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Wi,"id","datasets.Metric"),w(Wi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Wi,"href","#datasets.Metric"),w(nr,"class","relative group"),w(f_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),w(Vs,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Us,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Xi,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(Qi,"id","datasets.filesystems.S3FileSystem"),w(Qi,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(Qi,"href","#datasets.filesystems.S3FileSystem"),w(rr,"class","relative group"),w(Lf,"href","https://s3fs.readthedocs.io/en/latest/api.html"),w(Lf,"rel","nofollow"),w(u_,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_from_disk"),w(g_,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),w(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),w(op,"id","datasets.fingerprint.Hasher"),w(op,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),w(op,"href","#datasets.fingerprint.Hasher"),w(mr,"class","relative group"),w(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(s,j){e(document.head,c),D(s,g,j),D(s,f,j),e(f,n),e(n,u),$(t,u,null),e(f,d),e(f,mn),e(mn,fa),D(s,Fr,j),D(s,Oe,j),e(Oe,be),e(be,ne),$(ua,ne,null),e(Oe,nu),e(Oe,Lr),e(Lr,Xk),D(s,q7,j),D(s,Q,j),$(zp,Q,null),e(Q,Qk),e(Q,$$),e($$,e4),e(Q,t4),e(Q,ru),e(ru,x$),e(x$,a4),e(ru,s4),e(Q,n4),e(Q,v$),e(v$,r4),e(Q,o4),e(Q,$e),$(Vp,$e,null),e($e,l4),e($e,Up),e(Up,i4),e(Up,y$),e(y$,p4),e(Up,c4),e($e,d4),e($e,j$),e(j$,m4),e($e,h4),e($e,w$),e(w$,f4),e($e,u4),$(Sr,$e,null),e(Q,g4),e(Q,ga),$(Mp,ga,null),e(ga,_4),e(ga,hn),e(hn,b4),e(hn,D$),e(D$,$4),e(hn,x4),e(hn,k$),e(k$,v4),e(hn,y4),e(ga,j4),$(Or,ga,null),D(s,I7,j),D(s,fn,j),e(fn,Cr),e(Cr,E$),$(Rp,E$,null),e(fn,w4),e(fn,q$),e(q$,D4),D(s,T7,j),D(s,zr,j),e(zr,k4),e(zr,ou),e(ou,E4),e(zr,q4),D(s,N7,j),D(s,q,j),$(Bp,q,null),e(q,I4),e(q,I$),e(I$,T4),e(q,N4),e(q,tt),$(Gp,tt,null),e(tt,P4),e(tt,T$),e(T$,A4),e(tt,F4),e(tt,N$),e(N$,P$),e(P$,L4),e(tt,S4),$(Vr,tt,null),e(q,O4),e(q,at),$(Hp,at,null),e(at,C4),e(at,A$),e(A$,z4),e(at,V4),e(at,F$),e(F$,L$),e(L$,U4),e(at,M4),$(Ur,at,null),e(q,R4),e(q,Mr),$(Wp,Mr,null),e(Mr,B4),e(Mr,S$),e(S$,G4),e(q,H4),e(q,Rr),$(Yp,Rr,null),e(Rr,W4),e(Rr,O$),e(O$,Y4),e(q,J4),e(q,xe),$(Jp,xe,null),e(xe,K4),e(xe,At),e(At,Z4),e(At,C$),e(C$,X4),e(At,Q4),e(At,z$),e(z$,e3),e(At,t3),e(At,lu),e(lu,a3),e(At,s3),e(xe,n3),e(xe,Kp),e(Kp,r3),e(Kp,V$),e(V$,o3),e(Kp,l3),e(xe,i3),e(xe,Zp),e(Zp,p3),e(Zp,U$),e(U$,c3),e(Zp,d3),e(xe,m3),$(Br,xe,null),e(q,h3),e(q,Gr),$(Xp,Gr,null),e(Gr,f3),e(Gr,Ft),e(Ft,u3),e(Ft,M$),e(M$,g3),e(Ft,_3),e(Ft,R$),e(R$,b3),e(Ft,$3),e(Ft,iu),e(iu,x3),e(Ft,v3),e(q,y3),e(q,_a),$(Qp,_a,null),e(_a,j3),e(_a,B$),e(B$,w3),e(_a,D3),$(Hr,_a,null),e(q,k3),e(q,ba),$(ec,ba,null),e(ba,E3),e(ba,G$),e(G$,q3),e(ba,I3),$(Wr,ba,null),e(q,T3),e(q,$a),$(tc,$a,null),e($a,N3),e($a,H$),e(H$,P3),e($a,A3),$(Yr,$a,null),e(q,F3),e(q,xa),$(ac,xa,null),e(xa,L3),e(xa,W$),e(W$,S3),e(xa,O3),$(Jr,xa,null),e(q,C3),e(q,va),$(sc,va,null),e(va,z3),e(va,nc),e(nc,V3),e(nc,Kr),e(Kr,U3),e(Kr,Y$),e(Y$,M3),e(Kr,R3),e(nc,B3),e(va,G3),$(Zr,va,null),e(q,H3),e(q,ya),$(rc,ya,null),e(ya,W3),e(ya,J$),e(J$,Y3),e(ya,J3),$(Xr,ya,null),e(q,K3),e(q,ja),$(oc,ja,null),e(ja,Z3),e(ja,K$),e(K$,X3),e(ja,Q3),$(Qr,ja,null),e(q,eE),e(q,st),$(lc,st,null),e(st,tE),e(st,Z$),e(Z$,aE),e(st,sE),e(st,X$),e(X$,nE),e(st,rE),$(eo,st,null),e(q,oE),e(q,wa),$(ic,wa,null),e(wa,lE),e(wa,Q$),e(Q$,iE),e(wa,pE),$(to,wa,null),e(q,cE),e(q,Da),$(pc,Da,null),e(Da,dE),e(Da,e2),e(e2,mE),e(Da,hE),$(ao,Da,null),e(q,fE),e(q,ka),$(cc,ka,null),e(ka,uE),e(ka,t2),e(t2,gE),e(ka,_E),$(so,ka,null),e(q,bE),e(q,nt),$(dc,nt,null),e(nt,$E),e(nt,a2),e(a2,xE),e(nt,vE),e(nt,un),e(un,yE),e(un,pu),e(pu,jE),e(un,wE),e(un,s2),e(s2,DE),e(un,kE),e(nt,EE),$(no,nt,null),e(q,qE),e(q,Ea),$(mc,Ea,null),e(Ea,IE),e(Ea,n2),e(n2,TE),e(Ea,NE),$(ro,Ea,null),e(q,PE),e(q,qa),$(hc,qa,null),e(qa,AE),e(qa,r2),e(r2,FE),e(qa,LE),$(oo,qa,null),e(q,SE),e(q,Ia),$(fc,Ia,null),e(Ia,OE),e(Ia,uc),e(uc,CE),e(uc,o2),e(o2,zE),e(uc,VE),e(Ia,UE),$(lo,Ia,null),e(q,ME),e(q,Ta),$(gc,Ta,null),e(Ta,RE),e(Ta,l2),e(l2,BE),e(Ta,GE),$(io,Ta,null),e(q,HE),e(q,Na),$(_c,Na,null),e(Na,WE),e(Na,i2),e(i2,YE),e(Na,JE),e(Na,bc),e(bc,KE),e(bc,cu),e(cu,ZE),e(bc,XE),e(q,QE),e(q,po),$($c,po,null),e(po,e5),e(po,gn),e(gn,t5),e(gn,p2),e(p2,a5),e(gn,s5),e(gn,c2),e(c2,n5),e(gn,r5),e(q,o5),e(q,ve),$(xc,ve,null),e(ve,l5),e(ve,Ce),e(Ce,i5),e(Ce,d2),e(d2,p5),e(Ce,c5),e(Ce,m2),e(m2,d5),e(Ce,m5),e(Ce,h2),e(h2,h5),e(Ce,f5),e(Ce,du),e(du,u5),e(Ce,g5),e(ve,_5),e(ve,ze),e(ze,b5),e(ze,f2),e(f2,$5),e(ze,x5),e(ze,u2),e(u2,v5),e(ze,y5),e(ze,g2),e(g2,j5),e(ze,w5),e(ze,_2),e(_2,D5),e(ze,k5),e(ve,E5),e(ve,b2),e(b2,q5),e(ve,I5),$(co,ve,null),e(q,T5),e(q,Pa),$(vc,Pa,null),e(Pa,N5),e(Pa,rt),e(rt,P5),e(rt,$2),e($2,A5),e(rt,F5),e(rt,x2),e(x2,L5),e(rt,S5),e(rt,mu),e(mu,O5),e(rt,C5),e(rt,hu),e(hu,z5),e(Pa,V5),$(mo,Pa,null),e(q,U5),e(q,ot),$(yc,ot,null),e(ot,M5),e(ot,jc),e(jc,R5),e(jc,v2),e(v2,B5),e(jc,G5),e(ot,H5),e(ot,fu),e(fu,W5),e(fu,y2),e(y2,Y5),e(ot,J5),$(ho,ot,null),e(q,K5),e(q,ye),$(wc,ye,null),e(ye,Z5),e(ye,Lt),e(Lt,X5),e(Lt,j2),e(j2,Q5),e(Lt,e6),e(Lt,w2),e(w2,t6),e(Lt,a6),e(Lt,D2),e(D2,s6),e(Lt,n6),e(ye,r6),e(ye,Dc),e(Dc,o6),e(Dc,uu),e(uu,l6),e(Dc,i6),e(ye,p6),e(ye,_n),e(_n,c6),e(_n,gu),e(gu,d6),e(_n,m6),e(_n,k2),e(k2,h6),e(_n,f6),e(ye,u6),$(fo,ye,null),e(q,g6),e(q,je),$(kc,je,null),e(je,_6),e(je,bn),e(bn,b6),e(bn,E2),e(E2,$6),e(bn,x6),e(bn,q2),e(q2,v6),e(bn,y6),e(je,j6),e(je,$n),e($n,w6),e($n,_u),e(_u,D6),e($n,k6),e($n,bu),e(bu,E6),e($n,q6),e(je,I6),e(je,xn),e(xn,T6),e(xn,$u),e($u,N6),e(xn,P6),e(xn,I2),e(I2,A6),e(xn,F6),e(je,L6),$(uo,je,null),e(q,S6),e(q,go),$(Ec,go,null),e(go,O6),e(go,T2),e(T2,C6),e(q,z6),e(q,lt),$(qc,lt,null),e(lt,V6),e(lt,N2),e(N2,U6),e(lt,M6),e(lt,P2),e(P2,R6),e(lt,B6),$(_o,lt,null),e(q,G6),e(q,we),$(Ic,we,null),e(we,H6),e(we,A2),e(A2,W6),e(we,Y6),e(we,Tc),e(Tc,J6),e(Tc,F2),e(F2,K6),e(Tc,Z6),e(we,X6),e(we,vn),e(vn,L2),e(L2,Q6),e(vn,e8),e(vn,S2),e(S2,t8),e(vn,a8),e(vn,de),e(de,s8),e(de,O2),e(O2,n8),e(de,r8),e(de,C2),e(C2,o8),e(de,l8),e(de,z2),e(z2,i8),e(de,p8),e(de,V2),e(V2,c8),e(de,d8),e(de,U2),e(U2,m8),e(de,h8),e(we,f8),$(bo,we,null),e(q,u8),e(q,Aa),$(Nc,Aa,null),e(Aa,g8),e(Aa,M2),e(M2,_8),e(Aa,b8),$($o,Aa,null),e(q,$8),e(q,Fa),$(Pc,Fa,null),e(Fa,x8),e(Fa,R2),e(R2,v8),e(Fa,y8),$(xo,Fa,null),e(q,j8),e(q,it),$(Ac,it,null),e(it,w8),e(it,B2),e(B2,D8),e(it,k8),e(it,G2),e(G2,E8),e(it,q8),$(vo,it,null),e(q,I8),e(q,pt),$(Fc,pt,null),e(pt,T8),e(pt,H2),e(H2,N8),e(pt,P8),e(pt,W2),e(W2,A8),e(pt,F8),$(yo,pt,null),e(q,L8),e(q,ct),$(Lc,ct,null),e(ct,S8),e(ct,Y),e(Y,O8),e(Y,Y2),e(Y2,C8),e(Y,z8),e(Y,J2),e(J2,V8),e(Y,U8),e(Y,K2),e(K2,M8),e(Y,R8),e(Y,Z2),e(Z2,B8),e(Y,G8),e(Y,X2),e(X2,H8),e(Y,W8),e(Y,Q2),e(Q2,Y8),e(Y,J8),e(Y,ex),e(ex,K8),e(Y,Z8),e(ct,X8),e(ct,Sc),e(Sc,Q8),e(Sc,tx),e(tx,eq),e(Sc,tq),e(ct,aq),$(jo,ct,null),e(q,sq),e(q,re),$(Oc,re,null),e(re,nq),e(re,yn),e(yn,rq),e(yn,ax),e(ax,oq),e(yn,lq),e(yn,sx),e(sx,iq),e(yn,pq),e(re,cq),e(re,nx),e(nx,dq),e(re,mq),e(re,Cc),e(Cc,hq),e(Cc,rx),e(rx,fq),e(Cc,uq),e(re,gq),e(re,ox),e(ox,_q),e(re,bq),$(wo,re,null),e(q,$q),e(q,La),$(zc,La,null),e(La,xq),e(La,lx),e(lx,vq),e(La,yq),$(Do,La,null),e(q,jq),e(q,dt),$(Vc,dt,null),e(dt,wq),e(dt,ix),e(ix,Dq),e(dt,kq),e(dt,St),e(St,Eq),e(St,xu),e(xu,qq),e(St,Iq),e(St,vu),e(vu,Tq),e(St,Nq),e(St,px),e(px,Pq),e(St,Aq),e(dt,Fq),$(ko,dt,null),e(q,Lq),e(q,Z),$(Uc,Z,null),e(Z,Sq),e(Z,jn),e(jn,Oq),e(jn,yu),e(yu,Cq),e(jn,zq),e(jn,cx),e(cx,Vq),e(jn,Uq),e(Z,Mq),e(Z,wn),e(wn,Rq),e(wn,ju),e(ju,Bq),e(wn,Gq),e(wn,wu),e(wu,Hq),e(wn,Wq),e(Z,Yq),e(Z,Mc),e(Mc,Jq),e(Mc,dx),e(dx,Kq),e(Mc,Zq),e(Z,Xq),$(Eo,Z,null),e(Z,Qq),$(qo,Z,null),e(Z,e9),$(Io,Z,null),e(q,t9),e(q,Sa),$(Rc,Sa,null),e(Sa,a9),e(Sa,Ot),e(Ot,s9),e(Ot,mx),e(mx,n9),e(Ot,r9),e(Ot,Du),e(Du,o9),e(Ot,l9),e(Ot,hx),e(hx,i9),e(Ot,p9),e(Sa,c9),$(To,Sa,null),e(q,d9),e(q,No),$(Bc,No,null),e(No,m9),e(No,fx),e(fx,h9),e(q,f9),e(q,Oa),$(Gc,Oa,null),e(Oa,u9),e(Oa,ux),e(ux,g9),e(Oa,_9),$(Po,Oa,null),e(q,b9),e(q,Ca),$(Hc,Ca,null),e(Ca,$9),e(Ca,Wc),e(Wc,x9),e(Wc,gx),e(gx,v9),e(Wc,y9),e(Ca,j9),$(Ao,Ca,null),e(q,w9),e(q,za),$(Yc,za,null),e(za,D9),e(za,_x),e(_x,k9),e(za,E9),$(Fo,za,null),e(q,q9),e(q,Va),$(Jc,Va,null),e(Va,I9),e(Va,bx),e(bx,T9),e(Va,N9),$(Lo,Va,null),e(q,P9),e(q,Ua),$(Kc,Ua,null),e(Ua,A9),e(Ua,$x),e($x,F9),e(Ua,L9),$(So,Ua,null),e(q,S9),e(q,mt),$(Zc,mt,null),e(mt,O9),e(mt,Dn),e(Dn,C9),e(Dn,xx),e(xx,z9),e(Dn,V9),e(Dn,vx),e(vx,U9),e(Dn,M9),e(mt,R9),e(mt,yx),e(yx,ku),e(ku,B9),e(ku,Xc),e(Xc,G9),e(mt,H9),$(Oo,mt,null),e(q,W9),e(q,Ma),$(Qc,Ma,null),e(Ma,Y9),e(Ma,Ct),e(Ct,J9),e(Ct,jx),e(jx,K9),e(Ct,Z9),e(Ct,wx),e(wx,X9),e(Ct,Q9),e(Ct,Dx),e(Dx,eI),e(Ct,tI),e(Ma,aI),e(Ma,kx),e(kx,Eu),e(Eu,sI),e(Eu,ed),e(ed,nI),e(q,rI),e(q,Co),$(td,Co,null),e(Co,oI),e(Co,Ex),e(Ex,lI),e(q,iI),e(q,Ra),$(ad,Ra,null),e(Ra,pI),e(Ra,qx),e(qx,cI),e(Ra,dI),e(Ra,sd),e(sd,mI),e(sd,Ix),e(Ix,hI),e(sd,fI),e(q,uI),e(q,Ba),$(nd,Ba,null),e(Ba,gI),e(Ba,Tx),e(Tx,_I),e(Ba,bI),$(zo,Ba,null),e(q,$I),e(q,Ga),$(rd,Ga,null),e(Ga,xI),e(Ga,Nx),e(Nx,vI),e(Ga,yI),$(Vo,Ga,null),e(q,jI),e(q,Uo),$(od,Uo,null),e(Uo,wI),e(Uo,Px),e(Px,DI),e(q,kI),e(q,Mo),$(ld,Mo,null),e(Mo,EI),e(Mo,Ax),e(Ax,qI),e(q,II),e(q,Ro),$(id,Ro,null),e(Ro,TI),e(Ro,Fx),e(Fx,NI),e(q,PI),e(q,Bo),$(pd,Bo,null),e(Bo,AI),e(Bo,Lx),e(Lx,FI),e(q,LI),e(q,Go),$(cd,Go,null),e(Go,SI),e(Go,Sx),e(Sx,OI),e(q,CI),e(q,Ho),$(dd,Ho,null),e(Ho,zI),e(Ho,Ox),e(Ox,VI),e(q,UI),e(q,Wo),$(md,Wo,null),e(Wo,MI),e(Wo,Cx),e(Cx,RI),e(q,BI),e(q,Yo),$(hd,Yo,null),e(Yo,GI),e(Yo,qu),e(qu,Iu),e(Iu,HI),e(qu,WI),e(q,YI),e(q,Jo),$(fd,Jo,null),e(Jo,JI),e(Jo,Tu),e(Tu,Nu),e(Nu,KI),e(Tu,ZI),e(q,XI),e(q,Pu),$(ud,Pu,null),e(q,QI),e(q,Au),$(gd,Au,null),e(q,eT),e(q,Fu),$(_d,Fu,null),e(q,tT),e(q,Lu),$(bd,Lu,null),e(q,aT),e(q,Su),$($d,Su,null),e(q,sT),e(q,Ou),$(xd,Ou,null),e(q,nT),e(q,Cu),$(vd,Cu,null),e(q,rT),e(q,zu),$(yd,zu,null),e(q,oT),e(q,Vu),$(jd,Vu,null),e(q,lT),e(q,Uu),$(wd,Uu,null),e(q,iT),e(q,Mu),$(Dd,Mu,null),e(q,pT),e(q,Ru),$(kd,Ru,null),e(q,cT),e(q,Bu),$(Ed,Bu,null),e(q,dT),e(q,Ha),$(qd,Ha,null),e(Ha,mT),e(Ha,zx),e(zx,hT),e(Ha,fT),$(Ko,Ha,null),e(q,uT),e(q,Wa),$(Id,Wa,null),e(Wa,gT),e(Wa,Vx),e(Vx,_T),e(Wa,bT),$(Zo,Wa,null),e(q,$T),e(q,Ya),$(Td,Ya,null),e(Ya,xT),e(Ya,Ux),e(Ux,vT),e(Ya,yT),$(Xo,Ya,null),e(q,jT),e(q,Ja),$(Nd,Ja,null),e(Ja,wT),e(Ja,Mx),e(Mx,DT),e(Ja,kT),$(Qo,Ja,null),e(q,ET),e(q,Ka),$(Pd,Ka,null),e(Ka,qT),e(Ka,kn),e(kn,IT),e(kn,Gu),e(Gu,TT),e(kn,NT),e(kn,Hu),e(Hu,PT),e(kn,AT),e(Ka,FT),e(Ka,En),e(En,LT),e(En,Rx),e(Rx,ST),e(En,OT),e(En,Bx),e(Bx,CT),e(En,zT),e(q,VT),e(q,Za),$(Ad,Za,null),e(Za,UT),e(Za,Fd),e(Fd,MT),e(Fd,Gx),e(Gx,RT),e(Fd,BT),e(Za,GT),$(el,Za,null),D(s,P7,j),D(s,zt,j),$(Ld,zt,null),e(zt,HT),e(zt,qn),e(qn,WT),e(qn,Wu),e(Wu,YT),e(qn,JT),e(qn,Yu),e(Yu,KT),e(qn,ZT),e(zt,XT),$(tl,zt,null),D(s,A7,j),D(s,ee,j),$(Sd,ee,null),e(ee,QT),e(ee,Hx),e(Hx,eN),e(ee,tN),e(ee,In),e(In,aN),e(In,Ju),e(Ju,sN),e(In,nN),e(In,Ku),e(Ku,rN),e(In,oN),e(ee,lN),e(ee,Ve),e(Ve,iN),e(Ve,Wx),e(Wx,pN),e(Ve,cN),e(Ve,Yx),e(Yx,dN),e(Ve,mN),e(Ve,Jx),e(Jx,hN),e(Ve,fN),e(Ve,Kx),e(Kx,uN),e(Ve,gN),e(ee,_N),e(ee,Tn),e(Tn,bN),e(Tn,Zx),e(Zx,$N),e(Tn,xN),e(Tn,Xx),e(Xx,vN),e(Tn,yN),e(ee,jN),$(al,ee,null),D(s,F7,j),D(s,me,j),$(Od,me,null),e(me,wN),e(me,Qx),e(Qx,DN),e(me,kN),e(me,e1),e(e1,EN),e(me,qN),e(me,t1),e(t1,IN),e(me,TN),e(me,Ue),e(Ue,a1),e(a1,NN),e(Ue,PN),e(Ue,s1),e(s1,AN),e(Ue,FN),e(Ue,n1),e(n1,LN),e(Ue,SN),e(Ue,Cd),e(Cd,ON),e(Cd,Zu),e(Zu,CN),e(Cd,zN),e(Ue,VN),e(Ue,Vt),e(Vt,UN),e(Vt,Xu),e(Xu,MN),e(Vt,RN),e(Vt,r1),e(r1,BN),e(Vt,GN),e(Vt,Qu),e(Qu,HN),e(Vt,WN),D(s,L7,j),D(s,he,j),$(zd,he,null),e(he,YN),e(he,o1),e(o1,JN),e(he,KN),e(he,l1),e(l1,ZN),e(he,XN),e(he,i1),e(i1,QN),e(he,eP),e(he,Me),e(Me,p1),e(p1,tP),e(Me,aP),e(Me,c1),e(c1,sP),e(Me,nP),e(Me,d1),e(d1,rP),e(Me,oP),e(Me,Vd),e(Vd,lP),e(Vd,eg),e(eg,iP),e(Vd,pP),e(Me,cP),e(Me,Ut),e(Ut,dP),e(Ut,tg),e(tg,mP),e(Ut,hP),e(Ut,m1),e(m1,fP),e(Ut,uP),e(Ut,ag),e(ag,gP),e(Ut,_P),D(s,S7,j),D(s,fe,j),$(Ud,fe,null),e(fe,bP),e(fe,h1),e(h1,$P),e(fe,xP),e(fe,f1),e(f1,vP),e(fe,yP),e(fe,u1),e(u1,jP),e(fe,wP),e(fe,Re),e(Re,g1),e(g1,DP),e(Re,kP),e(Re,_1),e(_1,EP),e(Re,qP),e(Re,b1),e(b1,IP),e(Re,TP),e(Re,Md),e(Md,NP),e(Md,sg),e(sg,PP),e(Md,AP),e(Re,FP),e(Re,Mt),e(Mt,LP),e(Mt,ng),e(ng,SP),e(Mt,OP),e(Mt,$1),e($1,CP),e(Mt,zP),e(Mt,rg),e(rg,VP),e(Mt,UP),D(s,O7,j),D(s,Nn,j),e(Nn,sl),e(sl,x1),$(Rd,x1,null),e(Nn,MP),e(Nn,v1),e(v1,RP),D(s,C7,j),D(s,nl,j),e(nl,BP),e(nl,y1),e(y1,GP),e(nl,HP),D(s,z7,j),D(s,A,j),$(Bd,A,null),e(A,WP),e(A,j1),e(j1,YP),e(A,JP),e(A,Xa),$(Gd,Xa,null),e(Xa,KP),e(Xa,w1),e(w1,ZP),e(Xa,XP),$(rl,Xa,null),e(A,QP),e(A,Qa),$(Hd,Qa,null),e(Qa,eA),e(Qa,D1),e(D1,tA),e(Qa,aA),$(ol,Qa,null),e(A,sA),e(A,es),$(Wd,es,null),e(es,nA),e(es,k1),e(k1,rA),e(es,oA),$(ll,es,null),e(A,lA),e(A,ts),$(Yd,ts,null),e(ts,iA),e(ts,Jd),e(Jd,pA),e(Jd,il),e(il,cA),e(il,E1),e(E1,dA),e(il,mA),e(Jd,hA),e(ts,fA),$(pl,ts,null),e(A,uA),e(A,as),$(Kd,as,null),e(as,gA),e(as,q1),e(q1,_A),e(as,bA),$(cl,as,null),e(A,$A),e(A,ss),$(Zd,ss,null),e(ss,xA),e(ss,I1),e(I1,vA),e(ss,yA),$(dl,ss,null),e(A,jA),e(A,ht),$(Xd,ht,null),e(ht,wA),e(ht,T1),e(T1,DA),e(ht,kA),e(ht,N1),e(N1,EA),e(ht,qA),$(ml,ht,null),e(A,IA),e(A,ns),$(Qd,ns,null),e(ns,TA),e(ns,P1),e(P1,NA),e(ns,PA),$(hl,ns,null),e(A,AA),e(A,rs),$(em,rs,null),e(rs,FA),e(rs,A1),e(A1,LA),e(rs,SA),$(fl,rs,null),e(A,OA),e(A,os),$(tm,os,null),e(os,CA),e(os,F1),e(F1,zA),e(os,VA),$(ul,os,null),e(A,UA),e(A,ft),$(am,ft,null),e(ft,MA),e(ft,L1),e(L1,RA),e(ft,BA),e(ft,S1),e(S1,GA),e(ft,HA),$(gl,ft,null),e(A,WA),e(A,De),$(sm,De,null),e(De,YA),e(De,O1),e(O1,JA),e(De,KA),e(De,C1),e(C1,ZA),e(De,XA),e(De,z1),e(z1,QA),e(De,eF),$(_l,De,null),e(A,tF),e(A,ke),$(nm,ke,null),e(ke,aF),e(ke,rm),e(rm,sF),e(rm,V1),e(V1,nF),e(rm,rF),e(ke,oF),e(ke,Be),e(Be,lF),e(Be,U1),e(U1,iF),e(Be,pF),e(Be,M1),e(M1,cF),e(Be,dF),e(Be,R1),e(R1,mF),e(Be,hF),e(Be,B1),e(B1,fF),e(Be,uF),e(ke,gF),e(ke,G1),e(G1,_F),e(ke,bF),$(bl,ke,null),e(A,$F),e(A,ut),$(om,ut,null),e(ut,xF),e(ut,lm),e(lm,vF),e(lm,H1),e(H1,yF),e(lm,jF),e(ut,wF),e(ut,og),e(og,DF),e(og,W1),e(W1,kF),e(ut,EF),$($l,ut,null),e(A,qF),e(A,xl),$(im,xl,null),e(xl,IF),e(xl,Pn),e(Pn,TF),e(Pn,Y1),e(Y1,NF),e(Pn,PF),e(Pn,J1),e(J1,AF),e(Pn,FF),e(A,LF),e(A,Ee),$(pm,Ee,null),e(Ee,SF),e(Ee,Rt),e(Rt,OF),e(Rt,K1),e(K1,CF),e(Rt,zF),e(Rt,Z1),e(Z1,VF),e(Rt,UF),e(Rt,X1),e(X1,MF),e(Rt,RF),e(Ee,BF),e(Ee,cm),e(cm,GF),e(cm,lg),e(lg,HF),e(cm,WF),e(Ee,YF),e(Ee,An),e(An,JF),e(An,ig),e(ig,KF),e(An,ZF),e(An,Q1),e(Q1,XF),e(An,QF),e(Ee,eL),$(vl,Ee,null),e(A,tL),e(A,qe),$(dm,qe,null),e(qe,aL),e(qe,Fn),e(Fn,sL),e(Fn,ev),e(ev,nL),e(Fn,rL),e(Fn,tv),e(tv,oL),e(Fn,lL),e(qe,iL),e(qe,Ln),e(Ln,pL),e(Ln,pg),e(pg,cL),e(Ln,dL),e(Ln,cg),e(cg,mL),e(Ln,hL),e(qe,fL),e(qe,Sn),e(Sn,uL),e(Sn,av),e(av,gL),e(Sn,_L),e(Sn,sv),e(sv,bL),e(Sn,$L),e(qe,xL),$(yl,qe,null),e(A,vL),e(A,ls),$(mm,ls,null),e(ls,yL),e(ls,nv),e(nv,jL),e(ls,wL),$(jl,ls,null),e(A,DL),e(A,gt),$(hm,gt,null),e(gt,kL),e(gt,rv),e(rv,EL),e(gt,qL),e(gt,Bt),e(Bt,IL),e(Bt,dg),e(dg,TL),e(Bt,NL),e(Bt,ov),e(ov,PL),e(Bt,AL),e(Bt,lv),e(lv,FL),e(Bt,LL),e(gt,SL),$(wl,gt,null),e(A,OL),e(A,is),$(fm,is,null),e(is,CL),e(is,iv),e(iv,zL),e(is,VL),$(Dl,is,null),e(A,UL),e(A,Ie),$(um,Ie,null),e(Ie,ML),e(Ie,pv),e(pv,RL),e(Ie,BL),e(Ie,cv),e(cv,GL),e(Ie,HL),e(Ie,On),e(On,WL),e(On,mg),e(mg,YL),e(On,JL),e(On,dv),e(dv,KL),e(On,ZL),e(Ie,XL),$(kl,Ie,null),e(A,QL),e(A,Te),$(gm,Te,null),e(Te,eS),e(Te,mv),e(mv,tS),e(Te,aS),e(Te,Cn),e(Cn,sS),e(Cn,hg),e(hg,nS),e(Cn,rS),e(Cn,hv),e(hv,oS),e(Cn,lS),e(Te,iS),e(Te,_m),e(_m,fv),e(fv,pS),e(_m,cS),e(_m,uv),e(uv,dS),e(Te,mS),$(El,Te,null),e(A,hS),e(A,ps),$(bm,ps,null),e(ps,fS),e(ps,gv),e(gv,uS),e(ps,gS),$(ql,ps,null),e(A,_S),e(A,cs),$($m,cs,null),e(cs,bS),e(cs,xm),e(xm,$S),e(xm,_v),e(_v,xS),e(xm,vS),e(cs,yS),$(Il,cs,null),e(A,jS),e(A,Ne),$(vm,Ne,null),e(Ne,wS),e(Ne,zn),e(zn,DS),e(zn,bv),e(bv,kS),e(zn,ES),e(zn,$v),e($v,qS),e(zn,IS),e(Ne,TS),e(Ne,xv),e(xv,NS),e(Ne,PS),e(Ne,Gt),e(Gt,AS),e(Gt,fg),e(fg,FS),e(Gt,LS),e(Gt,ug),e(ug,SS),e(Gt,OS),e(Gt,vv),e(vv,CS),e(Gt,zS),e(Ne,VS),$(Tl,Ne,null),e(A,US),e(A,oe),$(ym,oe,null),e(oe,MS),e(oe,Vn),e(Vn,RS),e(Vn,gg),e(gg,BS),e(Vn,GS),e(Vn,yv),e(yv,HS),e(Vn,WS),e(oe,YS),e(oe,Un),e(Un,JS),e(Un,_g),e(_g,KS),e(Un,ZS),e(Un,bg),e(bg,XS),e(Un,QS),e(oe,eO),e(oe,jm),e(jm,tO),e(jm,jv),e(jv,aO),e(jm,sO),e(oe,nO),$(Nl,oe,null),e(oe,rO),$(Pl,oe,null),e(A,oO),e(A,ds),$(wm,ds,null),e(ds,lO),e(ds,Ht),e(Ht,iO),e(Ht,wv),e(wv,pO),e(Ht,cO),e(Ht,$g),e($g,dO),e(Ht,mO),e(Ht,Dv),e(Dv,hO),e(Ht,fO),e(ds,uO),$(Al,ds,null),e(A,gO),e(A,ms),$(Dm,ms,null),e(ms,_O),e(ms,kv),e(kv,bO),e(ms,$O),$(Fl,ms,null),e(A,xO),e(A,hs),$(km,hs,null),e(hs,vO),e(hs,Ev),e(Ev,yO),e(hs,jO),$(Ll,hs,null),e(A,wO),e(A,fs),$(Em,fs,null),e(fs,DO),e(fs,qv),e(qv,kO),e(fs,EO),$(Sl,fs,null),e(A,qO),e(A,us),$(qm,us,null),e(us,IO),e(us,Iv),e(Iv,TO),e(us,NO),$(Ol,us,null),e(A,PO),e(A,gs),$(Im,gs,null),e(gs,AO),e(gs,Mn),e(Mn,FO),e(Mn,xg),e(xg,LO),e(Mn,SO),e(Mn,vg),e(vg,OO),e(Mn,CO),e(gs,zO),e(gs,Rn),e(Rn,VO),e(Rn,Tv),e(Tv,UO),e(Rn,MO),e(Rn,Nv),e(Nv,RO),e(Rn,BO),D(s,V7,j),D(s,yg,j),D(s,U7,j),D(s,Bn,j),e(Bn,Cl),e(Cl,Pv),$(Tm,Pv,null),e(Bn,GO),e(Bn,Av),e(Av,HO),D(s,M7,j),D(s,zl,j),e(zl,WO),e(zl,jg),e(jg,YO),e(zl,JO),D(s,R7,j),D(s,L,j),$(Nm,L,null),e(L,KO),e(L,Fv),e(Fv,ZO),e(L,XO),e(L,_s),$(Pm,_s,null),e(_s,QO),e(_s,Lv),e(Lv,eC),e(_s,tC),$(Vl,_s,null),e(L,aC),e(L,bs),$(Am,bs,null),e(bs,sC),e(bs,Sv),e(Sv,nC),e(bs,rC),$(Ul,bs,null),e(L,oC),e(L,$s),$(Fm,$s,null),e($s,lC),e($s,Ov),e(Ov,iC),e($s,pC),$(Ml,$s,null),e(L,cC),e(L,wg),$(Lm,wg,null),e(L,dC),e(L,Pe),$(Sm,Pe,null),e(Pe,mC),e(Pe,Cv),e(Cv,hC),e(Pe,fC),e(Pe,Om),e(Om,uC),e(Om,zv),e(zv,gC),e(Om,_C),e(Pe,bC),e(Pe,Gn),e(Gn,Vv),e(Vv,$C),e(Gn,xC),e(Gn,Uv),e(Uv,vC),e(Gn,yC),e(Gn,ue),e(ue,jC),e(ue,Mv),e(Mv,wC),e(ue,DC),e(ue,Rv),e(Rv,kC),e(ue,EC),e(ue,Bv),e(Bv,qC),e(ue,IC),e(ue,Gv),e(Gv,TC),e(ue,NC),e(ue,Hv),e(Hv,PC),e(ue,AC),e(Pe,FC),$(Rl,Pe,null),e(L,LC),e(L,xs),$(Cm,xs,null),e(xs,SC),e(xs,Wv),e(Wv,OC),e(xs,CC),$(Bl,xs,null),e(L,zC),e(L,vs),$(zm,vs,null),e(vs,VC),e(vs,Yv),e(Yv,UC),e(vs,MC),$(Gl,vs,null),e(L,RC),e(L,le),$(Vm,le,null),e(le,BC),e(le,Jv),e(Jv,GC),e(le,HC),e(le,Kv),e(Kv,WC),e(le,YC),e(le,Um),e(Um,JC),e(Um,Zv),e(Zv,KC),e(Um,ZC),e(le,XC),e(le,Hn),e(Hn,QC),e(Hn,Dg),e(Dg,ez),e(Hn,tz),e(Hn,kg),e(kg,az),e(Hn,sz),e(le,nz),$(Hl,le,null),e(L,rz),e(L,ys),$(Mm,ys,null),e(ys,oz),e(ys,Rm),e(Rm,lz),e(Rm,Xv),e(Xv,iz),e(Rm,pz),e(ys,cz),$(Wl,ys,null),e(L,dz),e(L,js),$(Bm,js,null),e(js,mz),e(js,Gm),e(Gm,hz),e(Gm,Qv),e(Qv,fz),e(Gm,uz),e(js,gz),$(Yl,js,null),e(L,_z),e(L,Jl),$(Hm,Jl,null),e(Jl,bz),e(Jl,Eg),e(Eg,qg),e(qg,$z),e(Eg,xz),e(L,vz),e(L,Kl),$(Wm,Kl,null),e(Kl,yz),e(Kl,Ig),e(Ig,Tg),e(Tg,jz),e(Ig,wz),e(L,Dz),e(L,Ng),$(Ym,Ng,null),e(L,kz),e(L,Pg),$(Jm,Pg,null),e(L,Ez),e(L,Ag),$(Km,Ag,null),e(L,qz),e(L,Fg),$(Zm,Fg,null),e(L,Iz),e(L,Lg),$(Xm,Lg,null),e(L,Tz),e(L,Sg),$(Qm,Sg,null),e(L,Nz),e(L,Og),$(eh,Og,null),e(L,Pz),e(L,Cg),$(th,Cg,null),e(L,Az),e(L,zg),$(ah,zg,null),e(L,Fz),e(L,Vg),$(sh,Vg,null),e(L,Lz),e(L,Ug),$(nh,Ug,null),e(L,Sz),e(L,Mg),$(rh,Mg,null),e(L,Oz),e(L,Rg),$(oh,Rg,null),D(s,B7,j),D(s,Wn,j),e(Wn,Zl),e(Zl,ey),$(lh,ey,null),e(Wn,Cz),e(Wn,ty),e(ty,zz),D(s,G7,j),D(s,Xl,j),e(Xl,Vz),e(Xl,ay),e(ay,Uz),e(Xl,Mz),D(s,H7,j),D(s,U,j),$(ih,U,null),e(U,Rz),e(U,Ae),$(ph,Ae,null),e(Ae,Bz),e(Ae,sy),e(sy,Gz),e(Ae,Hz),e(Ae,ch),e(ch,Wz),e(ch,ny),e(ny,Yz),e(ch,Jz),e(Ae,Kz),e(Ae,Yn),e(Yn,ry),e(ry,Zz),e(Yn,Xz),e(Yn,oy),e(oy,Qz),e(Yn,eV),e(Yn,ge),e(ge,tV),e(ge,ly),e(ly,aV),e(ge,sV),e(ge,iy),e(iy,nV),e(ge,rV),e(ge,py),e(py,oV),e(ge,lV),e(ge,cy),e(cy,iV),e(ge,pV),e(ge,dy),e(dy,cV),e(ge,dV),e(Ae,mV),$(Ql,Ae,null),e(U,hV),e(U,ws),$(dh,ws,null),e(ws,fV),e(ws,my),e(my,uV),e(ws,gV),$(ei,ws,null),e(U,_V),e(U,ie),$(mh,ie,null),e(ie,bV),e(ie,hy),e(hy,$V),e(ie,xV),e(ie,fy),e(fy,vV),e(ie,yV),e(ie,hh),e(hh,jV),e(hh,uy),e(uy,wV),e(hh,DV),e(ie,kV),e(ie,Jn),e(Jn,EV),e(Jn,Bg),e(Bg,qV),e(Jn,IV),e(Jn,Gg),e(Gg,TV),e(Jn,NV),e(ie,PV),$(ti,ie,null),e(U,AV),e(U,Ds),$(fh,Ds,null),e(Ds,FV),e(Ds,gy),e(gy,LV),e(Ds,SV),$(ai,Ds,null),e(U,OV),e(U,ks),$(uh,ks,null),e(ks,CV),e(ks,_y),e(_y,zV),e(ks,VV),$(si,ks,null),e(U,UV),e(U,Es),$(gh,Es,null),e(Es,MV),e(Es,by),e(by,RV),e(Es,BV),$(ni,Es,null),e(U,GV),e(U,qs),$(_h,qs,null),e(qs,HV),e(qs,$y),e($y,WV),e(qs,YV),$(ri,qs,null),e(U,JV),e(U,Is),$(bh,Is,null),e(Is,KV),e(Is,xy),e(xy,ZV),e(Is,XV),$(oi,Is,null),e(U,QV),e(U,Ts),$($h,Ts,null),e(Ts,eU),e(Ts,vy),e(vy,tU),e(Ts,aU),$(li,Ts,null),D(s,W7,j),D(s,Kn,j),e(Kn,ii),e(ii,yy),$(xh,yy,null),e(Kn,sU),e(Kn,jy),e(jy,nU),D(s,Y7,j),D(s,O,j),$(vh,O,null),e(O,rU),e(O,wy),e(wy,oU),e(O,lU),e(O,yh),e(yh,iU),e(yh,Dy),e(Dy,pU),e(yh,cU),e(O,dU),e(O,Hg),e(Hg,ky),e(ky,mU),e(Hg,hU),e(O,fU),e(O,J),e(J,Ey),e(Ey,Ns),e(Ns,uU),e(Ns,Wg),e(Wg,gU),e(Ns,_U),e(Ns,qy),e(qy,bU),e(Ns,$U),e(Ns,Iy),e(Iy,xU),e(J,vU),e(J,Ty),e(Ty,jh),e(jh,yU),e(jh,Yg),e(Yg,jU),e(jh,wU),e(J,DU),e(J,Ny),e(Ny,wh),e(wh,kU),e(wh,Py),e(Py,EU),e(wh,qU),e(J,IU),e(J,Dh),e(Dh,Ge),e(Ge,TU),e(Ge,Ay),e(Ay,NU),e(Ge,PU),e(Ge,Jg),e(Jg,AU),e(Ge,FU),e(Ge,Fy),e(Fy,LU),e(Ge,SU),e(Ge,Kg),e(Kg,OU),e(Ge,CU),e(Dh,zU),$(pi,Dh,null),e(J,VU),e(J,Ly),e(Ly,He),e(He,UU),e(He,Zg),e(Zg,MU),e(He,RU),e(He,Xg),e(Xg,BU),e(He,GU),e(He,Qg),e(Qg,HU),e(He,WU),e(He,e_),e(e_,YU),e(He,JU),e(J,KU),e(J,Sy),e(Sy,kh),e(kh,ZU),e(kh,t_),e(t_,XU),e(kh,QU),e(J,eM),e(J,Oy),e(Oy,Wt),e(Wt,tM),e(Wt,a_),e(a_,aM),e(Wt,sM),e(Wt,Cy),e(Cy,nM),e(Wt,rM),e(Wt,zy),e(zy,oM),e(Wt,lM),e(J,iM),e(J,Vy),e(Vy,ci),e(ci,s_),e(s_,pM),e(ci,cM),e(ci,n_),e(n_,dM),e(ci,mM),e(O,hM),e(O,Ps),$(Eh,Ps,null),e(Ps,fM),e(Ps,Uy),e(Uy,uM),e(Ps,gM),$(di,Ps,null),e(O,_M),e(O,mi),$(qh,mi,null),e(mi,bM),e(mi,My),e(My,$M),e(O,xM),e(O,hi),$(Ih,hi,null),e(hi,vM),e(hi,Ry),e(Ry,yM),e(O,jM),e(O,fi),$(Th,fi,null),e(fi,wM),e(fi,By),e(By,DM),e(O,kM),e(O,ui),$(Nh,ui,null),e(ui,EM),e(ui,Gy),e(Gy,qM),e(O,IM),e(O,gi),$(Ph,gi,null),e(gi,TM),e(gi,Hy),e(Hy,NM),e(O,PM),e(O,_t),$(Ah,_t,null),e(_t,AM),e(_t,Wy),e(Wy,FM),e(_t,LM),e(_t,Yy),e(Yy,SM),e(_t,OM),$(_i,_t,null),e(O,CM),e(O,bi),$(Fh,bi,null),e(bi,zM),e(bi,Jy),e(Jy,VM),e(O,UM),e(O,Fe),$(Lh,Fe,null),e(Fe,MM),e(Fe,Ky),e(Ky,RM),e(Fe,BM),e(Fe,Zy),e(Zy,GM),e(Fe,HM),e(Fe,Yt),e(Yt,WM),e(Yt,r_),e(r_,YM),e(Yt,JM),e(Yt,o_),e(o_,KM),e(Yt,ZM),e(Yt,l_),e(l_,XM),e(Yt,QM),e(Fe,eR),$($i,Fe,null),e(O,tR),e(O,bt),$(Sh,bt,null),e(bt,aR),e(bt,Xy),e(Xy,sR),e(bt,nR),e(bt,Qy),e(Qy,rR),e(bt,oR),$(xi,bt,null),D(s,J7,j),D(s,Jt,j),$(Oh,Jt,null),e(Jt,lR),e(Jt,ej),e(ej,iR),e(Jt,pR),$(vi,Jt,null),D(s,K7,j),D(s,B,j),$(Ch,B,null),e(B,cR),e(B,tj),e(tj,dR),e(B,mR),e(B,zh),e(zh,hR),e(zh,aj),e(aj,fR),e(zh,uR),e(B,gR),e(B,Zn),e(Zn,i_),e(i_,sj),e(sj,_R),e(i_,bR),e(Zn,$R),e(Zn,p_),e(p_,nj),e(nj,xR),e(p_,vR),e(Zn,yR),e(Zn,c_),e(c_,rj),e(rj,jR),e(c_,wR),e(B,DR),e(B,oj),e(oj,kR),e(B,ER),$(yi,B,null),e(B,qR),e(B,As),$(Vh,As,null),e(As,IR),e(As,lj),e(lj,TR),e(As,NR),e(As,Uh),e(Uh,ij),e(ij,PR),e(Uh,AR),e(Uh,pj),e(pj,FR),e(B,LR),e(B,$t),$(Mh,$t,null),e($t,SR),e($t,cj),e(cj,OR),e($t,CR),e($t,dj),e(dj,zR),e($t,VR),$(ji,$t,null),e(B,UR),e(B,Fs),$(Rh,Fs,null),e(Fs,MR),e(Fs,mj),e(mj,RR),e(Fs,BR),$(wi,Fs,null),D(s,Z7,j),D(s,We,j),$(Bh,We,null),e(We,GR),e(We,hj),e(hj,HR),e(We,WR),e(We,fj),e(fj,YR),e(We,JR),$(Di,We,null),D(s,X7,j),D(s,te,j),$(Gh,te,null),e(te,KR),e(te,d_),e(d_,uj),e(uj,ZR),e(d_,XR),e(te,QR),e(te,gj),e(gj,eB),e(te,tB),e(te,Hh),e(Hh,aB),e(Hh,_j),e(_j,sB),e(Hh,nB),e(te,rB),$(ki,te,null),e(te,oB),e(te,Ei),$(Wh,Ei,null),e(Ei,lB),e(Ei,bj),e(bj,iB),D(s,Q7,j),D(s,ae,j),$(Yh,ae,null),e(ae,pB),e(ae,m_),e(m_,$j),e($j,cB),e(m_,dB),e(ae,mB),e(ae,xj),e(xj,hB),e(ae,fB),e(ae,vj),e(vj,uB),e(ae,gB),$(qi,ae,null),e(ae,_B),e(ae,Ii),$(Jh,Ii,null),e(Ii,bB),e(Ii,yj),e(yj,$B),D(s,eD,j),D(s,Kt,j),$(Kh,Kt,null),e(Kt,xB),e(Kt,jj),e(jj,vB),e(Kt,yB),$(Ti,Kt,null),D(s,tD,j),D(s,Zt,j),$(Zh,Zt,null),e(Zt,jB),e(Zt,wj),e(wj,wB),e(Zt,DB),$(Ni,Zt,null),D(s,aD,j),D(s,Xt,j),$(Xh,Xt,null),e(Xt,kB),e(Xt,Dj),e(Dj,EB),e(Xt,qB),$(Pi,Xt,null),D(s,sD,j),D(s,Qt,j),$(Qh,Qt,null),e(Qt,IB),e(Qt,kj),e(kj,TB),e(Qt,NB),$(Ai,Qt,null),D(s,nD,j),D(s,M,j),$(ef,M,null),e(M,PB),e(M,Ej),e(Ej,AB),e(M,FB),e(M,qj),e(qj,LB),e(M,SB),e(M,Xn),e(Xn,Ij),e(Ij,tf),e(tf,OB),e(tf,Tj),e(Tj,CB),e(tf,zB),e(Xn,VB),e(Xn,Qn),e(Qn,af),e(af,UB),e(af,Nj),e(Nj,MB),e(af,RB),e(Qn,BB),e(Qn,sf),e(sf,Pj),e(Pj,GB),e(sf,HB),e(sf,Aj),e(Aj,WB),e(Qn,YB),e(Qn,Fj),e(Fj,JB),e(Xn,KB),e(Xn,er),e(er,nf),e(nf,ZB),e(nf,Lj),e(Lj,XB),e(nf,QB),e(er,eG),e(er,tr),e(tr,Sj),e(Sj,tG),e(tr,aG),e(tr,Oj),e(Oj,sG),e(tr,nG),e(tr,Cj),e(Cj,rG),e(er,oG),e(er,zj),e(zj,lG),e(M,iG),$(Fi,M,null),e(M,pG),e(M,Ls),$(rf,Ls,null),e(Ls,cG),e(Ls,Vj),e(Vj,dG),e(Ls,mG),e(Ls,ea),e(ea,Uj),e(Uj,hG),e(ea,fG),e(ea,Mj),e(Mj,uG),e(ea,gG),e(ea,Rj),e(Rj,_G),e(ea,bG),e(ea,Bj),e(Bj,$G),e(M,xG),e(M,Li),$(of,Li,null),e(Li,vG),e(Li,Gj),e(Gj,yG),e(M,jG),e(M,Si),$(lf,Si,null),e(Si,wG),e(Si,Hj),e(Hj,DG),e(M,kG),e(M,Oi),$(pf,Oi,null),e(Oi,EG),e(Oi,Wj),e(Wj,qG),e(M,IG),e(M,Ci),$(cf,Ci,null),e(Ci,TG),e(Ci,Yj),e(Yj,NG),D(s,rD,j),D(s,R,j),$(df,R,null),e(R,PG),e(R,Jj),e(Jj,AG),e(R,FG),e(R,Kj),e(Kj,LG),e(R,SG),e(R,ta),e(ta,Zj),e(Zj,mf),e(mf,OG),e(mf,Xj),e(Xj,CG),e(mf,zG),e(ta,VG),e(ta,ar),e(ar,hf),e(hf,UG),e(hf,Qj),e(Qj,MG),e(hf,RG),e(ar,BG),e(ar,ff),e(ff,e0),e(e0,GG),e(ff,HG),e(ff,t0),e(t0,WG),e(ar,YG),e(ar,a0),e(a0,JG),e(ta,KG),e(ta,s0),e(s0,uf),e(uf,ZG),e(uf,n0),e(n0,XG),e(uf,QG),e(ta,eH),e(ta,r0),e(r0,gf),e(gf,tH),e(gf,o0),e(o0,aH),e(gf,sH),e(R,nH),$(zi,R,null),e(R,rH),e(R,Ss),$(_f,Ss,null),e(Ss,oH),e(Ss,l0),e(l0,lH),e(Ss,iH),e(Ss,Ye),e(Ye,i0),e(i0,pH),e(Ye,cH),e(Ye,p0),e(p0,dH),e(Ye,mH),e(Ye,c0),e(c0,hH),e(Ye,fH),e(Ye,d0),e(d0,uH),e(Ye,gH),e(Ye,m0),e(m0,_H),e(R,bH),e(R,Vi),$(bf,Vi,null),e(Vi,$H),e(Vi,h0),e(h0,xH),e(R,vH),e(R,Ui),$($f,Ui,null),e(Ui,yH),e(Ui,f0),e(f0,jH),e(R,wH),e(R,Mi),$(xf,Mi,null),e(Mi,DH),e(Mi,u0),e(u0,kH),e(R,EH),e(R,Ri),$(vf,Ri,null),e(Ri,qH),e(Ri,g0),e(g0,IH),D(s,oD,j),D(s,sr,j),e(sr,Bi),e(Bi,_0),$(yf,_0,null),e(sr,TH),e(sr,b0),e(b0,NH),D(s,lD,j),D(s,se,j),$(jf,se,null),e(se,PH),e(se,$0),e($0,AH),e(se,FH),e(se,h_),e(h_,x0),e(x0,LH),e(h_,SH),e(se,OH),e(se,v0),e(v0,CH),e(se,zH),e(se,Os),$(wf,Os,null),e(Os,VH),e(Os,Df),e(Df,UH),e(Df,y0),e(y0,MH),e(Df,RH),e(Os,BH),$(Gi,Os,null),e(se,GH),e(se,Cs),$(kf,Cs,null),e(Cs,HH),e(Cs,aa),e(aa,WH),e(aa,j0),e(j0,YH),e(aa,JH),e(aa,w0),e(w0,KH),e(aa,ZH),e(aa,D0),e(D0,XH),e(aa,QH),e(Cs,eW),$(Hi,Cs,null),D(s,iD,j),D(s,nr,j),e(nr,Wi),e(Wi,k0),$(Ef,k0,null),e(nr,tW),e(nr,E0),e(E0,aW),D(s,pD,j),D(s,zs,j),e(zs,sW),e(zs,q0),e(q0,nW),e(zs,rW),e(zs,f_),e(f_,oW),e(zs,lW),D(s,cD,j),D(s,K,j),$(qf,K,null),e(K,iW),e(K,I0),e(I0,pW),e(K,cW),$(Yi,K,null),e(K,dW),e(K,Vs),$(If,Vs,null),e(Vs,mW),e(Vs,T0),e(T0,hW),e(Vs,fW),$(Ji,Vs,null),e(K,uW),e(K,Us),$(Tf,Us,null),e(Us,gW),e(Us,N0),e(N0,_W),e(Us,bW),$(Ki,Us,null),e(K,$W),e(K,xt),$(Nf,xt,null),e(xt,xW),e(xt,P0),e(P0,vW),e(xt,yW),e(xt,A0),e(A0,jW),e(xt,wW),$(Zi,xt,null),e(K,DW),e(K,Xi),$(Pf,Xi,null),e(Xi,kW),e(Xi,F0),e(F0,EW),D(s,dD,j),D(s,rr,j),e(rr,Qi),e(Qi,L0),$(Af,L0,null),e(rr,qW),e(rr,S0),e(S0,IW),D(s,mD,j),D(s,C,j),$(Ff,C,null),e(C,TW),e(C,ep),e(ep,O0),e(O0,NW),e(ep,PW),e(ep,Lf),e(Lf,C0),e(C0,AW),e(ep,FW),e(C,LW),e(C,sa),e(sa,SW),e(sa,z0),e(z0,OW),e(sa,CW),e(sa,V0),e(V0,zW),e(sa,VW),e(sa,U0),e(U0,UW),e(sa,MW),e(C,RW),e(C,M0),e(M0,BW),e(C,GW),e(C,R0),e(R0,HW),e(C,WW),$(tp,C,null),e(C,YW),e(C,or),e(or,JW),e(or,B0),e(B0,KW),e(or,ZW),e(or,G0),e(G0,XW),e(or,QW),e(C,eY),$(ap,C,null),e(C,tY),e(C,na),e(na,aY),e(na,H0),e(H0,sY),e(na,nY),e(na,W0),e(W0,rY),e(na,oY),e(na,Y0),e(Y0,lY),e(na,iY),e(C,pY),$(sp,C,null),e(C,cY),e(C,lr),e(lr,dY),e(lr,J0),e(J0,mY),e(lr,hY),e(lr,u_),e(u_,fY),e(lr,uY),e(C,gY),$(np,C,null),e(C,_Y),e(C,ir),e(ir,bY),e(ir,K0),e(K0,$Y),e(ir,xY),e(ir,g_),e(g_,vY),e(ir,yY),e(C,jY),$(rp,C,null),D(s,hD,j),D(s,pr,j),$(Sf,pr,null),e(pr,wY),e(pr,cr),e(cr,DY),e(cr,Z0),e(Z0,kY),e(cr,EY),e(cr,X0),e(X0,qY),e(cr,IY),D(s,fD,j),D(s,dr,j),$(Of,dr,null),e(dr,TY),e(dr,Q0),e(Q0,NY),D(s,uD,j),D(s,mr,j),e(mr,op),e(op,ew),$(Cf,ew,null),e(mr,PY),e(mr,tw),e(tw,AY),D(s,gD,j),D(s,hr,j),$(zf,hr,null),e(hr,FY),e(hr,aw),e(aw,LY),_D=!0},p(s,[j]){const Vf={};j&2&&(Vf.$$scope={dirty:j,ctx:s}),Sr.$set(Vf);const sw={};j&2&&(sw.$$scope={dirty:j,ctx:s}),Or.$set(sw);const nw={};j&2&&(nw.$$scope={dirty:j,ctx:s}),Vr.$set(nw);const rw={};j&2&&(rw.$$scope={dirty:j,ctx:s}),Ur.$set(rw);const Uf={};j&2&&(Uf.$$scope={dirty:j,ctx:s}),Br.$set(Uf);const ow={};j&2&&(ow.$$scope={dirty:j,ctx:s}),Hr.$set(ow);const lw={};j&2&&(lw.$$scope={dirty:j,ctx:s}),Wr.$set(lw);const iw={};j&2&&(iw.$$scope={dirty:j,ctx:s}),Yr.$set(iw);const _e={};j&2&&(_e.$$scope={dirty:j,ctx:s}),Jr.$set(_e);const pw={};j&2&&(pw.$$scope={dirty:j,ctx:s}),Zr.$set(pw);const __={};j&2&&(__.$$scope={dirty:j,ctx:s}),Xr.$set(__);const cw={};j&2&&(cw.$$scope={dirty:j,ctx:s}),Qr.$set(cw);const dw={};j&2&&(dw.$$scope={dirty:j,ctx:s}),eo.$set(dw);const Je={};j&2&&(Je.$$scope={dirty:j,ctx:s}),to.$set(Je);const Mf={};j&2&&(Mf.$$scope={dirty:j,ctx:s}),ao.$set(Mf);const mw={};j&2&&(mw.$$scope={dirty:j,ctx:s}),so.$set(mw);const hw={};j&2&&(hw.$$scope={dirty:j,ctx:s}),no.$set(hw);const fw={};j&2&&(fw.$$scope={dirty:j,ctx:s}),ro.$set(fw);const fr={};j&2&&(fr.$$scope={dirty:j,ctx:s}),oo.$set(fr);const ur={};j&2&&(ur.$$scope={dirty:j,ctx:s}),lo.$set(ur);const uw={};j&2&&(uw.$$scope={dirty:j,ctx:s}),io.$set(uw);const gw={};j&2&&(gw.$$scope={dirty:j,ctx:s}),co.$set(gw);const Rf={};j&2&&(Rf.$$scope={dirty:j,ctx:s}),mo.$set(Rf);const _w={};j&2&&(_w.$$scope={dirty:j,ctx:s}),ho.$set(_w);const bw={};j&2&&(bw.$$scope={dirty:j,ctx:s}),fo.$set(bw);const $w={};j&2&&($w.$$scope={dirty:j,ctx:s}),uo.$set($w);const Bf={};j&2&&(Bf.$$scope={dirty:j,ctx:s}),_o.$set(Bf);const xw={};j&2&&(xw.$$scope={dirty:j,ctx:s}),bo.$set(xw);const I={};j&2&&(I.$$scope={dirty:j,ctx:s}),$o.$set(I);const vw={};j&2&&(vw.$$scope={dirty:j,ctx:s}),xo.$set(vw);const ra={};j&2&&(ra.$$scope={dirty:j,ctx:s}),vo.$set(ra);const yw={};j&2&&(yw.$$scope={dirty:j,ctx:s}),yo.$set(yw);const jw={};j&2&&(jw.$$scope={dirty:j,ctx:s}),jo.$set(jw);const ww={};j&2&&(ww.$$scope={dirty:j,ctx:s}),wo.$set(ww);const oa={};j&2&&(oa.$$scope={dirty:j,ctx:s}),Do.$set(oa);const Dw={};j&2&&(Dw.$$scope={dirty:j,ctx:s}),ko.$set(Dw);const kw={};j&2&&(kw.$$scope={dirty:j,ctx:s}),Eo.$set(kw);const Ew={};j&2&&(Ew.$$scope={dirty:j,ctx:s}),qo.$set(Ew);const Gf={};j&2&&(Gf.$$scope={dirty:j,ctx:s}),Io.$set(Gf);const qw={};j&2&&(qw.$$scope={dirty:j,ctx:s}),To.$set(qw);const Hf={};j&2&&(Hf.$$scope={dirty:j,ctx:s}),Po.$set(Hf);const Iw={};j&2&&(Iw.$$scope={dirty:j,ctx:s}),Ao.$set(Iw);const Ke={};j&2&&(Ke.$$scope={dirty:j,ctx:s}),Fo.$set(Ke);const la={};j&2&&(la.$$scope={dirty:j,ctx:s}),Lo.$set(la);const Tw={};j&2&&(Tw.$$scope={dirty:j,ctx:s}),So.$set(Tw);const Nw={};j&2&&(Nw.$$scope={dirty:j,ctx:s}),Oo.$set(Nw);const Pw={};j&2&&(Pw.$$scope={dirty:j,ctx:s}),zo.$set(Pw);const Wf={};j&2&&(Wf.$$scope={dirty:j,ctx:s}),Vo.$set(Wf);const Aw={};j&2&&(Aw.$$scope={dirty:j,ctx:s}),Ko.$set(Aw);const Yf={};j&2&&(Yf.$$scope={dirty:j,ctx:s}),Zo.$set(Yf);const Fw={};j&2&&(Fw.$$scope={dirty:j,ctx:s}),Xo.$set(Fw);const Jf={};j&2&&(Jf.$$scope={dirty:j,ctx:s}),Qo.$set(Jf);const ia={};j&2&&(ia.$$scope={dirty:j,ctx:s}),el.$set(ia);const Lw={};j&2&&(Lw.$$scope={dirty:j,ctx:s}),tl.$set(Lw);const Sw={};j&2&&(Sw.$$scope={dirty:j,ctx:s}),al.$set(Sw);const Ow={};j&2&&(Ow.$$scope={dirty:j,ctx:s}),rl.$set(Ow);const gr={};j&2&&(gr.$$scope={dirty:j,ctx:s}),ol.$set(gr);const Cw={};j&2&&(Cw.$$scope={dirty:j,ctx:s}),ll.$set(Cw);const _r={};j&2&&(_r.$$scope={dirty:j,ctx:s}),pl.$set(_r);const zw={};j&2&&(zw.$$scope={dirty:j,ctx:s}),cl.$set(zw);const br={};j&2&&(br.$$scope={dirty:j,ctx:s}),dl.$set(br);const Vw={};j&2&&(Vw.$$scope={dirty:j,ctx:s}),ml.$set(Vw);const $r={};j&2&&($r.$$scope={dirty:j,ctx:s}),hl.$set($r);const Uw={};j&2&&(Uw.$$scope={dirty:j,ctx:s}),fl.$set(Uw);const xr={};j&2&&(xr.$$scope={dirty:j,ctx:s}),ul.$set(xr);const Kf={};j&2&&(Kf.$$scope={dirty:j,ctx:s}),gl.$set(Kf);const Zf={};j&2&&(Zf.$$scope={dirty:j,ctx:s}),_l.$set(Zf);const Mw={};j&2&&(Mw.$$scope={dirty:j,ctx:s}),bl.$set(Mw);const vr={};j&2&&(vr.$$scope={dirty:j,ctx:s}),$l.$set(vr);const Rw={};j&2&&(Rw.$$scope={dirty:j,ctx:s}),vl.$set(Rw);const yr={};j&2&&(yr.$$scope={dirty:j,ctx:s}),yl.$set(yr);const Bw={};j&2&&(Bw.$$scope={dirty:j,ctx:s}),jl.$set(Bw);const pa={};j&2&&(pa.$$scope={dirty:j,ctx:s}),wl.$set(pa);const Gw={};j&2&&(Gw.$$scope={dirty:j,ctx:s}),Dl.$set(Gw);const Hw={};j&2&&(Hw.$$scope={dirty:j,ctx:s}),kl.$set(Hw);const jr={};j&2&&(jr.$$scope={dirty:j,ctx:s}),El.$set(jr);const Ww={};j&2&&(Ww.$$scope={dirty:j,ctx:s}),ql.$set(Ww);const wr={};j&2&&(wr.$$scope={dirty:j,ctx:s}),Il.$set(wr);const Yw={};j&2&&(Yw.$$scope={dirty:j,ctx:s}),Tl.$set(Yw);const Dr={};j&2&&(Dr.$$scope={dirty:j,ctx:s}),Nl.$set(Dr);const Jw={};j&2&&(Jw.$$scope={dirty:j,ctx:s}),Pl.$set(Jw);const ca={};j&2&&(ca.$$scope={dirty:j,ctx:s}),Al.$set(ca);const Kw={};j&2&&(Kw.$$scope={dirty:j,ctx:s}),Fl.$set(Kw);const kr={};j&2&&(kr.$$scope={dirty:j,ctx:s}),Ll.$set(kr);const Zw={};j&2&&(Zw.$$scope={dirty:j,ctx:s}),Sl.$set(Zw);const Xw={};j&2&&(Xw.$$scope={dirty:j,ctx:s}),Ol.$set(Xw);const Er={};j&2&&(Er.$$scope={dirty:j,ctx:s}),Vl.$set(Er);const Qw={};j&2&&(Qw.$$scope={dirty:j,ctx:s}),Ul.$set(Qw);const qr={};j&2&&(qr.$$scope={dirty:j,ctx:s}),Ml.$set(qr);const e7={};j&2&&(e7.$$scope={dirty:j,ctx:s}),Rl.$set(e7);const Ir={};j&2&&(Ir.$$scope={dirty:j,ctx:s}),Bl.$set(Ir);const Xf={};j&2&&(Xf.$$scope={dirty:j,ctx:s}),Gl.$set(Xf);const t7={};j&2&&(t7.$$scope={dirty:j,ctx:s}),Hl.$set(t7);const Tr={};j&2&&(Tr.$$scope={dirty:j,ctx:s}),Wl.$set(Tr);const a7={};j&2&&(a7.$$scope={dirty:j,ctx:s}),Yl.$set(a7);const Nr={};j&2&&(Nr.$$scope={dirty:j,ctx:s}),Ql.$set(Nr);const s7={};j&2&&(s7.$$scope={dirty:j,ctx:s}),ei.$set(s7);const Qf={};j&2&&(Qf.$$scope={dirty:j,ctx:s}),ti.$set(Qf);const n7={};j&2&&(n7.$$scope={dirty:j,ctx:s}),ai.$set(n7);const eu={};j&2&&(eu.$$scope={dirty:j,ctx:s}),si.$set(eu);const Pr={};j&2&&(Pr.$$scope={dirty:j,ctx:s}),ni.$set(Pr);const r7={};j&2&&(r7.$$scope={dirty:j,ctx:s}),ri.$set(r7);const o7={};j&2&&(o7.$$scope={dirty:j,ctx:s}),oi.$set(o7);const Ze={};j&2&&(Ze.$$scope={dirty:j,ctx:s}),li.$set(Ze);const Xe={};j&2&&(Xe.$$scope={dirty:j,ctx:s}),pi.$set(Xe);const l7={};j&2&&(l7.$$scope={dirty:j,ctx:s}),di.$set(l7);const i7={};j&2&&(i7.$$scope={dirty:j,ctx:s}),_i.$set(i7);const p7={};j&2&&(p7.$$scope={dirty:j,ctx:s}),$i.$set(p7);const c7={};j&2&&(c7.$$scope={dirty:j,ctx:s}),xi.$set(c7);const Qe={};j&2&&(Qe.$$scope={dirty:j,ctx:s}),vi.$set(Qe);const d7={};j&2&&(d7.$$scope={dirty:j,ctx:s}),yi.$set(d7);const m7={};j&2&&(m7.$$scope={dirty:j,ctx:s}),ji.$set(m7);const h7={};j&2&&(h7.$$scope={dirty:j,ctx:s}),wi.$set(h7);const f7={};j&2&&(f7.$$scope={dirty:j,ctx:s}),Di.$set(f7);const u7={};j&2&&(u7.$$scope={dirty:j,ctx:s}),ki.$set(u7);const Ar={};j&2&&(Ar.$$scope={dirty:j,ctx:s}),qi.$set(Ar);const vt={};j&2&&(vt.$$scope={dirty:j,ctx:s}),Ti.$set(vt);const g7={};j&2&&(g7.$$scope={dirty:j,ctx:s}),Ni.$set(g7);const _7={};j&2&&(_7.$$scope={dirty:j,ctx:s}),Pi.$set(_7);const b7={};j&2&&(b7.$$scope={dirty:j,ctx:s}),Ai.$set(b7);const $7={};j&2&&($7.$$scope={dirty:j,ctx:s}),Fi.$set($7);const da={};j&2&&(da.$$scope={dirty:j,ctx:s}),zi.$set(da);const tu={};j&2&&(tu.$$scope={dirty:j,ctx:s}),Gi.$set(tu);const x7={};j&2&&(x7.$$scope={dirty:j,ctx:s}),Hi.$set(x7);const b_={};j&2&&(b_.$$scope={dirty:j,ctx:s}),Yi.$set(b_);const v7={};j&2&&(v7.$$scope={dirty:j,ctx:s}),Ji.$set(v7);const et={};j&2&&(et.$$scope={dirty:j,ctx:s}),Ki.$set(et);const ma={};j&2&&(ma.$$scope={dirty:j,ctx:s}),Zi.$set(ma);const y7={};j&2&&(y7.$$scope={dirty:j,ctx:s}),tp.$set(y7);const j7={};j&2&&(j7.$$scope={dirty:j,ctx:s}),ap.$set(j7);const w7={};j&2&&(w7.$$scope={dirty:j,ctx:s}),sp.$set(w7);const au={};j&2&&(au.$$scope={dirty:j,ctx:s}),np.$set(au);const D7={};j&2&&(D7.$$scope={dirty:j,ctx:s}),rp.$set(D7)},i(s){_D||(x(t.$$.fragment,s),x(ua.$$.fragment,s),x(zp.$$.fragment,s),x(Vp.$$.fragment,s),x(Sr.$$.fragment,s),x(Mp.$$.fragment,s),x(Or.$$.fragment,s),x(Rp.$$.fragment,s),x(Bp.$$.fragment,s),x(Gp.$$.fragment,s),x(Vr.$$.fragment,s),x(Hp.$$.fragment,s),x(Ur.$$.fragment,s),x(Wp.$$.fragment,s),x(Yp.$$.fragment,s),x(Jp.$$.fragment,s),x(Br.$$.fragment,s),x(Xp.$$.fragment,s),x(Qp.$$.fragment,s),x(Hr.$$.fragment,s),x(ec.$$.fragment,s),x(Wr.$$.fragment,s),x(tc.$$.fragment,s),x(Yr.$$.fragment,s),x(ac.$$.fragment,s),x(Jr.$$.fragment,s),x(sc.$$.fragment,s),x(Zr.$$.fragment,s),x(rc.$$.fragment,s),x(Xr.$$.fragment,s),x(oc.$$.fragment,s),x(Qr.$$.fragment,s),x(lc.$$.fragment,s),x(eo.$$.fragment,s),x(ic.$$.fragment,s),x(to.$$.fragment,s),x(pc.$$.fragment,s),x(ao.$$.fragment,s),x(cc.$$.fragment,s),x(so.$$.fragment,s),x(dc.$$.fragment,s),x(no.$$.fragment,s),x(mc.$$.fragment,s),x(ro.$$.fragment,s),x(hc.$$.fragment,s),x(oo.$$.fragment,s),x(fc.$$.fragment,s),x(lo.$$.fragment,s),x(gc.$$.fragment,s),x(io.$$.fragment,s),x(_c.$$.fragment,s),x($c.$$.fragment,s),x(xc.$$.fragment,s),x(co.$$.fragment,s),x(vc.$$.fragment,s),x(mo.$$.fragment,s),x(yc.$$.fragment,s),x(ho.$$.fragment,s),x(wc.$$.fragment,s),x(fo.$$.fragment,s),x(kc.$$.fragment,s),x(uo.$$.fragment,s),x(Ec.$$.fragment,s),x(qc.$$.fragment,s),x(_o.$$.fragment,s),x(Ic.$$.fragment,s),x(bo.$$.fragment,s),x(Nc.$$.fragment,s),x($o.$$.fragment,s),x(Pc.$$.fragment,s),x(xo.$$.fragment,s),x(Ac.$$.fragment,s),x(vo.$$.fragment,s),x(Fc.$$.fragment,s),x(yo.$$.fragment,s),x(Lc.$$.fragment,s),x(jo.$$.fragment,s),x(Oc.$$.fragment,s),x(wo.$$.fragment,s),x(zc.$$.fragment,s),x(Do.$$.fragment,s),x(Vc.$$.fragment,s),x(ko.$$.fragment,s),x(Uc.$$.fragment,s),x(Eo.$$.fragment,s),x(qo.$$.fragment,s),x(Io.$$.fragment,s),x(Rc.$$.fragment,s),x(To.$$.fragment,s),x(Bc.$$.fragment,s),x(Gc.$$.fragment,s),x(Po.$$.fragment,s),x(Hc.$$.fragment,s),x(Ao.$$.fragment,s),x(Yc.$$.fragment,s),x(Fo.$$.fragment,s),x(Jc.$$.fragment,s),x(Lo.$$.fragment,s),x(Kc.$$.fragment,s),x(So.$$.fragment,s),x(Zc.$$.fragment,s),x(Oo.$$.fragment,s),x(Qc.$$.fragment,s),x(td.$$.fragment,s),x(ad.$$.fragment,s),x(nd.$$.fragment,s),x(zo.$$.fragment,s),x(rd.$$.fragment,s),x(Vo.$$.fragment,s),x(od.$$.fragment,s),x(ld.$$.fragment,s),x(id.$$.fragment,s),x(pd.$$.fragment,s),x(cd.$$.fragment,s),x(dd.$$.fragment,s),x(md.$$.fragment,s),x(hd.$$.fragment,s),x(fd.$$.fragment,s),x(ud.$$.fragment,s),x(gd.$$.fragment,s),x(_d.$$.fragment,s),x(bd.$$.fragment,s),x($d.$$.fragment,s),x(xd.$$.fragment,s),x(vd.$$.fragment,s),x(yd.$$.fragment,s),x(jd.$$.fragment,s),x(wd.$$.fragment,s),x(Dd.$$.fragment,s),x(kd.$$.fragment,s),x(Ed.$$.fragment,s),x(qd.$$.fragment,s),x(Ko.$$.fragment,s),x(Id.$$.fragment,s),x(Zo.$$.fragment,s),x(Td.$$.fragment,s),x(Xo.$$.fragment,s),x(Nd.$$.fragment,s),x(Qo.$$.fragment,s),x(Pd.$$.fragment,s),x(Ad.$$.fragment,s),x(el.$$.fragment,s),x(Ld.$$.fragment,s),x(tl.$$.fragment,s),x(Sd.$$.fragment,s),x(al.$$.fragment,s),x(Od.$$.fragment,s),x(zd.$$.fragment,s),x(Ud.$$.fragment,s),x(Rd.$$.fragment,s),x(Bd.$$.fragment,s),x(Gd.$$.fragment,s),x(rl.$$.fragment,s),x(Hd.$$.fragment,s),x(ol.$$.fragment,s),x(Wd.$$.fragment,s),x(ll.$$.fragment,s),x(Yd.$$.fragment,s),x(pl.$$.fragment,s),x(Kd.$$.fragment,s),x(cl.$$.fragment,s),x(Zd.$$.fragment,s),x(dl.$$.fragment,s),x(Xd.$$.fragment,s),x(ml.$$.fragment,s),x(Qd.$$.fragment,s),x(hl.$$.fragment,s),x(em.$$.fragment,s),x(fl.$$.fragment,s),x(tm.$$.fragment,s),x(ul.$$.fragment,s),x(am.$$.fragment,s),x(gl.$$.fragment,s),x(sm.$$.fragment,s),x(_l.$$.fragment,s),x(nm.$$.fragment,s),x(bl.$$.fragment,s),x(om.$$.fragment,s),x($l.$$.fragment,s),x(im.$$.fragment,s),x(pm.$$.fragment,s),x(vl.$$.fragment,s),x(dm.$$.fragment,s),x(yl.$$.fragment,s),x(mm.$$.fragment,s),x(jl.$$.fragment,s),x(hm.$$.fragment,s),x(wl.$$.fragment,s),x(fm.$$.fragment,s),x(Dl.$$.fragment,s),x(um.$$.fragment,s),x(kl.$$.fragment,s),x(gm.$$.fragment,s),x(El.$$.fragment,s),x(bm.$$.fragment,s),x(ql.$$.fragment,s),x($m.$$.fragment,s),x(Il.$$.fragment,s),x(vm.$$.fragment,s),x(Tl.$$.fragment,s),x(ym.$$.fragment,s),x(Nl.$$.fragment,s),x(Pl.$$.fragment,s),x(wm.$$.fragment,s),x(Al.$$.fragment,s),x(Dm.$$.fragment,s),x(Fl.$$.fragment,s),x(km.$$.fragment,s),x(Ll.$$.fragment,s),x(Em.$$.fragment,s),x(Sl.$$.fragment,s),x(qm.$$.fragment,s),x(Ol.$$.fragment,s),x(Im.$$.fragment,s),x(Tm.$$.fragment,s),x(Nm.$$.fragment,s),x(Pm.$$.fragment,s),x(Vl.$$.fragment,s),x(Am.$$.fragment,s),x(Ul.$$.fragment,s),x(Fm.$$.fragment,s),x(Ml.$$.fragment,s),x(Lm.$$.fragment,s),x(Sm.$$.fragment,s),x(Rl.$$.fragment,s),x(Cm.$$.fragment,s),x(Bl.$$.fragment,s),x(zm.$$.fragment,s),x(Gl.$$.fragment,s),x(Vm.$$.fragment,s),x(Hl.$$.fragment,s),x(Mm.$$.fragment,s),x(Wl.$$.fragment,s),x(Bm.$$.fragment,s),x(Yl.$$.fragment,s),x(Hm.$$.fragment,s),x(Wm.$$.fragment,s),x(Ym.$$.fragment,s),x(Jm.$$.fragment,s),x(Km.$$.fragment,s),x(Zm.$$.fragment,s),x(Xm.$$.fragment,s),x(Qm.$$.fragment,s),x(eh.$$.fragment,s),x(th.$$.fragment,s),x(ah.$$.fragment,s),x(sh.$$.fragment,s),x(nh.$$.fragment,s),x(rh.$$.fragment,s),x(oh.$$.fragment,s),x(lh.$$.fragment,s),x(ih.$$.fragment,s),x(ph.$$.fragment,s),x(Ql.$$.fragment,s),x(dh.$$.fragment,s),x(ei.$$.fragment,s),x(mh.$$.fragment,s),x(ti.$$.fragment,s),x(fh.$$.fragment,s),x(ai.$$.fragment,s),x(uh.$$.fragment,s),x(si.$$.fragment,s),x(gh.$$.fragment,s),x(ni.$$.fragment,s),x(_h.$$.fragment,s),x(ri.$$.fragment,s),x(bh.$$.fragment,s),x(oi.$$.fragment,s),x($h.$$.fragment,s),x(li.$$.fragment,s),x(xh.$$.fragment,s),x(vh.$$.fragment,s),x(pi.$$.fragment,s),x(Eh.$$.fragment,s),x(di.$$.fragment,s),x(qh.$$.fragment,s),x(Ih.$$.fragment,s),x(Th.$$.fragment,s),x(Nh.$$.fragment,s),x(Ph.$$.fragment,s),x(Ah.$$.fragment,s),x(_i.$$.fragment,s),x(Fh.$$.fragment,s),x(Lh.$$.fragment,s),x($i.$$.fragment,s),x(Sh.$$.fragment,s),x(xi.$$.fragment,s),x(Oh.$$.fragment,s),x(vi.$$.fragment,s),x(Ch.$$.fragment,s),x(yi.$$.fragment,s),x(Vh.$$.fragment,s),x(Mh.$$.fragment,s),x(ji.$$.fragment,s),x(Rh.$$.fragment,s),x(wi.$$.fragment,s),x(Bh.$$.fragment,s),x(Di.$$.fragment,s),x(Gh.$$.fragment,s),x(ki.$$.fragment,s),x(Wh.$$.fragment,s),x(Yh.$$.fragment,s),x(qi.$$.fragment,s),x(Jh.$$.fragment,s),x(Kh.$$.fragment,s),x(Ti.$$.fragment,s),x(Zh.$$.fragment,s),x(Ni.$$.fragment,s),x(Xh.$$.fragment,s),x(Pi.$$.fragment,s),x(Qh.$$.fragment,s),x(Ai.$$.fragment,s),x(ef.$$.fragment,s),x(Fi.$$.fragment,s),x(rf.$$.fragment,s),x(of.$$.fragment,s),x(lf.$$.fragment,s),x(pf.$$.fragment,s),x(cf.$$.fragment,s),x(df.$$.fragment,s),x(zi.$$.fragment,s),x(_f.$$.fragment,s),x(bf.$$.fragment,s),x($f.$$.fragment,s),x(xf.$$.fragment,s),x(vf.$$.fragment,s),x(yf.$$.fragment,s),x(jf.$$.fragment,s),x(wf.$$.fragment,s),x(Gi.$$.fragment,s),x(kf.$$.fragment,s),x(Hi.$$.fragment,s),x(Ef.$$.fragment,s),x(qf.$$.fragment,s),x(Yi.$$.fragment,s),x(If.$$.fragment,s),x(Ji.$$.fragment,s),x(Tf.$$.fragment,s),x(Ki.$$.fragment,s),x(Nf.$$.fragment,s),x(Zi.$$.fragment,s),x(Pf.$$.fragment,s),x(Af.$$.fragment,s),x(Ff.$$.fragment,s),x(tp.$$.fragment,s),x(ap.$$.fragment,s),x(sp.$$.fragment,s),x(np.$$.fragment,s),x(rp.$$.fragment,s),x(Sf.$$.fragment,s),x(Of.$$.fragment,s),x(Cf.$$.fragment,s),x(zf.$$.fragment,s),_D=!0)},o(s){v(t.$$.fragment,s),v(ua.$$.fragment,s),v(zp.$$.fragment,s),v(Vp.$$.fragment,s),v(Sr.$$.fragment,s),v(Mp.$$.fragment,s),v(Or.$$.fragment,s),v(Rp.$$.fragment,s),v(Bp.$$.fragment,s),v(Gp.$$.fragment,s),v(Vr.$$.fragment,s),v(Hp.$$.fragment,s),v(Ur.$$.fragment,s),v(Wp.$$.fragment,s),v(Yp.$$.fragment,s),v(Jp.$$.fragment,s),v(Br.$$.fragment,s),v(Xp.$$.fragment,s),v(Qp.$$.fragment,s),v(Hr.$$.fragment,s),v(ec.$$.fragment,s),v(Wr.$$.fragment,s),v(tc.$$.fragment,s),v(Yr.$$.fragment,s),v(ac.$$.fragment,s),v(Jr.$$.fragment,s),v(sc.$$.fragment,s),v(Zr.$$.fragment,s),v(rc.$$.fragment,s),v(Xr.$$.fragment,s),v(oc.$$.fragment,s),v(Qr.$$.fragment,s),v(lc.$$.fragment,s),v(eo.$$.fragment,s),v(ic.$$.fragment,s),v(to.$$.fragment,s),v(pc.$$.fragment,s),v(ao.$$.fragment,s),v(cc.$$.fragment,s),v(so.$$.fragment,s),v(dc.$$.fragment,s),v(no.$$.fragment,s),v(mc.$$.fragment,s),v(ro.$$.fragment,s),v(hc.$$.fragment,s),v(oo.$$.fragment,s),v(fc.$$.fragment,s),v(lo.$$.fragment,s),v(gc.$$.fragment,s),v(io.$$.fragment,s),v(_c.$$.fragment,s),v($c.$$.fragment,s),v(xc.$$.fragment,s),v(co.$$.fragment,s),v(vc.$$.fragment,s),v(mo.$$.fragment,s),v(yc.$$.fragment,s),v(ho.$$.fragment,s),v(wc.$$.fragment,s),v(fo.$$.fragment,s),v(kc.$$.fragment,s),v(uo.$$.fragment,s),v(Ec.$$.fragment,s),v(qc.$$.fragment,s),v(_o.$$.fragment,s),v(Ic.$$.fragment,s),v(bo.$$.fragment,s),v(Nc.$$.fragment,s),v($o.$$.fragment,s),v(Pc.$$.fragment,s),v(xo.$$.fragment,s),v(Ac.$$.fragment,s),v(vo.$$.fragment,s),v(Fc.$$.fragment,s),v(yo.$$.fragment,s),v(Lc.$$.fragment,s),v(jo.$$.fragment,s),v(Oc.$$.fragment,s),v(wo.$$.fragment,s),v(zc.$$.fragment,s),v(Do.$$.fragment,s),v(Vc.$$.fragment,s),v(ko.$$.fragment,s),v(Uc.$$.fragment,s),v(Eo.$$.fragment,s),v(qo.$$.fragment,s),v(Io.$$.fragment,s),v(Rc.$$.fragment,s),v(To.$$.fragment,s),v(Bc.$$.fragment,s),v(Gc.$$.fragment,s),v(Po.$$.fragment,s),v(Hc.$$.fragment,s),v(Ao.$$.fragment,s),v(Yc.$$.fragment,s),v(Fo.$$.fragment,s),v(Jc.$$.fragment,s),v(Lo.$$.fragment,s),v(Kc.$$.fragment,s),v(So.$$.fragment,s),v(Zc.$$.fragment,s),v(Oo.$$.fragment,s),v(Qc.$$.fragment,s),v(td.$$.fragment,s),v(ad.$$.fragment,s),v(nd.$$.fragment,s),v(zo.$$.fragment,s),v(rd.$$.fragment,s),v(Vo.$$.fragment,s),v(od.$$.fragment,s),v(ld.$$.fragment,s),v(id.$$.fragment,s),v(pd.$$.fragment,s),v(cd.$$.fragment,s),v(dd.$$.fragment,s),v(md.$$.fragment,s),v(hd.$$.fragment,s),v(fd.$$.fragment,s),v(ud.$$.fragment,s),v(gd.$$.fragment,s),v(_d.$$.fragment,s),v(bd.$$.fragment,s),v($d.$$.fragment,s),v(xd.$$.fragment,s),v(vd.$$.fragment,s),v(yd.$$.fragment,s),v(jd.$$.fragment,s),v(wd.$$.fragment,s),v(Dd.$$.fragment,s),v(kd.$$.fragment,s),v(Ed.$$.fragment,s),v(qd.$$.fragment,s),v(Ko.$$.fragment,s),v(Id.$$.fragment,s),v(Zo.$$.fragment,s),v(Td.$$.fragment,s),v(Xo.$$.fragment,s),v(Nd.$$.fragment,s),v(Qo.$$.fragment,s),v(Pd.$$.fragment,s),v(Ad.$$.fragment,s),v(el.$$.fragment,s),v(Ld.$$.fragment,s),v(tl.$$.fragment,s),v(Sd.$$.fragment,s),v(al.$$.fragment,s),v(Od.$$.fragment,s),v(zd.$$.fragment,s),v(Ud.$$.fragment,s),v(Rd.$$.fragment,s),v(Bd.$$.fragment,s),v(Gd.$$.fragment,s),v(rl.$$.fragment,s),v(Hd.$$.fragment,s),v(ol.$$.fragment,s),v(Wd.$$.fragment,s),v(ll.$$.fragment,s),v(Yd.$$.fragment,s),v(pl.$$.fragment,s),v(Kd.$$.fragment,s),v(cl.$$.fragment,s),v(Zd.$$.fragment,s),v(dl.$$.fragment,s),v(Xd.$$.fragment,s),v(ml.$$.fragment,s),v(Qd.$$.fragment,s),v(hl.$$.fragment,s),v(em.$$.fragment,s),v(fl.$$.fragment,s),v(tm.$$.fragment,s),v(ul.$$.fragment,s),v(am.$$.fragment,s),v(gl.$$.fragment,s),v(sm.$$.fragment,s),v(_l.$$.fragment,s),v(nm.$$.fragment,s),v(bl.$$.fragment,s),v(om.$$.fragment,s),v($l.$$.fragment,s),v(im.$$.fragment,s),v(pm.$$.fragment,s),v(vl.$$.fragment,s),v(dm.$$.fragment,s),v(yl.$$.fragment,s),v(mm.$$.fragment,s),v(jl.$$.fragment,s),v(hm.$$.fragment,s),v(wl.$$.fragment,s),v(fm.$$.fragment,s),v(Dl.$$.fragment,s),v(um.$$.fragment,s),v(kl.$$.fragment,s),v(gm.$$.fragment,s),v(El.$$.fragment,s),v(bm.$$.fragment,s),v(ql.$$.fragment,s),v($m.$$.fragment,s),v(Il.$$.fragment,s),v(vm.$$.fragment,s),v(Tl.$$.fragment,s),v(ym.$$.fragment,s),v(Nl.$$.fragment,s),v(Pl.$$.fragment,s),v(wm.$$.fragment,s),v(Al.$$.fragment,s),v(Dm.$$.fragment,s),v(Fl.$$.fragment,s),v(km.$$.fragment,s),v(Ll.$$.fragment,s),v(Em.$$.fragment,s),v(Sl.$$.fragment,s),v(qm.$$.fragment,s),v(Ol.$$.fragment,s),v(Im.$$.fragment,s),v(Tm.$$.fragment,s),v(Nm.$$.fragment,s),v(Pm.$$.fragment,s),v(Vl.$$.fragment,s),v(Am.$$.fragment,s),v(Ul.$$.fragment,s),v(Fm.$$.fragment,s),v(Ml.$$.fragment,s),v(Lm.$$.fragment,s),v(Sm.$$.fragment,s),v(Rl.$$.fragment,s),v(Cm.$$.fragment,s),v(Bl.$$.fragment,s),v(zm.$$.fragment,s),v(Gl.$$.fragment,s),v(Vm.$$.fragment,s),v(Hl.$$.fragment,s),v(Mm.$$.fragment,s),v(Wl.$$.fragment,s),v(Bm.$$.fragment,s),v(Yl.$$.fragment,s),v(Hm.$$.fragment,s),v(Wm.$$.fragment,s),v(Ym.$$.fragment,s),v(Jm.$$.fragment,s),v(Km.$$.fragment,s),v(Zm.$$.fragment,s),v(Xm.$$.fragment,s),v(Qm.$$.fragment,s),v(eh.$$.fragment,s),v(th.$$.fragment,s),v(ah.$$.fragment,s),v(sh.$$.fragment,s),v(nh.$$.fragment,s),v(rh.$$.fragment,s),v(oh.$$.fragment,s),v(lh.$$.fragment,s),v(ih.$$.fragment,s),v(ph.$$.fragment,s),v(Ql.$$.fragment,s),v(dh.$$.fragment,s),v(ei.$$.fragment,s),v(mh.$$.fragment,s),v(ti.$$.fragment,s),v(fh.$$.fragment,s),v(ai.$$.fragment,s),v(uh.$$.fragment,s),v(si.$$.fragment,s),v(gh.$$.fragment,s),v(ni.$$.fragment,s),v(_h.$$.fragment,s),v(ri.$$.fragment,s),v(bh.$$.fragment,s),v(oi.$$.fragment,s),v($h.$$.fragment,s),v(li.$$.fragment,s),v(xh.$$.fragment,s),v(vh.$$.fragment,s),v(pi.$$.fragment,s),v(Eh.$$.fragment,s),v(di.$$.fragment,s),v(qh.$$.fragment,s),v(Ih.$$.fragment,s),v(Th.$$.fragment,s),v(Nh.$$.fragment,s),v(Ph.$$.fragment,s),v(Ah.$$.fragment,s),v(_i.$$.fragment,s),v(Fh.$$.fragment,s),v(Lh.$$.fragment,s),v($i.$$.fragment,s),v(Sh.$$.fragment,s),v(xi.$$.fragment,s),v(Oh.$$.fragment,s),v(vi.$$.fragment,s),v(Ch.$$.fragment,s),v(yi.$$.fragment,s),v(Vh.$$.fragment,s),v(Mh.$$.fragment,s),v(ji.$$.fragment,s),v(Rh.$$.fragment,s),v(wi.$$.fragment,s),v(Bh.$$.fragment,s),v(Di.$$.fragment,s),v(Gh.$$.fragment,s),v(ki.$$.fragment,s),v(Wh.$$.fragment,s),v(Yh.$$.fragment,s),v(qi.$$.fragment,s),v(Jh.$$.fragment,s),v(Kh.$$.fragment,s),v(Ti.$$.fragment,s),v(Zh.$$.fragment,s),v(Ni.$$.fragment,s),v(Xh.$$.fragment,s),v(Pi.$$.fragment,s),v(Qh.$$.fragment,s),v(Ai.$$.fragment,s),v(ef.$$.fragment,s),v(Fi.$$.fragment,s),v(rf.$$.fragment,s),v(of.$$.fragment,s),v(lf.$$.fragment,s),v(pf.$$.fragment,s),v(cf.$$.fragment,s),v(df.$$.fragment,s),v(zi.$$.fragment,s),v(_f.$$.fragment,s),v(bf.$$.fragment,s),v($f.$$.fragment,s),v(xf.$$.fragment,s),v(vf.$$.fragment,s),v(yf.$$.fragment,s),v(jf.$$.fragment,s),v(wf.$$.fragment,s),v(Gi.$$.fragment,s),v(kf.$$.fragment,s),v(Hi.$$.fragment,s),v(Ef.$$.fragment,s),v(qf.$$.fragment,s),v(Yi.$$.fragment,s),v(If.$$.fragment,s),v(Ji.$$.fragment,s),v(Tf.$$.fragment,s),v(Ki.$$.fragment,s),v(Nf.$$.fragment,s),v(Zi.$$.fragment,s),v(Pf.$$.fragment,s),v(Af.$$.fragment,s),v(Ff.$$.fragment,s),v(tp.$$.fragment,s),v(ap.$$.fragment,s),v(sp.$$.fragment,s),v(np.$$.fragment,s),v(rp.$$.fragment,s),v(Sf.$$.fragment,s),v(Of.$$.fragment,s),v(Cf.$$.fragment,s),v(zf.$$.fragment,s),_D=!1},d(s){a(c),s&&a(g),s&&a(f),y(t),s&&a(Fr),s&&a(Oe),y(ua),s&&a(q7),s&&a(Q),y(zp),y(Vp),y(Sr),y(Mp),y(Or),s&&a(I7),s&&a(fn),y(Rp),s&&a(T7),s&&a(zr),s&&a(N7),s&&a(q),y(Bp),y(Gp),y(Vr),y(Hp),y(Ur),y(Wp),y(Yp),y(Jp),y(Br),y(Xp),y(Qp),y(Hr),y(ec),y(Wr),y(tc),y(Yr),y(ac),y(Jr),y(sc),y(Zr),y(rc),y(Xr),y(oc),y(Qr),y(lc),y(eo),y(ic),y(to),y(pc),y(ao),y(cc),y(so),y(dc),y(no),y(mc),y(ro),y(hc),y(oo),y(fc),y(lo),y(gc),y(io),y(_c),y($c),y(xc),y(co),y(vc),y(mo),y(yc),y(ho),y(wc),y(fo),y(kc),y(uo),y(Ec),y(qc),y(_o),y(Ic),y(bo),y(Nc),y($o),y(Pc),y(xo),y(Ac),y(vo),y(Fc),y(yo),y(Lc),y(jo),y(Oc),y(wo),y(zc),y(Do),y(Vc),y(ko),y(Uc),y(Eo),y(qo),y(Io),y(Rc),y(To),y(Bc),y(Gc),y(Po),y(Hc),y(Ao),y(Yc),y(Fo),y(Jc),y(Lo),y(Kc),y(So),y(Zc),y(Oo),y(Qc),y(td),y(ad),y(nd),y(zo),y(rd),y(Vo),y(od),y(ld),y(id),y(pd),y(cd),y(dd),y(md),y(hd),y(fd),y(ud),y(gd),y(_d),y(bd),y($d),y(xd),y(vd),y(yd),y(jd),y(wd),y(Dd),y(kd),y(Ed),y(qd),y(Ko),y(Id),y(Zo),y(Td),y(Xo),y(Nd),y(Qo),y(Pd),y(Ad),y(el),s&&a(P7),s&&a(zt),y(Ld),y(tl),s&&a(A7),s&&a(ee),y(Sd),y(al),s&&a(F7),s&&a(me),y(Od),s&&a(L7),s&&a(he),y(zd),s&&a(S7),s&&a(fe),y(Ud),s&&a(O7),s&&a(Nn),y(Rd),s&&a(C7),s&&a(nl),s&&a(z7),s&&a(A),y(Bd),y(Gd),y(rl),y(Hd),y(ol),y(Wd),y(ll),y(Yd),y(pl),y(Kd),y(cl),y(Zd),y(dl),y(Xd),y(ml),y(Qd),y(hl),y(em),y(fl),y(tm),y(ul),y(am),y(gl),y(sm),y(_l),y(nm),y(bl),y(om),y($l),y(im),y(pm),y(vl),y(dm),y(yl),y(mm),y(jl),y(hm),y(wl),y(fm),y(Dl),y(um),y(kl),y(gm),y(El),y(bm),y(ql),y($m),y(Il),y(vm),y(Tl),y(ym),y(Nl),y(Pl),y(wm),y(Al),y(Dm),y(Fl),y(km),y(Ll),y(Em),y(Sl),y(qm),y(Ol),y(Im),s&&a(V7),s&&a(yg),s&&a(U7),s&&a(Bn),y(Tm),s&&a(M7),s&&a(zl),s&&a(R7),s&&a(L),y(Nm),y(Pm),y(Vl),y(Am),y(Ul),y(Fm),y(Ml),y(Lm),y(Sm),y(Rl),y(Cm),y(Bl),y(zm),y(Gl),y(Vm),y(Hl),y(Mm),y(Wl),y(Bm),y(Yl),y(Hm),y(Wm),y(Ym),y(Jm),y(Km),y(Zm),y(Xm),y(Qm),y(eh),y(th),y(ah),y(sh),y(nh),y(rh),y(oh),s&&a(B7),s&&a(Wn),y(lh),s&&a(G7),s&&a(Xl),s&&a(H7),s&&a(U),y(ih),y(ph),y(Ql),y(dh),y(ei),y(mh),y(ti),y(fh),y(ai),y(uh),y(si),y(gh),y(ni),y(_h),y(ri),y(bh),y(oi),y($h),y(li),s&&a(W7),s&&a(Kn),y(xh),s&&a(Y7),s&&a(O),y(vh),y(pi),y(Eh),y(di),y(qh),y(Ih),y(Th),y(Nh),y(Ph),y(Ah),y(_i),y(Fh),y(Lh),y($i),y(Sh),y(xi),s&&a(J7),s&&a(Jt),y(Oh),y(vi),s&&a(K7),s&&a(B),y(Ch),y(yi),y(Vh),y(Mh),y(ji),y(Rh),y(wi),s&&a(Z7),s&&a(We),y(Bh),y(Di),s&&a(X7),s&&a(te),y(Gh),y(ki),y(Wh),s&&a(Q7),s&&a(ae),y(Yh),y(qi),y(Jh),s&&a(eD),s&&a(Kt),y(Kh),y(Ti),s&&a(tD),s&&a(Zt),y(Zh),y(Ni),s&&a(aD),s&&a(Xt),y(Xh),y(Pi),s&&a(sD),s&&a(Qt),y(Qh),y(Ai),s&&a(nD),s&&a(M),y(ef),y(Fi),y(rf),y(of),y(lf),y(pf),y(cf),s&&a(rD),s&&a(R),y(df),y(zi),y(_f),y(bf),y($f),y(xf),y(vf),s&&a(oD),s&&a(sr),y(yf),s&&a(lD),s&&a(se),y(jf),y(wf),y(Gi),y(kf),y(Hi),s&&a(iD),s&&a(nr),y(Ef),s&&a(pD),s&&a(zs),s&&a(cD),s&&a(K),y(qf),y(Yi),y(If),y(Ji),y(Tf),y(Ki),y(Nf),y(Zi),y(Pf),s&&a(dD),s&&a(rr),y(Af),s&&a(mD),s&&a(C),y(Ff),y(tp),y(ap),y(sp),y(np),y(rp),s&&a(hD),s&&a(pr),y(Sf),s&&a(fD),s&&a(dr),y(Of),s&&a(uD),s&&a(mr),y(Cf),s&&a(gD),s&&a(hr),y(zf)}}}const soe={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function noe(k){return qse(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class moe extends wse{constructor(c){super();Dse(this,c,noe,aoe,kse,{})}}export{moe as default,soe as metadata};
