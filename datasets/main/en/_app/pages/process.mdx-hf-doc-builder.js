import{S as Tv,i as Pv,s as Sv,e as l,k as c,w as f,t,M as Cv,c as r,d as a,m as h,a as o,x as m,h as n,b as u,G as e,g as i,y as d,q as g,o as _,B as j,v as Nv}from"../chunks/vendor-hf-doc-builder.js";import{T as Qr}from"../chunks/Tip-hf-doc-builder.js";import{I as E}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as w}from"../chunks/CodeBlock-hf-doc-builder.js";function Ov(I){let v,q,b,y,k;return{c(){v=l("p"),q=t("All processing methods in this guide return a new "),b=l("a"),y=t("Dataset"),k=t(" object. Modification is not done in-place. Be careful about overriding your previous dataset!"),this.h()},l($){v=r($,"P",{});var x=o(v);q=n(x,"All processing methods in this guide return a new "),b=r(x,"A",{href:!0});var D=o(b);y=n(D,"Dataset"),D.forEach(a),k=n(x," object. Modification is not done in-place. Be careful about overriding your previous dataset!"),x.forEach(a),this.h()},h(){u(b,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset")},m($,x){i($,v,x),e(v,q),e(v,b),e(b,y),e(v,k)},d($){$&&a(v)}}}function zv(I){let v,q,b,y,k,$,x,D;return{c(){v=l("p"),q=t("Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),b=l("code"),y=t('Value("int32")'),k=t(" to "),$=l("code"),x=t('Value("bool")'),D=t(" if the original column only contains ones and zeros.")},l(hs){v=r(hs,"P",{});var F=o(v);q=n(F,"Casting only works if the original feature type and new feature type are compatible. For example, you can cast a column with the feature type "),b=r(F,"CODE",{});var us=o(b);y=n(us,'Value("int32")'),us.forEach(a),k=n(F," to "),$=r(F,"CODE",{});var ut=o($);x=n(ut,'Value("bool")'),ut.forEach(a),D=n(F," if the original column only contains ones and zeros."),F.forEach(a)},m(hs,F){i(hs,v,F),e(v,q),e(v,b),e(b,y),e(v,k),e(v,$),e($,x),e(v,D)},d(hs){hs&&a(v)}}}function Fv(I){let v,q,b,y,k;return{c(){v=l("p"),q=t("\u{1F917} Datasets also has a "),b=l("a"),y=t("remove_columns()"),k=t(" function which is faster because it doesn\u2019t copy the data of the remaining columns."),this.h()},l($){v=r($,"P",{});var x=o(v);q=n(x,"\u{1F917} Datasets also has a "),b=r(x,"A",{href:!0});var D=o(b);y=n(D,"remove_columns()"),D.forEach(a),k=n(x," function which is faster because it doesn\u2019t copy the data of the remaining columns."),x.forEach(a),this.h()},h(){u(b,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.remove_columns")},m($,x){i($,v,x),e(v,q),e(v,b),e(b,y),e(v,k)},d($){$&&a(v)}}}function Iv(I){let v,q,b,y,k;return{c(){v=l("p"),q=t("\u{1F917} Datasets also provides support for other common data formats such as NumPy, Pandas, and JAX. Check out the "),b=l("a"),y=t("Using Datasets with TensorFlow"),k=t(" guide for more details on how to efficiently create a TensorFlow dataset."),this.h()},l($){v=r($,"P",{});var x=o(v);q=n(x,"\u{1F917} Datasets also provides support for other common data formats such as NumPy, Pandas, and JAX. Check out the "),b=r(x,"A",{href:!0,rel:!0});var D=o(b);y=n(D,"Using Datasets with TensorFlow"),D.forEach(a),k=n(x," guide for more details on how to efficiently create a TensorFlow dataset."),x.forEach(a),this.h()},h(){u(b,"href","https://huggingface.co/docs/datasets/master/en/use_with_tensorflow#using-totfdataset"),u(b,"rel","nofollow")},m($,x){i($,v,x),e(v,q),e(v,b),e(b,y),e(v,k)},d($){$&&a(v)}}}function Rv(I){let v,q,b,y,k;return{c(){v=l("p"),q=t("Want to save your dataset to a cloud storage provider? Read our "),b=l("a"),y=t("Cloud Storage"),k=t(" guide to learn how to save your dataset to AWS or Google Cloud Storage."),this.h()},l($){v=r($,"P",{});var x=o(v);q=n(x,"Want to save your dataset to a cloud storage provider? Read our "),b=r(x,"A",{href:!0});var D=o(b);y=n(D,"Cloud Storage"),D.forEach(a),k=n(x," guide to learn how to save your dataset to AWS or Google Cloud Storage."),x.forEach(a),this.h()},h(){u(b,"href","./filesystems")},m($,x){i($,v,x),e(v,q),e(v,b),e(b,y),e(v,k)},d($){$&&a(v)}}}function Mv(I){let v,q,b,y,k,$,x,D,hs,F,us,ut,Xr,ft,kc,Zr,P,Hn,Ec,qc,Yn,Ac,Dc,Gn,Tc,Pc,Wn,Sc,Cc,Jn,Nc,Oc,Kn,zc,so,R,Fc,Me,Ic,Rc,Le,Mc,Lc,Ue,Uc,Vc,eo,mt,Bc,ao,Ve,to,Is,no,fs,Rs,Qn,Be,Hc,Xn,Yc,lo,dt,Gc,ro,ms,Ms,Zn,He,Wc,sl,Jc,oo,Ls,Kc,gt,Qc,Xc,po,Ye,io,ds,Us,el,Ge,Zc,al,sh,co,M,eh,_t,ah,th,tl,nh,lh,nl,rh,oh,ho,We,uo,gs,Vs,ll,Je,ph,rl,ih,fo,G,ch,jt,hh,uh,vt,fh,mh,mo,bt,wt,$t,dh,gh,go,Ke,_o,xt,yt,kt,_h,jh,jo,Qe,vo,_s,Et,vh,bh,ol,wh,$h,bo,Xe,wo,js,Bs,pl,Ze,xh,il,yh,$o,W,kh,qt,Eh,qh,cl,Ah,Dh,xo,sa,yo,Hs,Th,hl,Ph,Sh,ko,vs,Ys,ul,ea,Ch,fl,Nh,Eo,L,Oh,ml,zh,Fh,At,Ih,Rh,dl,Mh,Lh,qo,Gs,Uh,aa,Vh,Bh,Ao,ta,Do,Dt,Hh,To,na,Po,bs,Ws,gl,la,Yh,_l,Gh,So,Tt,Wh,Co,ws,Js,jl,ra,Jh,vl,Kh,No,Ks,Qh,Pt,Xh,Zh,Oo,Qs,su,St,eu,au,zo,oa,Fo,$s,Xs,bl,pa,tu,wl,nu,Io,Zs,lu,Ct,ru,ou,Ro,ia,Mo,xs,se,$l,ca,pu,xl,iu,Lo,N,cu,Nt,hu,uu,Ot,fu,mu,zt,du,gu,Ft,_u,ju,Uo,ha,Vo,ee,Bo,ae,vu,It,bu,wu,Ho,ua,Yo,ys,te,yl,fa,$u,kl,xu,Go,Rt,yu,Wo,ma,Jo,O,ku,El,Eu,qu,ql,Au,Du,Al,Tu,Pu,Mt,Su,Cu,Ko,da,Qo,J,Nu,Dl,Ou,zu,Tl,Fu,Iu,Xo,ks,ne,Pl,ga,Ru,Sl,Mu,Zo,K,Lu,Lt,Uu,Vu,Ut,Bu,Hu,sp,Q,Yu,Cl,Gu,Wu,Nl,Ju,Ku,ep,X,Qu,Ol,Xu,Zu,zl,sf,ef,ap,_a,tp,Z,af,Vt,tf,nf,Fl,lf,rf,np,ja,lp,le,of,Bt,pf,cf,rp,ss,hf,Il,uf,ff,Ht,mf,df,op,va,pp,re,ip,es,gf,Yt,_f,jf,Rl,vf,bf,cp,ba,hp,S,wf,Gt,$f,xf,Ml,yf,kf,Ll,Ef,qf,Ul,Af,Df,Vl,Tf,Pf,up,wa,fp,oe,Sf,Bl,Cf,Nf,mp,$a,dp,Es,pe,Hl,xa,Of,Yl,zf,gp,as,Ff,Gl,If,Rf,Wt,Mf,Lf,_p,ya,jp,qs,ie,Wl,ka,Uf,Jl,Vf,vp,U,Bf,Jt,Hf,Yf,Kl,Gf,Wf,Ql,Jf,Kf,bp,As,ce,Xl,Ea,Qf,Zl,Xf,wp,Kt,Zf,$p,he,sr,qa,sm,er,em,am,tm,ar,tr,nm,xp,Aa,yp,ue,lm,Qt,rm,om,kp,Da,Ep,Xt,pm,qp,Ta,Ap,Ds,fe,nr,Pa,im,lr,cm,Dp,me,hm,Zt,um,fm,Tp,ts,mm,Sa,dm,gm,Ca,_m,jm,Pp,Na,Sp,sn,vm,Cp,Oa,Np,de,bm,en,wm,$m,Op,za,zp,z,xm,rr,ym,km,or,Em,qm,pr,Am,Dm,ir,Tm,Pm,Fp,Ts,ge,cr,Fa,Sm,hr,Cm,Ip,ns,Nm,an,Om,zm,ur,Fm,Im,Rp,Ia,Mp,Ps,_e,fr,Ra,Rm,mr,Mm,Lp,ls,Lm,tn,Um,Vm,Ma,Bm,Hm,Up,je,Ym,dr,Gm,Wm,Vp,La,Bp,Ss,ve,gr,Ua,Jm,_r,Km,Hp,be,Qm,nn,Xm,Zm,Yp,Va,Gp,we,sd,jr,ed,ad,Wp,Ba,Jp,Cs,$e,vr,Ha,td,br,nd,Kp,A,ld,wr,rd,od,ln,pd,id,rn,cd,hd,on,ud,fd,pn,md,dd,cn,gd,_d,hn,jd,vd,un,bd,wd,Qp,fn,$d,Xp,Ya,Zp,C,xd,mn,yd,kd,$r,Ed,qd,xr,Ad,Dd,yr,Td,Pd,kr,Sd,si,Ga,ei,Ns,xe,Er,Wa,Cd,qr,Nd,ai,rs,Od,dn,zd,Fd,Ar,Id,Rd,ti,ye,Md,Dr,Ld,Ud,ni,Ja,li,os,Vd,gn,Bd,Hd,_n,Yd,Gd,ri,Ka,oi,ke,pi,Ee,Wd,jn,Jd,Kd,ii,Qa,ci,Os,qe,Tr,Xa,Qd,Pr,Xd,hi,Ae,Zd,vn,sg,eg,ui,Za,fi,zs,De,Sr,st,ag,Cr,tg,mi,Te,ng,bn,lg,rg,di,wn,og,gi,et,_i,Pe,pg,$n,ig,cg,ji,at,vi,Se,bi,Fs,Ce,Nr,tt,hg,Or,ug,wi,xn,fg,$i,Ne,zr,nt,Fr,mg,dg,Ir,gg,_g,H,lt,Rr,jg,vg,Mr,yn,bg,wg,rt,Lr,$g,xg,Ur,kn,yg,kg,ot,Vr,Eg,qg,Br,En,Ag,Dg,pt,Hr,Tg,Pg,it,qn,Sg,Cg,An,Ng,xi,Dn,Og,yi,ct,ki;return $=new E({}),Ve=new w({props:{code:`from datasets import load_dataset
dataset = load_dataset("glue", "mrpc", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mrpc&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Is=new Qr({props:{warning:!0,$$slots:{default:[Ov]},$$scope:{ctx:I}}}),Be=new E({}),He=new E({}),Ye=new w({props:{code:`dataset["label"][:10]
sorted_dataset = dataset.sort("label")
sorted_dataset["label"][:10]
sorted_dataset["label"][-10:]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset = dataset.sort(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted_dataset[<span class="hljs-string">&quot;label&quot;</span>][-<span class="hljs-number">10</span>:]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]`}}),Ge=new E({}),We=new w({props:{code:`shuffled_dataset = sorted_dataset.shuffle(seed=42)
shuffled_dataset["label"][:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset = sorted_dataset.shuffle(seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>shuffled_dataset[<span class="hljs-string">&quot;label&quot;</span>][:<span class="hljs-number">10</span>]
[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]`}}),Je=new E({}),Ke=new w({props:{code:`small_dataset = dataset.select([0, 10, 20, 30, 40, 50])
len(small_dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>small_dataset = dataset.select([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(small_dataset)
<span class="hljs-number">6</span>`}}),Qe=new w({props:{code:`start_with_ar = dataset.filter(lambda example: example["sentence1"].startswith("Ar"))
len(start_with_ar)
start_with_ar["sentence1"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example: example[<span class="hljs-string">&quot;sentence1&quot;</span>].startswith(<span class="hljs-string">&quot;Ar&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(start_with_ar)
<span class="hljs-number">6</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>start_with_ar[<span class="hljs-string">&quot;sentence1&quot;</span>]
[<span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
<span class="hljs-string">&#x27;Arison said Mann may have been one of the pioneers of the world music movement and he had a deep love of Brazilian music .&#x27;</span>,
<span class="hljs-string">&#x27;Arts helped coach the youth on an eighth-grade football team at Lombardi Middle School in Green Bay .&#x27;</span>,
<span class="hljs-string">&#x27;Around 9 : 00 a.m. EDT ( 1300 GMT ) , the euro was at $ 1.1566 against the dollar , up 0.07 percent on the day .&#x27;</span>,
<span class="hljs-string">&quot;Arguing that the case was an isolated example , Canada has threatened a trade backlash if Tokyo &#x27;s ban is not justified on scientific grounds .&quot;</span>,
<span class="hljs-string">&#x27;Artists are worried the plan would harm those who need help most - performers who have a difficult time lining up shows .&#x27;</span>
]`}}),Xe=new w({props:{code:`even_dataset = dataset.filter(lambda example, idx: idx % 2 == 0, with_indices=True)
len(even_dataset)
len(dataset) / 2`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>even_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> example, idx: idx % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(even_dataset)
<span class="hljs-number">1834</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">len</span>(dataset) / <span class="hljs-number">2</span>
<span class="hljs-number">1834.0</span>`}}),Ze=new E({}),sa=new w({props:{code:`dataset.train_test_split(test_size=0.1)
0.1 * len(dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.train_test_split(test_size=<span class="hljs-number">0.1</span>)
{<span class="hljs-string">&#x27;train&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">3301</span>),
<span class="hljs-string">&#x27;test&#x27;</span>: Dataset(schema: {<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-string">&#x27;int32&#x27;</span>}, num_rows: <span class="hljs-number">367</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">0.1</span> * <span class="hljs-built_in">len</span>(dataset)
<span class="hljs-number">366.8</span>`}}),ea=new E({}),ta=new w({props:{code:`from datasets import load_dataset
datasets = load_dataset("imdb", split="train")
print(dataset)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>datasets = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(dataset)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">25000</span>
})`}}),na=new w({props:{code:`dataset.shard(num_shards=4, index=0)
print(25000/4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.shard(num_shards=<span class="hljs-number">4</span>, index=<span class="hljs-number">0</span>)
Dataset({
    features: [<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>],
    num_rows: <span class="hljs-number">6250</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-number">25000</span>/<span class="hljs-number">4</span>)
<span class="hljs-number">6250.0</span>`}}),la=new E({}),ra=new E({}),oa=new w({props:{code:`dataset
dataset = dataset.rename_column("sentence1", "sentenceA")
dataset = dataset.rename_column("sentence2", "sentenceB")
dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentenceA&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.rename_column(<span class="hljs-string">&quot;sentence2&quot;</span>, <span class="hljs-string">&quot;sentenceB&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentenceA&#x27;</span>, <span class="hljs-string">&#x27;sentenceB&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`}}),pa=new E({}),ia=new w({props:{code:`dataset = dataset.remove_columns("label")
dataset
dataset = dataset.remove_columns(["sentence1", "sentence2"])
dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns(<span class="hljs-string">&quot;label&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.remove_columns([<span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentence2&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
    features: [<span class="hljs-string">&#x27;idx&#x27;</span>],
    num_rows: <span class="hljs-number">3668</span>
})`}}),ca=new E({}),ha=new w({props:{code:`dataset.features

from datasets import ClassLabel, Value
new_features = dataset.features.copy()
new_features["label"] = ClassLabel(names=["negative", "positive"])
new_features["idx"] = Value("int64")
dataset = dataset.cast(new_features)
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> ClassLabel, Value
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features = dataset.features.copy()
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;label&quot;</span>] = ClassLabel(names=[<span class="hljs-string">&quot;negative&quot;</span>, <span class="hljs-string">&quot;positive&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>new_features[<span class="hljs-string">&quot;idx&quot;</span>] = Value(<span class="hljs-string">&quot;int64&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast(new_features)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;negative&#x27;</span>, <span class="hljs-string">&#x27;positive&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int64&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),ee=new Qr({props:{$$slots:{default:[zv]},$$scope:{ctx:I}}}),ua=new w({props:{code:`dataset.features

dataset = dataset.cast_column("audio", Audio(sampling_rate=16000))
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">44100</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.cast_column(<span class="hljs-string">&quot;audio&quot;</span>, Audio(sampling_rate=<span class="hljs-number">16000</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;audio&#x27;</span>: Audio(sampling_rate=<span class="hljs-number">16000</span>, mono=<span class="hljs-literal">True</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),fa=new E({}),ma=new w({props:{code:`from datasets import load_dataset
dataset = load_dataset("squad", split="train")
dataset.features`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.features
{<span class="hljs-string">&#x27;answers&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;answer_start&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;context&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;id&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;question&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;title&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),da=new w({props:{code:`flat_dataset = dataset.flatten()
flat_dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset = dataset.flatten()
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_dataset
Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers.text&#x27;</span>, <span class="hljs-string">&#x27;answers.answer_start&#x27;</span>],
 num_rows: <span class="hljs-number">87599</span>
})`}}),ga=new E({}),_a=new w({props:{code:`def add_prefix(example):
    example["sentence1"] = 'My sentence: '' + example["sentence1"]
    return example`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_prefix</span>(<span class="hljs-params">example</span>):
<span class="hljs-meta">... </span>    example[<span class="hljs-string">&quot;sentence1&quot;</span>] = <span class="hljs-string">&#x27;My sentence: &#x27;</span><span class="hljs-string">&#x27; + example[&quot;sentence1&quot;]
...     return example</span>`}}),ja=new w({props:{code:`updated_dataset = small_dataset.map(add_prefix)
updated_dataset["sentence1"][:5]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = small_dataset.<span class="hljs-built_in">map</span>(add_prefix)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&quot;sentence1&quot;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;My sentence: Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&quot;My sentence: Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
<span class="hljs-string">&#x27;My sentence: They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added .&#x27;</span>,
<span class="hljs-string">&#x27;My sentence: Around 0335 GMT , Tab shares were up 19 cents , or 4.4 % , at A $ 4.56 , having earlier set a record high of A $ 4.57 .&#x27;</span>,
]`}}),va=new w({props:{code:`updated_dataset = dataset.map(lambda example: {"new_sentence": example["sentence1"]}, remove_columns=["sentence1"])
updated_dataset.column_names`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example: {<span class="hljs-string">&quot;new_sentence&quot;</span>: example[<span class="hljs-string">&quot;sentence1&quot;</span>]}, remove_columns=[<span class="hljs-string">&quot;sentence1&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset.column_names
[<span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;new_sentence&#x27;</span>]`}}),re=new Qr({props:{$$slots:{default:[Fv]},$$scope:{ctx:I}}}),ba=new w({props:{code:`updated_dataset = dataset.map(lambda example, idx: {"sentence2": f"{idx}: " + example["sentence2"]}, with_indices=True)
updated_dataset["sentence2"][:5]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&quot;sentence2&quot;</span>: <span class="hljs-string">f&quot;<span class="hljs-subst">{idx}</span>: &quot;</span> + example[<span class="hljs-string">&quot;sentence2&quot;</span>]}, with_indices=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset[<span class="hljs-string">&quot;sentence2&quot;</span>][:<span class="hljs-number">5</span>]
[<span class="hljs-string">&#x27;0: Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&quot;1: Yucaipa bought Dominick &#x27;s in 1995 for $ 693 million and sold it to Safeway for $ 1.8 billion in 1998 .&quot;</span>,
 <span class="hljs-string">&quot;2: On June 10 , the ship &#x27;s owners had published an advertisement on the Internet , offering the explosives for sale .&quot;</span>,
 <span class="hljs-string">&#x27;3: Tab shares jumped 20 cents , or 4.6 % , to set a record closing high at A $ 4.57 .&#x27;</span>,
 <span class="hljs-string">&#x27;4: PG &amp; E Corp. shares jumped $ 1.63 or 8 percent to $ 21.03 on the New York Stock Exchange on Friday .&#x27;</span>
]`}}),wa=new w({props:{code:`from multiprocess import set_start_method
import torch
import os
set_start_method("spawn")
def gpu_computation(example, rank):
    os.environ["CUDA_VISIBLE_DEVICES"] = str(rank % torch.cuda.device_count())
    # Your big GPU call goes here
    return examples
updated_dataset = dataset.map(gpu_computation, with_rank=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> multiprocess <span class="hljs-keyword">import</span> set_start_method
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> os
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>set_start_method(<span class="hljs-string">&quot;spawn&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">gpu_computation</span>(<span class="hljs-params">example, rank</span>):
<span class="hljs-meta">&gt;&gt;&gt; </span>    os.environ[<span class="hljs-string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="hljs-built_in">str</span>(rank % torch.cuda.device_count())
<span class="hljs-meta">&gt;&gt;&gt; </span>    <span class="hljs-comment"># Your big GPU call goes here</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>    <span class="hljs-keyword">return</span> examples
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(gpu_computation, with_rank=<span class="hljs-literal">True</span>)`}}),$a=new w({props:{code:"RuntimeError: Cannot re-initialize CUDA in forked subprocess. To use CUDA with multiprocessing, you must use the 'spawn' start method.",highlighted:'RuntimeError: Cannot re-initialize CUDA <span class="hljs-keyword">in</span> forked subprocess. To use CUDA with multiprocessing, you must use the <span class="hljs-string">&#x27;spawn&#x27;</span> start method.'}}),xa=new E({}),ya=new w({props:{code:'updated_dataset = dataset.map(lambda example, idx: {"sentence2": f"{idx}: " + example["sentence2"]}, num_proc=4)',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>updated_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> example, idx: {<span class="hljs-string">&quot;sentence2&quot;</span>: <span class="hljs-string">f&quot;<span class="hljs-subst">{idx}</span>: &quot;</span> + example[<span class="hljs-string">&quot;sentence2&quot;</span>]}, num_proc=<span class="hljs-number">4</span>)'}}),ka=new E({}),Ea=new E({}),Aa=new w({props:{code:`def chunk_examples(examples):
    chunks = []
    for sentence in examples["sentence1"]:
        chunks += [sentence[i:i + 50] for i in range(0, len(sentence), 50)]
    return {"chunks": chunks}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">chunk_examples</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    chunks = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;sentence1&quot;</span>]:
<span class="hljs-meta">... </span>        chunks += [sentence[i:i + <span class="hljs-number">50</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(sentence), <span class="hljs-number">50</span>)]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;chunks&quot;</span>: chunks}`}}),Da=new w({props:{code:`chunked_dataset = dataset.map(chunk_examples, batched=True, remove_columns=dataset.column_names)
chunked_dataset[:10]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset = dataset.<span class="hljs-built_in">map</span>(chunk_examples, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names)
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset[:<span class="hljs-number">10</span>]
{<span class="hljs-string">&#x27;chunks&#x27;</span>: [<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the &#x27;</span>,
            <span class="hljs-string">&#x27;witness &quot; , of deliberately distorting his evidenc&#x27;</span>,
            <span class="hljs-string">&#x27;e .&#x27;</span>,
            <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain&quot;</span>,
            <span class="hljs-string">&#x27; to Safeway in 1998 for $ 2.5 billion .&#x27;</span>,
            <span class="hljs-string">&#x27;They had published an advertisement on the Interne&#x27;</span>,
            <span class="hljs-string">&#x27;t on June 10 , offering the cargo for sale , he ad&#x27;</span>,
            <span class="hljs-string">&#x27;ded .&#x27;</span>,
            <span class="hljs-string">&#x27;Around 0335 GMT , Tab shares were up 19 cents , or&#x27;</span>,
            <span class="hljs-string">&#x27; 4.4 % , at A $ 4.56 , having earlier set a record&#x27;</span>]}`}}),Ta=new w({props:{code:`dataset
chunked_dataset`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset
Dataset({
 features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
 num_rows: <span class="hljs-number">3668</span>
})
<span class="hljs-meta">&gt;&gt;&gt; </span>chunked_dataset
Dataset(schema: {<span class="hljs-string">&#x27;chunks&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>}, num_rows: <span class="hljs-number">10470</span>)`}}),Pa=new E({}),Na=new w({props:{code:`from random import randint
from transformers import pipeline

fillmask = pipeline("fill-mask", model="roberta-base")
mask_token = fillmask.tokenizer.mask_token
smaller_dataset = dataset.filter(lambda e, i: i<100, with_indices=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>fillmask = pipeline(<span class="hljs-string">&quot;fill-mask&quot;</span>, model=<span class="hljs-string">&quot;roberta-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token = fillmask.tokenizer.mask_token
<span class="hljs-meta">&gt;&gt;&gt; </span>smaller_dataset = dataset.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> e, i: i&lt;<span class="hljs-number">100</span>, with_indices=<span class="hljs-literal">True</span>)`}}),Oa=new w({props:{code:`def augment_data(examples):
    outputs = []
    for sentence in examples["sentence1"]:
        words = sentence.split(' ')
        K = randint(1, len(words)-1)
        masked_sentence = " ".join(words[:K]  + [mask_token] + words[K+1:])
        predictions = fillmask(masked_sentence)
        augmented_sequences = [predictions[i]["sequence"] for i in range(3)]
        outputs += [sentence] + augmented_sequences
    return {"data": outputs}`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">augment_data</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    outputs = []
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;sentence1&quot;</span>]:
<span class="hljs-meta">... </span>        words = sentence.split(<span class="hljs-string">&#x27; &#x27;</span>)
<span class="hljs-meta">... </span>        K = randint(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(words)-<span class="hljs-number">1</span>)
<span class="hljs-meta">... </span>        masked_sentence = <span class="hljs-string">&quot; &quot;</span>.join(words[:K]  + [mask_token] + words[K+<span class="hljs-number">1</span>:])
<span class="hljs-meta">... </span>        predictions = fillmask(masked_sentence)
<span class="hljs-meta">... </span>        augmented_sequences = [predictions[i][<span class="hljs-string">&quot;sequence&quot;</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]
<span class="hljs-meta">... </span>        outputs += [sentence] + augmented_sequences
...
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> {<span class="hljs-string">&quot;data&quot;</span>: outputs}`}}),za=new w({props:{code:`augmented_dataset = smaller_dataset.map(augment_data, batched=True, remove_columns=dataset.column_names, batch_size=8)
augmented_dataset[:9]["data"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset = smaller_dataset.<span class="hljs-built_in">map</span>(augment_data, batched=<span class="hljs-literal">True</span>, remove_columns=dataset.column_names, batch_size=<span class="hljs-number">8</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>augmented_dataset[:<span class="hljs-number">9</span>][<span class="hljs-string">&quot;data&quot;</span>]
[<span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately withholding his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately suppressing his evidence.&#x27;</span>,
 <span class="hljs-string">&#x27;Amrozi accused his brother, whom he called &quot; the witness &quot;, of deliberately destroying his evidence.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick &#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion .&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Stores before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>,
 <span class="hljs-string">&quot;Yucaipa owned Dominick&#x27;s before selling the chain to Safeway in 1998 for $ 2.5 billion.&quot;</span>,
 <span class="hljs-string">&#x27;Yucaipa owned Dominick Pizza before selling the chain to Safeway in 1998 for $ 2.5 billion.&#x27;</span>
]`}}),Fa=new E({}),Ia=new w({props:{code:`from datasets import load_dataset

dataset = load_dataset('glue', 'mrpc')
encoded_dataset = dataset.map(lambda examples: tokenizer(examples["sentence1"]), batched=True)
encoded_dataset["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load all the splits</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset = dataset.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> examples: tokenizer(examples[<span class="hljs-string">&quot;sentence1&quot;</span>]), batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>,
<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,
<span class="hljs-string">&#x27;input_ids&#x27;</span>: [  <span class="hljs-number">101</span>,  <span class="hljs-number">7277</span>,  <span class="hljs-number">2180</span>,  <span class="hljs-number">5303</span>,  <span class="hljs-number">4806</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">1711</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">2292</span>, <span class="hljs-number">1119</span>,  <span class="hljs-number">1270</span>,   <span class="hljs-number">107</span>,  <span class="hljs-number">1103</span>,  <span class="hljs-number">7737</span>,   <span class="hljs-number">107</span>,   <span class="hljs-number">117</span>,  <span class="hljs-number">1104</span>,  <span class="hljs-number">9938</span>, <span class="hljs-number">4267</span>, <span class="hljs-number">12223</span>, <span class="hljs-number">21811</span>,  <span class="hljs-number">1117</span>,  <span class="hljs-number">2554</span>,   <span class="hljs-number">119</span>,   <span class="hljs-number">102</span>],
<span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
<span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
}`}}),Ra=new E({}),La=new w({props:{code:`from datasets import Dataset
import torch.distributed

dataset1 = Dataset.from_dict({"a": [0, 1, 2]})

if training_args.local_rank > 0:
    print("Waiting for main process to perform the mapping")
    torch.distributed.barrier()

dataset2 = dataset1.map(lambda x: {"a": x["a"] + 1})

if training_args.local_rank == 0:
    print("Loading results from main process")
    torch.distributed.barrier()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch.distributed

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank &gt; <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Waiting for main process to perform the mapping&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset2 = dataset1.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: {<span class="hljs-string">&quot;a&quot;</span>: x[<span class="hljs-string">&quot;a&quot;</span>] + <span class="hljs-number">1</span>})

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">if</span> training_args.local_rank == <span class="hljs-number">0</span>:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loading results from main process&quot;</span>)
<span class="hljs-meta">... </span>    torch.distributed.barrier()`}}),Ua=new E({}),Va=new w({props:{code:`from datasets import concatenate_datasets, load_dataset

bookcorpus = load_dataset("bookcorpus", split="train")
wiki = load_dataset("wikipedia", "20220301.en", split="train")
wiki = wiki.remove_columns([col for col in wiki.column_names if col != "text"])  # only keep the 'text' column

assert bookcorpus.features.type == wiki.features.type
bert_dataset = concatenate_datasets([bookcorpus, wiki])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> concatenate_datasets, load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus = load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;wikipedia&quot;</span>, <span class="hljs-string">&quot;20220301.en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = wiki.remove_columns([col <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> wiki.column_names <span class="hljs-keyword">if</span> col != <span class="hljs-string">&quot;text&quot;</span>])  <span class="hljs-comment"># only keep the &#x27;text&#x27; column</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> bookcorpus.features.<span class="hljs-built_in">type</span> == wiki.features.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>bert_dataset = concatenate_datasets([bookcorpus, wiki])`}}),Ba=new w({props:{code:`from datasets import Dataset
bookcorpus_ids = Dataset.from_dict({"ids": list(range(len(bookcorpus)))})
bookcorpus_with_ids = concatenate_datasets([bookcorpus, bookcorpus_ids], axis=1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus_ids = Dataset.from_dict({<span class="hljs-string">&quot;ids&quot;</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(bookcorpus)))})
<span class="hljs-meta">&gt;&gt;&gt; </span>bookcorpus_with_ids = concatenate_datasets([bookcorpus, bookcorpus_ids], axis=<span class="hljs-number">1</span>)`}}),Ha=new E({}),Ya=new w({props:{code:`seed = 42
probabilities = [0.3, 0.5, 0.2]
d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12, 13]})
d3 = Dataset.from_dict({"a": [20, 21, 22]})
dataset = interleave_datasets([d1, d2, d3], probabilities=probabilities, seed=seed)
dataset["a"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>seed = <span class="hljs-number">42</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>probabilities = [<span class="hljs-number">0.3</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.2</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=probabilities, seed=seed)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-number">21</span>, <span class="hljs-number">13</span>]`}}),Ga=new w({props:{code:`d1 = Dataset.from_dict({"a": [0, 1, 2]})
d2 = Dataset.from_dict({"a": [10, 11, 12, 13]})
d3 = Dataset.from_dict({"a": [20, 21, 22]})
dataset = interleave_datasets([d1, d2, d3], stopping_strategy="all_exhausted")
dataset["a"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], stopping_strategy=<span class="hljs-string">&quot;all_exhausted&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">20</span>]`}}),Wa=new E({}),Ja=new w({props:{code:`import torch
dataset.set_format(type="torch", columns=["input_ids", "token_type_ids", "attention_mask", "label"])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;torch&quot;</span>, columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>])`}}),Ka=new w({props:{code:'dataset = dataset.with_format(type="torch", columns=["input_ids", "token_type_ids", "attention_mask", "label"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.with_format(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;torch&quot;</span>, columns=[<span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>, <span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;label&quot;</span>])'}}),ke=new Qr({props:{$$slots:{default:[Iv]},$$scope:{ctx:I}}}),Qa=new w({props:{code:`dataset.format
dataset.reset_format()
dataset.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;torch&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;label&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.reset_format()
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`}}),Xa=new E({}),Za=new w({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")
def encode(batch):
    return tokenizer(batch["sentence1"], padding="longest", truncation=True, max_length=512, return_tensors="pt")
dataset.set_transform(encode)
dataset.format`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">batch</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer(batch[<span class="hljs-string">&quot;sentence1&quot;</span>], padding=<span class="hljs-string">&quot;longest&quot;</span>, truncation=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">512</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(encode)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.<span class="hljs-built_in">format</span>
{<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;custom&#x27;</span>, <span class="hljs-string">&#x27;format_kwargs&#x27;</span>: {<span class="hljs-string">&#x27;transform&#x27;</span>: &lt;function __main__.encode(batch)&gt;}, <span class="hljs-string">&#x27;columns&#x27;</span>: [<span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>], <span class="hljs-string">&#x27;output_all_columns&#x27;</span>: <span class="hljs-literal">False</span>}`}}),st=new E({}),et=new w({props:{code:'encoded_dataset.save_to_disk("path/of/my/dataset/directory")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.save_to_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)'}}),at=new w({props:{code:`from datasets import load_from_disk
reloaded_dataset = load_from_disk("path/of/my/dataset/directory")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span>reloaded_dataset = load_from_disk(<span class="hljs-string">&quot;path/of/my/dataset/directory&quot;</span>)`}}),Se=new Qr({props:{$$slots:{default:[Rv]},$$scope:{ctx:I}}}),tt=new E({}),ct=new w({props:{code:'encoded_dataset.to_csv("path/of/my/dataset.csv")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_dataset.to_csv(<span class="hljs-string">&quot;path/of/my/dataset.csv&quot;</span>)'}}),{c(){v=l("meta"),q=c(),b=l("h1"),y=l("a"),k=l("span"),f($.$$.fragment),x=c(),D=l("span"),hs=t("Process"),F=c(),us=l("p"),ut=t("\u{1F917} Datasets provides many tools for modifying the structure and content of a dataset. These tools are important for tidying up a dataset, creating additional columns, converting between features and formats, and much more."),Xr=c(),ft=l("p"),kc=t("This guide will show you how to:"),Zr=c(),P=l("ul"),Hn=l("li"),Ec=t("Reorder rows and split the dataset."),qc=c(),Yn=l("li"),Ac=t("Rename and remove columns, and other common column operations."),Dc=c(),Gn=l("li"),Tc=t("Apply processing functions to each example in a dataset."),Pc=c(),Wn=l("li"),Sc=t("Concatenate datasets."),Cc=c(),Jn=l("li"),Nc=t("Apply a custom formatting transform."),Oc=c(),Kn=l("li"),zc=t("Save and export processed datasets."),so=c(),R=l("p"),Fc=t("For more details specific to processing other dataset modalities, take a look at the "),Me=l("a"),Ic=t("process audio dataset guide"),Rc=t(", the "),Le=l("a"),Mc=t("process image dataset guide"),Lc=t(", or the "),Ue=l("a"),Uc=t("process text dataset guide"),Vc=t("."),eo=c(),mt=l("p"),Bc=t("The examples in this guide use the MRPC dataset, but feel free to load any dataset of your choice and follow along!"),ao=c(),f(Ve.$$.fragment),to=c(),f(Is.$$.fragment),no=c(),fs=l("h2"),Rs=l("a"),Qn=l("span"),f(Be.$$.fragment),Hc=c(),Xn=l("span"),Yc=t("Sort, shuffle, select, split, and shard"),lo=c(),dt=l("p"),Gc=t("There are several functions for rearranging the structure of a dataset. These functions are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks."),ro=c(),ms=l("h3"),Ms=l("a"),Zn=l("span"),f(He.$$.fragment),Wc=c(),sl=l("span"),Jc=t("Sort"),oo=c(),Ls=l("p"),Kc=t("Use "),gt=l("a"),Qc=t("sort()"),Xc=t(" to sort column values according to their numerical values. The provided column must be NumPy compatible."),po=c(),f(Ye.$$.fragment),io=c(),ds=l("h3"),Us=l("a"),el=l("span"),f(Ge.$$.fragment),Zc=c(),al=l("span"),sh=t("Shuffle"),co=c(),M=l("p"),eh=t("The "),_t=l("a"),ah=t("shuffle()"),th=t(" function randomly rearranges the column values. You can specify the "),tl=l("code"),nh=t("generator"),lh=t(" parameter in this function to use a different "),nl=l("code"),rh=t("numpy.random.Generator"),oh=t(" if you want more control over the algorithm used to shuffle the dataset."),ho=c(),f(We.$$.fragment),uo=c(),gs=l("h3"),Vs=l("a"),ll=l("span"),f(Je.$$.fragment),ph=c(),rl=l("span"),ih=t("Select and Filter"),fo=c(),G=l("p"),ch=t("There are two options for filtering rows in a dataset: "),jt=l("a"),hh=t("select()"),uh=t(" and "),vt=l("a"),fh=t("filter()"),mh=t("."),mo=c(),bt=l("ul"),wt=l("li"),$t=l("a"),dh=t("select()"),gh=t(" returns rows according to a list of indices:"),go=c(),f(Ke.$$.fragment),_o=c(),xt=l("ul"),yt=l("li"),kt=l("a"),_h=t("filter()"),jh=t(" returns rows that match a specified condition:"),jo=c(),f(Qe.$$.fragment),vo=c(),_s=l("p"),Et=l("a"),vh=t("filter()"),bh=t(" can also filter by indices if you set "),ol=l("code"),wh=t("with_indices=True"),$h=t(":"),bo=c(),f(Xe.$$.fragment),wo=c(),js=l("h3"),Bs=l("a"),pl=l("span"),f(Ze.$$.fragment),xh=c(),il=l("span"),yh=t("Split"),$o=c(),W=l("p"),kh=t("The "),qt=l("a"),Eh=t("train_test_split()"),qh=t(" function creates train and test splits if your dataset doesn\u2019t already have them. This allows you to adjust the relative proportions or an absolute number of samples in each split. In the example below, use the "),cl=l("code"),Ah=t("test_size"),Dh=t(" parameter to create a test split that is 10% of the original dataset:"),xo=c(),f(sa.$$.fragment),yo=c(),Hs=l("p"),Th=t("The splits are shuffled by default, but you can set "),hl=l("code"),Ph=t("shuffle=False"),Sh=t(" to prevent shuffling."),ko=c(),vs=l("h3"),Ys=l("a"),ul=l("span"),f(ea.$$.fragment),Ch=c(),fl=l("span"),Nh=t("Shard"),Eo=c(),L=l("p"),Oh=t("\u{1F917} Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the "),ml=l("code"),zh=t("num_shards"),Fh=t(" parameter in "),At=l("a"),Ih=t("shard()"),Rh=t(" to determine the number of shards to split the dataset into. You\u2019ll also need to provide the shard you want to return with the "),dl=l("code"),Mh=t("index"),Lh=t(" parameter."),qo=c(),Gs=l("p"),Uh=t("For example, the "),aa=l("a"),Vh=t("imdb"),Bh=t(" dataset has 25000 examples:"),Ao=c(),f(ta.$$.fragment),Do=c(),Dt=l("p"),Hh=t("After sharding the dataset into four chunks, the first shard will only have 6250 examples:"),To=c(),f(na.$$.fragment),Po=c(),bs=l("h2"),Ws=l("a"),gl=l("span"),f(la.$$.fragment),Yh=c(),_l=l("span"),Gh=t("Rename, remove, cast, and flatten"),So=c(),Tt=l("p"),Wh=t("The following functions allow you to modify the columns of a dataset. These functions are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures."),Co=c(),ws=l("h3"),Js=l("a"),jl=l("span"),f(ra.$$.fragment),Jh=c(),vl=l("span"),Kh=t("Rename"),No=c(),Ks=l("p"),Qh=t("Use "),Pt=l("a"),Xh=t("rename_column()"),Zh=t(" when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Oo=c(),Qs=l("p"),su=t("Provide "),St=l("a"),eu=t("rename_column()"),au=t(" with the name of the original column, and the new column name:"),zo=c(),f(oa.$$.fragment),Fo=c(),$s=l("h3"),Xs=l("a"),bl=l("span"),f(pa.$$.fragment),tu=c(),wl=l("span"),nu=t("Remove"),Io=c(),Zs=l("p"),lu=t("When you need to remove one or more columns, provide the column name to remove to the "),Ct=l("a"),ru=t("remove_columns()"),ou=t(" function. Remove more than one column by providing a list of column names:"),Ro=c(),f(ia.$$.fragment),Mo=c(),xs=l("h3"),se=l("a"),$l=l("span"),f(ca.$$.fragment),pu=c(),xl=l("span"),iu=t("Cast"),Lo=c(),N=l("p"),cu=t("The "),Nt=l("a"),hu=t("cast()"),uu=t(" function transforms the feature type of one or more columns. This function accepts your new "),Ot=l("a"),fu=t("Features"),mu=t(" as its argument. The example below demonstrates how to change the "),zt=l("a"),du=t("ClassLabel"),gu=t(" and "),Ft=l("a"),_u=t("Value"),ju=t(" features:"),Uo=c(),f(ha.$$.fragment),Vo=c(),f(ee.$$.fragment),Bo=c(),ae=l("p"),vu=t("Use the "),It=l("a"),bu=t("cast_column()"),wu=t(" function to change the feature type of a single column. Pass the column name and its new feature type as arguments:"),Ho=c(),f(ua.$$.fragment),Yo=c(),ys=l("h3"),te=l("a"),yl=l("span"),f(fa.$$.fragment),$u=c(),kl=l("span"),xu=t("Flatten"),Go=c(),Rt=l("p"),yu=t("Sometimes a column can be a nested structure of several types. Take a look at the nested structure below from the SQuAD dataset:"),Wo=c(),f(ma.$$.fragment),Jo=c(),O=l("p"),ku=t("The "),El=l("code"),Eu=t("answers"),qu=t(" field contains two subfields: "),ql=l("code"),Au=t("text"),Du=t(" and "),Al=l("code"),Tu=t("answer_start"),Pu=t(". Use the "),Mt=l("a"),Su=t("flatten()"),Cu=t(" function to extract the subfields into their own separate columns:"),Ko=c(),f(da.$$.fragment),Qo=c(),J=l("p"),Nu=t("Notice how the subfields are now their own independent columns: "),Dl=l("code"),Ou=t("answers.text"),zu=t(" and "),Tl=l("code"),Fu=t("answers.answer_start"),Iu=t("."),Xo=c(),ks=l("h2"),ne=l("a"),Pl=l("span"),f(ga.$$.fragment),Ru=c(),Sl=l("span"),Mu=t("Map"),Zo=c(),K=l("p"),Lu=t("Some of the more powerful applications of \u{1F917} Datasets come from using the "),Lt=l("a"),Uu=t("map()"),Vu=t(" function. The primary purpose of "),Ut=l("a"),Bu=t("map()"),Hu=t(" is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),sp=c(),Q=l("p"),Yu=t("In the following example, prefix each "),Cl=l("code"),Gu=t("sentence1"),Wu=t(" value in the dataset with "),Nl=l("code"),Ju=t("'My sentence: '"),Ku=t("."),ep=c(),X=l("p"),Qu=t("Start by creating a function that adds "),Ol=l("code"),Xu=t("'My sentence: '"),Zu=t(" to the beginning of each sentence. The function needs to accept and output a "),zl=l("code"),sf=t("dict"),ef=t(":"),ap=c(),f(_a.$$.fragment),tp=c(),Z=l("p"),af=t("Now use "),Vt=l("a"),tf=t("map()"),nf=t(" to apply the "),Fl=l("code"),lf=t("add_prefix"),rf=t(" function to the entire dataset:"),np=c(),f(ja.$$.fragment),lp=c(),le=l("p"),of=t("Let\u2019s take a look at another example, except this time, you\u2019ll remove a column with "),Bt=l("a"),pf=t("map()"),cf=t(". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),rp=c(),ss=l("p"),hf=t("Specify the column to remove with the "),Il=l("code"),uf=t("remove_columns"),ff=t(" parameter in "),Ht=l("a"),mf=t("map()"),df=t(":"),op=c(),f(va.$$.fragment),pp=c(),f(re.$$.fragment),ip=c(),es=l("p"),gf=t("You can also use "),Yt=l("a"),_f=t("map()"),jf=t(" with indices if you set "),Rl=l("code"),vf=t("with_indices=True"),bf=t(". The example below adds the index to the beginning of each sentence:"),cp=c(),f(ba.$$.fragment),hp=c(),S=l("p"),wf=t("The "),Gt=l("a"),$f=t("map()"),xf=t(" also works with the rank of the process if you set "),Ml=l("code"),yf=t("with_rank=True"),kf=t(". This is analogous to the "),Ll=l("code"),Ef=t("with_indices"),qf=t(" parameter. The "),Ul=l("code"),Af=t("with_rank"),Df=t(" parameter in the mapped function goes after the "),Vl=l("code"),Tf=t("index"),Pf=t(" one if it is already present."),up=c(),f(wa.$$.fragment),fp=c(),oe=l("p"),Sf=t("The main use-case for rank is to parallelize computation across several GPUs. This requires setting "),Bl=l("code"),Cf=t('multiprocess.set_start_method("spawn")'),Nf=t(". If you don\u2019t you\u2019ll receive the following CUDA error:"),mp=c(),f($a.$$.fragment),dp=c(),Es=l("h3"),pe=l("a"),Hl=l("span"),f(xa.$$.fragment),Of=c(),Yl=l("span"),zf=t("Multiprocessing"),gp=c(),as=l("p"),Ff=t("Multiprocessing significantly speeds up processing by parallelizing processes on the CPU. Set the "),Gl=l("code"),If=t("num_proc"),Rf=t(" parameter in "),Wt=l("a"),Mf=t("map()"),Lf=t(" to set the number of processes to use:"),_p=c(),f(ya.$$.fragment),jp=c(),qs=l("h3"),ie=l("a"),Wl=l("span"),f(ka.$$.fragment),Uf=c(),Jl=l("span"),Vf=t("Batch processing"),vp=c(),U=l("p"),Bf=t("The "),Jt=l("a"),Hf=t("map()"),Yf=t(" function supports working with batches of examples. Operate on batches by setting "),Kl=l("code"),Gf=t("batched=True"),Wf=t(". The default batch size is 1000, but you can adjust it with the "),Ql=l("code"),Jf=t("batch_size"),Kf=t(" parameter. Batch processing enables interesting applications such as splitting long sentences into shorter chunks and data augmentation."),bp=c(),As=l("h4"),ce=l("a"),Xl=l("span"),f(Ea.$$.fragment),Qf=c(),Zl=l("span"),Xf=t("Split long examples"),wp=c(),Kt=l("p"),Zf=t("When examples are too long, you may want to split them into several smaller chunks. Begin by creating a function that:"),$p=c(),he=l("ol"),sr=l("li"),qa=l("p"),sm=t("Splits the "),er=l("code"),em=t("sentence1"),am=t(" field into chunks of 50 characters."),tm=c(),ar=l("li"),tr=l("p"),nm=t("Stacks all the chunks together to create the new dataset."),xp=c(),f(Aa.$$.fragment),yp=c(),ue=l("p"),lm=t("Apply the function with "),Qt=l("a"),rm=t("map()"),om=t(":"),kp=c(),f(Da.$$.fragment),Ep=c(),Xt=l("p"),pm=t("Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset."),qp=c(),f(Ta.$$.fragment),Ap=c(),Ds=l("h4"),fe=l("a"),nr=l("span"),f(Pa.$$.fragment),im=c(),lr=l("span"),cm=t("Data augmentation"),Dp=c(),me=l("p"),hm=t("The "),Zt=l("a"),um=t("map()"),fm=t(" function could also be used for data augmentation. The following example generates additional words for a masked token in a sentence."),Tp=c(),ts=l("p"),mm=t("Load and use the "),Sa=l("a"),dm=t("RoBERTA"),gm=t(" model in \u{1F917} Transformers\u2019 "),Ca=l("a"),_m=t("FillMaskPipeline"),jm=t(":"),Pp=c(),f(Na.$$.fragment),Sp=c(),sn=l("p"),vm=t("Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA."),Cp=c(),f(Oa.$$.fragment),Np=c(),de=l("p"),bm=t("Use "),en=l("a"),wm=t("map()"),$m=t(" to apply the function over the whole dataset:"),Op=c(),f(za.$$.fragment),zp=c(),z=l("p"),xm=t("For each original sentence, RoBERTA augmented a random word with three alternatives. The original word "),rr=l("code"),ym=t("distorting"),km=t(" is supplemented by "),or=l("code"),Em=t("withholding"),qm=t(", "),pr=l("code"),Am=t("suppressing"),Dm=t(", and "),ir=l("code"),Tm=t("destroying"),Pm=t("."),Fp=c(),Ts=l("h3"),ge=l("a"),cr=l("span"),f(Fa.$$.fragment),Sm=c(),hr=l("span"),Cm=t("Process multiple splits"),Ip=c(),ns=l("p"),Nm=t("Many datasets have splits that can be processed simultaneously with "),an=l("a"),Om=t("DatasetDict.map()"),zm=t(". For example, tokenize the "),ur=l("code"),Fm=t("sentence1"),Im=t(" field in the train and test split by:"),Rp=c(),f(Ia.$$.fragment),Mp=c(),Ps=l("h3"),_e=l("a"),fr=l("span"),f(Ra.$$.fragment),Rm=c(),mr=l("span"),Mm=t("Distributed usage"),Lp=c(),ls=l("p"),Lm=t("When you use "),tn=l("a"),Um=t("map()"),Vm=t(" in a distributed setting, you should also use "),Ma=l("a"),Bm=t("torch.distributed.barrier"),Hm=t(". This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work."),Up=c(),je=l("p"),Ym=t("The following example shows how you can use "),dr=l("code"),Gm=t("torch.distributed.barrier"),Wm=t(" to synchronize the processes:"),Vp=c(),f(La.$$.fragment),Bp=c(),Ss=l("h2"),ve=l("a"),gr=l("span"),f(Ua.$$.fragment),Jm=c(),_r=l("span"),Km=t("Concatenate"),Hp=c(),be=l("p"),Qm=t("Separate datasets can be concatenated if they share the same column types. Concatenate datasets with "),nn=l("a"),Xm=t("concatenate_datasets()"),Zm=t(":"),Yp=c(),f(Va.$$.fragment),Gp=c(),we=l("p"),sd=t("You can also concatenate two datasets horizontally by setting "),jr=l("code"),ed=t("axis=1"),ad=t(" as long as the datasets have the same number of rows:"),Wp=c(),f(Ba.$$.fragment),Jp=c(),Cs=l("h3"),$e=l("a"),vr=l("span"),f(Ha.$$.fragment),td=c(),br=l("span"),nd=t("Interleave"),Kp=c(),A=l("p"),ld=t("You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as "),wr=l("em"),rd=t("interleaving"),od=t(", which is enabled by the "),ln=l("a"),pd=t("interleave_datasets()"),id=t(" function. Both "),rn=l("a"),cd=t("interleave_datasets()"),hd=t(" and "),on=l("a"),ud=t("concatenate_datasets()"),fd=t(" work with regular "),pn=l("a"),md=t("Dataset"),dd=t(" and "),cn=l("a"),gd=t("IterableDataset"),_d=t(` objects.
Refer to the `),hn=l("a"),jd=t("Stream"),vd=t(" guide for an example of how to interleave "),un=l("a"),bd=t("IterableDataset"),wd=t(" objects."),Qp=c(),fn=l("p"),$d=t(`You can define sampling probabilities for each of the original datasets to specify how to interleave the datasets.
In this case, the new dataset is constructed by getting examples one by one from a random dataset until one of the datasets runs out of samples.`),Xp=c(),f(Ya.$$.fragment),Zp=c(),C=l("p"),xd=t("In the case of "),mn=l("a"),yd=t("Dataset"),kd=t(" objects, you can also specify the "),$r=l("code"),Ed=t("stopping_strategy"),qd=t(". The default strategy, "),xr=l("code"),Ad=t("first_exhausted"),Dd=t(`, is an subsampling strategy, i.e the dataset construction is stopped as soon one of the dataset runs out of samples.
You can specify `),yr=l("code"),Td=t("stopping_strategy=all_exhausted"),Pd=t(` to execute an oversampling strategy. In this case, the dataset construction is stopped as soon as every samples in every dataset has been added at least once. In practice, it means that if a dataset is exhausted, it will return to the beginning of this dataset until the stop criterion has been reached.
Note that if no sampling probabilities are specified, the new dataset will have `),kr=l("code"),Sd=t("max_length_datasets*nb_dataset samples"),si=c(),f(Ga.$$.fragment),ei=c(),Ns=l("h2"),xe=l("a"),Er=l("span"),f(Wa.$$.fragment),Cd=c(),qr=l("span"),Nd=t("Format"),ai=c(),rs=l("p"),Od=t("The "),dn=l("a"),zd=t("set_format()"),Fd=t(" function changes the format of a column to be compatible with some common data formats. Specify the output you\u2019d like in the "),Ar=l("code"),Id=t("type"),Rd=t(" parameter and the columns you want to format. Formatting is applied on-the-fly."),ti=c(),ye=l("p"),Md=t("For example, create PyTorch tensors by setting "),Dr=l("code"),Ld=t('type="torch"'),Ud=t(":"),ni=c(),f(Ja.$$.fragment),li=c(),os=l("p"),Vd=t("The "),gn=l("a"),Bd=t("with_format()"),Hd=t(" function also changes the format of a column, except it returns a new "),_n=l("a"),Yd=t("Dataset"),Gd=t(" object:"),ri=c(),f(Ka.$$.fragment),oi=c(),f(ke.$$.fragment),pi=c(),Ee=l("p"),Wd=t("If you need to reset the dataset to its original format, use the "),jn=l("a"),Jd=t("reset_format()"),Kd=t(" function:"),ii=c(),f(Qa.$$.fragment),ci=c(),Os=l("h3"),qe=l("a"),Tr=l("span"),f(Xa.$$.fragment),Qd=c(),Pr=l("span"),Xd=t("Format transform"),hi=c(),Ae=l("p"),Zd=t("The "),vn=l("a"),sg=t("set_transform()"),eg=t(" function applies a custom formatting transform on-the-fly. This function replaces any previously specified format. For example, you can use this function to tokenize and pad tokens on-the-fly. Tokenization is only applied when examples are accessed:"),ui=c(),f(Za.$$.fragment),fi=c(),zs=l("h2"),De=l("a"),Sr=l("span"),f(st.$$.fragment),ag=c(),Cr=l("span"),tg=t("Save"),mi=c(),Te=l("p"),ng=t("Once you are done processing your dataset, you can save and reuse it later with "),bn=l("a"),lg=t("save_to_disk()"),rg=t("."),di=c(),wn=l("p"),og=t("Save your dataset by providing the path to the directory you wish to save it to:"),gi=c(),f(et.$$.fragment),_i=c(),Pe=l("p"),pg=t("Use the "),$n=l("a"),ig=t("load_from_disk()"),cg=t(" function to reload the dataset:"),ji=c(),f(at.$$.fragment),vi=c(),f(Se.$$.fragment),bi=c(),Fs=l("h2"),Ce=l("a"),Nr=l("span"),f(tt.$$.fragment),hg=c(),Or=l("span"),ug=t("Export"),wi=c(),xn=l("p"),fg=t("\u{1F917} Datasets supports exporting as well so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:"),$i=c(),Ne=l("table"),zr=l("thead"),nt=l("tr"),Fr=l("th"),mg=t("File type"),dg=c(),Ir=l("th"),gg=t("Export method"),_g=c(),H=l("tbody"),lt=l("tr"),Rr=l("td"),jg=t("CSV"),vg=c(),Mr=l("td"),yn=l("a"),bg=t("Dataset.to_csv()"),wg=c(),rt=l("tr"),Lr=l("td"),$g=t("JSON"),xg=c(),Ur=l("td"),kn=l("a"),yg=t("Dataset.to_json()"),kg=c(),ot=l("tr"),Vr=l("td"),Eg=t("Parquet"),qg=c(),Br=l("td"),En=l("a"),Ag=t("Dataset.to_parquet()"),Dg=c(),pt=l("tr"),Hr=l("td"),Tg=t("In-memory Python object"),Pg=c(),it=l("td"),qn=l("a"),Sg=t("Dataset.to_pandas()"),Cg=t(" or "),An=l("a"),Ng=t("Dataset.to_dict()"),xi=c(),Dn=l("p"),Og=t("For example, export your dataset to a CSV file like this:"),yi=c(),f(ct.$$.fragment),this.h()},l(s){const p=Cv('[data-svelte="svelte-1phssyn"]',document.head);v=r(p,"META",{name:!0,content:!0}),p.forEach(a),q=h(s),b=r(s,"H1",{class:!0});var ht=o(b);y=r(ht,"A",{id:!0,class:!0,href:!0});var Yr=o(y);k=r(Yr,"SPAN",{});var Gr=o(k);m($.$$.fragment,Gr),Gr.forEach(a),Yr.forEach(a),x=h(ht),D=r(ht,"SPAN",{});var Wr=o(D);hs=n(Wr,"Process"),Wr.forEach(a),ht.forEach(a),F=h(s),us=r(s,"P",{});var Jr=o(us);ut=n(Jr,"\u{1F917} Datasets provides many tools for modifying the structure and content of a dataset. These tools are important for tidying up a dataset, creating additional columns, converting between features and formats, and much more."),Jr.forEach(a),Xr=h(s),ft=r(s,"P",{});var Ig=o(ft);kc=n(Ig,"This guide will show you how to:"),Ig.forEach(a),Zr=h(s),P=r(s,"UL",{});var V=o(P);Hn=r(V,"LI",{});var Rg=o(Hn);Ec=n(Rg,"Reorder rows and split the dataset."),Rg.forEach(a),qc=h(V),Yn=r(V,"LI",{});var Mg=o(Yn);Ac=n(Mg,"Rename and remove columns, and other common column operations."),Mg.forEach(a),Dc=h(V),Gn=r(V,"LI",{});var Lg=o(Gn);Tc=n(Lg,"Apply processing functions to each example in a dataset."),Lg.forEach(a),Pc=h(V),Wn=r(V,"LI",{});var Ug=o(Wn);Sc=n(Ug,"Concatenate datasets."),Ug.forEach(a),Cc=h(V),Jn=r(V,"LI",{});var Vg=o(Jn);Nc=n(Vg,"Apply a custom formatting transform."),Vg.forEach(a),Oc=h(V),Kn=r(V,"LI",{});var Bg=o(Kn);zc=n(Bg,"Save and export processed datasets."),Bg.forEach(a),V.forEach(a),so=h(s),R=r(s,"P",{});var Oe=o(R);Fc=n(Oe,"For more details specific to processing other dataset modalities, take a look at the "),Me=r(Oe,"A",{class:!0,href:!0});var Hg=o(Me);Ic=n(Hg,"process audio dataset guide"),Hg.forEach(a),Rc=n(Oe,", the "),Le=r(Oe,"A",{class:!0,href:!0});var Yg=o(Le);Mc=n(Yg,"process image dataset guide"),Yg.forEach(a),Lc=n(Oe,", or the "),Ue=r(Oe,"A",{class:!0,href:!0});var Gg=o(Ue);Uc=n(Gg,"process text dataset guide"),Gg.forEach(a),Vc=n(Oe,"."),Oe.forEach(a),eo=h(s),mt=r(s,"P",{});var Wg=o(mt);Bc=n(Wg,"The examples in this guide use the MRPC dataset, but feel free to load any dataset of your choice and follow along!"),Wg.forEach(a),ao=h(s),m(Ve.$$.fragment,s),to=h(s),m(Is.$$.fragment,s),no=h(s),fs=r(s,"H2",{class:!0});var Ei=o(fs);Rs=r(Ei,"A",{id:!0,class:!0,href:!0});var Jg=o(Rs);Qn=r(Jg,"SPAN",{});var Kg=o(Qn);m(Be.$$.fragment,Kg),Kg.forEach(a),Jg.forEach(a),Hc=h(Ei),Xn=r(Ei,"SPAN",{});var Qg=o(Xn);Yc=n(Qg,"Sort, shuffle, select, split, and shard"),Qg.forEach(a),Ei.forEach(a),lo=h(s),dt=r(s,"P",{});var Xg=o(dt);Gc=n(Xg,"There are several functions for rearranging the structure of a dataset. These functions are useful for selecting only the rows you want, creating train and test splits, and sharding very large datasets into smaller chunks."),Xg.forEach(a),ro=h(s),ms=r(s,"H3",{class:!0});var qi=o(ms);Ms=r(qi,"A",{id:!0,class:!0,href:!0});var Zg=o(Ms);Zn=r(Zg,"SPAN",{});var s_=o(Zn);m(He.$$.fragment,s_),s_.forEach(a),Zg.forEach(a),Wc=h(qi),sl=r(qi,"SPAN",{});var e_=o(sl);Jc=n(e_,"Sort"),e_.forEach(a),qi.forEach(a),oo=h(s),Ls=r(s,"P",{});var Ai=o(Ls);Kc=n(Ai,"Use "),gt=r(Ai,"A",{href:!0});var a_=o(gt);Qc=n(a_,"sort()"),a_.forEach(a),Xc=n(Ai," to sort column values according to their numerical values. The provided column must be NumPy compatible."),Ai.forEach(a),po=h(s),m(Ye.$$.fragment,s),io=h(s),ds=r(s,"H3",{class:!0});var Di=o(ds);Us=r(Di,"A",{id:!0,class:!0,href:!0});var t_=o(Us);el=r(t_,"SPAN",{});var n_=o(el);m(Ge.$$.fragment,n_),n_.forEach(a),t_.forEach(a),Zc=h(Di),al=r(Di,"SPAN",{});var l_=o(al);sh=n(l_,"Shuffle"),l_.forEach(a),Di.forEach(a),co=h(s),M=r(s,"P",{});var ze=o(M);eh=n(ze,"The "),_t=r(ze,"A",{href:!0});var r_=o(_t);ah=n(r_,"shuffle()"),r_.forEach(a),th=n(ze," function randomly rearranges the column values. You can specify the "),tl=r(ze,"CODE",{});var o_=o(tl);nh=n(o_,"generator"),o_.forEach(a),lh=n(ze," parameter in this function to use a different "),nl=r(ze,"CODE",{});var p_=o(nl);rh=n(p_,"numpy.random.Generator"),p_.forEach(a),oh=n(ze," if you want more control over the algorithm used to shuffle the dataset."),ze.forEach(a),ho=h(s),m(We.$$.fragment,s),uo=h(s),gs=r(s,"H3",{class:!0});var Ti=o(gs);Vs=r(Ti,"A",{id:!0,class:!0,href:!0});var i_=o(Vs);ll=r(i_,"SPAN",{});var c_=o(ll);m(Je.$$.fragment,c_),c_.forEach(a),i_.forEach(a),ph=h(Ti),rl=r(Ti,"SPAN",{});var h_=o(rl);ih=n(h_,"Select and Filter"),h_.forEach(a),Ti.forEach(a),fo=h(s),G=r(s,"P",{});var Tn=o(G);ch=n(Tn,"There are two options for filtering rows in a dataset: "),jt=r(Tn,"A",{href:!0});var u_=o(jt);hh=n(u_,"select()"),u_.forEach(a),uh=n(Tn," and "),vt=r(Tn,"A",{href:!0});var f_=o(vt);fh=n(f_,"filter()"),f_.forEach(a),mh=n(Tn,"."),Tn.forEach(a),mo=h(s),bt=r(s,"UL",{});var m_=o(bt);wt=r(m_,"LI",{});var zg=o(wt);$t=r(zg,"A",{href:!0});var d_=o($t);dh=n(d_,"select()"),d_.forEach(a),gh=n(zg," returns rows according to a list of indices:"),zg.forEach(a),m_.forEach(a),go=h(s),m(Ke.$$.fragment,s),_o=h(s),xt=r(s,"UL",{});var g_=o(xt);yt=r(g_,"LI",{});var Fg=o(yt);kt=r(Fg,"A",{href:!0});var __=o(kt);_h=n(__,"filter()"),__.forEach(a),jh=n(Fg," returns rows that match a specified condition:"),Fg.forEach(a),g_.forEach(a),jo=h(s),m(Qe.$$.fragment,s),vo=h(s),_s=r(s,"P",{});var Kr=o(_s);Et=r(Kr,"A",{href:!0});var j_=o(Et);vh=n(j_,"filter()"),j_.forEach(a),bh=n(Kr," can also filter by indices if you set "),ol=r(Kr,"CODE",{});var v_=o(ol);wh=n(v_,"with_indices=True"),v_.forEach(a),$h=n(Kr,":"),Kr.forEach(a),bo=h(s),m(Xe.$$.fragment,s),wo=h(s),js=r(s,"H3",{class:!0});var Pi=o(js);Bs=r(Pi,"A",{id:!0,class:!0,href:!0});var b_=o(Bs);pl=r(b_,"SPAN",{});var w_=o(pl);m(Ze.$$.fragment,w_),w_.forEach(a),b_.forEach(a),xh=h(Pi),il=r(Pi,"SPAN",{});var $_=o(il);yh=n($_,"Split"),$_.forEach(a),Pi.forEach(a),$o=h(s),W=r(s,"P",{});var Pn=o(W);kh=n(Pn,"The "),qt=r(Pn,"A",{href:!0});var x_=o(qt);Eh=n(x_,"train_test_split()"),x_.forEach(a),qh=n(Pn," function creates train and test splits if your dataset doesn\u2019t already have them. This allows you to adjust the relative proportions or an absolute number of samples in each split. In the example below, use the "),cl=r(Pn,"CODE",{});var y_=o(cl);Ah=n(y_,"test_size"),y_.forEach(a),Dh=n(Pn," parameter to create a test split that is 10% of the original dataset:"),Pn.forEach(a),xo=h(s),m(sa.$$.fragment,s),yo=h(s),Hs=r(s,"P",{});var Si=o(Hs);Th=n(Si,"The splits are shuffled by default, but you can set "),hl=r(Si,"CODE",{});var k_=o(hl);Ph=n(k_,"shuffle=False"),k_.forEach(a),Sh=n(Si," to prevent shuffling."),Si.forEach(a),ko=h(s),vs=r(s,"H3",{class:!0});var Ci=o(vs);Ys=r(Ci,"A",{id:!0,class:!0,href:!0});var E_=o(Ys);ul=r(E_,"SPAN",{});var q_=o(ul);m(ea.$$.fragment,q_),q_.forEach(a),E_.forEach(a),Ch=h(Ci),fl=r(Ci,"SPAN",{});var A_=o(fl);Nh=n(A_,"Shard"),A_.forEach(a),Ci.forEach(a),Eo=h(s),L=r(s,"P",{});var Fe=o(L);Oh=n(Fe,"\u{1F917} Datasets supports sharding to divide a very large dataset into a predefined number of chunks. Specify the "),ml=r(Fe,"CODE",{});var D_=o(ml);zh=n(D_,"num_shards"),D_.forEach(a),Fh=n(Fe," parameter in "),At=r(Fe,"A",{href:!0});var T_=o(At);Ih=n(T_,"shard()"),T_.forEach(a),Rh=n(Fe," to determine the number of shards to split the dataset into. You\u2019ll also need to provide the shard you want to return with the "),dl=r(Fe,"CODE",{});var P_=o(dl);Mh=n(P_,"index"),P_.forEach(a),Lh=n(Fe," parameter."),Fe.forEach(a),qo=h(s),Gs=r(s,"P",{});var Ni=o(Gs);Uh=n(Ni,"For example, the "),aa=r(Ni,"A",{href:!0,rel:!0});var S_=o(aa);Vh=n(S_,"imdb"),S_.forEach(a),Bh=n(Ni," dataset has 25000 examples:"),Ni.forEach(a),Ao=h(s),m(ta.$$.fragment,s),Do=h(s),Dt=r(s,"P",{});var C_=o(Dt);Hh=n(C_,"After sharding the dataset into four chunks, the first shard will only have 6250 examples:"),C_.forEach(a),To=h(s),m(na.$$.fragment,s),Po=h(s),bs=r(s,"H2",{class:!0});var Oi=o(bs);Ws=r(Oi,"A",{id:!0,class:!0,href:!0});var N_=o(Ws);gl=r(N_,"SPAN",{});var O_=o(gl);m(la.$$.fragment,O_),O_.forEach(a),N_.forEach(a),Yh=h(Oi),_l=r(Oi,"SPAN",{});var z_=o(_l);Gh=n(z_,"Rename, remove, cast, and flatten"),z_.forEach(a),Oi.forEach(a),So=h(s),Tt=r(s,"P",{});var F_=o(Tt);Wh=n(F_,"The following functions allow you to modify the columns of a dataset. These functions are useful for renaming or removing columns, changing columns to a new set of features, and flattening nested column structures."),F_.forEach(a),Co=h(s),ws=r(s,"H3",{class:!0});var zi=o(ws);Js=r(zi,"A",{id:!0,class:!0,href:!0});var I_=o(Js);jl=r(I_,"SPAN",{});var R_=o(jl);m(ra.$$.fragment,R_),R_.forEach(a),I_.forEach(a),Jh=h(zi),vl=r(zi,"SPAN",{});var M_=o(vl);Kh=n(M_,"Rename"),M_.forEach(a),zi.forEach(a),No=h(s),Ks=r(s,"P",{});var Fi=o(Ks);Qh=n(Fi,"Use "),Pt=r(Fi,"A",{href:!0});var L_=o(Pt);Xh=n(L_,"rename_column()"),L_.forEach(a),Zh=n(Fi," when you need to rename a column in your dataset. Features associated with the original column are actually moved under the new column name, instead of just replacing the original column in-place."),Fi.forEach(a),Oo=h(s),Qs=r(s,"P",{});var Ii=o(Qs);su=n(Ii,"Provide "),St=r(Ii,"A",{href:!0});var U_=o(St);eu=n(U_,"rename_column()"),U_.forEach(a),au=n(Ii," with the name of the original column, and the new column name:"),Ii.forEach(a),zo=h(s),m(oa.$$.fragment,s),Fo=h(s),$s=r(s,"H3",{class:!0});var Ri=o($s);Xs=r(Ri,"A",{id:!0,class:!0,href:!0});var V_=o(Xs);bl=r(V_,"SPAN",{});var B_=o(bl);m(pa.$$.fragment,B_),B_.forEach(a),V_.forEach(a),tu=h(Ri),wl=r(Ri,"SPAN",{});var H_=o(wl);nu=n(H_,"Remove"),H_.forEach(a),Ri.forEach(a),Io=h(s),Zs=r(s,"P",{});var Mi=o(Zs);lu=n(Mi,"When you need to remove one or more columns, provide the column name to remove to the "),Ct=r(Mi,"A",{href:!0});var Y_=o(Ct);ru=n(Y_,"remove_columns()"),Y_.forEach(a),ou=n(Mi," function. Remove more than one column by providing a list of column names:"),Mi.forEach(a),Ro=h(s),m(ia.$$.fragment,s),Mo=h(s),xs=r(s,"H3",{class:!0});var Li=o(xs);se=r(Li,"A",{id:!0,class:!0,href:!0});var G_=o(se);$l=r(G_,"SPAN",{});var W_=o($l);m(ca.$$.fragment,W_),W_.forEach(a),G_.forEach(a),pu=h(Li),xl=r(Li,"SPAN",{});var J_=o(xl);iu=n(J_,"Cast"),J_.forEach(a),Li.forEach(a),Lo=h(s),N=r(s,"P",{});var ps=o(N);cu=n(ps,"The "),Nt=r(ps,"A",{href:!0});var K_=o(Nt);hu=n(K_,"cast()"),K_.forEach(a),uu=n(ps," function transforms the feature type of one or more columns. This function accepts your new "),Ot=r(ps,"A",{href:!0});var Q_=o(Ot);fu=n(Q_,"Features"),Q_.forEach(a),mu=n(ps," as its argument. The example below demonstrates how to change the "),zt=r(ps,"A",{href:!0});var X_=o(zt);du=n(X_,"ClassLabel"),X_.forEach(a),gu=n(ps," and "),Ft=r(ps,"A",{href:!0});var Z_=o(Ft);_u=n(Z_,"Value"),Z_.forEach(a),ju=n(ps," features:"),ps.forEach(a),Uo=h(s),m(ha.$$.fragment,s),Vo=h(s),m(ee.$$.fragment,s),Bo=h(s),ae=r(s,"P",{});var Ui=o(ae);vu=n(Ui,"Use the "),It=r(Ui,"A",{href:!0});var s2=o(It);bu=n(s2,"cast_column()"),s2.forEach(a),wu=n(Ui," function to change the feature type of a single column. Pass the column name and its new feature type as arguments:"),Ui.forEach(a),Ho=h(s),m(ua.$$.fragment,s),Yo=h(s),ys=r(s,"H3",{class:!0});var Vi=o(ys);te=r(Vi,"A",{id:!0,class:!0,href:!0});var e2=o(te);yl=r(e2,"SPAN",{});var a2=o(yl);m(fa.$$.fragment,a2),a2.forEach(a),e2.forEach(a),$u=h(Vi),kl=r(Vi,"SPAN",{});var t2=o(kl);xu=n(t2,"Flatten"),t2.forEach(a),Vi.forEach(a),Go=h(s),Rt=r(s,"P",{});var n2=o(Rt);yu=n(n2,"Sometimes a column can be a nested structure of several types. Take a look at the nested structure below from the SQuAD dataset:"),n2.forEach(a),Wo=h(s),m(ma.$$.fragment,s),Jo=h(s),O=r(s,"P",{});var is=o(O);ku=n(is,"The "),El=r(is,"CODE",{});var l2=o(El);Eu=n(l2,"answers"),l2.forEach(a),qu=n(is," field contains two subfields: "),ql=r(is,"CODE",{});var r2=o(ql);Au=n(r2,"text"),r2.forEach(a),Du=n(is," and "),Al=r(is,"CODE",{});var o2=o(Al);Tu=n(o2,"answer_start"),o2.forEach(a),Pu=n(is,". Use the "),Mt=r(is,"A",{href:!0});var p2=o(Mt);Su=n(p2,"flatten()"),p2.forEach(a),Cu=n(is," function to extract the subfields into their own separate columns:"),is.forEach(a),Ko=h(s),m(da.$$.fragment,s),Qo=h(s),J=r(s,"P",{});var Sn=o(J);Nu=n(Sn,"Notice how the subfields are now their own independent columns: "),Dl=r(Sn,"CODE",{});var i2=o(Dl);Ou=n(i2,"answers.text"),i2.forEach(a),zu=n(Sn," and "),Tl=r(Sn,"CODE",{});var c2=o(Tl);Fu=n(c2,"answers.answer_start"),c2.forEach(a),Iu=n(Sn,"."),Sn.forEach(a),Xo=h(s),ks=r(s,"H2",{class:!0});var Bi=o(ks);ne=r(Bi,"A",{id:!0,class:!0,href:!0});var h2=o(ne);Pl=r(h2,"SPAN",{});var u2=o(Pl);m(ga.$$.fragment,u2),u2.forEach(a),h2.forEach(a),Ru=h(Bi),Sl=r(Bi,"SPAN",{});var f2=o(Sl);Mu=n(f2,"Map"),f2.forEach(a),Bi.forEach(a),Zo=h(s),K=r(s,"P",{});var Cn=o(K);Lu=n(Cn,"Some of the more powerful applications of \u{1F917} Datasets come from using the "),Lt=r(Cn,"A",{href:!0});var m2=o(Lt);Uu=n(m2,"map()"),m2.forEach(a),Vu=n(Cn," function. The primary purpose of "),Ut=r(Cn,"A",{href:!0});var d2=o(Ut);Bu=n(d2,"map()"),d2.forEach(a),Hu=n(Cn," is to speed up processing functions. It allows you to apply a processing function to each example in a dataset, independently or in batches. This function can even create new rows and columns."),Cn.forEach(a),sp=h(s),Q=r(s,"P",{});var Nn=o(Q);Yu=n(Nn,"In the following example, prefix each "),Cl=r(Nn,"CODE",{});var g2=o(Cl);Gu=n(g2,"sentence1"),g2.forEach(a),Wu=n(Nn," value in the dataset with "),Nl=r(Nn,"CODE",{});var _2=o(Nl);Ju=n(_2,"'My sentence: '"),_2.forEach(a),Ku=n(Nn,"."),Nn.forEach(a),ep=h(s),X=r(s,"P",{});var On=o(X);Qu=n(On,"Start by creating a function that adds "),Ol=r(On,"CODE",{});var j2=o(Ol);Xu=n(j2,"'My sentence: '"),j2.forEach(a),Zu=n(On," to the beginning of each sentence. The function needs to accept and output a "),zl=r(On,"CODE",{});var v2=o(zl);sf=n(v2,"dict"),v2.forEach(a),ef=n(On,":"),On.forEach(a),ap=h(s),m(_a.$$.fragment,s),tp=h(s),Z=r(s,"P",{});var zn=o(Z);af=n(zn,"Now use "),Vt=r(zn,"A",{href:!0});var b2=o(Vt);tf=n(b2,"map()"),b2.forEach(a),nf=n(zn," to apply the "),Fl=r(zn,"CODE",{});var w2=o(Fl);lf=n(w2,"add_prefix"),w2.forEach(a),rf=n(zn," function to the entire dataset:"),zn.forEach(a),np=h(s),m(ja.$$.fragment,s),lp=h(s),le=r(s,"P",{});var Hi=o(le);of=n(Hi,"Let\u2019s take a look at another example, except this time, you\u2019ll remove a column with "),Bt=r(Hi,"A",{href:!0});var $2=o(Bt);pf=n($2,"map()"),$2.forEach(a),cf=n(Hi,". When you remove a column, it is only removed after the example has been provided to the mapped function. This allows the mapped function to use the content of the columns before they are removed."),Hi.forEach(a),rp=h(s),ss=r(s,"P",{});var Fn=o(ss);hf=n(Fn,"Specify the column to remove with the "),Il=r(Fn,"CODE",{});var x2=o(Il);uf=n(x2,"remove_columns"),x2.forEach(a),ff=n(Fn," parameter in "),Ht=r(Fn,"A",{href:!0});var y2=o(Ht);mf=n(y2,"map()"),y2.forEach(a),df=n(Fn,":"),Fn.forEach(a),op=h(s),m(va.$$.fragment,s),pp=h(s),m(re.$$.fragment,s),ip=h(s),es=r(s,"P",{});var In=o(es);gf=n(In,"You can also use "),Yt=r(In,"A",{href:!0});var k2=o(Yt);_f=n(k2,"map()"),k2.forEach(a),jf=n(In," with indices if you set "),Rl=r(In,"CODE",{});var E2=o(Rl);vf=n(E2,"with_indices=True"),E2.forEach(a),bf=n(In,". The example below adds the index to the beginning of each sentence:"),In.forEach(a),cp=h(s),m(ba.$$.fragment,s),hp=h(s),S=r(s,"P",{});var B=o(S);wf=n(B,"The "),Gt=r(B,"A",{href:!0});var q2=o(Gt);$f=n(q2,"map()"),q2.forEach(a),xf=n(B," also works with the rank of the process if you set "),Ml=r(B,"CODE",{});var A2=o(Ml);yf=n(A2,"with_rank=True"),A2.forEach(a),kf=n(B,". This is analogous to the "),Ll=r(B,"CODE",{});var D2=o(Ll);Ef=n(D2,"with_indices"),D2.forEach(a),qf=n(B," parameter. The "),Ul=r(B,"CODE",{});var T2=o(Ul);Af=n(T2,"with_rank"),T2.forEach(a),Df=n(B," parameter in the mapped function goes after the "),Vl=r(B,"CODE",{});var P2=o(Vl);Tf=n(P2,"index"),P2.forEach(a),Pf=n(B," one if it is already present."),B.forEach(a),up=h(s),m(wa.$$.fragment,s),fp=h(s),oe=r(s,"P",{});var Yi=o(oe);Sf=n(Yi,"The main use-case for rank is to parallelize computation across several GPUs. This requires setting "),Bl=r(Yi,"CODE",{});var S2=o(Bl);Cf=n(S2,'multiprocess.set_start_method("spawn")'),S2.forEach(a),Nf=n(Yi,". If you don\u2019t you\u2019ll receive the following CUDA error:"),Yi.forEach(a),mp=h(s),m($a.$$.fragment,s),dp=h(s),Es=r(s,"H3",{class:!0});var Gi=o(Es);pe=r(Gi,"A",{id:!0,class:!0,href:!0});var C2=o(pe);Hl=r(C2,"SPAN",{});var N2=o(Hl);m(xa.$$.fragment,N2),N2.forEach(a),C2.forEach(a),Of=h(Gi),Yl=r(Gi,"SPAN",{});var O2=o(Yl);zf=n(O2,"Multiprocessing"),O2.forEach(a),Gi.forEach(a),gp=h(s),as=r(s,"P",{});var Rn=o(as);Ff=n(Rn,"Multiprocessing significantly speeds up processing by parallelizing processes on the CPU. Set the "),Gl=r(Rn,"CODE",{});var z2=o(Gl);If=n(z2,"num_proc"),z2.forEach(a),Rf=n(Rn," parameter in "),Wt=r(Rn,"A",{href:!0});var F2=o(Wt);Mf=n(F2,"map()"),F2.forEach(a),Lf=n(Rn," to set the number of processes to use:"),Rn.forEach(a),_p=h(s),m(ya.$$.fragment,s),jp=h(s),qs=r(s,"H3",{class:!0});var Wi=o(qs);ie=r(Wi,"A",{id:!0,class:!0,href:!0});var I2=o(ie);Wl=r(I2,"SPAN",{});var R2=o(Wl);m(ka.$$.fragment,R2),R2.forEach(a),I2.forEach(a),Uf=h(Wi),Jl=r(Wi,"SPAN",{});var M2=o(Jl);Vf=n(M2,"Batch processing"),M2.forEach(a),Wi.forEach(a),vp=h(s),U=r(s,"P",{});var Ie=o(U);Bf=n(Ie,"The "),Jt=r(Ie,"A",{href:!0});var L2=o(Jt);Hf=n(L2,"map()"),L2.forEach(a),Yf=n(Ie," function supports working with batches of examples. Operate on batches by setting "),Kl=r(Ie,"CODE",{});var U2=o(Kl);Gf=n(U2,"batched=True"),U2.forEach(a),Wf=n(Ie,". The default batch size is 1000, but you can adjust it with the "),Ql=r(Ie,"CODE",{});var V2=o(Ql);Jf=n(V2,"batch_size"),V2.forEach(a),Kf=n(Ie," parameter. Batch processing enables interesting applications such as splitting long sentences into shorter chunks and data augmentation."),Ie.forEach(a),bp=h(s),As=r(s,"H4",{class:!0});var Ji=o(As);ce=r(Ji,"A",{id:!0,class:!0,href:!0});var B2=o(ce);Xl=r(B2,"SPAN",{});var H2=o(Xl);m(Ea.$$.fragment,H2),H2.forEach(a),B2.forEach(a),Qf=h(Ji),Zl=r(Ji,"SPAN",{});var Y2=o(Zl);Xf=n(Y2,"Split long examples"),Y2.forEach(a),Ji.forEach(a),wp=h(s),Kt=r(s,"P",{});var G2=o(Kt);Zf=n(G2,"When examples are too long, you may want to split them into several smaller chunks. Begin by creating a function that:"),G2.forEach(a),$p=h(s),he=r(s,"OL",{});var Ki=o(he);sr=r(Ki,"LI",{});var W2=o(sr);qa=r(W2,"P",{});var Qi=o(qa);sm=n(Qi,"Splits the "),er=r(Qi,"CODE",{});var J2=o(er);em=n(J2,"sentence1"),J2.forEach(a),am=n(Qi," field into chunks of 50 characters."),Qi.forEach(a),W2.forEach(a),tm=h(Ki),ar=r(Ki,"LI",{});var K2=o(ar);tr=r(K2,"P",{});var Q2=o(tr);nm=n(Q2,"Stacks all the chunks together to create the new dataset."),Q2.forEach(a),K2.forEach(a),Ki.forEach(a),xp=h(s),m(Aa.$$.fragment,s),yp=h(s),ue=r(s,"P",{});var Xi=o(ue);lm=n(Xi,"Apply the function with "),Qt=r(Xi,"A",{href:!0});var X2=o(Qt);rm=n(X2,"map()"),X2.forEach(a),om=n(Xi,":"),Xi.forEach(a),kp=h(s),m(Da.$$.fragment,s),Ep=h(s),Xt=r(s,"P",{});var Z2=o(Xt);pm=n(Z2,"Notice how the sentences are split into shorter chunks now, and there are more rows in the dataset."),Z2.forEach(a),qp=h(s),m(Ta.$$.fragment,s),Ap=h(s),Ds=r(s,"H4",{class:!0});var Zi=o(Ds);fe=r(Zi,"A",{id:!0,class:!0,href:!0});var sj=o(fe);nr=r(sj,"SPAN",{});var ej=o(nr);m(Pa.$$.fragment,ej),ej.forEach(a),sj.forEach(a),im=h(Zi),lr=r(Zi,"SPAN",{});var aj=o(lr);cm=n(aj,"Data augmentation"),aj.forEach(a),Zi.forEach(a),Dp=h(s),me=r(s,"P",{});var sc=o(me);hm=n(sc,"The "),Zt=r(sc,"A",{href:!0});var tj=o(Zt);um=n(tj,"map()"),tj.forEach(a),fm=n(sc," function could also be used for data augmentation. The following example generates additional words for a masked token in a sentence."),sc.forEach(a),Tp=h(s),ts=r(s,"P",{});var Mn=o(ts);mm=n(Mn,"Load and use the "),Sa=r(Mn,"A",{href:!0,rel:!0});var nj=o(Sa);dm=n(nj,"RoBERTA"),nj.forEach(a),gm=n(Mn," model in \u{1F917} Transformers\u2019 "),Ca=r(Mn,"A",{href:!0,rel:!0});var lj=o(Ca);_m=n(lj,"FillMaskPipeline"),lj.forEach(a),jm=n(Mn,":"),Mn.forEach(a),Pp=h(s),m(Na.$$.fragment,s),Sp=h(s),sn=r(s,"P",{});var rj=o(sn);vm=n(rj,"Create a function to randomly select a word to mask in the sentence. The function should also return the original sentence and the top two replacements generated by RoBERTA."),rj.forEach(a),Cp=h(s),m(Oa.$$.fragment,s),Np=h(s),de=r(s,"P",{});var ec=o(de);bm=n(ec,"Use "),en=r(ec,"A",{href:!0});var oj=o(en);wm=n(oj,"map()"),oj.forEach(a),$m=n(ec," to apply the function over the whole dataset:"),ec.forEach(a),Op=h(s),m(za.$$.fragment,s),zp=h(s),z=r(s,"P",{});var cs=o(z);xm=n(cs,"For each original sentence, RoBERTA augmented a random word with three alternatives. The original word "),rr=r(cs,"CODE",{});var pj=o(rr);ym=n(pj,"distorting"),pj.forEach(a),km=n(cs," is supplemented by "),or=r(cs,"CODE",{});var ij=o(or);Em=n(ij,"withholding"),ij.forEach(a),qm=n(cs,", "),pr=r(cs,"CODE",{});var cj=o(pr);Am=n(cj,"suppressing"),cj.forEach(a),Dm=n(cs,", and "),ir=r(cs,"CODE",{});var hj=o(ir);Tm=n(hj,"destroying"),hj.forEach(a),Pm=n(cs,"."),cs.forEach(a),Fp=h(s),Ts=r(s,"H3",{class:!0});var ac=o(Ts);ge=r(ac,"A",{id:!0,class:!0,href:!0});var uj=o(ge);cr=r(uj,"SPAN",{});var fj=o(cr);m(Fa.$$.fragment,fj),fj.forEach(a),uj.forEach(a),Sm=h(ac),hr=r(ac,"SPAN",{});var mj=o(hr);Cm=n(mj,"Process multiple splits"),mj.forEach(a),ac.forEach(a),Ip=h(s),ns=r(s,"P",{});var Ln=o(ns);Nm=n(Ln,"Many datasets have splits that can be processed simultaneously with "),an=r(Ln,"A",{href:!0});var dj=o(an);Om=n(dj,"DatasetDict.map()"),dj.forEach(a),zm=n(Ln,". For example, tokenize the "),ur=r(Ln,"CODE",{});var gj=o(ur);Fm=n(gj,"sentence1"),gj.forEach(a),Im=n(Ln," field in the train and test split by:"),Ln.forEach(a),Rp=h(s),m(Ia.$$.fragment,s),Mp=h(s),Ps=r(s,"H3",{class:!0});var tc=o(Ps);_e=r(tc,"A",{id:!0,class:!0,href:!0});var _j=o(_e);fr=r(_j,"SPAN",{});var jj=o(fr);m(Ra.$$.fragment,jj),jj.forEach(a),_j.forEach(a),Rm=h(tc),mr=r(tc,"SPAN",{});var vj=o(mr);Mm=n(vj,"Distributed usage"),vj.forEach(a),tc.forEach(a),Lp=h(s),ls=r(s,"P",{});var Un=o(ls);Lm=n(Un,"When you use "),tn=r(Un,"A",{href:!0});var bj=o(tn);Um=n(bj,"map()"),bj.forEach(a),Vm=n(Un," in a distributed setting, you should also use "),Ma=r(Un,"A",{href:!0,rel:!0});var wj=o(Ma);Bm=n(wj,"torch.distributed.barrier"),wj.forEach(a),Hm=n(Un,". This ensures the main process performs the mapping, while the other processes load the results, thereby avoiding duplicate work."),Un.forEach(a),Up=h(s),je=r(s,"P",{});var nc=o(je);Ym=n(nc,"The following example shows how you can use "),dr=r(nc,"CODE",{});var $j=o(dr);Gm=n($j,"torch.distributed.barrier"),$j.forEach(a),Wm=n(nc," to synchronize the processes:"),nc.forEach(a),Vp=h(s),m(La.$$.fragment,s),Bp=h(s),Ss=r(s,"H2",{class:!0});var lc=o(Ss);ve=r(lc,"A",{id:!0,class:!0,href:!0});var xj=o(ve);gr=r(xj,"SPAN",{});var yj=o(gr);m(Ua.$$.fragment,yj),yj.forEach(a),xj.forEach(a),Jm=h(lc),_r=r(lc,"SPAN",{});var kj=o(_r);Km=n(kj,"Concatenate"),kj.forEach(a),lc.forEach(a),Hp=h(s),be=r(s,"P",{});var rc=o(be);Qm=n(rc,"Separate datasets can be concatenated if they share the same column types. Concatenate datasets with "),nn=r(rc,"A",{href:!0});var Ej=o(nn);Xm=n(Ej,"concatenate_datasets()"),Ej.forEach(a),Zm=n(rc,":"),rc.forEach(a),Yp=h(s),m(Va.$$.fragment,s),Gp=h(s),we=r(s,"P",{});var oc=o(we);sd=n(oc,"You can also concatenate two datasets horizontally by setting "),jr=r(oc,"CODE",{});var qj=o(jr);ed=n(qj,"axis=1"),qj.forEach(a),ad=n(oc," as long as the datasets have the same number of rows:"),oc.forEach(a),Wp=h(s),m(Ba.$$.fragment,s),Jp=h(s),Cs=r(s,"H3",{class:!0});var pc=o(Cs);$e=r(pc,"A",{id:!0,class:!0,href:!0});var Aj=o($e);vr=r(Aj,"SPAN",{});var Dj=o(vr);m(Ha.$$.fragment,Dj),Dj.forEach(a),Aj.forEach(a),td=h(pc),br=r(pc,"SPAN",{});var Tj=o(br);nd=n(Tj,"Interleave"),Tj.forEach(a),pc.forEach(a),Kp=h(s),A=r(s,"P",{});var T=o(A);ld=n(T,"You can also mix several datasets together by taking alternating examples from each one to create a new dataset. This is known as "),wr=r(T,"EM",{});var Pj=o(wr);rd=n(Pj,"interleaving"),Pj.forEach(a),od=n(T,", which is enabled by the "),ln=r(T,"A",{href:!0});var Sj=o(ln);pd=n(Sj,"interleave_datasets()"),Sj.forEach(a),id=n(T," function. Both "),rn=r(T,"A",{href:!0});var Cj=o(rn);cd=n(Cj,"interleave_datasets()"),Cj.forEach(a),hd=n(T," and "),on=r(T,"A",{href:!0});var Nj=o(on);ud=n(Nj,"concatenate_datasets()"),Nj.forEach(a),fd=n(T," work with regular "),pn=r(T,"A",{href:!0});var Oj=o(pn);md=n(Oj,"Dataset"),Oj.forEach(a),dd=n(T," and "),cn=r(T,"A",{href:!0});var zj=o(cn);gd=n(zj,"IterableDataset"),zj.forEach(a),_d=n(T,` objects.
Refer to the `),hn=r(T,"A",{href:!0});var Fj=o(hn);jd=n(Fj,"Stream"),Fj.forEach(a),vd=n(T," guide for an example of how to interleave "),un=r(T,"A",{href:!0});var Ij=o(un);bd=n(Ij,"IterableDataset"),Ij.forEach(a),wd=n(T," objects."),T.forEach(a),Qp=h(s),fn=r(s,"P",{});var Rj=o(fn);$d=n(Rj,`You can define sampling probabilities for each of the original datasets to specify how to interleave the datasets.
In this case, the new dataset is constructed by getting examples one by one from a random dataset until one of the datasets runs out of samples.`),Rj.forEach(a),Xp=h(s),m(Ya.$$.fragment,s),Zp=h(s),C=r(s,"P",{});var Y=o(C);xd=n(Y,"In the case of "),mn=r(Y,"A",{href:!0});var Mj=o(mn);yd=n(Mj,"Dataset"),Mj.forEach(a),kd=n(Y," objects, you can also specify the "),$r=r(Y,"CODE",{});var Lj=o($r);Ed=n(Lj,"stopping_strategy"),Lj.forEach(a),qd=n(Y,". The default strategy, "),xr=r(Y,"CODE",{});var Uj=o(xr);Ad=n(Uj,"first_exhausted"),Uj.forEach(a),Dd=n(Y,`, is an subsampling strategy, i.e the dataset construction is stopped as soon one of the dataset runs out of samples.
You can specify `),yr=r(Y,"CODE",{});var Vj=o(yr);Td=n(Vj,"stopping_strategy=all_exhausted"),Vj.forEach(a),Pd=n(Y,` to execute an oversampling strategy. In this case, the dataset construction is stopped as soon as every samples in every dataset has been added at least once. In practice, it means that if a dataset is exhausted, it will return to the beginning of this dataset until the stop criterion has been reached.
Note that if no sampling probabilities are specified, the new dataset will have `),kr=r(Y,"CODE",{});var Bj=o(kr);Sd=n(Bj,"max_length_datasets*nb_dataset samples"),Bj.forEach(a),Y.forEach(a),si=h(s),m(Ga.$$.fragment,s),ei=h(s),Ns=r(s,"H2",{class:!0});var ic=o(Ns);xe=r(ic,"A",{id:!0,class:!0,href:!0});var Hj=o(xe);Er=r(Hj,"SPAN",{});var Yj=o(Er);m(Wa.$$.fragment,Yj),Yj.forEach(a),Hj.forEach(a),Cd=h(ic),qr=r(ic,"SPAN",{});var Gj=o(qr);Nd=n(Gj,"Format"),Gj.forEach(a),ic.forEach(a),ai=h(s),rs=r(s,"P",{});var Vn=o(rs);Od=n(Vn,"The "),dn=r(Vn,"A",{href:!0});var Wj=o(dn);zd=n(Wj,"set_format()"),Wj.forEach(a),Fd=n(Vn," function changes the format of a column to be compatible with some common data formats. Specify the output you\u2019d like in the "),Ar=r(Vn,"CODE",{});var Jj=o(Ar);Id=n(Jj,"type"),Jj.forEach(a),Rd=n(Vn," parameter and the columns you want to format. Formatting is applied on-the-fly."),Vn.forEach(a),ti=h(s),ye=r(s,"P",{});var cc=o(ye);Md=n(cc,"For example, create PyTorch tensors by setting "),Dr=r(cc,"CODE",{});var Kj=o(Dr);Ld=n(Kj,'type="torch"'),Kj.forEach(a),Ud=n(cc,":"),cc.forEach(a),ni=h(s),m(Ja.$$.fragment,s),li=h(s),os=r(s,"P",{});var Bn=o(os);Vd=n(Bn,"The "),gn=r(Bn,"A",{href:!0});var Qj=o(gn);Bd=n(Qj,"with_format()"),Qj.forEach(a),Hd=n(Bn," function also changes the format of a column, except it returns a new "),_n=r(Bn,"A",{href:!0});var Xj=o(_n);Yd=n(Xj,"Dataset"),Xj.forEach(a),Gd=n(Bn," object:"),Bn.forEach(a),ri=h(s),m(Ka.$$.fragment,s),oi=h(s),m(ke.$$.fragment,s),pi=h(s),Ee=r(s,"P",{});var hc=o(Ee);Wd=n(hc,"If you need to reset the dataset to its original format, use the "),jn=r(hc,"A",{href:!0});var Zj=o(jn);Jd=n(Zj,"reset_format()"),Zj.forEach(a),Kd=n(hc," function:"),hc.forEach(a),ii=h(s),m(Qa.$$.fragment,s),ci=h(s),Os=r(s,"H3",{class:!0});var uc=o(Os);qe=r(uc,"A",{id:!0,class:!0,href:!0});var sv=o(qe);Tr=r(sv,"SPAN",{});var ev=o(Tr);m(Xa.$$.fragment,ev),ev.forEach(a),sv.forEach(a),Qd=h(uc),Pr=r(uc,"SPAN",{});var av=o(Pr);Xd=n(av,"Format transform"),av.forEach(a),uc.forEach(a),hi=h(s),Ae=r(s,"P",{});var fc=o(Ae);Zd=n(fc,"The "),vn=r(fc,"A",{href:!0});var tv=o(vn);sg=n(tv,"set_transform()"),tv.forEach(a),eg=n(fc," function applies a custom formatting transform on-the-fly. This function replaces any previously specified format. For example, you can use this function to tokenize and pad tokens on-the-fly. Tokenization is only applied when examples are accessed:"),fc.forEach(a),ui=h(s),m(Za.$$.fragment,s),fi=h(s),zs=r(s,"H2",{class:!0});var mc=o(zs);De=r(mc,"A",{id:!0,class:!0,href:!0});var nv=o(De);Sr=r(nv,"SPAN",{});var lv=o(Sr);m(st.$$.fragment,lv),lv.forEach(a),nv.forEach(a),ag=h(mc),Cr=r(mc,"SPAN",{});var rv=o(Cr);tg=n(rv,"Save"),rv.forEach(a),mc.forEach(a),mi=h(s),Te=r(s,"P",{});var dc=o(Te);ng=n(dc,"Once you are done processing your dataset, you can save and reuse it later with "),bn=r(dc,"A",{href:!0});var ov=o(bn);lg=n(ov,"save_to_disk()"),ov.forEach(a),rg=n(dc,"."),dc.forEach(a),di=h(s),wn=r(s,"P",{});var pv=o(wn);og=n(pv,"Save your dataset by providing the path to the directory you wish to save it to:"),pv.forEach(a),gi=h(s),m(et.$$.fragment,s),_i=h(s),Pe=r(s,"P",{});var gc=o(Pe);pg=n(gc,"Use the "),$n=r(gc,"A",{href:!0});var iv=o($n);ig=n(iv,"load_from_disk()"),iv.forEach(a),cg=n(gc," function to reload the dataset:"),gc.forEach(a),ji=h(s),m(at.$$.fragment,s),vi=h(s),m(Se.$$.fragment,s),bi=h(s),Fs=r(s,"H2",{class:!0});var _c=o(Fs);Ce=r(_c,"A",{id:!0,class:!0,href:!0});var cv=o(Ce);Nr=r(cv,"SPAN",{});var hv=o(Nr);m(tt.$$.fragment,hv),hv.forEach(a),cv.forEach(a),hg=h(_c),Or=r(_c,"SPAN",{});var uv=o(Or);ug=n(uv,"Export"),uv.forEach(a),_c.forEach(a),wi=h(s),xn=r(s,"P",{});var fv=o(xn);fg=n(fv,"\u{1F917} Datasets supports exporting as well so you can work with your dataset in other applications. The following table shows currently supported file formats you can export to:"),fv.forEach(a),$i=h(s),Ne=r(s,"TABLE",{});var jc=o(Ne);zr=r(jc,"THEAD",{});var mv=o(zr);nt=r(mv,"TR",{});var vc=o(nt);Fr=r(vc,"TH",{});var dv=o(Fr);mg=n(dv,"File type"),dv.forEach(a),dg=h(vc),Ir=r(vc,"TH",{});var gv=o(Ir);gg=n(gv,"Export method"),gv.forEach(a),vc.forEach(a),mv.forEach(a),_g=h(jc),H=r(jc,"TBODY",{});var Re=o(H);lt=r(Re,"TR",{});var bc=o(lt);Rr=r(bc,"TD",{});var _v=o(Rr);jg=n(_v,"CSV"),_v.forEach(a),vg=h(bc),Mr=r(bc,"TD",{});var jv=o(Mr);yn=r(jv,"A",{href:!0});var vv=o(yn);bg=n(vv,"Dataset.to_csv()"),vv.forEach(a),jv.forEach(a),bc.forEach(a),wg=h(Re),rt=r(Re,"TR",{});var wc=o(rt);Lr=r(wc,"TD",{});var bv=o(Lr);$g=n(bv,"JSON"),bv.forEach(a),xg=h(wc),Ur=r(wc,"TD",{});var wv=o(Ur);kn=r(wv,"A",{href:!0});var $v=o(kn);yg=n($v,"Dataset.to_json()"),$v.forEach(a),wv.forEach(a),wc.forEach(a),kg=h(Re),ot=r(Re,"TR",{});var $c=o(ot);Vr=r($c,"TD",{});var xv=o(Vr);Eg=n(xv,"Parquet"),xv.forEach(a),qg=h($c),Br=r($c,"TD",{});var yv=o(Br);En=r(yv,"A",{href:!0});var kv=o(En);Ag=n(kv,"Dataset.to_parquet()"),kv.forEach(a),yv.forEach(a),$c.forEach(a),Dg=h(Re),pt=r(Re,"TR",{});var xc=o(pt);Hr=r(xc,"TD",{});var Ev=o(Hr);Tg=n(Ev,"In-memory Python object"),Ev.forEach(a),Pg=h(xc),it=r(xc,"TD",{});var yc=o(it);qn=r(yc,"A",{href:!0});var qv=o(qn);Sg=n(qv,"Dataset.to_pandas()"),qv.forEach(a),Cg=n(yc," or "),An=r(yc,"A",{href:!0});var Av=o(An);Ng=n(Av,"Dataset.to_dict()"),Av.forEach(a),yc.forEach(a),xc.forEach(a),Re.forEach(a),jc.forEach(a),xi=h(s),Dn=r(s,"P",{});var Dv=o(Dn);Og=n(Dv,"For example, export your dataset to a CSV file like this:"),Dv.forEach(a),yi=h(s),m(ct.$$.fragment,s),this.h()},h(){u(v,"name","hf:doc:metadata"),u(v,"content",JSON.stringify(Lv)),u(y,"id","process"),u(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(y,"href","#process"),u(b,"class","relative group"),u(Me,"class","underline decoration-pink-400 decoration-2 font-semibold"),u(Me,"href","./audio_process"),u(Le,"class","underline decoration-yellow-400 decoration-2 font-semibold"),u(Le,"href","./image_process"),u(Ue,"class","underline decoration-green-400 decoration-2 font-semibold"),u(Ue,"href","./nlp_process"),u(Rs,"id","sort-shuffle-select-split-and-shard"),u(Rs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Rs,"href","#sort-shuffle-select-split-and-shard"),u(fs,"class","relative group"),u(Ms,"id","sort"),u(Ms,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ms,"href","#sort"),u(ms,"class","relative group"),u(gt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.sort"),u(Us,"id","shuffle"),u(Us,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Us,"href","#shuffle"),u(ds,"class","relative group"),u(_t,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.shuffle"),u(Vs,"id","select-and-filter"),u(Vs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Vs,"href","#select-and-filter"),u(gs,"class","relative group"),u(jt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.select"),u(vt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.filter"),u($t,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.select"),u(kt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.filter"),u(Et,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.filter"),u(Bs,"id","split"),u(Bs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Bs,"href","#split"),u(js,"class","relative group"),u(qt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.train_test_split"),u(Ys,"id","shard"),u(Ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ys,"href","#shard"),u(vs,"class","relative group"),u(At,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.shard"),u(aa,"href","https://huggingface.co/datasets/imdb"),u(aa,"rel","nofollow"),u(Ws,"id","rename-remove-cast-and-flatten"),u(Ws,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ws,"href","#rename-remove-cast-and-flatten"),u(bs,"class","relative group"),u(Js,"id","rename"),u(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Js,"href","#rename"),u(ws,"class","relative group"),u(Pt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.rename_column"),u(St,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.rename_column"),u(Xs,"id","remove"),u(Xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Xs,"href","#remove"),u($s,"class","relative group"),u(Ct,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.remove_columns"),u(se,"id","cast"),u(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(se,"href","#cast"),u(xs,"class","relative group"),u(Nt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.cast"),u(Ot,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),u(zt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.ClassLabel"),u(Ft,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Value"),u(It,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.cast_column"),u(te,"id","flatten"),u(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(te,"href","#flatten"),u(ys,"class","relative group"),u(Mt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.flatten"),u(ne,"id","map"),u(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ne,"href","#map"),u(ks,"class","relative group"),u(Lt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(Ut,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(Vt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(Bt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(Ht,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(Yt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(Gt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(pe,"id","multiprocessing"),u(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(pe,"href","#multiprocessing"),u(Es,"class","relative group"),u(Wt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(ie,"id","batch-processing"),u(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ie,"href","#batch-processing"),u(qs,"class","relative group"),u(Jt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(ce,"id","split-long-examples"),u(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ce,"href","#split-long-examples"),u(As,"class","relative group"),u(Qt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(fe,"id","data-augmentation"),u(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(fe,"href","#data-augmentation"),u(Ds,"class","relative group"),u(Zt,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(Sa,"href","https://huggingface.co/roberta-base"),u(Sa,"rel","nofollow"),u(Ca,"href","https://huggingface.co/transformers/main_classes/pipelines#transformers.FillMaskPipeline"),u(Ca,"rel","nofollow"),u(en,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(ge,"id","process-multiple-splits"),u(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ge,"href","#process-multiple-splits"),u(Ts,"class","relative group"),u(an,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.DatasetDict.map"),u(_e,"id","distributed-usage"),u(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(_e,"href","#distributed-usage"),u(Ps,"class","relative group"),u(tn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),u(Ma,"href","https://pytorch.org/docs/stable/distributed?highlight=barrier#torch.distributed.barrier"),u(Ma,"rel","nofollow"),u(ve,"id","concatenate"),u(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(ve,"href","#concatenate"),u(Ss,"class","relative group"),u(nn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.concatenate_datasets"),u($e,"id","interleave"),u($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u($e,"href","#interleave"),u(Cs,"class","relative group"),u(ln,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.interleave_datasets"),u(rn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.interleave_datasets"),u(on,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.concatenate_datasets"),u(pn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),u(cn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"),u(hn,"href","./stream#interleave"),u(un,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.IterableDataset"),u(mn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),u(xe,"id","format"),u(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(xe,"href","#format"),u(Ns,"class","relative group"),u(dn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_format"),u(gn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.with_format"),u(_n,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),u(jn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.reset_format"),u(qe,"id","format-transform"),u(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(qe,"href","#format-transform"),u(Os,"class","relative group"),u(vn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.set_transform"),u(De,"id","save"),u(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(De,"href","#save"),u(zs,"class","relative group"),u(bn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),u($n,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_from_disk"),u(Ce,"id","export"),u(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),u(Ce,"href","#export"),u(Fs,"class","relative group"),u(yn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.to_csv"),u(kn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.to_json"),u(En,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.to_parquet"),u(qn,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.to_pandas"),u(An,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.to_dict")},m(s,p){e(document.head,v),i(s,q,p),i(s,b,p),e(b,y),e(y,k),d($,k,null),e(b,x),e(b,D),e(D,hs),i(s,F,p),i(s,us,p),e(us,ut),i(s,Xr,p),i(s,ft,p),e(ft,kc),i(s,Zr,p),i(s,P,p),e(P,Hn),e(Hn,Ec),e(P,qc),e(P,Yn),e(Yn,Ac),e(P,Dc),e(P,Gn),e(Gn,Tc),e(P,Pc),e(P,Wn),e(Wn,Sc),e(P,Cc),e(P,Jn),e(Jn,Nc),e(P,Oc),e(P,Kn),e(Kn,zc),i(s,so,p),i(s,R,p),e(R,Fc),e(R,Me),e(Me,Ic),e(R,Rc),e(R,Le),e(Le,Mc),e(R,Lc),e(R,Ue),e(Ue,Uc),e(R,Vc),i(s,eo,p),i(s,mt,p),e(mt,Bc),i(s,ao,p),d(Ve,s,p),i(s,to,p),d(Is,s,p),i(s,no,p),i(s,fs,p),e(fs,Rs),e(Rs,Qn),d(Be,Qn,null),e(fs,Hc),e(fs,Xn),e(Xn,Yc),i(s,lo,p),i(s,dt,p),e(dt,Gc),i(s,ro,p),i(s,ms,p),e(ms,Ms),e(Ms,Zn),d(He,Zn,null),e(ms,Wc),e(ms,sl),e(sl,Jc),i(s,oo,p),i(s,Ls,p),e(Ls,Kc),e(Ls,gt),e(gt,Qc),e(Ls,Xc),i(s,po,p),d(Ye,s,p),i(s,io,p),i(s,ds,p),e(ds,Us),e(Us,el),d(Ge,el,null),e(ds,Zc),e(ds,al),e(al,sh),i(s,co,p),i(s,M,p),e(M,eh),e(M,_t),e(_t,ah),e(M,th),e(M,tl),e(tl,nh),e(M,lh),e(M,nl),e(nl,rh),e(M,oh),i(s,ho,p),d(We,s,p),i(s,uo,p),i(s,gs,p),e(gs,Vs),e(Vs,ll),d(Je,ll,null),e(gs,ph),e(gs,rl),e(rl,ih),i(s,fo,p),i(s,G,p),e(G,ch),e(G,jt),e(jt,hh),e(G,uh),e(G,vt),e(vt,fh),e(G,mh),i(s,mo,p),i(s,bt,p),e(bt,wt),e(wt,$t),e($t,dh),e(wt,gh),i(s,go,p),d(Ke,s,p),i(s,_o,p),i(s,xt,p),e(xt,yt),e(yt,kt),e(kt,_h),e(yt,jh),i(s,jo,p),d(Qe,s,p),i(s,vo,p),i(s,_s,p),e(_s,Et),e(Et,vh),e(_s,bh),e(_s,ol),e(ol,wh),e(_s,$h),i(s,bo,p),d(Xe,s,p),i(s,wo,p),i(s,js,p),e(js,Bs),e(Bs,pl),d(Ze,pl,null),e(js,xh),e(js,il),e(il,yh),i(s,$o,p),i(s,W,p),e(W,kh),e(W,qt),e(qt,Eh),e(W,qh),e(W,cl),e(cl,Ah),e(W,Dh),i(s,xo,p),d(sa,s,p),i(s,yo,p),i(s,Hs,p),e(Hs,Th),e(Hs,hl),e(hl,Ph),e(Hs,Sh),i(s,ko,p),i(s,vs,p),e(vs,Ys),e(Ys,ul),d(ea,ul,null),e(vs,Ch),e(vs,fl),e(fl,Nh),i(s,Eo,p),i(s,L,p),e(L,Oh),e(L,ml),e(ml,zh),e(L,Fh),e(L,At),e(At,Ih),e(L,Rh),e(L,dl),e(dl,Mh),e(L,Lh),i(s,qo,p),i(s,Gs,p),e(Gs,Uh),e(Gs,aa),e(aa,Vh),e(Gs,Bh),i(s,Ao,p),d(ta,s,p),i(s,Do,p),i(s,Dt,p),e(Dt,Hh),i(s,To,p),d(na,s,p),i(s,Po,p),i(s,bs,p),e(bs,Ws),e(Ws,gl),d(la,gl,null),e(bs,Yh),e(bs,_l),e(_l,Gh),i(s,So,p),i(s,Tt,p),e(Tt,Wh),i(s,Co,p),i(s,ws,p),e(ws,Js),e(Js,jl),d(ra,jl,null),e(ws,Jh),e(ws,vl),e(vl,Kh),i(s,No,p),i(s,Ks,p),e(Ks,Qh),e(Ks,Pt),e(Pt,Xh),e(Ks,Zh),i(s,Oo,p),i(s,Qs,p),e(Qs,su),e(Qs,St),e(St,eu),e(Qs,au),i(s,zo,p),d(oa,s,p),i(s,Fo,p),i(s,$s,p),e($s,Xs),e(Xs,bl),d(pa,bl,null),e($s,tu),e($s,wl),e(wl,nu),i(s,Io,p),i(s,Zs,p),e(Zs,lu),e(Zs,Ct),e(Ct,ru),e(Zs,ou),i(s,Ro,p),d(ia,s,p),i(s,Mo,p),i(s,xs,p),e(xs,se),e(se,$l),d(ca,$l,null),e(xs,pu),e(xs,xl),e(xl,iu),i(s,Lo,p),i(s,N,p),e(N,cu),e(N,Nt),e(Nt,hu),e(N,uu),e(N,Ot),e(Ot,fu),e(N,mu),e(N,zt),e(zt,du),e(N,gu),e(N,Ft),e(Ft,_u),e(N,ju),i(s,Uo,p),d(ha,s,p),i(s,Vo,p),d(ee,s,p),i(s,Bo,p),i(s,ae,p),e(ae,vu),e(ae,It),e(It,bu),e(ae,wu),i(s,Ho,p),d(ua,s,p),i(s,Yo,p),i(s,ys,p),e(ys,te),e(te,yl),d(fa,yl,null),e(ys,$u),e(ys,kl),e(kl,xu),i(s,Go,p),i(s,Rt,p),e(Rt,yu),i(s,Wo,p),d(ma,s,p),i(s,Jo,p),i(s,O,p),e(O,ku),e(O,El),e(El,Eu),e(O,qu),e(O,ql),e(ql,Au),e(O,Du),e(O,Al),e(Al,Tu),e(O,Pu),e(O,Mt),e(Mt,Su),e(O,Cu),i(s,Ko,p),d(da,s,p),i(s,Qo,p),i(s,J,p),e(J,Nu),e(J,Dl),e(Dl,Ou),e(J,zu),e(J,Tl),e(Tl,Fu),e(J,Iu),i(s,Xo,p),i(s,ks,p),e(ks,ne),e(ne,Pl),d(ga,Pl,null),e(ks,Ru),e(ks,Sl),e(Sl,Mu),i(s,Zo,p),i(s,K,p),e(K,Lu),e(K,Lt),e(Lt,Uu),e(K,Vu),e(K,Ut),e(Ut,Bu),e(K,Hu),i(s,sp,p),i(s,Q,p),e(Q,Yu),e(Q,Cl),e(Cl,Gu),e(Q,Wu),e(Q,Nl),e(Nl,Ju),e(Q,Ku),i(s,ep,p),i(s,X,p),e(X,Qu),e(X,Ol),e(Ol,Xu),e(X,Zu),e(X,zl),e(zl,sf),e(X,ef),i(s,ap,p),d(_a,s,p),i(s,tp,p),i(s,Z,p),e(Z,af),e(Z,Vt),e(Vt,tf),e(Z,nf),e(Z,Fl),e(Fl,lf),e(Z,rf),i(s,np,p),d(ja,s,p),i(s,lp,p),i(s,le,p),e(le,of),e(le,Bt),e(Bt,pf),e(le,cf),i(s,rp,p),i(s,ss,p),e(ss,hf),e(ss,Il),e(Il,uf),e(ss,ff),e(ss,Ht),e(Ht,mf),e(ss,df),i(s,op,p),d(va,s,p),i(s,pp,p),d(re,s,p),i(s,ip,p),i(s,es,p),e(es,gf),e(es,Yt),e(Yt,_f),e(es,jf),e(es,Rl),e(Rl,vf),e(es,bf),i(s,cp,p),d(ba,s,p),i(s,hp,p),i(s,S,p),e(S,wf),e(S,Gt),e(Gt,$f),e(S,xf),e(S,Ml),e(Ml,yf),e(S,kf),e(S,Ll),e(Ll,Ef),e(S,qf),e(S,Ul),e(Ul,Af),e(S,Df),e(S,Vl),e(Vl,Tf),e(S,Pf),i(s,up,p),d(wa,s,p),i(s,fp,p),i(s,oe,p),e(oe,Sf),e(oe,Bl),e(Bl,Cf),e(oe,Nf),i(s,mp,p),d($a,s,p),i(s,dp,p),i(s,Es,p),e(Es,pe),e(pe,Hl),d(xa,Hl,null),e(Es,Of),e(Es,Yl),e(Yl,zf),i(s,gp,p),i(s,as,p),e(as,Ff),e(as,Gl),e(Gl,If),e(as,Rf),e(as,Wt),e(Wt,Mf),e(as,Lf),i(s,_p,p),d(ya,s,p),i(s,jp,p),i(s,qs,p),e(qs,ie),e(ie,Wl),d(ka,Wl,null),e(qs,Uf),e(qs,Jl),e(Jl,Vf),i(s,vp,p),i(s,U,p),e(U,Bf),e(U,Jt),e(Jt,Hf),e(U,Yf),e(U,Kl),e(Kl,Gf),e(U,Wf),e(U,Ql),e(Ql,Jf),e(U,Kf),i(s,bp,p),i(s,As,p),e(As,ce),e(ce,Xl),d(Ea,Xl,null),e(As,Qf),e(As,Zl),e(Zl,Xf),i(s,wp,p),i(s,Kt,p),e(Kt,Zf),i(s,$p,p),i(s,he,p),e(he,sr),e(sr,qa),e(qa,sm),e(qa,er),e(er,em),e(qa,am),e(he,tm),e(he,ar),e(ar,tr),e(tr,nm),i(s,xp,p),d(Aa,s,p),i(s,yp,p),i(s,ue,p),e(ue,lm),e(ue,Qt),e(Qt,rm),e(ue,om),i(s,kp,p),d(Da,s,p),i(s,Ep,p),i(s,Xt,p),e(Xt,pm),i(s,qp,p),d(Ta,s,p),i(s,Ap,p),i(s,Ds,p),e(Ds,fe),e(fe,nr),d(Pa,nr,null),e(Ds,im),e(Ds,lr),e(lr,cm),i(s,Dp,p),i(s,me,p),e(me,hm),e(me,Zt),e(Zt,um),e(me,fm),i(s,Tp,p),i(s,ts,p),e(ts,mm),e(ts,Sa),e(Sa,dm),e(ts,gm),e(ts,Ca),e(Ca,_m),e(ts,jm),i(s,Pp,p),d(Na,s,p),i(s,Sp,p),i(s,sn,p),e(sn,vm),i(s,Cp,p),d(Oa,s,p),i(s,Np,p),i(s,de,p),e(de,bm),e(de,en),e(en,wm),e(de,$m),i(s,Op,p),d(za,s,p),i(s,zp,p),i(s,z,p),e(z,xm),e(z,rr),e(rr,ym),e(z,km),e(z,or),e(or,Em),e(z,qm),e(z,pr),e(pr,Am),e(z,Dm),e(z,ir),e(ir,Tm),e(z,Pm),i(s,Fp,p),i(s,Ts,p),e(Ts,ge),e(ge,cr),d(Fa,cr,null),e(Ts,Sm),e(Ts,hr),e(hr,Cm),i(s,Ip,p),i(s,ns,p),e(ns,Nm),e(ns,an),e(an,Om),e(ns,zm),e(ns,ur),e(ur,Fm),e(ns,Im),i(s,Rp,p),d(Ia,s,p),i(s,Mp,p),i(s,Ps,p),e(Ps,_e),e(_e,fr),d(Ra,fr,null),e(Ps,Rm),e(Ps,mr),e(mr,Mm),i(s,Lp,p),i(s,ls,p),e(ls,Lm),e(ls,tn),e(tn,Um),e(ls,Vm),e(ls,Ma),e(Ma,Bm),e(ls,Hm),i(s,Up,p),i(s,je,p),e(je,Ym),e(je,dr),e(dr,Gm),e(je,Wm),i(s,Vp,p),d(La,s,p),i(s,Bp,p),i(s,Ss,p),e(Ss,ve),e(ve,gr),d(Ua,gr,null),e(Ss,Jm),e(Ss,_r),e(_r,Km),i(s,Hp,p),i(s,be,p),e(be,Qm),e(be,nn),e(nn,Xm),e(be,Zm),i(s,Yp,p),d(Va,s,p),i(s,Gp,p),i(s,we,p),e(we,sd),e(we,jr),e(jr,ed),e(we,ad),i(s,Wp,p),d(Ba,s,p),i(s,Jp,p),i(s,Cs,p),e(Cs,$e),e($e,vr),d(Ha,vr,null),e(Cs,td),e(Cs,br),e(br,nd),i(s,Kp,p),i(s,A,p),e(A,ld),e(A,wr),e(wr,rd),e(A,od),e(A,ln),e(ln,pd),e(A,id),e(A,rn),e(rn,cd),e(A,hd),e(A,on),e(on,ud),e(A,fd),e(A,pn),e(pn,md),e(A,dd),e(A,cn),e(cn,gd),e(A,_d),e(A,hn),e(hn,jd),e(A,vd),e(A,un),e(un,bd),e(A,wd),i(s,Qp,p),i(s,fn,p),e(fn,$d),i(s,Xp,p),d(Ya,s,p),i(s,Zp,p),i(s,C,p),e(C,xd),e(C,mn),e(mn,yd),e(C,kd),e(C,$r),e($r,Ed),e(C,qd),e(C,xr),e(xr,Ad),e(C,Dd),e(C,yr),e(yr,Td),e(C,Pd),e(C,kr),e(kr,Sd),i(s,si,p),d(Ga,s,p),i(s,ei,p),i(s,Ns,p),e(Ns,xe),e(xe,Er),d(Wa,Er,null),e(Ns,Cd),e(Ns,qr),e(qr,Nd),i(s,ai,p),i(s,rs,p),e(rs,Od),e(rs,dn),e(dn,zd),e(rs,Fd),e(rs,Ar),e(Ar,Id),e(rs,Rd),i(s,ti,p),i(s,ye,p),e(ye,Md),e(ye,Dr),e(Dr,Ld),e(ye,Ud),i(s,ni,p),d(Ja,s,p),i(s,li,p),i(s,os,p),e(os,Vd),e(os,gn),e(gn,Bd),e(os,Hd),e(os,_n),e(_n,Yd),e(os,Gd),i(s,ri,p),d(Ka,s,p),i(s,oi,p),d(ke,s,p),i(s,pi,p),i(s,Ee,p),e(Ee,Wd),e(Ee,jn),e(jn,Jd),e(Ee,Kd),i(s,ii,p),d(Qa,s,p),i(s,ci,p),i(s,Os,p),e(Os,qe),e(qe,Tr),d(Xa,Tr,null),e(Os,Qd),e(Os,Pr),e(Pr,Xd),i(s,hi,p),i(s,Ae,p),e(Ae,Zd),e(Ae,vn),e(vn,sg),e(Ae,eg),i(s,ui,p),d(Za,s,p),i(s,fi,p),i(s,zs,p),e(zs,De),e(De,Sr),d(st,Sr,null),e(zs,ag),e(zs,Cr),e(Cr,tg),i(s,mi,p),i(s,Te,p),e(Te,ng),e(Te,bn),e(bn,lg),e(Te,rg),i(s,di,p),i(s,wn,p),e(wn,og),i(s,gi,p),d(et,s,p),i(s,_i,p),i(s,Pe,p),e(Pe,pg),e(Pe,$n),e($n,ig),e(Pe,cg),i(s,ji,p),d(at,s,p),i(s,vi,p),d(Se,s,p),i(s,bi,p),i(s,Fs,p),e(Fs,Ce),e(Ce,Nr),d(tt,Nr,null),e(Fs,hg),e(Fs,Or),e(Or,ug),i(s,wi,p),i(s,xn,p),e(xn,fg),i(s,$i,p),i(s,Ne,p),e(Ne,zr),e(zr,nt),e(nt,Fr),e(Fr,mg),e(nt,dg),e(nt,Ir),e(Ir,gg),e(Ne,_g),e(Ne,H),e(H,lt),e(lt,Rr),e(Rr,jg),e(lt,vg),e(lt,Mr),e(Mr,yn),e(yn,bg),e(H,wg),e(H,rt),e(rt,Lr),e(Lr,$g),e(rt,xg),e(rt,Ur),e(Ur,kn),e(kn,yg),e(H,kg),e(H,ot),e(ot,Vr),e(Vr,Eg),e(ot,qg),e(ot,Br),e(Br,En),e(En,Ag),e(H,Dg),e(H,pt),e(pt,Hr),e(Hr,Tg),e(pt,Pg),e(pt,it),e(it,qn),e(qn,Sg),e(it,Cg),e(it,An),e(An,Ng),i(s,xi,p),i(s,Dn,p),e(Dn,Og),i(s,yi,p),d(ct,s,p),ki=!0},p(s,[p]){const ht={};p&2&&(ht.$$scope={dirty:p,ctx:s}),Is.$set(ht);const Yr={};p&2&&(Yr.$$scope={dirty:p,ctx:s}),ee.$set(Yr);const Gr={};p&2&&(Gr.$$scope={dirty:p,ctx:s}),re.$set(Gr);const Wr={};p&2&&(Wr.$$scope={dirty:p,ctx:s}),ke.$set(Wr);const Jr={};p&2&&(Jr.$$scope={dirty:p,ctx:s}),Se.$set(Jr)},i(s){ki||(g($.$$.fragment,s),g(Ve.$$.fragment,s),g(Is.$$.fragment,s),g(Be.$$.fragment,s),g(He.$$.fragment,s),g(Ye.$$.fragment,s),g(Ge.$$.fragment,s),g(We.$$.fragment,s),g(Je.$$.fragment,s),g(Ke.$$.fragment,s),g(Qe.$$.fragment,s),g(Xe.$$.fragment,s),g(Ze.$$.fragment,s),g(sa.$$.fragment,s),g(ea.$$.fragment,s),g(ta.$$.fragment,s),g(na.$$.fragment,s),g(la.$$.fragment,s),g(ra.$$.fragment,s),g(oa.$$.fragment,s),g(pa.$$.fragment,s),g(ia.$$.fragment,s),g(ca.$$.fragment,s),g(ha.$$.fragment,s),g(ee.$$.fragment,s),g(ua.$$.fragment,s),g(fa.$$.fragment,s),g(ma.$$.fragment,s),g(da.$$.fragment,s),g(ga.$$.fragment,s),g(_a.$$.fragment,s),g(ja.$$.fragment,s),g(va.$$.fragment,s),g(re.$$.fragment,s),g(ba.$$.fragment,s),g(wa.$$.fragment,s),g($a.$$.fragment,s),g(xa.$$.fragment,s),g(ya.$$.fragment,s),g(ka.$$.fragment,s),g(Ea.$$.fragment,s),g(Aa.$$.fragment,s),g(Da.$$.fragment,s),g(Ta.$$.fragment,s),g(Pa.$$.fragment,s),g(Na.$$.fragment,s),g(Oa.$$.fragment,s),g(za.$$.fragment,s),g(Fa.$$.fragment,s),g(Ia.$$.fragment,s),g(Ra.$$.fragment,s),g(La.$$.fragment,s),g(Ua.$$.fragment,s),g(Va.$$.fragment,s),g(Ba.$$.fragment,s),g(Ha.$$.fragment,s),g(Ya.$$.fragment,s),g(Ga.$$.fragment,s),g(Wa.$$.fragment,s),g(Ja.$$.fragment,s),g(Ka.$$.fragment,s),g(ke.$$.fragment,s),g(Qa.$$.fragment,s),g(Xa.$$.fragment,s),g(Za.$$.fragment,s),g(st.$$.fragment,s),g(et.$$.fragment,s),g(at.$$.fragment,s),g(Se.$$.fragment,s),g(tt.$$.fragment,s),g(ct.$$.fragment,s),ki=!0)},o(s){_($.$$.fragment,s),_(Ve.$$.fragment,s),_(Is.$$.fragment,s),_(Be.$$.fragment,s),_(He.$$.fragment,s),_(Ye.$$.fragment,s),_(Ge.$$.fragment,s),_(We.$$.fragment,s),_(Je.$$.fragment,s),_(Ke.$$.fragment,s),_(Qe.$$.fragment,s),_(Xe.$$.fragment,s),_(Ze.$$.fragment,s),_(sa.$$.fragment,s),_(ea.$$.fragment,s),_(ta.$$.fragment,s),_(na.$$.fragment,s),_(la.$$.fragment,s),_(ra.$$.fragment,s),_(oa.$$.fragment,s),_(pa.$$.fragment,s),_(ia.$$.fragment,s),_(ca.$$.fragment,s),_(ha.$$.fragment,s),_(ee.$$.fragment,s),_(ua.$$.fragment,s),_(fa.$$.fragment,s),_(ma.$$.fragment,s),_(da.$$.fragment,s),_(ga.$$.fragment,s),_(_a.$$.fragment,s),_(ja.$$.fragment,s),_(va.$$.fragment,s),_(re.$$.fragment,s),_(ba.$$.fragment,s),_(wa.$$.fragment,s),_($a.$$.fragment,s),_(xa.$$.fragment,s),_(ya.$$.fragment,s),_(ka.$$.fragment,s),_(Ea.$$.fragment,s),_(Aa.$$.fragment,s),_(Da.$$.fragment,s),_(Ta.$$.fragment,s),_(Pa.$$.fragment,s),_(Na.$$.fragment,s),_(Oa.$$.fragment,s),_(za.$$.fragment,s),_(Fa.$$.fragment,s),_(Ia.$$.fragment,s),_(Ra.$$.fragment,s),_(La.$$.fragment,s),_(Ua.$$.fragment,s),_(Va.$$.fragment,s),_(Ba.$$.fragment,s),_(Ha.$$.fragment,s),_(Ya.$$.fragment,s),_(Ga.$$.fragment,s),_(Wa.$$.fragment,s),_(Ja.$$.fragment,s),_(Ka.$$.fragment,s),_(ke.$$.fragment,s),_(Qa.$$.fragment,s),_(Xa.$$.fragment,s),_(Za.$$.fragment,s),_(st.$$.fragment,s),_(et.$$.fragment,s),_(at.$$.fragment,s),_(Se.$$.fragment,s),_(tt.$$.fragment,s),_(ct.$$.fragment,s),ki=!1},d(s){a(v),s&&a(q),s&&a(b),j($),s&&a(F),s&&a(us),s&&a(Xr),s&&a(ft),s&&a(Zr),s&&a(P),s&&a(so),s&&a(R),s&&a(eo),s&&a(mt),s&&a(ao),j(Ve,s),s&&a(to),j(Is,s),s&&a(no),s&&a(fs),j(Be),s&&a(lo),s&&a(dt),s&&a(ro),s&&a(ms),j(He),s&&a(oo),s&&a(Ls),s&&a(po),j(Ye,s),s&&a(io),s&&a(ds),j(Ge),s&&a(co),s&&a(M),s&&a(ho),j(We,s),s&&a(uo),s&&a(gs),j(Je),s&&a(fo),s&&a(G),s&&a(mo),s&&a(bt),s&&a(go),j(Ke,s),s&&a(_o),s&&a(xt),s&&a(jo),j(Qe,s),s&&a(vo),s&&a(_s),s&&a(bo),j(Xe,s),s&&a(wo),s&&a(js),j(Ze),s&&a($o),s&&a(W),s&&a(xo),j(sa,s),s&&a(yo),s&&a(Hs),s&&a(ko),s&&a(vs),j(ea),s&&a(Eo),s&&a(L),s&&a(qo),s&&a(Gs),s&&a(Ao),j(ta,s),s&&a(Do),s&&a(Dt),s&&a(To),j(na,s),s&&a(Po),s&&a(bs),j(la),s&&a(So),s&&a(Tt),s&&a(Co),s&&a(ws),j(ra),s&&a(No),s&&a(Ks),s&&a(Oo),s&&a(Qs),s&&a(zo),j(oa,s),s&&a(Fo),s&&a($s),j(pa),s&&a(Io),s&&a(Zs),s&&a(Ro),j(ia,s),s&&a(Mo),s&&a(xs),j(ca),s&&a(Lo),s&&a(N),s&&a(Uo),j(ha,s),s&&a(Vo),j(ee,s),s&&a(Bo),s&&a(ae),s&&a(Ho),j(ua,s),s&&a(Yo),s&&a(ys),j(fa),s&&a(Go),s&&a(Rt),s&&a(Wo),j(ma,s),s&&a(Jo),s&&a(O),s&&a(Ko),j(da,s),s&&a(Qo),s&&a(J),s&&a(Xo),s&&a(ks),j(ga),s&&a(Zo),s&&a(K),s&&a(sp),s&&a(Q),s&&a(ep),s&&a(X),s&&a(ap),j(_a,s),s&&a(tp),s&&a(Z),s&&a(np),j(ja,s),s&&a(lp),s&&a(le),s&&a(rp),s&&a(ss),s&&a(op),j(va,s),s&&a(pp),j(re,s),s&&a(ip),s&&a(es),s&&a(cp),j(ba,s),s&&a(hp),s&&a(S),s&&a(up),j(wa,s),s&&a(fp),s&&a(oe),s&&a(mp),j($a,s),s&&a(dp),s&&a(Es),j(xa),s&&a(gp),s&&a(as),s&&a(_p),j(ya,s),s&&a(jp),s&&a(qs),j(ka),s&&a(vp),s&&a(U),s&&a(bp),s&&a(As),j(Ea),s&&a(wp),s&&a(Kt),s&&a($p),s&&a(he),s&&a(xp),j(Aa,s),s&&a(yp),s&&a(ue),s&&a(kp),j(Da,s),s&&a(Ep),s&&a(Xt),s&&a(qp),j(Ta,s),s&&a(Ap),s&&a(Ds),j(Pa),s&&a(Dp),s&&a(me),s&&a(Tp),s&&a(ts),s&&a(Pp),j(Na,s),s&&a(Sp),s&&a(sn),s&&a(Cp),j(Oa,s),s&&a(Np),s&&a(de),s&&a(Op),j(za,s),s&&a(zp),s&&a(z),s&&a(Fp),s&&a(Ts),j(Fa),s&&a(Ip),s&&a(ns),s&&a(Rp),j(Ia,s),s&&a(Mp),s&&a(Ps),j(Ra),s&&a(Lp),s&&a(ls),s&&a(Up),s&&a(je),s&&a(Vp),j(La,s),s&&a(Bp),s&&a(Ss),j(Ua),s&&a(Hp),s&&a(be),s&&a(Yp),j(Va,s),s&&a(Gp),s&&a(we),s&&a(Wp),j(Ba,s),s&&a(Jp),s&&a(Cs),j(Ha),s&&a(Kp),s&&a(A),s&&a(Qp),s&&a(fn),s&&a(Xp),j(Ya,s),s&&a(Zp),s&&a(C),s&&a(si),j(Ga,s),s&&a(ei),s&&a(Ns),j(Wa),s&&a(ai),s&&a(rs),s&&a(ti),s&&a(ye),s&&a(ni),j(Ja,s),s&&a(li),s&&a(os),s&&a(ri),j(Ka,s),s&&a(oi),j(ke,s),s&&a(pi),s&&a(Ee),s&&a(ii),j(Qa,s),s&&a(ci),s&&a(Os),j(Xa),s&&a(hi),s&&a(Ae),s&&a(ui),j(Za,s),s&&a(fi),s&&a(zs),j(st),s&&a(mi),s&&a(Te),s&&a(di),s&&a(wn),s&&a(gi),j(et,s),s&&a(_i),s&&a(Pe),s&&a(ji),j(at,s),s&&a(vi),j(Se,s),s&&a(bi),s&&a(Fs),j(tt),s&&a(wi),s&&a(xn),s&&a($i),s&&a(Ne),s&&a(xi),s&&a(Dn),s&&a(yi),j(ct,s)}}}const Lv={local:"process",sections:[{local:"sort-shuffle-select-split-and-shard",sections:[{local:"sort",title:"Sort"},{local:"shuffle",title:"Shuffle"},{local:"select-and-filter",title:"Select and Filter"},{local:"split",title:"Split"},{local:"shard",title:"Shard"}],title:"Sort, shuffle, select, split, and shard"},{local:"rename-remove-cast-and-flatten",sections:[{local:"rename",title:"Rename"},{local:"remove",title:"Remove"},{local:"cast",title:"Cast"},{local:"flatten",title:"Flatten"}],title:"Rename, remove, cast, and flatten"},{local:"map",sections:[{local:"multiprocessing",title:"Multiprocessing"},{local:"batch-processing",sections:[{local:"split-long-examples",title:"Split long examples"},{local:"data-augmentation",title:"Data augmentation"}],title:"Batch processing"},{local:"process-multiple-splits",title:"Process multiple splits"},{local:"distributed-usage",title:"Distributed usage"}],title:"Map"},{local:"concatenate",sections:[{local:"interleave",title:"Interleave"}],title:"Concatenate"},{local:"format",sections:[{local:"format-transform",title:"Format transform"}],title:"Format"},{local:"save",title:"Save"},{local:"export",title:"Export"}],title:"Process"};function Uv(I){return Nv(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gv extends Tv{constructor(v){super();Pv(this,v,Uv,Mv,Sv,{})}}export{Gv as default,Lv as metadata};
