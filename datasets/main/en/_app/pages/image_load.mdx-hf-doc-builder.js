import{S as Al,i as Dl,s as Fl,e as n,k as p,w as $,t as s,M as Ll,c as i,d as t,m as c,a as r,x as v,h as l,b as m,G as a,g as d,y as b,q as j,o as w,B as E,v as Sl}from"../chunks/vendor-hf-doc-builder.js";import{T as Ms}from"../chunks/Tip-hf-doc-builder.js";import{I as Ye}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as A}from"../chunks/CodeBlock-hf-doc-builder.js";function Tl(J){let f,x,g,q,y,u,P,k;return{c(){f=n("p"),x=s("To work with image datasets, you need to have the "),g=n("code"),q=s("vision"),y=s(" dependency installed. Check out the "),u=n("a"),P=s("installation"),k=s(" guide to learn how to install it."),this.h()},l(_){f=i(_,"P",{});var h=r(f);x=l(h,"To work with image datasets, you need to have the "),g=i(h,"CODE",{});var I=r(g);q=l(I,"vision"),I.forEach(t),y=l(h," dependency installed. Check out the "),u=i(h,"A",{href:!0});var O=r(u);P=l(O,"installation"),O.forEach(t),k=l(h," guide to learn how to install it."),h.forEach(t),this.h()},h(){m(u,"href","./installation#vision")},m(_,h){d(_,f,h),a(f,x),a(f,g),a(g,q),a(f,y),a(f,u),a(u,P),a(f,k)},d(_){_&&t(f)}}}function Nl(J){let f,x,g,q,y,u,P,k;return{c(){f=n("p"),x=s("Index into an image dataset using the row index first and then the "),g=n("code"),q=s("image"),y=s(" column - "),u=n("code"),P=s('dataset[0]["image"]'),k=s(" - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset.")},l(_){f=i(_,"P",{});var h=r(f);x=l(h,"Index into an image dataset using the row index first and then the "),g=i(h,"CODE",{});var I=r(g);q=l(I,"image"),I.forEach(t),y=l(h," column - "),u=i(h,"CODE",{});var O=r(u);P=l(O,'dataset[0]["image"]'),O.forEach(t),k=l(h," - to avoid decoding and resampling all the image objects in the dataset. Otherwise, this can be a slow and time-consuming process if you have a large dataset."),h.forEach(t)},m(_,h){d(_,f,h),a(f,x),a(f,g),a(g,q),a(f,y),a(f,u),a(u,P),a(f,k)},d(_){_&&t(f)}}}function Bl(J){let f,x,g,q,y,u,P,k;return{c(){f=n("p"),x=s("If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),g=n("code"),q=s("drop_labels=False"),y=s(" in "),u=n("code"),P=s("load_dataset"),k=s(".")},l(_){f=i(_,"P",{});var h=r(f);x=l(h,"If metadata files are present, the inferred labels based on the directory name are dropped by default. To include those labels, set "),g=i(h,"CODE",{});var I=r(g);q=l(I,"drop_labels=False"),I.forEach(t),y=l(h," in "),u=i(h,"CODE",{});var O=r(u);P=l(O,"load_dataset"),O.forEach(t),k=l(h,"."),h.forEach(t)},m(_,h){d(_,f,h),a(f,x),a(f,g),a(g,q),a(f,y),a(f,u),a(u,P),a(f,k)},d(_){_&&t(f)}}}function Yl(J){let f,x,g,q,y,u,P,k,_,h,I,O,Me,gt,ut,ja,W,wa,F,_t,He,$t,vt,Ie,bt,jt,Ea,re,qa,K,ya,Q,wt,de,Et,qt,ka,H,V,Re,pe,yt,ze,kt,Ia,L,It,xe,xt,Pt,Pe,Ct,Ot,xa,ce,Pa,S,At,Ue,Dt,Ft,Ce,Lt,St,Ca,fe,Oa,R,X,Ge,me,Tt,Je,Nt,Aa,Z,Bt,We,Yt,Mt,Da,he,Fa,T,Ht,Ke,Rt,zt,Qe,Ut,Gt,La,ge,Sa,ee,Jt,Ve,Wt,Kt,Ta,ue,Na,C,Xe,Qt,Vt,Ze,Xt,Zt,ea,es,as,aa,ts,ss,Oe,ls,os,Ba,z,ae,ta,_e,ns,sa,is,Ya,N,rs,la,ds,ps,oa,cs,fs,Ma,$e,Ha,B,ms,na,hs,gs,ia,us,_s,Ra,ve,za,te,$s,ra,vs,bs,Ua,se,Ga,U,le,da,be,js,pa,ws,Ja,oe,Es,ca,qs,ys,Wa,je,Ka,Y,ks,fa,Is,xs,ma,Ps,Cs,Qa,we,Va,G,ne,ha,Ee,Os,ga,As,Xa,ie,Ds,ua,Fs,Ls,Za,qe,et,M,Ss,_a,Ts,Ns,$a,Bs,Ys,at,ye,tt;return u=new Ye({}),W=new Ms({props:{$$slots:{default:[Tl]},$$scope:{ctx:J}}}),re=new A({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("beans", split="train")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),K=new Ms({props:{warning:!0,$$slots:{default:[Nl]},$$scope:{ctx:J}}}),pe=new Ye({}),ce=new A({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),fe=new A({props:{code:`dataset = load_dataset("beans", split="train").cast_column("image", Image(decode=False))
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;beans&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image(decode=<span class="hljs-literal">False</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
{<span class="hljs-string">&#x27;bytes&#x27;</span>: <span class="hljs-literal">None</span>,
 <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/root/.cache/huggingface/datasets/downloads/extracted/b0a21163f78769a2cf11f58dfc767fb458fc7cea5c05dccc0144a2c0f0bc1292/train/bean_rust/bean_rust_train.29.jpg&#x27;</span>}`}}),me=new Ye({}),he=new A({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),ge=new A({props:{code:`from datasets import load_dataset

dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]

dataset["train"][-1]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">0</span>}

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][-<span class="hljs-number">1</span>]
{<span class="hljs-string">&quot;image&quot;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E8DAD30</span>&gt;, <span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-number">1</span>}`}}),ue=new A({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),_e=new Ye({}),$e=new A({props:{code:`folder/train/metadata.csv
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.csv
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),ve=new A({props:{code:`file_name,additional_feature
0001.png,This is a first value of a text feature you added to your images
0002.png,This is a second value of a text feature you added to your images
0003.png,This is a third value of a text feature you added to your images`,highlighted:`file_name,additional_feature
0001.png,This is a first value of a text feature you added to your images
0002.png,This is a second value of a text feature you added to your images
0003.png,This is a third value of a text feature you added to your images`}}),se=new Ms({props:{$$slots:{default:[Bl]},$$scope:{ctx:J}}}),be=new Ye({}),je=new A({props:{code:`file_name,text
0001.png,This is a golden retriever playing with a ball
0002.png,A german shepherd
0003.png,One chihuahua`,highlighted:`file_name,text
0001.png,This is a golden retriever playing with a ball
0002.png,A german shepherd
0003.png,One chihuahua`}}),we=new A({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
<span class="hljs-string">&quot;This is a golden retriever playing with a ball&quot;</span>`}}),Ee=new Ye({}),qe=new A({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),ye=new A({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),{c(){f=n("meta"),x=p(),g=n("h1"),q=n("a"),y=n("span"),$(u.$$.fragment),P=p(),k=n("span"),_=s("Load image data"),h=p(),I=n("p"),O=s("Image datasets are loaded from the "),Me=n("code"),gt=s("image"),ut=s(" column, which contains a PIL object."),ja=p(),$(W.$$.fragment),wa=p(),F=n("p"),_t=s("When you load an image dataset and call the "),He=n("code"),$t=s("image"),vt=s(" column, the "),Ie=n("a"),bt=s("Image"),jt=s(" feature automatically decodes the PIL object into an image:"),Ea=p(),$(re.$$.fragment),qa=p(),$(K.$$.fragment),ya=p(),Q=n("p"),wt=s("For a guide on how to load any type of dataset, take a look at the "),de=n("a"),Et=s("general loading guide"),qt=s("."),ka=p(),H=n("h2"),V=n("a"),Re=n("span"),$(pe.$$.fragment),yt=p(),ze=n("span"),kt=s("Local files"),Ia=p(),L=n("p"),It=s("You can load a dataset from the image path. Use the "),xe=n("a"),xt=s("cast_column()"),Pt=s(" function to accept a column of image file paths, and decode it into a PIL image with the "),Pe=n("a"),Ct=s("Image"),Ot=s(" feature:"),xa=p(),$(ce.$$.fragment),Pa=p(),S=n("p"),At=s("If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ue=n("code"),Dt=s("decode=False"),Ft=s(" in the "),Ce=n("a"),Lt=s("Image"),St=s(" feature:"),Ca=p(),$(fe.$$.fragment),Oa=p(),R=n("h2"),X=n("a"),Ge=n("span"),$(me.$$.fragment),Tt=p(),Je=n("span"),Nt=s("ImageFolder"),Aa=p(),Z=n("p"),Bt=s("You can also load a dataset with an "),We=n("code"),Yt=s("ImageFolder"),Mt=s(" dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),Da=p(),$(he.$$.fragment),Fa=p(),T=n("p"),Ht=s("Load your dataset by specifying "),Ke=n("code"),Rt=s("imagefolder"),zt=s(" and the directory of your dataset in "),Qe=n("code"),Ut=s("data_dir"),Gt=s(":"),La=p(),$(ge.$$.fragment),Sa=p(),ee=n("p"),Jt=s("Load remote datasets from their URLs with the "),Ve=n("code"),Wt=s("data_files"),Kt=s(" parameter:"),Ta=p(),$(ue.$$.fragment),Na=p(),C=n("p"),Xe=n("code"),Qt=s("ImageFolder"),Vt=s(" creates a "),Ze=n("code"),Xt=s("label"),Zt=s(" column, and the label name is based on the directory name. To ignore the "),ea=n("code"),es=s("label"),as=s(" column, set "),aa=n("code"),ts=s("drop_labels=False"),ss=s(" as defined in "),Oe=n("a"),ls=s("ImageFolderConfig"),os=s("."),Ba=p(),z=n("h2"),ae=n("a"),ta=n("span"),$(_e.$$.fragment),ns=p(),sa=n("span"),is=s("ImageFolder with metadata"),Ya=p(),N=n("p"),rs=s("Metadata associated with your dataset can also be loaded, extending the utility of "),la=n("code"),ds=s("ImageFolder"),ps=s(" to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),oa=n("code"),cs=s("metadata.csv"),fs=s(" file:"),Ma=p(),$($e.$$.fragment),Ha=p(),B=n("p"),ms=s("Your "),na=n("code"),hs=s("metadata.csv"),gs=s(" file must have a "),ia=n("code"),us=s("file_name"),_s=s(" column which links image files with their metadata:"),Ra=p(),$(ve.$$.fragment),za=p(),te=n("p"),$s=s("For complex value types, e.g. a list of floats, it may be more convenient to specify metadata as JSON Lines to avoid parsing errors or reading them as strings. In that case, use "),ra=n("code"),vs=s("metadata.jsonl"),bs=s(" as the name of the metadata file."),Ua=p(),$(se.$$.fragment),Ga=p(),U=n("h3"),le=n("a"),da=n("span"),$(be.$$.fragment),js=p(),pa=n("span"),ws=s("Image captioning"),Ja=p(),oe=n("p"),Es=s("Image captioning datasets have text describing an image. An example "),ca=n("code"),qs=s("metadata.csv"),ys=s(" may look like:"),Wa=p(),$(je.$$.fragment),Ka=p(),Y=n("p"),ks=s("Load the dataset with "),fa=n("code"),Is=s("ImageFolder"),xs=s(", and it will create a "),ma=n("code"),Ps=s("text"),Cs=s(" column for the image captions:"),Qa=p(),$(we.$$.fragment),Va=p(),G=n("h3"),ne=n("a"),ha=n("span"),$(Ee.$$.fragment),Os=p(),ga=n("span"),As=s("Object detection"),Xa=p(),ie=n("p"),Ds=s("Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ua=n("code"),Fs=s("metadata.jsonl"),Ls=s(" may look like:"),Za=p(),$(qe.$$.fragment),et=p(),M=n("p"),Ss=s("Load the dataset with "),_a=n("code"),Ts=s("ImageFolder"),Ns=s(", and it will create a "),$a=n("code"),Bs=s("objects"),Ys=s(" column with the bounding boxes and the categories:"),at=p(),$(ye.$$.fragment),this.h()},l(e){const o=Ll('[data-svelte="svelte-1phssyn"]',document.head);f=i(o,"META",{name:!0,content:!0}),o.forEach(t),x=c(e),g=i(e,"H1",{class:!0});var ke=r(g);q=i(ke,"A",{id:!0,class:!0,href:!0});var va=r(q);y=i(va,"SPAN",{});var ba=r(y);v(u.$$.fragment,ba),ba.forEach(t),va.forEach(t),P=c(ke),k=i(ke,"SPAN",{});var Hs=r(k);_=l(Hs,"Load image data"),Hs.forEach(t),ke.forEach(t),h=c(e),I=i(e,"P",{});var st=r(I);O=l(st,"Image datasets are loaded from the "),Me=i(st,"CODE",{});var Rs=r(Me);gt=l(Rs,"image"),Rs.forEach(t),ut=l(st," column, which contains a PIL object."),st.forEach(t),ja=c(e),v(W.$$.fragment,e),wa=c(e),F=i(e,"P",{});var Ae=r(F);_t=l(Ae,"When you load an image dataset and call the "),He=i(Ae,"CODE",{});var zs=r(He);$t=l(zs,"image"),zs.forEach(t),vt=l(Ae," column, the "),Ie=i(Ae,"A",{href:!0});var Us=r(Ie);bt=l(Us,"Image"),Us.forEach(t),jt=l(Ae," feature automatically decodes the PIL object into an image:"),Ae.forEach(t),Ea=c(e),v(re.$$.fragment,e),qa=c(e),v(K.$$.fragment,e),ya=c(e),Q=i(e,"P",{});var lt=r(Q);wt=l(lt,"For a guide on how to load any type of dataset, take a look at the "),de=i(lt,"A",{class:!0,href:!0});var Gs=r(de);Et=l(Gs,"general loading guide"),Gs.forEach(t),qt=l(lt,"."),lt.forEach(t),ka=c(e),H=i(e,"H2",{class:!0});var ot=r(H);V=i(ot,"A",{id:!0,class:!0,href:!0});var Js=r(V);Re=i(Js,"SPAN",{});var Ws=r(Re);v(pe.$$.fragment,Ws),Ws.forEach(t),Js.forEach(t),yt=c(ot),ze=i(ot,"SPAN",{});var Ks=r(ze);kt=l(Ks,"Local files"),Ks.forEach(t),ot.forEach(t),Ia=c(e),L=i(e,"P",{});var De=r(L);It=l(De,"You can load a dataset from the image path. Use the "),xe=i(De,"A",{href:!0});var Qs=r(xe);xt=l(Qs,"cast_column()"),Qs.forEach(t),Pt=l(De," function to accept a column of image file paths, and decode it into a PIL image with the "),Pe=i(De,"A",{href:!0});var Vs=r(Pe);Ct=l(Vs,"Image"),Vs.forEach(t),Ot=l(De," feature:"),De.forEach(t),xa=c(e),v(ce.$$.fragment,e),Pa=c(e),S=i(e,"P",{});var Fe=r(S);At=l(Fe,"If you only want to load the underlying path to the image dataset without decoding the image object, set "),Ue=i(Fe,"CODE",{});var Xs=r(Ue);Dt=l(Xs,"decode=False"),Xs.forEach(t),Ft=l(Fe," in the "),Ce=i(Fe,"A",{href:!0});var Zs=r(Ce);Lt=l(Zs,"Image"),Zs.forEach(t),St=l(Fe," feature:"),Fe.forEach(t),Ca=c(e),v(fe.$$.fragment,e),Oa=c(e),R=i(e,"H2",{class:!0});var nt=r(R);X=i(nt,"A",{id:!0,class:!0,href:!0});var el=r(X);Ge=i(el,"SPAN",{});var al=r(Ge);v(me.$$.fragment,al),al.forEach(t),el.forEach(t),Tt=c(nt),Je=i(nt,"SPAN",{});var tl=r(Je);Nt=l(tl,"ImageFolder"),tl.forEach(t),nt.forEach(t),Aa=c(e),Z=i(e,"P",{});var it=r(Z);Bt=l(it,"You can also load a dataset with an "),We=i(it,"CODE",{});var sl=r(We);Yt=l(sl,"ImageFolder"),sl.forEach(t),Mt=l(it," dataset builder. It does not require writing a custom dataloader, making it useful for quickly loading a dataset for certain vision tasks. Your image dataset structure should look like this:"),it.forEach(t),Da=c(e),v(he.$$.fragment,e),Fa=c(e),T=i(e,"P",{});var Le=r(T);Ht=l(Le,"Load your dataset by specifying "),Ke=i(Le,"CODE",{});var ll=r(Ke);Rt=l(ll,"imagefolder"),ll.forEach(t),zt=l(Le," and the directory of your dataset in "),Qe=i(Le,"CODE",{});var ol=r(Qe);Ut=l(ol,"data_dir"),ol.forEach(t),Gt=l(Le,":"),Le.forEach(t),La=c(e),v(ge.$$.fragment,e),Sa=c(e),ee=i(e,"P",{});var rt=r(ee);Jt=l(rt,"Load remote datasets from their URLs with the "),Ve=i(rt,"CODE",{});var nl=r(Ve);Wt=l(nl,"data_files"),nl.forEach(t),Kt=l(rt," parameter:"),rt.forEach(t),Ta=c(e),v(ue.$$.fragment,e),Na=c(e),C=i(e,"P",{});var D=r(C);Xe=i(D,"CODE",{});var il=r(Xe);Qt=l(il,"ImageFolder"),il.forEach(t),Vt=l(D," creates a "),Ze=i(D,"CODE",{});var rl=r(Ze);Xt=l(rl,"label"),rl.forEach(t),Zt=l(D," column, and the label name is based on the directory name. To ignore the "),ea=i(D,"CODE",{});var dl=r(ea);es=l(dl,"label"),dl.forEach(t),as=l(D," column, set "),aa=i(D,"CODE",{});var pl=r(aa);ts=l(pl,"drop_labels=False"),pl.forEach(t),ss=l(D," as defined in "),Oe=i(D,"A",{href:!0});var cl=r(Oe);ls=l(cl,"ImageFolderConfig"),cl.forEach(t),os=l(D,"."),D.forEach(t),Ba=c(e),z=i(e,"H2",{class:!0});var dt=r(z);ae=i(dt,"A",{id:!0,class:!0,href:!0});var fl=r(ae);ta=i(fl,"SPAN",{});var ml=r(ta);v(_e.$$.fragment,ml),ml.forEach(t),fl.forEach(t),ns=c(dt),sa=i(dt,"SPAN",{});var hl=r(sa);is=l(hl,"ImageFolder with metadata"),hl.forEach(t),dt.forEach(t),Ya=c(e),N=i(e,"P",{});var Se=r(N);rs=l(Se,"Metadata associated with your dataset can also be loaded, extending the utility of "),la=i(Se,"CODE",{});var gl=r(la);ds=l(gl,"ImageFolder"),gl.forEach(t),ps=l(Se," to additional vision tasks like image captioning and object detection. Make sure your dataset has a "),oa=i(Se,"CODE",{});var ul=r(oa);cs=l(ul,"metadata.csv"),ul.forEach(t),fs=l(Se," file:"),Se.forEach(t),Ma=c(e),v($e.$$.fragment,e),Ha=c(e),B=i(e,"P",{});var Te=r(B);ms=l(Te,"Your "),na=i(Te,"CODE",{});var _l=r(na);hs=l(_l,"metadata.csv"),_l.forEach(t),gs=l(Te," file must have a "),ia=i(Te,"CODE",{});var $l=r(ia);us=l($l,"file_name"),$l.forEach(t),_s=l(Te," column which links image files with their metadata:"),Te.forEach(t),Ra=c(e),v(ve.$$.fragment,e),za=c(e),te=i(e,"P",{});var pt=r(te);$s=l(pt,"For complex value types, e.g. a list of floats, it may be more convenient to specify metadata as JSON Lines to avoid parsing errors or reading them as strings. In that case, use "),ra=i(pt,"CODE",{});var vl=r(ra);vs=l(vl,"metadata.jsonl"),vl.forEach(t),bs=l(pt," as the name of the metadata file."),pt.forEach(t),Ua=c(e),v(se.$$.fragment,e),Ga=c(e),U=i(e,"H3",{class:!0});var ct=r(U);le=i(ct,"A",{id:!0,class:!0,href:!0});var bl=r(le);da=i(bl,"SPAN",{});var jl=r(da);v(be.$$.fragment,jl),jl.forEach(t),bl.forEach(t),js=c(ct),pa=i(ct,"SPAN",{});var wl=r(pa);ws=l(wl,"Image captioning"),wl.forEach(t),ct.forEach(t),Ja=c(e),oe=i(e,"P",{});var ft=r(oe);Es=l(ft,"Image captioning datasets have text describing an image. An example "),ca=i(ft,"CODE",{});var El=r(ca);qs=l(El,"metadata.csv"),El.forEach(t),ys=l(ft," may look like:"),ft.forEach(t),Wa=c(e),v(je.$$.fragment,e),Ka=c(e),Y=i(e,"P",{});var Ne=r(Y);ks=l(Ne,"Load the dataset with "),fa=i(Ne,"CODE",{});var ql=r(fa);Is=l(ql,"ImageFolder"),ql.forEach(t),xs=l(Ne,", and it will create a "),ma=i(Ne,"CODE",{});var yl=r(ma);Ps=l(yl,"text"),yl.forEach(t),Cs=l(Ne," column for the image captions:"),Ne.forEach(t),Qa=c(e),v(we.$$.fragment,e),Va=c(e),G=i(e,"H3",{class:!0});var mt=r(G);ne=i(mt,"A",{id:!0,class:!0,href:!0});var kl=r(ne);ha=i(kl,"SPAN",{});var Il=r(ha);v(Ee.$$.fragment,Il),Il.forEach(t),kl.forEach(t),Os=c(mt),ga=i(mt,"SPAN",{});var xl=r(ga);As=l(xl,"Object detection"),xl.forEach(t),mt.forEach(t),Xa=c(e),ie=i(e,"P",{});var ht=r(ie);Ds=l(ht,"Object detection datasets have bounding boxes and categories identifying objects in an image. An example "),ua=i(ht,"CODE",{});var Pl=r(ua);Fs=l(Pl,"metadata.jsonl"),Pl.forEach(t),Ls=l(ht," may look like:"),ht.forEach(t),Za=c(e),v(qe.$$.fragment,e),et=c(e),M=i(e,"P",{});var Be=r(M);Ss=l(Be,"Load the dataset with "),_a=i(Be,"CODE",{});var Cl=r(_a);Ts=l(Cl,"ImageFolder"),Cl.forEach(t),Ns=l(Be,", and it will create a "),$a=i(Be,"CODE",{});var Ol=r($a);Bs=l(Ol,"objects"),Ol.forEach(t),Ys=l(Be," column with the bounding boxes and the categories:"),Be.forEach(t),at=c(e),v(ye.$$.fragment,e),this.h()},h(){m(f,"name","hf:doc:metadata"),m(f,"content",JSON.stringify(Ml)),m(q,"id","load-image-data"),m(q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(q,"href","#load-image-data"),m(g,"class","relative group"),m(Ie,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),m(de,"class","underline decoration-sky-400 decoration-2 font-semibold"),m(de,"href","./loading"),m(V,"id","local-files"),m(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(V,"href","#local-files"),m(H,"class","relative group"),m(xe,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.cast_column"),m(Pe,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),m(Ce,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Image"),m(X,"id","imagefolder"),m(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(X,"href","#imagefolder"),m(R,"class","relative group"),m(Oe,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.packaged_modules.imagefolder.ImageFolderConfig"),m(ae,"id","imagefolder-with-metadata"),m(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ae,"href","#imagefolder-with-metadata"),m(z,"class","relative group"),m(le,"id","image-captioning"),m(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(le,"href","#image-captioning"),m(U,"class","relative group"),m(ne,"id","object-detection"),m(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ne,"href","#object-detection"),m(G,"class","relative group")},m(e,o){a(document.head,f),d(e,x,o),d(e,g,o),a(g,q),a(q,y),b(u,y,null),a(g,P),a(g,k),a(k,_),d(e,h,o),d(e,I,o),a(I,O),a(I,Me),a(Me,gt),a(I,ut),d(e,ja,o),b(W,e,o),d(e,wa,o),d(e,F,o),a(F,_t),a(F,He),a(He,$t),a(F,vt),a(F,Ie),a(Ie,bt),a(F,jt),d(e,Ea,o),b(re,e,o),d(e,qa,o),b(K,e,o),d(e,ya,o),d(e,Q,o),a(Q,wt),a(Q,de),a(de,Et),a(Q,qt),d(e,ka,o),d(e,H,o),a(H,V),a(V,Re),b(pe,Re,null),a(H,yt),a(H,ze),a(ze,kt),d(e,Ia,o),d(e,L,o),a(L,It),a(L,xe),a(xe,xt),a(L,Pt),a(L,Pe),a(Pe,Ct),a(L,Ot),d(e,xa,o),b(ce,e,o),d(e,Pa,o),d(e,S,o),a(S,At),a(S,Ue),a(Ue,Dt),a(S,Ft),a(S,Ce),a(Ce,Lt),a(S,St),d(e,Ca,o),b(fe,e,o),d(e,Oa,o),d(e,R,o),a(R,X),a(X,Ge),b(me,Ge,null),a(R,Tt),a(R,Je),a(Je,Nt),d(e,Aa,o),d(e,Z,o),a(Z,Bt),a(Z,We),a(We,Yt),a(Z,Mt),d(e,Da,o),b(he,e,o),d(e,Fa,o),d(e,T,o),a(T,Ht),a(T,Ke),a(Ke,Rt),a(T,zt),a(T,Qe),a(Qe,Ut),a(T,Gt),d(e,La,o),b(ge,e,o),d(e,Sa,o),d(e,ee,o),a(ee,Jt),a(ee,Ve),a(Ve,Wt),a(ee,Kt),d(e,Ta,o),b(ue,e,o),d(e,Na,o),d(e,C,o),a(C,Xe),a(Xe,Qt),a(C,Vt),a(C,Ze),a(Ze,Xt),a(C,Zt),a(C,ea),a(ea,es),a(C,as),a(C,aa),a(aa,ts),a(C,ss),a(C,Oe),a(Oe,ls),a(C,os),d(e,Ba,o),d(e,z,o),a(z,ae),a(ae,ta),b(_e,ta,null),a(z,ns),a(z,sa),a(sa,is),d(e,Ya,o),d(e,N,o),a(N,rs),a(N,la),a(la,ds),a(N,ps),a(N,oa),a(oa,cs),a(N,fs),d(e,Ma,o),b($e,e,o),d(e,Ha,o),d(e,B,o),a(B,ms),a(B,na),a(na,hs),a(B,gs),a(B,ia),a(ia,us),a(B,_s),d(e,Ra,o),b(ve,e,o),d(e,za,o),d(e,te,o),a(te,$s),a(te,ra),a(ra,vs),a(te,bs),d(e,Ua,o),b(se,e,o),d(e,Ga,o),d(e,U,o),a(U,le),a(le,da),b(be,da,null),a(U,js),a(U,pa),a(pa,ws),d(e,Ja,o),d(e,oe,o),a(oe,Es),a(oe,ca),a(ca,qs),a(oe,ys),d(e,Wa,o),b(je,e,o),d(e,Ka,o),d(e,Y,o),a(Y,ks),a(Y,fa),a(fa,Is),a(Y,xs),a(Y,ma),a(ma,Ps),a(Y,Cs),d(e,Qa,o),b(we,e,o),d(e,Va,o),d(e,G,o),a(G,ne),a(ne,ha),b(Ee,ha,null),a(G,Os),a(G,ga),a(ga,As),d(e,Xa,o),d(e,ie,o),a(ie,Ds),a(ie,ua),a(ua,Fs),a(ie,Ls),d(e,Za,o),b(qe,e,o),d(e,et,o),d(e,M,o),a(M,Ss),a(M,_a),a(_a,Ts),a(M,Ns),a(M,$a),a($a,Bs),a(M,Ys),d(e,at,o),b(ye,e,o),tt=!0},p(e,[o]){const ke={};o&2&&(ke.$$scope={dirty:o,ctx:e}),W.$set(ke);const va={};o&2&&(va.$$scope={dirty:o,ctx:e}),K.$set(va);const ba={};o&2&&(ba.$$scope={dirty:o,ctx:e}),se.$set(ba)},i(e){tt||(j(u.$$.fragment,e),j(W.$$.fragment,e),j(re.$$.fragment,e),j(K.$$.fragment,e),j(pe.$$.fragment,e),j(ce.$$.fragment,e),j(fe.$$.fragment,e),j(me.$$.fragment,e),j(he.$$.fragment,e),j(ge.$$.fragment,e),j(ue.$$.fragment,e),j(_e.$$.fragment,e),j($e.$$.fragment,e),j(ve.$$.fragment,e),j(se.$$.fragment,e),j(be.$$.fragment,e),j(je.$$.fragment,e),j(we.$$.fragment,e),j(Ee.$$.fragment,e),j(qe.$$.fragment,e),j(ye.$$.fragment,e),tt=!0)},o(e){w(u.$$.fragment,e),w(W.$$.fragment,e),w(re.$$.fragment,e),w(K.$$.fragment,e),w(pe.$$.fragment,e),w(ce.$$.fragment,e),w(fe.$$.fragment,e),w(me.$$.fragment,e),w(he.$$.fragment,e),w(ge.$$.fragment,e),w(ue.$$.fragment,e),w(_e.$$.fragment,e),w($e.$$.fragment,e),w(ve.$$.fragment,e),w(se.$$.fragment,e),w(be.$$.fragment,e),w(je.$$.fragment,e),w(we.$$.fragment,e),w(Ee.$$.fragment,e),w(qe.$$.fragment,e),w(ye.$$.fragment,e),tt=!1},d(e){t(f),e&&t(x),e&&t(g),E(u),e&&t(h),e&&t(I),e&&t(ja),E(W,e),e&&t(wa),e&&t(F),e&&t(Ea),E(re,e),e&&t(qa),E(K,e),e&&t(ya),e&&t(Q),e&&t(ka),e&&t(H),E(pe),e&&t(Ia),e&&t(L),e&&t(xa),E(ce,e),e&&t(Pa),e&&t(S),e&&t(Ca),E(fe,e),e&&t(Oa),e&&t(R),E(me),e&&t(Aa),e&&t(Z),e&&t(Da),E(he,e),e&&t(Fa),e&&t(T),e&&t(La),E(ge,e),e&&t(Sa),e&&t(ee),e&&t(Ta),E(ue,e),e&&t(Na),e&&t(C),e&&t(Ba),e&&t(z),E(_e),e&&t(Ya),e&&t(N),e&&t(Ma),E($e,e),e&&t(Ha),e&&t(B),e&&t(Ra),E(ve,e),e&&t(za),e&&t(te),e&&t(Ua),E(se,e),e&&t(Ga),e&&t(U),E(be),e&&t(Ja),e&&t(oe),e&&t(Wa),E(je,e),e&&t(Ka),e&&t(Y),e&&t(Qa),E(we,e),e&&t(Va),e&&t(G),E(Ee),e&&t(Xa),e&&t(ie),e&&t(Za),E(qe,e),e&&t(et),e&&t(M),e&&t(at),E(ye,e)}}}const Ml={local:"load-image-data",sections:[{local:"local-files",title:"Local files"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"}],title:"Load image data"};function Hl(J){return Sl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Jl extends Al{constructor(f){super();Dl(this,f,Hl,Yl,Fl,{})}}export{Jl as default,Ml as metadata};
