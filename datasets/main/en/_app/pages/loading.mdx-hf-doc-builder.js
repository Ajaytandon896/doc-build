import{S as f_,i as c_,s as h_,e as l,k as d,w as u,t as r,M as u_,c as o,d as a,m as f,a as n,x as m,h as i,b as c,G as s,g as p,y as _,q as g,o as v,B as $,v as m_}from"../chunks/vendor-hf-doc-builder.js";import{T as Da}from"../chunks/Tip-hf-doc-builder.js";import{I as A}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";import{C as zo}from"../chunks/CodeBlockFw-hf-doc-builder.js";import"../chunks/IconTensorflow-hf-doc-builder.js";function __(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Refer to the "),y=l("a"),b=r("Upload a dataset to the Hub"),q=r(" tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Refer to the "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Upload a dataset to the Hub"),P.forEach(a),q=i(j," tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),j.forEach(a),this.h()},h(){c(y,"href","./upload_dataset")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function g_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("If you don\u2019t specify which data files to use, "),y=l("a"),b=r("load_dataset()"),q=r(" will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"If you don\u2019t specify which data files to use, "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"load_dataset()"),P.forEach(a),q=i(j," will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),j.forEach(a),this.h()},h(){c(y,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function v_(D){let h,k,y,b,q,w,j,P;return{c(){h=l("p"),k=r("You can specify "),y=l("a"),b=r("con"),q=r(" as a "),w=l("a"),j=r("URI string"),P=r(" for the \u{1F917} Datasets caching to work across sessions."),this.h()},l(C){h=o(C,"P",{});var T=n(h);k=i(T,"You can specify "),y=o(T,"A",{href:!0});var F=n(y);b=i(F,"con"),F.forEach(a),q=i(T," as a "),w=o(T,"A",{href:!0,rel:!0});var R=n(w);j=i(R,"URI string"),R.forEach(a),P=i(T," for the \u{1F917} Datasets caching to work across sessions."),T.forEach(a),this.h()},h(){c(y,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_sql.con"),c(w,"href","https://docs.sqlalchemy.org/en/13/core/engines.html#database-urls"),c(w,"rel","nofollow")},m(C,T){p(C,h,T),s(h,k),s(h,y),s(y,b),s(h,q),s(h,w),s(w,j),s(h,P)},d(C){C&&a(h)}}}function $_(D){let h,k,y,b,q,w,j,P,C,T,F,R,At,Q,G,St,S,Y,Ta,Na,B,Ia,Ca,M,Oa,La;return{c(){h=l("p"),k=r("An object data type in "),y=l("a"),b=r("pandas.Series"),q=r(" doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=l("code"),j=r("0"),P=r(" or the Series only contains "),C=l("code"),T=r("None/NaN"),F=r(" objects, the type is set to "),R=l("code"),At=r("null"),Q=r(". Avoid potential errors by constructing an explicit schema with "),G=l("a"),St=r("Features"),S=r(" using the "),Y=l("code"),Ta=r("from_dict"),Na=r(" or "),B=l("code"),Ia=r("from_pandas"),Ca=r(" methods. See the "),M=l("a"),Oa=r("troubleshoot"),La=r(" section for more details on how to explicitly specify your own features."),this.h()},l(W){h=o(W,"P",{});var x=n(h);k=i(x,"An object data type in "),y=o(x,"A",{href:!0,rel:!0});var se=n(y);b=i(se,"pandas.Series"),se.forEach(a),q=i(x," doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=o(x,"CODE",{});var Dt=n(w);j=i(Dt,"0"),Dt.forEach(a),P=i(x," or the Series only contains "),C=o(x,"CODE",{});var ee=n(C);T=i(ee,"None/NaN"),ee.forEach(a),F=i(x," objects, the type is set to "),R=o(x,"CODE",{});var le=n(R);At=i(le,"null"),le.forEach(a),Q=i(x,". Avoid potential errors by constructing an explicit schema with "),G=o(x,"A",{href:!0});var Tt=n(G);St=i(Tt,"Features"),Tt.forEach(a),S=i(x," using the "),Y=o(x,"CODE",{});var oe=n(Y);Ta=i(oe,"from_dict"),oe.forEach(a),Na=i(x," or "),B=o(x,"CODE",{});var Ha=n(B);Ia=i(Ha,"from_pandas"),Ha.forEach(a),Ca=i(x," methods. See the "),M=o(x,"A",{href:!0});var O=n(M);Oa=i(O,"troubleshoot"),O.forEach(a),La=i(x," section for more details on how to explicitly specify your own features."),x.forEach(a),this.h()},h(){c(y,"href","https://pandas.pydata.org/docs/reference/api/pandas.Series.html"),c(y,"rel","nofollow"),c(G,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),c(M,"href","./loading#specify-features")},m(W,x){p(W,h,x),s(h,k),s(h,y),s(y,b),s(h,q),s(h,w),s(w,j),s(h,P),s(h,C),s(C,T),s(h,F),s(h,R),s(R,At),s(h,Q),s(h,G),s(G,St),s(h,S),s(h,Y),s(Y,Ta),s(h,Na),s(h,B),s(B,Ia),s(h,Ca),s(h,M),s(M,Oa),s(h,La)},d(W){W&&a(h)}}}function y_(D){let h,k,y,b;return{c(){h=l("p"),k=l("code"),y=r("pct1_dropremainder"),b=r(" rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100.")},l(q){h=o(q,"P",{});var w=n(h);k=o(w,"CODE",{});var j=n(k);y=i(j,"pct1_dropremainder"),j.forEach(a),b=i(w," rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100."),w.forEach(a)},m(q,w){p(q,h,w),s(h,k),s(k,y),s(h,b)},d(q){q&&a(h)}}}function w_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=l("a"),b=r("Evaluate"),q=r("! In addition to metrics, you can find more tools for evaluating models and datasets."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=o(j,"A",{href:!0,rel:!0});var P=n(y);b=i(P,"Evaluate"),P.forEach(a),q=i(j,"! In addition to metrics, you can find more tools for evaluating models and datasets."),j.forEach(a),this.h()},h(){c(y,"href","https://huggingface.co/docs/evaluate/index"),c(y,"rel","nofollow")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function j_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("See the "),y=l("a"),b=r("Metrics"),q=r(" guide for more details on how to write your own metric loading script."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"See the "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Metrics"),P.forEach(a),q=i(j," guide for more details on how to write your own metric loading script."),j.forEach(a),this.h()},h(){c(y,"href","./how_to_metrics#custom-metric-loading-script")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function b_(D){let h,k,y,b,q;return{c(){h=l("p"),k=r("Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=l("a"),b=r("Metric.compute()"),q=r(" gathers all the predictions and references from the nodes, and computes the final metric."),this.h()},l(w){h=o(w,"P",{});var j=n(h);k=i(j,"Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=o(j,"A",{href:!0});var P=n(y);b=i(P,"Metric.compute()"),P.forEach(a),q=i(j," gathers all the predictions and references from the nodes, and computes the final metric."),j.forEach(a),this.h()},h(){c(y,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Metric.compute")},m(w,j){p(w,h,j),s(h,k),s(h,y),s(y,b),s(h,q)},d(w){w&&a(h)}}}function q_(D){let h,k,y,b,q,w,j,P,C,T,F,R,At,Q,G,St,S,Y,Ta,Na,B,Ia,Ca,M,Oa,La,W,x,se,Dt,ee,le,Tt,oe,Ha,O,sp,Fa,ep,lp,Ra,op,np,Ma,rp,ip,Uo,ne,Jo,nt,Nt,pl,Va,pp,dl,dp,Yo,K,fp,re,cp,hp,ie,up,mp,Bo,It,_p,za,gp,vp,Wo,Ua,Qo,Ct,$p,fl,yp,wp,Go,Ja,Ko,Ot,Xo,N,jp,cl,bp,qp,hl,kp,Ep,ul,Pp,xp,ml,Ap,Sp,_l,Dp,Tp,Zo,Ya,tn,Lt,an,X,Np,gl,Ip,Cp,vl,Op,Lp,sn,Ba,en,Ht,Hp,$l,Fp,Rp,ln,Wa,on,rt,Ft,yl,Qa,Mp,wl,Vp,nn,Rt,zp,pe,Up,Jp,rn,Mt,jl,Yp,Bp,bl,Wp,pn,Ga,dn,it,Vt,ql,Ka,Qp,kl,Gp,fn,de,Kp,cn,Xa,hn,zt,Xp,fe,Zp,td,un,Za,mn,pt,Ut,El,ts,ad,Pl,sd,_n,I,ed,xl,ld,od,Al,nd,rd,Sl,id,pd,Dl,dd,fd,ce,cd,hd,gn,dt,Jt,Tl,as,ud,Nl,md,vn,he,_d,$n,ss,yn,ue,gd,wn,es,jn,me,vd,bn,ls,qn,_e,$d,kn,os,En,ge,yd,Pn,ns,xn,ft,Yt,Il,rs,wd,Cl,jd,An,Bt,bd,ve,qd,kd,Sn,is,Dn,$e,Ed,Tn,ps,Nn,Wt,Pd,Ol,xd,Ad,In,ds,Cn,ye,Sd,On,fs,Ln,we,Dd,Hn,ct,Qt,Ll,cs,Td,Hl,Nd,Fn,je,Id,Rn,be,Cd,Mn,hs,Vn,qe,Od,zn,us,Un,ht,Gt,Fl,ms,Ld,Rl,Hd,Jn,Kt,Fd,ke,Rd,Md,Yn,Ee,Vd,Bn,_s,Wn,Pe,zd,Qn,gs,Gn,Xt,Kn,ut,Zt,Ml,vs,Ud,Vl,Jd,Xn,ta,Yd,xe,Bd,Wd,Zn,mt,aa,zl,$s,Qd,Ul,Gd,tr,sa,Kd,Ae,Xd,Zd,ar,ys,sr,_t,ea,Jl,ws,tf,Yl,af,er,la,sf,Bl,ef,lf,lr,js,or,gt,oa,Wl,bs,of,Ql,nf,nr,na,rf,Se,pf,df,rr,qs,ir,De,ff,pr,vt,ra,Gl,ks,cf,Kl,hf,dr,ia,uf,Te,mf,_f,fr,Es,cr,pa,hr,$t,da,Xl,Ps,gf,Zl,vf,ur,Ne,$f,mr,Z,yf,to,wf,jf,ao,bf,qf,_r,yt,fa,so,xs,kf,eo,Ef,gr,tt,Pf,Ie,xf,Af,Ce,Sf,Df,vr,at,Tf,lo,Nf,If,oo,Cf,Of,$r,As,yr,ca,Lf,no,Hf,Ff,wr,Ss,jr,Oe,Rf,br,Ds,qr,Le,Mf,kr,Ts,Er,He,Vf,Pr,Ns,xr,wt,ha,ro,Is,zf,io,Uf,Ar,Fe,Jf,Sr,Cs,Dr,ua,Yf,po,Bf,Wf,Tr,Os,Nr,ma,Ir,Re,Cr,jt,_a,fo,Ls,Qf,co,Gf,Or,Me,Kf,Lr,bt,ga,ho,Hs,Xf,uo,Zf,Hr,V,tc,Ve,ac,sc,mo,ec,lc,_o,oc,nc,Fr,va,rc,Fs,ic,pc,Rr,Rs,Mr,H,dc,go,fc,cc,vo,hc,uc,$o,mc,_c,ze,gc,vc,Vr,qt,$a,yo,Ms,$c,wo,yc,zr,z,wc,Ue,jc,bc,Vs,qc,kc,Je,Ec,Pc,Ur,ya,xc,Ye,Ac,Sc,Jr,zs,Yr,st,Dc,jo,Tc,Nc,Be,Ic,Cc,Br,Us,Wr,We,Oc,Qr,Js,Gr,kt,wa,bo,Ys,Lc,qo,Hc,Kr,ja,Xr,Qe,Fc,Zr,Bs,ti,ba,ai,Et,qa,ko,Ws,Rc,Eo,Mc,si,et,Vc,Po,zc,Uc,Ge,Jc,Yc,ei,Qs,li,Pt,ka,xo,Gs,Bc,Ao,Wc,oi,Ke,Qc,ni,Xe,Gc,ri,lt,So,Ks,Kc,Do,Xc,Zc,th,To,xt,ah,No,sh,eh,Io,lh,oh,nh,Co,Xs,rh,Ze,ih,ph,ii,Zs,pi,Ea,di,Pa,dh,Oo,fh,ch,fi,te,ci;return w=new A({}),Va=new A({}),Ua=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("lhoestq/demo1")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;lhoestq/demo1&quot;</span>)`}}),Ja=new E({props:{code:`dataset = load_dataset(
  "lhoestq/custom_squad",
  revision="main"  # tag name, or branch name, or commit hash
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;lhoestq/custom_squad&quot;</span>,
<span class="hljs-meta">... </span>  revision=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-comment"># tag name, or branch name, or commit hash</span>
<span class="hljs-meta">... </span>)`}}),Ot=new Da({props:{$$slots:{default:[__]},$$scope:{ctx:D}}}),Ya=new E({props:{code:`data_files = {"train": "train.csv", "test": "test.csv"}
dataset = load_dataset("namespace/your_dataset_name", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;train.csv&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;test.csv&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;namespace/your_dataset_name&quot;</span>, data_files=data_files)`}}),Lt=new Da({props:{warning:!0,$$slots:{default:[g_]},$$scope:{ctx:D}}}),Ba=new E({props:{code:`from datasets import load_dataset

c4_subset = load_dataset("allenai/c4", data_files="en/c4-train.0000*-of-01024.json.gz")

c4_subset = load_dataset("allenai/c4", data_dir="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load files that match the grep pattern</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=<span class="hljs-string">&quot;en/c4-train.0000*-of-01024.json.gz&quot;</span>)

<span class="hljs-comment"># load dataset from the en directory on the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_dir=<span class="hljs-string">&quot;en&quot;</span>)`}}),Wa=new E({props:{code:`data_files = {"validation": "en/c4-validation.*.json.gz"}
c4_validation = load_dataset("allenai/c4", data_files=data_files, split="validation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;en/c4-validation.*.json.gz&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_validation = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;validation&quot;</span>)`}}),Qa=new A({}),Ga=new E({props:{code:`dataset = load_dataset("path/to/local/loading_script/loading_script.py", split="train")
dataset = load_dataset("path/to/local/loading_script", split="train")  # equivalent because the file has the same name as the directory`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script/loading_script.py&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)  <span class="hljs-comment"># equivalent because the file has the same name as the directory</span>`}}),Ka=new A({}),Xa=new E({props:{code:"git clone https://huggingface.co/datasets/eli5",highlighted:'git <span class="hljs-built_in">clone</span> https://huggingface.co/datasets/eli5'}}),Za=new E({props:{code:`from datasets import load_dataset
eli5 = load_dataset("path/to/local/eli5")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>eli5 = load_dataset(<span class="hljs-string">&quot;path/to/local/eli5&quot;</span>)`}}),ts=new A({}),as=new A({}),ss=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("csv", data_files="my_file.csv")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.csv&quot;</span>)`}}),es=new E({props:{code:'dataset = load_dataset("csv", data_files=["my_file_1.csv", "my_file_2.csv", "my_file_3.csv"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=[<span class="hljs-string">&quot;my_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_file_2.csv&quot;</span>, <span class="hljs-string">&quot;my_file_3.csv&quot;</span>])'}}),ls=new E({props:{code:'dataset = load_dataset("csv", data_files={"train": ["my_train_file_1.csv", "my_train_file_2.csv"], "test": "my_test_file.csv"})',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: [<span class="hljs-string">&quot;my_train_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_train_file_2.csv&quot;</span>], <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.csv&quot;</span>})'}}),os=new E({props:{code:`base_url = "https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/"
dataset = load_dataset('csv', data_files={'train': base_url + 'train.csv', 'test': base_url + 'test.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: base_url + <span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: base_url + <span class="hljs-string">&#x27;test.csv&#x27;</span>})`}}),ns=new E({props:{code:`url = "https://domain.org/train_data.zip"
data_files = {"train": url}
dataset = load_dataset("csv", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;https://domain.org/train_data.zip&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: url}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=data_files)`}}),rs=new A({}),is=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>)`}}),ps=new E({props:{code:`{"a": 1, "b": 2.0, "c": "foo", "d": false}
{"a": 4, "b": -5.5, "c": null, "d": true}`,highlighted:`<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-5.5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span>`}}),ds=new E({props:{code:`
from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json", field="data")`,highlighted:`{<span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,
 <span class="hljs-string">&quot;data&quot;</span>: [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2.0</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>: false},
          {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;b&quot;</span>: -<span class="hljs-number">5.5</span>, <span class="hljs-string">&quot;c&quot;</span>: null, <span class="hljs-string">&quot;d&quot;</span>: true}]
}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),fs=new E({props:{code:`base_url = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
dataset = load_dataset("json", data_files={"train": base_url + "train-v1.1.json", "validation": base_url + "dev-v1.1.json"}, field="data")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>, <span class="hljs-string">&quot;validation&quot;</span>: base_url + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>}, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),cs=new A({}),hs=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("parquet", data_files={'train': 'train.parquet', 'test': 'test.parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.parquet&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.parquet&#x27;</span>})`}}),us=new E({props:{code:`base_url = "https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/"
data_files = {"train": base_url + "wikipedia-train.parquet"}
wiki = load_dataset("parquet", data_files=data_files, split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;wikipedia-train.parquet&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),ms=new A({}),_s=new E({props:{code:`from datasets import Dataset
dataset = Dataset.from_sql("data_table", "sqlite:///sqlite_file.db")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_sql(<span class="hljs-string">&quot;data_table&quot;</span>, <span class="hljs-string">&quot;sqlite:///sqlite_file.db&quot;</span>)`}}),gs=new E({props:{code:`from sqlite3 import connect
con = connect(":memory")
# db writes ...
from datasets import Dataset
dataset = Dataset.from_sql("SELECT text FROM table WHERE length(text) > 100 LIMIT 10", con)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> sqlite3 <span class="hljs-keyword">import</span> connect
<span class="hljs-meta">&gt;&gt;&gt; </span>con = connect(<span class="hljs-string">&quot;:memory&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># db writes ...</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_sql(<span class="hljs-string">&quot;SELECT text FROM table WHERE length(text) &gt; 100 LIMIT 10&quot;</span>, con)`}}),Xt=new Da({props:{$$slots:{default:[v_]},$$scope:{ctx:D}}}),vs=new A({}),$s=new A({}),ys=new E({props:{code:`from datasets import Dataset
my_dict = {"a": [1, 2, 3]}
dataset = Dataset.from_dict(my_dict)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_dict = {<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict(my_dict)`}}),ws=new A({}),js=new E({props:{code:`from datasets import Dataset
my_list = [{"a": 1}, {"a": 2}, {"a": 3}]
dataset = Dataset.from_list(my_list)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_list = [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>}, {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">2</span>}, {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">3</span>}]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_list(my_list)`}}),bs=new A({}),qs=new E({props:{code:`from datasets import Dataset
def my_gen():
    for i in range(1, 4):
        yield {"a": i}
dataset = Dataset.from_generator(my_gen)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_gen</span>():
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):
<span class="hljs-meta">... </span>        <span class="hljs-keyword">yield</span> {<span class="hljs-string">&quot;a&quot;</span>: i}
...
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_generator(my_gen)`}}),ks=new A({}),Es=new E({props:{code:`from datasets import Dataset
import pandas as pd
df = pd.DataFrame({"a": [1, 2, 3]})
dataset = Dataset.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_pandas(df)`}}),pa=new Da({props:{warning:!0,$$slots:{default:[$_]},$$scope:{ctx:D}}}),Ps=new A({}),xs=new A({}),As=new zo({props:{group1:{id:"stringapi",code:'train_test_ds = datasets.load_dataset("bookcorpus", split="train+test")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train+test&quot;</span>)'},group2:{id:"readinstruction",code:`ri = datasets.ReadInstruction("train") + datasets.ReadInstruction("test")
train_test_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;test&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),Ss=new zo({props:{group1:{id:"stringapi",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split="train[10:20]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[10:20]&quot;</span>)'},group2:{id:"readinstruction",code:`train_10_20_ds = datasets.load_dataset("bookcorpu"', split=datasets.ReadInstruction("train", from_=10, to=20, unit="abs"))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpu&quot;</span><span class="hljs-string">&#x27;, split=datasets.ReadInstruction(&quot;train&quot;, from_=10, to=20, unit=&quot;abs&quot;))</span>'}}}),Ds=new zo({props:{group1:{id:"stringapi",code:'train_10pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]&quot;</span>)'},group2:{id:"readinstruction",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", to=10, unit="%"))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))'}}}),Ts=new zo({props:{group1:{id:"stringapi",code:'train_10_80pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]+train[-80%:]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]+train[-80%:]&quot;</span>)'},group2:{id:"readinstruction",code:`ri = (datasets.ReadInstruction("train", to=10, unit="%") + datasets.ReadInstruction("train", from_=-80, unit="%"))
train_10_80pct_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = (datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=-<span class="hljs-number">80</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),Ns=new zo({props:{group1:{id:"stringapi",code:`val_ds = datasets.load_dataset("bookcorpus", split=[f"train[{k}%:{k+10}%]" for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", split=[f"train[:{k}%]+train[{k+10}%:]" for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[<span class="hljs-subst">{k}</span>%:<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[:<span class="hljs-subst">{k}</span>%]+train[<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%:]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`},group2:{id:"readinstruction",code:`val_ds = datasets.load_dataset("bookcorpus", [datasets.ReadInstruction("train", from_=k, to=k+10, unit="%") for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", [(datasets.ReadInstruction("train", to=k, unit="%") + datasets.ReadInstruction("train", from_=k+10, unit="%")) for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [(datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=k, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>)) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}}),Is=new A({}),Cs=new E({props:{code:`train_50_52_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%]")
train_52_54_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%]")`,highlighted:`<span class="hljs-comment"># 19 records, from 500 (included) to 519 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%]&quot;</span>)
<span class="hljs-comment"># 20 records, from 519 (included) to 539 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%]&quot;</span>)`}}),Os=new E({props:{code:`train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", from_=50, to=52, unit="%", rounding="pct1_dropremainder"))
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train",from_=52, to=54, unit="%", rounding="pct1_dropremainder"))
train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%](pct1_dropremainder)")
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%](pct1_dropremainder)")`,highlighted:`<span class="hljs-comment"># 18 records, from 450 (included) to 468 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=<span class="hljs-number">50</span>, to=<span class="hljs-number">52</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># 18 records, from 468 (included) to 486 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>,from_=<span class="hljs-number">52</span>, to=<span class="hljs-number">54</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># Or equivalently:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%](pct1_dropremainder)&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%](pct1_dropremainder)&quot;</span>)`}}),ma=new Da({props:{warning:!0,$$slots:{default:[y_]},$$scope:{ctx:D}}}),Ls=new A({}),Hs=new A({}),Rs=new E({props:{code:'dataset = load_dataset("matinf", "summarization")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;matinf&quot;</span>, <span class="hljs-string">&quot;summarization&quot;</span>)
Downloading <span class="hljs-keyword">and</span> preparing dataset matinf/summarization (download: Unknown size, generated: <span class="hljs-number">246.89</span> MiB, post-processed: Unknown size, total: <span class="hljs-number">246.89</span> MiB) to /root/.cache/huggingface/datasets/matinf/summarization/<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>/82eee5e71c3ceaf20d909bca36ff237452b4e4ab195d3be7ee1c78b53e6f540e...
AssertionError: The dataset matinf <span class="hljs-keyword">with</span> config summarization requires manual data. 
Please follow the manual download instructions: To use MATINF you have to download it manually. Please fill this google form (https://forms.gle/nkH4LVE4iNQeDzsc9). You will receive a download link <span class="hljs-keyword">and</span> a password once you complete the form. Please extract <span class="hljs-built_in">all</span> files <span class="hljs-keyword">in</span> one folder <span class="hljs-keyword">and</span> load the dataset <span class="hljs-keyword">with</span>: *datasets.load_dataset(<span class="hljs-string">&#x27;matinf&#x27;</span>, data_dir=<span class="hljs-string">&#x27;path/to/folder/folder_name&#x27;</span>)*. 
Manual data can be loaded <span class="hljs-keyword">with</span> \`datasets.load_dataset(matinf, data_dir=<span class="hljs-string">&#x27;&lt;path/to/manual/data&gt;&#x27;</span>) `}}),Ms=new A({}),zs=new E({props:{code:`class_names = ["sadness", "joy", "love", "anger", "fear", "surprise"]
emotion_features = Features({'text': Value('string'), 'label': ClassLabel(names=class_names)})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>class_names = [<span class="hljs-string">&quot;sadness&quot;</span>, <span class="hljs-string">&quot;joy&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;anger&quot;</span>, <span class="hljs-string">&quot;fear&quot;</span>, <span class="hljs-string">&quot;surprise&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>emotion_features = Features({<span class="hljs-string">&#x27;text&#x27;</span>: Value(<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=class_names)})`}}),Us=new E({props:{code:"dataset = load_dataset('csv', data_files=file_dict, delimiter=';', column_names=['text', 'label'], features=emotion_features)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=file_dict, delimiter=<span class="hljs-string">&#x27;;&#x27;</span>, column_names=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>], features=emotion_features)'}}),Js=new E({props:{code:"dataset['train'].features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;train&#x27;</span>].features
{<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">6</span>, names=[<span class="hljs-string">&#x27;sadness&#x27;</span>, <span class="hljs-string">&#x27;joy&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;anger&#x27;</span>, <span class="hljs-string">&#x27;fear&#x27;</span>, <span class="hljs-string">&#x27;surprise&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ys=new A({}),ja=new Da({props:{warning:!0,$$slots:{default:[w_]},$$scope:{ctx:D}}}),Bs=new E({props:{code:`from datasets import load_metric
metric = load_metric('PATH/TO/MY/METRIC/SCRIPT')

# Example of typical usage
for batch in dataset:
    inputs, references = batch
    predictions = model(inputs)
    metric.add_batch(predictions=predictions, references=references)
score = metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;PATH/TO/MY/METRIC/SCRIPT&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Example of typical usage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> dataset:
<span class="hljs-meta">... </span>    inputs, references = batch
<span class="hljs-meta">... </span>    predictions = model(inputs)
<span class="hljs-meta">... </span>    metric.add_batch(predictions=predictions, references=references)
<span class="hljs-meta">&gt;&gt;&gt; </span>score = metric.compute()`}}),ba=new Da({props:{$$slots:{default:[j_]},$$scope:{ctx:D}}}),Ws=new A({}),Qs=new E({props:{code:`from datasets import load_metric
metric = load_metric('bleurt', name='bleurt-base-128')
metric = load_metric('bleurt', name='bleurt-base-512')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-128&#x27;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-512&#x27;</span>)</span>`}}),Gs=new A({}),Zs=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=rank)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=rank)`}}),Ea=new Da({props:{$$slots:{default:[b_]},$$scope:{ctx:D}}}),te=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=process_id, experiment_id="My_experiment_10")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=process_id, experiment_id=<span class="hljs-string">&quot;My_experiment_10&quot;</span>)`}}),{c(){h=l("meta"),k=d(),y=l("h1"),b=l("a"),q=l("span"),u(w.$$.fragment),j=d(),P=l("span"),C=r("Load"),T=d(),F=l("p"),R=r("Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),At=d(),Q=l("p"),G=r("This guide will show you how to load a dataset from:"),St=d(),S=l("ul"),Y=l("li"),Ta=r("The Hub without a dataset loading script"),Na=d(),B=l("li"),Ia=r("Local loading script"),Ca=d(),M=l("li"),Oa=r("Local files"),La=d(),W=l("li"),x=r("In-memory data"),se=d(),Dt=l("li"),ee=r("Offline"),le=d(),Tt=l("li"),oe=r("A specific slice of a split"),Ha=d(),O=l("p"),sp=r("For more details specific to loading other dataset modalities, take a look at the "),Fa=l("a"),ep=r("load audio dataset guide"),lp=r(", the "),Ra=l("a"),op=r("load image dataset guide"),np=r(", or the "),Ma=l("a"),rp=r("load text dataset guide"),ip=r("."),Uo=d(),ne=l("a"),Jo=d(),nt=l("h2"),Nt=l("a"),pl=l("span"),u(Va.$$.fragment),pp=d(),dl=l("span"),dp=r("Hugging Face Hub"),Yo=d(),K=l("p"),fp=r("Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),re=l("a"),cp=r("creating a dataset repository"),hp=r(" and upload your data files. Now you can use the "),ie=l("a"),up=r("load_dataset()"),mp=r(" function to load the dataset."),Bo=d(),It=l("p"),_p=r("For example, try loading the files from this "),za=l("a"),gp=r("demo repository"),vp=r(" by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),Wo=d(),u(Ua.$$.fragment),Qo=d(),Ct=l("p"),$p=r("Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),fl=l("code"),yp=r("revision"),wp=r(" parameter to specify the dataset version you want to load:"),Go=d(),u(Ja.$$.fragment),Ko=d(),u(Ot.$$.fragment),Xo=d(),N=l("p"),jp=r("A dataset without a loading script by default loads all the data into the "),cl=l("code"),bp=r("train"),qp=r(" split. Use the "),hl=l("code"),kp=r("data_files"),Ep=r(" parameter to map data files to splits like "),ul=l("code"),Pp=r("train"),xp=r(", "),ml=l("code"),Ap=r("validation"),Sp=r(" and "),_l=l("code"),Dp=r("test"),Tp=r(":"),Zo=d(),u(Ya.$$.fragment),tn=d(),u(Lt.$$.fragment),an=d(),X=l("p"),Np=r("You can also load a specific subset of the files with the "),gl=l("code"),Ip=r("data_files"),Cp=r(" or "),vl=l("code"),Op=r("data_dir"),Lp=r(" parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),sn=d(),u(Ba.$$.fragment),en=d(),Ht=l("p"),Hp=r("The "),$l=l("code"),Fp=r("split"),Rp=r(" parameter can also map a data file to a specific split:"),ln=d(),u(Wa.$$.fragment),on=d(),rt=l("h2"),Ft=l("a"),yl=l("span"),u(Qa.$$.fragment),Mp=d(),wl=l("span"),Vp=r("Local loading script"),nn=d(),Rt=l("p"),zp=r("You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),pe=l("a"),Up=r("load_dataset()"),Jp=r(":"),rn=d(),Mt=l("ul"),jl=l("li"),Yp=r("The local path to the loading script file."),Bp=d(),bl=l("li"),Wp=r("The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),pn=d(),u(Ga.$$.fragment),dn=d(),it=l("h3"),Vt=l("a"),ql=l("span"),u(Ka.$$.fragment),Qp=d(),kl=l("span"),Gp=r("Edit loading script"),fn=d(),de=l("p"),Kp=r("You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),cn=d(),u(Xa.$$.fragment),hn=d(),zt=l("p"),Xp=r("Make your edits to the loading script and then load it by passing its local path to "),fe=l("a"),Zp=r("load_dataset()"),td=r(":"),un=d(),u(Za.$$.fragment),mn=d(),pt=l("h2"),Ut=l("a"),El=l("span"),u(ts.$$.fragment),ad=d(),Pl=l("span"),sd=r("Local and remote files"),_n=d(),I=l("p"),ed=r("Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),xl=l("code"),ld=r("csv"),od=r(", "),Al=l("code"),nd=r("json"),rd=r(", "),Sl=l("code"),id=r("txt"),pd=r(" or "),Dl=l("code"),dd=r("parquet"),fd=r(" file. The "),ce=l("a"),cd=r("load_dataset()"),hd=r(" function can load each of these file types."),gn=d(),dt=l("h3"),Jt=l("a"),Tl=l("span"),u(as.$$.fragment),ud=d(),Nl=l("span"),md=r("CSV"),vn=d(),he=l("p"),_d=r("\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),$n=d(),u(ss.$$.fragment),yn=d(),ue=l("p"),gd=r("If you have more than one CSV file:"),wn=d(),u(es.$$.fragment),jn=d(),me=l("p"),vd=r("You can also map the training and test splits to specific CSV files:"),bn=d(),u(ls.$$.fragment),qn=d(),_e=l("p"),$d=r("To load remote CSV files via HTTP, pass the URLs instead:"),kn=d(),u(os.$$.fragment),En=d(),ge=l("p"),yd=r("To load zipped CSV files:"),Pn=d(),u(ns.$$.fragment),xn=d(),ft=l("h3"),Yt=l("a"),Il=l("span"),u(rs.$$.fragment),wd=d(),Cl=l("span"),jd=r("JSON"),An=d(),Bt=l("p"),bd=r("JSON files are loaded directly with "),ve=l("a"),qd=r("load_dataset()"),kd=r(" as shown below:"),Sn=d(),u(is.$$.fragment),Dn=d(),$e=l("p"),Ed=r("JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),Tn=d(),u(ps.$$.fragment),Nn=d(),Wt=l("p"),Pd=r("Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),Ol=l("code"),xd=r("field"),Ad=r(" argument as shown in the following:"),In=d(),u(ds.$$.fragment),Cn=d(),ye=l("p"),Sd=r("To load remote JSON files via HTTP, pass the URLs instead:"),On=d(),u(fs.$$.fragment),Ln=d(),we=l("p"),Dd=r("While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),Hn=d(),ct=l("h3"),Qt=l("a"),Ll=l("span"),u(cs.$$.fragment),Td=d(),Hl=l("span"),Nd=r("Parquet"),Fn=d(),je=l("p"),Id=r("Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),Rn=d(),be=l("p"),Cd=r("To load a Parquet file:"),Mn=d(),u(hs.$$.fragment),Vn=d(),qe=l("p"),Od=r("To load remote Parquet files via HTTP, pass the URLs instead:"),zn=d(),u(us.$$.fragment),Un=d(),ht=l("h3"),Gt=l("a"),Fl=l("span"),u(ms.$$.fragment),Ld=d(),Rl=l("span"),Hd=r("SQL"),Jn=d(),Kt=l("p"),Fd=r("Read database contents with "),ke=l("a"),Rd=r("Dataset.from_sql()"),Md=r(". Both table names and queries are supported."),Yn=d(),Ee=l("p"),Vd=r("For example, a table from a SQLite file can be loaded with:"),Bn=d(),u(_s.$$.fragment),Wn=d(),Pe=l("p"),zd=r("Use a query for a more precise read:"),Qn=d(),u(gs.$$.fragment),Gn=d(),u(Xt.$$.fragment),Kn=d(),ut=l("h2"),Zt=l("a"),Ml=l("span"),u(vs.$$.fragment),Ud=d(),Vl=l("span"),Jd=r("In-memory data"),Xn=d(),ta=l("p"),Yd=r("\u{1F917} Datasets will also allow you to create a "),xe=l("a"),Bd=r("Dataset"),Wd=r(" directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),Zn=d(),mt=l("h3"),aa=l("a"),zl=l("span"),u($s.$$.fragment),Qd=d(),Ul=l("span"),Gd=r("Python dictionary"),tr=d(),sa=l("p"),Kd=r("Load Python dictionaries with "),Ae=l("a"),Xd=r("from_dict()"),Zd=r(":"),ar=d(),u(ys.$$.fragment),sr=d(),_t=l("h3"),ea=l("a"),Jl=l("span"),u(ws.$$.fragment),tf=d(),Yl=l("span"),af=r("Python list of dictionaries"),er=d(),la=l("p"),sf=r("Load a list of Python dictionaries with "),Bl=l("code"),ef=r("from_list()"),lf=r(":"),lr=d(),u(js.$$.fragment),or=d(),gt=l("h3"),oa=l("a"),Wl=l("span"),u(bs.$$.fragment),of=d(),Ql=l("span"),nf=r("Python generator"),nr=d(),na=l("p"),rf=r("Create a dataset from a Python generator with "),Se=l("a"),pf=r("from_generator()"),df=r(":"),rr=d(),u(qs.$$.fragment),ir=d(),De=l("p"),ff=r("This approach supports loading data larger than available memory."),pr=d(),vt=l("h3"),ra=l("a"),Gl=l("span"),u(ks.$$.fragment),cf=d(),Kl=l("span"),hf=r("Pandas DataFrame"),dr=d(),ia=l("p"),uf=r("Load Pandas DataFrames with "),Te=l("a"),mf=r("from_pandas()"),_f=r(":"),fr=d(),u(Es.$$.fragment),cr=d(),u(pa.$$.fragment),hr=d(),$t=l("h2"),da=l("a"),Xl=l("span"),u(Ps.$$.fragment),gf=d(),Zl=l("span"),vf=r("Offline"),ur=d(),Ne=l("p"),$f=r("Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),mr=d(),Z=l("p"),yf=r("If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),to=l("code"),wf=r("HF_DATASETS_OFFLINE"),jf=r(" to "),ao=l("code"),bf=r("1"),qf=r(" to enable full offline mode."),_r=d(),yt=l("h2"),fa=l("a"),so=l("span"),u(xs.$$.fragment),kf=d(),eo=l("span"),Ef=r("Slice splits"),gr=d(),tt=l("p"),Pf=r("You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),Ie=l("a"),xf=r("ReadInstruction"),Af=r(" API. Strings are more compact and readable for simple cases, while "),Ce=l("a"),Sf=r("ReadInstruction"),Df=r(" is easier to use with variable slicing parameters."),vr=d(),at=l("p"),Tf=r("Concatenate a "),lo=l("code"),Nf=r("train"),If=r(" and "),oo=l("code"),Cf=r("test"),Of=r(" split by:"),$r=d(),u(As.$$.fragment),yr=d(),ca=l("p"),Lf=r("Select specific rows of the "),no=l("code"),Hf=r("train"),Ff=r(" split:"),wr=d(),u(Ss.$$.fragment),jr=d(),Oe=l("p"),Rf=r("Or select a percentage of a split with:"),br=d(),u(Ds.$$.fragment),qr=d(),Le=l("p"),Mf=r("Select a combination of percentages from each split:"),kr=d(),u(Ts.$$.fragment),Er=d(),He=l("p"),Vf=r("Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),Pr=d(),u(Ns.$$.fragment),xr=d(),wt=l("h3"),ha=l("a"),ro=l("span"),u(Is.$$.fragment),zf=d(),io=l("span"),Uf=r("Percent slicing and rounding"),Ar=d(),Fe=l("p"),Jf=r("The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),Sr=d(),u(Cs.$$.fragment),Dr=d(),ua=l("p"),Yf=r("If you want equal sized splits, use "),po=l("code"),Bf=r("pct1_dropremainder"),Wf=r(" rounding instead. This treats the specified percentage boundaries as multiples of 1%."),Tr=d(),u(Os.$$.fragment),Nr=d(),u(ma.$$.fragment),Ir=d(),Re=l("a"),Cr=d(),jt=l("h2"),_a=l("a"),fo=l("span"),u(Ls.$$.fragment),Qf=d(),co=l("span"),Gf=r("Troubleshooting"),Or=d(),Me=l("p"),Kf=r("Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),Lr=d(),bt=l("h3"),ga=l("a"),ho=l("span"),u(Hs.$$.fragment),Xf=d(),uo=l("span"),Zf=r("Manual download"),Hr=d(),V=l("p"),tc=r("Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),Ve=l("a"),ac=r("load_dataset()"),sc=r(" to throw an "),mo=l("code"),ec=r("AssertionError"),lc=r(". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),_o=l("code"),oc=r("data_dir"),nc=r(" argument to specify the path to the files you just downloaded."),Fr=d(),va=l("p"),rc=r("For example, if you try to download a configuration from the "),Fs=l("a"),ic=r("MATINF"),pc=r(" dataset:"),Rr=d(),u(Rs.$$.fragment),Mr=d(),H=l("p"),dc=r("If you\u2019ve already downloaded a dataset from the "),go=l("em"),fc=r("Hub with a loading script"),cc=r(" to your computer, then you need to pass an absolute path to the "),vo=l("code"),hc=r("data_dir"),uc=r(" or "),$o=l("code"),mc=r("data_files"),_c=r(" parameter to load that dataset. Otherwise, if you pass a relative path, "),ze=l("a"),gc=r("load_dataset()"),vc=r(" will load the directory from the repository on the Hub instead of the local directory."),Vr=d(),qt=l("h3"),$a=l("a"),yo=l("span"),u(Ms.$$.fragment),$c=d(),wo=l("span"),yc=r("Specify features"),zr=d(),z=l("p"),wc=r("When you create a dataset from local files, the "),Ue=l("a"),jc=r("Features"),bc=r(" are automatically inferred by "),Vs=l("a"),qc=r("Apache Arrow"),kc=r(". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),Je=l("a"),Ec=r("ClassLabel"),Pc=r(" feature."),Ur=d(),ya=l("p"),xc=r("Start by defining your own labels with the "),Ye=l("a"),Ac=r("Features"),Sc=r(" class:"),Jr=d(),u(zs.$$.fragment),Yr=d(),st=l("p"),Dc=r("Next, specify the "),jo=l("code"),Tc=r("features"),Nc=r(" parameter in "),Be=l("a"),Ic=r("load_dataset()"),Cc=r(" with the features you just created:"),Br=d(),u(Us.$$.fragment),Wr=d(),We=l("p"),Oc=r("Now when you look at your dataset features, you can see it uses the custom labels you defined:"),Qr=d(),u(Js.$$.fragment),Gr=d(),kt=l("h2"),wa=l("a"),bo=l("span"),u(Ys.$$.fragment),Lc=d(),qo=l("span"),Hc=r("Metrics"),Kr=d(),u(ja.$$.fragment),Xr=d(),Qe=l("p"),Fc=r("When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),Zr=d(),u(Bs.$$.fragment),ti=d(),u(ba.$$.fragment),ai=d(),Et=l("h3"),qa=l("a"),ko=l("span"),u(Ws.$$.fragment),Rc=d(),Eo=l("span"),Mc=r("Load configurations"),si=d(),et=l("p"),Vc=r("It is possible for a metric to have different configurations. The configurations are stored in the "),Po=l("code"),zc=r("config_name"),Uc=r(" parameter in "),Ge=l("a"),Jc=r("MetricInfo"),Yc=r(" attribute. When you load a metric, provide the configuration name as shown in the following:"),ei=d(),u(Qs.$$.fragment),li=d(),Pt=l("h3"),ka=l("a"),xo=l("span"),u(Gs.$$.fragment),Bc=d(),Ao=l("span"),Wc=r("Distributed setup"),oi=d(),Ke=l("p"),Qc=r("When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),ni=d(),Xe=l("p"),Gc=r("For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),ri=d(),lt=l("ol"),So=l("li"),Ks=l("p"),Kc=r("Define the total number of processes with the "),Do=l("code"),Xc=r("num_process"),Zc=r(" argument."),th=d(),To=l("li"),xt=l("p"),ah=r("Set the process "),No=l("code"),sh=r("rank"),eh=r(" as an integer between zero and "),Io=l("code"),lh=r("num_process - 1"),oh=r("."),nh=d(),Co=l("li"),Xs=l("p"),rh=r("Load your metric with "),Ze=l("a"),ih=r("load_metric()"),ph=r(" with these arguments:"),ii=d(),u(Zs.$$.fragment),pi=d(),u(Ea.$$.fragment),di=d(),Pa=l("p"),dh=r("In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),Oo=l("code"),fh=r("experiment_id"),ch=r(" to distinguish the separate evaluations:"),fi=d(),u(te.$$.fragment),this.h()},l(t){const e=u_('[data-svelte="svelte-1phssyn"]',document.head);h=o(e,"META",{name:!0,content:!0}),e.forEach(a),k=f(t),y=o(t,"H1",{class:!0});var ae=n(y);b=o(ae,"A",{id:!0,class:!0,href:!0});var Lo=n(b);q=o(Lo,"SPAN",{});var Ho=n(q);m(w.$$.fragment,Ho),Ho.forEach(a),Lo.forEach(a),j=f(ae),P=o(ae,"SPAN",{});var Fo=n(P);C=i(Fo,"Load"),Fo.forEach(a),ae.forEach(a),T=f(t),F=o(t,"P",{});var Ro=n(F);R=i(Ro,"Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),Ro.forEach(a),At=f(t),Q=o(t,"P",{});var Mo=n(Q);G=i(Mo,"This guide will show you how to load a dataset from:"),Mo.forEach(a),St=f(t),S=o(t,"UL",{});var L=n(S);Y=o(L,"LI",{});var Vo=n(Y);Ta=i(Vo,"The Hub without a dataset loading script"),Vo.forEach(a),Na=f(L),B=o(L,"LI",{});var hh=n(B);Ia=i(hh,"Local loading script"),hh.forEach(a),Ca=f(L),M=o(L,"LI",{});var uh=n(M);Oa=i(uh,"Local files"),uh.forEach(a),La=f(L),W=o(L,"LI",{});var mh=n(W);x=i(mh,"In-memory data"),mh.forEach(a),se=f(L),Dt=o(L,"LI",{});var _h=n(Dt);ee=i(_h,"Offline"),_h.forEach(a),le=f(L),Tt=o(L,"LI",{});var gh=n(Tt);oe=i(gh,"A specific slice of a split"),gh.forEach(a),L.forEach(a),Ha=f(t),O=o(t,"P",{});var xa=n(O);sp=i(xa,"For more details specific to loading other dataset modalities, take a look at the "),Fa=o(xa,"A",{class:!0,href:!0});var vh=n(Fa);ep=i(vh,"load audio dataset guide"),vh.forEach(a),lp=i(xa,", the "),Ra=o(xa,"A",{class:!0,href:!0});var $h=n(Ra);op=i($h,"load image dataset guide"),$h.forEach(a),np=i(xa,", or the "),Ma=o(xa,"A",{class:!0,href:!0});var yh=n(Ma);rp=i(yh,"load text dataset guide"),yh.forEach(a),ip=i(xa,"."),xa.forEach(a),Uo=f(t),ne=o(t,"A",{id:!0}),n(ne).forEach(a),Jo=f(t),nt=o(t,"H2",{class:!0});var hi=n(nt);Nt=o(hi,"A",{id:!0,class:!0,href:!0});var wh=n(Nt);pl=o(wh,"SPAN",{});var jh=n(pl);m(Va.$$.fragment,jh),jh.forEach(a),wh.forEach(a),pp=f(hi),dl=o(hi,"SPAN",{});var bh=n(dl);dp=i(bh,"Hugging Face Hub"),bh.forEach(a),hi.forEach(a),Yo=f(t),K=o(t,"P",{});var tl=n(K);fp=i(tl,"Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),re=o(tl,"A",{href:!0});var qh=n(re);cp=i(qh,"creating a dataset repository"),qh.forEach(a),hp=i(tl," and upload your data files. Now you can use the "),ie=o(tl,"A",{href:!0});var kh=n(ie);up=i(kh,"load_dataset()"),kh.forEach(a),mp=i(tl," function to load the dataset."),tl.forEach(a),Bo=f(t),It=o(t,"P",{});var ui=n(It);_p=i(ui,"For example, try loading the files from this "),za=o(ui,"A",{href:!0,rel:!0});var Eh=n(za);gp=i(Eh,"demo repository"),Eh.forEach(a),vp=i(ui," by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),ui.forEach(a),Wo=f(t),m(Ua.$$.fragment,t),Qo=f(t),Ct=o(t,"P",{});var mi=n(Ct);$p=i(mi,"Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),fl=o(mi,"CODE",{});var Ph=n(fl);yp=i(Ph,"revision"),Ph.forEach(a),wp=i(mi," parameter to specify the dataset version you want to load:"),mi.forEach(a),Go=f(t),m(Ja.$$.fragment,t),Ko=f(t),m(Ot.$$.fragment,t),Xo=f(t),N=o(t,"P",{});var U=n(N);jp=i(U,"A dataset without a loading script by default loads all the data into the "),cl=o(U,"CODE",{});var xh=n(cl);bp=i(xh,"train"),xh.forEach(a),qp=i(U," split. Use the "),hl=o(U,"CODE",{});var Ah=n(hl);kp=i(Ah,"data_files"),Ah.forEach(a),Ep=i(U," parameter to map data files to splits like "),ul=o(U,"CODE",{});var Sh=n(ul);Pp=i(Sh,"train"),Sh.forEach(a),xp=i(U,", "),ml=o(U,"CODE",{});var Dh=n(ml);Ap=i(Dh,"validation"),Dh.forEach(a),Sp=i(U," and "),_l=o(U,"CODE",{});var Th=n(_l);Dp=i(Th,"test"),Th.forEach(a),Tp=i(U,":"),U.forEach(a),Zo=f(t),m(Ya.$$.fragment,t),tn=f(t),m(Lt.$$.fragment,t),an=f(t),X=o(t,"P",{});var al=n(X);Np=i(al,"You can also load a specific subset of the files with the "),gl=o(al,"CODE",{});var Nh=n(gl);Ip=i(Nh,"data_files"),Nh.forEach(a),Cp=i(al," or "),vl=o(al,"CODE",{});var Ih=n(vl);Op=i(Ih,"data_dir"),Ih.forEach(a),Lp=i(al," parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),al.forEach(a),sn=f(t),m(Ba.$$.fragment,t),en=f(t),Ht=o(t,"P",{});var _i=n(Ht);Hp=i(_i,"The "),$l=o(_i,"CODE",{});var Ch=n($l);Fp=i(Ch,"split"),Ch.forEach(a),Rp=i(_i," parameter can also map a data file to a specific split:"),_i.forEach(a),ln=f(t),m(Wa.$$.fragment,t),on=f(t),rt=o(t,"H2",{class:!0});var gi=n(rt);Ft=o(gi,"A",{id:!0,class:!0,href:!0});var Oh=n(Ft);yl=o(Oh,"SPAN",{});var Lh=n(yl);m(Qa.$$.fragment,Lh),Lh.forEach(a),Oh.forEach(a),Mp=f(gi),wl=o(gi,"SPAN",{});var Hh=n(wl);Vp=i(Hh,"Local loading script"),Hh.forEach(a),gi.forEach(a),nn=f(t),Rt=o(t,"P",{});var vi=n(Rt);zp=i(vi,"You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),pe=o(vi,"A",{href:!0});var Fh=n(pe);Up=i(Fh,"load_dataset()"),Fh.forEach(a),Jp=i(vi,":"),vi.forEach(a),rn=f(t),Mt=o(t,"UL",{});var $i=n(Mt);jl=o($i,"LI",{});var Rh=n(jl);Yp=i(Rh,"The local path to the loading script file."),Rh.forEach(a),Bp=f($i),bl=o($i,"LI",{});var Mh=n(bl);Wp=i(Mh,"The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),Mh.forEach(a),$i.forEach(a),pn=f(t),m(Ga.$$.fragment,t),dn=f(t),it=o(t,"H3",{class:!0});var yi=n(it);Vt=o(yi,"A",{id:!0,class:!0,href:!0});var Vh=n(Vt);ql=o(Vh,"SPAN",{});var zh=n(ql);m(Ka.$$.fragment,zh),zh.forEach(a),Vh.forEach(a),Qp=f(yi),kl=o(yi,"SPAN",{});var Uh=n(kl);Gp=i(Uh,"Edit loading script"),Uh.forEach(a),yi.forEach(a),fn=f(t),de=o(t,"P",{});var Jh=n(de);Kp=i(Jh,"You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),Jh.forEach(a),cn=f(t),m(Xa.$$.fragment,t),hn=f(t),zt=o(t,"P",{});var wi=n(zt);Xp=i(wi,"Make your edits to the loading script and then load it by passing its local path to "),fe=o(wi,"A",{href:!0});var Yh=n(fe);Zp=i(Yh,"load_dataset()"),Yh.forEach(a),td=i(wi,":"),wi.forEach(a),un=f(t),m(Za.$$.fragment,t),mn=f(t),pt=o(t,"H2",{class:!0});var ji=n(pt);Ut=o(ji,"A",{id:!0,class:!0,href:!0});var Bh=n(Ut);El=o(Bh,"SPAN",{});var Wh=n(El);m(ts.$$.fragment,Wh),Wh.forEach(a),Bh.forEach(a),ad=f(ji),Pl=o(ji,"SPAN",{});var Qh=n(Pl);sd=i(Qh,"Local and remote files"),Qh.forEach(a),ji.forEach(a),_n=f(t),I=o(t,"P",{});var J=n(I);ed=i(J,"Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),xl=o(J,"CODE",{});var Gh=n(xl);ld=i(Gh,"csv"),Gh.forEach(a),od=i(J,", "),Al=o(J,"CODE",{});var Kh=n(Al);nd=i(Kh,"json"),Kh.forEach(a),rd=i(J,", "),Sl=o(J,"CODE",{});var Xh=n(Sl);id=i(Xh,"txt"),Xh.forEach(a),pd=i(J," or "),Dl=o(J,"CODE",{});var Zh=n(Dl);dd=i(Zh,"parquet"),Zh.forEach(a),fd=i(J," file. The "),ce=o(J,"A",{href:!0});var tu=n(ce);cd=i(tu,"load_dataset()"),tu.forEach(a),hd=i(J," function can load each of these file types."),J.forEach(a),gn=f(t),dt=o(t,"H3",{class:!0});var bi=n(dt);Jt=o(bi,"A",{id:!0,class:!0,href:!0});var au=n(Jt);Tl=o(au,"SPAN",{});var su=n(Tl);m(as.$$.fragment,su),su.forEach(a),au.forEach(a),ud=f(bi),Nl=o(bi,"SPAN",{});var eu=n(Nl);md=i(eu,"CSV"),eu.forEach(a),bi.forEach(a),vn=f(t),he=o(t,"P",{});var lu=n(he);_d=i(lu,"\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),lu.forEach(a),$n=f(t),m(ss.$$.fragment,t),yn=f(t),ue=o(t,"P",{});var ou=n(ue);gd=i(ou,"If you have more than one CSV file:"),ou.forEach(a),wn=f(t),m(es.$$.fragment,t),jn=f(t),me=o(t,"P",{});var nu=n(me);vd=i(nu,"You can also map the training and test splits to specific CSV files:"),nu.forEach(a),bn=f(t),m(ls.$$.fragment,t),qn=f(t),_e=o(t,"P",{});var ru=n(_e);$d=i(ru,"To load remote CSV files via HTTP, pass the URLs instead:"),ru.forEach(a),kn=f(t),m(os.$$.fragment,t),En=f(t),ge=o(t,"P",{});var iu=n(ge);yd=i(iu,"To load zipped CSV files:"),iu.forEach(a),Pn=f(t),m(ns.$$.fragment,t),xn=f(t),ft=o(t,"H3",{class:!0});var qi=n(ft);Yt=o(qi,"A",{id:!0,class:!0,href:!0});var pu=n(Yt);Il=o(pu,"SPAN",{});var du=n(Il);m(rs.$$.fragment,du),du.forEach(a),pu.forEach(a),wd=f(qi),Cl=o(qi,"SPAN",{});var fu=n(Cl);jd=i(fu,"JSON"),fu.forEach(a),qi.forEach(a),An=f(t),Bt=o(t,"P",{});var ki=n(Bt);bd=i(ki,"JSON files are loaded directly with "),ve=o(ki,"A",{href:!0});var cu=n(ve);qd=i(cu,"load_dataset()"),cu.forEach(a),kd=i(ki," as shown below:"),ki.forEach(a),Sn=f(t),m(is.$$.fragment,t),Dn=f(t),$e=o(t,"P",{});var hu=n($e);Ed=i(hu,"JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),hu.forEach(a),Tn=f(t),m(ps.$$.fragment,t),Nn=f(t),Wt=o(t,"P",{});var Ei=n(Wt);Pd=i(Ei,"Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),Ol=o(Ei,"CODE",{});var uu=n(Ol);xd=i(uu,"field"),uu.forEach(a),Ad=i(Ei," argument as shown in the following:"),Ei.forEach(a),In=f(t),m(ds.$$.fragment,t),Cn=f(t),ye=o(t,"P",{});var mu=n(ye);Sd=i(mu,"To load remote JSON files via HTTP, pass the URLs instead:"),mu.forEach(a),On=f(t),m(fs.$$.fragment,t),Ln=f(t),we=o(t,"P",{});var _u=n(we);Dd=i(_u,"While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),_u.forEach(a),Hn=f(t),ct=o(t,"H3",{class:!0});var Pi=n(ct);Qt=o(Pi,"A",{id:!0,class:!0,href:!0});var gu=n(Qt);Ll=o(gu,"SPAN",{});var vu=n(Ll);m(cs.$$.fragment,vu),vu.forEach(a),gu.forEach(a),Td=f(Pi),Hl=o(Pi,"SPAN",{});var $u=n(Hl);Nd=i($u,"Parquet"),$u.forEach(a),Pi.forEach(a),Fn=f(t),je=o(t,"P",{});var yu=n(je);Id=i(yu,"Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),yu.forEach(a),Rn=f(t),be=o(t,"P",{});var wu=n(be);Cd=i(wu,"To load a Parquet file:"),wu.forEach(a),Mn=f(t),m(hs.$$.fragment,t),Vn=f(t),qe=o(t,"P",{});var ju=n(qe);Od=i(ju,"To load remote Parquet files via HTTP, pass the URLs instead:"),ju.forEach(a),zn=f(t),m(us.$$.fragment,t),Un=f(t),ht=o(t,"H3",{class:!0});var xi=n(ht);Gt=o(xi,"A",{id:!0,class:!0,href:!0});var bu=n(Gt);Fl=o(bu,"SPAN",{});var qu=n(Fl);m(ms.$$.fragment,qu),qu.forEach(a),bu.forEach(a),Ld=f(xi),Rl=o(xi,"SPAN",{});var ku=n(Rl);Hd=i(ku,"SQL"),ku.forEach(a),xi.forEach(a),Jn=f(t),Kt=o(t,"P",{});var Ai=n(Kt);Fd=i(Ai,"Read database contents with "),ke=o(Ai,"A",{href:!0});var Eu=n(ke);Rd=i(Eu,"Dataset.from_sql()"),Eu.forEach(a),Md=i(Ai,". Both table names and queries are supported."),Ai.forEach(a),Yn=f(t),Ee=o(t,"P",{});var Pu=n(Ee);Vd=i(Pu,"For example, a table from a SQLite file can be loaded with:"),Pu.forEach(a),Bn=f(t),m(_s.$$.fragment,t),Wn=f(t),Pe=o(t,"P",{});var xu=n(Pe);zd=i(xu,"Use a query for a more precise read:"),xu.forEach(a),Qn=f(t),m(gs.$$.fragment,t),Gn=f(t),m(Xt.$$.fragment,t),Kn=f(t),ut=o(t,"H2",{class:!0});var Si=n(ut);Zt=o(Si,"A",{id:!0,class:!0,href:!0});var Au=n(Zt);Ml=o(Au,"SPAN",{});var Su=n(Ml);m(vs.$$.fragment,Su),Su.forEach(a),Au.forEach(a),Ud=f(Si),Vl=o(Si,"SPAN",{});var Du=n(Vl);Jd=i(Du,"In-memory data"),Du.forEach(a),Si.forEach(a),Xn=f(t),ta=o(t,"P",{});var Di=n(ta);Yd=i(Di,"\u{1F917} Datasets will also allow you to create a "),xe=o(Di,"A",{href:!0});var Tu=n(xe);Bd=i(Tu,"Dataset"),Tu.forEach(a),Wd=i(Di," directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),Di.forEach(a),Zn=f(t),mt=o(t,"H3",{class:!0});var Ti=n(mt);aa=o(Ti,"A",{id:!0,class:!0,href:!0});var Nu=n(aa);zl=o(Nu,"SPAN",{});var Iu=n(zl);m($s.$$.fragment,Iu),Iu.forEach(a),Nu.forEach(a),Qd=f(Ti),Ul=o(Ti,"SPAN",{});var Cu=n(Ul);Gd=i(Cu,"Python dictionary"),Cu.forEach(a),Ti.forEach(a),tr=f(t),sa=o(t,"P",{});var Ni=n(sa);Kd=i(Ni,"Load Python dictionaries with "),Ae=o(Ni,"A",{href:!0});var Ou=n(Ae);Xd=i(Ou,"from_dict()"),Ou.forEach(a),Zd=i(Ni,":"),Ni.forEach(a),ar=f(t),m(ys.$$.fragment,t),sr=f(t),_t=o(t,"H3",{class:!0});var Ii=n(_t);ea=o(Ii,"A",{id:!0,class:!0,href:!0});var Lu=n(ea);Jl=o(Lu,"SPAN",{});var Hu=n(Jl);m(ws.$$.fragment,Hu),Hu.forEach(a),Lu.forEach(a),tf=f(Ii),Yl=o(Ii,"SPAN",{});var Fu=n(Yl);af=i(Fu,"Python list of dictionaries"),Fu.forEach(a),Ii.forEach(a),er=f(t),la=o(t,"P",{});var Ci=n(la);sf=i(Ci,"Load a list of Python dictionaries with "),Bl=o(Ci,"CODE",{});var Ru=n(Bl);ef=i(Ru,"from_list()"),Ru.forEach(a),lf=i(Ci,":"),Ci.forEach(a),lr=f(t),m(js.$$.fragment,t),or=f(t),gt=o(t,"H3",{class:!0});var Oi=n(gt);oa=o(Oi,"A",{id:!0,class:!0,href:!0});var Mu=n(oa);Wl=o(Mu,"SPAN",{});var Vu=n(Wl);m(bs.$$.fragment,Vu),Vu.forEach(a),Mu.forEach(a),of=f(Oi),Ql=o(Oi,"SPAN",{});var zu=n(Ql);nf=i(zu,"Python generator"),zu.forEach(a),Oi.forEach(a),nr=f(t),na=o(t,"P",{});var Li=n(na);rf=i(Li,"Create a dataset from a Python generator with "),Se=o(Li,"A",{href:!0});var Uu=n(Se);pf=i(Uu,"from_generator()"),Uu.forEach(a),df=i(Li,":"),Li.forEach(a),rr=f(t),m(qs.$$.fragment,t),ir=f(t),De=o(t,"P",{});var Ju=n(De);ff=i(Ju,"This approach supports loading data larger than available memory."),Ju.forEach(a),pr=f(t),vt=o(t,"H3",{class:!0});var Hi=n(vt);ra=o(Hi,"A",{id:!0,class:!0,href:!0});var Yu=n(ra);Gl=o(Yu,"SPAN",{});var Bu=n(Gl);m(ks.$$.fragment,Bu),Bu.forEach(a),Yu.forEach(a),cf=f(Hi),Kl=o(Hi,"SPAN",{});var Wu=n(Kl);hf=i(Wu,"Pandas DataFrame"),Wu.forEach(a),Hi.forEach(a),dr=f(t),ia=o(t,"P",{});var Fi=n(ia);uf=i(Fi,"Load Pandas DataFrames with "),Te=o(Fi,"A",{href:!0});var Qu=n(Te);mf=i(Qu,"from_pandas()"),Qu.forEach(a),_f=i(Fi,":"),Fi.forEach(a),fr=f(t),m(Es.$$.fragment,t),cr=f(t),m(pa.$$.fragment,t),hr=f(t),$t=o(t,"H2",{class:!0});var Ri=n($t);da=o(Ri,"A",{id:!0,class:!0,href:!0});var Gu=n(da);Xl=o(Gu,"SPAN",{});var Ku=n(Xl);m(Ps.$$.fragment,Ku),Ku.forEach(a),Gu.forEach(a),gf=f(Ri),Zl=o(Ri,"SPAN",{});var Xu=n(Zl);vf=i(Xu,"Offline"),Xu.forEach(a),Ri.forEach(a),ur=f(t),Ne=o(t,"P",{});var Zu=n(Ne);$f=i(Zu,"Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),Zu.forEach(a),mr=f(t),Z=o(t,"P",{});var sl=n(Z);yf=i(sl,"If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),to=o(sl,"CODE",{});var tm=n(to);wf=i(tm,"HF_DATASETS_OFFLINE"),tm.forEach(a),jf=i(sl," to "),ao=o(sl,"CODE",{});var am=n(ao);bf=i(am,"1"),am.forEach(a),qf=i(sl," to enable full offline mode."),sl.forEach(a),_r=f(t),yt=o(t,"H2",{class:!0});var Mi=n(yt);fa=o(Mi,"A",{id:!0,class:!0,href:!0});var sm=n(fa);so=o(sm,"SPAN",{});var em=n(so);m(xs.$$.fragment,em),em.forEach(a),sm.forEach(a),kf=f(Mi),eo=o(Mi,"SPAN",{});var lm=n(eo);Ef=i(lm,"Slice splits"),lm.forEach(a),Mi.forEach(a),gr=f(t),tt=o(t,"P",{});var el=n(tt);Pf=i(el,"You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),Ie=o(el,"A",{href:!0});var om=n(Ie);xf=i(om,"ReadInstruction"),om.forEach(a),Af=i(el," API. Strings are more compact and readable for simple cases, while "),Ce=o(el,"A",{href:!0});var nm=n(Ce);Sf=i(nm,"ReadInstruction"),nm.forEach(a),Df=i(el," is easier to use with variable slicing parameters."),el.forEach(a),vr=f(t),at=o(t,"P",{});var ll=n(at);Tf=i(ll,"Concatenate a "),lo=o(ll,"CODE",{});var rm=n(lo);Nf=i(rm,"train"),rm.forEach(a),If=i(ll," and "),oo=o(ll,"CODE",{});var im=n(oo);Cf=i(im,"test"),im.forEach(a),Of=i(ll," split by:"),ll.forEach(a),$r=f(t),m(As.$$.fragment,t),yr=f(t),ca=o(t,"P",{});var Vi=n(ca);Lf=i(Vi,"Select specific rows of the "),no=o(Vi,"CODE",{});var pm=n(no);Hf=i(pm,"train"),pm.forEach(a),Ff=i(Vi," split:"),Vi.forEach(a),wr=f(t),m(Ss.$$.fragment,t),jr=f(t),Oe=o(t,"P",{});var dm=n(Oe);Rf=i(dm,"Or select a percentage of a split with:"),dm.forEach(a),br=f(t),m(Ds.$$.fragment,t),qr=f(t),Le=o(t,"P",{});var fm=n(Le);Mf=i(fm,"Select a combination of percentages from each split:"),fm.forEach(a),kr=f(t),m(Ts.$$.fragment,t),Er=f(t),He=o(t,"P",{});var cm=n(He);Vf=i(cm,"Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),cm.forEach(a),Pr=f(t),m(Ns.$$.fragment,t),xr=f(t),wt=o(t,"H3",{class:!0});var zi=n(wt);ha=o(zi,"A",{id:!0,class:!0,href:!0});var hm=n(ha);ro=o(hm,"SPAN",{});var um=n(ro);m(Is.$$.fragment,um),um.forEach(a),hm.forEach(a),zf=f(zi),io=o(zi,"SPAN",{});var mm=n(io);Uf=i(mm,"Percent slicing and rounding"),mm.forEach(a),zi.forEach(a),Ar=f(t),Fe=o(t,"P",{});var _m=n(Fe);Jf=i(_m,"The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),_m.forEach(a),Sr=f(t),m(Cs.$$.fragment,t),Dr=f(t),ua=o(t,"P",{});var Ui=n(ua);Yf=i(Ui,"If you want equal sized splits, use "),po=o(Ui,"CODE",{});var gm=n(po);Bf=i(gm,"pct1_dropremainder"),gm.forEach(a),Wf=i(Ui," rounding instead. This treats the specified percentage boundaries as multiples of 1%."),Ui.forEach(a),Tr=f(t),m(Os.$$.fragment,t),Nr=f(t),m(ma.$$.fragment,t),Ir=f(t),Re=o(t,"A",{id:!0}),n(Re).forEach(a),Cr=f(t),jt=o(t,"H2",{class:!0});var Ji=n(jt);_a=o(Ji,"A",{id:!0,class:!0,href:!0});var vm=n(_a);fo=o(vm,"SPAN",{});var $m=n(fo);m(Ls.$$.fragment,$m),$m.forEach(a),vm.forEach(a),Qf=f(Ji),co=o(Ji,"SPAN",{});var ym=n(co);Gf=i(ym,"Troubleshooting"),ym.forEach(a),Ji.forEach(a),Or=f(t),Me=o(t,"P",{});var wm=n(Me);Kf=i(wm,"Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),wm.forEach(a),Lr=f(t),bt=o(t,"H3",{class:!0});var Yi=n(bt);ga=o(Yi,"A",{id:!0,class:!0,href:!0});var jm=n(ga);ho=o(jm,"SPAN",{});var bm=n(ho);m(Hs.$$.fragment,bm),bm.forEach(a),jm.forEach(a),Xf=f(Yi),uo=o(Yi,"SPAN",{});var qm=n(uo);Zf=i(qm,"Manual download"),qm.forEach(a),Yi.forEach(a),Hr=f(t),V=o(t,"P",{});var Aa=n(V);tc=i(Aa,"Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),Ve=o(Aa,"A",{href:!0});var km=n(Ve);ac=i(km,"load_dataset()"),km.forEach(a),sc=i(Aa," to throw an "),mo=o(Aa,"CODE",{});var Em=n(mo);ec=i(Em,"AssertionError"),Em.forEach(a),lc=i(Aa,". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),_o=o(Aa,"CODE",{});var Pm=n(_o);oc=i(Pm,"data_dir"),Pm.forEach(a),nc=i(Aa," argument to specify the path to the files you just downloaded."),Aa.forEach(a),Fr=f(t),va=o(t,"P",{});var Bi=n(va);rc=i(Bi,"For example, if you try to download a configuration from the "),Fs=o(Bi,"A",{href:!0,rel:!0});var xm=n(Fs);ic=i(xm,"MATINF"),xm.forEach(a),pc=i(Bi," dataset:"),Bi.forEach(a),Rr=f(t),m(Rs.$$.fragment,t),Mr=f(t),H=o(t,"P",{});var ot=n(H);dc=i(ot,"If you\u2019ve already downloaded a dataset from the "),go=o(ot,"EM",{});var Am=n(go);fc=i(Am,"Hub with a loading script"),Am.forEach(a),cc=i(ot," to your computer, then you need to pass an absolute path to the "),vo=o(ot,"CODE",{});var Sm=n(vo);hc=i(Sm,"data_dir"),Sm.forEach(a),uc=i(ot," or "),$o=o(ot,"CODE",{});var Dm=n($o);mc=i(Dm,"data_files"),Dm.forEach(a),_c=i(ot," parameter to load that dataset. Otherwise, if you pass a relative path, "),ze=o(ot,"A",{href:!0});var Tm=n(ze);gc=i(Tm,"load_dataset()"),Tm.forEach(a),vc=i(ot," will load the directory from the repository on the Hub instead of the local directory."),ot.forEach(a),Vr=f(t),qt=o(t,"H3",{class:!0});var Wi=n(qt);$a=o(Wi,"A",{id:!0,class:!0,href:!0});var Nm=n($a);yo=o(Nm,"SPAN",{});var Im=n(yo);m(Ms.$$.fragment,Im),Im.forEach(a),Nm.forEach(a),$c=f(Wi),wo=o(Wi,"SPAN",{});var Cm=n(wo);yc=i(Cm,"Specify features"),Cm.forEach(a),Wi.forEach(a),zr=f(t),z=o(t,"P",{});var Sa=n(z);wc=i(Sa,"When you create a dataset from local files, the "),Ue=o(Sa,"A",{href:!0});var Om=n(Ue);jc=i(Om,"Features"),Om.forEach(a),bc=i(Sa," are automatically inferred by "),Vs=o(Sa,"A",{href:!0,rel:!0});var Lm=n(Vs);qc=i(Lm,"Apache Arrow"),Lm.forEach(a),kc=i(Sa,". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),Je=o(Sa,"A",{href:!0});var Hm=n(Je);Ec=i(Hm,"ClassLabel"),Hm.forEach(a),Pc=i(Sa," feature."),Sa.forEach(a),Ur=f(t),ya=o(t,"P",{});var Qi=n(ya);xc=i(Qi,"Start by defining your own labels with the "),Ye=o(Qi,"A",{href:!0});var Fm=n(Ye);Ac=i(Fm,"Features"),Fm.forEach(a),Sc=i(Qi," class:"),Qi.forEach(a),Jr=f(t),m(zs.$$.fragment,t),Yr=f(t),st=o(t,"P",{});var ol=n(st);Dc=i(ol,"Next, specify the "),jo=o(ol,"CODE",{});var Rm=n(jo);Tc=i(Rm,"features"),Rm.forEach(a),Nc=i(ol," parameter in "),Be=o(ol,"A",{href:!0});var Mm=n(Be);Ic=i(Mm,"load_dataset()"),Mm.forEach(a),Cc=i(ol," with the features you just created:"),ol.forEach(a),Br=f(t),m(Us.$$.fragment,t),Wr=f(t),We=o(t,"P",{});var Vm=n(We);Oc=i(Vm,"Now when you look at your dataset features, you can see it uses the custom labels you defined:"),Vm.forEach(a),Qr=f(t),m(Js.$$.fragment,t),Gr=f(t),kt=o(t,"H2",{class:!0});var Gi=n(kt);wa=o(Gi,"A",{id:!0,class:!0,href:!0});var zm=n(wa);bo=o(zm,"SPAN",{});var Um=n(bo);m(Ys.$$.fragment,Um),Um.forEach(a),zm.forEach(a),Lc=f(Gi),qo=o(Gi,"SPAN",{});var Jm=n(qo);Hc=i(Jm,"Metrics"),Jm.forEach(a),Gi.forEach(a),Kr=f(t),m(ja.$$.fragment,t),Xr=f(t),Qe=o(t,"P",{});var Ym=n(Qe);Fc=i(Ym,"When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),Ym.forEach(a),Zr=f(t),m(Bs.$$.fragment,t),ti=f(t),m(ba.$$.fragment,t),ai=f(t),Et=o(t,"H3",{class:!0});var Ki=n(Et);qa=o(Ki,"A",{id:!0,class:!0,href:!0});var Bm=n(qa);ko=o(Bm,"SPAN",{});var Wm=n(ko);m(Ws.$$.fragment,Wm),Wm.forEach(a),Bm.forEach(a),Rc=f(Ki),Eo=o(Ki,"SPAN",{});var Qm=n(Eo);Mc=i(Qm,"Load configurations"),Qm.forEach(a),Ki.forEach(a),si=f(t),et=o(t,"P",{});var nl=n(et);Vc=i(nl,"It is possible for a metric to have different configurations. The configurations are stored in the "),Po=o(nl,"CODE",{});var Gm=n(Po);zc=i(Gm,"config_name"),Gm.forEach(a),Uc=i(nl," parameter in "),Ge=o(nl,"A",{href:!0});var Km=n(Ge);Jc=i(Km,"MetricInfo"),Km.forEach(a),Yc=i(nl," attribute. When you load a metric, provide the configuration name as shown in the following:"),nl.forEach(a),ei=f(t),m(Qs.$$.fragment,t),li=f(t),Pt=o(t,"H3",{class:!0});var Xi=n(Pt);ka=o(Xi,"A",{id:!0,class:!0,href:!0});var Xm=n(ka);xo=o(Xm,"SPAN",{});var Zm=n(xo);m(Gs.$$.fragment,Zm),Zm.forEach(a),Xm.forEach(a),Bc=f(Xi),Ao=o(Xi,"SPAN",{});var t_=n(Ao);Wc=i(t_,"Distributed setup"),t_.forEach(a),Xi.forEach(a),oi=f(t),Ke=o(t,"P",{});var a_=n(Ke);Qc=i(a_,"When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),a_.forEach(a),ni=f(t),Xe=o(t,"P",{});var s_=n(Xe);Gc=i(s_,"For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),s_.forEach(a),ri=f(t),lt=o(t,"OL",{});var rl=n(lt);So=o(rl,"LI",{});var e_=n(So);Ks=o(e_,"P",{});var Zi=n(Ks);Kc=i(Zi,"Define the total number of processes with the "),Do=o(Zi,"CODE",{});var l_=n(Do);Xc=i(l_,"num_process"),l_.forEach(a),Zc=i(Zi," argument."),Zi.forEach(a),e_.forEach(a),th=f(rl),To=o(rl,"LI",{});var o_=n(To);xt=o(o_,"P",{});var il=n(xt);ah=i(il,"Set the process "),No=o(il,"CODE",{});var n_=n(No);sh=i(n_,"rank"),n_.forEach(a),eh=i(il," as an integer between zero and "),Io=o(il,"CODE",{});var r_=n(Io);lh=i(r_,"num_process - 1"),r_.forEach(a),oh=i(il,"."),il.forEach(a),o_.forEach(a),nh=f(rl),Co=o(rl,"LI",{});var i_=n(Co);Xs=o(i_,"P",{});var tp=n(Xs);rh=i(tp,"Load your metric with "),Ze=o(tp,"A",{href:!0});var p_=n(Ze);ih=i(p_,"load_metric()"),p_.forEach(a),ph=i(tp," with these arguments:"),tp.forEach(a),i_.forEach(a),rl.forEach(a),ii=f(t),m(Zs.$$.fragment,t),pi=f(t),m(Ea.$$.fragment,t),di=f(t),Pa=o(t,"P",{});var ap=n(Pa);dh=i(ap,"In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),Oo=o(ap,"CODE",{});var d_=n(Oo);fh=i(d_,"experiment_id"),d_.forEach(a),ch=i(ap," to distinguish the separate evaluations:"),ap.forEach(a),fi=f(t),m(te.$$.fragment,t),this.h()},h(){c(h,"name","hf:doc:metadata"),c(h,"content",JSON.stringify(k_)),c(b,"id","load"),c(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b,"href","#load"),c(y,"class","relative group"),c(Fa,"class","underline decoration-pink-400 decoration-2 font-semibold"),c(Fa,"href","./audio_load"),c(Ra,"class","underline decoration-yellow-400 decoration-2 font-semibold"),c(Ra,"href","./image_load"),c(Ma,"class","underline decoration-green-400 decoration-2 font-semibold"),c(Ma,"href","./nlp_load"),c(ne,"id","load-from-the-hub"),c(Nt,"id","hugging-face-hub"),c(Nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nt,"href","#hugging-face-hub"),c(nt,"class","relative group"),c(re,"href","share#create-the-repository"),c(ie,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(za,"href","https://huggingface.co/datasets/lhoestq/demo1"),c(za,"rel","nofollow"),c(Ft,"id","local-loading-script"),c(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ft,"href","#local-loading-script"),c(rt,"class","relative group"),c(pe,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Vt,"id","edit-loading-script"),c(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vt,"href","#edit-loading-script"),c(it,"class","relative group"),c(fe,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Ut,"id","local-and-remote-files"),c(Ut,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ut,"href","#local-and-remote-files"),c(pt,"class","relative group"),c(ce,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Jt,"id","csv"),c(Jt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jt,"href","#csv"),c(dt,"class","relative group"),c(Yt,"id","json"),c(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yt,"href","#json"),c(ft,"class","relative group"),c(ve,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Qt,"id","parquet"),c(Qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qt,"href","#parquet"),c(ct,"class","relative group"),c(Gt,"id","sql"),c(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gt,"href","#sql"),c(ht,"class","relative group"),c(ke,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_sql"),c(Zt,"id","inmemory-data"),c(Zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zt,"href","#inmemory-data"),c(ut,"class","relative group"),c(xe,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),c(aa,"id","python-dictionary"),c(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aa,"href","#python-dictionary"),c(mt,"class","relative group"),c(Ae,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_dict"),c(ea,"id","python-list-of-dictionaries"),c(ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ea,"href","#python-list-of-dictionaries"),c(_t,"class","relative group"),c(oa,"id","python-generator"),c(oa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oa,"href","#python-generator"),c(gt,"class","relative group"),c(Se,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_generator"),c(ra,"id","pandas-dataframe"),c(ra,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ra,"href","#pandas-dataframe"),c(vt,"class","relative group"),c(Te,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_pandas"),c(da,"id","offline"),c(da,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(da,"href","#offline"),c($t,"class","relative group"),c(fa,"id","slice-splits"),c(fa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fa,"href","#slice-splits"),c(yt,"class","relative group"),c(Ie,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.ReadInstruction"),c(Ce,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.ReadInstruction"),c(ha,"id","percent-slicing-and-rounding"),c(ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ha,"href","#percent-slicing-and-rounding"),c(wt,"class","relative group"),c(Re,"id","troubleshoot"),c(_a,"id","troubleshooting"),c(_a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_a,"href","#troubleshooting"),c(jt,"class","relative group"),c(ga,"id","manual-download"),c(ga,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ga,"href","#manual-download"),c(bt,"class","relative group"),c(Ve,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(Fs,"href","https://huggingface.co/datasets/matinf"),c(Fs,"rel","nofollow"),c(ze,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c($a,"id","specify-features"),c($a,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($a,"href","#specify-features"),c(qt,"class","relative group"),c(Ue,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),c(Vs,"href","https://arrow.apache.org/docs/"),c(Vs,"rel","nofollow"),c(Je,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.ClassLabel"),c(Ye,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),c(Be,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),c(wa,"id","metrics"),c(wa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wa,"href","#metrics"),c(kt,"class","relative group"),c(qa,"id","load-configurations"),c(qa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qa,"href","#load-configurations"),c(Et,"class","relative group"),c(Ge,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.MetricInfo"),c(ka,"id","distributed-setup"),c(ka,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ka,"href","#distributed-setup"),c(Pt,"class","relative group"),c(Ze,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_metric")},m(t,e){s(document.head,h),p(t,k,e),p(t,y,e),s(y,b),s(b,q),_(w,q,null),s(y,j),s(y,P),s(P,C),p(t,T,e),p(t,F,e),s(F,R),p(t,At,e),p(t,Q,e),s(Q,G),p(t,St,e),p(t,S,e),s(S,Y),s(Y,Ta),s(S,Na),s(S,B),s(B,Ia),s(S,Ca),s(S,M),s(M,Oa),s(S,La),s(S,W),s(W,x),s(S,se),s(S,Dt),s(Dt,ee),s(S,le),s(S,Tt),s(Tt,oe),p(t,Ha,e),p(t,O,e),s(O,sp),s(O,Fa),s(Fa,ep),s(O,lp),s(O,Ra),s(Ra,op),s(O,np),s(O,Ma),s(Ma,rp),s(O,ip),p(t,Uo,e),p(t,ne,e),p(t,Jo,e),p(t,nt,e),s(nt,Nt),s(Nt,pl),_(Va,pl,null),s(nt,pp),s(nt,dl),s(dl,dp),p(t,Yo,e),p(t,K,e),s(K,fp),s(K,re),s(re,cp),s(K,hp),s(K,ie),s(ie,up),s(K,mp),p(t,Bo,e),p(t,It,e),s(It,_p),s(It,za),s(za,gp),s(It,vp),p(t,Wo,e),_(Ua,t,e),p(t,Qo,e),p(t,Ct,e),s(Ct,$p),s(Ct,fl),s(fl,yp),s(Ct,wp),p(t,Go,e),_(Ja,t,e),p(t,Ko,e),_(Ot,t,e),p(t,Xo,e),p(t,N,e),s(N,jp),s(N,cl),s(cl,bp),s(N,qp),s(N,hl),s(hl,kp),s(N,Ep),s(N,ul),s(ul,Pp),s(N,xp),s(N,ml),s(ml,Ap),s(N,Sp),s(N,_l),s(_l,Dp),s(N,Tp),p(t,Zo,e),_(Ya,t,e),p(t,tn,e),_(Lt,t,e),p(t,an,e),p(t,X,e),s(X,Np),s(X,gl),s(gl,Ip),s(X,Cp),s(X,vl),s(vl,Op),s(X,Lp),p(t,sn,e),_(Ba,t,e),p(t,en,e),p(t,Ht,e),s(Ht,Hp),s(Ht,$l),s($l,Fp),s(Ht,Rp),p(t,ln,e),_(Wa,t,e),p(t,on,e),p(t,rt,e),s(rt,Ft),s(Ft,yl),_(Qa,yl,null),s(rt,Mp),s(rt,wl),s(wl,Vp),p(t,nn,e),p(t,Rt,e),s(Rt,zp),s(Rt,pe),s(pe,Up),s(Rt,Jp),p(t,rn,e),p(t,Mt,e),s(Mt,jl),s(jl,Yp),s(Mt,Bp),s(Mt,bl),s(bl,Wp),p(t,pn,e),_(Ga,t,e),p(t,dn,e),p(t,it,e),s(it,Vt),s(Vt,ql),_(Ka,ql,null),s(it,Qp),s(it,kl),s(kl,Gp),p(t,fn,e),p(t,de,e),s(de,Kp),p(t,cn,e),_(Xa,t,e),p(t,hn,e),p(t,zt,e),s(zt,Xp),s(zt,fe),s(fe,Zp),s(zt,td),p(t,un,e),_(Za,t,e),p(t,mn,e),p(t,pt,e),s(pt,Ut),s(Ut,El),_(ts,El,null),s(pt,ad),s(pt,Pl),s(Pl,sd),p(t,_n,e),p(t,I,e),s(I,ed),s(I,xl),s(xl,ld),s(I,od),s(I,Al),s(Al,nd),s(I,rd),s(I,Sl),s(Sl,id),s(I,pd),s(I,Dl),s(Dl,dd),s(I,fd),s(I,ce),s(ce,cd),s(I,hd),p(t,gn,e),p(t,dt,e),s(dt,Jt),s(Jt,Tl),_(as,Tl,null),s(dt,ud),s(dt,Nl),s(Nl,md),p(t,vn,e),p(t,he,e),s(he,_d),p(t,$n,e),_(ss,t,e),p(t,yn,e),p(t,ue,e),s(ue,gd),p(t,wn,e),_(es,t,e),p(t,jn,e),p(t,me,e),s(me,vd),p(t,bn,e),_(ls,t,e),p(t,qn,e),p(t,_e,e),s(_e,$d),p(t,kn,e),_(os,t,e),p(t,En,e),p(t,ge,e),s(ge,yd),p(t,Pn,e),_(ns,t,e),p(t,xn,e),p(t,ft,e),s(ft,Yt),s(Yt,Il),_(rs,Il,null),s(ft,wd),s(ft,Cl),s(Cl,jd),p(t,An,e),p(t,Bt,e),s(Bt,bd),s(Bt,ve),s(ve,qd),s(Bt,kd),p(t,Sn,e),_(is,t,e),p(t,Dn,e),p(t,$e,e),s($e,Ed),p(t,Tn,e),_(ps,t,e),p(t,Nn,e),p(t,Wt,e),s(Wt,Pd),s(Wt,Ol),s(Ol,xd),s(Wt,Ad),p(t,In,e),_(ds,t,e),p(t,Cn,e),p(t,ye,e),s(ye,Sd),p(t,On,e),_(fs,t,e),p(t,Ln,e),p(t,we,e),s(we,Dd),p(t,Hn,e),p(t,ct,e),s(ct,Qt),s(Qt,Ll),_(cs,Ll,null),s(ct,Td),s(ct,Hl),s(Hl,Nd),p(t,Fn,e),p(t,je,e),s(je,Id),p(t,Rn,e),p(t,be,e),s(be,Cd),p(t,Mn,e),_(hs,t,e),p(t,Vn,e),p(t,qe,e),s(qe,Od),p(t,zn,e),_(us,t,e),p(t,Un,e),p(t,ht,e),s(ht,Gt),s(Gt,Fl),_(ms,Fl,null),s(ht,Ld),s(ht,Rl),s(Rl,Hd),p(t,Jn,e),p(t,Kt,e),s(Kt,Fd),s(Kt,ke),s(ke,Rd),s(Kt,Md),p(t,Yn,e),p(t,Ee,e),s(Ee,Vd),p(t,Bn,e),_(_s,t,e),p(t,Wn,e),p(t,Pe,e),s(Pe,zd),p(t,Qn,e),_(gs,t,e),p(t,Gn,e),_(Xt,t,e),p(t,Kn,e),p(t,ut,e),s(ut,Zt),s(Zt,Ml),_(vs,Ml,null),s(ut,Ud),s(ut,Vl),s(Vl,Jd),p(t,Xn,e),p(t,ta,e),s(ta,Yd),s(ta,xe),s(xe,Bd),s(ta,Wd),p(t,Zn,e),p(t,mt,e),s(mt,aa),s(aa,zl),_($s,zl,null),s(mt,Qd),s(mt,Ul),s(Ul,Gd),p(t,tr,e),p(t,sa,e),s(sa,Kd),s(sa,Ae),s(Ae,Xd),s(sa,Zd),p(t,ar,e),_(ys,t,e),p(t,sr,e),p(t,_t,e),s(_t,ea),s(ea,Jl),_(ws,Jl,null),s(_t,tf),s(_t,Yl),s(Yl,af),p(t,er,e),p(t,la,e),s(la,sf),s(la,Bl),s(Bl,ef),s(la,lf),p(t,lr,e),_(js,t,e),p(t,or,e),p(t,gt,e),s(gt,oa),s(oa,Wl),_(bs,Wl,null),s(gt,of),s(gt,Ql),s(Ql,nf),p(t,nr,e),p(t,na,e),s(na,rf),s(na,Se),s(Se,pf),s(na,df),p(t,rr,e),_(qs,t,e),p(t,ir,e),p(t,De,e),s(De,ff),p(t,pr,e),p(t,vt,e),s(vt,ra),s(ra,Gl),_(ks,Gl,null),s(vt,cf),s(vt,Kl),s(Kl,hf),p(t,dr,e),p(t,ia,e),s(ia,uf),s(ia,Te),s(Te,mf),s(ia,_f),p(t,fr,e),_(Es,t,e),p(t,cr,e),_(pa,t,e),p(t,hr,e),p(t,$t,e),s($t,da),s(da,Xl),_(Ps,Xl,null),s($t,gf),s($t,Zl),s(Zl,vf),p(t,ur,e),p(t,Ne,e),s(Ne,$f),p(t,mr,e),p(t,Z,e),s(Z,yf),s(Z,to),s(to,wf),s(Z,jf),s(Z,ao),s(ao,bf),s(Z,qf),p(t,_r,e),p(t,yt,e),s(yt,fa),s(fa,so),_(xs,so,null),s(yt,kf),s(yt,eo),s(eo,Ef),p(t,gr,e),p(t,tt,e),s(tt,Pf),s(tt,Ie),s(Ie,xf),s(tt,Af),s(tt,Ce),s(Ce,Sf),s(tt,Df),p(t,vr,e),p(t,at,e),s(at,Tf),s(at,lo),s(lo,Nf),s(at,If),s(at,oo),s(oo,Cf),s(at,Of),p(t,$r,e),_(As,t,e),p(t,yr,e),p(t,ca,e),s(ca,Lf),s(ca,no),s(no,Hf),s(ca,Ff),p(t,wr,e),_(Ss,t,e),p(t,jr,e),p(t,Oe,e),s(Oe,Rf),p(t,br,e),_(Ds,t,e),p(t,qr,e),p(t,Le,e),s(Le,Mf),p(t,kr,e),_(Ts,t,e),p(t,Er,e),p(t,He,e),s(He,Vf),p(t,Pr,e),_(Ns,t,e),p(t,xr,e),p(t,wt,e),s(wt,ha),s(ha,ro),_(Is,ro,null),s(wt,zf),s(wt,io),s(io,Uf),p(t,Ar,e),p(t,Fe,e),s(Fe,Jf),p(t,Sr,e),_(Cs,t,e),p(t,Dr,e),p(t,ua,e),s(ua,Yf),s(ua,po),s(po,Bf),s(ua,Wf),p(t,Tr,e),_(Os,t,e),p(t,Nr,e),_(ma,t,e),p(t,Ir,e),p(t,Re,e),p(t,Cr,e),p(t,jt,e),s(jt,_a),s(_a,fo),_(Ls,fo,null),s(jt,Qf),s(jt,co),s(co,Gf),p(t,Or,e),p(t,Me,e),s(Me,Kf),p(t,Lr,e),p(t,bt,e),s(bt,ga),s(ga,ho),_(Hs,ho,null),s(bt,Xf),s(bt,uo),s(uo,Zf),p(t,Hr,e),p(t,V,e),s(V,tc),s(V,Ve),s(Ve,ac),s(V,sc),s(V,mo),s(mo,ec),s(V,lc),s(V,_o),s(_o,oc),s(V,nc),p(t,Fr,e),p(t,va,e),s(va,rc),s(va,Fs),s(Fs,ic),s(va,pc),p(t,Rr,e),_(Rs,t,e),p(t,Mr,e),p(t,H,e),s(H,dc),s(H,go),s(go,fc),s(H,cc),s(H,vo),s(vo,hc),s(H,uc),s(H,$o),s($o,mc),s(H,_c),s(H,ze),s(ze,gc),s(H,vc),p(t,Vr,e),p(t,qt,e),s(qt,$a),s($a,yo),_(Ms,yo,null),s(qt,$c),s(qt,wo),s(wo,yc),p(t,zr,e),p(t,z,e),s(z,wc),s(z,Ue),s(Ue,jc),s(z,bc),s(z,Vs),s(Vs,qc),s(z,kc),s(z,Je),s(Je,Ec),s(z,Pc),p(t,Ur,e),p(t,ya,e),s(ya,xc),s(ya,Ye),s(Ye,Ac),s(ya,Sc),p(t,Jr,e),_(zs,t,e),p(t,Yr,e),p(t,st,e),s(st,Dc),s(st,jo),s(jo,Tc),s(st,Nc),s(st,Be),s(Be,Ic),s(st,Cc),p(t,Br,e),_(Us,t,e),p(t,Wr,e),p(t,We,e),s(We,Oc),p(t,Qr,e),_(Js,t,e),p(t,Gr,e),p(t,kt,e),s(kt,wa),s(wa,bo),_(Ys,bo,null),s(kt,Lc),s(kt,qo),s(qo,Hc),p(t,Kr,e),_(ja,t,e),p(t,Xr,e),p(t,Qe,e),s(Qe,Fc),p(t,Zr,e),_(Bs,t,e),p(t,ti,e),_(ba,t,e),p(t,ai,e),p(t,Et,e),s(Et,qa),s(qa,ko),_(Ws,ko,null),s(Et,Rc),s(Et,Eo),s(Eo,Mc),p(t,si,e),p(t,et,e),s(et,Vc),s(et,Po),s(Po,zc),s(et,Uc),s(et,Ge),s(Ge,Jc),s(et,Yc),p(t,ei,e),_(Qs,t,e),p(t,li,e),p(t,Pt,e),s(Pt,ka),s(ka,xo),_(Gs,xo,null),s(Pt,Bc),s(Pt,Ao),s(Ao,Wc),p(t,oi,e),p(t,Ke,e),s(Ke,Qc),p(t,ni,e),p(t,Xe,e),s(Xe,Gc),p(t,ri,e),p(t,lt,e),s(lt,So),s(So,Ks),s(Ks,Kc),s(Ks,Do),s(Do,Xc),s(Ks,Zc),s(lt,th),s(lt,To),s(To,xt),s(xt,ah),s(xt,No),s(No,sh),s(xt,eh),s(xt,Io),s(Io,lh),s(xt,oh),s(lt,nh),s(lt,Co),s(Co,Xs),s(Xs,rh),s(Xs,Ze),s(Ze,ih),s(Xs,ph),p(t,ii,e),_(Zs,t,e),p(t,pi,e),_(Ea,t,e),p(t,di,e),p(t,Pa,e),s(Pa,dh),s(Pa,Oo),s(Oo,fh),s(Pa,ch),p(t,fi,e),_(te,t,e),ci=!0},p(t,[e]){const ae={};e&2&&(ae.$$scope={dirty:e,ctx:t}),Ot.$set(ae);const Lo={};e&2&&(Lo.$$scope={dirty:e,ctx:t}),Lt.$set(Lo);const Ho={};e&2&&(Ho.$$scope={dirty:e,ctx:t}),Xt.$set(Ho);const Fo={};e&2&&(Fo.$$scope={dirty:e,ctx:t}),pa.$set(Fo);const Ro={};e&2&&(Ro.$$scope={dirty:e,ctx:t}),ma.$set(Ro);const Mo={};e&2&&(Mo.$$scope={dirty:e,ctx:t}),ja.$set(Mo);const L={};e&2&&(L.$$scope={dirty:e,ctx:t}),ba.$set(L);const Vo={};e&2&&(Vo.$$scope={dirty:e,ctx:t}),Ea.$set(Vo)},i(t){ci||(g(w.$$.fragment,t),g(Va.$$.fragment,t),g(Ua.$$.fragment,t),g(Ja.$$.fragment,t),g(Ot.$$.fragment,t),g(Ya.$$.fragment,t),g(Lt.$$.fragment,t),g(Ba.$$.fragment,t),g(Wa.$$.fragment,t),g(Qa.$$.fragment,t),g(Ga.$$.fragment,t),g(Ka.$$.fragment,t),g(Xa.$$.fragment,t),g(Za.$$.fragment,t),g(ts.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(es.$$.fragment,t),g(ls.$$.fragment,t),g(os.$$.fragment,t),g(ns.$$.fragment,t),g(rs.$$.fragment,t),g(is.$$.fragment,t),g(ps.$$.fragment,t),g(ds.$$.fragment,t),g(fs.$$.fragment,t),g(cs.$$.fragment,t),g(hs.$$.fragment,t),g(us.$$.fragment,t),g(ms.$$.fragment,t),g(_s.$$.fragment,t),g(gs.$$.fragment,t),g(Xt.$$.fragment,t),g(vs.$$.fragment,t),g($s.$$.fragment,t),g(ys.$$.fragment,t),g(ws.$$.fragment,t),g(js.$$.fragment,t),g(bs.$$.fragment,t),g(qs.$$.fragment,t),g(ks.$$.fragment,t),g(Es.$$.fragment,t),g(pa.$$.fragment,t),g(Ps.$$.fragment,t),g(xs.$$.fragment,t),g(As.$$.fragment,t),g(Ss.$$.fragment,t),g(Ds.$$.fragment,t),g(Ts.$$.fragment,t),g(Ns.$$.fragment,t),g(Is.$$.fragment,t),g(Cs.$$.fragment,t),g(Os.$$.fragment,t),g(ma.$$.fragment,t),g(Ls.$$.fragment,t),g(Hs.$$.fragment,t),g(Rs.$$.fragment,t),g(Ms.$$.fragment,t),g(zs.$$.fragment,t),g(Us.$$.fragment,t),g(Js.$$.fragment,t),g(Ys.$$.fragment,t),g(ja.$$.fragment,t),g(Bs.$$.fragment,t),g(ba.$$.fragment,t),g(Ws.$$.fragment,t),g(Qs.$$.fragment,t),g(Gs.$$.fragment,t),g(Zs.$$.fragment,t),g(Ea.$$.fragment,t),g(te.$$.fragment,t),ci=!0)},o(t){v(w.$$.fragment,t),v(Va.$$.fragment,t),v(Ua.$$.fragment,t),v(Ja.$$.fragment,t),v(Ot.$$.fragment,t),v(Ya.$$.fragment,t),v(Lt.$$.fragment,t),v(Ba.$$.fragment,t),v(Wa.$$.fragment,t),v(Qa.$$.fragment,t),v(Ga.$$.fragment,t),v(Ka.$$.fragment,t),v(Xa.$$.fragment,t),v(Za.$$.fragment,t),v(ts.$$.fragment,t),v(as.$$.fragment,t),v(ss.$$.fragment,t),v(es.$$.fragment,t),v(ls.$$.fragment,t),v(os.$$.fragment,t),v(ns.$$.fragment,t),v(rs.$$.fragment,t),v(is.$$.fragment,t),v(ps.$$.fragment,t),v(ds.$$.fragment,t),v(fs.$$.fragment,t),v(cs.$$.fragment,t),v(hs.$$.fragment,t),v(us.$$.fragment,t),v(ms.$$.fragment,t),v(_s.$$.fragment,t),v(gs.$$.fragment,t),v(Xt.$$.fragment,t),v(vs.$$.fragment,t),v($s.$$.fragment,t),v(ys.$$.fragment,t),v(ws.$$.fragment,t),v(js.$$.fragment,t),v(bs.$$.fragment,t),v(qs.$$.fragment,t),v(ks.$$.fragment,t),v(Es.$$.fragment,t),v(pa.$$.fragment,t),v(Ps.$$.fragment,t),v(xs.$$.fragment,t),v(As.$$.fragment,t),v(Ss.$$.fragment,t),v(Ds.$$.fragment,t),v(Ts.$$.fragment,t),v(Ns.$$.fragment,t),v(Is.$$.fragment,t),v(Cs.$$.fragment,t),v(Os.$$.fragment,t),v(ma.$$.fragment,t),v(Ls.$$.fragment,t),v(Hs.$$.fragment,t),v(Rs.$$.fragment,t),v(Ms.$$.fragment,t),v(zs.$$.fragment,t),v(Us.$$.fragment,t),v(Js.$$.fragment,t),v(Ys.$$.fragment,t),v(ja.$$.fragment,t),v(Bs.$$.fragment,t),v(ba.$$.fragment,t),v(Ws.$$.fragment,t),v(Qs.$$.fragment,t),v(Gs.$$.fragment,t),v(Zs.$$.fragment,t),v(Ea.$$.fragment,t),v(te.$$.fragment,t),ci=!1},d(t){a(h),t&&a(k),t&&a(y),$(w),t&&a(T),t&&a(F),t&&a(At),t&&a(Q),t&&a(St),t&&a(S),t&&a(Ha),t&&a(O),t&&a(Uo),t&&a(ne),t&&a(Jo),t&&a(nt),$(Va),t&&a(Yo),t&&a(K),t&&a(Bo),t&&a(It),t&&a(Wo),$(Ua,t),t&&a(Qo),t&&a(Ct),t&&a(Go),$(Ja,t),t&&a(Ko),$(Ot,t),t&&a(Xo),t&&a(N),t&&a(Zo),$(Ya,t),t&&a(tn),$(Lt,t),t&&a(an),t&&a(X),t&&a(sn),$(Ba,t),t&&a(en),t&&a(Ht),t&&a(ln),$(Wa,t),t&&a(on),t&&a(rt),$(Qa),t&&a(nn),t&&a(Rt),t&&a(rn),t&&a(Mt),t&&a(pn),$(Ga,t),t&&a(dn),t&&a(it),$(Ka),t&&a(fn),t&&a(de),t&&a(cn),$(Xa,t),t&&a(hn),t&&a(zt),t&&a(un),$(Za,t),t&&a(mn),t&&a(pt),$(ts),t&&a(_n),t&&a(I),t&&a(gn),t&&a(dt),$(as),t&&a(vn),t&&a(he),t&&a($n),$(ss,t),t&&a(yn),t&&a(ue),t&&a(wn),$(es,t),t&&a(jn),t&&a(me),t&&a(bn),$(ls,t),t&&a(qn),t&&a(_e),t&&a(kn),$(os,t),t&&a(En),t&&a(ge),t&&a(Pn),$(ns,t),t&&a(xn),t&&a(ft),$(rs),t&&a(An),t&&a(Bt),t&&a(Sn),$(is,t),t&&a(Dn),t&&a($e),t&&a(Tn),$(ps,t),t&&a(Nn),t&&a(Wt),t&&a(In),$(ds,t),t&&a(Cn),t&&a(ye),t&&a(On),$(fs,t),t&&a(Ln),t&&a(we),t&&a(Hn),t&&a(ct),$(cs),t&&a(Fn),t&&a(je),t&&a(Rn),t&&a(be),t&&a(Mn),$(hs,t),t&&a(Vn),t&&a(qe),t&&a(zn),$(us,t),t&&a(Un),t&&a(ht),$(ms),t&&a(Jn),t&&a(Kt),t&&a(Yn),t&&a(Ee),t&&a(Bn),$(_s,t),t&&a(Wn),t&&a(Pe),t&&a(Qn),$(gs,t),t&&a(Gn),$(Xt,t),t&&a(Kn),t&&a(ut),$(vs),t&&a(Xn),t&&a(ta),t&&a(Zn),t&&a(mt),$($s),t&&a(tr),t&&a(sa),t&&a(ar),$(ys,t),t&&a(sr),t&&a(_t),$(ws),t&&a(er),t&&a(la),t&&a(lr),$(js,t),t&&a(or),t&&a(gt),$(bs),t&&a(nr),t&&a(na),t&&a(rr),$(qs,t),t&&a(ir),t&&a(De),t&&a(pr),t&&a(vt),$(ks),t&&a(dr),t&&a(ia),t&&a(fr),$(Es,t),t&&a(cr),$(pa,t),t&&a(hr),t&&a($t),$(Ps),t&&a(ur),t&&a(Ne),t&&a(mr),t&&a(Z),t&&a(_r),t&&a(yt),$(xs),t&&a(gr),t&&a(tt),t&&a(vr),t&&a(at),t&&a($r),$(As,t),t&&a(yr),t&&a(ca),t&&a(wr),$(Ss,t),t&&a(jr),t&&a(Oe),t&&a(br),$(Ds,t),t&&a(qr),t&&a(Le),t&&a(kr),$(Ts,t),t&&a(Er),t&&a(He),t&&a(Pr),$(Ns,t),t&&a(xr),t&&a(wt),$(Is),t&&a(Ar),t&&a(Fe),t&&a(Sr),$(Cs,t),t&&a(Dr),t&&a(ua),t&&a(Tr),$(Os,t),t&&a(Nr),$(ma,t),t&&a(Ir),t&&a(Re),t&&a(Cr),t&&a(jt),$(Ls),t&&a(Or),t&&a(Me),t&&a(Lr),t&&a(bt),$(Hs),t&&a(Hr),t&&a(V),t&&a(Fr),t&&a(va),t&&a(Rr),$(Rs,t),t&&a(Mr),t&&a(H),t&&a(Vr),t&&a(qt),$(Ms),t&&a(zr),t&&a(z),t&&a(Ur),t&&a(ya),t&&a(Jr),$(zs,t),t&&a(Yr),t&&a(st),t&&a(Br),$(Us,t),t&&a(Wr),t&&a(We),t&&a(Qr),$(Js,t),t&&a(Gr),t&&a(kt),$(Ys),t&&a(Kr),$(ja,t),t&&a(Xr),t&&a(Qe),t&&a(Zr),$(Bs,t),t&&a(ti),$(ba,t),t&&a(ai),t&&a(Et),$(Ws),t&&a(si),t&&a(et),t&&a(ei),$(Qs,t),t&&a(li),t&&a(Pt),$(Gs),t&&a(oi),t&&a(Ke),t&&a(ni),t&&a(Xe),t&&a(ri),t&&a(lt),t&&a(ii),$(Zs,t),t&&a(pi),$(Ea,t),t&&a(di),t&&a(Pa),t&&a(fi),$(te,t)}}}const k_={local:"load",sections:[{local:"hugging-face-hub",title:"Hugging Face Hub"},{local:"local-loading-script",sections:[{local:"edit-loading-script",title:"Edit loading script"}],title:"Local loading script"},{local:"local-and-remote-files",sections:[{local:"csv",title:"CSV"},{local:"json",title:"JSON"},{local:"parquet",title:"Parquet"},{local:"sql",title:"SQL"}],title:"Local and remote files"},{local:"inmemory-data",sections:[{local:"python-dictionary",title:"Python dictionary"},{local:"python-list-of-dictionaries",title:"Python list of dictionaries"},{local:"python-generator",title:"Python generator"},{local:"pandas-dataframe",title:"Pandas DataFrame"}],title:"In-memory data"},{local:"offline",title:"Offline"},{local:"slice-splits",sections:[{local:"percent-slicing-and-rounding",title:"Percent slicing and rounding"}],title:"Slice splits"},{local:"troubleshooting",sections:[{local:"manual-download",title:"Manual download"},{local:"specify-features",title:"Specify features"}],title:"Troubleshooting"},{local:"metrics",sections:[{local:"load-configurations",title:"Load configurations"},{local:"distributed-setup",title:"Distributed setup"}],title:"Metrics"}],title:"Load"};function E_(D){return m_(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class N_ extends f_{constructor(h){super();c_(this,h,E_,q_,h_,{})}}export{N_ as default,k_ as metadata};
