import{S as Hh,i as Lh,s as Fh,e as l,k as d,w as h,t as n,M as Rh,c as o,d as a,m as c,a as i,x as m,h as r,b as f,G as s,g as p,y as _,q as g,o as v,B as $,v as Mh}from"../chunks/vendor-hf-doc-builder.js";import{T as Ls}from"../chunks/Tip-hf-doc-builder.js";import{I as S}from"../chunks/IconCopyLink-hf-doc-builder.js";import{C as E}from"../chunks/CodeBlock-hf-doc-builder.js";import{C as uo}from"../chunks/CodeBlockFw-hf-doc-builder.js";import"../chunks/IconTensorflow-hf-doc-builder.js";function Vh(D){let u,k,y,b,q;return{c(){u=l("p"),k=n("Refer to the "),y=l("a"),b=n("Upload a dataset to the Hub"),q=n(" tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),this.h()},l(w){u=o(w,"P",{});var j=i(u);k=r(j,"Refer to the "),y=o(j,"A",{href:!0});var x=i(y);b=r(x,"Upload a dataset to the Hub"),x.forEach(a),q=r(j," tutorial for more details on how to create a dataset repository on the Hub, and how to upload your data files."),j.forEach(a),this.h()},h(){f(y,"href","./upload_dataset")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function zh(D){let u,k,y,b,q;return{c(){u=l("p"),k=n("If you don\u2019t specify which data files to use, "),y=l("a"),b=n("load_dataset()"),q=n(" will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),this.h()},l(w){u=o(w,"P",{});var j=i(u);k=r(j,"If you don\u2019t specify which data files to use, "),y=o(j,"A",{href:!0});var x=i(y);b=r(x,"load_dataset()"),x.forEach(a),q=r(j," will return all the data files. This can take a long time if you load a large dataset like C4, which is approximately 13TB of data."),j.forEach(a),this.h()},h(){f(y,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Jh(D){let u,k,y,b,q,w,j,x,et,kt,U,lt,Et,Y,B,xt,A,V,wa,ja,z,ba,qa,H,ka,Ea;return{c(){u=l("p"),k=n("An object data type in "),y=l("a"),b=n("pandas.Series"),q=n(" doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=l("code"),j=n("0"),x=n(" or the Series only contains "),et=l("code"),kt=n("None/NaN"),U=n(" objects, the type is set to "),lt=l("code"),Et=n("null"),Y=n(". Avoid potential errors by constructing an explicit schema with "),B=l("a"),xt=n("Features"),A=n(" using the "),V=l("code"),wa=n("from_dict"),ja=n(" or "),z=l("code"),ba=n("from_pandas"),qa=n(" methods. See the "),H=l("a"),ka=n("troubleshoot"),Ea=n(" section for more details on how to explicitly specify your own features."),this.h()},l(J){u=o(J,"P",{});var P=i(u);k=r(P,"An object data type in "),y=o(P,"A",{href:!0,rel:!0});var Fs=i(y);b=r(Fs,"pandas.Series"),Fs.forEach(a),q=r(P," doesn\u2019t always carry enough information for Arrow to automatically infer a data type. For example, if a DataFrame is of length "),w=o(P,"CODE",{});var Pt=i(w);j=r(Pt,"0"),Pt.forEach(a),x=r(P," or the Series only contains "),et=o(P,"CODE",{});var Rs=i(et);kt=r(Rs,"None/NaN"),Rs.forEach(a),U=r(P," objects, the type is set to "),lt=o(P,"CODE",{});var Ms=i(lt);Et=r(Ms,"null"),Ms.forEach(a),Y=r(P,". Avoid potential errors by constructing an explicit schema with "),B=o(P,"A",{href:!0});var At=i(B);xt=r(At,"Features"),At.forEach(a),A=r(P," using the "),V=o(P,"CODE",{});var Vs=i(V);wa=r(Vs,"from_dict"),Vs.forEach(a),ja=r(P," or "),z=o(P,"CODE",{});var xa=i(z);ba=r(xa,"from_pandas"),xa.forEach(a),qa=r(P," methods. See the "),H=o(P,"A",{href:!0});var I=i(H);ka=r(I,"troubleshoot"),I.forEach(a),Ea=r(P," section for more details on how to explicitly specify your own features."),P.forEach(a),this.h()},h(){f(y,"href","https://pandas.pydata.org/docs/reference/api/pandas.Series.html"),f(y,"rel","nofollow"),f(B,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),f(H,"href","./loading#specify-features")},m(J,P){p(J,u,P),s(u,k),s(u,y),s(y,b),s(u,q),s(u,w),s(w,j),s(u,x),s(u,et),s(et,kt),s(u,U),s(u,lt),s(lt,Et),s(u,Y),s(u,B),s(B,xt),s(u,A),s(u,V),s(V,wa),s(u,ja),s(u,z),s(z,ba),s(u,qa),s(u,H),s(H,ka),s(u,Ea)},d(J){J&&a(u)}}}function Uh(D){let u,k,y,b;return{c(){u=l("p"),k=l("code"),y=n("pct1_dropremainder"),b=n(" rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100.")},l(q){u=o(q,"P",{});var w=i(u);k=o(w,"CODE",{});var j=i(k);y=r(j,"pct1_dropremainder"),j.forEach(a),b=r(w," rounding may truncate the last examples in a dataset if the number of examples in your dataset don\u2019t divide evenly by 100."),w.forEach(a)},m(q,w){p(q,u,w),s(u,k),s(k,y),s(u,b)},d(q){q&&a(u)}}}function Yh(D){let u,k,y,b,q;return{c(){u=l("p"),k=n("Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=l("a"),b=n("Evaluate"),q=n("! In addition to metrics, you can find more tools for evaluating models and datasets."),this.h()},l(w){u=o(w,"P",{});var j=i(u);k=r(j,"Metrics is deprecated in \u{1F917} Datasets. To learn more about how to use metrics, take a look at the library \u{1F917} "),y=o(j,"A",{href:!0,rel:!0});var x=i(y);b=r(x,"Evaluate"),x.forEach(a),q=r(j,"! In addition to metrics, you can find more tools for evaluating models and datasets."),j.forEach(a),this.h()},h(){f(y,"href","https://huggingface.co/docs/evaluate/index"),f(y,"rel","nofollow")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Bh(D){let u,k,y,b,q;return{c(){u=l("p"),k=n("See the "),y=l("a"),b=n("Metrics"),q=n(" guide for more details on how to write your own metric loading script."),this.h()},l(w){u=o(w,"P",{});var j=i(u);k=r(j,"See the "),y=o(j,"A",{href:!0});var x=i(y);b=r(x,"Metrics"),x.forEach(a),q=r(j," guide for more details on how to write your own metric loading script."),j.forEach(a),this.h()},h(){f(y,"href","./how_to_metrics#custom-metric-loading-script")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Wh(D){let u,k,y,b,q;return{c(){u=l("p"),k=n("Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=l("a"),b=n("Metric.compute()"),q=n(" gathers all the predictions and references from the nodes, and computes the final metric."),this.h()},l(w){u=o(w,"P",{});var j=i(u);k=r(j,"Once you\u2019ve loaded a metric for distributed usage, you can compute the metric as usual. Behind the scenes, "),y=o(j,"A",{href:!0});var x=i(y);b=r(x,"Metric.compute()"),x.forEach(a),q=r(j," gathers all the predictions and references from the nodes, and computes the final metric."),j.forEach(a),this.h()},h(){f(y,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Metric.compute")},m(w,j){p(w,u,j),s(u,k),s(u,y),s(y,b),s(u,q)},d(w){w&&a(u)}}}function Gh(D){let u,k,y,b,q,w,j,x,et,kt,U,lt,Et,Y,B,xt,A,V,wa,ja,z,ba,qa,H,ka,Ea,J,P,Fs,Pt,Rs,Ms,At,Vs,xa,I,ni,Pa,ri,ii,Aa,pi,di,Sa,ci,fi,ho,zs,mo,ot,St,Me,Da,ui,Ve,hi,_o,W,mi,Js,_i,gi,Us,vi,$i,go,Dt,yi,Ta,wi,ji,vo,Na,$o,Tt,bi,ze,qi,ki,yo,Ia,wo,Nt,jo,T,Ei,Je,xi,Pi,Ue,Ai,Si,Ye,Di,Ti,Be,Ni,Ii,We,Ci,Oi,bo,Ca,qo,It,ko,G,Hi,Ge,Li,Fi,Qe,Ri,Mi,Eo,Oa,xo,Ct,Vi,Ke,zi,Ji,Po,Ha,Ao,nt,Ot,Xe,La,Ui,Ze,Yi,So,Ht,Bi,Ys,Wi,Gi,Do,Lt,tl,Qi,Ki,al,Xi,To,Fa,No,rt,Ft,sl,Ra,Zi,el,tp,Io,Bs,ap,Co,Ma,Oo,Rt,sp,Ws,ep,lp,Ho,Va,Lo,it,Mt,ll,za,op,ol,np,Fo,N,rp,nl,ip,pp,rl,dp,cp,il,fp,up,pl,hp,mp,Gs,_p,gp,Ro,pt,Vt,dl,Ja,vp,cl,$p,Mo,Qs,yp,Vo,Ua,zo,Ks,wp,Jo,Ya,Uo,Xs,jp,Yo,Ba,Bo,Zs,bp,Wo,Wa,Go,te,qp,Qo,Ga,Ko,dt,zt,fl,Qa,kp,ul,Ep,Xo,Jt,xp,ae,Pp,Ap,Zo,Ka,tn,se,Sp,an,Xa,sn,Ut,Dp,hl,Tp,Np,en,Za,ln,ee,Ip,on,ts,nn,le,Cp,rn,ct,Yt,ml,as,Op,_l,Hp,pn,oe,Lp,dn,ne,Fp,cn,ss,fn,re,Rp,un,es,hn,ft,Bt,gl,ls,Mp,vl,Vp,mn,Wt,zp,ie,Jp,Up,_n,ut,Gt,$l,os,Yp,yl,Bp,gn,Qt,Wp,pe,Gp,Qp,vn,ns,$n,ht,Kt,wl,rs,Kp,jl,Xp,yn,Xt,Zp,de,td,ad,wn,is,jn,Zt,bn,mt,ta,bl,ps,sd,ql,ed,qn,ce,ld,kn,Q,od,kl,nd,rd,El,id,pd,En,_t,aa,xl,ds,dd,Pl,cd,xn,K,fd,fe,ud,hd,ue,md,_d,Pn,X,gd,Al,vd,$d,Sl,yd,wd,An,cs,Sn,sa,jd,Dl,bd,qd,Dn,fs,Tn,he,kd,Nn,us,In,me,Ed,Cn,hs,On,_e,xd,Hn,ms,Ln,gt,ea,Tl,_s,Pd,Nl,Ad,Fn,ge,Sd,Rn,gs,Mn,la,Dd,Il,Td,Nd,Vn,vs,zn,oa,Jn,ve,Un,vt,na,Cl,$s,Id,Ol,Cd,Yn,$e,Od,Bn,$t,ra,Hl,ys,Hd,Ll,Ld,Wn,L,Fd,ye,Rd,Md,Fl,Vd,zd,Rl,Jd,Ud,Gn,ia,Yd,ws,Bd,Wd,Qn,js,Kn,O,Gd,Ml,Qd,Kd,Vl,Xd,Zd,zl,tc,ac,we,sc,ec,Xn,yt,pa,Jl,bs,lc,Ul,oc,Zn,F,nc,je,rc,ic,qs,pc,dc,be,cc,fc,tr,da,uc,qe,hc,mc,ar,ks,sr,Z,_c,Yl,gc,vc,ke,$c,yc,er,Es,lr,Ee,wc,or,xs,nr,wt,ca,Bl,Ps,jc,Wl,bc,rr,fa,ir,xe,qc,pr,As,dr,ua,cr,jt,ha,Gl,Ss,kc,Ql,Ec,fr,tt,xc,Kl,Pc,Ac,Pe,Sc,Dc,ur,Ds,hr,bt,ma,Xl,Ts,Tc,Zl,Nc,mr,Ae,Ic,_r,Se,Cc,gr,at,to,Ns,Oc,ao,Hc,Lc,Fc,so,qt,Rc,eo,Mc,Vc,lo,zc,Jc,Uc,oo,Is,Yc,De,Bc,Wc,vr,Cs,$r,_a,yr,ga,Gc,no,Qc,Kc,wr,Os,jr;return w=new S({}),Da=new S({}),Na=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("lhoestq/demo1")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;lhoestq/demo1&quot;</span>)`}}),Ia=new E({props:{code:`dataset = load_dataset(
  "lhoestq/custom_squad",
  revision="main"  # tag name, or branch name, or commit hash
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(
<span class="hljs-meta">... </span>  <span class="hljs-string">&quot;lhoestq/custom_squad&quot;</span>,
<span class="hljs-meta">... </span>  revision=<span class="hljs-string">&quot;main&quot;</span>  <span class="hljs-comment"># tag name, or branch name, or commit hash</span>
<span class="hljs-meta">... </span>)`}}),Nt=new Ls({props:{$$slots:{default:[Vh]},$$scope:{ctx:D}}}),Ca=new E({props:{code:`data_files = {"train": "train.csv", "test": "test.csv"}
dataset = load_dataset("namespace/your_dataset_name", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;train.csv&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;test.csv&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;namespace/your_dataset_name&quot;</span>, data_files=data_files)`}}),It=new Ls({props:{warning:!0,$$slots:{default:[zh]},$$scope:{ctx:D}}}),Oa=new E({props:{code:`from datasets import load_dataset

c4_subset = load_dataset("allenai/c4", data_files="en/c4-train.0000*-of-01024.json.gz")

c4_subset = load_dataset("allenai/c4", data_dir="en")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-comment"># load files that match the grep pattern</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=<span class="hljs-string">&quot;en/c4-train.0000*-of-01024.json.gz&quot;</span>)

<span class="hljs-comment"># load dataset from the en directory on the Hub</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_subset = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_dir=<span class="hljs-string">&quot;en&quot;</span>)`}}),Ha=new E({props:{code:`data_files = {"validation": "en/c4-validation.*.json.gz"}
c4_validation = load_dataset("allenai/c4", data_files=data_files, split="validation")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;validation&quot;</span>: <span class="hljs-string">&quot;en/c4-validation.*.json.gz&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>c4_validation = load_dataset(<span class="hljs-string">&quot;allenai/c4&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;validation&quot;</span>)`}}),La=new S({}),Fa=new E({props:{code:`dataset = load_dataset("path/to/local/loading_script/loading_script.py", split="train")
dataset = load_dataset("path/to/local/loading_script", split="train")  # equivalent because the file has the same name as the directory`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script/loading_script.py&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;path/to/local/loading_script&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)  <span class="hljs-comment"># equivalent because the file has the same name as the directory</span>`}}),Ra=new S({}),Ma=new E({props:{code:"git clone https://huggingface.co/datasets/eli5",highlighted:'git <span class="hljs-built_in">clone</span> https://huggingface.co/datasets/eli5'}}),Va=new E({props:{code:`from datasets import load_dataset
eli5 = load_dataset("path/to/local/eli5")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>eli5 = load_dataset(<span class="hljs-string">&quot;path/to/local/eli5&quot;</span>)`}}),za=new S({}),Ja=new S({}),Ua=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("csv", data_files="my_file.csv")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.csv&quot;</span>)`}}),Ya=new E({props:{code:'dataset = load_dataset("csv", data_files=["my_file_1.csv", "my_file_2.csv", "my_file_3.csv"])',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=[<span class="hljs-string">&quot;my_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_file_2.csv&quot;</span>, <span class="hljs-string">&quot;my_file_3.csv&quot;</span>])'}}),Ba=new E({props:{code:'dataset = load_dataset("csv", data_files={"train": ["my_train_file_1.csv", "my_train_file_2.csv"], "test": "my_test_file.csv"})',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: [<span class="hljs-string">&quot;my_train_file_1.csv&quot;</span>, <span class="hljs-string">&quot;my_train_file_2.csv&quot;</span>], <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;my_test_file.csv&quot;</span>})'}}),Wa=new E({props:{code:`base_url = "https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/"
dataset = load_dataset('csv', data_files={'train': base_url + 'train.csv', 'test': base_url + 'test.csv'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: base_url + <span class="hljs-string">&#x27;train.csv&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: base_url + <span class="hljs-string">&#x27;test.csv&#x27;</span>})`}}),Ga=new E({props:{code:`url = "https://domain.org/train_data.zip"
data_files = {"train": url}
dataset = load_dataset("csv", data_files=data_files)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;https://domain.org/train_data.zip&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: url}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;csv&quot;</span>, data_files=data_files)`}}),Qa=new S({}),Ka=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>)`}}),Xa=new E({props:{code:`{"a": 1, "b": 2.0, "c": "foo", "d": false}
{"a": 4, "b": -5.5, "c": null, "d": true}`,highlighted:`<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2.0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;foo&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">{</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-5.5</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;d&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">}</span>`}}),Za=new E({props:{code:`
from datasets import load_dataset
dataset = load_dataset("json", data_files="my_file.json", field="data")`,highlighted:`{<span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;0.1.0&quot;</span>,
 <span class="hljs-string">&quot;data&quot;</span>: [{<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">2.0</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>: false},
          {<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;b&quot;</span>: -<span class="hljs-number">5.5</span>, <span class="hljs-string">&quot;c&quot;</span>: null, <span class="hljs-string">&quot;d&quot;</span>: true}]
}

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;my_file.json&quot;</span>, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),ts=new E({props:{code:`base_url = "https://rajpurkar.github.io/SQuAD-explorer/dataset/"
dataset = load_dataset("json", data_files={"train": base_url + "train-v1.1.json", "validation": base_url + "dev-v1.1.json"}, field="data")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://rajpurkar.github.io/SQuAD-explorer/dataset/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files={<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;train-v1.1.json&quot;</span>, <span class="hljs-string">&quot;validation&quot;</span>: base_url + <span class="hljs-string">&quot;dev-v1.1.json&quot;</span>}, field=<span class="hljs-string">&quot;data&quot;</span>)`}}),as=new S({}),ss=new E({props:{code:`from datasets import load_dataset
dataset = load_dataset("parquet", data_files={'train': 'train.parquet', 'test': 'test.parquet'})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files={<span class="hljs-string">&#x27;train&#x27;</span>: <span class="hljs-string">&#x27;train.parquet&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>: <span class="hljs-string">&#x27;test.parquet&#x27;</span>})`}}),es=new E({props:{code:`base_url = "https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/"
data_files = {"train": base_url + "wikipedia-train.parquet"}
wiki = load_dataset("parquet", data_files=data_files, split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>base_url = <span class="hljs-string">&quot;https://storage.googleapis.com/huggingface-nlp/cache/datasets/wikipedia/20200501.en/1.0.0/&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>data_files = {<span class="hljs-string">&quot;train&quot;</span>: base_url + <span class="hljs-string">&quot;wikipedia-train.parquet&quot;</span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>wiki = load_dataset(<span class="hljs-string">&quot;parquet&quot;</span>, data_files=data_files, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),ls=new S({}),os=new S({}),ns=new E({props:{code:`from datasets import Dataset
my_dict = {"a": [1, 2, 3]}
dataset = Dataset.from_dict(my_dict)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>my_dict = {<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]}
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict(my_dict)`}}),rs=new S({}),is=new E({props:{code:`from datasets import Dataset
import pandas as pd
df = pd.DataFrame({"a": [1, 2, 3]})
dataset = Dataset.from_pandas(df)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd
<span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_pandas(df)`}}),Zt=new Ls({props:{warning:!0,$$slots:{default:[Jh]},$$scope:{ctx:D}}}),ps=new S({}),ds=new S({}),cs=new uo({props:{group1:{id:"stringapi",code:'train_test_ds = datasets.load_dataset("bookcorpus", split="train+test")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train+test&quot;</span>)'},group2:{id:"readinstruction",code:`ri = datasets.ReadInstruction("train") + datasets.ReadInstruction("test")
train_test_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;test&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_test_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),fs=new uo({props:{group1:{id:"stringapi",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split="train[10:20]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[10:20]&quot;</span>)'},group2:{id:"readinstruction",code:`train_10_20_ds = datasets.load_dataset("bookcorpu"', split=datasets.ReadInstruction("train", from_=10, to=20, unit="abs"))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpu&quot;</span><span class="hljs-string">&#x27;, split=datasets.ReadInstruction(&quot;train&quot;, from_=10, to=20, unit=&quot;abs&quot;))</span>'}}}),us=new uo({props:{group1:{id:"stringapi",code:'train_10pct_ds = datasets.load_dataset("bookcorpus", split="train[:10%]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[:10%]&quot;</span>)'},group2:{id:"readinstruction",code:'train_10_20_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", to=10, unit="%"))',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_20_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))'}}}),hs=new uo({props:{group1:{id:"stringapi",code:'train_10_80pct_ds = datasets.load_dataset("bookcorpus", split="tr"in[:10%]+train[-80%:]")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;tr&quot;</span><span class="hljs-keyword">in</span>[:<span class="hljs-number">10</span>%]+train[-<span class="hljs-number">80</span>%:]<span class="hljs-string">&quot;)</span>'},group2:{id:"readinstruction",code:`ri = (datasets.ReadInstruction("train", to=10, unit="%") + datasets.ReadInstruction("train", from_=-80, unit="%"))
train_10_80pct_ds = datasets.load_dataset("bookcorpus", split=ri)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>ri = (datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=-<span class="hljs-number">80</span>, unit=<span class="hljs-string">&quot;%&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>train_10_80pct_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=ri)`}}}),ms=new uo({props:{group1:{id:"stringapi",code:`val_ds = datasets.load_dataset("bookcorpus", split=[f"train[{k}%:{k+10}%]" for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", split=[f"train[:{k}%]+train[{k+10}%:]" for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[<span class="hljs-subst">{k}</span>%:<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=[<span class="hljs-string">f&quot;train[:<span class="hljs-subst">{k}</span>%]+train[<span class="hljs-subst">{k+<span class="hljs-number">10</span>}</span>%:]&quot;</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`},group2:{id:"readinstruction",code:`val_ds = datasets.load_dataset("bookcorpus", [datasets.ReadInstruction("train", from_=k, to=k+10, unit="%") for k in range(0, 100, 10)])
train_ds = datasets.load_dataset("bookcorpus", [(datasets.ReadInstruction("train", to=k, unit="%") + datasets.ReadInstruction("train", from_=k+10, unit="%")) for k in range(0, 100, 10)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>val_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k, to=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])
<span class="hljs-meta">&gt;&gt;&gt; </span>train_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, [(datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, to=k, unit=<span class="hljs-string">&quot;%&quot;</span>) + datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=k+<span class="hljs-number">10</span>, unit=<span class="hljs-string">&quot;%&quot;</span>)) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">10</span>)])`}}}),_s=new S({}),gs=new E({props:{code:`train_50_52_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%]")
train_52_54_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%]")`,highlighted:`<span class="hljs-comment"># 19 records, from 500 (included) to 519 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%]&quot;</span>)
<span class="hljs-comment"># 20 records, from 519 (included) to 539 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%]&quot;</span>)`}}),vs=new E({props:{code:`train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train", from_=50, to=52, unit="%", rounding="pct1_dropremainder"))
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split=datasets.ReadInstruction("train",from_=52, to=54, unit="%", rounding="pct1_dropremainder"))
train_50_52pct1_ds = datasets.load_dataset("bookcorpus", split="train[50%:52%](pct1_dropremainder)")
train_52_54pct1_ds = datasets.load_dataset("bookcorpus", split="train[52%:54%](pct1_dropremainder)")`,highlighted:`<span class="hljs-comment"># 18 records, from 450 (included) to 468 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>, from_=<span class="hljs-number">50</span>, to=<span class="hljs-number">52</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># 18 records, from 468 (included) to 486 (excluded).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=datasets.ReadInstruction(<span class="hljs-string">&quot;train&quot;</span>,from_=<span class="hljs-number">52</span>, to=<span class="hljs-number">54</span>, unit=<span class="hljs-string">&quot;%&quot;</span>, rounding=<span class="hljs-string">&quot;pct1_dropremainder&quot;</span>))
<span class="hljs-comment"># Or equivalently:</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>train_50_52pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[50%:52%](pct1_dropremainder)&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>train_52_54pct1_ds = datasets.load_dataset(<span class="hljs-string">&quot;bookcorpus&quot;</span>, split=<span class="hljs-string">&quot;train[52%:54%](pct1_dropremainder)&quot;</span>)`}}),oa=new Ls({props:{warning:!0,$$slots:{default:[Uh]},$$scope:{ctx:D}}}),$s=new S({}),ys=new S({}),js=new E({props:{code:'dataset = load_dataset("matinf", "summarization")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;matinf&quot;</span>, <span class="hljs-string">&quot;summarization&quot;</span>)
Downloading <span class="hljs-keyword">and</span> preparing dataset matinf/summarization (download: Unknown size, generated: <span class="hljs-number">246.89</span> MiB, post-processed: Unknown size, total: <span class="hljs-number">246.89</span> MiB) to /root/.cache/huggingface/datasets/matinf/summarization/<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>/82eee5e71c3ceaf20d909bca36ff237452b4e4ab195d3be7ee1c78b53e6f540e...
AssertionError: The dataset matinf <span class="hljs-keyword">with</span> config summarization requires manual data. 
Please follow the manual download instructions: To use MATINF you have to download it manually. Please fill this google form (https://forms.gle/nkH4LVE4iNQeDzsc9). You will receive a download link <span class="hljs-keyword">and</span> a password once you complete the form. Please extract <span class="hljs-built_in">all</span> files <span class="hljs-keyword">in</span> one folder <span class="hljs-keyword">and</span> load the dataset <span class="hljs-keyword">with</span>: *datasets.load_dataset(<span class="hljs-string">&#x27;matinf&#x27;</span>, data_dir=<span class="hljs-string">&#x27;path/to/folder/folder_name&#x27;</span>)*. 
Manual data can be loaded <span class="hljs-keyword">with</span> \`datasets.load_dataset(matinf, data_dir=<span class="hljs-string">&#x27;&lt;path/to/manual/data&gt;&#x27;</span>) `}}),bs=new S({}),ks=new E({props:{code:`class_names = ["sadness", "joy", "love", "anger", "fear", "surprise"]
emotion_features = Features({'text': Value('string'), 'label': ClassLabel(names=class_names)})`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>class_names = [<span class="hljs-string">&quot;sadness&quot;</span>, <span class="hljs-string">&quot;joy&quot;</span>, <span class="hljs-string">&quot;love&quot;</span>, <span class="hljs-string">&quot;anger&quot;</span>, <span class="hljs-string">&quot;fear&quot;</span>, <span class="hljs-string">&quot;surprise&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>emotion_features = Features({<span class="hljs-string">&#x27;text&#x27;</span>: Value(<span class="hljs-string">&#x27;string&#x27;</span>), <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(names=class_names)})`}}),Es=new E({props:{code:"dataset = load_dataset('csv', data_files=file_dict, delimiter=';', column_names=['text', 'label'], features=emotion_features)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&#x27;csv&#x27;</span>, data_files=file_dict, delimiter=<span class="hljs-string">&#x27;;&#x27;</span>, column_names=[<span class="hljs-string">&#x27;text&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>], features=emotion_features)'}}),xs=new E({props:{code:"dataset['train'].features",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&#x27;train&#x27;</span>].features
{<span class="hljs-string">&#x27;text&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
<span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">6</span>, names=[<span class="hljs-string">&#x27;sadness&#x27;</span>, <span class="hljs-string">&#x27;joy&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>, <span class="hljs-string">&#x27;anger&#x27;</span>, <span class="hljs-string">&#x27;fear&#x27;</span>, <span class="hljs-string">&#x27;surprise&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ps=new S({}),fa=new Ls({props:{warning:!0,$$slots:{default:[Yh]},$$scope:{ctx:D}}}),As=new E({props:{code:`from datasets import load_metric
metric = load_metric('PATH/TO/MY/METRIC/SCRIPT')

# Example of typical usage
for batch in dataset:
    inputs, references = batch
    predictions = model(inputs)
    metric.add_batch(predictions=predictions, references=references)
score = metric.compute()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;PATH/TO/MY/METRIC/SCRIPT&#x27;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Example of typical usage</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> dataset:
<span class="hljs-meta">... </span>    inputs, references = batch
<span class="hljs-meta">... </span>    predictions = model(inputs)
<span class="hljs-meta">... </span>    metric.add_batch(predictions=predictions, references=references)
<span class="hljs-meta">&gt;&gt;&gt; </span>score = metric.compute()`}}),ua=new Ls({props:{$$slots:{default:[Bh]},$$scope:{ctx:D}}}),Ss=new S({}),Ds=new E({props:{code:`from datasets import load_metric
metric = load_metric('bleurt', name='bleurt-base-128')
metric = load_metric('bleurt', name='bleurt-base-512')`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-128&#x27;</span>)</span>
<span class="hljs-meta">&gt;&gt;&gt;</span> <span class="language-python">metric = load_metric(<span class="hljs-string">&#x27;bleurt&#x27;</span>, name=<span class="hljs-string">&#x27;bleurt-base-512&#x27;</span>)</span>`}}),Ts=new S({}),Cs=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=rank)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=rank)`}}),_a=new Ls({props:{$$slots:{default:[Wh]},$$scope:{ctx:D}}}),Os=new E({props:{code:`from datasets import load_metric
metric = load_metric('glue', 'mrpc', num_process=num_process, process_id=process_id, experiment_id="My_experiment_10")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_metric
<span class="hljs-meta">&gt;&gt;&gt; </span>metric = load_metric(<span class="hljs-string">&#x27;glue&#x27;</span>, <span class="hljs-string">&#x27;mrpc&#x27;</span>, num_process=num_process, process_id=process_id, experiment_id=<span class="hljs-string">&quot;My_experiment_10&quot;</span>)`}}),{c(){u=l("meta"),k=d(),y=l("h1"),b=l("a"),q=l("span"),h(w.$$.fragment),j=d(),x=l("span"),et=n("Load"),kt=d(),U=l("p"),lt=n("Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),Et=d(),Y=l("p"),B=n("This guide will show you how to load a dataset from:"),xt=d(),A=l("ul"),V=l("li"),wa=n("The Hub without a dataset loading script"),ja=d(),z=l("li"),ba=n("Local loading script"),qa=d(),H=l("li"),ka=n("Local files"),Ea=d(),J=l("li"),P=n("In-memory data"),Fs=d(),Pt=l("li"),Rs=n("Offline"),Ms=d(),At=l("li"),Vs=n("A specific slice of a split"),xa=d(),I=l("p"),ni=n("For more details specific to loading other dataset modalities, take a look at the "),Pa=l("a"),ri=n("load audio dataset guide"),ii=n(", the "),Aa=l("a"),pi=n("load image dataset guide"),di=n(", or the "),Sa=l("a"),ci=n("load text dataset guide"),fi=n("."),ho=d(),zs=l("a"),mo=d(),ot=l("h2"),St=l("a"),Me=l("span"),h(Da.$$.fragment),ui=d(),Ve=l("span"),hi=n("Hugging Face Hub"),_o=d(),W=l("p"),mi=n("Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),Js=l("a"),_i=n("creating a dataset repository"),gi=n(" and upload your data files. Now you can use the "),Us=l("a"),vi=n("load_dataset()"),$i=n(" function to load the dataset."),go=d(),Dt=l("p"),yi=n("For example, try loading the files from this "),Ta=l("a"),wi=n("demo repository"),ji=n(" by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),vo=d(),h(Na.$$.fragment),$o=d(),Tt=l("p"),bi=n("Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),ze=l("code"),qi=n("revision"),ki=n(" parameter to specify the dataset version you want to load:"),yo=d(),h(Ia.$$.fragment),wo=d(),h(Nt.$$.fragment),jo=d(),T=l("p"),Ei=n("A dataset without a loading script by default loads all the data into the "),Je=l("code"),xi=n("train"),Pi=n(" split. Use the "),Ue=l("code"),Ai=n("data_files"),Si=n(" parameter to map data files to splits like "),Ye=l("code"),Di=n("train"),Ti=n(", "),Be=l("code"),Ni=n("validation"),Ii=n(" and "),We=l("code"),Ci=n("test"),Oi=n(":"),bo=d(),h(Ca.$$.fragment),qo=d(),h(It.$$.fragment),ko=d(),G=l("p"),Hi=n("You can also load a specific subset of the files with the "),Ge=l("code"),Li=n("data_files"),Fi=n(" or "),Qe=l("code"),Ri=n("data_dir"),Mi=n(" parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),Eo=d(),h(Oa.$$.fragment),xo=d(),Ct=l("p"),Vi=n("The "),Ke=l("code"),zi=n("split"),Ji=n(" parameter can also map a data file to a specific split:"),Po=d(),h(Ha.$$.fragment),Ao=d(),nt=l("h2"),Ot=l("a"),Xe=l("span"),h(La.$$.fragment),Ui=d(),Ze=l("span"),Yi=n("Local loading script"),So=d(),Ht=l("p"),Bi=n("You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),Ys=l("a"),Wi=n("load_dataset()"),Gi=n(":"),Do=d(),Lt=l("ul"),tl=l("li"),Qi=n("The local path to the loading script file."),Ki=d(),al=l("li"),Xi=n("The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),To=d(),h(Fa.$$.fragment),No=d(),rt=l("h3"),Ft=l("a"),sl=l("span"),h(Ra.$$.fragment),Zi=d(),el=l("span"),tp=n("Edit loading script"),Io=d(),Bs=l("p"),ap=n("You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),Co=d(),h(Ma.$$.fragment),Oo=d(),Rt=l("p"),sp=n("Make your edits to the loading script and then load it by passing its local path to "),Ws=l("a"),ep=n("load_dataset()"),lp=n(":"),Ho=d(),h(Va.$$.fragment),Lo=d(),it=l("h2"),Mt=l("a"),ll=l("span"),h(za.$$.fragment),op=d(),ol=l("span"),np=n("Local and remote files"),Fo=d(),N=l("p"),rp=n("Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),nl=l("code"),ip=n("csv"),pp=n(", "),rl=l("code"),dp=n("json"),cp=n(", "),il=l("code"),fp=n("txt"),up=n(" or "),pl=l("code"),hp=n("parquet"),mp=n(" file. The "),Gs=l("a"),_p=n("load_dataset()"),gp=n(" function can load each of these file types."),Ro=d(),pt=l("h3"),Vt=l("a"),dl=l("span"),h(Ja.$$.fragment),vp=d(),cl=l("span"),$p=n("CSV"),Mo=d(),Qs=l("p"),yp=n("\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),Vo=d(),h(Ua.$$.fragment),zo=d(),Ks=l("p"),wp=n("If you have more than one CSV file:"),Jo=d(),h(Ya.$$.fragment),Uo=d(),Xs=l("p"),jp=n("You can also map the training and test splits to specific CSV files:"),Yo=d(),h(Ba.$$.fragment),Bo=d(),Zs=l("p"),bp=n("To load remote CSV files via HTTP, pass the URLs instead:"),Wo=d(),h(Wa.$$.fragment),Go=d(),te=l("p"),qp=n("To load zipped CSV files:"),Qo=d(),h(Ga.$$.fragment),Ko=d(),dt=l("h3"),zt=l("a"),fl=l("span"),h(Qa.$$.fragment),kp=d(),ul=l("span"),Ep=n("JSON"),Xo=d(),Jt=l("p"),xp=n("JSON files are loaded directly with "),ae=l("a"),Pp=n("load_dataset()"),Ap=n(" as shown below:"),Zo=d(),h(Ka.$$.fragment),tn=d(),se=l("p"),Sp=n("JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),an=d(),h(Xa.$$.fragment),sn=d(),Ut=l("p"),Dp=n("Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),hl=l("code"),Tp=n("field"),Np=n(" argument as shown in the following:"),en=d(),h(Za.$$.fragment),ln=d(),ee=l("p"),Ip=n("To load remote JSON files via HTTP, pass the URLs instead:"),on=d(),h(ts.$$.fragment),nn=d(),le=l("p"),Cp=n("While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),rn=d(),ct=l("h3"),Yt=l("a"),ml=l("span"),h(as.$$.fragment),Op=d(),_l=l("span"),Hp=n("Parquet"),pn=d(),oe=l("p"),Lp=n("Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),dn=d(),ne=l("p"),Fp=n("To load a Parquet file:"),cn=d(),h(ss.$$.fragment),fn=d(),re=l("p"),Rp=n("To load remote Parquet files via HTTP, pass the URLs instead:"),un=d(),h(es.$$.fragment),hn=d(),ft=l("h2"),Bt=l("a"),gl=l("span"),h(ls.$$.fragment),Mp=d(),vl=l("span"),Vp=n("In-memory data"),mn=d(),Wt=l("p"),zp=n("\u{1F917} Datasets will also allow you to create a "),ie=l("a"),Jp=n("Dataset"),Up=n(" directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),_n=d(),ut=l("h3"),Gt=l("a"),$l=l("span"),h(os.$$.fragment),Yp=d(),yl=l("span"),Bp=n("Python dictionary"),gn=d(),Qt=l("p"),Wp=n("Load Python dictionaries with "),pe=l("a"),Gp=n("from_dict()"),Qp=n(":"),vn=d(),h(ns.$$.fragment),$n=d(),ht=l("h3"),Kt=l("a"),wl=l("span"),h(rs.$$.fragment),Kp=d(),jl=l("span"),Xp=n("Pandas DataFrame"),yn=d(),Xt=l("p"),Zp=n("Load Pandas DataFrames with "),de=l("a"),td=n("from_pandas()"),ad=n(":"),wn=d(),h(is.$$.fragment),jn=d(),h(Zt.$$.fragment),bn=d(),mt=l("h2"),ta=l("a"),bl=l("span"),h(ps.$$.fragment),sd=d(),ql=l("span"),ed=n("Offline"),qn=d(),ce=l("p"),ld=n("Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub or \u{1F917} Datasets GitHub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),kn=d(),Q=l("p"),od=n("If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),kl=l("code"),nd=n("HF_DATASETS_OFFLINE"),rd=n(" to "),El=l("code"),id=n("1"),pd=n(" to enable full offline mode."),En=d(),_t=l("h2"),aa=l("a"),xl=l("span"),h(ds.$$.fragment),dd=d(),Pl=l("span"),cd=n("Slice splits"),xn=d(),K=l("p"),fd=n("You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),fe=l("a"),ud=n("ReadInstruction"),hd=n(" API. Strings are more compact and readable for simple cases, while "),ue=l("a"),md=n("ReadInstruction"),_d=n(" is easier to use with variable slicing parameters."),Pn=d(),X=l("p"),gd=n("Concatenate a "),Al=l("code"),vd=n("train"),$d=n(" and "),Sl=l("code"),yd=n("test"),wd=n(" split by:"),An=d(),h(cs.$$.fragment),Sn=d(),sa=l("p"),jd=n("Select specific rows of the "),Dl=l("code"),bd=n("train"),qd=n(" split:"),Dn=d(),h(fs.$$.fragment),Tn=d(),he=l("p"),kd=n("Or select a percentage of a split with:"),Nn=d(),h(us.$$.fragment),In=d(),me=l("p"),Ed=n("Select a combination of percentages from each split:"),Cn=d(),h(hs.$$.fragment),On=d(),_e=l("p"),xd=n("Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),Hn=d(),h(ms.$$.fragment),Ln=d(),gt=l("h3"),ea=l("a"),Tl=l("span"),h(_s.$$.fragment),Pd=d(),Nl=l("span"),Ad=n("Percent slicing and rounding"),Fn=d(),ge=l("p"),Sd=n("The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),Rn=d(),h(gs.$$.fragment),Mn=d(),la=l("p"),Dd=n("If you want equal sized splits, use "),Il=l("code"),Td=n("pct1_dropremainder"),Nd=n(" rounding instead. This treats the specified percentage boundaries as multiples of 1%."),Vn=d(),h(vs.$$.fragment),zn=d(),h(oa.$$.fragment),Jn=d(),ve=l("a"),Un=d(),vt=l("h2"),na=l("a"),Cl=l("span"),h($s.$$.fragment),Id=d(),Ol=l("span"),Cd=n("Troubleshooting"),Yn=d(),$e=l("p"),Od=n("Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),Bn=d(),$t=l("h3"),ra=l("a"),Hl=l("span"),h(ys.$$.fragment),Hd=d(),Ll=l("span"),Ld=n("Manual download"),Wn=d(),L=l("p"),Fd=n("Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),ye=l("a"),Rd=n("load_dataset()"),Md=n(" to throw an "),Fl=l("code"),Vd=n("AssertionError"),zd=n(". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),Rl=l("code"),Jd=n("data_dir"),Ud=n(" argument to specify the path to the files you just downloaded."),Gn=d(),ia=l("p"),Yd=n("For example, if you try to download a configuration from the "),ws=l("a"),Bd=n("MATINF"),Wd=n(" dataset:"),Qn=d(),h(js.$$.fragment),Kn=d(),O=l("p"),Gd=n("If you\u2019ve already downloaded a dataset from the "),Ml=l("em"),Qd=n("Hub with a loading script"),Kd=n(" to your computer, then you need to pass an absolute path to the "),Vl=l("code"),Xd=n("data_dir"),Zd=n(" or "),zl=l("code"),tc=n("data_files"),ac=n(" parameter to load that dataset. Otherwise, if you pass a relative path, "),we=l("a"),sc=n("load_dataset()"),ec=n(" will load the directory from the repository on the Hub instead of the local directory."),Xn=d(),yt=l("h3"),pa=l("a"),Jl=l("span"),h(bs.$$.fragment),lc=d(),Ul=l("span"),oc=n("Specify features"),Zn=d(),F=l("p"),nc=n("When you create a dataset from local files, the "),je=l("a"),rc=n("Features"),ic=n(" are automatically inferred by "),qs=l("a"),pc=n("Apache Arrow"),dc=n(". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),be=l("a"),cc=n("ClassLabel"),fc=n(" feature."),tr=d(),da=l("p"),uc=n("Start by defining your own labels with the "),qe=l("a"),hc=n("Features"),mc=n(" class:"),ar=d(),h(ks.$$.fragment),sr=d(),Z=l("p"),_c=n("Next, specify the "),Yl=l("code"),gc=n("features"),vc=n(" parameter in "),ke=l("a"),$c=n("load_dataset()"),yc=n(" with the features you just created:"),er=d(),h(Es.$$.fragment),lr=d(),Ee=l("p"),wc=n("Now when you look at your dataset features, you can see it uses the custom labels you defined:"),or=d(),h(xs.$$.fragment),nr=d(),wt=l("h2"),ca=l("a"),Bl=l("span"),h(Ps.$$.fragment),jc=d(),Wl=l("span"),bc=n("Metrics"),rr=d(),h(fa.$$.fragment),ir=d(),xe=l("p"),qc=n("When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),pr=d(),h(As.$$.fragment),dr=d(),h(ua.$$.fragment),cr=d(),jt=l("h3"),ha=l("a"),Gl=l("span"),h(Ss.$$.fragment),kc=d(),Ql=l("span"),Ec=n("Load configurations"),fr=d(),tt=l("p"),xc=n("It is possible for a metric to have different configurations. The configurations are stored in the "),Kl=l("code"),Pc=n("config_name"),Ac=n(" parameter in "),Pe=l("a"),Sc=n("MetricInfo"),Dc=n(" attribute. When you load a metric, provide the configuration name as shown in the following:"),ur=d(),h(Ds.$$.fragment),hr=d(),bt=l("h3"),ma=l("a"),Xl=l("span"),h(Ts.$$.fragment),Tc=d(),Zl=l("span"),Nc=n("Distributed setup"),mr=d(),Ae=l("p"),Ic=n("When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),_r=d(),Se=l("p"),Cc=n("For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),gr=d(),at=l("ol"),to=l("li"),Ns=l("p"),Oc=n("Define the total number of processes with the "),ao=l("code"),Hc=n("num_process"),Lc=n(" argument."),Fc=d(),so=l("li"),qt=l("p"),Rc=n("Set the process "),eo=l("code"),Mc=n("rank"),Vc=n(" as an integer between zero and "),lo=l("code"),zc=n("num_process - 1"),Jc=n("."),Uc=d(),oo=l("li"),Is=l("p"),Yc=n("Load your metric with "),De=l("a"),Bc=n("load_metric()"),Wc=n(" with these arguments:"),vr=d(),h(Cs.$$.fragment),$r=d(),h(_a.$$.fragment),yr=d(),ga=l("p"),Gc=n("In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),no=l("code"),Qc=n("experiment_id"),Kc=n(" to distinguish the separate evaluations:"),wr=d(),h(Os.$$.fragment),this.h()},l(t){const e=Rh('[data-svelte="svelte-1phssyn"]',document.head);u=o(e,"META",{name:!0,content:!0}),e.forEach(a),k=c(t),y=o(t,"H1",{class:!0});var Hs=i(y);b=o(Hs,"A",{id:!0,class:!0,href:!0});var ro=i(b);q=o(ro,"SPAN",{});var io=i(q);m(w.$$.fragment,io),io.forEach(a),ro.forEach(a),j=c(Hs),x=o(Hs,"SPAN",{});var po=i(x);et=r(po,"Load"),po.forEach(a),Hs.forEach(a),kt=c(t),U=o(t,"P",{});var co=i(U);lt=r(co,"Your data can be stored in various places; they can be on your local machine\u2019s disk, in a Github repository, and in in-memory data structures like Python dictionaries and Pandas DataFrames. Wherever a dataset is stored, \u{1F917} Datasets can help you load it."),co.forEach(a),Et=c(t),Y=o(t,"P",{});var fo=i(Y);B=r(fo,"This guide will show you how to load a dataset from:"),fo.forEach(a),xt=c(t),A=o(t,"UL",{});var C=i(A);V=o(C,"LI",{});var Xc=i(V);wa=r(Xc,"The Hub without a dataset loading script"),Xc.forEach(a),ja=c(C),z=o(C,"LI",{});var Zc=i(z);ba=r(Zc,"Local loading script"),Zc.forEach(a),qa=c(C),H=o(C,"LI",{});var tf=i(H);ka=r(tf,"Local files"),tf.forEach(a),Ea=c(C),J=o(C,"LI",{});var af=i(J);P=r(af,"In-memory data"),af.forEach(a),Fs=c(C),Pt=o(C,"LI",{});var sf=i(Pt);Rs=r(sf,"Offline"),sf.forEach(a),Ms=c(C),At=o(C,"LI",{});var ef=i(At);Vs=r(ef,"A specific slice of a split"),ef.forEach(a),C.forEach(a),xa=c(t),I=o(t,"P",{});var va=i(I);ni=r(va,"For more details specific to loading other dataset modalities, take a look at the "),Pa=o(va,"A",{class:!0,href:!0});var lf=i(Pa);ri=r(lf,"load audio dataset guide"),lf.forEach(a),ii=r(va,", the "),Aa=o(va,"A",{class:!0,href:!0});var of=i(Aa);pi=r(of,"load image dataset guide"),of.forEach(a),di=r(va,", or the "),Sa=o(va,"A",{class:!0,href:!0});var nf=i(Sa);ci=r(nf,"load text dataset guide"),nf.forEach(a),fi=r(va,"."),va.forEach(a),ho=c(t),zs=o(t,"A",{id:!0}),i(zs).forEach(a),mo=c(t),ot=o(t,"H2",{class:!0});var br=i(ot);St=o(br,"A",{id:!0,class:!0,href:!0});var rf=i(St);Me=o(rf,"SPAN",{});var pf=i(Me);m(Da.$$.fragment,pf),pf.forEach(a),rf.forEach(a),ui=c(br),Ve=o(br,"SPAN",{});var df=i(Ve);hi=r(df,"Hugging Face Hub"),df.forEach(a),br.forEach(a),_o=c(t),W=o(t,"P",{});var Te=i(W);mi=r(Te,"Datasets are loaded from a dataset loading script that downloads and generates the dataset. However, you can also load a dataset from any dataset repository on the Hub without a loading script! Begin by "),Js=o(Te,"A",{href:!0});var cf=i(Js);_i=r(cf,"creating a dataset repository"),cf.forEach(a),gi=r(Te," and upload your data files. Now you can use the "),Us=o(Te,"A",{href:!0});var ff=i(Us);vi=r(ff,"load_dataset()"),ff.forEach(a),$i=r(Te," function to load the dataset."),Te.forEach(a),go=c(t),Dt=o(t,"P",{});var qr=i(Dt);yi=r(qr,"For example, try loading the files from this "),Ta=o(qr,"A",{href:!0,rel:!0});var uf=i(Ta);wi=r(uf,"demo repository"),uf.forEach(a),ji=r(qr," by providing the repository namespace and dataset name. This dataset repository contains CSV files, and the code below loads the dataset from the CSV files:"),qr.forEach(a),vo=c(t),m(Na.$$.fragment,t),$o=c(t),Tt=o(t,"P",{});var kr=i(Tt);bi=r(kr,"Some datasets may have more than one version based on Git tags, branches, or commits. Use the "),ze=o(kr,"CODE",{});var hf=i(ze);qi=r(hf,"revision"),hf.forEach(a),ki=r(kr," parameter to specify the dataset version you want to load:"),kr.forEach(a),yo=c(t),m(Ia.$$.fragment,t),wo=c(t),m(Nt.$$.fragment,t),jo=c(t),T=o(t,"P",{});var R=i(T);Ei=r(R,"A dataset without a loading script by default loads all the data into the "),Je=o(R,"CODE",{});var mf=i(Je);xi=r(mf,"train"),mf.forEach(a),Pi=r(R," split. Use the "),Ue=o(R,"CODE",{});var _f=i(Ue);Ai=r(_f,"data_files"),_f.forEach(a),Si=r(R," parameter to map data files to splits like "),Ye=o(R,"CODE",{});var gf=i(Ye);Di=r(gf,"train"),gf.forEach(a),Ti=r(R,", "),Be=o(R,"CODE",{});var vf=i(Be);Ni=r(vf,"validation"),vf.forEach(a),Ii=r(R," and "),We=o(R,"CODE",{});var $f=i(We);Ci=r($f,"test"),$f.forEach(a),Oi=r(R,":"),R.forEach(a),bo=c(t),m(Ca.$$.fragment,t),qo=c(t),m(It.$$.fragment,t),ko=c(t),G=o(t,"P",{});var Ne=i(G);Hi=r(Ne,"You can also load a specific subset of the files with the "),Ge=o(Ne,"CODE",{});var yf=i(Ge);Li=r(yf,"data_files"),yf.forEach(a),Fi=r(Ne," or "),Qe=o(Ne,"CODE",{});var wf=i(Qe);Ri=r(wf,"data_dir"),wf.forEach(a),Mi=r(Ne," parameter. These parameters can accept a relative path which resolves to the base path corresponding to where the dataset is loaded from."),Ne.forEach(a),Eo=c(t),m(Oa.$$.fragment,t),xo=c(t),Ct=o(t,"P",{});var Er=i(Ct);Vi=r(Er,"The "),Ke=o(Er,"CODE",{});var jf=i(Ke);zi=r(jf,"split"),jf.forEach(a),Ji=r(Er," parameter can also map a data file to a specific split:"),Er.forEach(a),Po=c(t),m(Ha.$$.fragment,t),Ao=c(t),nt=o(t,"H2",{class:!0});var xr=i(nt);Ot=o(xr,"A",{id:!0,class:!0,href:!0});var bf=i(Ot);Xe=o(bf,"SPAN",{});var qf=i(Xe);m(La.$$.fragment,qf),qf.forEach(a),bf.forEach(a),Ui=c(xr),Ze=o(xr,"SPAN",{});var kf=i(Ze);Yi=r(kf,"Local loading script"),kf.forEach(a),xr.forEach(a),So=c(t),Ht=o(t,"P",{});var Pr=i(Ht);Bi=r(Pr,"You may have a \u{1F917} Datasets loading script locally on your computer. In this case, load the dataset by passing one of the following paths to "),Ys=o(Pr,"A",{href:!0});var Ef=i(Ys);Wi=r(Ef,"load_dataset()"),Ef.forEach(a),Gi=r(Pr,":"),Pr.forEach(a),Do=c(t),Lt=o(t,"UL",{});var Ar=i(Lt);tl=o(Ar,"LI",{});var xf=i(tl);Qi=r(xf,"The local path to the loading script file."),xf.forEach(a),Ki=c(Ar),al=o(Ar,"LI",{});var Pf=i(al);Xi=r(Pf,"The local path to the directory containing the loading script file (only if the script file has the same name as the directory)."),Pf.forEach(a),Ar.forEach(a),To=c(t),m(Fa.$$.fragment,t),No=c(t),rt=o(t,"H3",{class:!0});var Sr=i(rt);Ft=o(Sr,"A",{id:!0,class:!0,href:!0});var Af=i(Ft);sl=o(Af,"SPAN",{});var Sf=i(sl);m(Ra.$$.fragment,Sf),Sf.forEach(a),Af.forEach(a),Zi=c(Sr),el=o(Sr,"SPAN",{});var Df=i(el);tp=r(Df,"Edit loading script"),Df.forEach(a),Sr.forEach(a),Io=c(t),Bs=o(t,"P",{});var Tf=i(Bs);ap=r(Tf,"You can also edit a loading script from the Hub to add your own modifications. Download the dataset repository locally so any data files referenced by a relative path in the loading script can be loaded:"),Tf.forEach(a),Co=c(t),m(Ma.$$.fragment,t),Oo=c(t),Rt=o(t,"P",{});var Dr=i(Rt);sp=r(Dr,"Make your edits to the loading script and then load it by passing its local path to "),Ws=o(Dr,"A",{href:!0});var Nf=i(Ws);ep=r(Nf,"load_dataset()"),Nf.forEach(a),lp=r(Dr,":"),Dr.forEach(a),Ho=c(t),m(Va.$$.fragment,t),Lo=c(t),it=o(t,"H2",{class:!0});var Tr=i(it);Mt=o(Tr,"A",{id:!0,class:!0,href:!0});var If=i(Mt);ll=o(If,"SPAN",{});var Cf=i(ll);m(za.$$.fragment,Cf),Cf.forEach(a),If.forEach(a),op=c(Tr),ol=o(Tr,"SPAN",{});var Of=i(ol);np=r(Of,"Local and remote files"),Of.forEach(a),Tr.forEach(a),Fo=c(t),N=o(t,"P",{});var M=i(N);rp=r(M,"Datasets can be loaded from local files stored on your computer and from remote files. The datasets are most likely stored as a "),nl=o(M,"CODE",{});var Hf=i(nl);ip=r(Hf,"csv"),Hf.forEach(a),pp=r(M,", "),rl=o(M,"CODE",{});var Lf=i(rl);dp=r(Lf,"json"),Lf.forEach(a),cp=r(M,", "),il=o(M,"CODE",{});var Ff=i(il);fp=r(Ff,"txt"),Ff.forEach(a),up=r(M," or "),pl=o(M,"CODE",{});var Rf=i(pl);hp=r(Rf,"parquet"),Rf.forEach(a),mp=r(M," file. The "),Gs=o(M,"A",{href:!0});var Mf=i(Gs);_p=r(Mf,"load_dataset()"),Mf.forEach(a),gp=r(M," function can load each of these file types."),M.forEach(a),Ro=c(t),pt=o(t,"H3",{class:!0});var Nr=i(pt);Vt=o(Nr,"A",{id:!0,class:!0,href:!0});var Vf=i(Vt);dl=o(Vf,"SPAN",{});var zf=i(dl);m(Ja.$$.fragment,zf),zf.forEach(a),Vf.forEach(a),vp=c(Nr),cl=o(Nr,"SPAN",{});var Jf=i(cl);$p=r(Jf,"CSV"),Jf.forEach(a),Nr.forEach(a),Mo=c(t),Qs=o(t,"P",{});var Uf=i(Qs);yp=r(Uf,"\u{1F917} Datasets can read a dataset made up of one or several CSV files:"),Uf.forEach(a),Vo=c(t),m(Ua.$$.fragment,t),zo=c(t),Ks=o(t,"P",{});var Yf=i(Ks);wp=r(Yf,"If you have more than one CSV file:"),Yf.forEach(a),Jo=c(t),m(Ya.$$.fragment,t),Uo=c(t),Xs=o(t,"P",{});var Bf=i(Xs);jp=r(Bf,"You can also map the training and test splits to specific CSV files:"),Bf.forEach(a),Yo=c(t),m(Ba.$$.fragment,t),Bo=c(t),Zs=o(t,"P",{});var Wf=i(Zs);bp=r(Wf,"To load remote CSV files via HTTP, pass the URLs instead:"),Wf.forEach(a),Wo=c(t),m(Wa.$$.fragment,t),Go=c(t),te=o(t,"P",{});var Gf=i(te);qp=r(Gf,"To load zipped CSV files:"),Gf.forEach(a),Qo=c(t),m(Ga.$$.fragment,t),Ko=c(t),dt=o(t,"H3",{class:!0});var Ir=i(dt);zt=o(Ir,"A",{id:!0,class:!0,href:!0});var Qf=i(zt);fl=o(Qf,"SPAN",{});var Kf=i(fl);m(Qa.$$.fragment,Kf),Kf.forEach(a),Qf.forEach(a),kp=c(Ir),ul=o(Ir,"SPAN",{});var Xf=i(ul);Ep=r(Xf,"JSON"),Xf.forEach(a),Ir.forEach(a),Xo=c(t),Jt=o(t,"P",{});var Cr=i(Jt);xp=r(Cr,"JSON files are loaded directly with "),ae=o(Cr,"A",{href:!0});var Zf=i(ae);Pp=r(Zf,"load_dataset()"),Zf.forEach(a),Ap=r(Cr," as shown below:"),Cr.forEach(a),Zo=c(t),m(Ka.$$.fragment,t),tn=c(t),se=o(t,"P",{});var tu=i(se);Sp=r(tu,"JSON files have diverse formats, but we think the most efficient format is to have multiple JSON objects; each line represents an individual row of data. For example:"),tu.forEach(a),an=c(t),m(Xa.$$.fragment,t),sn=c(t),Ut=o(t,"P",{});var Or=i(Ut);Dp=r(Or,"Another JSON format you may encounter is a nested field, in which case you\u2019ll need to specify the "),hl=o(Or,"CODE",{});var au=i(hl);Tp=r(au,"field"),au.forEach(a),Np=r(Or," argument as shown in the following:"),Or.forEach(a),en=c(t),m(Za.$$.fragment,t),ln=c(t),ee=o(t,"P",{});var su=i(ee);Ip=r(su,"To load remote JSON files via HTTP, pass the URLs instead:"),su.forEach(a),on=c(t),m(ts.$$.fragment,t),nn=c(t),le=o(t,"P",{});var eu=i(le);Cp=r(eu,"While these are the most common JSON formats, you\u2019ll see other datasets that are formatted differently. \u{1F917} Datasets recognizes these other formats and will fallback accordingly on the Python JSON loading methods to handle them."),eu.forEach(a),rn=c(t),ct=o(t,"H3",{class:!0});var Hr=i(ct);Yt=o(Hr,"A",{id:!0,class:!0,href:!0});var lu=i(Yt);ml=o(lu,"SPAN",{});var ou=i(ml);m(as.$$.fragment,ou),ou.forEach(a),lu.forEach(a),Op=c(Hr),_l=o(Hr,"SPAN",{});var nu=i(_l);Hp=r(nu,"Parquet"),nu.forEach(a),Hr.forEach(a),pn=c(t),oe=o(t,"P",{});var ru=i(oe);Lp=r(ru,"Parquet files are stored in a columnar format, unlike row-based files like a CSV. Large datasets may be stored in a Parquet file because it is more efficient and faster at returning your query."),ru.forEach(a),dn=c(t),ne=o(t,"P",{});var iu=i(ne);Fp=r(iu,"To load a Parquet file:"),iu.forEach(a),cn=c(t),m(ss.$$.fragment,t),fn=c(t),re=o(t,"P",{});var pu=i(re);Rp=r(pu,"To load remote Parquet files via HTTP, pass the URLs instead:"),pu.forEach(a),un=c(t),m(es.$$.fragment,t),hn=c(t),ft=o(t,"H2",{class:!0});var Lr=i(ft);Bt=o(Lr,"A",{id:!0,class:!0,href:!0});var du=i(Bt);gl=o(du,"SPAN",{});var cu=i(gl);m(ls.$$.fragment,cu),cu.forEach(a),du.forEach(a),Mp=c(Lr),vl=o(Lr,"SPAN",{});var fu=i(vl);Vp=r(fu,"In-memory data"),fu.forEach(a),Lr.forEach(a),mn=c(t),Wt=o(t,"P",{});var Fr=i(Wt);zp=r(Fr,"\u{1F917} Datasets will also allow you to create a "),ie=o(Fr,"A",{href:!0});var uu=i(ie);Jp=r(uu,"Dataset"),uu.forEach(a),Up=r(Fr," directly from in-memory data structures like Python dictionaries and Pandas DataFrames."),Fr.forEach(a),_n=c(t),ut=o(t,"H3",{class:!0});var Rr=i(ut);Gt=o(Rr,"A",{id:!0,class:!0,href:!0});var hu=i(Gt);$l=o(hu,"SPAN",{});var mu=i($l);m(os.$$.fragment,mu),mu.forEach(a),hu.forEach(a),Yp=c(Rr),yl=o(Rr,"SPAN",{});var _u=i(yl);Bp=r(_u,"Python dictionary"),_u.forEach(a),Rr.forEach(a),gn=c(t),Qt=o(t,"P",{});var Mr=i(Qt);Wp=r(Mr,"Load Python dictionaries with "),pe=o(Mr,"A",{href:!0});var gu=i(pe);Gp=r(gu,"from_dict()"),gu.forEach(a),Qp=r(Mr,":"),Mr.forEach(a),vn=c(t),m(ns.$$.fragment,t),$n=c(t),ht=o(t,"H3",{class:!0});var Vr=i(ht);Kt=o(Vr,"A",{id:!0,class:!0,href:!0});var vu=i(Kt);wl=o(vu,"SPAN",{});var $u=i(wl);m(rs.$$.fragment,$u),$u.forEach(a),vu.forEach(a),Kp=c(Vr),jl=o(Vr,"SPAN",{});var yu=i(jl);Xp=r(yu,"Pandas DataFrame"),yu.forEach(a),Vr.forEach(a),yn=c(t),Xt=o(t,"P",{});var zr=i(Xt);Zp=r(zr,"Load Pandas DataFrames with "),de=o(zr,"A",{href:!0});var wu=i(de);td=r(wu,"from_pandas()"),wu.forEach(a),ad=r(zr,":"),zr.forEach(a),wn=c(t),m(is.$$.fragment,t),jn=c(t),m(Zt.$$.fragment,t),bn=c(t),mt=o(t,"H2",{class:!0});var Jr=i(mt);ta=o(Jr,"A",{id:!0,class:!0,href:!0});var ju=i(ta);bl=o(ju,"SPAN",{});var bu=i(bl);m(ps.$$.fragment,bu),bu.forEach(a),ju.forEach(a),sd=c(Jr),ql=o(Jr,"SPAN",{});var qu=i(ql);ed=r(qu,"Offline"),qu.forEach(a),Jr.forEach(a),qn=c(t),ce=o(t,"P",{});var ku=i(ce);ld=r(ku,"Even if you don\u2019t have an internet connection, it is still possible to load a dataset. As long as you\u2019ve downloaded a dataset from the Hub or \u{1F917} Datasets GitHub repository before, it should be cached. This means you can reload the dataset from the cache and use it offline."),ku.forEach(a),kn=c(t),Q=o(t,"P",{});var Ie=i(Q);od=r(Ie,"If you know you won\u2019t have internet access, you can run \u{1F917} Datasets in full offline mode. This saves time because instead of waiting for the Dataset builder download to time out, \u{1F917} Datasets will look directly in the cache. Set the environment variable "),kl=o(Ie,"CODE",{});var Eu=i(kl);nd=r(Eu,"HF_DATASETS_OFFLINE"),Eu.forEach(a),rd=r(Ie," to "),El=o(Ie,"CODE",{});var xu=i(El);id=r(xu,"1"),xu.forEach(a),pd=r(Ie," to enable full offline mode."),Ie.forEach(a),En=c(t),_t=o(t,"H2",{class:!0});var Ur=i(_t);aa=o(Ur,"A",{id:!0,class:!0,href:!0});var Pu=i(aa);xl=o(Pu,"SPAN",{});var Au=i(xl);m(ds.$$.fragment,Au),Au.forEach(a),Pu.forEach(a),dd=c(Ur),Pl=o(Ur,"SPAN",{});var Su=i(Pl);cd=r(Su,"Slice splits"),Su.forEach(a),Ur.forEach(a),xn=c(t),K=o(t,"P",{});var Ce=i(K);fd=r(Ce,"You can also choose only to load specific slices of a split. There are two options for slicing a split: using strings or the "),fe=o(Ce,"A",{href:!0});var Du=i(fe);ud=r(Du,"ReadInstruction"),Du.forEach(a),hd=r(Ce," API. Strings are more compact and readable for simple cases, while "),ue=o(Ce,"A",{href:!0});var Tu=i(ue);md=r(Tu,"ReadInstruction"),Tu.forEach(a),_d=r(Ce," is easier to use with variable slicing parameters."),Ce.forEach(a),Pn=c(t),X=o(t,"P",{});var Oe=i(X);gd=r(Oe,"Concatenate a "),Al=o(Oe,"CODE",{});var Nu=i(Al);vd=r(Nu,"train"),Nu.forEach(a),$d=r(Oe," and "),Sl=o(Oe,"CODE",{});var Iu=i(Sl);yd=r(Iu,"test"),Iu.forEach(a),wd=r(Oe," split by:"),Oe.forEach(a),An=c(t),m(cs.$$.fragment,t),Sn=c(t),sa=o(t,"P",{});var Yr=i(sa);jd=r(Yr,"Select specific rows of the "),Dl=o(Yr,"CODE",{});var Cu=i(Dl);bd=r(Cu,"train"),Cu.forEach(a),qd=r(Yr," split:"),Yr.forEach(a),Dn=c(t),m(fs.$$.fragment,t),Tn=c(t),he=o(t,"P",{});var Ou=i(he);kd=r(Ou,"Or select a percentage of a split with:"),Ou.forEach(a),Nn=c(t),m(us.$$.fragment,t),In=c(t),me=o(t,"P",{});var Hu=i(me);Ed=r(Hu,"Select a combination of percentages from each split:"),Hu.forEach(a),Cn=c(t),m(hs.$$.fragment,t),On=c(t),_e=o(t,"P",{});var Lu=i(_e);xd=r(Lu,"Finally, you can even create cross-validated splits. The example below creates 10-fold cross-validated splits. Each validation dataset is a 10% chunk, and the training dataset makes up the remaining complementary 90% chunk:"),Lu.forEach(a),Hn=c(t),m(ms.$$.fragment,t),Ln=c(t),gt=o(t,"H3",{class:!0});var Br=i(gt);ea=o(Br,"A",{id:!0,class:!0,href:!0});var Fu=i(ea);Tl=o(Fu,"SPAN",{});var Ru=i(Tl);m(_s.$$.fragment,Ru),Ru.forEach(a),Fu.forEach(a),Pd=c(Br),Nl=o(Br,"SPAN",{});var Mu=i(Nl);Ad=r(Mu,"Percent slicing and rounding"),Mu.forEach(a),Br.forEach(a),Fn=c(t),ge=o(t,"P",{});var Vu=i(ge);Sd=r(Vu,"The default behavior is to round the boundaries to the nearest integer for datasets where the requested slice boundaries do not divide evenly by 100. As shown below, some slices may contain more examples than others. For instance, if the following train split includes 999 records, then:"),Vu.forEach(a),Rn=c(t),m(gs.$$.fragment,t),Mn=c(t),la=o(t,"P",{});var Wr=i(la);Dd=r(Wr,"If you want equal sized splits, use "),Il=o(Wr,"CODE",{});var zu=i(Il);Td=r(zu,"pct1_dropremainder"),zu.forEach(a),Nd=r(Wr," rounding instead. This treats the specified percentage boundaries as multiples of 1%."),Wr.forEach(a),Vn=c(t),m(vs.$$.fragment,t),zn=c(t),m(oa.$$.fragment,t),Jn=c(t),ve=o(t,"A",{id:!0}),i(ve).forEach(a),Un=c(t),vt=o(t,"H2",{class:!0});var Gr=i(vt);na=o(Gr,"A",{id:!0,class:!0,href:!0});var Ju=i(na);Cl=o(Ju,"SPAN",{});var Uu=i(Cl);m($s.$$.fragment,Uu),Uu.forEach(a),Ju.forEach(a),Id=c(Gr),Ol=o(Gr,"SPAN",{});var Yu=i(Ol);Cd=r(Yu,"Troubleshooting"),Yu.forEach(a),Gr.forEach(a),Yn=c(t),$e=o(t,"P",{});var Bu=i($e);Od=r(Bu,"Sometimes, you may get unexpected results when you load a dataset. Two of the most common issues you may encounter are manually downloading a dataset and specifying features of a dataset."),Bu.forEach(a),Bn=c(t),$t=o(t,"H3",{class:!0});var Qr=i($t);ra=o(Qr,"A",{id:!0,class:!0,href:!0});var Wu=i(ra);Hl=o(Wu,"SPAN",{});var Gu=i(Hl);m(ys.$$.fragment,Gu),Gu.forEach(a),Wu.forEach(a),Hd=c(Qr),Ll=o(Qr,"SPAN",{});var Qu=i(Ll);Ld=r(Qu,"Manual download"),Qu.forEach(a),Qr.forEach(a),Wn=c(t),L=o(t,"P",{});var $a=i(L);Fd=r($a,"Certain datasets require you to manually download the dataset files due to licensing incompatibility or if the files are hidden behind a login page. This causes "),ye=o($a,"A",{href:!0});var Ku=i(ye);Rd=r(Ku,"load_dataset()"),Ku.forEach(a),Md=r($a," to throw an "),Fl=o($a,"CODE",{});var Xu=i(Fl);Vd=r(Xu,"AssertionError"),Xu.forEach(a),zd=r($a,". But \u{1F917} Datasets provides detailed instructions for downloading the missing files. After you\u2019ve downloaded the files, use the "),Rl=o($a,"CODE",{});var Zu=i(Rl);Jd=r(Zu,"data_dir"),Zu.forEach(a),Ud=r($a," argument to specify the path to the files you just downloaded."),$a.forEach(a),Gn=c(t),ia=o(t,"P",{});var Kr=i(ia);Yd=r(Kr,"For example, if you try to download a configuration from the "),ws=o(Kr,"A",{href:!0,rel:!0});var th=i(ws);Bd=r(th,"MATINF"),th.forEach(a),Wd=r(Kr," dataset:"),Kr.forEach(a),Qn=c(t),m(js.$$.fragment,t),Kn=c(t),O=o(t,"P",{});var st=i(O);Gd=r(st,"If you\u2019ve already downloaded a dataset from the "),Ml=o(st,"EM",{});var ah=i(Ml);Qd=r(ah,"Hub with a loading script"),ah.forEach(a),Kd=r(st," to your computer, then you need to pass an absolute path to the "),Vl=o(st,"CODE",{});var sh=i(Vl);Xd=r(sh,"data_dir"),sh.forEach(a),Zd=r(st," or "),zl=o(st,"CODE",{});var eh=i(zl);tc=r(eh,"data_files"),eh.forEach(a),ac=r(st," parameter to load that dataset. Otherwise, if you pass a relative path, "),we=o(st,"A",{href:!0});var lh=i(we);sc=r(lh,"load_dataset()"),lh.forEach(a),ec=r(st," will load the directory from the repository on the Hub instead of the local directory."),st.forEach(a),Xn=c(t),yt=o(t,"H3",{class:!0});var Xr=i(yt);pa=o(Xr,"A",{id:!0,class:!0,href:!0});var oh=i(pa);Jl=o(oh,"SPAN",{});var nh=i(Jl);m(bs.$$.fragment,nh),nh.forEach(a),oh.forEach(a),lc=c(Xr),Ul=o(Xr,"SPAN",{});var rh=i(Ul);oc=r(rh,"Specify features"),rh.forEach(a),Xr.forEach(a),Zn=c(t),F=o(t,"P",{});var ya=i(F);nc=r(ya,"When you create a dataset from local files, the "),je=o(ya,"A",{href:!0});var ih=i(je);rc=r(ih,"Features"),ih.forEach(a),ic=r(ya," are automatically inferred by "),qs=o(ya,"A",{href:!0,rel:!0});var ph=i(qs);pc=r(ph,"Apache Arrow"),ph.forEach(a),dc=r(ya,". However, the dataset\u2019s features may not always align with your expectations, or you may want to define the features yourself. The following example shows how you can add custom labels with the "),be=o(ya,"A",{href:!0});var dh=i(be);cc=r(dh,"ClassLabel"),dh.forEach(a),fc=r(ya," feature."),ya.forEach(a),tr=c(t),da=o(t,"P",{});var Zr=i(da);uc=r(Zr,"Start by defining your own labels with the "),qe=o(Zr,"A",{href:!0});var ch=i(qe);hc=r(ch,"Features"),ch.forEach(a),mc=r(Zr," class:"),Zr.forEach(a),ar=c(t),m(ks.$$.fragment,t),sr=c(t),Z=o(t,"P",{});var He=i(Z);_c=r(He,"Next, specify the "),Yl=o(He,"CODE",{});var fh=i(Yl);gc=r(fh,"features"),fh.forEach(a),vc=r(He," parameter in "),ke=o(He,"A",{href:!0});var uh=i(ke);$c=r(uh,"load_dataset()"),uh.forEach(a),yc=r(He," with the features you just created:"),He.forEach(a),er=c(t),m(Es.$$.fragment,t),lr=c(t),Ee=o(t,"P",{});var hh=i(Ee);wc=r(hh,"Now when you look at your dataset features, you can see it uses the custom labels you defined:"),hh.forEach(a),or=c(t),m(xs.$$.fragment,t),nr=c(t),wt=o(t,"H2",{class:!0});var ti=i(wt);ca=o(ti,"A",{id:!0,class:!0,href:!0});var mh=i(ca);Bl=o(mh,"SPAN",{});var _h=i(Bl);m(Ps.$$.fragment,_h),_h.forEach(a),mh.forEach(a),jc=c(ti),Wl=o(ti,"SPAN",{});var gh=i(Wl);bc=r(gh,"Metrics"),gh.forEach(a),ti.forEach(a),rr=c(t),m(fa.$$.fragment,t),ir=c(t),xe=o(t,"P",{});var vh=i(xe);qc=r(vh,"When the metric you want to use is not supported by \u{1F917} Datasets, you can write and use your own metric script. Load your metric by providing the path to your local metric loading script:"),vh.forEach(a),pr=c(t),m(As.$$.fragment,t),dr=c(t),m(ua.$$.fragment,t),cr=c(t),jt=o(t,"H3",{class:!0});var ai=i(jt);ha=o(ai,"A",{id:!0,class:!0,href:!0});var $h=i(ha);Gl=o($h,"SPAN",{});var yh=i(Gl);m(Ss.$$.fragment,yh),yh.forEach(a),$h.forEach(a),kc=c(ai),Ql=o(ai,"SPAN",{});var wh=i(Ql);Ec=r(wh,"Load configurations"),wh.forEach(a),ai.forEach(a),fr=c(t),tt=o(t,"P",{});var Le=i(tt);xc=r(Le,"It is possible for a metric to have different configurations. The configurations are stored in the "),Kl=o(Le,"CODE",{});var jh=i(Kl);Pc=r(jh,"config_name"),jh.forEach(a),Ac=r(Le," parameter in "),Pe=o(Le,"A",{href:!0});var bh=i(Pe);Sc=r(bh,"MetricInfo"),bh.forEach(a),Dc=r(Le," attribute. When you load a metric, provide the configuration name as shown in the following:"),Le.forEach(a),ur=c(t),m(Ds.$$.fragment,t),hr=c(t),bt=o(t,"H3",{class:!0});var si=i(bt);ma=o(si,"A",{id:!0,class:!0,href:!0});var qh=i(ma);Xl=o(qh,"SPAN",{});var kh=i(Xl);m(Ts.$$.fragment,kh),kh.forEach(a),qh.forEach(a),Tc=c(si),Zl=o(si,"SPAN",{});var Eh=i(Zl);Nc=r(Eh,"Distributed setup"),Eh.forEach(a),si.forEach(a),mr=c(t),Ae=o(t,"P",{});var xh=i(Ae);Ic=r(xh,"When working in a distributed or parallel processing environment, loading and computing a metric can be tricky because these processes are executed in parallel on separate subsets of the data. \u{1F917} Datasets supports distributed usage with a few additional arguments when you load a metric."),xh.forEach(a),_r=c(t),Se=o(t,"P",{});var Ph=i(Se);Cc=r(Ph,"For example, imagine you are training and evaluating on eight parallel processes. Here\u2019s how you would load a metric in this distributed setting:"),Ph.forEach(a),gr=c(t),at=o(t,"OL",{});var Fe=i(at);to=o(Fe,"LI",{});var Ah=i(to);Ns=o(Ah,"P",{});var ei=i(Ns);Oc=r(ei,"Define the total number of processes with the "),ao=o(ei,"CODE",{});var Sh=i(ao);Hc=r(Sh,"num_process"),Sh.forEach(a),Lc=r(ei," argument."),ei.forEach(a),Ah.forEach(a),Fc=c(Fe),so=o(Fe,"LI",{});var Dh=i(so);qt=o(Dh,"P",{});var Re=i(qt);Rc=r(Re,"Set the process "),eo=o(Re,"CODE",{});var Th=i(eo);Mc=r(Th,"rank"),Th.forEach(a),Vc=r(Re," as an integer between zero and "),lo=o(Re,"CODE",{});var Nh=i(lo);zc=r(Nh,"num_process - 1"),Nh.forEach(a),Jc=r(Re,"."),Re.forEach(a),Dh.forEach(a),Uc=c(Fe),oo=o(Fe,"LI",{});var Ih=i(oo);Is=o(Ih,"P",{});var li=i(Is);Yc=r(li,"Load your metric with "),De=o(li,"A",{href:!0});var Ch=i(De);Bc=r(Ch,"load_metric()"),Ch.forEach(a),Wc=r(li," with these arguments:"),li.forEach(a),Ih.forEach(a),Fe.forEach(a),vr=c(t),m(Cs.$$.fragment,t),$r=c(t),m(_a.$$.fragment,t),yr=c(t),ga=o(t,"P",{});var oi=i(ga);Gc=r(oi,"In some instances, you may be simultaneously running multiple independent distributed evaluations on the same server and files. To avoid any conflicts, it is important to provide an "),no=o(oi,"CODE",{});var Oh=i(no);Qc=r(Oh,"experiment_id"),Oh.forEach(a),Kc=r(oi," to distinguish the separate evaluations:"),oi.forEach(a),wr=c(t),m(Os.$$.fragment,t),this.h()},h(){f(u,"name","hf:doc:metadata"),f(u,"content",JSON.stringify(Qh)),f(b,"id","load"),f(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(b,"href","#load"),f(y,"class","relative group"),f(Pa,"class","underline decoration-pink-400 decoration-2 font-semibold"),f(Pa,"href","./audio_load"),f(Aa,"class","underline decoration-yellow-400 decoration-2 font-semibold"),f(Aa,"href","./image_load"),f(Sa,"class","underline decoration-green-400 decoration-2 font-semibold"),f(Sa,"href","./nlp_load"),f(zs,"id","load-from-the-hub"),f(St,"id","hugging-face-hub"),f(St,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(St,"href","#hugging-face-hub"),f(ot,"class","relative group"),f(Js,"href","share#create-the-repository"),f(Us,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),f(Ta,"href","https://huggingface.co/datasets/lhoestq/demo1"),f(Ta,"rel","nofollow"),f(Ot,"id","local-loading-script"),f(Ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ot,"href","#local-loading-script"),f(nt,"class","relative group"),f(Ys,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),f(Ft,"id","edit-loading-script"),f(Ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Ft,"href","#edit-loading-script"),f(rt,"class","relative group"),f(Ws,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),f(Mt,"id","local-and-remote-files"),f(Mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Mt,"href","#local-and-remote-files"),f(it,"class","relative group"),f(Gs,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),f(Vt,"id","csv"),f(Vt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Vt,"href","#csv"),f(pt,"class","relative group"),f(zt,"id","json"),f(zt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(zt,"href","#json"),f(dt,"class","relative group"),f(ae,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),f(Yt,"id","parquet"),f(Yt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Yt,"href","#parquet"),f(ct,"class","relative group"),f(Bt,"id","inmemory-data"),f(Bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Bt,"href","#inmemory-data"),f(ft,"class","relative group"),f(ie,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset"),f(Gt,"id","python-dictionary"),f(Gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Gt,"href","#python-dictionary"),f(ut,"class","relative group"),f(pe,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_dict"),f(Kt,"id","pandas-dataframe"),f(Kt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Kt,"href","#pandas-dataframe"),f(ht,"class","relative group"),f(de,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.from_pandas"),f(ta,"id","offline"),f(ta,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ta,"href","#offline"),f(mt,"class","relative group"),f(aa,"id","slice-splits"),f(aa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(aa,"href","#slice-splits"),f(_t,"class","relative group"),f(fe,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.ReadInstruction"),f(ue,"href","/docs/datasets/main/en/package_reference/builder_classes#datasets.ReadInstruction"),f(ea,"id","percent-slicing-and-rounding"),f(ea,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ea,"href","#percent-slicing-and-rounding"),f(gt,"class","relative group"),f(ve,"id","troubleshoot"),f(na,"id","troubleshooting"),f(na,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(na,"href","#troubleshooting"),f(vt,"class","relative group"),f(ra,"id","manual-download"),f(ra,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ra,"href","#manual-download"),f($t,"class","relative group"),f(ye,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),f(ws,"href","https://huggingface.co/datasets/matinf"),f(ws,"rel","nofollow"),f(we,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),f(pa,"id","specify-features"),f(pa,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(pa,"href","#specify-features"),f(yt,"class","relative group"),f(je,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),f(qs,"href","https://arrow.apache.org/docs/"),f(qs,"rel","nofollow"),f(be,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.ClassLabel"),f(qe,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.Features"),f(ke,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_dataset"),f(ca,"id","metrics"),f(ca,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ca,"href","#metrics"),f(wt,"class","relative group"),f(ha,"id","load-configurations"),f(ha,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ha,"href","#load-configurations"),f(jt,"class","relative group"),f(Pe,"href","/docs/datasets/main/en/package_reference/main_classes#datasets.MetricInfo"),f(ma,"id","distributed-setup"),f(ma,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ma,"href","#distributed-setup"),f(bt,"class","relative group"),f(De,"href","/docs/datasets/main/en/package_reference/loading_methods#datasets.load_metric")},m(t,e){s(document.head,u),p(t,k,e),p(t,y,e),s(y,b),s(b,q),_(w,q,null),s(y,j),s(y,x),s(x,et),p(t,kt,e),p(t,U,e),s(U,lt),p(t,Et,e),p(t,Y,e),s(Y,B),p(t,xt,e),p(t,A,e),s(A,V),s(V,wa),s(A,ja),s(A,z),s(z,ba),s(A,qa),s(A,H),s(H,ka),s(A,Ea),s(A,J),s(J,P),s(A,Fs),s(A,Pt),s(Pt,Rs),s(A,Ms),s(A,At),s(At,Vs),p(t,xa,e),p(t,I,e),s(I,ni),s(I,Pa),s(Pa,ri),s(I,ii),s(I,Aa),s(Aa,pi),s(I,di),s(I,Sa),s(Sa,ci),s(I,fi),p(t,ho,e),p(t,zs,e),p(t,mo,e),p(t,ot,e),s(ot,St),s(St,Me),_(Da,Me,null),s(ot,ui),s(ot,Ve),s(Ve,hi),p(t,_o,e),p(t,W,e),s(W,mi),s(W,Js),s(Js,_i),s(W,gi),s(W,Us),s(Us,vi),s(W,$i),p(t,go,e),p(t,Dt,e),s(Dt,yi),s(Dt,Ta),s(Ta,wi),s(Dt,ji),p(t,vo,e),_(Na,t,e),p(t,$o,e),p(t,Tt,e),s(Tt,bi),s(Tt,ze),s(ze,qi),s(Tt,ki),p(t,yo,e),_(Ia,t,e),p(t,wo,e),_(Nt,t,e),p(t,jo,e),p(t,T,e),s(T,Ei),s(T,Je),s(Je,xi),s(T,Pi),s(T,Ue),s(Ue,Ai),s(T,Si),s(T,Ye),s(Ye,Di),s(T,Ti),s(T,Be),s(Be,Ni),s(T,Ii),s(T,We),s(We,Ci),s(T,Oi),p(t,bo,e),_(Ca,t,e),p(t,qo,e),_(It,t,e),p(t,ko,e),p(t,G,e),s(G,Hi),s(G,Ge),s(Ge,Li),s(G,Fi),s(G,Qe),s(Qe,Ri),s(G,Mi),p(t,Eo,e),_(Oa,t,e),p(t,xo,e),p(t,Ct,e),s(Ct,Vi),s(Ct,Ke),s(Ke,zi),s(Ct,Ji),p(t,Po,e),_(Ha,t,e),p(t,Ao,e),p(t,nt,e),s(nt,Ot),s(Ot,Xe),_(La,Xe,null),s(nt,Ui),s(nt,Ze),s(Ze,Yi),p(t,So,e),p(t,Ht,e),s(Ht,Bi),s(Ht,Ys),s(Ys,Wi),s(Ht,Gi),p(t,Do,e),p(t,Lt,e),s(Lt,tl),s(tl,Qi),s(Lt,Ki),s(Lt,al),s(al,Xi),p(t,To,e),_(Fa,t,e),p(t,No,e),p(t,rt,e),s(rt,Ft),s(Ft,sl),_(Ra,sl,null),s(rt,Zi),s(rt,el),s(el,tp),p(t,Io,e),p(t,Bs,e),s(Bs,ap),p(t,Co,e),_(Ma,t,e),p(t,Oo,e),p(t,Rt,e),s(Rt,sp),s(Rt,Ws),s(Ws,ep),s(Rt,lp),p(t,Ho,e),_(Va,t,e),p(t,Lo,e),p(t,it,e),s(it,Mt),s(Mt,ll),_(za,ll,null),s(it,op),s(it,ol),s(ol,np),p(t,Fo,e),p(t,N,e),s(N,rp),s(N,nl),s(nl,ip),s(N,pp),s(N,rl),s(rl,dp),s(N,cp),s(N,il),s(il,fp),s(N,up),s(N,pl),s(pl,hp),s(N,mp),s(N,Gs),s(Gs,_p),s(N,gp),p(t,Ro,e),p(t,pt,e),s(pt,Vt),s(Vt,dl),_(Ja,dl,null),s(pt,vp),s(pt,cl),s(cl,$p),p(t,Mo,e),p(t,Qs,e),s(Qs,yp),p(t,Vo,e),_(Ua,t,e),p(t,zo,e),p(t,Ks,e),s(Ks,wp),p(t,Jo,e),_(Ya,t,e),p(t,Uo,e),p(t,Xs,e),s(Xs,jp),p(t,Yo,e),_(Ba,t,e),p(t,Bo,e),p(t,Zs,e),s(Zs,bp),p(t,Wo,e),_(Wa,t,e),p(t,Go,e),p(t,te,e),s(te,qp),p(t,Qo,e),_(Ga,t,e),p(t,Ko,e),p(t,dt,e),s(dt,zt),s(zt,fl),_(Qa,fl,null),s(dt,kp),s(dt,ul),s(ul,Ep),p(t,Xo,e),p(t,Jt,e),s(Jt,xp),s(Jt,ae),s(ae,Pp),s(Jt,Ap),p(t,Zo,e),_(Ka,t,e),p(t,tn,e),p(t,se,e),s(se,Sp),p(t,an,e),_(Xa,t,e),p(t,sn,e),p(t,Ut,e),s(Ut,Dp),s(Ut,hl),s(hl,Tp),s(Ut,Np),p(t,en,e),_(Za,t,e),p(t,ln,e),p(t,ee,e),s(ee,Ip),p(t,on,e),_(ts,t,e),p(t,nn,e),p(t,le,e),s(le,Cp),p(t,rn,e),p(t,ct,e),s(ct,Yt),s(Yt,ml),_(as,ml,null),s(ct,Op),s(ct,_l),s(_l,Hp),p(t,pn,e),p(t,oe,e),s(oe,Lp),p(t,dn,e),p(t,ne,e),s(ne,Fp),p(t,cn,e),_(ss,t,e),p(t,fn,e),p(t,re,e),s(re,Rp),p(t,un,e),_(es,t,e),p(t,hn,e),p(t,ft,e),s(ft,Bt),s(Bt,gl),_(ls,gl,null),s(ft,Mp),s(ft,vl),s(vl,Vp),p(t,mn,e),p(t,Wt,e),s(Wt,zp),s(Wt,ie),s(ie,Jp),s(Wt,Up),p(t,_n,e),p(t,ut,e),s(ut,Gt),s(Gt,$l),_(os,$l,null),s(ut,Yp),s(ut,yl),s(yl,Bp),p(t,gn,e),p(t,Qt,e),s(Qt,Wp),s(Qt,pe),s(pe,Gp),s(Qt,Qp),p(t,vn,e),_(ns,t,e),p(t,$n,e),p(t,ht,e),s(ht,Kt),s(Kt,wl),_(rs,wl,null),s(ht,Kp),s(ht,jl),s(jl,Xp),p(t,yn,e),p(t,Xt,e),s(Xt,Zp),s(Xt,de),s(de,td),s(Xt,ad),p(t,wn,e),_(is,t,e),p(t,jn,e),_(Zt,t,e),p(t,bn,e),p(t,mt,e),s(mt,ta),s(ta,bl),_(ps,bl,null),s(mt,sd),s(mt,ql),s(ql,ed),p(t,qn,e),p(t,ce,e),s(ce,ld),p(t,kn,e),p(t,Q,e),s(Q,od),s(Q,kl),s(kl,nd),s(Q,rd),s(Q,El),s(El,id),s(Q,pd),p(t,En,e),p(t,_t,e),s(_t,aa),s(aa,xl),_(ds,xl,null),s(_t,dd),s(_t,Pl),s(Pl,cd),p(t,xn,e),p(t,K,e),s(K,fd),s(K,fe),s(fe,ud),s(K,hd),s(K,ue),s(ue,md),s(K,_d),p(t,Pn,e),p(t,X,e),s(X,gd),s(X,Al),s(Al,vd),s(X,$d),s(X,Sl),s(Sl,yd),s(X,wd),p(t,An,e),_(cs,t,e),p(t,Sn,e),p(t,sa,e),s(sa,jd),s(sa,Dl),s(Dl,bd),s(sa,qd),p(t,Dn,e),_(fs,t,e),p(t,Tn,e),p(t,he,e),s(he,kd),p(t,Nn,e),_(us,t,e),p(t,In,e),p(t,me,e),s(me,Ed),p(t,Cn,e),_(hs,t,e),p(t,On,e),p(t,_e,e),s(_e,xd),p(t,Hn,e),_(ms,t,e),p(t,Ln,e),p(t,gt,e),s(gt,ea),s(ea,Tl),_(_s,Tl,null),s(gt,Pd),s(gt,Nl),s(Nl,Ad),p(t,Fn,e),p(t,ge,e),s(ge,Sd),p(t,Rn,e),_(gs,t,e),p(t,Mn,e),p(t,la,e),s(la,Dd),s(la,Il),s(Il,Td),s(la,Nd),p(t,Vn,e),_(vs,t,e),p(t,zn,e),_(oa,t,e),p(t,Jn,e),p(t,ve,e),p(t,Un,e),p(t,vt,e),s(vt,na),s(na,Cl),_($s,Cl,null),s(vt,Id),s(vt,Ol),s(Ol,Cd),p(t,Yn,e),p(t,$e,e),s($e,Od),p(t,Bn,e),p(t,$t,e),s($t,ra),s(ra,Hl),_(ys,Hl,null),s($t,Hd),s($t,Ll),s(Ll,Ld),p(t,Wn,e),p(t,L,e),s(L,Fd),s(L,ye),s(ye,Rd),s(L,Md),s(L,Fl),s(Fl,Vd),s(L,zd),s(L,Rl),s(Rl,Jd),s(L,Ud),p(t,Gn,e),p(t,ia,e),s(ia,Yd),s(ia,ws),s(ws,Bd),s(ia,Wd),p(t,Qn,e),_(js,t,e),p(t,Kn,e),p(t,O,e),s(O,Gd),s(O,Ml),s(Ml,Qd),s(O,Kd),s(O,Vl),s(Vl,Xd),s(O,Zd),s(O,zl),s(zl,tc),s(O,ac),s(O,we),s(we,sc),s(O,ec),p(t,Xn,e),p(t,yt,e),s(yt,pa),s(pa,Jl),_(bs,Jl,null),s(yt,lc),s(yt,Ul),s(Ul,oc),p(t,Zn,e),p(t,F,e),s(F,nc),s(F,je),s(je,rc),s(F,ic),s(F,qs),s(qs,pc),s(F,dc),s(F,be),s(be,cc),s(F,fc),p(t,tr,e),p(t,da,e),s(da,uc),s(da,qe),s(qe,hc),s(da,mc),p(t,ar,e),_(ks,t,e),p(t,sr,e),p(t,Z,e),s(Z,_c),s(Z,Yl),s(Yl,gc),s(Z,vc),s(Z,ke),s(ke,$c),s(Z,yc),p(t,er,e),_(Es,t,e),p(t,lr,e),p(t,Ee,e),s(Ee,wc),p(t,or,e),_(xs,t,e),p(t,nr,e),p(t,wt,e),s(wt,ca),s(ca,Bl),_(Ps,Bl,null),s(wt,jc),s(wt,Wl),s(Wl,bc),p(t,rr,e),_(fa,t,e),p(t,ir,e),p(t,xe,e),s(xe,qc),p(t,pr,e),_(As,t,e),p(t,dr,e),_(ua,t,e),p(t,cr,e),p(t,jt,e),s(jt,ha),s(ha,Gl),_(Ss,Gl,null),s(jt,kc),s(jt,Ql),s(Ql,Ec),p(t,fr,e),p(t,tt,e),s(tt,xc),s(tt,Kl),s(Kl,Pc),s(tt,Ac),s(tt,Pe),s(Pe,Sc),s(tt,Dc),p(t,ur,e),_(Ds,t,e),p(t,hr,e),p(t,bt,e),s(bt,ma),s(ma,Xl),_(Ts,Xl,null),s(bt,Tc),s(bt,Zl),s(Zl,Nc),p(t,mr,e),p(t,Ae,e),s(Ae,Ic),p(t,_r,e),p(t,Se,e),s(Se,Cc),p(t,gr,e),p(t,at,e),s(at,to),s(to,Ns),s(Ns,Oc),s(Ns,ao),s(ao,Hc),s(Ns,Lc),s(at,Fc),s(at,so),s(so,qt),s(qt,Rc),s(qt,eo),s(eo,Mc),s(qt,Vc),s(qt,lo),s(lo,zc),s(qt,Jc),s(at,Uc),s(at,oo),s(oo,Is),s(Is,Yc),s(Is,De),s(De,Bc),s(Is,Wc),p(t,vr,e),_(Cs,t,e),p(t,$r,e),_(_a,t,e),p(t,yr,e),p(t,ga,e),s(ga,Gc),s(ga,no),s(no,Qc),s(ga,Kc),p(t,wr,e),_(Os,t,e),jr=!0},p(t,[e]){const Hs={};e&2&&(Hs.$$scope={dirty:e,ctx:t}),Nt.$set(Hs);const ro={};e&2&&(ro.$$scope={dirty:e,ctx:t}),It.$set(ro);const io={};e&2&&(io.$$scope={dirty:e,ctx:t}),Zt.$set(io);const po={};e&2&&(po.$$scope={dirty:e,ctx:t}),oa.$set(po);const co={};e&2&&(co.$$scope={dirty:e,ctx:t}),fa.$set(co);const fo={};e&2&&(fo.$$scope={dirty:e,ctx:t}),ua.$set(fo);const C={};e&2&&(C.$$scope={dirty:e,ctx:t}),_a.$set(C)},i(t){jr||(g(w.$$.fragment,t),g(Da.$$.fragment,t),g(Na.$$.fragment,t),g(Ia.$$.fragment,t),g(Nt.$$.fragment,t),g(Ca.$$.fragment,t),g(It.$$.fragment,t),g(Oa.$$.fragment,t),g(Ha.$$.fragment,t),g(La.$$.fragment,t),g(Fa.$$.fragment,t),g(Ra.$$.fragment,t),g(Ma.$$.fragment,t),g(Va.$$.fragment,t),g(za.$$.fragment,t),g(Ja.$$.fragment,t),g(Ua.$$.fragment,t),g(Ya.$$.fragment,t),g(Ba.$$.fragment,t),g(Wa.$$.fragment,t),g(Ga.$$.fragment,t),g(Qa.$$.fragment,t),g(Ka.$$.fragment,t),g(Xa.$$.fragment,t),g(Za.$$.fragment,t),g(ts.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(es.$$.fragment,t),g(ls.$$.fragment,t),g(os.$$.fragment,t),g(ns.$$.fragment,t),g(rs.$$.fragment,t),g(is.$$.fragment,t),g(Zt.$$.fragment,t),g(ps.$$.fragment,t),g(ds.$$.fragment,t),g(cs.$$.fragment,t),g(fs.$$.fragment,t),g(us.$$.fragment,t),g(hs.$$.fragment,t),g(ms.$$.fragment,t),g(_s.$$.fragment,t),g(gs.$$.fragment,t),g(vs.$$.fragment,t),g(oa.$$.fragment,t),g($s.$$.fragment,t),g(ys.$$.fragment,t),g(js.$$.fragment,t),g(bs.$$.fragment,t),g(ks.$$.fragment,t),g(Es.$$.fragment,t),g(xs.$$.fragment,t),g(Ps.$$.fragment,t),g(fa.$$.fragment,t),g(As.$$.fragment,t),g(ua.$$.fragment,t),g(Ss.$$.fragment,t),g(Ds.$$.fragment,t),g(Ts.$$.fragment,t),g(Cs.$$.fragment,t),g(_a.$$.fragment,t),g(Os.$$.fragment,t),jr=!0)},o(t){v(w.$$.fragment,t),v(Da.$$.fragment,t),v(Na.$$.fragment,t),v(Ia.$$.fragment,t),v(Nt.$$.fragment,t),v(Ca.$$.fragment,t),v(It.$$.fragment,t),v(Oa.$$.fragment,t),v(Ha.$$.fragment,t),v(La.$$.fragment,t),v(Fa.$$.fragment,t),v(Ra.$$.fragment,t),v(Ma.$$.fragment,t),v(Va.$$.fragment,t),v(za.$$.fragment,t),v(Ja.$$.fragment,t),v(Ua.$$.fragment,t),v(Ya.$$.fragment,t),v(Ba.$$.fragment,t),v(Wa.$$.fragment,t),v(Ga.$$.fragment,t),v(Qa.$$.fragment,t),v(Ka.$$.fragment,t),v(Xa.$$.fragment,t),v(Za.$$.fragment,t),v(ts.$$.fragment,t),v(as.$$.fragment,t),v(ss.$$.fragment,t),v(es.$$.fragment,t),v(ls.$$.fragment,t),v(os.$$.fragment,t),v(ns.$$.fragment,t),v(rs.$$.fragment,t),v(is.$$.fragment,t),v(Zt.$$.fragment,t),v(ps.$$.fragment,t),v(ds.$$.fragment,t),v(cs.$$.fragment,t),v(fs.$$.fragment,t),v(us.$$.fragment,t),v(hs.$$.fragment,t),v(ms.$$.fragment,t),v(_s.$$.fragment,t),v(gs.$$.fragment,t),v(vs.$$.fragment,t),v(oa.$$.fragment,t),v($s.$$.fragment,t),v(ys.$$.fragment,t),v(js.$$.fragment,t),v(bs.$$.fragment,t),v(ks.$$.fragment,t),v(Es.$$.fragment,t),v(xs.$$.fragment,t),v(Ps.$$.fragment,t),v(fa.$$.fragment,t),v(As.$$.fragment,t),v(ua.$$.fragment,t),v(Ss.$$.fragment,t),v(Ds.$$.fragment,t),v(Ts.$$.fragment,t),v(Cs.$$.fragment,t),v(_a.$$.fragment,t),v(Os.$$.fragment,t),jr=!1},d(t){a(u),t&&a(k),t&&a(y),$(w),t&&a(kt),t&&a(U),t&&a(Et),t&&a(Y),t&&a(xt),t&&a(A),t&&a(xa),t&&a(I),t&&a(ho),t&&a(zs),t&&a(mo),t&&a(ot),$(Da),t&&a(_o),t&&a(W),t&&a(go),t&&a(Dt),t&&a(vo),$(Na,t),t&&a($o),t&&a(Tt),t&&a(yo),$(Ia,t),t&&a(wo),$(Nt,t),t&&a(jo),t&&a(T),t&&a(bo),$(Ca,t),t&&a(qo),$(It,t),t&&a(ko),t&&a(G),t&&a(Eo),$(Oa,t),t&&a(xo),t&&a(Ct),t&&a(Po),$(Ha,t),t&&a(Ao),t&&a(nt),$(La),t&&a(So),t&&a(Ht),t&&a(Do),t&&a(Lt),t&&a(To),$(Fa,t),t&&a(No),t&&a(rt),$(Ra),t&&a(Io),t&&a(Bs),t&&a(Co),$(Ma,t),t&&a(Oo),t&&a(Rt),t&&a(Ho),$(Va,t),t&&a(Lo),t&&a(it),$(za),t&&a(Fo),t&&a(N),t&&a(Ro),t&&a(pt),$(Ja),t&&a(Mo),t&&a(Qs),t&&a(Vo),$(Ua,t),t&&a(zo),t&&a(Ks),t&&a(Jo),$(Ya,t),t&&a(Uo),t&&a(Xs),t&&a(Yo),$(Ba,t),t&&a(Bo),t&&a(Zs),t&&a(Wo),$(Wa,t),t&&a(Go),t&&a(te),t&&a(Qo),$(Ga,t),t&&a(Ko),t&&a(dt),$(Qa),t&&a(Xo),t&&a(Jt),t&&a(Zo),$(Ka,t),t&&a(tn),t&&a(se),t&&a(an),$(Xa,t),t&&a(sn),t&&a(Ut),t&&a(en),$(Za,t),t&&a(ln),t&&a(ee),t&&a(on),$(ts,t),t&&a(nn),t&&a(le),t&&a(rn),t&&a(ct),$(as),t&&a(pn),t&&a(oe),t&&a(dn),t&&a(ne),t&&a(cn),$(ss,t),t&&a(fn),t&&a(re),t&&a(un),$(es,t),t&&a(hn),t&&a(ft),$(ls),t&&a(mn),t&&a(Wt),t&&a(_n),t&&a(ut),$(os),t&&a(gn),t&&a(Qt),t&&a(vn),$(ns,t),t&&a($n),t&&a(ht),$(rs),t&&a(yn),t&&a(Xt),t&&a(wn),$(is,t),t&&a(jn),$(Zt,t),t&&a(bn),t&&a(mt),$(ps),t&&a(qn),t&&a(ce),t&&a(kn),t&&a(Q),t&&a(En),t&&a(_t),$(ds),t&&a(xn),t&&a(K),t&&a(Pn),t&&a(X),t&&a(An),$(cs,t),t&&a(Sn),t&&a(sa),t&&a(Dn),$(fs,t),t&&a(Tn),t&&a(he),t&&a(Nn),$(us,t),t&&a(In),t&&a(me),t&&a(Cn),$(hs,t),t&&a(On),t&&a(_e),t&&a(Hn),$(ms,t),t&&a(Ln),t&&a(gt),$(_s),t&&a(Fn),t&&a(ge),t&&a(Rn),$(gs,t),t&&a(Mn),t&&a(la),t&&a(Vn),$(vs,t),t&&a(zn),$(oa,t),t&&a(Jn),t&&a(ve),t&&a(Un),t&&a(vt),$($s),t&&a(Yn),t&&a($e),t&&a(Bn),t&&a($t),$(ys),t&&a(Wn),t&&a(L),t&&a(Gn),t&&a(ia),t&&a(Qn),$(js,t),t&&a(Kn),t&&a(O),t&&a(Xn),t&&a(yt),$(bs),t&&a(Zn),t&&a(F),t&&a(tr),t&&a(da),t&&a(ar),$(ks,t),t&&a(sr),t&&a(Z),t&&a(er),$(Es,t),t&&a(lr),t&&a(Ee),t&&a(or),$(xs,t),t&&a(nr),t&&a(wt),$(Ps),t&&a(rr),$(fa,t),t&&a(ir),t&&a(xe),t&&a(pr),$(As,t),t&&a(dr),$(ua,t),t&&a(cr),t&&a(jt),$(Ss),t&&a(fr),t&&a(tt),t&&a(ur),$(Ds,t),t&&a(hr),t&&a(bt),$(Ts),t&&a(mr),t&&a(Ae),t&&a(_r),t&&a(Se),t&&a(gr),t&&a(at),t&&a(vr),$(Cs,t),t&&a($r),$(_a,t),t&&a(yr),t&&a(ga),t&&a(wr),$(Os,t)}}}const Qh={local:"load",sections:[{local:"hugging-face-hub",title:"Hugging Face Hub"},{local:"local-loading-script",sections:[{local:"edit-loading-script",title:"Edit loading script"}],title:"Local loading script"},{local:"local-and-remote-files",sections:[{local:"csv",title:"CSV"},{local:"json",title:"JSON"},{local:"parquet",title:"Parquet"}],title:"Local and remote files"},{local:"inmemory-data",sections:[{local:"python-dictionary",title:"Python dictionary"},{local:"pandas-dataframe",title:"Pandas DataFrame"}],title:"In-memory data"},{local:"offline",title:"Offline"},{local:"slice-splits",sections:[{local:"percent-slicing-and-rounding",title:"Percent slicing and rounding"}],title:"Slice splits"},{local:"troubleshooting",sections:[{local:"manual-download",title:"Manual download"},{local:"specify-features",title:"Specify features"}],title:"Troubleshooting"},{local:"metrics",sections:[{local:"load-configurations",title:"Load configurations"},{local:"distributed-setup",title:"Distributed setup"}],title:"Metrics"}],title:"Load"};function Kh(D){return Mh(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class lm extends Hh{constructor(u){super();Lh(this,u,Kh,Gh,Fh,{})}}export{lm as default,Qh as metadata};
