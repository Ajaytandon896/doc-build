import{S as le,i as ce,s as ue,e as i,k as f,w as de,t as d,M as he,c as r,d as t,m,a as o,x as pe,h,b as v,N as fe,G as n,g as l,y as me,L as ve,q as _e,o as ye,B as Ee,v as Pe}from"../chunks/vendor-hf-doc-builder.js";import{I as Se}from"../chunks/IconCopyLink-hf-doc-builder.js";function ge(Y){let c,k,u,p,L,_,F,A,M,T,E,O,x,s,P,I,R,H,z,S,q,D,U,B,g,$,J,j,N,b,K,W,y,Z,C;return _=new Se({}),{c(){c=i("meta"),k=f(),u=i("h1"),p=i("a"),L=i("span"),de(_.$$.fragment),F=f(),A=i("span"),M=d("Security & Compliance"),T=f(),E=i("p"),O=d("\u{1F917} Inference Endpoints is built with security and secure inference at its core. We currently offer three types of endpoints, in order or increasing security level:"),x=f(),s=i("ul"),P=i("li"),I=i("strong"),R=d("Public"),H=d(": A Public Endpoint is available from the internet, secured with TLS/SSL, and requires no authentication."),z=f(),S=i("li"),q=i("strong"),D=d("Protected"),U=d(": A Protected Endpoint is available from the internet, secured with TLS/SSL, and requires a valid Hugging Face token for authentication."),B=f(),g=i("li"),$=i("strong"),J=d("Private"),j=d(" A Private Endpoint is only available through an intra-region secured AWS or Azure PrivateLink connection. Private Endpoints are not accessible from the internet."),N=f(),b=i("p"),K=d("Public and Protected Endpoints do not require any additional configuration. For Private Endpoints, you need to provide the AWS account ID of the account which also should have access to \u{1F917} Inference Endpoints."),W=f(),y=i("img"),this.h()},l(e){const a=he('[data-svelte="svelte-1phssyn"]',document.head);c=r(a,"META",{name:!0,content:!0}),a.forEach(t),k=m(e),u=r(e,"H1",{class:!0});var G=o(u);p=r(G,"A",{id:!0,class:!0,href:!0});var ee=o(p);L=r(ee,"SPAN",{});var te=o(L);pe(_.$$.fragment,te),te.forEach(t),ee.forEach(t),F=m(G),A=r(G,"SPAN",{});var ne=o(A);M=h(ne,"Security & Compliance"),ne.forEach(t),G.forEach(t),T=m(e),E=r(e,"P",{});var ie=o(E);O=h(ie,"\u{1F917} Inference Endpoints is built with security and secure inference at its core. We currently offer three types of endpoints, in order or increasing security level:"),ie.forEach(t),x=m(e),s=r(e,"UL",{});var w=o(s);P=r(w,"LI",{});var Q=o(P);I=r(Q,"STRONG",{});var re=o(I);R=h(re,"Public"),re.forEach(t),H=h(Q,": A Public Endpoint is available from the internet, secured with TLS/SSL, and requires no authentication."),Q.forEach(t),z=m(w),S=r(w,"LI",{});var V=o(S);q=r(V,"STRONG",{});var ae=o(q);D=h(ae,"Protected"),ae.forEach(t),U=h(V,": A Protected Endpoint is available from the internet, secured with TLS/SSL, and requires a valid Hugging Face token for authentication."),V.forEach(t),B=m(w),g=r(w,"LI",{});var X=o(g);$=r(X,"STRONG",{});var oe=o($);J=h(oe,"Private"),oe.forEach(t),j=h(X," A Private Endpoint is only available through an intra-region secured AWS or Azure PrivateLink connection. Private Endpoints are not accessible from the internet."),X.forEach(t),w.forEach(t),N=m(e),b=r(e,"P",{});var se=o(b);K=h(se,"Public and Protected Endpoints do not require any additional configuration. For Private Endpoints, you need to provide the AWS account ID of the account which also should have access to \u{1F917} Inference Endpoints."),se.forEach(t),W=m(e),y=r(e,"IMG",{src:!0,alt:!0}),this.h()},h(){v(c,"name","hf:doc:metadata"),v(c,"content",JSON.stringify(be)),v(p,"id","security-compliance"),v(p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),v(p,"href","#security-compliance"),v(u,"class","relative group"),fe(y.src,Z="https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/endpoint_types.png")||v(y,"src",Z),v(y,"alt","endpoint types")},m(e,a){n(document.head,c),l(e,k,a),l(e,u,a),n(u,p),n(p,L),me(_,L,null),n(u,F),n(u,A),n(A,M),l(e,T,a),l(e,E,a),n(E,O),l(e,x,a),l(e,s,a),n(s,P),n(P,I),n(I,R),n(P,H),n(s,z),n(s,S),n(S,q),n(q,D),n(S,U),n(s,B),n(s,g),n(g,$),n($,J),n(g,j),l(e,N,a),l(e,b,a),n(b,K),l(e,W,a),l(e,y,a),C=!0},p:ve,i(e){C||(_e(_.$$.fragment,e),C=!0)},o(e){ye(_.$$.fragment,e),C=!1},d(e){t(c),e&&t(k),e&&t(u),Ee(_),e&&t(T),e&&t(E),e&&t(x),e&&t(s),e&&t(N),e&&t(b),e&&t(W),e&&t(y)}}}const be={local:"security-compliance",title:"Security & Compliance"};function we(Y){return Pe(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ie extends le{constructor(c){super();ce(this,c,we,ge,ue,{})}}export{Ie as default,be as metadata};
