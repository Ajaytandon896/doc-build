import{S as gi,i as bi,s as $i,e as s,k as h,w as m,t as n,M as ji,c as l,d as a,m as c,a as o,x as y,h as r,b as d,G as t,g as p,y as _,L as ki,q as v,o as w,B as E,v as Ai}from"../../chunks/vendor-hf-doc-builder.js";import{I as B}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as U}from"../../chunks/CodeBlock-hf-doc-builder.js";function Hi(Pn){let x,ba,I,G,Et,ce,Ls,gt,zs,$a,W,Fs,ue,Ms,Rs,ja,b,Bs,fe,Us,Gs,me,Ws,Ys,bt,Js,Xs,$t,Ks,Qs,ka,H,Zs,ye,Vs,el,jt,tl,al,Aa,D,Y,kt,_e,sl,At,ll,Ha,$,ol,ve,nl,rl,Ht,il,pl,we,dl,hl,qa,st,cl,Pa,u,qt,Ee,ul,fl,Pt,ge,ml,yl,Ct,be,_l,vl,Tt,$e,wl,El,xt,je,gl,bl,It,ke,$l,jl,Dt,Ae,kl,Al,Nt,lt,Hl,ql,St,ot,Pl,Cl,Ot,nt,Tl,Ca,N,J,Lt,He,xl,zt,Il,Ta,q,Dl,Ft,Nl,Sl,qe,Ol,Ll,xa,X,zl,Pe,Fl,Ml,Ia,K,Rl,Ce,Bl,Ul,Da,Te,Gl,xe,Wl,Na,S,Q,Mt,Ie,Yl,Rt,Jl,Sa,De,Xl,Bt,Kl,Oa,Ne,La,rt,Ql,za,Z,Zl,Se,Vl,eo,Fa,Oe,Ma,V,to,Ut,ao,so,Ra,it,Gt,lo,Ba,Le,Ua,O,ee,Wt,ze,oo,Yt,no,Ga,g,ro,Jt,io,po,Xt,ho,co,Kt,uo,fo,Qt,mo,yo,Zt,_o,vo,Wa,te,Fe,wo,Vt,Eo,go,bo,L,$o,ea,jo,ko,ta,Ao,Ho,Ya,ae,qo,aa,Po,Co,Ja,Me,Xa,j,To,sa,xo,Io,la,Do,No,oa,So,Oo,Ka,Re,Qa,z,se,na,Be,Lo,ra,zo,Za,le,Fo,Ue,Mo,Ro,Va,Ge,ia,Bo,Uo,es,P,Go,pa,Wo,Yo,We,Jo,Xo,ts,Ye,as,C,Ko,da,Qo,Zo,ha,Vo,en,ss,Je,ls,F,oe,ca,Xe,tn,ua,an,os,pt,sn,ns,Ke,rs,dt,ln,is,ht,fa,on,ps,M,ne,ma,Qe,nn,ya,rn,ds,ct,pn,hs,Ze,cs,k,dn,_a,hn,cn,va,un,fn,Ve,mn,yn,us,R,re,wa,et,_n,Ea,vn,fs,ut,wn,ms,ie,En,ga,gn,bn,ys,ft,tt,$n,at,jn,kn,_s;return ce=new B({}),_e=new B({}),He=new B({}),Ie=new B({}),Ne=new U({props:{code:`# install git-lfs to interact with the repository
sudo apt-get update
sudo apt-get install git-lfs
# install transformers (not needed since it is installed by default in the container)
pip install transformers[sklearn,sentencepiece,audio,vision]`,highlighted:`<span class="hljs-comment"># install git-lfs to interact with the repository</span>
sudo apt-<span class="hljs-built_in">get</span> update
sudo apt-<span class="hljs-built_in">get</span> install git-lfs
<span class="hljs-comment"># install transformers (not needed since it is installed by default in the container)</span>
pip install transformers[sklearn,sentencepiece,audio,vision]`}}),Oe=new U({props:{code:`git lfs install
git clone https://huggingface.co/philschmid/distilbert-base-uncased-emotion`,highlighted:`git lfs install
git clone https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/philschmid/</span>distilbert-base-uncased-emotion`}}),Le=new U({props:{code:`# setup cli with token
huggingface-cli login
git config --global credential.helper store`,highlighted:`# setup <span class="hljs-keyword">cli</span> with <span class="hljs-keyword">token</span>
huggingface-<span class="hljs-keyword">cli</span> login
git config --<span class="hljs-keyword">global</span> credential.helper store`}}),ze=new B({}),Me=new U({props:{code:"!cd distilbert-base-uncased-emotion && touch handler.py",highlighted:'!<span class="hljs-built_in">cd</span> distilbert-base-uncased-emotion &amp;&amp; <span class="hljs-built_in">touch</span> handler.py'}}),Re=new U({props:{code:`from typing import Dict, List, Any

class EndpointHandler():
    def __init__(self, path=""):
        # Preload all the elements you are going to need at inference.
        # pseudo:
        # self.model= load_model(path)

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """

        # pseudo
        # self.model(input)`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        <span class="hljs-comment"># Preload all the elements you are going to need at inference.</span>
        <span class="hljs-comment"># pseudo:</span>
        <span class="hljs-comment"># self.model= load_model(path)</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>

        <span class="hljs-comment"># pseudo</span>
        <span class="hljs-comment"># self.model(input)</span>`}}),Be=new B({}),Ye=new U({props:{code:`!echo "holidays" >> requirements.txt
!pip install -r requirements.txt`,highlighted:`!echo <span class="hljs-string">&quot;holidays&quot;</span> &gt;&gt; requirements.txt
!pip install -r requirements.txt`}}),Je=new U({props:{code:`from typing import Dict, List, Any
from transformers import pipeline
import holidays

class EndpointHandler():
    def __init__(self, path=""):
        self.pipeline = pipeline("text-classification",model=path)
        self.holidays = holidays.US()

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """
        # get inputs
        inputs = data.pop("inputs",data)
        date = data.pop("date", None)

        # check if date exists and if it is a holiday
        if date is not None and date in self.holidays:
          return [{"label": "happy", "score": 1}]


        # run normal prediction
        prediction = self.pipeline(inputs)
        return prediction`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">import</span> holidays

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        self.pipeline = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=path)
        self.holidays = holidays.US()

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># get inputs</span>
        inputs = data.pop(<span class="hljs-string">&quot;inputs&quot;</span>,data)
        date = data.pop(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-literal">None</span>)

        <span class="hljs-comment"># check if date exists and if it is a holiday</span>
        <span class="hljs-keyword">if</span> date <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> date <span class="hljs-keyword">in</span> self.holidays:
          <span class="hljs-keyword">return</span> [{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">1</span>}]


        <span class="hljs-comment"># run normal prediction</span>
        prediction = self.pipeline(inputs)
        <span class="hljs-keyword">return</span> prediction`}}),Xe=new B({}),Ke=new U({props:{code:`from handler import EndpointHandler

# init handler
my_handler = EndpointHandler(path=".")

# prepare sample payload
non_holiday_payload = {"inputs": "I am quite excited how this will turn out", "date": "2022-08-08"}
holiday_payload = {"inputs": "Today is a though day", "date": "2022-07-04"}

# test the handler
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

# show results
print("non_holiday_pred", non_holiday_pred)
print("holiday_payload", holiday_payload)

# non_holiday_pred [{'label': 'joy', 'score': 0.9985942244529724}]
# holiday_payload [{'label': 'happy', 'score': 1}]`,highlighted:`<span class="hljs-keyword">from</span> handler <span class="hljs-keyword">import</span> EndpointHandler

<span class="hljs-comment"># init handler</span>
my_handler = EndpointHandler(path=<span class="hljs-string">&quot;.&quot;</span>)

<span class="hljs-comment"># prepare sample payload</span>
non_holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;I am quite excited how this will turn out&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-08-08&quot;</span>}
holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Today is a though day&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-07-04&quot;</span>}

<span class="hljs-comment"># test the handler</span>
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

<span class="hljs-comment"># show results</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;non_holiday_pred&quot;</span>, non_holiday_pred)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;holiday_payload&quot;</span>, holiday_payload)

<span class="hljs-comment"># non_holiday_pred [{&#x27;label&#x27;: &#x27;joy&#x27;, &#x27;score&#x27;: 0.9985942244529724}]</span>
<span class="hljs-comment"># holiday_payload [{&#x27;label&#x27;: &#x27;happy&#x27;, &#x27;score&#x27;: 1}]</span>`}}),Qe=new B({}),Ze=new U({props:{code:`# add all our new files
!git add *
# commit our files
!git commit -m "add custom handler"
# push the files to the hub
!git push`,highlighted:`# <span class="hljs-built_in">add</span> <span class="hljs-keyword">all</span> our <span class="hljs-keyword">new</span> <span class="hljs-keyword">files</span>
!git <span class="hljs-built_in">add</span> *
# commit our <span class="hljs-keyword">files</span>
!git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;add custom handler&quot;</span>
# push the <span class="hljs-keyword">files</span> <span class="hljs-keyword">to</span> the hub
!git push`}}),et=new B({}),{c(){x=s("meta"),ba=h(),I=s("h1"),G=s("a"),Et=s("span"),m(ce.$$.fragment),Ls=h(),gt=s("span"),zs=n("Create custom Inference Handler"),$a=h(),W=s("p"),Fs=n("Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ue=s("a"),Ms=n("handler.py"),Rs=n(" file in your model repository on the Hugging Face Hub."),ja=h(),b=s("p"),Bs=n("The "),fe=s("a"),Us=n("handler.py"),Gs=n(" needs to implement the "),me=s("a"),Ws=n("EndpointHandler"),Ys=n(" class with a "),bt=s("code"),Js=n("__init__"),Xs=n(" and a "),$t=s("code"),Ks=n("__call__"),Qs=n(" method."),ka=h(),H=s("p"),Zs=n("If you want to use custom dependencies, e.g. "),ye=s("a"),Vs=n("optimum"),el=n(", the dependencies must be listed in a "),jt=s("code"),tl=n("requirements.txt"),al=n(" as described above in \u201Cadd custom dependencies.\u201D"),Aa=h(),D=s("h2"),Y=s("a"),kt=s("span"),m(_e.$$.fragment),sl=h(),At=s("span"),ll=n("Custom Handler Examples"),Ha=h(),$=s("p"),ol=n("There are already several public examples on the "),ve=s("a"),nl=n("Hugging Face Hub"),rl=n(" where you can take insipiration or directly use them. The repositories are tagged with "),Ht=s("code"),il=n("endpoints-template"),pl=n(" and can be found under this "),we=s("a"),dl=n("link"),hl=n("."),qa=h(),st=s("p"),cl=n("Included examples are for:"),Pa=h(),u=s("ul"),qt=s("li"),Ee=s("a"),ul=n("Optimum and ONNX Runtime"),fl=h(),Pt=s("li"),ge=s("a"),ml=n("Diffusers with stable-diffusion"),yl=h(),Ct=s("li"),be=s("a"),_l=n("Image Embeddings with BLIP"),vl=h(),Tt=s("li"),$e=s("a"),wl=n("TrOCR for OCR Detection"),El=h(),xt=s("li"),je=s("a"),gl=n("Optimized Sentence Transformers with Optimum"),bl=h(),It=s("li"),ke=s("a"),$l=n("Pyannote Speaker diarization"),jl=h(),Dt=s("li"),Ae=s("a"),kl=n("LayoutLM"),Al=h(),Nt=s("li"),lt=s("a"),Hl=n("Flair NER"),ql=h(),St=s("li"),ot=s("a"),Pl=n("GPT-J 6B Single GPU"),Cl=h(),Ot=s("li"),nt=s("a"),Tl=n("Donut Document understanding"),Ca=h(),N=s("h2"),J=s("a"),Lt=s("span"),m(He.$$.fragment),xl=h(),zt=s("span"),Il=n("Tutorial"),Ta=h(),q=s("p"),Dl=n("Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),Ft=s("em"),Nl=n("WRITE"),Sl=n(" access to the repository. To find, create and manage Access Tokens, click "),qe=s("a"),Ol=n("here"),Ll=n("."),xa=h(),X=s("p"),zl=n("If you want to write a Custom Handler for an existing model from the community, you can use the "),Pe=s("a"),Fl=n("repo_duplicator"),Ml=n(" to create a repository fork."),Ia=h(),K=s("p"),Rl=n("The code can also be found in this "),Ce=s("a"),Bl=n("Notebook"),Ul=n("."),Da=h(),Te=s("p"),Gl=n("You can also search for already existing Custom Handlers here: "),xe=s("a"),Wl=n("https://huggingface.co/models?other=endpoints-template"),Na=h(),S=s("h3"),Q=s("a"),Mt=s("span"),m(Ie.$$.fragment),Yl=h(),Rt=s("span"),Jl=n("1. Set up Development Environment"),Sa=h(),De=s("p"),Xl=n(`The easiest way to develop our custom handler is to set up a local development environment, to implement, test, and iterate there, and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies.
`),Bt=s("em"),Kl=n("needed to create the custom handler, not needed for inference"),Oa=h(),m(Ne.$$.fragment),La=h(),rt=s("p"),Ql=n("After we have installed our libraries we will clone our repository to our development environment."),za=h(),Z=s("p"),Zl=n("We will use "),Se=s("a"),Vl=n("philschmid/distilbert-base-uncased-emotion"),eo=n(" during the tutorial."),Fa=h(),m(Oe.$$.fragment),Ma=h(),V=s("p"),to=n("To be able to push our CP later you need to login into our HF account. This can be done by using the "),Ut=s("code"),ao=n("huggingface-cli"),so=n("."),Ra=h(),it=s("p"),Gt=s("em"),lo=n("Note: Make sure to configure git config as well."),Ba=h(),m(Le.$$.fragment),Ua=h(),O=s("h3"),ee=s("a"),Wt=s("span"),m(ze.$$.fragment),oo=h(),Yt=s("span"),no=n("2. Create EndpointHandler (CP)"),Ga=h(),g=s("p"),ro=n("After we have set up our environment, we can start creating your custom handler. The custom handler is a Python class ("),Jt=s("code"),io=n("EndpointHandler"),po=n(") inside a "),Xt=s("code"),ho=n("handler.py"),co=n(" file in our repository. The "),Kt=s("code"),uo=n("EndpointHandler"),fo=n(" needs to implement an "),Qt=s("code"),mo=n("__init__"),yo=n(" and a "),Zt=s("code"),_o=n("__call__"),vo=n(" method."),Wa=h(),te=s("ul"),Fe=s("li"),wo=n("The "),Vt=s("code"),Eo=n("__init__"),go=n(" method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),bo=h(),L=s("li"),$o=n("The "),ea=s("code"),jo=n("__call__"),ko=n(" method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),ta=s("code"),Ao=n("inputs"),Ho=n(" key."),Ya=h(),ae=s("p"),qo=n("The first step is to create our "),aa=s("code"),Po=n("handler.py"),Co=n(" in the local clone of our repository."),Ja=h(),m(Me.$$.fragment),Xa=h(),j=s("p"),To=n("In there, you define your "),sa=s("code"),xo=n("EndpointHandler"),Io=n(" class with the "),la=s("code"),Do=n("__init__"),No=n(" and "),oa=s("code"),So=n("__call__ "),Oo=n("method."),Ka=h(),m(Re.$$.fragment),Qa=h(),z=s("h3"),se=s("a"),na=s("span"),m(Be.$$.fragment),Lo=h(),ra=s("span"),zo=n("3. Customize EndpointHandler"),Za=h(),le=s("p"),Fo=n("Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Ue=s("a"),Mo=n("Custom Handler on the Hub"),Ro=n(" if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),Va=h(),Ge=s("p"),ia=s("em"),Bo=n("The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),Uo=n("\u{1F334}\u{1F389}\u{1F606}"),es=h(),P=s("p"),Go=n("First, we need to create a new "),pa=s("code"),Wo=n("requirements.txt"),Yo=n(" and add our "),We=s("a"),Jo=n("holiday detection package"),Xo=n(" and make sure we have it installed in our development environment as well."),ts=h(),m(Ye.$$.fragment),as=h(),C=s("p"),Ko=n("Next, we have to adjust our "),da=s("code"),Qo=n("handler.py"),Zo=n(" and "),ha=s("code"),Vo=n("EndpointHandler"),en=n(" to match our condition."),ss=h(),m(Je.$$.fragment),ls=h(),F=s("h3"),oe=s("a"),ca=s("span"),m(Xe.$$.fragment),tn=h(),ua=s("span"),an=n("4. Test EndpointHandler"),os=h(),pt=s("p"),sn=n("To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),ns=h(),m(Ke.$$.fragment),rs=h(),dt=s("p"),ln=n("It works!!!! \u{1F389}"),is=h(),ht=s("p"),fa=s("em"),on=n("Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),ps=h(),M=s("h3"),ne=s("a"),ma=s("span"),m(Qe.$$.fragment),nn=h(),ya=s("span"),rn=n("5. Push the Custom Handler to your repository"),ds=h(),ct=s("p"),pn=n("After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),hs=h(),m(Ze.$$.fragment),cs=h(),k=s("p"),dn=n("Now, you should see your "),_a=s("code"),hn=n("handler.py"),cn=n(" and "),va=s("code"),un=n("requirements.txt"),fn=n(" in your repository in the "),Ve=s("a"),mn=n("\u201CFiles and version\u201D"),yn=n(" tab."),us=h(),R=s("h3"),re=s("a"),wa=s("span"),m(et.$$.fragment),_n=h(),Ea=s("span"),vn=n("6. Deploy your Custom Handler as an Inference Endpoint"),fs=h(),ut=s("p"),wn=n("The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),ms=h(),ie=s("p"),En=n("The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),ga=s("code"),gn=n("handler.py"),bn=n(" available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),ys=h(),ft=s("p"),tt=s("em"),$n=n("Note: In your "),at=s("a"),jn=n("Inference Endpoints dashboard"),kn=n(", the Task for this Endpoint should now be set to Custom"),this.h()},l(e){const i=ji('[data-svelte="svelte-1phssyn"]',document.head);x=l(i,"META",{name:!0,content:!0}),i.forEach(a),ba=c(e),I=l(e,"H1",{class:!0});var vs=o(I);G=l(vs,"A",{id:!0,class:!0,href:!0});var Cn=o(G);Et=l(Cn,"SPAN",{});var Tn=o(Et);y(ce.$$.fragment,Tn),Tn.forEach(a),Cn.forEach(a),Ls=c(vs),gt=l(vs,"SPAN",{});var xn=o(gt);zs=r(xn,"Create custom Inference Handler"),xn.forEach(a),vs.forEach(a),$a=c(e),W=l(e,"P",{});var ws=o(W);Fs=r(ws,"Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ue=l(ws,"A",{href:!0,rel:!0});var In=o(ue);Ms=r(In,"handler.py"),In.forEach(a),Rs=r(ws," file in your model repository on the Hugging Face Hub."),ws.forEach(a),ja=c(e),b=l(e,"P",{});var T=o(b);Bs=r(T,"The "),fe=l(T,"A",{href:!0,rel:!0});var Dn=o(fe);Us=r(Dn,"handler.py"),Dn.forEach(a),Gs=r(T," needs to implement the "),me=l(T,"A",{href:!0,rel:!0});var Nn=o(me);Ws=r(Nn,"EndpointHandler"),Nn.forEach(a),Ys=r(T," class with a "),bt=l(T,"CODE",{});var Sn=o(bt);Js=r(Sn,"__init__"),Sn.forEach(a),Xs=r(T," and a "),$t=l(T,"CODE",{});var On=o($t);Ks=r(On,"__call__"),On.forEach(a),Qs=r(T," method."),T.forEach(a),ka=c(e),H=l(e,"P",{});var mt=o(H);Zs=r(mt,"If you want to use custom dependencies, e.g. "),ye=l(mt,"A",{href:!0,rel:!0});var Ln=o(ye);Vs=r(Ln,"optimum"),Ln.forEach(a),el=r(mt,", the dependencies must be listed in a "),jt=l(mt,"CODE",{});var zn=o(jt);tl=r(zn,"requirements.txt"),zn.forEach(a),al=r(mt," as described above in \u201Cadd custom dependencies.\u201D"),mt.forEach(a),Aa=c(e),D=l(e,"H2",{class:!0});var Es=o(D);Y=l(Es,"A",{id:!0,class:!0,href:!0});var Fn=o(Y);kt=l(Fn,"SPAN",{});var Mn=o(kt);y(_e.$$.fragment,Mn),Mn.forEach(a),Fn.forEach(a),sl=c(Es),At=l(Es,"SPAN",{});var Rn=o(At);ll=r(Rn,"Custom Handler Examples"),Rn.forEach(a),Es.forEach(a),Ha=c(e),$=l(e,"P",{});var pe=o($);ol=r(pe,"There are already several public examples on the "),ve=l(pe,"A",{href:!0,rel:!0});var Bn=o(ve);nl=r(Bn,"Hugging Face Hub"),Bn.forEach(a),rl=r(pe," where you can take insipiration or directly use them. The repositories are tagged with "),Ht=l(pe,"CODE",{});var Un=o(Ht);il=r(Un,"endpoints-template"),Un.forEach(a),pl=r(pe," and can be found under this "),we=l(pe,"A",{href:!0,rel:!0});var Gn=o(we);dl=r(Gn,"link"),Gn.forEach(a),hl=r(pe,"."),pe.forEach(a),qa=c(e),st=l(e,"P",{});var Wn=o(st);cl=r(Wn,"Included examples are for:"),Wn.forEach(a),Pa=c(e),u=l(e,"UL",{});var f=o(u);qt=l(f,"LI",{});var Yn=o(qt);Ee=l(Yn,"A",{href:!0,rel:!0});var Jn=o(Ee);ul=r(Jn,"Optimum and ONNX Runtime"),Jn.forEach(a),Yn.forEach(a),fl=c(f),Pt=l(f,"LI",{});var Xn=o(Pt);ge=l(Xn,"A",{href:!0,rel:!0});var Kn=o(ge);ml=r(Kn,"Diffusers with stable-diffusion"),Kn.forEach(a),Xn.forEach(a),yl=c(f),Ct=l(f,"LI",{});var Qn=o(Ct);be=l(Qn,"A",{href:!0,rel:!0});var Zn=o(be);_l=r(Zn,"Image Embeddings with BLIP"),Zn.forEach(a),Qn.forEach(a),vl=c(f),Tt=l(f,"LI",{});var Vn=o(Tt);$e=l(Vn,"A",{href:!0,rel:!0});var er=o($e);wl=r(er,"TrOCR for OCR Detection"),er.forEach(a),Vn.forEach(a),El=c(f),xt=l(f,"LI",{});var tr=o(xt);je=l(tr,"A",{href:!0,rel:!0});var ar=o(je);gl=r(ar,"Optimized Sentence Transformers with Optimum"),ar.forEach(a),tr.forEach(a),bl=c(f),It=l(f,"LI",{});var sr=o(It);ke=l(sr,"A",{href:!0,rel:!0});var lr=o(ke);$l=r(lr,"Pyannote Speaker diarization"),lr.forEach(a),sr.forEach(a),jl=c(f),Dt=l(f,"LI",{});var or=o(Dt);Ae=l(or,"A",{href:!0,rel:!0});var nr=o(Ae);kl=r(nr,"LayoutLM"),nr.forEach(a),or.forEach(a),Al=c(f),Nt=l(f,"LI",{});var rr=o(Nt);lt=l(rr,"A",{href:!0});var ir=o(lt);Hl=r(ir,"Flair NER"),ir.forEach(a),rr.forEach(a),ql=c(f),St=l(f,"LI",{});var pr=o(St);ot=l(pr,"A",{href:!0});var dr=o(ot);Pl=r(dr,"GPT-J 6B Single GPU"),dr.forEach(a),pr.forEach(a),Cl=c(f),Ot=l(f,"LI",{});var hr=o(Ot);nt=l(hr,"A",{href:!0});var cr=o(nt);Tl=r(cr,"Donut Document understanding"),cr.forEach(a),hr.forEach(a),f.forEach(a),Ca=c(e),N=l(e,"H2",{class:!0});var gs=o(N);J=l(gs,"A",{id:!0,class:!0,href:!0});var ur=o(J);Lt=l(ur,"SPAN",{});var fr=o(Lt);y(He.$$.fragment,fr),fr.forEach(a),ur.forEach(a),xl=c(gs),zt=l(gs,"SPAN",{});var mr=o(zt);Il=r(mr,"Tutorial"),mr.forEach(a),gs.forEach(a),Ta=c(e),q=l(e,"P",{});var yt=o(q);Dl=r(yt,"Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),Ft=l(yt,"EM",{});var yr=o(Ft);Nl=r(yr,"WRITE"),yr.forEach(a),Sl=r(yt," access to the repository. To find, create and manage Access Tokens, click "),qe=l(yt,"A",{href:!0,rel:!0});var _r=o(qe);Ol=r(_r,"here"),_r.forEach(a),Ll=r(yt,"."),yt.forEach(a),xa=c(e),X=l(e,"P",{});var bs=o(X);zl=r(bs,"If you want to write a Custom Handler for an existing model from the community, you can use the "),Pe=l(bs,"A",{href:!0,rel:!0});var vr=o(Pe);Fl=r(vr,"repo_duplicator"),vr.forEach(a),Ml=r(bs," to create a repository fork."),bs.forEach(a),Ia=c(e),K=l(e,"P",{});var $s=o(K);Rl=r($s,"The code can also be found in this "),Ce=l($s,"A",{href:!0,rel:!0});var wr=o(Ce);Bl=r(wr,"Notebook"),wr.forEach(a),Ul=r($s,"."),$s.forEach(a),Da=c(e),Te=l(e,"P",{});var An=o(Te);Gl=r(An,"You can also search for already existing Custom Handlers here: "),xe=l(An,"A",{href:!0,rel:!0});var Er=o(xe);Wl=r(Er,"https://huggingface.co/models?other=endpoints-template"),Er.forEach(a),An.forEach(a),Na=c(e),S=l(e,"H3",{class:!0});var js=o(S);Q=l(js,"A",{id:!0,class:!0,href:!0});var gr=o(Q);Mt=l(gr,"SPAN",{});var br=o(Mt);y(Ie.$$.fragment,br),br.forEach(a),gr.forEach(a),Yl=c(js),Rt=l(js,"SPAN",{});var $r=o(Rt);Jl=r($r,"1. Set up Development Environment"),$r.forEach(a),js.forEach(a),Sa=c(e),De=l(e,"P",{});var Hn=o(De);Xl=r(Hn,`The easiest way to develop our custom handler is to set up a local development environment, to implement, test, and iterate there, and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies.
`),Bt=l(Hn,"EM",{});var jr=o(Bt);Kl=r(jr,"needed to create the custom handler, not needed for inference"),jr.forEach(a),Hn.forEach(a),Oa=c(e),y(Ne.$$.fragment,e),La=c(e),rt=l(e,"P",{});var kr=o(rt);Ql=r(kr,"After we have installed our libraries we will clone our repository to our development environment."),kr.forEach(a),za=c(e),Z=l(e,"P",{});var ks=o(Z);Zl=r(ks,"We will use "),Se=l(ks,"A",{href:!0,rel:!0});var Ar=o(Se);Vl=r(Ar,"philschmid/distilbert-base-uncased-emotion"),Ar.forEach(a),eo=r(ks," during the tutorial."),ks.forEach(a),Fa=c(e),y(Oe.$$.fragment,e),Ma=c(e),V=l(e,"P",{});var As=o(V);to=r(As,"To be able to push our CP later you need to login into our HF account. This can be done by using the "),Ut=l(As,"CODE",{});var Hr=o(Ut);ao=r(Hr,"huggingface-cli"),Hr.forEach(a),so=r(As,"."),As.forEach(a),Ra=c(e),it=l(e,"P",{});var qr=o(it);Gt=l(qr,"EM",{});var Pr=o(Gt);lo=r(Pr,"Note: Make sure to configure git config as well."),Pr.forEach(a),qr.forEach(a),Ba=c(e),y(Le.$$.fragment,e),Ua=c(e),O=l(e,"H3",{class:!0});var Hs=o(O);ee=l(Hs,"A",{id:!0,class:!0,href:!0});var Cr=o(ee);Wt=l(Cr,"SPAN",{});var Tr=o(Wt);y(ze.$$.fragment,Tr),Tr.forEach(a),Cr.forEach(a),oo=c(Hs),Yt=l(Hs,"SPAN",{});var xr=o(Yt);no=r(xr,"2. Create EndpointHandler (CP)"),xr.forEach(a),Hs.forEach(a),Ga=c(e),g=l(e,"P",{});var A=o(g);ro=r(A,"After we have set up our environment, we can start creating your custom handler. The custom handler is a Python class ("),Jt=l(A,"CODE",{});var Ir=o(Jt);io=r(Ir,"EndpointHandler"),Ir.forEach(a),po=r(A,") inside a "),Xt=l(A,"CODE",{});var Dr=o(Xt);ho=r(Dr,"handler.py"),Dr.forEach(a),co=r(A," file in our repository. The "),Kt=l(A,"CODE",{});var Nr=o(Kt);uo=r(Nr,"EndpointHandler"),Nr.forEach(a),fo=r(A," needs to implement an "),Qt=l(A,"CODE",{});var Sr=o(Qt);mo=r(Sr,"__init__"),Sr.forEach(a),yo=r(A," and a "),Zt=l(A,"CODE",{});var Or=o(Zt);_o=r(Or,"__call__"),Or.forEach(a),vo=r(A," method."),A.forEach(a),Wa=c(e),te=l(e,"UL",{});var qs=o(te);Fe=l(qs,"LI",{});var Ps=o(Fe);wo=r(Ps,"The "),Vt=l(Ps,"CODE",{});var Lr=o(Vt);Eo=r(Lr,"__init__"),Lr.forEach(a),go=r(Ps," method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),Ps.forEach(a),bo=c(qs),L=l(qs,"LI",{});var _t=o(L);$o=r(_t,"The "),ea=l(_t,"CODE",{});var zr=o(ea);jo=r(zr,"__call__"),zr.forEach(a),ko=r(_t," method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),ta=l(_t,"CODE",{});var Fr=o(ta);Ao=r(Fr,"inputs"),Fr.forEach(a),Ho=r(_t," key."),_t.forEach(a),qs.forEach(a),Ya=c(e),ae=l(e,"P",{});var Cs=o(ae);qo=r(Cs,"The first step is to create our "),aa=l(Cs,"CODE",{});var Mr=o(aa);Po=r(Mr,"handler.py"),Mr.forEach(a),Co=r(Cs," in the local clone of our repository."),Cs.forEach(a),Ja=c(e),y(Me.$$.fragment,e),Xa=c(e),j=l(e,"P",{});var de=o(j);To=r(de,"In there, you define your "),sa=l(de,"CODE",{});var Rr=o(sa);xo=r(Rr,"EndpointHandler"),Rr.forEach(a),Io=r(de," class with the "),la=l(de,"CODE",{});var Br=o(la);Do=r(Br,"__init__"),Br.forEach(a),No=r(de," and "),oa=l(de,"CODE",{});var Ur=o(oa);So=r(Ur,"__call__ "),Ur.forEach(a),Oo=r(de,"method."),de.forEach(a),Ka=c(e),y(Re.$$.fragment,e),Qa=c(e),z=l(e,"H3",{class:!0});var Ts=o(z);se=l(Ts,"A",{id:!0,class:!0,href:!0});var Gr=o(se);na=l(Gr,"SPAN",{});var Wr=o(na);y(Be.$$.fragment,Wr),Wr.forEach(a),Gr.forEach(a),Lo=c(Ts),ra=l(Ts,"SPAN",{});var Yr=o(ra);zo=r(Yr,"3. Customize EndpointHandler"),Yr.forEach(a),Ts.forEach(a),Za=c(e),le=l(e,"P",{});var xs=o(le);Fo=r(xs,"Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Ue=l(xs,"A",{href:!0,rel:!0});var Jr=o(Ue);Mo=r(Jr,"Custom Handler on the Hub"),Jr.forEach(a),Ro=r(xs," if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),xs.forEach(a),Va=c(e),Ge=l(e,"P",{});var qn=o(Ge);ia=l(qn,"EM",{});var Xr=o(ia);Bo=r(Xr,"The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),Xr.forEach(a),Uo=r(qn,"\u{1F334}\u{1F389}\u{1F606}"),qn.forEach(a),es=c(e),P=l(e,"P",{});var vt=o(P);Go=r(vt,"First, we need to create a new "),pa=l(vt,"CODE",{});var Kr=o(pa);Wo=r(Kr,"requirements.txt"),Kr.forEach(a),Yo=r(vt," and add our "),We=l(vt,"A",{href:!0,rel:!0});var Qr=o(We);Jo=r(Qr,"holiday detection package"),Qr.forEach(a),Xo=r(vt," and make sure we have it installed in our development environment as well."),vt.forEach(a),ts=c(e),y(Ye.$$.fragment,e),as=c(e),C=l(e,"P",{});var wt=o(C);Ko=r(wt,"Next, we have to adjust our "),da=l(wt,"CODE",{});var Zr=o(da);Qo=r(Zr,"handler.py"),Zr.forEach(a),Zo=r(wt," and "),ha=l(wt,"CODE",{});var Vr=o(ha);Vo=r(Vr,"EndpointHandler"),Vr.forEach(a),en=r(wt," to match our condition."),wt.forEach(a),ss=c(e),y(Je.$$.fragment,e),ls=c(e),F=l(e,"H3",{class:!0});var Is=o(F);oe=l(Is,"A",{id:!0,class:!0,href:!0});var ei=o(oe);ca=l(ei,"SPAN",{});var ti=o(ca);y(Xe.$$.fragment,ti),ti.forEach(a),ei.forEach(a),tn=c(Is),ua=l(Is,"SPAN",{});var ai=o(ua);an=r(ai,"4. Test EndpointHandler"),ai.forEach(a),Is.forEach(a),os=c(e),pt=l(e,"P",{});var si=o(pt);sn=r(si,"To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),si.forEach(a),ns=c(e),y(Ke.$$.fragment,e),rs=c(e),dt=l(e,"P",{});var li=o(dt);ln=r(li,"It works!!!! \u{1F389}"),li.forEach(a),is=c(e),ht=l(e,"P",{});var oi=o(ht);fa=l(oi,"EM",{});var ni=o(fa);on=r(ni,"Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),ni.forEach(a),oi.forEach(a),ps=c(e),M=l(e,"H3",{class:!0});var Ds=o(M);ne=l(Ds,"A",{id:!0,class:!0,href:!0});var ri=o(ne);ma=l(ri,"SPAN",{});var ii=o(ma);y(Qe.$$.fragment,ii),ii.forEach(a),ri.forEach(a),nn=c(Ds),ya=l(Ds,"SPAN",{});var pi=o(ya);rn=r(pi,"5. Push the Custom Handler to your repository"),pi.forEach(a),Ds.forEach(a),ds=c(e),ct=l(e,"P",{});var di=o(ct);pn=r(di,"After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),di.forEach(a),hs=c(e),y(Ze.$$.fragment,e),cs=c(e),k=l(e,"P",{});var he=o(k);dn=r(he,"Now, you should see your "),_a=l(he,"CODE",{});var hi=o(_a);hn=r(hi,"handler.py"),hi.forEach(a),cn=r(he," and "),va=l(he,"CODE",{});var ci=o(va);un=r(ci,"requirements.txt"),ci.forEach(a),fn=r(he," in your repository in the "),Ve=l(he,"A",{href:!0,rel:!0});var ui=o(Ve);mn=r(ui,"\u201CFiles and version\u201D"),ui.forEach(a),yn=r(he," tab."),he.forEach(a),us=c(e),R=l(e,"H3",{class:!0});var Ns=o(R);re=l(Ns,"A",{id:!0,class:!0,href:!0});var fi=o(re);wa=l(fi,"SPAN",{});var mi=o(wa);y(et.$$.fragment,mi),mi.forEach(a),fi.forEach(a),_n=c(Ns),Ea=l(Ns,"SPAN",{});var yi=o(Ea);vn=r(yi,"6. Deploy your Custom Handler as an Inference Endpoint"),yi.forEach(a),Ns.forEach(a),fs=c(e),ut=l(e,"P",{});var _i=o(ut);wn=r(_i,"The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),_i.forEach(a),ms=c(e),ie=l(e,"P",{});var Ss=o(ie);En=r(Ss,"The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),ga=l(Ss,"CODE",{});var vi=o(ga);gn=r(vi,"handler.py"),vi.forEach(a),bn=r(Ss," available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),Ss.forEach(a),ys=c(e),ft=l(e,"P",{});var wi=o(ft);tt=l(wi,"EM",{});var Os=o(tt);$n=r(Os,"Note: In your "),at=l(Os,"A",{href:!0,rel:!0});var Ei=o(at);jn=r(Ei,"Inference Endpoints dashboard"),Ei.forEach(a),kn=r(Os,", the Task for this Endpoint should now be set to Custom"),Os.forEach(a),wi.forEach(a),this.h()},h(){d(x,"name","hf:doc:metadata"),d(x,"content",JSON.stringify(qi)),d(G,"id","create-custom-inference-handler"),d(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G,"href","#create-custom-inference-handler"),d(I,"class","relative group"),d(ue,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(ue,"rel","nofollow"),d(fe,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(fe,"rel","nofollow"),d(me,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(me,"rel","nofollow"),d(ye,"href","https://raw.githubusercontent.com/huggingface/optimum"),d(ye,"rel","nofollow"),d(Y,"id","custom-handler-examples"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#custom-handler-examples"),d(D,"class","relative group"),d(ve,"href","https://huggingface.co/models?other=endpoints-template"),d(ve,"rel","nofollow"),d(we,"href","https://huggingface.co/models?other=endpoints-template"),d(we,"rel","nofollow"),d(Ee,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77"),d(Ee,"rel","nofollow"),d(ge,"href","https://huggingface.co/philschmid/stable-diffusion-v1-4-endpoints"),d(ge,"rel","nofollow"),d(be,"href","https://huggingface.co/florentgbelidji/blip_image_embeddings"),d(be,"rel","nofollow"),d($e,"href","https://huggingface.co/philschmid/trocr-base-printed"),d($e,"rel","nofollow"),d(je,"href","https://huggingface.co/philschmid/all-MiniLM-L6-v2-optimum-embeddings"),d(je,"rel","nofollow"),d(ke,"href","https://huggingface.co/philschmid/pyannote-speaker-diarization-endpoint"),d(ke,"rel","nofollow"),d(Ae,"href","https://huggingface.co/philschmid/layoutlm-funsd"),d(Ae,"rel","nofollow"),d(lt,"href","philschmid/flair-ner-english-ontonotes-large"),d(ot,"href","philschmid/gpt-j-6B-fp16-sharded"),d(nt,"href","philschmid/donut-base-finetuned-cord-v2"),d(J,"id","tutorial"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#tutorial"),d(N,"class","relative group"),d(qe,"href","https://huggingface.co/settings/tokens"),d(qe,"rel","nofollow"),d(Pe,"href","https://huggingface.co/spaces/osanseviero/repo_duplicator"),d(Pe,"rel","nofollow"),d(Ce,"href","https://colab.research.google.com/drive/1hANJeRa1PK1gZaUorobnQGu4bFj4_4Rf?usp=sharing"),d(Ce,"rel","nofollow"),d(xe,"href","https://huggingface.co/models?other=endpoints-template"),d(xe,"rel","nofollow"),d(Q,"id","1-set-up-development-environment"),d(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q,"href","#1-set-up-development-environment"),d(S,"class","relative group"),d(Se,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion"),d(Se,"rel","nofollow"),d(ee,"id","2-create-endpointhandler-cp"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#2-create-endpointhandler-cp"),d(O,"class","relative group"),d(se,"id","3-customize-endpointhandler"),d(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(se,"href","#3-customize-endpointhandler"),d(z,"class","relative group"),d(Ue,"href","https://huggingface.co/models?other=endpoints-template"),d(Ue,"rel","nofollow"),d(We,"href","https://pypi.org/project/holidays/"),d(We,"rel","nofollow"),d(oe,"id","4-test-endpointhandler"),d(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oe,"href","#4-test-endpointhandler"),d(F,"class","relative group"),d(ne,"id","5-push-the-custom-handler-to-your-repository"),d(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ne,"href","#5-push-the-custom-handler-to-your-repository"),d(M,"class","relative group"),d(Ve,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion/tree/main"),d(Ve,"rel","nofollow"),d(re,"id","6-deploy-your-custom-handler-as-an-inference-endpoint"),d(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(re,"href","#6-deploy-your-custom-handler-as-an-inference-endpoint"),d(R,"class","relative group"),d(at,"href","https://ui.endpoints.huggingface.co/"),d(at,"rel","nofollow")},m(e,i){t(document.head,x),p(e,ba,i),p(e,I,i),t(I,G),t(G,Et),_(ce,Et,null),t(I,Ls),t(I,gt),t(gt,zs),p(e,$a,i),p(e,W,i),t(W,Fs),t(W,ue),t(ue,Ms),t(W,Rs),p(e,ja,i),p(e,b,i),t(b,Bs),t(b,fe),t(fe,Us),t(b,Gs),t(b,me),t(me,Ws),t(b,Ys),t(b,bt),t(bt,Js),t(b,Xs),t(b,$t),t($t,Ks),t(b,Qs),p(e,ka,i),p(e,H,i),t(H,Zs),t(H,ye),t(ye,Vs),t(H,el),t(H,jt),t(jt,tl),t(H,al),p(e,Aa,i),p(e,D,i),t(D,Y),t(Y,kt),_(_e,kt,null),t(D,sl),t(D,At),t(At,ll),p(e,Ha,i),p(e,$,i),t($,ol),t($,ve),t(ve,nl),t($,rl),t($,Ht),t(Ht,il),t($,pl),t($,we),t(we,dl),t($,hl),p(e,qa,i),p(e,st,i),t(st,cl),p(e,Pa,i),p(e,u,i),t(u,qt),t(qt,Ee),t(Ee,ul),t(u,fl),t(u,Pt),t(Pt,ge),t(ge,ml),t(u,yl),t(u,Ct),t(Ct,be),t(be,_l),t(u,vl),t(u,Tt),t(Tt,$e),t($e,wl),t(u,El),t(u,xt),t(xt,je),t(je,gl),t(u,bl),t(u,It),t(It,ke),t(ke,$l),t(u,jl),t(u,Dt),t(Dt,Ae),t(Ae,kl),t(u,Al),t(u,Nt),t(Nt,lt),t(lt,Hl),t(u,ql),t(u,St),t(St,ot),t(ot,Pl),t(u,Cl),t(u,Ot),t(Ot,nt),t(nt,Tl),p(e,Ca,i),p(e,N,i),t(N,J),t(J,Lt),_(He,Lt,null),t(N,xl),t(N,zt),t(zt,Il),p(e,Ta,i),p(e,q,i),t(q,Dl),t(q,Ft),t(Ft,Nl),t(q,Sl),t(q,qe),t(qe,Ol),t(q,Ll),p(e,xa,i),p(e,X,i),t(X,zl),t(X,Pe),t(Pe,Fl),t(X,Ml),p(e,Ia,i),p(e,K,i),t(K,Rl),t(K,Ce),t(Ce,Bl),t(K,Ul),p(e,Da,i),p(e,Te,i),t(Te,Gl),t(Te,xe),t(xe,Wl),p(e,Na,i),p(e,S,i),t(S,Q),t(Q,Mt),_(Ie,Mt,null),t(S,Yl),t(S,Rt),t(Rt,Jl),p(e,Sa,i),p(e,De,i),t(De,Xl),t(De,Bt),t(Bt,Kl),p(e,Oa,i),_(Ne,e,i),p(e,La,i),p(e,rt,i),t(rt,Ql),p(e,za,i),p(e,Z,i),t(Z,Zl),t(Z,Se),t(Se,Vl),t(Z,eo),p(e,Fa,i),_(Oe,e,i),p(e,Ma,i),p(e,V,i),t(V,to),t(V,Ut),t(Ut,ao),t(V,so),p(e,Ra,i),p(e,it,i),t(it,Gt),t(Gt,lo),p(e,Ba,i),_(Le,e,i),p(e,Ua,i),p(e,O,i),t(O,ee),t(ee,Wt),_(ze,Wt,null),t(O,oo),t(O,Yt),t(Yt,no),p(e,Ga,i),p(e,g,i),t(g,ro),t(g,Jt),t(Jt,io),t(g,po),t(g,Xt),t(Xt,ho),t(g,co),t(g,Kt),t(Kt,uo),t(g,fo),t(g,Qt),t(Qt,mo),t(g,yo),t(g,Zt),t(Zt,_o),t(g,vo),p(e,Wa,i),p(e,te,i),t(te,Fe),t(Fe,wo),t(Fe,Vt),t(Vt,Eo),t(Fe,go),t(te,bo),t(te,L),t(L,$o),t(L,ea),t(ea,jo),t(L,ko),t(L,ta),t(ta,Ao),t(L,Ho),p(e,Ya,i),p(e,ae,i),t(ae,qo),t(ae,aa),t(aa,Po),t(ae,Co),p(e,Ja,i),_(Me,e,i),p(e,Xa,i),p(e,j,i),t(j,To),t(j,sa),t(sa,xo),t(j,Io),t(j,la),t(la,Do),t(j,No),t(j,oa),t(oa,So),t(j,Oo),p(e,Ka,i),_(Re,e,i),p(e,Qa,i),p(e,z,i),t(z,se),t(se,na),_(Be,na,null),t(z,Lo),t(z,ra),t(ra,zo),p(e,Za,i),p(e,le,i),t(le,Fo),t(le,Ue),t(Ue,Mo),t(le,Ro),p(e,Va,i),p(e,Ge,i),t(Ge,ia),t(ia,Bo),t(Ge,Uo),p(e,es,i),p(e,P,i),t(P,Go),t(P,pa),t(pa,Wo),t(P,Yo),t(P,We),t(We,Jo),t(P,Xo),p(e,ts,i),_(Ye,e,i),p(e,as,i),p(e,C,i),t(C,Ko),t(C,da),t(da,Qo),t(C,Zo),t(C,ha),t(ha,Vo),t(C,en),p(e,ss,i),_(Je,e,i),p(e,ls,i),p(e,F,i),t(F,oe),t(oe,ca),_(Xe,ca,null),t(F,tn),t(F,ua),t(ua,an),p(e,os,i),p(e,pt,i),t(pt,sn),p(e,ns,i),_(Ke,e,i),p(e,rs,i),p(e,dt,i),t(dt,ln),p(e,is,i),p(e,ht,i),t(ht,fa),t(fa,on),p(e,ps,i),p(e,M,i),t(M,ne),t(ne,ma),_(Qe,ma,null),t(M,nn),t(M,ya),t(ya,rn),p(e,ds,i),p(e,ct,i),t(ct,pn),p(e,hs,i),_(Ze,e,i),p(e,cs,i),p(e,k,i),t(k,dn),t(k,_a),t(_a,hn),t(k,cn),t(k,va),t(va,un),t(k,fn),t(k,Ve),t(Ve,mn),t(k,yn),p(e,us,i),p(e,R,i),t(R,re),t(re,wa),_(et,wa,null),t(R,_n),t(R,Ea),t(Ea,vn),p(e,fs,i),p(e,ut,i),t(ut,wn),p(e,ms,i),p(e,ie,i),t(ie,En),t(ie,ga),t(ga,gn),t(ie,bn),p(e,ys,i),p(e,ft,i),t(ft,tt),t(tt,$n),t(tt,at),t(at,jn),t(tt,kn),_s=!0},p:ki,i(e){_s||(v(ce.$$.fragment,e),v(_e.$$.fragment,e),v(He.$$.fragment,e),v(Ie.$$.fragment,e),v(Ne.$$.fragment,e),v(Oe.$$.fragment,e),v(Le.$$.fragment,e),v(ze.$$.fragment,e),v(Me.$$.fragment,e),v(Re.$$.fragment,e),v(Be.$$.fragment,e),v(Ye.$$.fragment,e),v(Je.$$.fragment,e),v(Xe.$$.fragment,e),v(Ke.$$.fragment,e),v(Qe.$$.fragment,e),v(Ze.$$.fragment,e),v(et.$$.fragment,e),_s=!0)},o(e){w(ce.$$.fragment,e),w(_e.$$.fragment,e),w(He.$$.fragment,e),w(Ie.$$.fragment,e),w(Ne.$$.fragment,e),w(Oe.$$.fragment,e),w(Le.$$.fragment,e),w(ze.$$.fragment,e),w(Me.$$.fragment,e),w(Re.$$.fragment,e),w(Be.$$.fragment,e),w(Ye.$$.fragment,e),w(Je.$$.fragment,e),w(Xe.$$.fragment,e),w(Ke.$$.fragment,e),w(Qe.$$.fragment,e),w(Ze.$$.fragment,e),w(et.$$.fragment,e),_s=!1},d(e){a(x),e&&a(ba),e&&a(I),E(ce),e&&a($a),e&&a(W),e&&a(ja),e&&a(b),e&&a(ka),e&&a(H),e&&a(Aa),e&&a(D),E(_e),e&&a(Ha),e&&a($),e&&a(qa),e&&a(st),e&&a(Pa),e&&a(u),e&&a(Ca),e&&a(N),E(He),e&&a(Ta),e&&a(q),e&&a(xa),e&&a(X),e&&a(Ia),e&&a(K),e&&a(Da),e&&a(Te),e&&a(Na),e&&a(S),E(Ie),e&&a(Sa),e&&a(De),e&&a(Oa),E(Ne,e),e&&a(La),e&&a(rt),e&&a(za),e&&a(Z),e&&a(Fa),E(Oe,e),e&&a(Ma),e&&a(V),e&&a(Ra),e&&a(it),e&&a(Ba),E(Le,e),e&&a(Ua),e&&a(O),E(ze),e&&a(Ga),e&&a(g),e&&a(Wa),e&&a(te),e&&a(Ya),e&&a(ae),e&&a(Ja),E(Me,e),e&&a(Xa),e&&a(j),e&&a(Ka),E(Re,e),e&&a(Qa),e&&a(z),E(Be),e&&a(Za),e&&a(le),e&&a(Va),e&&a(Ge),e&&a(es),e&&a(P),e&&a(ts),E(Ye,e),e&&a(as),e&&a(C),e&&a(ss),E(Je,e),e&&a(ls),e&&a(F),E(Xe),e&&a(os),e&&a(pt),e&&a(ns),E(Ke,e),e&&a(rs),e&&a(dt),e&&a(is),e&&a(ht),e&&a(ps),e&&a(M),E(Qe),e&&a(ds),e&&a(ct),e&&a(hs),E(Ze,e),e&&a(cs),e&&a(k),e&&a(us),e&&a(R),E(et),e&&a(fs),e&&a(ut),e&&a(ms),e&&a(ie),e&&a(ys),e&&a(ft)}}}const qi={local:"create-custom-inference-handler",sections:[{local:"custom-handler-examples",title:"Custom Handler Examples"},{local:"tutorial",sections:[{local:"1-set-up-development-environment",title:"1. Set up Development Environment"},{local:"2-create-endpointhandler-cp",title:"2. Create EndpointHandler (CP)"},{local:"3-customize-endpointhandler",title:"3. Customize EndpointHandler"},{local:"4-test-endpointhandler",title:"4. Test EndpointHandler"},{local:"5-push-the-custom-handler-to-your-repository",title:"5. Push the Custom Handler to your repository"},{local:"6-deploy-your-custom-handler-as-an-inference-endpoint",title:"6. Deploy your Custom Handler as an Inference Endpoint"}],title:"Tutorial"}],title:"Create custom Inference Handler"};function Pi(Pn){return Ai(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Ii extends gi{constructor(x){super();bi(this,x,Pi,Hi,$i,{})}}export{Ii as default,qi as metadata};
