import{S as si,i as li,s as oi,e as s,k as h,w as f,t as n,M as ni,c as l,d as a,m as c,a as o,x as m,h as r,b as d,G as t,g as p,y,L as ri,q as _,o as v,B as w,v as ii}from"../../chunks/vendor-hf-doc-builder.js";import{I as W}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";function pi(_n){let T,ya,I,U,_t,ce,Ts,vt,Is,_a,Y,Ds,ue,Ns,Os,va,g,Ss,fe,Ls,zs,me,Ms,Fs,wt,Rs,Ws,Et,Bs,Us,wa,H,Ys,ye,Gs,Js,gt,Xs,Ks,Ea,D,G,bt,_e,Qs,$t,Zs,ga,$,Vs,ve,el,tl,jt,al,sl,we,ll,ol,ba,st,nl,$a,u,kt,Ee,rl,il,At,ge,pl,dl,Ht,be,hl,cl,qt,$e,ul,fl,Ct,je,ml,yl,xt,ke,_l,vl,Pt,Ae,wl,ja,N,J,Tt,He,El,It,gl,ka,q,bl,Dt,$l,jl,qe,kl,Al,Aa,X,Hl,Ce,ql,Cl,Ha,K,xl,xe,Pl,Tl,qa,Pe,Il,Te,Dl,Ca,O,Q,Nt,Ie,Nl,Ot,Ol,xa,De,Sl,St,Ll,Pa,Ne,Ta,lt,zl,Ia,Z,Ml,Oe,Fl,Rl,Da,Se,Na,V,Wl,Lt,Bl,Ul,Oa,ot,zt,Yl,Sa,Le,La,S,ee,Mt,ze,Gl,Ft,Jl,za,E,Xl,Rt,Kl,Ql,Wt,Zl,Vl,Bt,eo,to,Ut,ao,so,Yt,lo,oo,Ma,te,Me,no,Gt,ro,io,po,L,ho,Jt,co,uo,Xt,fo,mo,Fa,ae,yo,Kt,_o,vo,Ra,Fe,Wa,j,wo,Qt,Eo,go,Zt,bo,$o,Vt,jo,ko,Ba,Re,Ua,z,se,ea,We,Ao,ta,Ho,Ya,le,qo,Be,Co,xo,Ga,Ue,aa,Po,To,Ja,C,Io,sa,Do,No,Ye,Oo,So,Xa,Ge,Ka,x,Lo,la,zo,Mo,oa,Fo,Ro,Qa,Je,Za,M,oe,na,Xe,Wo,ra,Bo,Va,nt,Uo,es,Ke,ts,rt,Yo,as,it,ia,Go,ss,F,ne,pa,Qe,Jo,da,Xo,ls,pt,Ko,os,Ze,ns,k,Qo,ha,Zo,Vo,ca,en,tn,Ve,an,sn,rs,R,re,ua,et,ln,fa,on,is,dt,nn,ps,ie,rn,ma,pn,dn,ds,ht,tt,hn,at,cn,un,hs;return ce=new W({}),_e=new W({}),He=new W({}),Ie=new W({}),Ne=new B({props:{code:`# install git-lfs to interact with the repository
sudo apt-get update
sudo apt-get install git-lfs
# install transformers (not needed since it is installed by default in the container)
pip install transformers[sklearn,sentencepiece,audio,vision]`,highlighted:`<span class="hljs-comment"># install git-lfs to interact with the repository</span>
sudo apt-<span class="hljs-built_in">get</span> update
sudo apt-<span class="hljs-built_in">get</span> install git-lfs
<span class="hljs-comment"># install transformers (not needed since it is installed by default in the container)</span>
pip install transformers[sklearn,sentencepiece,audio,vision]`}}),Se=new B({props:{code:`git lfs install
git clone https://huggingface.co/philschmid/distilbert-base-uncased-emotion`,highlighted:`git lfs install
git clone https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/philschmid/</span>distilbert-base-uncased-emotion`}}),Le=new B({props:{code:`# setup cli with token
huggingface-cli login
git config --global credential.helper store`,highlighted:`# setup <span class="hljs-keyword">cli</span> with <span class="hljs-keyword">token</span>
huggingface-<span class="hljs-keyword">cli</span> login
git config --<span class="hljs-keyword">global</span> credential.helper store`}}),ze=new W({}),Fe=new B({props:{code:"!cd distilbert-base-uncased-emotion && touch handler.py",highlighted:'!<span class="hljs-built_in">cd</span> distilbert-base-uncased-emotion &amp;&amp; <span class="hljs-built_in">touch</span> handler.py'}}),Re=new B({props:{code:`from typing import Dict, List, Any

class EndpointHandler():
    def __init__(self, path=""):
        # Preload all the elements you are going to need at inference.
        # pseudo:
        # self.model= load_model(path)

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """

        # pseudo
        # self.model(input)`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        <span class="hljs-comment"># Preload all the elements you are going to need at inference.</span>
        <span class="hljs-comment"># pseudo:</span>
        <span class="hljs-comment"># self.model= load_model(path)</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>

        <span class="hljs-comment"># pseudo</span>
        <span class="hljs-comment"># self.model(input)</span>`}}),We=new W({}),Ge=new B({props:{code:`!echo "holidays" >> requirements.txt
!pip install -r requirements.txt`,highlighted:`!echo <span class="hljs-string">&quot;holidays&quot;</span> &gt;&gt; requirements.txt
!pip install -r requirements.txt`}}),Je=new B({props:{code:`from typing import Dict, List, Any
from transformers import pipeline
import holidays

class EndpointHandler():
    def __init__(self, path=""):
        self.pipeline = pipeline("text-classification",model=path)
        self.holidays = holidays.US()

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """
        # get inputs
        inputs = data.pop("inputs",data)
        date = data.pop("date", None)

        # check if date exists and if it is a holiday
        if date is not None and date in self.holidays:
          return [{"label": "happy", "score": 1}]


        # run normal prediction
        prediction = self.pipeline(inputs)
        return prediction`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">import</span> holidays

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        self.pipeline = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=path)
        self.holidays = holidays.US()

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># get inputs</span>
        inputs = data.pop(<span class="hljs-string">&quot;inputs&quot;</span>,data)
        date = data.pop(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-literal">None</span>)

        <span class="hljs-comment"># check if date exists and if it is a holiday</span>
        <span class="hljs-keyword">if</span> date <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> date <span class="hljs-keyword">in</span> self.holidays:
          <span class="hljs-keyword">return</span> [{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">1</span>}]


        <span class="hljs-comment"># run normal prediction</span>
        prediction = self.pipeline(inputs)
        <span class="hljs-keyword">return</span> prediction`}}),Xe=new W({}),Ke=new B({props:{code:`from handler import EndpointHandler

# init handler
my_handler = EndpointHandler(path=".")

# prepare sample payload
non_holiday_payload = {"inputs": "I am quite excited how this will turn out", "date": "2022-08-08"}
holiday_payload = {"inputs": "Today is a though day", "date": "2022-07-04"}

# test the handler
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

# show results
print("non_holiday_pred", non_holiday_pred)
print("holiday_payload", holiday_payload)

# non_holiday_pred [{'label': 'joy', 'score': 0.9985942244529724}]
# holiday_payload [{'label': 'happy', 'score': 1}]`,highlighted:`<span class="hljs-keyword">from</span> handler <span class="hljs-keyword">import</span> EndpointHandler

<span class="hljs-comment"># init handler</span>
my_handler = EndpointHandler(path=<span class="hljs-string">&quot;.&quot;</span>)

<span class="hljs-comment"># prepare sample payload</span>
non_holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;I am quite excited how this will turn out&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-08-08&quot;</span>}
holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Today is a though day&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-07-04&quot;</span>}

<span class="hljs-comment"># test the handler</span>
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

<span class="hljs-comment"># show results</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;non_holiday_pred&quot;</span>, non_holiday_pred)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;holiday_payload&quot;</span>, holiday_payload)

<span class="hljs-comment"># non_holiday_pred [{&#x27;label&#x27;: &#x27;joy&#x27;, &#x27;score&#x27;: 0.9985942244529724}]</span>
<span class="hljs-comment"># holiday_payload [{&#x27;label&#x27;: &#x27;happy&#x27;, &#x27;score&#x27;: 1}]</span>`}}),Qe=new W({}),Ze=new B({props:{code:`# add all our new files
!git add *
# commit our files
!git commit -m "add custom handler"
# push the files to the hub
!git push`,highlighted:`# <span class="hljs-built_in">add</span> <span class="hljs-keyword">all</span> our <span class="hljs-keyword">new</span> <span class="hljs-keyword">files</span>
!git <span class="hljs-built_in">add</span> *
# commit our <span class="hljs-keyword">files</span>
!git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;add custom handler&quot;</span>
# push the <span class="hljs-keyword">files</span> <span class="hljs-keyword">to</span> the hub
!git push`}}),et=new W({}),{c(){T=s("meta"),ya=h(),I=s("h1"),U=s("a"),_t=s("span"),f(ce.$$.fragment),Ts=h(),vt=s("span"),Is=n("Create custom Inference Handler"),_a=h(),Y=s("p"),Ds=n("Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ue=s("a"),Ns=n("handler.py"),Os=n(" file in your model repository on the Hugging Face Hub."),va=h(),g=s("p"),Ss=n("The "),fe=s("a"),Ls=n("handler.py"),zs=n(" needs to implement the "),me=s("a"),Ms=n("EndpointHandler"),Fs=n(" class with a "),wt=s("code"),Rs=n("__init__"),Ws=n(" and a "),Et=s("code"),Bs=n("__call__"),Us=n(" method."),wa=h(),H=s("p"),Ys=n("If you want to use custom dependencies, e.g. "),ye=s("a"),Gs=n("optimum"),Js=n(", the dependencies must be listed in a "),gt=s("code"),Xs=n("requirements.txt"),Ks=n(" as described above in \u201Cadd custom dependencies.\u201D"),Ea=h(),D=s("h2"),G=s("a"),bt=s("span"),f(_e.$$.fragment),Qs=h(),$t=s("span"),Zs=n("Custom Handler Examples"),ga=h(),$=s("p"),Vs=n("There are already several public examples on the "),ve=s("a"),el=n("Hugging Face Hub"),tl=n(" where you can take insipiration or directly use them. The repositories are tagged with "),jt=s("code"),al=n("endpoints-template"),sl=n(" and can be found under this "),we=s("a"),ll=n("link"),ol=n("."),ba=h(),st=s("p"),nl=n("Included examples are for:"),$a=h(),u=s("ul"),kt=s("li"),Ee=s("a"),rl=n("Optimum and ONNX Runtime"),il=h(),At=s("li"),ge=s("a"),pl=n("Diffusers with stable-diffusion"),dl=h(),Ht=s("li"),be=s("a"),hl=n("Image Embeddings with BLIP"),cl=h(),qt=s("li"),$e=s("a"),ul=n("TrOCR for OCR Detection"),fl=h(),Ct=s("li"),je=s("a"),ml=n("Optimized Sentence Transformers with Optimum"),yl=h(),xt=s("li"),ke=s("a"),_l=n("OpenAI Whisper"),vl=h(),Pt=s("li"),Ae=s("a"),wl=n("LayoutLM"),ja=h(),N=s("h2"),J=s("a"),Tt=s("span"),f(He.$$.fragment),El=h(),It=s("span"),gl=n("Tutorial"),ka=h(),q=s("p"),bl=n("Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),Dt=s("em"),$l=n("WRITE"),jl=n(" access to the repository. To find, create and manage Access Tokens, click "),qe=s("a"),kl=n("here"),Al=n("."),Aa=h(),X=s("p"),Hl=n("If you want to write a Custom Handler for an existing model from the community, you can use the "),Ce=s("a"),ql=n("repo_duplicator"),Cl=n(" to create a repository fork."),Ha=h(),K=s("p"),xl=n("The code can also be found in this "),xe=s("a"),Pl=n("Notebook"),Tl=n("."),qa=h(),Pe=s("p"),Il=n("You can also search for already existing Custom Handlers here: "),Te=s("a"),Dl=n("https://huggingface.co/models?other=endpoints-template"),Ca=h(),O=s("h3"),Q=s("a"),Nt=s("span"),f(Ie.$$.fragment),Nl=h(),Ot=s("span"),Ol=n("1. Set up Development Environment"),xa=h(),De=s("p"),Sl=n(`The easiest way to develop our custom handler is to set up a local development environment, to implement, test, and iterate there, and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies.
`),St=s("em"),Ll=n("needed to create the custom handler, not needed for inference"),Pa=h(),f(Ne.$$.fragment),Ta=h(),lt=s("p"),zl=n("After we have installed our libraries we will clone our repository to our development environment."),Ia=h(),Z=s("p"),Ml=n("We will use "),Oe=s("a"),Fl=n("philschmid/distilbert-base-uncased-emotion"),Rl=n(" during the tutorial."),Da=h(),f(Se.$$.fragment),Na=h(),V=s("p"),Wl=n("To be able to push our CP later you need to login into our HF account. This can be done by using the "),Lt=s("code"),Bl=n("huggingface-cli"),Ul=n("."),Oa=h(),ot=s("p"),zt=s("em"),Yl=n("Note: Make sure to configure git config as well."),Sa=h(),f(Le.$$.fragment),La=h(),S=s("h3"),ee=s("a"),Mt=s("span"),f(ze.$$.fragment),Gl=h(),Ft=s("span"),Jl=n("2. Create EndpointHandler (CP)"),za=h(),E=s("p"),Xl=n("After we have set up our environment, we can start creating your custom handler. The custom handler is a Python class ("),Rt=s("code"),Kl=n("EndpointHandler"),Ql=n(") inside a "),Wt=s("code"),Zl=n("handler.py"),Vl=n(" file in our repository. The "),Bt=s("code"),eo=n("EndpointHandler"),to=n(" needs to implement an "),Ut=s("code"),ao=n("__init__"),so=n(" and a "),Yt=s("code"),lo=n("__call__"),oo=n(" method."),Ma=h(),te=s("ul"),Me=s("li"),no=n("The "),Gt=s("code"),ro=n("__init__"),io=n(" method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),po=h(),L=s("li"),ho=n("The "),Jt=s("code"),co=n("__call__"),uo=n(" method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),Xt=s("code"),fo=n("inputs"),mo=n(" key."),Fa=h(),ae=s("p"),yo=n("The first step is to create our "),Kt=s("code"),_o=n("handler.py"),vo=n(" in the local clone of our repository."),Ra=h(),f(Fe.$$.fragment),Wa=h(),j=s("p"),wo=n("In there, you define your "),Qt=s("code"),Eo=n("EndpointHandler"),go=n(" class with the "),Zt=s("code"),bo=n("__init__"),$o=n(" and "),Vt=s("code"),jo=n("__call__ "),ko=n("method."),Ba=h(),f(Re.$$.fragment),Ua=h(),z=s("h3"),se=s("a"),ea=s("span"),f(We.$$.fragment),Ao=h(),ta=s("span"),Ho=n("3. Customize EndpointHandler"),Ya=h(),le=s("p"),qo=n("Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Be=s("a"),Co=n("Custom Handler on the Hub"),xo=n(" if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),Ga=h(),Ue=s("p"),aa=s("em"),Po=n("The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),To=n("\u{1F334}\u{1F389}\u{1F606}"),Ja=h(),C=s("p"),Io=n("First, we need to create a new "),sa=s("code"),Do=n("requirements.txt"),No=n(" and add our "),Ye=s("a"),Oo=n("holiday detection package"),So=n(" and make sure we have it installed in our development environment as well."),Xa=h(),f(Ge.$$.fragment),Ka=h(),x=s("p"),Lo=n("Next, we have to adjust our "),la=s("code"),zo=n("handler.py"),Mo=n(" and "),oa=s("code"),Fo=n("EndpointHandler"),Ro=n(" to match our condition."),Qa=h(),f(Je.$$.fragment),Za=h(),M=s("h3"),oe=s("a"),na=s("span"),f(Xe.$$.fragment),Wo=h(),ra=s("span"),Bo=n("4. Test EndpointHandler"),Va=h(),nt=s("p"),Uo=n("To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),es=h(),f(Ke.$$.fragment),ts=h(),rt=s("p"),Yo=n("It works!!!! \u{1F389}"),as=h(),it=s("p"),ia=s("em"),Go=n("Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),ss=h(),F=s("h3"),ne=s("a"),pa=s("span"),f(Qe.$$.fragment),Jo=h(),da=s("span"),Xo=n("5. Push the Custom Handler to your repository"),ls=h(),pt=s("p"),Ko=n("After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),os=h(),f(Ze.$$.fragment),ns=h(),k=s("p"),Qo=n("Now, you should see your "),ha=s("code"),Zo=n("handler.py"),Vo=n(" and "),ca=s("code"),en=n("requirements.txt"),tn=n(" in your repository in the "),Ve=s("a"),an=n("\u201CFiles and version\u201D"),sn=n(" tab."),rs=h(),R=s("h3"),re=s("a"),ua=s("span"),f(et.$$.fragment),ln=h(),fa=s("span"),on=n("6. Deploy your Custom Handler as an Inference Endpoint"),is=h(),dt=s("p"),nn=n("The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),ps=h(),ie=s("p"),rn=n("The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),ma=s("code"),pn=n("handler.py"),dn=n(" available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),ds=h(),ht=s("p"),tt=s("em"),hn=n("Note: In your "),at=s("a"),cn=n("Inference Endpoints dashboard"),un=n(", the Task for this Endpoint should now be set to Custom"),this.h()},l(e){const i=ni('[data-svelte="svelte-1phssyn"]',document.head);T=l(i,"META",{name:!0,content:!0}),i.forEach(a),ya=c(e),I=l(e,"H1",{class:!0});var cs=o(I);U=l(cs,"A",{id:!0,class:!0,href:!0});var vn=o(U);_t=l(vn,"SPAN",{});var wn=o(_t);m(ce.$$.fragment,wn),wn.forEach(a),vn.forEach(a),Ts=c(cs),vt=l(cs,"SPAN",{});var En=o(vt);Is=r(En,"Create custom Inference Handler"),En.forEach(a),cs.forEach(a),_a=c(e),Y=l(e,"P",{});var us=o(Y);Ds=r(us,"Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ue=l(us,"A",{href:!0,rel:!0});var gn=o(ue);Ns=r(gn,"handler.py"),gn.forEach(a),Os=r(us," file in your model repository on the Hugging Face Hub."),us.forEach(a),va=c(e),g=l(e,"P",{});var P=o(g);Ss=r(P,"The "),fe=l(P,"A",{href:!0,rel:!0});var bn=o(fe);Ls=r(bn,"handler.py"),bn.forEach(a),zs=r(P," needs to implement the "),me=l(P,"A",{href:!0,rel:!0});var $n=o(me);Ms=r($n,"EndpointHandler"),$n.forEach(a),Fs=r(P," class with a "),wt=l(P,"CODE",{});var jn=o(wt);Rs=r(jn,"__init__"),jn.forEach(a),Ws=r(P," and a "),Et=l(P,"CODE",{});var kn=o(Et);Bs=r(kn,"__call__"),kn.forEach(a),Us=r(P," method."),P.forEach(a),wa=c(e),H=l(e,"P",{});var ct=o(H);Ys=r(ct,"If you want to use custom dependencies, e.g. "),ye=l(ct,"A",{href:!0,rel:!0});var An=o(ye);Gs=r(An,"optimum"),An.forEach(a),Js=r(ct,", the dependencies must be listed in a "),gt=l(ct,"CODE",{});var Hn=o(gt);Xs=r(Hn,"requirements.txt"),Hn.forEach(a),Ks=r(ct," as described above in \u201Cadd custom dependencies.\u201D"),ct.forEach(a),Ea=c(e),D=l(e,"H2",{class:!0});var fs=o(D);G=l(fs,"A",{id:!0,class:!0,href:!0});var qn=o(G);bt=l(qn,"SPAN",{});var Cn=o(bt);m(_e.$$.fragment,Cn),Cn.forEach(a),qn.forEach(a),Qs=c(fs),$t=l(fs,"SPAN",{});var xn=o($t);Zs=r(xn,"Custom Handler Examples"),xn.forEach(a),fs.forEach(a),ga=c(e),$=l(e,"P",{});var pe=o($);Vs=r(pe,"There are already several public examples on the "),ve=l(pe,"A",{href:!0,rel:!0});var Pn=o(ve);el=r(Pn,"Hugging Face Hub"),Pn.forEach(a),tl=r(pe," where you can take insipiration or directly use them. The repositories are tagged with "),jt=l(pe,"CODE",{});var Tn=o(jt);al=r(Tn,"endpoints-template"),Tn.forEach(a),sl=r(pe," and can be found under this "),we=l(pe,"A",{href:!0,rel:!0});var In=o(we);ll=r(In,"link"),In.forEach(a),ol=r(pe,"."),pe.forEach(a),ba=c(e),st=l(e,"P",{});var Dn=o(st);nl=r(Dn,"Included examples are for:"),Dn.forEach(a),$a=c(e),u=l(e,"UL",{});var b=o(u);kt=l(b,"LI",{});var Nn=o(kt);Ee=l(Nn,"A",{href:!0,rel:!0});var On=o(Ee);rl=r(On,"Optimum and ONNX Runtime"),On.forEach(a),Nn.forEach(a),il=c(b),At=l(b,"LI",{});var Sn=o(At);ge=l(Sn,"A",{href:!0,rel:!0});var Ln=o(ge);pl=r(Ln,"Diffusers with stable-diffusion"),Ln.forEach(a),Sn.forEach(a),dl=c(b),Ht=l(b,"LI",{});var zn=o(Ht);be=l(zn,"A",{href:!0,rel:!0});var Mn=o(be);hl=r(Mn,"Image Embeddings with BLIP"),Mn.forEach(a),zn.forEach(a),cl=c(b),qt=l(b,"LI",{});var Fn=o(qt);$e=l(Fn,"A",{href:!0,rel:!0});var Rn=o($e);ul=r(Rn,"TrOCR for OCR Detection"),Rn.forEach(a),Fn.forEach(a),fl=c(b),Ct=l(b,"LI",{});var Wn=o(Ct);je=l(Wn,"A",{href:!0,rel:!0});var Bn=o(je);ml=r(Bn,"Optimized Sentence Transformers with Optimum"),Bn.forEach(a),Wn.forEach(a),yl=c(b),xt=l(b,"LI",{});var Un=o(xt);ke=l(Un,"A",{href:!0,rel:!0});var Yn=o(ke);_l=r(Yn,"OpenAI Whisper"),Yn.forEach(a),Un.forEach(a),vl=c(b),Pt=l(b,"LI",{});var Gn=o(Pt);Ae=l(Gn,"A",{href:!0,rel:!0});var Jn=o(Ae);wl=r(Jn,"LayoutLM"),Jn.forEach(a),Gn.forEach(a),b.forEach(a),ja=c(e),N=l(e,"H2",{class:!0});var ms=o(N);J=l(ms,"A",{id:!0,class:!0,href:!0});var Xn=o(J);Tt=l(Xn,"SPAN",{});var Kn=o(Tt);m(He.$$.fragment,Kn),Kn.forEach(a),Xn.forEach(a),El=c(ms),It=l(ms,"SPAN",{});var Qn=o(It);gl=r(Qn,"Tutorial"),Qn.forEach(a),ms.forEach(a),ka=c(e),q=l(e,"P",{});var ut=o(q);bl=r(ut,"Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),Dt=l(ut,"EM",{});var Zn=o(Dt);$l=r(Zn,"WRITE"),Zn.forEach(a),jl=r(ut," access to the repository. To find, create and manage Access Tokens, click "),qe=l(ut,"A",{href:!0,rel:!0});var Vn=o(qe);kl=r(Vn,"here"),Vn.forEach(a),Al=r(ut,"."),ut.forEach(a),Aa=c(e),X=l(e,"P",{});var ys=o(X);Hl=r(ys,"If you want to write a Custom Handler for an existing model from the community, you can use the "),Ce=l(ys,"A",{href:!0,rel:!0});var er=o(Ce);ql=r(er,"repo_duplicator"),er.forEach(a),Cl=r(ys," to create a repository fork."),ys.forEach(a),Ha=c(e),K=l(e,"P",{});var _s=o(K);xl=r(_s,"The code can also be found in this "),xe=l(_s,"A",{href:!0,rel:!0});var tr=o(xe);Pl=r(tr,"Notebook"),tr.forEach(a),Tl=r(_s,"."),_s.forEach(a),qa=c(e),Pe=l(e,"P",{});var fn=o(Pe);Il=r(fn,"You can also search for already existing Custom Handlers here: "),Te=l(fn,"A",{href:!0,rel:!0});var ar=o(Te);Dl=r(ar,"https://huggingface.co/models?other=endpoints-template"),ar.forEach(a),fn.forEach(a),Ca=c(e),O=l(e,"H3",{class:!0});var vs=o(O);Q=l(vs,"A",{id:!0,class:!0,href:!0});var sr=o(Q);Nt=l(sr,"SPAN",{});var lr=o(Nt);m(Ie.$$.fragment,lr),lr.forEach(a),sr.forEach(a),Nl=c(vs),Ot=l(vs,"SPAN",{});var or=o(Ot);Ol=r(or,"1. Set up Development Environment"),or.forEach(a),vs.forEach(a),xa=c(e),De=l(e,"P",{});var mn=o(De);Sl=r(mn,`The easiest way to develop our custom handler is to set up a local development environment, to implement, test, and iterate there, and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies.
`),St=l(mn,"EM",{});var nr=o(St);Ll=r(nr,"needed to create the custom handler, not needed for inference"),nr.forEach(a),mn.forEach(a),Pa=c(e),m(Ne.$$.fragment,e),Ta=c(e),lt=l(e,"P",{});var rr=o(lt);zl=r(rr,"After we have installed our libraries we will clone our repository to our development environment."),rr.forEach(a),Ia=c(e),Z=l(e,"P",{});var ws=o(Z);Ml=r(ws,"We will use "),Oe=l(ws,"A",{href:!0,rel:!0});var ir=o(Oe);Fl=r(ir,"philschmid/distilbert-base-uncased-emotion"),ir.forEach(a),Rl=r(ws," during the tutorial."),ws.forEach(a),Da=c(e),m(Se.$$.fragment,e),Na=c(e),V=l(e,"P",{});var Es=o(V);Wl=r(Es,"To be able to push our CP later you need to login into our HF account. This can be done by using the "),Lt=l(Es,"CODE",{});var pr=o(Lt);Bl=r(pr,"huggingface-cli"),pr.forEach(a),Ul=r(Es,"."),Es.forEach(a),Oa=c(e),ot=l(e,"P",{});var dr=o(ot);zt=l(dr,"EM",{});var hr=o(zt);Yl=r(hr,"Note: Make sure to configure git config as well."),hr.forEach(a),dr.forEach(a),Sa=c(e),m(Le.$$.fragment,e),La=c(e),S=l(e,"H3",{class:!0});var gs=o(S);ee=l(gs,"A",{id:!0,class:!0,href:!0});var cr=o(ee);Mt=l(cr,"SPAN",{});var ur=o(Mt);m(ze.$$.fragment,ur),ur.forEach(a),cr.forEach(a),Gl=c(gs),Ft=l(gs,"SPAN",{});var fr=o(Ft);Jl=r(fr,"2. Create EndpointHandler (CP)"),fr.forEach(a),gs.forEach(a),za=c(e),E=l(e,"P",{});var A=o(E);Xl=r(A,"After we have set up our environment, we can start creating your custom handler. The custom handler is a Python class ("),Rt=l(A,"CODE",{});var mr=o(Rt);Kl=r(mr,"EndpointHandler"),mr.forEach(a),Ql=r(A,") inside a "),Wt=l(A,"CODE",{});var yr=o(Wt);Zl=r(yr,"handler.py"),yr.forEach(a),Vl=r(A," file in our repository. The "),Bt=l(A,"CODE",{});var _r=o(Bt);eo=r(_r,"EndpointHandler"),_r.forEach(a),to=r(A," needs to implement an "),Ut=l(A,"CODE",{});var vr=o(Ut);ao=r(vr,"__init__"),vr.forEach(a),so=r(A," and a "),Yt=l(A,"CODE",{});var wr=o(Yt);lo=r(wr,"__call__"),wr.forEach(a),oo=r(A," method."),A.forEach(a),Ma=c(e),te=l(e,"UL",{});var bs=o(te);Me=l(bs,"LI",{});var $s=o(Me);no=r($s,"The "),Gt=l($s,"CODE",{});var Er=o(Gt);ro=r(Er,"__init__"),Er.forEach(a),io=r($s," method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),$s.forEach(a),po=c(bs),L=l(bs,"LI",{});var ft=o(L);ho=r(ft,"The "),Jt=l(ft,"CODE",{});var gr=o(Jt);co=r(gr,"__call__"),gr.forEach(a),uo=r(ft," method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),Xt=l(ft,"CODE",{});var br=o(Xt);fo=r(br,"inputs"),br.forEach(a),mo=r(ft," key."),ft.forEach(a),bs.forEach(a),Fa=c(e),ae=l(e,"P",{});var js=o(ae);yo=r(js,"The first step is to create our "),Kt=l(js,"CODE",{});var $r=o(Kt);_o=r($r,"handler.py"),$r.forEach(a),vo=r(js," in the local clone of our repository."),js.forEach(a),Ra=c(e),m(Fe.$$.fragment,e),Wa=c(e),j=l(e,"P",{});var de=o(j);wo=r(de,"In there, you define your "),Qt=l(de,"CODE",{});var jr=o(Qt);Eo=r(jr,"EndpointHandler"),jr.forEach(a),go=r(de," class with the "),Zt=l(de,"CODE",{});var kr=o(Zt);bo=r(kr,"__init__"),kr.forEach(a),$o=r(de," and "),Vt=l(de,"CODE",{});var Ar=o(Vt);jo=r(Ar,"__call__ "),Ar.forEach(a),ko=r(de,"method."),de.forEach(a),Ba=c(e),m(Re.$$.fragment,e),Ua=c(e),z=l(e,"H3",{class:!0});var ks=o(z);se=l(ks,"A",{id:!0,class:!0,href:!0});var Hr=o(se);ea=l(Hr,"SPAN",{});var qr=o(ea);m(We.$$.fragment,qr),qr.forEach(a),Hr.forEach(a),Ao=c(ks),ta=l(ks,"SPAN",{});var Cr=o(ta);Ho=r(Cr,"3. Customize EndpointHandler"),Cr.forEach(a),ks.forEach(a),Ya=c(e),le=l(e,"P",{});var As=o(le);qo=r(As,"Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Be=l(As,"A",{href:!0,rel:!0});var xr=o(Be);Co=r(xr,"Custom Handler on the Hub"),xr.forEach(a),xo=r(As," if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),As.forEach(a),Ga=c(e),Ue=l(e,"P",{});var yn=o(Ue);aa=l(yn,"EM",{});var Pr=o(aa);Po=r(Pr,"The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),Pr.forEach(a),To=r(yn,"\u{1F334}\u{1F389}\u{1F606}"),yn.forEach(a),Ja=c(e),C=l(e,"P",{});var mt=o(C);Io=r(mt,"First, we need to create a new "),sa=l(mt,"CODE",{});var Tr=o(sa);Do=r(Tr,"requirements.txt"),Tr.forEach(a),No=r(mt," and add our "),Ye=l(mt,"A",{href:!0,rel:!0});var Ir=o(Ye);Oo=r(Ir,"holiday detection package"),Ir.forEach(a),So=r(mt," and make sure we have it installed in our development environment as well."),mt.forEach(a),Xa=c(e),m(Ge.$$.fragment,e),Ka=c(e),x=l(e,"P",{});var yt=o(x);Lo=r(yt,"Next, we have to adjust our "),la=l(yt,"CODE",{});var Dr=o(la);zo=r(Dr,"handler.py"),Dr.forEach(a),Mo=r(yt," and "),oa=l(yt,"CODE",{});var Nr=o(oa);Fo=r(Nr,"EndpointHandler"),Nr.forEach(a),Ro=r(yt," to match our condition."),yt.forEach(a),Qa=c(e),m(Je.$$.fragment,e),Za=c(e),M=l(e,"H3",{class:!0});var Hs=o(M);oe=l(Hs,"A",{id:!0,class:!0,href:!0});var Or=o(oe);na=l(Or,"SPAN",{});var Sr=o(na);m(Xe.$$.fragment,Sr),Sr.forEach(a),Or.forEach(a),Wo=c(Hs),ra=l(Hs,"SPAN",{});var Lr=o(ra);Bo=r(Lr,"4. Test EndpointHandler"),Lr.forEach(a),Hs.forEach(a),Va=c(e),nt=l(e,"P",{});var zr=o(nt);Uo=r(zr,"To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),zr.forEach(a),es=c(e),m(Ke.$$.fragment,e),ts=c(e),rt=l(e,"P",{});var Mr=o(rt);Yo=r(Mr,"It works!!!! \u{1F389}"),Mr.forEach(a),as=c(e),it=l(e,"P",{});var Fr=o(it);ia=l(Fr,"EM",{});var Rr=o(ia);Go=r(Rr,"Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),Rr.forEach(a),Fr.forEach(a),ss=c(e),F=l(e,"H3",{class:!0});var qs=o(F);ne=l(qs,"A",{id:!0,class:!0,href:!0});var Wr=o(ne);pa=l(Wr,"SPAN",{});var Br=o(pa);m(Qe.$$.fragment,Br),Br.forEach(a),Wr.forEach(a),Jo=c(qs),da=l(qs,"SPAN",{});var Ur=o(da);Xo=r(Ur,"5. Push the Custom Handler to your repository"),Ur.forEach(a),qs.forEach(a),ls=c(e),pt=l(e,"P",{});var Yr=o(pt);Ko=r(Yr,"After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),Yr.forEach(a),os=c(e),m(Ze.$$.fragment,e),ns=c(e),k=l(e,"P",{});var he=o(k);Qo=r(he,"Now, you should see your "),ha=l(he,"CODE",{});var Gr=o(ha);Zo=r(Gr,"handler.py"),Gr.forEach(a),Vo=r(he," and "),ca=l(he,"CODE",{});var Jr=o(ca);en=r(Jr,"requirements.txt"),Jr.forEach(a),tn=r(he," in your repository in the "),Ve=l(he,"A",{href:!0,rel:!0});var Xr=o(Ve);an=r(Xr,"\u201CFiles and version\u201D"),Xr.forEach(a),sn=r(he," tab."),he.forEach(a),rs=c(e),R=l(e,"H3",{class:!0});var Cs=o(R);re=l(Cs,"A",{id:!0,class:!0,href:!0});var Kr=o(re);ua=l(Kr,"SPAN",{});var Qr=o(ua);m(et.$$.fragment,Qr),Qr.forEach(a),Kr.forEach(a),ln=c(Cs),fa=l(Cs,"SPAN",{});var Zr=o(fa);on=r(Zr,"6. Deploy your Custom Handler as an Inference Endpoint"),Zr.forEach(a),Cs.forEach(a),is=c(e),dt=l(e,"P",{});var Vr=o(dt);nn=r(Vr,"The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),Vr.forEach(a),ps=c(e),ie=l(e,"P",{});var xs=o(ie);rn=r(xs,"The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),ma=l(xs,"CODE",{});var ei=o(ma);pn=r(ei,"handler.py"),ei.forEach(a),dn=r(xs," available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),xs.forEach(a),ds=c(e),ht=l(e,"P",{});var ti=o(ht);tt=l(ti,"EM",{});var Ps=o(tt);hn=r(Ps,"Note: In your "),at=l(Ps,"A",{href:!0,rel:!0});var ai=o(at);cn=r(ai,"Inference Endpoints dashboard"),ai.forEach(a),un=r(Ps,", the Task for this Endpoint should now be set to Custom"),Ps.forEach(a),ti.forEach(a),this.h()},h(){d(T,"name","hf:doc:metadata"),d(T,"content",JSON.stringify(di)),d(U,"id","create-custom-inference-handler"),d(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U,"href","#create-custom-inference-handler"),d(I,"class","relative group"),d(ue,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(ue,"rel","nofollow"),d(fe,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(fe,"rel","nofollow"),d(me,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(me,"rel","nofollow"),d(ye,"href","https://raw.githubusercontent.com/huggingface/optimum"),d(ye,"rel","nofollow"),d(G,"id","custom-handler-examples"),d(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G,"href","#custom-handler-examples"),d(D,"class","relative group"),d(ve,"href","https://huggingface.co/models?other=endpoints-template"),d(ve,"rel","nofollow"),d(we,"href","https://huggingface.co/models?other=endpoints-template"),d(we,"rel","nofollow"),d(Ee,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77"),d(Ee,"rel","nofollow"),d(ge,"href","https://huggingface.co/philschmid/stable-diffusion-v1-4-endpoints"),d(ge,"rel","nofollow"),d(be,"href","https://huggingface.co/florentgbelidji/blip_image_embeddings"),d(be,"rel","nofollow"),d($e,"href","https://huggingface.co/philschmid/trocr-base-printed"),d($e,"rel","nofollow"),d(je,"href","https://huggingface.co/philschmid/all-MiniLM-L6-v2-optimum-embeddings"),d(je,"rel","nofollow"),d(ke,"href","https://huggingface.co/philschmid/openai-whisper-endpoint"),d(ke,"rel","nofollow"),d(Ae,"href","https://huggingface.co/philschmid/layoutlm-funsd"),d(Ae,"rel","nofollow"),d(J,"id","tutorial"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#tutorial"),d(N,"class","relative group"),d(qe,"href","https://huggingface.co/settings/tokens"),d(qe,"rel","nofollow"),d(Ce,"href","https://huggingface.co/spaces/osanseviero/repo_duplicator"),d(Ce,"rel","nofollow"),d(xe,"href","https://colab.research.google.com/drive/1hANJeRa1PK1gZaUorobnQGu4bFj4_4Rf?usp=sharing"),d(xe,"rel","nofollow"),d(Te,"href","https://huggingface.co/models?other=endpoints-template"),d(Te,"rel","nofollow"),d(Q,"id","1-set-up-development-environment"),d(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q,"href","#1-set-up-development-environment"),d(O,"class","relative group"),d(Oe,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion"),d(Oe,"rel","nofollow"),d(ee,"id","2-create-endpointhandler-cp"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#2-create-endpointhandler-cp"),d(S,"class","relative group"),d(se,"id","3-customize-endpointhandler"),d(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(se,"href","#3-customize-endpointhandler"),d(z,"class","relative group"),d(Be,"href","https://huggingface.co/models?other=endpoints-template"),d(Be,"rel","nofollow"),d(Ye,"href","https://pypi.org/project/holidays/"),d(Ye,"rel","nofollow"),d(oe,"id","4-test-endpointhandler"),d(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oe,"href","#4-test-endpointhandler"),d(M,"class","relative group"),d(ne,"id","5-push-the-custom-handler-to-your-repository"),d(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ne,"href","#5-push-the-custom-handler-to-your-repository"),d(F,"class","relative group"),d(Ve,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion/tree/main"),d(Ve,"rel","nofollow"),d(re,"id","6-deploy-your-custom-handler-as-an-inference-endpoint"),d(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(re,"href","#6-deploy-your-custom-handler-as-an-inference-endpoint"),d(R,"class","relative group"),d(at,"href","https://ui.endpoints.huggingface.co/"),d(at,"rel","nofollow")},m(e,i){t(document.head,T),p(e,ya,i),p(e,I,i),t(I,U),t(U,_t),y(ce,_t,null),t(I,Ts),t(I,vt),t(vt,Is),p(e,_a,i),p(e,Y,i),t(Y,Ds),t(Y,ue),t(ue,Ns),t(Y,Os),p(e,va,i),p(e,g,i),t(g,Ss),t(g,fe),t(fe,Ls),t(g,zs),t(g,me),t(me,Ms),t(g,Fs),t(g,wt),t(wt,Rs),t(g,Ws),t(g,Et),t(Et,Bs),t(g,Us),p(e,wa,i),p(e,H,i),t(H,Ys),t(H,ye),t(ye,Gs),t(H,Js),t(H,gt),t(gt,Xs),t(H,Ks),p(e,Ea,i),p(e,D,i),t(D,G),t(G,bt),y(_e,bt,null),t(D,Qs),t(D,$t),t($t,Zs),p(e,ga,i),p(e,$,i),t($,Vs),t($,ve),t(ve,el),t($,tl),t($,jt),t(jt,al),t($,sl),t($,we),t(we,ll),t($,ol),p(e,ba,i),p(e,st,i),t(st,nl),p(e,$a,i),p(e,u,i),t(u,kt),t(kt,Ee),t(Ee,rl),t(u,il),t(u,At),t(At,ge),t(ge,pl),t(u,dl),t(u,Ht),t(Ht,be),t(be,hl),t(u,cl),t(u,qt),t(qt,$e),t($e,ul),t(u,fl),t(u,Ct),t(Ct,je),t(je,ml),t(u,yl),t(u,xt),t(xt,ke),t(ke,_l),t(u,vl),t(u,Pt),t(Pt,Ae),t(Ae,wl),p(e,ja,i),p(e,N,i),t(N,J),t(J,Tt),y(He,Tt,null),t(N,El),t(N,It),t(It,gl),p(e,ka,i),p(e,q,i),t(q,bl),t(q,Dt),t(Dt,$l),t(q,jl),t(q,qe),t(qe,kl),t(q,Al),p(e,Aa,i),p(e,X,i),t(X,Hl),t(X,Ce),t(Ce,ql),t(X,Cl),p(e,Ha,i),p(e,K,i),t(K,xl),t(K,xe),t(xe,Pl),t(K,Tl),p(e,qa,i),p(e,Pe,i),t(Pe,Il),t(Pe,Te),t(Te,Dl),p(e,Ca,i),p(e,O,i),t(O,Q),t(Q,Nt),y(Ie,Nt,null),t(O,Nl),t(O,Ot),t(Ot,Ol),p(e,xa,i),p(e,De,i),t(De,Sl),t(De,St),t(St,Ll),p(e,Pa,i),y(Ne,e,i),p(e,Ta,i),p(e,lt,i),t(lt,zl),p(e,Ia,i),p(e,Z,i),t(Z,Ml),t(Z,Oe),t(Oe,Fl),t(Z,Rl),p(e,Da,i),y(Se,e,i),p(e,Na,i),p(e,V,i),t(V,Wl),t(V,Lt),t(Lt,Bl),t(V,Ul),p(e,Oa,i),p(e,ot,i),t(ot,zt),t(zt,Yl),p(e,Sa,i),y(Le,e,i),p(e,La,i),p(e,S,i),t(S,ee),t(ee,Mt),y(ze,Mt,null),t(S,Gl),t(S,Ft),t(Ft,Jl),p(e,za,i),p(e,E,i),t(E,Xl),t(E,Rt),t(Rt,Kl),t(E,Ql),t(E,Wt),t(Wt,Zl),t(E,Vl),t(E,Bt),t(Bt,eo),t(E,to),t(E,Ut),t(Ut,ao),t(E,so),t(E,Yt),t(Yt,lo),t(E,oo),p(e,Ma,i),p(e,te,i),t(te,Me),t(Me,no),t(Me,Gt),t(Gt,ro),t(Me,io),t(te,po),t(te,L),t(L,ho),t(L,Jt),t(Jt,co),t(L,uo),t(L,Xt),t(Xt,fo),t(L,mo),p(e,Fa,i),p(e,ae,i),t(ae,yo),t(ae,Kt),t(Kt,_o),t(ae,vo),p(e,Ra,i),y(Fe,e,i),p(e,Wa,i),p(e,j,i),t(j,wo),t(j,Qt),t(Qt,Eo),t(j,go),t(j,Zt),t(Zt,bo),t(j,$o),t(j,Vt),t(Vt,jo),t(j,ko),p(e,Ba,i),y(Re,e,i),p(e,Ua,i),p(e,z,i),t(z,se),t(se,ea),y(We,ea,null),t(z,Ao),t(z,ta),t(ta,Ho),p(e,Ya,i),p(e,le,i),t(le,qo),t(le,Be),t(Be,Co),t(le,xo),p(e,Ga,i),p(e,Ue,i),t(Ue,aa),t(aa,Po),t(Ue,To),p(e,Ja,i),p(e,C,i),t(C,Io),t(C,sa),t(sa,Do),t(C,No),t(C,Ye),t(Ye,Oo),t(C,So),p(e,Xa,i),y(Ge,e,i),p(e,Ka,i),p(e,x,i),t(x,Lo),t(x,la),t(la,zo),t(x,Mo),t(x,oa),t(oa,Fo),t(x,Ro),p(e,Qa,i),y(Je,e,i),p(e,Za,i),p(e,M,i),t(M,oe),t(oe,na),y(Xe,na,null),t(M,Wo),t(M,ra),t(ra,Bo),p(e,Va,i),p(e,nt,i),t(nt,Uo),p(e,es,i),y(Ke,e,i),p(e,ts,i),p(e,rt,i),t(rt,Yo),p(e,as,i),p(e,it,i),t(it,ia),t(ia,Go),p(e,ss,i),p(e,F,i),t(F,ne),t(ne,pa),y(Qe,pa,null),t(F,Jo),t(F,da),t(da,Xo),p(e,ls,i),p(e,pt,i),t(pt,Ko),p(e,os,i),y(Ze,e,i),p(e,ns,i),p(e,k,i),t(k,Qo),t(k,ha),t(ha,Zo),t(k,Vo),t(k,ca),t(ca,en),t(k,tn),t(k,Ve),t(Ve,an),t(k,sn),p(e,rs,i),p(e,R,i),t(R,re),t(re,ua),y(et,ua,null),t(R,ln),t(R,fa),t(fa,on),p(e,is,i),p(e,dt,i),t(dt,nn),p(e,ps,i),p(e,ie,i),t(ie,rn),t(ie,ma),t(ma,pn),t(ie,dn),p(e,ds,i),p(e,ht,i),t(ht,tt),t(tt,hn),t(tt,at),t(at,cn),t(tt,un),hs=!0},p:ri,i(e){hs||(_(ce.$$.fragment,e),_(_e.$$.fragment,e),_(He.$$.fragment,e),_(Ie.$$.fragment,e),_(Ne.$$.fragment,e),_(Se.$$.fragment,e),_(Le.$$.fragment,e),_(ze.$$.fragment,e),_(Fe.$$.fragment,e),_(Re.$$.fragment,e),_(We.$$.fragment,e),_(Ge.$$.fragment,e),_(Je.$$.fragment,e),_(Xe.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),hs=!0)},o(e){v(ce.$$.fragment,e),v(_e.$$.fragment,e),v(He.$$.fragment,e),v(Ie.$$.fragment,e),v(Ne.$$.fragment,e),v(Se.$$.fragment,e),v(Le.$$.fragment,e),v(ze.$$.fragment,e),v(Fe.$$.fragment,e),v(Re.$$.fragment,e),v(We.$$.fragment,e),v(Ge.$$.fragment,e),v(Je.$$.fragment,e),v(Xe.$$.fragment,e),v(Ke.$$.fragment,e),v(Qe.$$.fragment,e),v(Ze.$$.fragment,e),v(et.$$.fragment,e),hs=!1},d(e){a(T),e&&a(ya),e&&a(I),w(ce),e&&a(_a),e&&a(Y),e&&a(va),e&&a(g),e&&a(wa),e&&a(H),e&&a(Ea),e&&a(D),w(_e),e&&a(ga),e&&a($),e&&a(ba),e&&a(st),e&&a($a),e&&a(u),e&&a(ja),e&&a(N),w(He),e&&a(ka),e&&a(q),e&&a(Aa),e&&a(X),e&&a(Ha),e&&a(K),e&&a(qa),e&&a(Pe),e&&a(Ca),e&&a(O),w(Ie),e&&a(xa),e&&a(De),e&&a(Pa),w(Ne,e),e&&a(Ta),e&&a(lt),e&&a(Ia),e&&a(Z),e&&a(Da),w(Se,e),e&&a(Na),e&&a(V),e&&a(Oa),e&&a(ot),e&&a(Sa),w(Le,e),e&&a(La),e&&a(S),w(ze),e&&a(za),e&&a(E),e&&a(Ma),e&&a(te),e&&a(Fa),e&&a(ae),e&&a(Ra),w(Fe,e),e&&a(Wa),e&&a(j),e&&a(Ba),w(Re,e),e&&a(Ua),e&&a(z),w(We),e&&a(Ya),e&&a(le),e&&a(Ga),e&&a(Ue),e&&a(Ja),e&&a(C),e&&a(Xa),w(Ge,e),e&&a(Ka),e&&a(x),e&&a(Qa),w(Je,e),e&&a(Za),e&&a(M),w(Xe),e&&a(Va),e&&a(nt),e&&a(es),w(Ke,e),e&&a(ts),e&&a(rt),e&&a(as),e&&a(it),e&&a(ss),e&&a(F),w(Qe),e&&a(ls),e&&a(pt),e&&a(os),w(Ze,e),e&&a(ns),e&&a(k),e&&a(rs),e&&a(R),w(et),e&&a(is),e&&a(dt),e&&a(ps),e&&a(ie),e&&a(ds),e&&a(ht)}}}const di={local:"create-custom-inference-handler",sections:[{local:"custom-handler-examples",title:"Custom Handler Examples"},{local:"tutorial",sections:[{local:"1-set-up-development-environment",title:"1. Set up Development Environment"},{local:"2-create-endpointhandler-cp",title:"2. Create EndpointHandler (CP)"},{local:"3-customize-endpointhandler",title:"3. Customize EndpointHandler"},{local:"4-test-endpointhandler",title:"4. Test EndpointHandler"},{local:"5-push-the-custom-handler-to-your-repository",title:"5. Push the Custom Handler to your repository"},{local:"6-deploy-your-custom-handler-as-an-inference-endpoint",title:"6. Deploy your Custom Handler as an Inference Endpoint"}],title:"Tutorial"}],title:"Create custom Inference Handler"};function hi(_n){return ii(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class mi extends si{constructor(T){super();li(this,T,hi,pi,oi,{})}}export{mi as default,di as metadata};
