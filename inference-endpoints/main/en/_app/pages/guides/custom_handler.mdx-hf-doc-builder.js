import{S as Or,i as Sr,s as Lr,e as s,k as h,w as c,t as l,M as zr,c as o,d as a,m as u,a as r,x as f,h as n,b as d,G as t,g as p,y as m,L as Fr,q as y,o as _,B as v,v as Rr}from"../../chunks/vendor-hf-doc-builder.js";import{I as B}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as W}from"../../chunks/CodeBlock-hf-doc-builder.js";function Mr(en){let I,pa,D,Y,ft,ue,ks,mt,Hs,da,U,Cs,ce,qs,As,ha,w,Ps,fe,xs,Ts,me,Is,Ds,yt,Ns,Os,_t,Ss,Ls,ua,k,zs,ye,Fs,Rs,vt,Ms,Bs,ca,N,G,wt,_e,Ws,Et,Ys,fa,b,Us,ve,Gs,Js,gt,Xs,Ks,we,Qs,Zs,ma,Ve,Vs,ya,E,bt,Ee,el,tl,$t,ge,al,sl,jt,be,ll,ol,kt,$e,nl,rl,Ht,je,il,_a,O,J,Ct,ke,pl,qt,dl,va,H,hl,At,ul,cl,He,fl,ml,wa,X,yl,Ce,_l,vl,Ea,K,wl,qe,El,gl,ga,Ae,bl,Pe,$l,ba,S,Q,Pt,xe,jl,xt,kl,$a,et,Hl,ja,Te,ka,tt,Cl,Ha,Z,ql,Ie,Al,Pl,Ca,De,qa,V,xl,Tt,Tl,Il,Aa,at,It,Dl,Pa,Ne,xa,L,ee,Dt,Oe,Nl,Nt,Ol,Ta,g,Sl,Ot,Ll,zl,St,Fl,Rl,Lt,Ml,Bl,zt,Wl,Yl,Ia,te,Ul,Ft,Gl,Jl,Da,C,Xl,Rt,Kl,Ql,Mt,Zl,Vl,Na,ae,eo,Bt,to,ao,Oa,Se,Sa,$,so,Wt,lo,oo,Yt,no,ro,Ut,io,po,La,Le,za,z,se,Gt,ze,ho,Jt,uo,Fa,le,co,Fe,fo,mo,Ra,Re,Xt,yo,_o,Ma,q,vo,Kt,wo,Eo,Me,go,bo,Ba,Be,Wa,A,$o,Qt,jo,ko,Zt,Ho,Co,Ya,We,Ua,F,oe,Vt,Ye,qo,ea,Ao,Ga,st,Po,Ja,Ue,Xa,lt,xo,Ka,ot,ta,To,Qa,R,ne,aa,Ge,Io,sa,Do,Za,nt,No,Va,Je,es,j,Oo,la,So,Lo,oa,zo,Fo,Xe,Ro,Mo,ts,M,re,na,Ke,Bo,ra,Wo,as,rt,Yo,ss,ie,Uo,ia,Go,Jo,ls,it,Qe,Xo,Ze,Ko,Qo,os;return ue=new B({}),_e=new B({}),ke=new B({}),xe=new B({}),Te=new W({props:{code:`# install git-lfs to interact with the repository
!sudo apt-get update
!sudo apt-get install git-lfs
# install transformers (not needed since it is installed by default in the container)
!pip install transformers[sklearn,sentencepiece,audio,vision]`,highlighted:`<span class="hljs-comment"># install git-lfs to interact with the repository</span>
!sudo apt-<span class="hljs-built_in">get</span> update
!sudo apt-<span class="hljs-built_in">get</span> install git-lfs
<span class="hljs-comment"># install transformers (not needed since it is installed by default in the container)</span>
!pip install transformers[sklearn,sentencepiece,audio,vision]`}}),De=new W({props:{code:`!git lfs install
!git clone https://huggingface.co/philschmid/distilbert-base-uncased-emotion`,highlighted:`!git lfs install
!git clone https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/philschmid/</span>distilbert-base-uncased-emotion`}}),Ne=new W({props:{code:`# setup cli with token
!huggingface-cli login
!git config --global credential.helper store`,highlighted:`# setup cli with token
<span class="hljs-title">!huggingface-cli</span> login
<span class="hljs-title">!git</span> config --<span class="hljs-keyword">global</span> credential.helper <span class="hljs-keyword">store</span>`}}),Oe=new B({}),Se=new W({props:{code:"!cd distilbert-base-uncased-emotion && touch handler.py",highlighted:'!<span class="hljs-built_in">cd</span> distilbert-base-uncased-emotion &amp;&amp; <span class="hljs-built_in">touch</span> handler.py'}}),Le=new W({props:{code:`from typing import Dict, List, Any

class EndpointHandler():
    def __init__(self, path=""):
        # Preload all the elements you are going to need at inference.
        # pseudo:
        # self.model= load_model(path)

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """

        # pseudo
        # self.model(input)`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        <span class="hljs-comment"># Preload all the elements you are going to need at inference.</span>
        <span class="hljs-comment"># pseudo:</span>
        <span class="hljs-comment"># self.model= load_model(path)</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>

        <span class="hljs-comment"># pseudo</span>
        <span class="hljs-comment"># self.model(input)</span>`}}),ze=new B({}),Be=new W({props:{code:`!echo "holidays" >> requirements.txt
!pip install -r requirements.txt`,highlighted:`!echo <span class="hljs-string">&quot;holidays&quot;</span> &gt;&gt; requirements.txt
!pip install -r requirements.txt`}}),We=new W({props:{code:`from typing import Dict, List, Any
from transformers import pipeline
import holidays

class EndpointHandler():
    def __init__(self, path=""):
        self.pipeline = pipeline("text-classification",model=path)
        self.holidays = holidays.US()

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """
        # get inputs
        inputs = data.pop("inputs",data)
        date = data.pop("date", None)

        # check if date exists and if it is a holiday
        if date is not None and date in self.holidays:
          return [{"label": "happy", "score": 1}]


        # run normal prediction
        prediction = self.pipeline(inputs)
        return prediction`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">import</span> holidays

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        self.pipeline = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=path)
        self.holidays = holidays.US()

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># get inputs</span>
        inputs = data.pop(<span class="hljs-string">&quot;inputs&quot;</span>,data)
        date = data.pop(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-literal">None</span>)

        <span class="hljs-comment"># check if date exists and if it is a holiday</span>
        <span class="hljs-keyword">if</span> date <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> date <span class="hljs-keyword">in</span> self.holidays:
          <span class="hljs-keyword">return</span> [{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">1</span>}]


        <span class="hljs-comment"># run normal prediction</span>
        prediction = self.pipeline(inputs)
        <span class="hljs-keyword">return</span> prediction`}}),Ye=new B({}),Ue=new W({props:{code:`from handler import EndpointHandler

# init handler
my_handler = EndpointHandler(path=".")

# prepare sample payload
non_holiday_payload = {"inputs": "I am quite excited how this will turn out", "date": "2022-08-08"}
holiday_payload = {"inputs": "Today is a though day", "date": "2022-07-04"}

# test the handler
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

# show results
print("non_holiday_pred", non_holiday_pred)
print("holiday_payload", holiday_payload)

# non_holiday_pred [{'label': 'joy', 'score': 0.9985942244529724}]
# holiday_payload [{'label': 'happy', 'score': 1}]`,highlighted:`<span class="hljs-keyword">from</span> handler <span class="hljs-keyword">import</span> EndpointHandler

<span class="hljs-comment"># init handler</span>
my_handler = EndpointHandler(path=<span class="hljs-string">&quot;.&quot;</span>)

<span class="hljs-comment"># prepare sample payload</span>
non_holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;I am quite excited how this will turn out&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-08-08&quot;</span>}
holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Today is a though day&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-07-04&quot;</span>}

<span class="hljs-comment"># test the handler</span>
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

<span class="hljs-comment"># show results</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;non_holiday_pred&quot;</span>, non_holiday_pred)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;holiday_payload&quot;</span>, holiday_payload)

<span class="hljs-comment"># non_holiday_pred [{&#x27;label&#x27;: &#x27;joy&#x27;, &#x27;score&#x27;: 0.9985942244529724}]</span>
<span class="hljs-comment"># holiday_payload [{&#x27;label&#x27;: &#x27;happy&#x27;, &#x27;score&#x27;: 1}]</span>`}}),Ge=new B({}),Je=new W({props:{code:`# add all our new files
!git add *
# commit our files
!git commit -m "add custom handler"
# push the files to the hub
!git push`,highlighted:`# <span class="hljs-built_in">add</span> <span class="hljs-keyword">all</span> our <span class="hljs-keyword">new</span> <span class="hljs-keyword">files</span>
!git <span class="hljs-built_in">add</span> *
# commit our <span class="hljs-keyword">files</span>
!git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;add custom handler&quot;</span>
# push the <span class="hljs-keyword">files</span> <span class="hljs-keyword">to</span> the hub
!git push`}}),Ke=new B({}),{c(){I=s("meta"),pa=h(),D=s("h1"),Y=s("a"),ft=s("span"),c(ue.$$.fragment),ks=h(),mt=s("span"),Hs=l("Create custom Inference Handler"),da=h(),U=s("p"),Cs=l("Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ce=s("a"),qs=l("handler.py"),As=l(" file in your model repository on the Hugging Face Hub."),ha=h(),w=s("p"),Ps=l("The "),fe=s("a"),xs=l("handler.py"),Ts=l(" needs to implement the "),me=s("a"),Is=l("EndpointHandler"),Ds=l(" class with a "),yt=s("code"),Ns=l("__init__"),Os=l(" and a "),_t=s("code"),Ss=l("__call__"),Ls=l(" method."),ua=h(),k=s("p"),zs=l("If you want to use custom dependencies, e.g. "),ye=s("a"),Fs=l("optimum"),Rs=l(", the dependencies must be listed in a "),vt=s("code"),Ms=l("requirements.txt"),Bs=l(" as described above in \u201Cadd custom dependencies.\u201D"),ca=h(),N=s("h2"),G=s("a"),wt=s("span"),c(_e.$$.fragment),Ws=h(),Et=s("span"),Ys=l("Custom Handler Examples"),fa=h(),b=s("p"),Us=l("There are already several public examples on the "),ve=s("a"),Gs=l("Hugging Face Hub"),Js=l(" where you can take insipiration or directly use them. The repositories are tagged with "),gt=s("code"),Xs=l("endpoints-template"),Ks=l(" and can be found under this "),we=s("a"),Qs=l("link"),Zs=l("."),ma=h(),Ve=s("p"),Vs=l("Included examples are for:"),ya=h(),E=s("ul"),bt=s("li"),Ee=s("a"),el=l("Optimum and ONNX runtime"),tl=h(),$t=s("li"),ge=s("a"),al=l("Diffusers with stable-diffusion"),sl=h(),jt=s("li"),be=s("a"),ll=l("Image Embeddings with BLIP"),ol=h(),kt=s("li"),$e=s("a"),nl=l("TROCR for OCR Detection"),rl=h(),Ht=s("li"),je=s("a"),il=l("Optimized Sentence Transformers with Optimum"),_a=h(),O=s("h2"),J=s("a"),Ct=s("span"),c(ke.$$.fragment),pl=h(),qt=s("span"),dl=l("Tutorial"),va=h(),H=s("p"),hl=l("Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),At=s("em"),ul=l("WRITE"),cl=l(" access to the repository. To find, create and manage Access Tokens, click "),He=s("a"),fl=l("here"),ml=l("."),wa=h(),X=s("p"),yl=l("If you want to write a Custom Handler for an existing model from the community, you can use the "),Ce=s("a"),_l=l("repo_duplicator"),vl=l(" to create a repository fork."),Ea=h(),K=s("p"),wl=l("The code can also be found in this "),qe=s("a"),El=l("Notebook"),gl=l("."),ga=h(),Ae=s("p"),bl=l("You can also search for already existing Custom Handlers here: "),Pe=s("a"),$l=l("https://huggingface.co/models?other=endpoints-template"),ba=h(),S=s("h3"),Q=s("a"),Pt=s("span"),c(xe.$$.fragment),jl=h(),xt=s("span"),kl=l("1. Set up Development Environment"),$a=h(),et=s("p"),Hl=l("The easiest way to develop your Custom Handler is to set up a local development environment and to implement, test, and iterate on your handler and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies (needed to create the CP, not needed for inference)."),ja=h(),c(Te.$$.fragment),ka=h(),tt=s("p"),Cl=l("After we have installed our libraries we will clone our repository to our development environment."),Ha=h(),Z=s("p"),ql=l("We will use "),Ie=s("a"),Al=l("philschmid/distilbert-base-uncased-emotion"),Pl=l(" during the tutorial."),Ca=h(),c(De.$$.fragment),qa=h(),V=s("p"),xl=l("To be able to push our CP later you need to login into our HF account. This can be done by using the "),Tt=s("code"),Tl=l("huggingface-cli"),Il=l("."),Aa=h(),at=s("p"),It=s("em"),Dl=l("Note: Make sure to configure git config as well."),Pa=h(),c(Ne.$$.fragment),xa=h(),L=s("h3"),ee=s("a"),Dt=s("span"),c(Oe.$$.fragment),Nl=h(),Nt=s("span"),Ol=l("2. Create EndpointHandler (CP)"),Ta=h(),g=s("p"),Sl=l("After you have set up your environment, you can start creating your CP. The CP is a Python class ("),Ot=s("code"),Ll=l("EndpointHandler"),zl=l(") inside a "),St=s("code"),Fl=l("handler.py"),Rl=l(" file in our repository. The handler.py needs to implement the EndpointHandler class with a "),Lt=s("code"),Ml=l("__init__"),Bl=l(" and a "),zt=s("code"),Wl=l("__call__"),Yl=l(" method."),Ia=h(),te=s("p"),Ul=l("The "),Ft=s("code"),Gl=l("__init__"),Jl=l(" method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),Da=h(),C=s("p"),Xl=l("The "),Rt=s("code"),Kl=l("__call__"),Ql=l(" method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),Mt=s("code"),Zl=l("inputs"),Vl=l(" key."),Na=h(),ae=s("p"),eo=l("To create your "),Bt=s("code"),to=l("handler.py"),ao=l(" you have to first switch into your repository and create the file."),Oa=h(),c(Se.$$.fragment),Sa=h(),$=s("p"),so=l("In there, you define your "),Wt=s("code"),lo=l("EndpointHandler"),oo=l(" class with the "),Yt=s("code"),no=l("__init__"),ro=l(" and "),Ut=s("code"),io=l("__call__ "),po=l("method."),La=h(),c(Le.$$.fragment),za=h(),z=s("h3"),se=s("a"),Gt=s("span"),c(ze.$$.fragment),ho=h(),Jt=s("span"),uo=l("3. Customize EndpointHandler"),Fa=h(),le=s("p"),co=l("Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Fe=s("a"),fo=l("Custom Handler on the Hub"),mo=l(" if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),Ra=h(),Re=s("p"),Xt=s("em"),yo=l("The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),_o=l("\u{1F334}\u{1F389}\u{1F606}"),Ma=h(),q=s("p"),vo=l("First, we need to create a new "),Kt=s("code"),wo=l("requirements.txt"),Eo=l(" and add our "),Me=s("a"),go=l("holiday detection package"),bo=l(" and make sure we have it installed in our development environment as well."),Ba=h(),c(Be.$$.fragment),Wa=h(),A=s("p"),$o=l("Next, we have to adjust our "),Qt=s("code"),jo=l("handler.py"),ko=l(" and "),Zt=s("code"),Ho=l("EndpointHandler"),Co=l(" to match our condition."),Ya=h(),c(We.$$.fragment),Ua=h(),F=s("h3"),oe=s("a"),Vt=s("span"),c(Ye.$$.fragment),qo=h(),ea=s("span"),Ao=l("4. Test EndpointHandler"),Ga=h(),st=s("p"),Po=l("To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),Ja=h(),c(Ue.$$.fragment),Xa=h(),lt=s("p"),xo=l("It works!!!! \u{1F389}"),Ka=h(),ot=s("p"),ta=s("em"),To=l("Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),Qa=h(),R=s("h3"),ne=s("a"),aa=s("span"),c(Ge.$$.fragment),Io=h(),sa=s("span"),Do=l("5. Push the Custom Handler to your repository"),Za=h(),nt=s("p"),No=l("After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),Va=h(),c(Je.$$.fragment),es=h(),j=s("p"),Oo=l("Now, you should see your "),la=s("code"),So=l("handler.py"),Lo=l(" and "),oa=s("code"),zo=l("requirements.txt"),Fo=l(" in your repository in the "),Xe=s("a"),Ro=l("\u201CFiles and version\u201D"),Mo=l(" tab."),ts=h(),M=s("h3"),re=s("a"),na=s("span"),c(Ke.$$.fragment),Bo=h(),ra=s("span"),Wo=l("6. Deploy your Custom Handler as an Inference Endpoint"),as=h(),rt=s("p"),Yo=l("The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),ss=h(),ie=s("p"),Uo=l("The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),ia=s("code"),Go=l("handler.py"),Jo=l(" available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),ls=h(),it=s("p"),Qe=s("em"),Xo=l("Note: In your "),Ze=s("a"),Ko=l("Inference Endpoints dashboard"),Qo=l(", the Task for this Endpoint should now be set to Custom"),this.h()},l(e){const i=zr('[data-svelte="svelte-1phssyn"]',document.head);I=o(i,"META",{name:!0,content:!0}),i.forEach(a),pa=u(e),D=o(e,"H1",{class:!0});var ns=r(D);Y=o(ns,"A",{id:!0,class:!0,href:!0});var tn=r(Y);ft=o(tn,"SPAN",{});var an=r(ft);f(ue.$$.fragment,an),an.forEach(a),tn.forEach(a),ks=u(ns),mt=o(ns,"SPAN",{});var sn=r(mt);Hs=n(sn,"Create custom Inference Handler"),sn.forEach(a),ns.forEach(a),da=u(e),U=o(e,"P",{});var rs=r(U);Cs=n(rs,"Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ce=o(rs,"A",{href:!0,rel:!0});var ln=r(ce);qs=n(ln,"handler.py"),ln.forEach(a),As=n(rs," file in your model repository on the Hugging Face Hub."),rs.forEach(a),ha=u(e),w=o(e,"P",{});var P=r(w);Ps=n(P,"The "),fe=o(P,"A",{href:!0,rel:!0});var on=r(fe);xs=n(on,"handler.py"),on.forEach(a),Ts=n(P," needs to implement the "),me=o(P,"A",{href:!0,rel:!0});var nn=r(me);Is=n(nn,"EndpointHandler"),nn.forEach(a),Ds=n(P," class with a "),yt=o(P,"CODE",{});var rn=r(yt);Ns=n(rn,"__init__"),rn.forEach(a),Os=n(P," and a "),_t=o(P,"CODE",{});var pn=r(_t);Ss=n(pn,"__call__"),pn.forEach(a),Ls=n(P," method."),P.forEach(a),ua=u(e),k=o(e,"P",{});var pt=r(k);zs=n(pt,"If you want to use custom dependencies, e.g. "),ye=o(pt,"A",{href:!0,rel:!0});var dn=r(ye);Fs=n(dn,"optimum"),dn.forEach(a),Rs=n(pt,", the dependencies must be listed in a "),vt=o(pt,"CODE",{});var hn=r(vt);Ms=n(hn,"requirements.txt"),hn.forEach(a),Bs=n(pt," as described above in \u201Cadd custom dependencies.\u201D"),pt.forEach(a),ca=u(e),N=o(e,"H2",{class:!0});var is=r(N);G=o(is,"A",{id:!0,class:!0,href:!0});var un=r(G);wt=o(un,"SPAN",{});var cn=r(wt);f(_e.$$.fragment,cn),cn.forEach(a),un.forEach(a),Ws=u(is),Et=o(is,"SPAN",{});var fn=r(Et);Ys=n(fn,"Custom Handler Examples"),fn.forEach(a),is.forEach(a),fa=u(e),b=o(e,"P",{});var pe=r(b);Us=n(pe,"There are already several public examples on the "),ve=o(pe,"A",{href:!0,rel:!0});var mn=r(ve);Gs=n(mn,"Hugging Face Hub"),mn.forEach(a),Js=n(pe," where you can take insipiration or directly use them. The repositories are tagged with "),gt=o(pe,"CODE",{});var yn=r(gt);Xs=n(yn,"endpoints-template"),yn.forEach(a),Ks=n(pe," and can be found under this "),we=o(pe,"A",{href:!0,rel:!0});var _n=r(we);Qs=n(_n,"link"),_n.forEach(a),Zs=n(pe,"."),pe.forEach(a),ma=u(e),Ve=o(e,"P",{});var vn=r(Ve);Vs=n(vn,"Included examples are for:"),vn.forEach(a),ya=u(e),E=o(e,"UL",{});var x=r(E);bt=o(x,"LI",{});var wn=r(bt);Ee=o(wn,"A",{href:!0,rel:!0});var En=r(Ee);el=n(En,"Optimum and ONNX runtime"),En.forEach(a),wn.forEach(a),tl=u(x),$t=o(x,"LI",{});var gn=r($t);ge=o(gn,"A",{href:!0,rel:!0});var bn=r(ge);al=n(bn,"Diffusers with stable-diffusion"),bn.forEach(a),gn.forEach(a),sl=u(x),jt=o(x,"LI",{});var $n=r(jt);be=o($n,"A",{href:!0,rel:!0});var jn=r(be);ll=n(jn,"Image Embeddings with BLIP"),jn.forEach(a),$n.forEach(a),ol=u(x),kt=o(x,"LI",{});var kn=r(kt);$e=o(kn,"A",{href:!0,rel:!0});var Hn=r($e);nl=n(Hn,"TROCR for OCR Detection"),Hn.forEach(a),kn.forEach(a),rl=u(x),Ht=o(x,"LI",{});var Cn=r(Ht);je=o(Cn,"A",{href:!0,rel:!0});var qn=r(je);il=n(qn,"Optimized Sentence Transformers with Optimum"),qn.forEach(a),Cn.forEach(a),x.forEach(a),_a=u(e),O=o(e,"H2",{class:!0});var ps=r(O);J=o(ps,"A",{id:!0,class:!0,href:!0});var An=r(J);Ct=o(An,"SPAN",{});var Pn=r(Ct);f(ke.$$.fragment,Pn),Pn.forEach(a),An.forEach(a),pl=u(ps),qt=o(ps,"SPAN",{});var xn=r(qt);dl=n(xn,"Tutorial"),xn.forEach(a),ps.forEach(a),va=u(e),H=o(e,"P",{});var dt=r(H);hl=n(dt,"Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),At=o(dt,"EM",{});var Tn=r(At);ul=n(Tn,"WRITE"),Tn.forEach(a),cl=n(dt," access to the repository. To find, create and manage Access Tokens, click "),He=o(dt,"A",{href:!0,rel:!0});var In=r(He);fl=n(In,"here"),In.forEach(a),ml=n(dt,"."),dt.forEach(a),wa=u(e),X=o(e,"P",{});var ds=r(X);yl=n(ds,"If you want to write a Custom Handler for an existing model from the community, you can use the "),Ce=o(ds,"A",{href:!0,rel:!0});var Dn=r(Ce);_l=n(Dn,"repo_duplicator"),Dn.forEach(a),vl=n(ds," to create a repository fork."),ds.forEach(a),Ea=u(e),K=o(e,"P",{});var hs=r(K);wl=n(hs,"The code can also be found in this "),qe=o(hs,"A",{href:!0,rel:!0});var Nn=r(qe);El=n(Nn,"Notebook"),Nn.forEach(a),gl=n(hs,"."),hs.forEach(a),ga=u(e),Ae=o(e,"P",{});var Zo=r(Ae);bl=n(Zo,"You can also search for already existing Custom Handlers here: "),Pe=o(Zo,"A",{href:!0,rel:!0});var On=r(Pe);$l=n(On,"https://huggingface.co/models?other=endpoints-template"),On.forEach(a),Zo.forEach(a),ba=u(e),S=o(e,"H3",{class:!0});var us=r(S);Q=o(us,"A",{id:!0,class:!0,href:!0});var Sn=r(Q);Pt=o(Sn,"SPAN",{});var Ln=r(Pt);f(xe.$$.fragment,Ln),Ln.forEach(a),Sn.forEach(a),jl=u(us),xt=o(us,"SPAN",{});var zn=r(xt);kl=n(zn,"1. Set up Development Environment"),zn.forEach(a),us.forEach(a),$a=u(e),et=o(e,"P",{});var Fn=r(et);Hl=n(Fn,"The easiest way to develop your Custom Handler is to set up a local development environment and to implement, test, and iterate on your handler and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies (needed to create the CP, not needed for inference)."),Fn.forEach(a),ja=u(e),f(Te.$$.fragment,e),ka=u(e),tt=o(e,"P",{});var Rn=r(tt);Cl=n(Rn,"After we have installed our libraries we will clone our repository to our development environment."),Rn.forEach(a),Ha=u(e),Z=o(e,"P",{});var cs=r(Z);ql=n(cs,"We will use "),Ie=o(cs,"A",{href:!0,rel:!0});var Mn=r(Ie);Al=n(Mn,"philschmid/distilbert-base-uncased-emotion"),Mn.forEach(a),Pl=n(cs," during the tutorial."),cs.forEach(a),Ca=u(e),f(De.$$.fragment,e),qa=u(e),V=o(e,"P",{});var fs=r(V);xl=n(fs,"To be able to push our CP later you need to login into our HF account. This can be done by using the "),Tt=o(fs,"CODE",{});var Bn=r(Tt);Tl=n(Bn,"huggingface-cli"),Bn.forEach(a),Il=n(fs,"."),fs.forEach(a),Aa=u(e),at=o(e,"P",{});var Wn=r(at);It=o(Wn,"EM",{});var Yn=r(It);Dl=n(Yn,"Note: Make sure to configure git config as well."),Yn.forEach(a),Wn.forEach(a),Pa=u(e),f(Ne.$$.fragment,e),xa=u(e),L=o(e,"H3",{class:!0});var ms=r(L);ee=o(ms,"A",{id:!0,class:!0,href:!0});var Un=r(ee);Dt=o(Un,"SPAN",{});var Gn=r(Dt);f(Oe.$$.fragment,Gn),Gn.forEach(a),Un.forEach(a),Nl=u(ms),Nt=o(ms,"SPAN",{});var Jn=r(Nt);Ol=n(Jn,"2. Create EndpointHandler (CP)"),Jn.forEach(a),ms.forEach(a),Ta=u(e),g=o(e,"P",{});var T=r(g);Sl=n(T,"After you have set up your environment, you can start creating your CP. The CP is a Python class ("),Ot=o(T,"CODE",{});var Xn=r(Ot);Ll=n(Xn,"EndpointHandler"),Xn.forEach(a),zl=n(T,") inside a "),St=o(T,"CODE",{});var Kn=r(St);Fl=n(Kn,"handler.py"),Kn.forEach(a),Rl=n(T," file in our repository. The handler.py needs to implement the EndpointHandler class with a "),Lt=o(T,"CODE",{});var Qn=r(Lt);Ml=n(Qn,"__init__"),Qn.forEach(a),Bl=n(T," and a "),zt=o(T,"CODE",{});var Zn=r(zt);Wl=n(Zn,"__call__"),Zn.forEach(a),Yl=n(T," method."),T.forEach(a),Ia=u(e),te=o(e,"P",{});var ys=r(te);Ul=n(ys,"The "),Ft=o(ys,"CODE",{});var Vn=r(Ft);Gl=n(Vn,"__init__"),Vn.forEach(a),Jl=n(ys," method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),ys.forEach(a),Da=u(e),C=o(e,"P",{});var ht=r(C);Xl=n(ht,"The "),Rt=o(ht,"CODE",{});var er=r(Rt);Kl=n(er,"__call__"),er.forEach(a),Ql=n(ht," method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),Mt=o(ht,"CODE",{});var tr=r(Mt);Zl=n(tr,"inputs"),tr.forEach(a),Vl=n(ht," key."),ht.forEach(a),Na=u(e),ae=o(e,"P",{});var _s=r(ae);eo=n(_s,"To create your "),Bt=o(_s,"CODE",{});var ar=r(Bt);to=n(ar,"handler.py"),ar.forEach(a),ao=n(_s," you have to first switch into your repository and create the file."),_s.forEach(a),Oa=u(e),f(Se.$$.fragment,e),Sa=u(e),$=o(e,"P",{});var de=r($);so=n(de,"In there, you define your "),Wt=o(de,"CODE",{});var sr=r(Wt);lo=n(sr,"EndpointHandler"),sr.forEach(a),oo=n(de," class with the "),Yt=o(de,"CODE",{});var lr=r(Yt);no=n(lr,"__init__"),lr.forEach(a),ro=n(de," and "),Ut=o(de,"CODE",{});var or=r(Ut);io=n(or,"__call__ "),or.forEach(a),po=n(de,"method."),de.forEach(a),La=u(e),f(Le.$$.fragment,e),za=u(e),z=o(e,"H3",{class:!0});var vs=r(z);se=o(vs,"A",{id:!0,class:!0,href:!0});var nr=r(se);Gt=o(nr,"SPAN",{});var rr=r(Gt);f(ze.$$.fragment,rr),rr.forEach(a),nr.forEach(a),ho=u(vs),Jt=o(vs,"SPAN",{});var ir=r(Jt);uo=n(ir,"3. Customize EndpointHandler"),ir.forEach(a),vs.forEach(a),Fa=u(e),le=o(e,"P",{});var ws=r(le);co=n(ws,"Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Fe=o(ws,"A",{href:!0,rel:!0});var pr=r(Fe);fo=n(pr,"Custom Handler on the Hub"),pr.forEach(a),mo=n(ws," if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),ws.forEach(a),Ra=u(e),Re=o(e,"P",{});var Vo=r(Re);Xt=o(Vo,"EM",{});var dr=r(Xt);yo=n(dr,"The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),dr.forEach(a),_o=n(Vo,"\u{1F334}\u{1F389}\u{1F606}"),Vo.forEach(a),Ma=u(e),q=o(e,"P",{});var ut=r(q);vo=n(ut,"First, we need to create a new "),Kt=o(ut,"CODE",{});var hr=r(Kt);wo=n(hr,"requirements.txt"),hr.forEach(a),Eo=n(ut," and add our "),Me=o(ut,"A",{href:!0,rel:!0});var ur=r(Me);go=n(ur,"holiday detection package"),ur.forEach(a),bo=n(ut," and make sure we have it installed in our development environment as well."),ut.forEach(a),Ba=u(e),f(Be.$$.fragment,e),Wa=u(e),A=o(e,"P",{});var ct=r(A);$o=n(ct,"Next, we have to adjust our "),Qt=o(ct,"CODE",{});var cr=r(Qt);jo=n(cr,"handler.py"),cr.forEach(a),ko=n(ct," and "),Zt=o(ct,"CODE",{});var fr=r(Zt);Ho=n(fr,"EndpointHandler"),fr.forEach(a),Co=n(ct," to match our condition."),ct.forEach(a),Ya=u(e),f(We.$$.fragment,e),Ua=u(e),F=o(e,"H3",{class:!0});var Es=r(F);oe=o(Es,"A",{id:!0,class:!0,href:!0});var mr=r(oe);Vt=o(mr,"SPAN",{});var yr=r(Vt);f(Ye.$$.fragment,yr),yr.forEach(a),mr.forEach(a),qo=u(Es),ea=o(Es,"SPAN",{});var _r=r(ea);Ao=n(_r,"4. Test EndpointHandler"),_r.forEach(a),Es.forEach(a),Ga=u(e),st=o(e,"P",{});var vr=r(st);Po=n(vr,"To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),vr.forEach(a),Ja=u(e),f(Ue.$$.fragment,e),Xa=u(e),lt=o(e,"P",{});var wr=r(lt);xo=n(wr,"It works!!!! \u{1F389}"),wr.forEach(a),Ka=u(e),ot=o(e,"P",{});var Er=r(ot);ta=o(Er,"EM",{});var gr=r(ta);To=n(gr,"Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),gr.forEach(a),Er.forEach(a),Qa=u(e),R=o(e,"H3",{class:!0});var gs=r(R);ne=o(gs,"A",{id:!0,class:!0,href:!0});var br=r(ne);aa=o(br,"SPAN",{});var $r=r(aa);f(Ge.$$.fragment,$r),$r.forEach(a),br.forEach(a),Io=u(gs),sa=o(gs,"SPAN",{});var jr=r(sa);Do=n(jr,"5. Push the Custom Handler to your repository"),jr.forEach(a),gs.forEach(a),Za=u(e),nt=o(e,"P",{});var kr=r(nt);No=n(kr,"After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),kr.forEach(a),Va=u(e),f(Je.$$.fragment,e),es=u(e),j=o(e,"P",{});var he=r(j);Oo=n(he,"Now, you should see your "),la=o(he,"CODE",{});var Hr=r(la);So=n(Hr,"handler.py"),Hr.forEach(a),Lo=n(he," and "),oa=o(he,"CODE",{});var Cr=r(oa);zo=n(Cr,"requirements.txt"),Cr.forEach(a),Fo=n(he," in your repository in the "),Xe=o(he,"A",{href:!0,rel:!0});var qr=r(Xe);Ro=n(qr,"\u201CFiles and version\u201D"),qr.forEach(a),Mo=n(he," tab."),he.forEach(a),ts=u(e),M=o(e,"H3",{class:!0});var bs=r(M);re=o(bs,"A",{id:!0,class:!0,href:!0});var Ar=r(re);na=o(Ar,"SPAN",{});var Pr=r(na);f(Ke.$$.fragment,Pr),Pr.forEach(a),Ar.forEach(a),Bo=u(bs),ra=o(bs,"SPAN",{});var xr=r(ra);Wo=n(xr,"6. Deploy your Custom Handler as an Inference Endpoint"),xr.forEach(a),bs.forEach(a),as=u(e),rt=o(e,"P",{});var Tr=r(rt);Yo=n(Tr,"The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),Tr.forEach(a),ss=u(e),ie=o(e,"P",{});var $s=r(ie);Uo=n($s,"The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),ia=o($s,"CODE",{});var Ir=r(ia);Go=n(Ir,"handler.py"),Ir.forEach(a),Jo=n($s," available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),$s.forEach(a),ls=u(e),it=o(e,"P",{});var Dr=r(it);Qe=o(Dr,"EM",{});var js=r(Qe);Xo=n(js,"Note: In your "),Ze=o(js,"A",{href:!0,rel:!0});var Nr=r(Ze);Ko=n(Nr,"Inference Endpoints dashboard"),Nr.forEach(a),Qo=n(js,", the Task for this Endpoint should now be set to Custom"),js.forEach(a),Dr.forEach(a),this.h()},h(){d(I,"name","hf:doc:metadata"),d(I,"content",JSON.stringify(Br)),d(Y,"id","create-custom-inference-handler"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#create-custom-inference-handler"),d(D,"class","relative group"),d(ce,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(ce,"rel","nofollow"),d(fe,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(fe,"rel","nofollow"),d(me,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(me,"rel","nofollow"),d(ye,"href","https://raw.githubusercontent.com/huggingface/optimum"),d(ye,"rel","nofollow"),d(G,"id","custom-handler-examples"),d(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G,"href","#custom-handler-examples"),d(N,"class","relative group"),d(ve,"href","https://huggingface.co/models?other=endpoints-template"),d(ve,"rel","nofollow"),d(we,"href","https://huggingface.co/models?other=endpoints-template"),d(we,"rel","nofollow"),d(Ee,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77"),d(Ee,"rel","nofollow"),d(ge,"href","https://huggingface.co/philschmid/stable-diffusion-v1-4-endpoints"),d(ge,"rel","nofollow"),d(be,"href","https://huggingface.co/florentgbelidji/blip_image_embeddings"),d(be,"rel","nofollow"),d($e,"href","https://huggingface.co/philschmid/trocr-base-printed"),d($e,"rel","nofollow"),d(je,"href","https://huggingface.co/philschmid/all-MiniLM-L6-v2-optimum-embeddings"),d(je,"rel","nofollow"),d(J,"id","tutorial"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#tutorial"),d(O,"class","relative group"),d(He,"href","https://huggingface.co/settings/tokens"),d(He,"rel","nofollow"),d(Ce,"href","https://huggingface.co/spaces/osanseviero/repo_duplicator"),d(Ce,"rel","nofollow"),d(qe,"href","https://colab.research.google.com/drive/1hANJeRa1PK1gZaUorobnQGu4bFj4_4Rf?usp=sharing"),d(qe,"rel","nofollow"),d(Pe,"href","https://huggingface.co/models?other=endpoints-template"),d(Pe,"rel","nofollow"),d(Q,"id","1-set-up-development-environment"),d(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q,"href","#1-set-up-development-environment"),d(S,"class","relative group"),d(Ie,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion"),d(Ie,"rel","nofollow"),d(ee,"id","2-create-endpointhandler-cp"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#2-create-endpointhandler-cp"),d(L,"class","relative group"),d(se,"id","3-customize-endpointhandler"),d(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(se,"href","#3-customize-endpointhandler"),d(z,"class","relative group"),d(Fe,"href","https://huggingface.co/models?other=endpoints-template"),d(Fe,"rel","nofollow"),d(Me,"href","https://pypi.org/project/holidays/"),d(Me,"rel","nofollow"),d(oe,"id","4-test-endpointhandler"),d(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oe,"href","#4-test-endpointhandler"),d(F,"class","relative group"),d(ne,"id","5-push-the-custom-handler-to-your-repository"),d(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ne,"href","#5-push-the-custom-handler-to-your-repository"),d(R,"class","relative group"),d(Xe,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion/tree/main"),d(Xe,"rel","nofollow"),d(re,"id","6-deploy-your-custom-handler-as-an-inference-endpoint"),d(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(re,"href","#6-deploy-your-custom-handler-as-an-inference-endpoint"),d(M,"class","relative group"),d(Ze,"href","https://ui.endpoints.huggingface.co/"),d(Ze,"rel","nofollow")},m(e,i){t(document.head,I),p(e,pa,i),p(e,D,i),t(D,Y),t(Y,ft),m(ue,ft,null),t(D,ks),t(D,mt),t(mt,Hs),p(e,da,i),p(e,U,i),t(U,Cs),t(U,ce),t(ce,qs),t(U,As),p(e,ha,i),p(e,w,i),t(w,Ps),t(w,fe),t(fe,xs),t(w,Ts),t(w,me),t(me,Is),t(w,Ds),t(w,yt),t(yt,Ns),t(w,Os),t(w,_t),t(_t,Ss),t(w,Ls),p(e,ua,i),p(e,k,i),t(k,zs),t(k,ye),t(ye,Fs),t(k,Rs),t(k,vt),t(vt,Ms),t(k,Bs),p(e,ca,i),p(e,N,i),t(N,G),t(G,wt),m(_e,wt,null),t(N,Ws),t(N,Et),t(Et,Ys),p(e,fa,i),p(e,b,i),t(b,Us),t(b,ve),t(ve,Gs),t(b,Js),t(b,gt),t(gt,Xs),t(b,Ks),t(b,we),t(we,Qs),t(b,Zs),p(e,ma,i),p(e,Ve,i),t(Ve,Vs),p(e,ya,i),p(e,E,i),t(E,bt),t(bt,Ee),t(Ee,el),t(E,tl),t(E,$t),t($t,ge),t(ge,al),t(E,sl),t(E,jt),t(jt,be),t(be,ll),t(E,ol),t(E,kt),t(kt,$e),t($e,nl),t(E,rl),t(E,Ht),t(Ht,je),t(je,il),p(e,_a,i),p(e,O,i),t(O,J),t(J,Ct),m(ke,Ct,null),t(O,pl),t(O,qt),t(qt,dl),p(e,va,i),p(e,H,i),t(H,hl),t(H,At),t(At,ul),t(H,cl),t(H,He),t(He,fl),t(H,ml),p(e,wa,i),p(e,X,i),t(X,yl),t(X,Ce),t(Ce,_l),t(X,vl),p(e,Ea,i),p(e,K,i),t(K,wl),t(K,qe),t(qe,El),t(K,gl),p(e,ga,i),p(e,Ae,i),t(Ae,bl),t(Ae,Pe),t(Pe,$l),p(e,ba,i),p(e,S,i),t(S,Q),t(Q,Pt),m(xe,Pt,null),t(S,jl),t(S,xt),t(xt,kl),p(e,$a,i),p(e,et,i),t(et,Hl),p(e,ja,i),m(Te,e,i),p(e,ka,i),p(e,tt,i),t(tt,Cl),p(e,Ha,i),p(e,Z,i),t(Z,ql),t(Z,Ie),t(Ie,Al),t(Z,Pl),p(e,Ca,i),m(De,e,i),p(e,qa,i),p(e,V,i),t(V,xl),t(V,Tt),t(Tt,Tl),t(V,Il),p(e,Aa,i),p(e,at,i),t(at,It),t(It,Dl),p(e,Pa,i),m(Ne,e,i),p(e,xa,i),p(e,L,i),t(L,ee),t(ee,Dt),m(Oe,Dt,null),t(L,Nl),t(L,Nt),t(Nt,Ol),p(e,Ta,i),p(e,g,i),t(g,Sl),t(g,Ot),t(Ot,Ll),t(g,zl),t(g,St),t(St,Fl),t(g,Rl),t(g,Lt),t(Lt,Ml),t(g,Bl),t(g,zt),t(zt,Wl),t(g,Yl),p(e,Ia,i),p(e,te,i),t(te,Ul),t(te,Ft),t(Ft,Gl),t(te,Jl),p(e,Da,i),p(e,C,i),t(C,Xl),t(C,Rt),t(Rt,Kl),t(C,Ql),t(C,Mt),t(Mt,Zl),t(C,Vl),p(e,Na,i),p(e,ae,i),t(ae,eo),t(ae,Bt),t(Bt,to),t(ae,ao),p(e,Oa,i),m(Se,e,i),p(e,Sa,i),p(e,$,i),t($,so),t($,Wt),t(Wt,lo),t($,oo),t($,Yt),t(Yt,no),t($,ro),t($,Ut),t(Ut,io),t($,po),p(e,La,i),m(Le,e,i),p(e,za,i),p(e,z,i),t(z,se),t(se,Gt),m(ze,Gt,null),t(z,ho),t(z,Jt),t(Jt,uo),p(e,Fa,i),p(e,le,i),t(le,co),t(le,Fe),t(Fe,fo),t(le,mo),p(e,Ra,i),p(e,Re,i),t(Re,Xt),t(Xt,yo),t(Re,_o),p(e,Ma,i),p(e,q,i),t(q,vo),t(q,Kt),t(Kt,wo),t(q,Eo),t(q,Me),t(Me,go),t(q,bo),p(e,Ba,i),m(Be,e,i),p(e,Wa,i),p(e,A,i),t(A,$o),t(A,Qt),t(Qt,jo),t(A,ko),t(A,Zt),t(Zt,Ho),t(A,Co),p(e,Ya,i),m(We,e,i),p(e,Ua,i),p(e,F,i),t(F,oe),t(oe,Vt),m(Ye,Vt,null),t(F,qo),t(F,ea),t(ea,Ao),p(e,Ga,i),p(e,st,i),t(st,Po),p(e,Ja,i),m(Ue,e,i),p(e,Xa,i),p(e,lt,i),t(lt,xo),p(e,Ka,i),p(e,ot,i),t(ot,ta),t(ta,To),p(e,Qa,i),p(e,R,i),t(R,ne),t(ne,aa),m(Ge,aa,null),t(R,Io),t(R,sa),t(sa,Do),p(e,Za,i),p(e,nt,i),t(nt,No),p(e,Va,i),m(Je,e,i),p(e,es,i),p(e,j,i),t(j,Oo),t(j,la),t(la,So),t(j,Lo),t(j,oa),t(oa,zo),t(j,Fo),t(j,Xe),t(Xe,Ro),t(j,Mo),p(e,ts,i),p(e,M,i),t(M,re),t(re,na),m(Ke,na,null),t(M,Bo),t(M,ra),t(ra,Wo),p(e,as,i),p(e,rt,i),t(rt,Yo),p(e,ss,i),p(e,ie,i),t(ie,Uo),t(ie,ia),t(ia,Go),t(ie,Jo),p(e,ls,i),p(e,it,i),t(it,Qe),t(Qe,Xo),t(Qe,Ze),t(Ze,Ko),t(Qe,Qo),os=!0},p:Fr,i(e){os||(y(ue.$$.fragment,e),y(_e.$$.fragment,e),y(ke.$$.fragment,e),y(xe.$$.fragment,e),y(Te.$$.fragment,e),y(De.$$.fragment,e),y(Ne.$$.fragment,e),y(Oe.$$.fragment,e),y(Se.$$.fragment,e),y(Le.$$.fragment,e),y(ze.$$.fragment,e),y(Be.$$.fragment,e),y(We.$$.fragment,e),y(Ye.$$.fragment,e),y(Ue.$$.fragment,e),y(Ge.$$.fragment,e),y(Je.$$.fragment,e),y(Ke.$$.fragment,e),os=!0)},o(e){_(ue.$$.fragment,e),_(_e.$$.fragment,e),_(ke.$$.fragment,e),_(xe.$$.fragment,e),_(Te.$$.fragment,e),_(De.$$.fragment,e),_(Ne.$$.fragment,e),_(Oe.$$.fragment,e),_(Se.$$.fragment,e),_(Le.$$.fragment,e),_(ze.$$.fragment,e),_(Be.$$.fragment,e),_(We.$$.fragment,e),_(Ye.$$.fragment,e),_(Ue.$$.fragment,e),_(Ge.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),os=!1},d(e){a(I),e&&a(pa),e&&a(D),v(ue),e&&a(da),e&&a(U),e&&a(ha),e&&a(w),e&&a(ua),e&&a(k),e&&a(ca),e&&a(N),v(_e),e&&a(fa),e&&a(b),e&&a(ma),e&&a(Ve),e&&a(ya),e&&a(E),e&&a(_a),e&&a(O),v(ke),e&&a(va),e&&a(H),e&&a(wa),e&&a(X),e&&a(Ea),e&&a(K),e&&a(ga),e&&a(Ae),e&&a(ba),e&&a(S),v(xe),e&&a($a),e&&a(et),e&&a(ja),v(Te,e),e&&a(ka),e&&a(tt),e&&a(Ha),e&&a(Z),e&&a(Ca),v(De,e),e&&a(qa),e&&a(V),e&&a(Aa),e&&a(at),e&&a(Pa),v(Ne,e),e&&a(xa),e&&a(L),v(Oe),e&&a(Ta),e&&a(g),e&&a(Ia),e&&a(te),e&&a(Da),e&&a(C),e&&a(Na),e&&a(ae),e&&a(Oa),v(Se,e),e&&a(Sa),e&&a($),e&&a(La),v(Le,e),e&&a(za),e&&a(z),v(ze),e&&a(Fa),e&&a(le),e&&a(Ra),e&&a(Re),e&&a(Ma),e&&a(q),e&&a(Ba),v(Be,e),e&&a(Wa),e&&a(A),e&&a(Ya),v(We,e),e&&a(Ua),e&&a(F),v(Ye),e&&a(Ga),e&&a(st),e&&a(Ja),v(Ue,e),e&&a(Xa),e&&a(lt),e&&a(Ka),e&&a(ot),e&&a(Qa),e&&a(R),v(Ge),e&&a(Za),e&&a(nt),e&&a(Va),v(Je,e),e&&a(es),e&&a(j),e&&a(ts),e&&a(M),v(Ke),e&&a(as),e&&a(rt),e&&a(ss),e&&a(ie),e&&a(ls),e&&a(it)}}}const Br={local:"create-custom-inference-handler",sections:[{local:"custom-handler-examples",title:"Custom Handler Examples"},{local:"tutorial",sections:[{local:"1-set-up-development-environment",title:"1. Set up Development Environment"},{local:"2-create-endpointhandler-cp",title:"2. Create EndpointHandler (CP)"},{local:"3-customize-endpointhandler",title:"3. Customize EndpointHandler"},{local:"4-test-endpointhandler",title:"4. Test EndpointHandler"},{local:"5-push-the-custom-handler-to-your-repository",title:"5. Push the Custom Handler to your repository"},{local:"6-deploy-your-custom-handler-as-an-inference-endpoint",title:"6. Deploy your Custom Handler as an Inference Endpoint"}],title:"Tutorial"}],title:"Create custom Inference Handler"};function Wr(en){return Rr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Jr extends Or{constructor(I){super();Sr(this,I,Wr,Mr,Lr,{})}}export{Jr as default,Br as metadata};
