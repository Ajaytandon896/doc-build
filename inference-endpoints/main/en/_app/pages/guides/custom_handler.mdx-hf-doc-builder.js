import{S as Rr,i as Wr,s as Br,e as s,k as h,w as c,t as o,M as Yr,c as l,d as a,m as u,a as n,x as f,h as r,b as d,G as t,g as p,y as m,L as Ur,q as y,o as _,B as v,v as Gr}from"../../chunks/vendor-hf-doc-builder.js";import{I as W}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as B}from"../../chunks/CodeBlock-hf-doc-builder.js";function Jr(ln){let I,ha,D,Y,mt,ue,Hs,yt,Cs,ua,U,qs,ce,Ps,xs,ca,E,Ts,fe,Is,Ds,me,Ns,Os,_t,Ss,Ls,vt,zs,Fs,fa,A,Ms,ye,Rs,Ws,wt,Bs,Ys,ma,N,G,Et,_e,Us,gt,Gs,ya,b,Js,ve,Xs,Ks,bt,Qs,Zs,we,Vs,el,_a,Ve,tl,va,w,$t,Ee,al,sl,jt,ge,ll,ol,kt,be,nl,rl,At,$e,il,pl,Ht,je,dl,hl,Ct,et,ul,wa,O,J,qt,ke,cl,Pt,fl,Ea,H,ml,xt,yl,_l,Ae,vl,wl,ga,X,El,He,gl,bl,ba,K,$l,Ce,jl,kl,$a,qe,Al,Pe,Hl,ja,S,Q,Tt,xe,Cl,It,ql,ka,tt,Pl,Aa,Te,Ha,at,xl,Ca,Z,Tl,Ie,Il,Dl,qa,De,Pa,V,Nl,Dt,Ol,Sl,xa,st,Nt,Ll,Ta,Ne,Ia,L,ee,Ot,Oe,zl,St,Fl,Da,g,Ml,Lt,Rl,Wl,zt,Bl,Yl,Ft,Ul,Gl,Mt,Jl,Xl,Na,te,Kl,Rt,Ql,Zl,Oa,C,Vl,Wt,eo,to,Bt,ao,so,Sa,ae,lo,Yt,oo,no,La,Se,za,$,ro,Ut,io,po,Gt,ho,uo,Jt,co,fo,Fa,Le,Ma,z,se,Xt,ze,mo,Kt,yo,Ra,le,_o,Fe,vo,wo,Wa,Me,Qt,Eo,go,Ba,q,bo,Zt,$o,jo,Re,ko,Ao,Ya,We,Ua,P,Ho,Vt,Co,qo,ea,Po,xo,Ga,Be,Ja,F,oe,ta,Ye,To,aa,Io,Xa,lt,Do,Ka,Ue,Qa,ot,No,Za,nt,sa,Oo,Va,M,ne,la,Ge,So,oa,Lo,es,rt,zo,ts,Je,as,j,Fo,na,Mo,Ro,ra,Wo,Bo,Xe,Yo,Uo,ss,R,re,ia,Ke,Go,pa,Jo,ls,it,Xo,os,ie,Ko,da,Qo,Zo,ns,pt,Qe,Vo,Ze,en,tn,rs;return ue=new W({}),_e=new W({}),ke=new W({}),xe=new W({}),Te=new B({props:{code:`# install git-lfs to interact with the repository
!sudo apt-get update
!sudo apt-get install git-lfs
# install transformers (not needed since it is installed by default in the container)
!pip install transformers[sklearn,sentencepiece,audio,vision]`,highlighted:`<span class="hljs-comment"># install git-lfs to interact with the repository</span>
!sudo apt-<span class="hljs-built_in">get</span> update
!sudo apt-<span class="hljs-built_in">get</span> install git-lfs
<span class="hljs-comment"># install transformers (not needed since it is installed by default in the container)</span>
!pip install transformers[sklearn,sentencepiece,audio,vision]`}}),De=new B({props:{code:`!git lfs install
!git clone https://huggingface.co/philschmid/distilbert-base-uncased-emotion`,highlighted:`!git lfs install
!git clone https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/philschmid/</span>distilbert-base-uncased-emotion`}}),Ne=new B({props:{code:`# setup cli with token
!huggingface-cli login
!git config --global credential.helper store`,highlighted:`# setup cli with token
<span class="hljs-title">!huggingface-cli</span> login
<span class="hljs-title">!git</span> config --<span class="hljs-keyword">global</span> credential.helper <span class="hljs-keyword">store</span>`}}),Oe=new W({}),Se=new B({props:{code:"!cd distilbert-base-uncased-emotion && touch handler.py",highlighted:'!<span class="hljs-built_in">cd</span> distilbert-base-uncased-emotion &amp;&amp; <span class="hljs-built_in">touch</span> handler.py'}}),Le=new B({props:{code:`from typing import Dict, List, Any

class EndpointHandler():
    def __init__(self, path=""):
        # Preload all the elements you are going to need at inference.
        # pseudo:
        # self.model= load_model(path)

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """

        # pseudo
        # self.model(input)`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        <span class="hljs-comment"># Preload all the elements you are going to need at inference.</span>
        <span class="hljs-comment"># pseudo:</span>
        <span class="hljs-comment"># self.model= load_model(path)</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>

        <span class="hljs-comment"># pseudo</span>
        <span class="hljs-comment"># self.model(input)</span>`}}),ze=new W({}),We=new B({props:{code:`!echo "holidays" >> requirements.txt
!pip install -r requirements.txt`,highlighted:`!echo <span class="hljs-string">&quot;holidays&quot;</span> &gt;&gt; requirements.txt
!pip install -r requirements.txt`}}),Be=new B({props:{code:`from typing import Dict, List, Any
from transformers import pipeline
import holidays

class EndpointHandler():
    def __init__(self, path=""):
        self.pipeline = pipeline("text-classification",model=path)
        self.holidays = holidays.US()

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """
        # get inputs
        inputs = data.pop("inputs",data)
        date = data.pop("date", None)

        # check if date exists and if it is a holiday
        if date is not None and date in self.holidays:
          return [{"label": "happy", "score": 1}]


        # run normal prediction
        prediction = self.pipeline(inputs)
        return prediction`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">import</span> holidays

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        self.pipeline = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=path)
        self.holidays = holidays.US()

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># get inputs</span>
        inputs = data.pop(<span class="hljs-string">&quot;inputs&quot;</span>,data)
        date = data.pop(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-literal">None</span>)

        <span class="hljs-comment"># check if date exists and if it is a holiday</span>
        <span class="hljs-keyword">if</span> date <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> date <span class="hljs-keyword">in</span> self.holidays:
          <span class="hljs-keyword">return</span> [{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">1</span>}]


        <span class="hljs-comment"># run normal prediction</span>
        prediction = self.pipeline(inputs)
        <span class="hljs-keyword">return</span> prediction`}}),Ye=new W({}),Ue=new B({props:{code:`from handler import EndpointHandler

# init handler
my_handler = EndpointHandler(path=".")

# prepare sample payload
non_holiday_payload = {"inputs": "I am quite excited how this will turn out", "date": "2022-08-08"}
holiday_payload = {"inputs": "Today is a though day", "date": "2022-07-04"}

# test the handler
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

# show results
print("non_holiday_pred", non_holiday_pred)
print("holiday_payload", holiday_payload)

# non_holiday_pred [{'label': 'joy', 'score': 0.9985942244529724}]
# holiday_payload [{'label': 'happy', 'score': 1}]`,highlighted:`<span class="hljs-keyword">from</span> handler <span class="hljs-keyword">import</span> EndpointHandler

<span class="hljs-comment"># init handler</span>
my_handler = EndpointHandler(path=<span class="hljs-string">&quot;.&quot;</span>)

<span class="hljs-comment"># prepare sample payload</span>
non_holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;I am quite excited how this will turn out&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-08-08&quot;</span>}
holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Today is a though day&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-07-04&quot;</span>}

<span class="hljs-comment"># test the handler</span>
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

<span class="hljs-comment"># show results</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;non_holiday_pred&quot;</span>, non_holiday_pred)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;holiday_payload&quot;</span>, holiday_payload)

<span class="hljs-comment"># non_holiday_pred [{&#x27;label&#x27;: &#x27;joy&#x27;, &#x27;score&#x27;: 0.9985942244529724}]</span>
<span class="hljs-comment"># holiday_payload [{&#x27;label&#x27;: &#x27;happy&#x27;, &#x27;score&#x27;: 1}]</span>`}}),Ge=new W({}),Je=new B({props:{code:`# add all our new files
!git add *
# commit our files
!git commit -m "add custom handler"
# push the files to the hub
!git push`,highlighted:`# <span class="hljs-built_in">add</span> <span class="hljs-keyword">all</span> our <span class="hljs-keyword">new</span> <span class="hljs-keyword">files</span>
!git <span class="hljs-built_in">add</span> *
# commit our <span class="hljs-keyword">files</span>
!git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;add custom handler&quot;</span>
# push the <span class="hljs-keyword">files</span> <span class="hljs-keyword">to</span> the hub
!git push`}}),Ke=new W({}),{c(){I=s("meta"),ha=h(),D=s("h1"),Y=s("a"),mt=s("span"),c(ue.$$.fragment),Hs=h(),yt=s("span"),Cs=o("Create custom Inference Handler"),ua=h(),U=s("p"),qs=o("Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ce=s("a"),Ps=o("handler.py"),xs=o(" file in your model repository on the Hugging Face Hub."),ca=h(),E=s("p"),Ts=o("The "),fe=s("a"),Is=o("handler.py"),Ds=o(" needs to implement the "),me=s("a"),Ns=o("EndpointHandler"),Os=o(" class with a "),_t=s("code"),Ss=o("__init__"),Ls=o(" and a "),vt=s("code"),zs=o("__call__"),Fs=o(" method."),fa=h(),A=s("p"),Ms=o("If you want to use custom dependencies, e.g. "),ye=s("a"),Rs=o("optimum"),Ws=o(", the dependencies must be listed in a "),wt=s("code"),Bs=o("requirements.txt"),Ys=o(" as described above in \u201Cadd custom dependencies.\u201D"),ma=h(),N=s("h2"),G=s("a"),Et=s("span"),c(_e.$$.fragment),Us=h(),gt=s("span"),Gs=o("Custom Handler Examples"),ya=h(),b=s("p"),Js=o("There are already several public examples on the "),ve=s("a"),Xs=o("Hugging Face Hub"),Ks=o(" where you can take insipiration or directly use them. The repositories are tagged with "),bt=s("code"),Qs=o("endpoints-template"),Zs=o(" and can be found under this "),we=s("a"),Vs=o("link"),el=o("."),_a=h(),Ve=s("p"),tl=o("Included examples are for:"),va=h(),w=s("ul"),$t=s("li"),Ee=s("a"),al=o("Optimum and ONNX runtime"),sl=h(),jt=s("li"),ge=s("a"),ll=o("Diffusers with stable-diffusion"),ol=h(),kt=s("li"),be=s("a"),nl=o("Image Embeddings with BLIP"),rl=h(),At=s("li"),$e=s("a"),il=o("TrOCR for OCR Detection"),pl=h(),Ht=s("li"),je=s("a"),dl=o("Optimized Sentence Transformers with Optimum"),hl=h(),Ct=s("li"),et=s("a"),ul=o("OpenAI Whisper"),wa=h(),O=s("h2"),J=s("a"),qt=s("span"),c(ke.$$.fragment),cl=h(),Pt=s("span"),fl=o("Tutorial"),Ea=h(),H=s("p"),ml=o("Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),xt=s("em"),yl=o("WRITE"),_l=o(" access to the repository. To find, create and manage Access Tokens, click "),Ae=s("a"),vl=o("here"),wl=o("."),ga=h(),X=s("p"),El=o("If you want to write a Custom Handler for an existing model from the community, you can use the "),He=s("a"),gl=o("repo_duplicator"),bl=o(" to create a repository fork."),ba=h(),K=s("p"),$l=o("The code can also be found in this "),Ce=s("a"),jl=o("Notebook"),kl=o("."),$a=h(),qe=s("p"),Al=o("You can also search for already existing Custom Handlers here: "),Pe=s("a"),Hl=o("https://huggingface.co/models?other=endpoints-template"),ja=h(),S=s("h3"),Q=s("a"),Tt=s("span"),c(xe.$$.fragment),Cl=h(),It=s("span"),ql=o("1. Set up Development Environment"),ka=h(),tt=s("p"),Pl=o("The easiest way to develop your Custom Handler is to set up a local development environment and to implement, test, and iterate on your handler and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies (needed to create the CP, not needed for inference)."),Aa=h(),c(Te.$$.fragment),Ha=h(),at=s("p"),xl=o("After we have installed our libraries we will clone our repository to our development environment."),Ca=h(),Z=s("p"),Tl=o("We will use "),Ie=s("a"),Il=o("philschmid/distilbert-base-uncased-emotion"),Dl=o(" during the tutorial."),qa=h(),c(De.$$.fragment),Pa=h(),V=s("p"),Nl=o("To be able to push our CP later you need to login into our HF account. This can be done by using the "),Dt=s("code"),Ol=o("huggingface-cli"),Sl=o("."),xa=h(),st=s("p"),Nt=s("em"),Ll=o("Note: Make sure to configure git config as well."),Ta=h(),c(Ne.$$.fragment),Ia=h(),L=s("h3"),ee=s("a"),Ot=s("span"),c(Oe.$$.fragment),zl=h(),St=s("span"),Fl=o("2. Create EndpointHandler (CP)"),Da=h(),g=s("p"),Ml=o("After you have set up your environment, you can start creating your CP. The CP is a Python class ("),Lt=s("code"),Rl=o("EndpointHandler"),Wl=o(") inside a "),zt=s("code"),Bl=o("handler.py"),Yl=o(" file in our repository. The handler.py needs to implement the EndpointHandler class with a "),Ft=s("code"),Ul=o("__init__"),Gl=o(" and a "),Mt=s("code"),Jl=o("__call__"),Xl=o(" method."),Na=h(),te=s("p"),Kl=o("The "),Rt=s("code"),Ql=o("__init__"),Zl=o(" method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),Oa=h(),C=s("p"),Vl=o("The "),Wt=s("code"),eo=o("__call__"),to=o(" method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),Bt=s("code"),ao=o("inputs"),so=o(" key."),Sa=h(),ae=s("p"),lo=o("To create your "),Yt=s("code"),oo=o("handler.py"),no=o(" you have to first switch into your repository and create the file."),La=h(),c(Se.$$.fragment),za=h(),$=s("p"),ro=o("In there, you define your "),Ut=s("code"),io=o("EndpointHandler"),po=o(" class with the "),Gt=s("code"),ho=o("__init__"),uo=o(" and "),Jt=s("code"),co=o("__call__ "),fo=o("method."),Fa=h(),c(Le.$$.fragment),Ma=h(),z=s("h3"),se=s("a"),Xt=s("span"),c(ze.$$.fragment),mo=h(),Kt=s("span"),yo=o("3. Customize EndpointHandler"),Ra=h(),le=s("p"),_o=o("Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Fe=s("a"),vo=o("Custom Handler on the Hub"),wo=o(" if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),Wa=h(),Me=s("p"),Qt=s("em"),Eo=o("The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),go=o("\u{1F334}\u{1F389}\u{1F606}"),Ba=h(),q=s("p"),bo=o("First, we need to create a new "),Zt=s("code"),$o=o("requirements.txt"),jo=o(" and add our "),Re=s("a"),ko=o("holiday detection package"),Ao=o(" and make sure we have it installed in our development environment as well."),Ya=h(),c(We.$$.fragment),Ua=h(),P=s("p"),Ho=o("Next, we have to adjust our "),Vt=s("code"),Co=o("handler.py"),qo=o(" and "),ea=s("code"),Po=o("EndpointHandler"),xo=o(" to match our condition."),Ga=h(),c(Be.$$.fragment),Ja=h(),F=s("h3"),oe=s("a"),ta=s("span"),c(Ye.$$.fragment),To=h(),aa=s("span"),Io=o("4. Test EndpointHandler"),Xa=h(),lt=s("p"),Do=o("To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),Ka=h(),c(Ue.$$.fragment),Qa=h(),ot=s("p"),No=o("It works!!!! \u{1F389}"),Za=h(),nt=s("p"),sa=s("em"),Oo=o("Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),Va=h(),M=s("h3"),ne=s("a"),la=s("span"),c(Ge.$$.fragment),So=h(),oa=s("span"),Lo=o("5. Push the Custom Handler to your repository"),es=h(),rt=s("p"),zo=o("After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),ts=h(),c(Je.$$.fragment),as=h(),j=s("p"),Fo=o("Now, you should see your "),na=s("code"),Mo=o("handler.py"),Ro=o(" and "),ra=s("code"),Wo=o("requirements.txt"),Bo=o(" in your repository in the "),Xe=s("a"),Yo=o("\u201CFiles and version\u201D"),Uo=o(" tab."),ss=h(),R=s("h3"),re=s("a"),ia=s("span"),c(Ke.$$.fragment),Go=h(),pa=s("span"),Jo=o("6. Deploy your Custom Handler as an Inference Endpoint"),ls=h(),it=s("p"),Xo=o("The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),os=h(),ie=s("p"),Ko=o("The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),da=s("code"),Qo=o("handler.py"),Zo=o(" available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),ns=h(),pt=s("p"),Qe=s("em"),Vo=o("Note: In your "),Ze=s("a"),en=o("Inference Endpoints dashboard"),tn=o(", the Task for this Endpoint should now be set to Custom"),this.h()},l(e){const i=Yr('[data-svelte="svelte-1phssyn"]',document.head);I=l(i,"META",{name:!0,content:!0}),i.forEach(a),ha=u(e),D=l(e,"H1",{class:!0});var is=n(D);Y=l(is,"A",{id:!0,class:!0,href:!0});var on=n(Y);mt=l(on,"SPAN",{});var nn=n(mt);f(ue.$$.fragment,nn),nn.forEach(a),on.forEach(a),Hs=u(is),yt=l(is,"SPAN",{});var rn=n(yt);Cs=r(rn,"Create custom Inference Handler"),rn.forEach(a),is.forEach(a),ua=u(e),U=l(e,"P",{});var ps=n(U);qs=r(ps,"Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ce=l(ps,"A",{href:!0,rel:!0});var pn=n(ce);Ps=r(pn,"handler.py"),pn.forEach(a),xs=r(ps," file in your model repository on the Hugging Face Hub."),ps.forEach(a),ca=u(e),E=l(e,"P",{});var x=n(E);Ts=r(x,"The "),fe=l(x,"A",{href:!0,rel:!0});var dn=n(fe);Is=r(dn,"handler.py"),dn.forEach(a),Ds=r(x," needs to implement the "),me=l(x,"A",{href:!0,rel:!0});var hn=n(me);Ns=r(hn,"EndpointHandler"),hn.forEach(a),Os=r(x," class with a "),_t=l(x,"CODE",{});var un=n(_t);Ss=r(un,"__init__"),un.forEach(a),Ls=r(x," and a "),vt=l(x,"CODE",{});var cn=n(vt);zs=r(cn,"__call__"),cn.forEach(a),Fs=r(x," method."),x.forEach(a),fa=u(e),A=l(e,"P",{});var dt=n(A);Ms=r(dt,"If you want to use custom dependencies, e.g. "),ye=l(dt,"A",{href:!0,rel:!0});var fn=n(ye);Rs=r(fn,"optimum"),fn.forEach(a),Ws=r(dt,", the dependencies must be listed in a "),wt=l(dt,"CODE",{});var mn=n(wt);Bs=r(mn,"requirements.txt"),mn.forEach(a),Ys=r(dt," as described above in \u201Cadd custom dependencies.\u201D"),dt.forEach(a),ma=u(e),N=l(e,"H2",{class:!0});var ds=n(N);G=l(ds,"A",{id:!0,class:!0,href:!0});var yn=n(G);Et=l(yn,"SPAN",{});var _n=n(Et);f(_e.$$.fragment,_n),_n.forEach(a),yn.forEach(a),Us=u(ds),gt=l(ds,"SPAN",{});var vn=n(gt);Gs=r(vn,"Custom Handler Examples"),vn.forEach(a),ds.forEach(a),ya=u(e),b=l(e,"P",{});var pe=n(b);Js=r(pe,"There are already several public examples on the "),ve=l(pe,"A",{href:!0,rel:!0});var wn=n(ve);Xs=r(wn,"Hugging Face Hub"),wn.forEach(a),Ks=r(pe," where you can take insipiration or directly use them. The repositories are tagged with "),bt=l(pe,"CODE",{});var En=n(bt);Qs=r(En,"endpoints-template"),En.forEach(a),Zs=r(pe," and can be found under this "),we=l(pe,"A",{href:!0,rel:!0});var gn=n(we);Vs=r(gn,"link"),gn.forEach(a),el=r(pe,"."),pe.forEach(a),_a=u(e),Ve=l(e,"P",{});var bn=n(Ve);tl=r(bn,"Included examples are for:"),bn.forEach(a),va=u(e),w=l(e,"UL",{});var k=n(w);$t=l(k,"LI",{});var $n=n($t);Ee=l($n,"A",{href:!0,rel:!0});var jn=n(Ee);al=r(jn,"Optimum and ONNX runtime"),jn.forEach(a),$n.forEach(a),sl=u(k),jt=l(k,"LI",{});var kn=n(jt);ge=l(kn,"A",{href:!0,rel:!0});var An=n(ge);ll=r(An,"Diffusers with stable-diffusion"),An.forEach(a),kn.forEach(a),ol=u(k),kt=l(k,"LI",{});var Hn=n(kt);be=l(Hn,"A",{href:!0,rel:!0});var Cn=n(be);nl=r(Cn,"Image Embeddings with BLIP"),Cn.forEach(a),Hn.forEach(a),rl=u(k),At=l(k,"LI",{});var qn=n(At);$e=l(qn,"A",{href:!0,rel:!0});var Pn=n($e);il=r(Pn,"TrOCR for OCR Detection"),Pn.forEach(a),qn.forEach(a),pl=u(k),Ht=l(k,"LI",{});var xn=n(Ht);je=l(xn,"A",{href:!0,rel:!0});var Tn=n(je);dl=r(Tn,"Optimized Sentence Transformers with Optimum"),Tn.forEach(a),xn.forEach(a),hl=u(k),Ct=l(k,"LI",{});var In=n(Ct);et=l(In,"A",{href:!0});var Dn=n(et);ul=r(Dn,"OpenAI Whisper"),Dn.forEach(a),In.forEach(a),k.forEach(a),wa=u(e),O=l(e,"H2",{class:!0});var hs=n(O);J=l(hs,"A",{id:!0,class:!0,href:!0});var Nn=n(J);qt=l(Nn,"SPAN",{});var On=n(qt);f(ke.$$.fragment,On),On.forEach(a),Nn.forEach(a),cl=u(hs),Pt=l(hs,"SPAN",{});var Sn=n(Pt);fl=r(Sn,"Tutorial"),Sn.forEach(a),hs.forEach(a),Ea=u(e),H=l(e,"P",{});var ht=n(H);ml=r(ht,"Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),xt=l(ht,"EM",{});var Ln=n(xt);yl=r(Ln,"WRITE"),Ln.forEach(a),_l=r(ht," access to the repository. To find, create and manage Access Tokens, click "),Ae=l(ht,"A",{href:!0,rel:!0});var zn=n(Ae);vl=r(zn,"here"),zn.forEach(a),wl=r(ht,"."),ht.forEach(a),ga=u(e),X=l(e,"P",{});var us=n(X);El=r(us,"If you want to write a Custom Handler for an existing model from the community, you can use the "),He=l(us,"A",{href:!0,rel:!0});var Fn=n(He);gl=r(Fn,"repo_duplicator"),Fn.forEach(a),bl=r(us," to create a repository fork."),us.forEach(a),ba=u(e),K=l(e,"P",{});var cs=n(K);$l=r(cs,"The code can also be found in this "),Ce=l(cs,"A",{href:!0,rel:!0});var Mn=n(Ce);jl=r(Mn,"Notebook"),Mn.forEach(a),kl=r(cs,"."),cs.forEach(a),$a=u(e),qe=l(e,"P",{});var an=n(qe);Al=r(an,"You can also search for already existing Custom Handlers here: "),Pe=l(an,"A",{href:!0,rel:!0});var Rn=n(Pe);Hl=r(Rn,"https://huggingface.co/models?other=endpoints-template"),Rn.forEach(a),an.forEach(a),ja=u(e),S=l(e,"H3",{class:!0});var fs=n(S);Q=l(fs,"A",{id:!0,class:!0,href:!0});var Wn=n(Q);Tt=l(Wn,"SPAN",{});var Bn=n(Tt);f(xe.$$.fragment,Bn),Bn.forEach(a),Wn.forEach(a),Cl=u(fs),It=l(fs,"SPAN",{});var Yn=n(It);ql=r(Yn,"1. Set up Development Environment"),Yn.forEach(a),fs.forEach(a),ka=u(e),tt=l(e,"P",{});var Un=n(tt);Pl=r(Un,"The easiest way to develop your Custom Handler is to set up a local development environment and to implement, test, and iterate on your handler and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies (needed to create the CP, not needed for inference)."),Un.forEach(a),Aa=u(e),f(Te.$$.fragment,e),Ha=u(e),at=l(e,"P",{});var Gn=n(at);xl=r(Gn,"After we have installed our libraries we will clone our repository to our development environment."),Gn.forEach(a),Ca=u(e),Z=l(e,"P",{});var ms=n(Z);Tl=r(ms,"We will use "),Ie=l(ms,"A",{href:!0,rel:!0});var Jn=n(Ie);Il=r(Jn,"philschmid/distilbert-base-uncased-emotion"),Jn.forEach(a),Dl=r(ms," during the tutorial."),ms.forEach(a),qa=u(e),f(De.$$.fragment,e),Pa=u(e),V=l(e,"P",{});var ys=n(V);Nl=r(ys,"To be able to push our CP later you need to login into our HF account. This can be done by using the "),Dt=l(ys,"CODE",{});var Xn=n(Dt);Ol=r(Xn,"huggingface-cli"),Xn.forEach(a),Sl=r(ys,"."),ys.forEach(a),xa=u(e),st=l(e,"P",{});var Kn=n(st);Nt=l(Kn,"EM",{});var Qn=n(Nt);Ll=r(Qn,"Note: Make sure to configure git config as well."),Qn.forEach(a),Kn.forEach(a),Ta=u(e),f(Ne.$$.fragment,e),Ia=u(e),L=l(e,"H3",{class:!0});var _s=n(L);ee=l(_s,"A",{id:!0,class:!0,href:!0});var Zn=n(ee);Ot=l(Zn,"SPAN",{});var Vn=n(Ot);f(Oe.$$.fragment,Vn),Vn.forEach(a),Zn.forEach(a),zl=u(_s),St=l(_s,"SPAN",{});var er=n(St);Fl=r(er,"2. Create EndpointHandler (CP)"),er.forEach(a),_s.forEach(a),Da=u(e),g=l(e,"P",{});var T=n(g);Ml=r(T,"After you have set up your environment, you can start creating your CP. The CP is a Python class ("),Lt=l(T,"CODE",{});var tr=n(Lt);Rl=r(tr,"EndpointHandler"),tr.forEach(a),Wl=r(T,") inside a "),zt=l(T,"CODE",{});var ar=n(zt);Bl=r(ar,"handler.py"),ar.forEach(a),Yl=r(T," file in our repository. The handler.py needs to implement the EndpointHandler class with a "),Ft=l(T,"CODE",{});var sr=n(Ft);Ul=r(sr,"__init__"),sr.forEach(a),Gl=r(T," and a "),Mt=l(T,"CODE",{});var lr=n(Mt);Jl=r(lr,"__call__"),lr.forEach(a),Xl=r(T," method."),T.forEach(a),Na=u(e),te=l(e,"P",{});var vs=n(te);Kl=r(vs,"The "),Rt=l(vs,"CODE",{});var or=n(Rt);Ql=r(or,"__init__"),or.forEach(a),Zl=r(vs," method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),vs.forEach(a),Oa=u(e),C=l(e,"P",{});var ut=n(C);Vl=r(ut,"The "),Wt=l(ut,"CODE",{});var nr=n(Wt);eo=r(nr,"__call__"),nr.forEach(a),to=r(ut," method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),Bt=l(ut,"CODE",{});var rr=n(Bt);ao=r(rr,"inputs"),rr.forEach(a),so=r(ut," key."),ut.forEach(a),Sa=u(e),ae=l(e,"P",{});var ws=n(ae);lo=r(ws,"To create your "),Yt=l(ws,"CODE",{});var ir=n(Yt);oo=r(ir,"handler.py"),ir.forEach(a),no=r(ws," you have to first switch into your repository and create the file."),ws.forEach(a),La=u(e),f(Se.$$.fragment,e),za=u(e),$=l(e,"P",{});var de=n($);ro=r(de,"In there, you define your "),Ut=l(de,"CODE",{});var pr=n(Ut);io=r(pr,"EndpointHandler"),pr.forEach(a),po=r(de," class with the "),Gt=l(de,"CODE",{});var dr=n(Gt);ho=r(dr,"__init__"),dr.forEach(a),uo=r(de," and "),Jt=l(de,"CODE",{});var hr=n(Jt);co=r(hr,"__call__ "),hr.forEach(a),fo=r(de,"method."),de.forEach(a),Fa=u(e),f(Le.$$.fragment,e),Ma=u(e),z=l(e,"H3",{class:!0});var Es=n(z);se=l(Es,"A",{id:!0,class:!0,href:!0});var ur=n(se);Xt=l(ur,"SPAN",{});var cr=n(Xt);f(ze.$$.fragment,cr),cr.forEach(a),ur.forEach(a),mo=u(Es),Kt=l(Es,"SPAN",{});var fr=n(Kt);yo=r(fr,"3. Customize EndpointHandler"),fr.forEach(a),Es.forEach(a),Ra=u(e),le=l(e,"P",{});var gs=n(le);_o=r(gs,"Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Fe=l(gs,"A",{href:!0,rel:!0});var mr=n(Fe);vo=r(mr,"Custom Handler on the Hub"),mr.forEach(a),wo=r(gs," if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),gs.forEach(a),Wa=u(e),Me=l(e,"P",{});var sn=n(Me);Qt=l(sn,"EM",{});var yr=n(Qt);Eo=r(yr,"The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),yr.forEach(a),go=r(sn,"\u{1F334}\u{1F389}\u{1F606}"),sn.forEach(a),Ba=u(e),q=l(e,"P",{});var ct=n(q);bo=r(ct,"First, we need to create a new "),Zt=l(ct,"CODE",{});var _r=n(Zt);$o=r(_r,"requirements.txt"),_r.forEach(a),jo=r(ct," and add our "),Re=l(ct,"A",{href:!0,rel:!0});var vr=n(Re);ko=r(vr,"holiday detection package"),vr.forEach(a),Ao=r(ct," and make sure we have it installed in our development environment as well."),ct.forEach(a),Ya=u(e),f(We.$$.fragment,e),Ua=u(e),P=l(e,"P",{});var ft=n(P);Ho=r(ft,"Next, we have to adjust our "),Vt=l(ft,"CODE",{});var wr=n(Vt);Co=r(wr,"handler.py"),wr.forEach(a),qo=r(ft," and "),ea=l(ft,"CODE",{});var Er=n(ea);Po=r(Er,"EndpointHandler"),Er.forEach(a),xo=r(ft," to match our condition."),ft.forEach(a),Ga=u(e),f(Be.$$.fragment,e),Ja=u(e),F=l(e,"H3",{class:!0});var bs=n(F);oe=l(bs,"A",{id:!0,class:!0,href:!0});var gr=n(oe);ta=l(gr,"SPAN",{});var br=n(ta);f(Ye.$$.fragment,br),br.forEach(a),gr.forEach(a),To=u(bs),aa=l(bs,"SPAN",{});var $r=n(aa);Io=r($r,"4. Test EndpointHandler"),$r.forEach(a),bs.forEach(a),Xa=u(e),lt=l(e,"P",{});var jr=n(lt);Do=r(jr,"To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),jr.forEach(a),Ka=u(e),f(Ue.$$.fragment,e),Qa=u(e),ot=l(e,"P",{});var kr=n(ot);No=r(kr,"It works!!!! \u{1F389}"),kr.forEach(a),Za=u(e),nt=l(e,"P",{});var Ar=n(nt);sa=l(Ar,"EM",{});var Hr=n(sa);Oo=r(Hr,"Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),Hr.forEach(a),Ar.forEach(a),Va=u(e),M=l(e,"H3",{class:!0});var $s=n(M);ne=l($s,"A",{id:!0,class:!0,href:!0});var Cr=n(ne);la=l(Cr,"SPAN",{});var qr=n(la);f(Ge.$$.fragment,qr),qr.forEach(a),Cr.forEach(a),So=u($s),oa=l($s,"SPAN",{});var Pr=n(oa);Lo=r(Pr,"5. Push the Custom Handler to your repository"),Pr.forEach(a),$s.forEach(a),es=u(e),rt=l(e,"P",{});var xr=n(rt);zo=r(xr,"After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),xr.forEach(a),ts=u(e),f(Je.$$.fragment,e),as=u(e),j=l(e,"P",{});var he=n(j);Fo=r(he,"Now, you should see your "),na=l(he,"CODE",{});var Tr=n(na);Mo=r(Tr,"handler.py"),Tr.forEach(a),Ro=r(he," and "),ra=l(he,"CODE",{});var Ir=n(ra);Wo=r(Ir,"requirements.txt"),Ir.forEach(a),Bo=r(he," in your repository in the "),Xe=l(he,"A",{href:!0,rel:!0});var Dr=n(Xe);Yo=r(Dr,"\u201CFiles and version\u201D"),Dr.forEach(a),Uo=r(he," tab."),he.forEach(a),ss=u(e),R=l(e,"H3",{class:!0});var js=n(R);re=l(js,"A",{id:!0,class:!0,href:!0});var Nr=n(re);ia=l(Nr,"SPAN",{});var Or=n(ia);f(Ke.$$.fragment,Or),Or.forEach(a),Nr.forEach(a),Go=u(js),pa=l(js,"SPAN",{});var Sr=n(pa);Jo=r(Sr,"6. Deploy your Custom Handler as an Inference Endpoint"),Sr.forEach(a),js.forEach(a),ls=u(e),it=l(e,"P",{});var Lr=n(it);Xo=r(Lr,"The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),Lr.forEach(a),os=u(e),ie=l(e,"P",{});var ks=n(ie);Ko=r(ks,"The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),da=l(ks,"CODE",{});var zr=n(da);Qo=r(zr,"handler.py"),zr.forEach(a),Zo=r(ks," available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),ks.forEach(a),ns=u(e),pt=l(e,"P",{});var Fr=n(pt);Qe=l(Fr,"EM",{});var As=n(Qe);Vo=r(As,"Note: In your "),Ze=l(As,"A",{href:!0,rel:!0});var Mr=n(Ze);en=r(Mr,"Inference Endpoints dashboard"),Mr.forEach(a),tn=r(As,", the Task for this Endpoint should now be set to Custom"),As.forEach(a),Fr.forEach(a),this.h()},h(){d(I,"name","hf:doc:metadata"),d(I,"content",JSON.stringify(Xr)),d(Y,"id","create-custom-inference-handler"),d(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Y,"href","#create-custom-inference-handler"),d(D,"class","relative group"),d(ce,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(ce,"rel","nofollow"),d(fe,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(fe,"rel","nofollow"),d(me,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(me,"rel","nofollow"),d(ye,"href","https://raw.githubusercontent.com/huggingface/optimum"),d(ye,"rel","nofollow"),d(G,"id","custom-handler-examples"),d(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G,"href","#custom-handler-examples"),d(N,"class","relative group"),d(ve,"href","https://huggingface.co/models?other=endpoints-template"),d(ve,"rel","nofollow"),d(we,"href","https://huggingface.co/models?other=endpoints-template"),d(we,"rel","nofollow"),d(Ee,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77"),d(Ee,"rel","nofollow"),d(ge,"href","https://huggingface.co/philschmid/stable-diffusion-v1-4-endpoints"),d(ge,"rel","nofollow"),d(be,"href","https://huggingface.co/florentgbelidji/blip_image_embeddings"),d(be,"rel","nofollow"),d($e,"href","https://huggingface.co/philschmid/trocr-base-printed"),d($e,"rel","nofollow"),d(je,"href","https://huggingface.co/philschmid/all-MiniLM-L6-v2-optimum-embeddings"),d(je,"rel","nofollow"),d(et,"href","hhttps://huggingface.co/philschmid/openai-whisper-endpoint"),d(J,"id","tutorial"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#tutorial"),d(O,"class","relative group"),d(Ae,"href","https://huggingface.co/settings/tokens"),d(Ae,"rel","nofollow"),d(He,"href","https://huggingface.co/spaces/osanseviero/repo_duplicator"),d(He,"rel","nofollow"),d(Ce,"href","https://colab.research.google.com/drive/1hANJeRa1PK1gZaUorobnQGu4bFj4_4Rf?usp=sharing"),d(Ce,"rel","nofollow"),d(Pe,"href","https://huggingface.co/models?other=endpoints-template"),d(Pe,"rel","nofollow"),d(Q,"id","1-set-up-development-environment"),d(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q,"href","#1-set-up-development-environment"),d(S,"class","relative group"),d(Ie,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion"),d(Ie,"rel","nofollow"),d(ee,"id","2-create-endpointhandler-cp"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#2-create-endpointhandler-cp"),d(L,"class","relative group"),d(se,"id","3-customize-endpointhandler"),d(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(se,"href","#3-customize-endpointhandler"),d(z,"class","relative group"),d(Fe,"href","https://huggingface.co/models?other=endpoints-template"),d(Fe,"rel","nofollow"),d(Re,"href","https://pypi.org/project/holidays/"),d(Re,"rel","nofollow"),d(oe,"id","4-test-endpointhandler"),d(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oe,"href","#4-test-endpointhandler"),d(F,"class","relative group"),d(ne,"id","5-push-the-custom-handler-to-your-repository"),d(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ne,"href","#5-push-the-custom-handler-to-your-repository"),d(M,"class","relative group"),d(Xe,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion/tree/main"),d(Xe,"rel","nofollow"),d(re,"id","6-deploy-your-custom-handler-as-an-inference-endpoint"),d(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(re,"href","#6-deploy-your-custom-handler-as-an-inference-endpoint"),d(R,"class","relative group"),d(Ze,"href","https://ui.endpoints.huggingface.co/"),d(Ze,"rel","nofollow")},m(e,i){t(document.head,I),p(e,ha,i),p(e,D,i),t(D,Y),t(Y,mt),m(ue,mt,null),t(D,Hs),t(D,yt),t(yt,Cs),p(e,ua,i),p(e,U,i),t(U,qs),t(U,ce),t(ce,Ps),t(U,xs),p(e,ca,i),p(e,E,i),t(E,Ts),t(E,fe),t(fe,Is),t(E,Ds),t(E,me),t(me,Ns),t(E,Os),t(E,_t),t(_t,Ss),t(E,Ls),t(E,vt),t(vt,zs),t(E,Fs),p(e,fa,i),p(e,A,i),t(A,Ms),t(A,ye),t(ye,Rs),t(A,Ws),t(A,wt),t(wt,Bs),t(A,Ys),p(e,ma,i),p(e,N,i),t(N,G),t(G,Et),m(_e,Et,null),t(N,Us),t(N,gt),t(gt,Gs),p(e,ya,i),p(e,b,i),t(b,Js),t(b,ve),t(ve,Xs),t(b,Ks),t(b,bt),t(bt,Qs),t(b,Zs),t(b,we),t(we,Vs),t(b,el),p(e,_a,i),p(e,Ve,i),t(Ve,tl),p(e,va,i),p(e,w,i),t(w,$t),t($t,Ee),t(Ee,al),t(w,sl),t(w,jt),t(jt,ge),t(ge,ll),t(w,ol),t(w,kt),t(kt,be),t(be,nl),t(w,rl),t(w,At),t(At,$e),t($e,il),t(w,pl),t(w,Ht),t(Ht,je),t(je,dl),t(w,hl),t(w,Ct),t(Ct,et),t(et,ul),p(e,wa,i),p(e,O,i),t(O,J),t(J,qt),m(ke,qt,null),t(O,cl),t(O,Pt),t(Pt,fl),p(e,Ea,i),p(e,H,i),t(H,ml),t(H,xt),t(xt,yl),t(H,_l),t(H,Ae),t(Ae,vl),t(H,wl),p(e,ga,i),p(e,X,i),t(X,El),t(X,He),t(He,gl),t(X,bl),p(e,ba,i),p(e,K,i),t(K,$l),t(K,Ce),t(Ce,jl),t(K,kl),p(e,$a,i),p(e,qe,i),t(qe,Al),t(qe,Pe),t(Pe,Hl),p(e,ja,i),p(e,S,i),t(S,Q),t(Q,Tt),m(xe,Tt,null),t(S,Cl),t(S,It),t(It,ql),p(e,ka,i),p(e,tt,i),t(tt,Pl),p(e,Aa,i),m(Te,e,i),p(e,Ha,i),p(e,at,i),t(at,xl),p(e,Ca,i),p(e,Z,i),t(Z,Tl),t(Z,Ie),t(Ie,Il),t(Z,Dl),p(e,qa,i),m(De,e,i),p(e,Pa,i),p(e,V,i),t(V,Nl),t(V,Dt),t(Dt,Ol),t(V,Sl),p(e,xa,i),p(e,st,i),t(st,Nt),t(Nt,Ll),p(e,Ta,i),m(Ne,e,i),p(e,Ia,i),p(e,L,i),t(L,ee),t(ee,Ot),m(Oe,Ot,null),t(L,zl),t(L,St),t(St,Fl),p(e,Da,i),p(e,g,i),t(g,Ml),t(g,Lt),t(Lt,Rl),t(g,Wl),t(g,zt),t(zt,Bl),t(g,Yl),t(g,Ft),t(Ft,Ul),t(g,Gl),t(g,Mt),t(Mt,Jl),t(g,Xl),p(e,Na,i),p(e,te,i),t(te,Kl),t(te,Rt),t(Rt,Ql),t(te,Zl),p(e,Oa,i),p(e,C,i),t(C,Vl),t(C,Wt),t(Wt,eo),t(C,to),t(C,Bt),t(Bt,ao),t(C,so),p(e,Sa,i),p(e,ae,i),t(ae,lo),t(ae,Yt),t(Yt,oo),t(ae,no),p(e,La,i),m(Se,e,i),p(e,za,i),p(e,$,i),t($,ro),t($,Ut),t(Ut,io),t($,po),t($,Gt),t(Gt,ho),t($,uo),t($,Jt),t(Jt,co),t($,fo),p(e,Fa,i),m(Le,e,i),p(e,Ma,i),p(e,z,i),t(z,se),t(se,Xt),m(ze,Xt,null),t(z,mo),t(z,Kt),t(Kt,yo),p(e,Ra,i),p(e,le,i),t(le,_o),t(le,Fe),t(Fe,vo),t(le,wo),p(e,Wa,i),p(e,Me,i),t(Me,Qt),t(Qt,Eo),t(Me,go),p(e,Ba,i),p(e,q,i),t(q,bo),t(q,Zt),t(Zt,$o),t(q,jo),t(q,Re),t(Re,ko),t(q,Ao),p(e,Ya,i),m(We,e,i),p(e,Ua,i),p(e,P,i),t(P,Ho),t(P,Vt),t(Vt,Co),t(P,qo),t(P,ea),t(ea,Po),t(P,xo),p(e,Ga,i),m(Be,e,i),p(e,Ja,i),p(e,F,i),t(F,oe),t(oe,ta),m(Ye,ta,null),t(F,To),t(F,aa),t(aa,Io),p(e,Xa,i),p(e,lt,i),t(lt,Do),p(e,Ka,i),m(Ue,e,i),p(e,Qa,i),p(e,ot,i),t(ot,No),p(e,Za,i),p(e,nt,i),t(nt,sa),t(sa,Oo),p(e,Va,i),p(e,M,i),t(M,ne),t(ne,la),m(Ge,la,null),t(M,So),t(M,oa),t(oa,Lo),p(e,es,i),p(e,rt,i),t(rt,zo),p(e,ts,i),m(Je,e,i),p(e,as,i),p(e,j,i),t(j,Fo),t(j,na),t(na,Mo),t(j,Ro),t(j,ra),t(ra,Wo),t(j,Bo),t(j,Xe),t(Xe,Yo),t(j,Uo),p(e,ss,i),p(e,R,i),t(R,re),t(re,ia),m(Ke,ia,null),t(R,Go),t(R,pa),t(pa,Jo),p(e,ls,i),p(e,it,i),t(it,Xo),p(e,os,i),p(e,ie,i),t(ie,Ko),t(ie,da),t(da,Qo),t(ie,Zo),p(e,ns,i),p(e,pt,i),t(pt,Qe),t(Qe,Vo),t(Qe,Ze),t(Ze,en),t(Qe,tn),rs=!0},p:Ur,i(e){rs||(y(ue.$$.fragment,e),y(_e.$$.fragment,e),y(ke.$$.fragment,e),y(xe.$$.fragment,e),y(Te.$$.fragment,e),y(De.$$.fragment,e),y(Ne.$$.fragment,e),y(Oe.$$.fragment,e),y(Se.$$.fragment,e),y(Le.$$.fragment,e),y(ze.$$.fragment,e),y(We.$$.fragment,e),y(Be.$$.fragment,e),y(Ye.$$.fragment,e),y(Ue.$$.fragment,e),y(Ge.$$.fragment,e),y(Je.$$.fragment,e),y(Ke.$$.fragment,e),rs=!0)},o(e){_(ue.$$.fragment,e),_(_e.$$.fragment,e),_(ke.$$.fragment,e),_(xe.$$.fragment,e),_(Te.$$.fragment,e),_(De.$$.fragment,e),_(Ne.$$.fragment,e),_(Oe.$$.fragment,e),_(Se.$$.fragment,e),_(Le.$$.fragment,e),_(ze.$$.fragment,e),_(We.$$.fragment,e),_(Be.$$.fragment,e),_(Ye.$$.fragment,e),_(Ue.$$.fragment,e),_(Ge.$$.fragment,e),_(Je.$$.fragment,e),_(Ke.$$.fragment,e),rs=!1},d(e){a(I),e&&a(ha),e&&a(D),v(ue),e&&a(ua),e&&a(U),e&&a(ca),e&&a(E),e&&a(fa),e&&a(A),e&&a(ma),e&&a(N),v(_e),e&&a(ya),e&&a(b),e&&a(_a),e&&a(Ve),e&&a(va),e&&a(w),e&&a(wa),e&&a(O),v(ke),e&&a(Ea),e&&a(H),e&&a(ga),e&&a(X),e&&a(ba),e&&a(K),e&&a($a),e&&a(qe),e&&a(ja),e&&a(S),v(xe),e&&a(ka),e&&a(tt),e&&a(Aa),v(Te,e),e&&a(Ha),e&&a(at),e&&a(Ca),e&&a(Z),e&&a(qa),v(De,e),e&&a(Pa),e&&a(V),e&&a(xa),e&&a(st),e&&a(Ta),v(Ne,e),e&&a(Ia),e&&a(L),v(Oe),e&&a(Da),e&&a(g),e&&a(Na),e&&a(te),e&&a(Oa),e&&a(C),e&&a(Sa),e&&a(ae),e&&a(La),v(Se,e),e&&a(za),e&&a($),e&&a(Fa),v(Le,e),e&&a(Ma),e&&a(z),v(ze),e&&a(Ra),e&&a(le),e&&a(Wa),e&&a(Me),e&&a(Ba),e&&a(q),e&&a(Ya),v(We,e),e&&a(Ua),e&&a(P),e&&a(Ga),v(Be,e),e&&a(Ja),e&&a(F),v(Ye),e&&a(Xa),e&&a(lt),e&&a(Ka),v(Ue,e),e&&a(Qa),e&&a(ot),e&&a(Za),e&&a(nt),e&&a(Va),e&&a(M),v(Ge),e&&a(es),e&&a(rt),e&&a(ts),v(Je,e),e&&a(as),e&&a(j),e&&a(ss),e&&a(R),v(Ke),e&&a(ls),e&&a(it),e&&a(os),e&&a(ie),e&&a(ns),e&&a(pt)}}}const Xr={local:"create-custom-inference-handler",sections:[{local:"custom-handler-examples",title:"Custom Handler Examples"},{local:"tutorial",sections:[{local:"1-set-up-development-environment",title:"1. Set up Development Environment"},{local:"2-create-endpointhandler-cp",title:"2. Create EndpointHandler (CP)"},{local:"3-customize-endpointhandler",title:"3. Customize EndpointHandler"},{local:"4-test-endpointhandler",title:"4. Test EndpointHandler"},{local:"5-push-the-custom-handler-to-your-repository",title:"5. Push the Custom Handler to your repository"},{local:"6-deploy-your-custom-handler-as-an-inference-endpoint",title:"6. Deploy your Custom Handler as an Inference Endpoint"}],title:"Tutorial"}],title:"Create custom Inference Handler"};function Kr(ln){return Gr(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ei extends Rr{constructor(I){super();Wr(this,I,Kr,Jr,Br,{})}}export{ei as default,Xr as metadata};
