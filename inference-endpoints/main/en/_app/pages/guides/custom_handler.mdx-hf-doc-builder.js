import{S as pi,i as di,s as hi,e as s,k as h,w as f,t as n,M as ci,c as l,d as a,m as c,a as o,x as m,h as r,b as d,G as t,g as p,y,L as ui,q as _,o as v,B as w,v as fi}from"../../chunks/vendor-hf-doc-builder.js";import{I as B}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as U}from"../../chunks/CodeBlock-hf-doc-builder.js";function mi(gn){let T,va,I,W,vt,ce,Ds,wt,Ns,wa,Y,Os,ue,Ss,Ls,Ea,b,zs,fe,Fs,Ms,me,Rs,Bs,Et,Us,Ws,gt,Ys,Gs,ga,H,Js,ye,Xs,Ks,bt,Qs,Zs,ba,D,G,$t,_e,Vs,jt,el,$a,$,tl,ve,al,sl,kt,ll,ol,we,nl,rl,ja,st,il,ka,u,At,Ee,pl,dl,Ht,ge,hl,cl,qt,be,ul,fl,Ct,$e,ml,yl,Pt,je,_l,vl,xt,ke,wl,El,Tt,Ae,gl,bl,It,lt,$l,Aa,N,J,Dt,He,jl,Nt,kl,Ha,q,Al,Ot,Hl,ql,qe,Cl,Pl,qa,X,xl,Ce,Tl,Il,Ca,K,Dl,Pe,Nl,Ol,Pa,xe,Sl,Te,Ll,xa,O,Q,St,Ie,zl,Lt,Fl,Ta,De,Ml,zt,Rl,Ia,Ne,Da,ot,Bl,Na,Z,Ul,Oe,Wl,Yl,Oa,Se,Sa,V,Gl,Ft,Jl,Xl,La,nt,Mt,Kl,za,Le,Fa,S,ee,Rt,ze,Ql,Bt,Zl,Ma,E,Vl,Ut,eo,to,Wt,ao,so,Yt,lo,oo,Gt,no,ro,Jt,io,po,Ra,te,Fe,ho,Xt,co,uo,fo,L,mo,Kt,yo,_o,Qt,vo,wo,Ba,ae,Eo,Zt,go,bo,Ua,Me,Wa,j,$o,Vt,jo,ko,ea,Ao,Ho,ta,qo,Co,Ya,Re,Ga,z,se,aa,Be,Po,sa,xo,Ja,le,To,Ue,Io,Do,Xa,We,la,No,Oo,Ka,C,So,oa,Lo,zo,Ye,Fo,Mo,Qa,Ge,Za,P,Ro,na,Bo,Uo,ra,Wo,Yo,Va,Je,es,F,oe,ia,Xe,Go,pa,Jo,ts,rt,Xo,as,Ke,ss,it,Ko,ls,pt,da,Qo,os,M,ne,ha,Qe,Zo,ca,Vo,ns,dt,en,rs,Ze,is,k,tn,ua,an,sn,fa,ln,on,Ve,nn,rn,ps,R,re,ma,et,pn,ya,dn,ds,ht,hn,hs,ie,cn,_a,un,fn,cs,ct,tt,mn,at,yn,_n,us;return ce=new B({}),_e=new B({}),He=new B({}),Ie=new B({}),Ne=new U({props:{code:`# install git-lfs to interact with the repository
sudo apt-get update
sudo apt-get install git-lfs
# install transformers (not needed since it is installed by default in the container)
pip install transformers[sklearn,sentencepiece,audio,vision]`,highlighted:`<span class="hljs-comment"># install git-lfs to interact with the repository</span>
sudo apt-<span class="hljs-built_in">get</span> update
sudo apt-<span class="hljs-built_in">get</span> install git-lfs
<span class="hljs-comment"># install transformers (not needed since it is installed by default in the container)</span>
pip install transformers[sklearn,sentencepiece,audio,vision]`}}),Se=new U({props:{code:`git lfs install
git clone https://huggingface.co/philschmid/distilbert-base-uncased-emotion`,highlighted:`git lfs install
git clone https:<span class="hljs-regexp">//</span>huggingface.co<span class="hljs-regexp">/philschmid/</span>distilbert-base-uncased-emotion`}}),Le=new U({props:{code:`# setup cli with token
huggingface-cli login
git config --global credential.helper store`,highlighted:`# setup <span class="hljs-keyword">cli</span> with <span class="hljs-keyword">token</span>
huggingface-<span class="hljs-keyword">cli</span> login
git config --<span class="hljs-keyword">global</span> credential.helper store`}}),ze=new B({}),Me=new U({props:{code:"!cd distilbert-base-uncased-emotion && touch handler.py",highlighted:'!<span class="hljs-built_in">cd</span> distilbert-base-uncased-emotion &amp;&amp; <span class="hljs-built_in">touch</span> handler.py'}}),Re=new U({props:{code:`from typing import Dict, List, Any

class EndpointHandler():
    def __init__(self, path=""):
        # Preload all the elements you are going to need at inference.
        # pseudo:
        # self.model= load_model(path)

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """

        # pseudo
        # self.model(input)`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        <span class="hljs-comment"># Preload all the elements you are going to need at inference.</span>
        <span class="hljs-comment"># pseudo:</span>
        <span class="hljs-comment"># self.model= load_model(path)</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\` | \`PIL.Image\` | \`np.array\`)
            kwargs
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>

        <span class="hljs-comment"># pseudo</span>
        <span class="hljs-comment"># self.model(input)</span>`}}),Be=new B({}),Ge=new U({props:{code:`!echo "holidays" >> requirements.txt
!pip install -r requirements.txt`,highlighted:`!echo <span class="hljs-string">&quot;holidays&quot;</span> &gt;&gt; requirements.txt
!pip install -r requirements.txt`}}),Je=new U({props:{code:`from typing import Dict, List, Any
from transformers import pipeline
import holidays

class EndpointHandler():
    def __init__(self, path=""):
        self.pipeline = pipeline("text-classification",model=path)
        self.holidays = holidays.US()

    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        """
        # get inputs
        inputs = data.pop("inputs",data)
        date = data.pop("date", None)

        # check if date exists and if it is a holiday
        if date is not None and date in self.holidays:
          return [{"label": "happy", "score": 1}]


        # run normal prediction
        prediction = self.pipeline(inputs)
        return prediction`,highlighted:`<span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Dict</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Any</span>
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline
<span class="hljs-keyword">import</span> holidays

<span class="hljs-keyword">class</span> <span class="hljs-title class_">EndpointHandler</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, path=<span class="hljs-string">&quot;&quot;</span></span>):
        self.pipeline = pipeline(<span class="hljs-string">&quot;text-classification&quot;</span>,model=path)
        self.holidays = holidays.US()

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, data: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">Any</span>]]:
        <span class="hljs-string">&quot;&quot;&quot;
       data args:
            inputs (:obj: \`str\`)
            date (:obj: \`str\`)
      Return:
            A :obj:\`list\` | \`dict\`: will be serialized and returned
        &quot;&quot;&quot;</span>
        <span class="hljs-comment"># get inputs</span>
        inputs = data.pop(<span class="hljs-string">&quot;inputs&quot;</span>,data)
        date = data.pop(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-literal">None</span>)

        <span class="hljs-comment"># check if date exists and if it is a holiday</span>
        <span class="hljs-keyword">if</span> date <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> date <span class="hljs-keyword">in</span> self.holidays:
          <span class="hljs-keyword">return</span> [{<span class="hljs-string">&quot;label&quot;</span>: <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>: <span class="hljs-number">1</span>}]


        <span class="hljs-comment"># run normal prediction</span>
        prediction = self.pipeline(inputs)
        <span class="hljs-keyword">return</span> prediction`}}),Xe=new B({}),Ke=new U({props:{code:`from handler import EndpointHandler

# init handler
my_handler = EndpointHandler(path=".")

# prepare sample payload
non_holiday_payload = {"inputs": "I am quite excited how this will turn out", "date": "2022-08-08"}
holiday_payload = {"inputs": "Today is a though day", "date": "2022-07-04"}

# test the handler
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

# show results
print("non_holiday_pred", non_holiday_pred)
print("holiday_payload", holiday_payload)

# non_holiday_pred [{'label': 'joy', 'score': 0.9985942244529724}]
# holiday_payload [{'label': 'happy', 'score': 1}]`,highlighted:`<span class="hljs-keyword">from</span> handler <span class="hljs-keyword">import</span> EndpointHandler

<span class="hljs-comment"># init handler</span>
my_handler = EndpointHandler(path=<span class="hljs-string">&quot;.&quot;</span>)

<span class="hljs-comment"># prepare sample payload</span>
non_holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;I am quite excited how this will turn out&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-08-08&quot;</span>}
holiday_payload = {<span class="hljs-string">&quot;inputs&quot;</span>: <span class="hljs-string">&quot;Today is a though day&quot;</span>, <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-07-04&quot;</span>}

<span class="hljs-comment"># test the handler</span>
non_holiday_pred=my_handler(non_holiday_payload)
holiday_payload=my_handler(holiday_payload)

<span class="hljs-comment"># show results</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;non_holiday_pred&quot;</span>, non_holiday_pred)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;holiday_payload&quot;</span>, holiday_payload)

<span class="hljs-comment"># non_holiday_pred [{&#x27;label&#x27;: &#x27;joy&#x27;, &#x27;score&#x27;: 0.9985942244529724}]</span>
<span class="hljs-comment"># holiday_payload [{&#x27;label&#x27;: &#x27;happy&#x27;, &#x27;score&#x27;: 1}]</span>`}}),Qe=new B({}),Ze=new U({props:{code:`# add all our new files
!git add *
# commit our files
!git commit -m "add custom handler"
# push the files to the hub
!git push`,highlighted:`# <span class="hljs-built_in">add</span> <span class="hljs-keyword">all</span> our <span class="hljs-keyword">new</span> <span class="hljs-keyword">files</span>
!git <span class="hljs-built_in">add</span> *
# commit our <span class="hljs-keyword">files</span>
!git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;add custom handler&quot;</span>
# push the <span class="hljs-keyword">files</span> <span class="hljs-keyword">to</span> the hub
!git push`}}),et=new B({}),{c(){T=s("meta"),va=h(),I=s("h1"),W=s("a"),vt=s("span"),f(ce.$$.fragment),Ds=h(),wt=s("span"),Ns=n("Create custom Inference Handler"),wa=h(),Y=s("p"),Os=n("Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ue=s("a"),Ss=n("handler.py"),Ls=n(" file in your model repository on the Hugging Face Hub."),Ea=h(),b=s("p"),zs=n("The "),fe=s("a"),Fs=n("handler.py"),Ms=n(" needs to implement the "),me=s("a"),Rs=n("EndpointHandler"),Bs=n(" class with a "),Et=s("code"),Us=n("__init__"),Ws=n(" and a "),gt=s("code"),Ys=n("__call__"),Gs=n(" method."),ga=h(),H=s("p"),Js=n("If you want to use custom dependencies, e.g. "),ye=s("a"),Xs=n("optimum"),Ks=n(", the dependencies must be listed in a "),bt=s("code"),Qs=n("requirements.txt"),Zs=n(" as described above in \u201Cadd custom dependencies.\u201D"),ba=h(),D=s("h2"),G=s("a"),$t=s("span"),f(_e.$$.fragment),Vs=h(),jt=s("span"),el=n("Custom Handler Examples"),$a=h(),$=s("p"),tl=n("There are already several public examples on the "),ve=s("a"),al=n("Hugging Face Hub"),sl=n(" where you can take insipiration or directly use them. The repositories are tagged with "),kt=s("code"),ll=n("endpoints-template"),ol=n(" and can be found under this "),we=s("a"),nl=n("link"),rl=n("."),ja=h(),st=s("p"),il=n("Included examples are for:"),ka=h(),u=s("ul"),At=s("li"),Ee=s("a"),pl=n("Optimum and ONNX Runtime"),dl=h(),Ht=s("li"),ge=s("a"),hl=n("Diffusers with stable-diffusion"),cl=h(),qt=s("li"),be=s("a"),ul=n("Image Embeddings with BLIP"),fl=h(),Ct=s("li"),$e=s("a"),ml=n("TrOCR for OCR Detection"),yl=h(),Pt=s("li"),je=s("a"),_l=n("Optimized Sentence Transformers with Optimum"),vl=h(),xt=s("li"),ke=s("a"),wl=n("Pyannote Speaker diarization"),El=h(),Tt=s("li"),Ae=s("a"),gl=n("LayoutLM"),bl=h(),It=s("li"),lt=s("a"),$l=n("Flair NER"),Aa=h(),N=s("h2"),J=s("a"),Dt=s("span"),f(He.$$.fragment),jl=h(),Nt=s("span"),kl=n("Tutorial"),Ha=h(),q=s("p"),Al=n("Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),Ot=s("em"),Hl=n("WRITE"),ql=n(" access to the repository. To find, create and manage Access Tokens, click "),qe=s("a"),Cl=n("here"),Pl=n("."),qa=h(),X=s("p"),xl=n("If you want to write a Custom Handler for an existing model from the community, you can use the "),Ce=s("a"),Tl=n("repo_duplicator"),Il=n(" to create a repository fork."),Ca=h(),K=s("p"),Dl=n("The code can also be found in this "),Pe=s("a"),Nl=n("Notebook"),Ol=n("."),Pa=h(),xe=s("p"),Sl=n("You can also search for already existing Custom Handlers here: "),Te=s("a"),Ll=n("https://huggingface.co/models?other=endpoints-template"),xa=h(),O=s("h3"),Q=s("a"),St=s("span"),f(Ie.$$.fragment),zl=h(),Lt=s("span"),Fl=n("1. Set up Development Environment"),Ta=h(),De=s("p"),Ml=n(`The easiest way to develop our custom handler is to set up a local development environment, to implement, test, and iterate there, and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies.
`),zt=s("em"),Rl=n("needed to create the custom handler, not needed for inference"),Ia=h(),f(Ne.$$.fragment),Da=h(),ot=s("p"),Bl=n("After we have installed our libraries we will clone our repository to our development environment."),Na=h(),Z=s("p"),Ul=n("We will use "),Oe=s("a"),Wl=n("philschmid/distilbert-base-uncased-emotion"),Yl=n(" during the tutorial."),Oa=h(),f(Se.$$.fragment),Sa=h(),V=s("p"),Gl=n("To be able to push our CP later you need to login into our HF account. This can be done by using the "),Ft=s("code"),Jl=n("huggingface-cli"),Xl=n("."),La=h(),nt=s("p"),Mt=s("em"),Kl=n("Note: Make sure to configure git config as well."),za=h(),f(Le.$$.fragment),Fa=h(),S=s("h3"),ee=s("a"),Rt=s("span"),f(ze.$$.fragment),Ql=h(),Bt=s("span"),Zl=n("2. Create EndpointHandler (CP)"),Ma=h(),E=s("p"),Vl=n("After we have set up our environment, we can start creating your custom handler. The custom handler is a Python class ("),Ut=s("code"),eo=n("EndpointHandler"),to=n(") inside a "),Wt=s("code"),ao=n("handler.py"),so=n(" file in our repository. The "),Yt=s("code"),lo=n("EndpointHandler"),oo=n(" needs to implement an "),Gt=s("code"),no=n("__init__"),ro=n(" and a "),Jt=s("code"),io=n("__call__"),po=n(" method."),Ra=h(),te=s("ul"),Fe=s("li"),ho=n("The "),Xt=s("code"),co=n("__init__"),uo=n(" method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),fo=h(),L=s("li"),mo=n("The "),Kt=s("code"),yo=n("__call__"),_o=n(" method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),Qt=s("code"),vo=n("inputs"),wo=n(" key."),Ba=h(),ae=s("p"),Eo=n("The first step is to create our "),Zt=s("code"),go=n("handler.py"),bo=n(" in the local clone of our repository."),Ua=h(),f(Me.$$.fragment),Wa=h(),j=s("p"),$o=n("In there, you define your "),Vt=s("code"),jo=n("EndpointHandler"),ko=n(" class with the "),ea=s("code"),Ao=n("__init__"),Ho=n(" and "),ta=s("code"),qo=n("__call__ "),Co=n("method."),Ya=h(),f(Re.$$.fragment),Ga=h(),z=s("h3"),se=s("a"),aa=s("span"),f(Be.$$.fragment),Po=h(),sa=s("span"),xo=n("3. Customize EndpointHandler"),Ja=h(),le=s("p"),To=n("Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Ue=s("a"),Io=n("Custom Handler on the Hub"),Do=n(" if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),Xa=h(),We=s("p"),la=s("em"),No=n("The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),Oo=n("\u{1F334}\u{1F389}\u{1F606}"),Ka=h(),C=s("p"),So=n("First, we need to create a new "),oa=s("code"),Lo=n("requirements.txt"),zo=n(" and add our "),Ye=s("a"),Fo=n("holiday detection package"),Mo=n(" and make sure we have it installed in our development environment as well."),Qa=h(),f(Ge.$$.fragment),Za=h(),P=s("p"),Ro=n("Next, we have to adjust our "),na=s("code"),Bo=n("handler.py"),Uo=n(" and "),ra=s("code"),Wo=n("EndpointHandler"),Yo=n(" to match our condition."),Va=h(),f(Je.$$.fragment),es=h(),F=s("h3"),oe=s("a"),ia=s("span"),f(Xe.$$.fragment),Go=h(),pa=s("span"),Jo=n("4. Test EndpointHandler"),ts=h(),rt=s("p"),Xo=n("To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),as=h(),f(Ke.$$.fragment),ss=h(),it=s("p"),Ko=n("It works!!!! \u{1F389}"),ls=h(),pt=s("p"),da=s("em"),Qo=n("Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),os=h(),M=s("h3"),ne=s("a"),ha=s("span"),f(Qe.$$.fragment),Zo=h(),ca=s("span"),Vo=n("5. Push the Custom Handler to your repository"),ns=h(),dt=s("p"),en=n("After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),rs=h(),f(Ze.$$.fragment),is=h(),k=s("p"),tn=n("Now, you should see your "),ua=s("code"),an=n("handler.py"),sn=n(" and "),fa=s("code"),ln=n("requirements.txt"),on=n(" in your repository in the "),Ve=s("a"),nn=n("\u201CFiles and version\u201D"),rn=n(" tab."),ps=h(),R=s("h3"),re=s("a"),ma=s("span"),f(et.$$.fragment),pn=h(),ya=s("span"),dn=n("6. Deploy your Custom Handler as an Inference Endpoint"),ds=h(),ht=s("p"),hn=n("The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),hs=h(),ie=s("p"),cn=n("The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),_a=s("code"),un=n("handler.py"),fn=n(" available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),cs=h(),ct=s("p"),tt=s("em"),mn=n("Note: In your "),at=s("a"),yn=n("Inference Endpoints dashboard"),_n=n(", the Task for this Endpoint should now be set to Custom"),this.h()},l(e){const i=ci('[data-svelte="svelte-1phssyn"]',document.head);T=l(i,"META",{name:!0,content:!0}),i.forEach(a),va=c(e),I=l(e,"H1",{class:!0});var fs=o(I);W=l(fs,"A",{id:!0,class:!0,href:!0});var bn=o(W);vt=l(bn,"SPAN",{});var $n=o(vt);m(ce.$$.fragment,$n),$n.forEach(a),bn.forEach(a),Ds=c(fs),wt=l(fs,"SPAN",{});var jn=o(wt);Ns=r(jn,"Create custom Inference Handler"),jn.forEach(a),fs.forEach(a),wa=c(e),Y=l(e,"P",{});var ms=o(Y);Os=r(ms,"Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers tasks and can support custom tasks, including custom pre- & post-processing. The customization can be done through a "),ue=l(ms,"A",{href:!0,rel:!0});var kn=o(ue);Ss=r(kn,"handler.py"),kn.forEach(a),Ls=r(ms," file in your model repository on the Hugging Face Hub."),ms.forEach(a),Ea=c(e),b=l(e,"P",{});var x=o(b);zs=r(x,"The "),fe=l(x,"A",{href:!0,rel:!0});var An=o(fe);Fs=r(An,"handler.py"),An.forEach(a),Ms=r(x," needs to implement the "),me=l(x,"A",{href:!0,rel:!0});var Hn=o(me);Rs=r(Hn,"EndpointHandler"),Hn.forEach(a),Bs=r(x," class with a "),Et=l(x,"CODE",{});var qn=o(Et);Us=r(qn,"__init__"),qn.forEach(a),Ws=r(x," and a "),gt=l(x,"CODE",{});var Cn=o(gt);Ys=r(Cn,"__call__"),Cn.forEach(a),Gs=r(x," method."),x.forEach(a),ga=c(e),H=l(e,"P",{});var ut=o(H);Js=r(ut,"If you want to use custom dependencies, e.g. "),ye=l(ut,"A",{href:!0,rel:!0});var Pn=o(ye);Xs=r(Pn,"optimum"),Pn.forEach(a),Ks=r(ut,", the dependencies must be listed in a "),bt=l(ut,"CODE",{});var xn=o(bt);Qs=r(xn,"requirements.txt"),xn.forEach(a),Zs=r(ut," as described above in \u201Cadd custom dependencies.\u201D"),ut.forEach(a),ba=c(e),D=l(e,"H2",{class:!0});var ys=o(D);G=l(ys,"A",{id:!0,class:!0,href:!0});var Tn=o(G);$t=l(Tn,"SPAN",{});var In=o($t);m(_e.$$.fragment,In),In.forEach(a),Tn.forEach(a),Vs=c(ys),jt=l(ys,"SPAN",{});var Dn=o(jt);el=r(Dn,"Custom Handler Examples"),Dn.forEach(a),ys.forEach(a),$a=c(e),$=l(e,"P",{});var pe=o($);tl=r(pe,"There are already several public examples on the "),ve=l(pe,"A",{href:!0,rel:!0});var Nn=o(ve);al=r(Nn,"Hugging Face Hub"),Nn.forEach(a),sl=r(pe," where you can take insipiration or directly use them. The repositories are tagged with "),kt=l(pe,"CODE",{});var On=o(kt);ll=r(On,"endpoints-template"),On.forEach(a),ol=r(pe," and can be found under this "),we=l(pe,"A",{href:!0,rel:!0});var Sn=o(we);nl=r(Sn,"link"),Sn.forEach(a),rl=r(pe,"."),pe.forEach(a),ja=c(e),st=l(e,"P",{});var Ln=o(st);il=r(Ln,"Included examples are for:"),Ln.forEach(a),ka=c(e),u=l(e,"UL",{});var g=o(u);At=l(g,"LI",{});var zn=o(At);Ee=l(zn,"A",{href:!0,rel:!0});var Fn=o(Ee);pl=r(Fn,"Optimum and ONNX Runtime"),Fn.forEach(a),zn.forEach(a),dl=c(g),Ht=l(g,"LI",{});var Mn=o(Ht);ge=l(Mn,"A",{href:!0,rel:!0});var Rn=o(ge);hl=r(Rn,"Diffusers with stable-diffusion"),Rn.forEach(a),Mn.forEach(a),cl=c(g),qt=l(g,"LI",{});var Bn=o(qt);be=l(Bn,"A",{href:!0,rel:!0});var Un=o(be);ul=r(Un,"Image Embeddings with BLIP"),Un.forEach(a),Bn.forEach(a),fl=c(g),Ct=l(g,"LI",{});var Wn=o(Ct);$e=l(Wn,"A",{href:!0,rel:!0});var Yn=o($e);ml=r(Yn,"TrOCR for OCR Detection"),Yn.forEach(a),Wn.forEach(a),yl=c(g),Pt=l(g,"LI",{});var Gn=o(Pt);je=l(Gn,"A",{href:!0,rel:!0});var Jn=o(je);_l=r(Jn,"Optimized Sentence Transformers with Optimum"),Jn.forEach(a),Gn.forEach(a),vl=c(g),xt=l(g,"LI",{});var Xn=o(xt);ke=l(Xn,"A",{href:!0,rel:!0});var Kn=o(ke);wl=r(Kn,"Pyannote Speaker diarization"),Kn.forEach(a),Xn.forEach(a),El=c(g),Tt=l(g,"LI",{});var Qn=o(Tt);Ae=l(Qn,"A",{href:!0,rel:!0});var Zn=o(Ae);gl=r(Zn,"LayoutLM"),Zn.forEach(a),Qn.forEach(a),bl=c(g),It=l(g,"LI",{});var Vn=o(It);lt=l(Vn,"A",{href:!0});var er=o(lt);$l=r(er,"Flair NER"),er.forEach(a),Vn.forEach(a),g.forEach(a),Aa=c(e),N=l(e,"H2",{class:!0});var _s=o(N);J=l(_s,"A",{id:!0,class:!0,href:!0});var tr=o(J);Dt=l(tr,"SPAN",{});var ar=o(Dt);m(He.$$.fragment,ar),ar.forEach(a),tr.forEach(a),jl=c(_s),Nt=l(_s,"SPAN",{});var sr=o(Nt);kl=r(sr,"Tutorial"),sr.forEach(a),_s.forEach(a),Ha=c(e),q=l(e,"P",{});var ft=o(q);Al=r(ft,"Before creating a Custom Handler, you need a Hugging Face Model repository with your model weights and an Access Token with "),Ot=l(ft,"EM",{});var lr=o(Ot);Hl=r(lr,"WRITE"),lr.forEach(a),ql=r(ft," access to the repository. To find, create and manage Access Tokens, click "),qe=l(ft,"A",{href:!0,rel:!0});var or=o(qe);Cl=r(or,"here"),or.forEach(a),Pl=r(ft,"."),ft.forEach(a),qa=c(e),X=l(e,"P",{});var vs=o(X);xl=r(vs,"If you want to write a Custom Handler for an existing model from the community, you can use the "),Ce=l(vs,"A",{href:!0,rel:!0});var nr=o(Ce);Tl=r(nr,"repo_duplicator"),nr.forEach(a),Il=r(vs," to create a repository fork."),vs.forEach(a),Ca=c(e),K=l(e,"P",{});var ws=o(K);Dl=r(ws,"The code can also be found in this "),Pe=l(ws,"A",{href:!0,rel:!0});var rr=o(Pe);Nl=r(rr,"Notebook"),rr.forEach(a),Ol=r(ws,"."),ws.forEach(a),Pa=c(e),xe=l(e,"P",{});var vn=o(xe);Sl=r(vn,"You can also search for already existing Custom Handlers here: "),Te=l(vn,"A",{href:!0,rel:!0});var ir=o(Te);Ll=r(ir,"https://huggingface.co/models?other=endpoints-template"),ir.forEach(a),vn.forEach(a),xa=c(e),O=l(e,"H3",{class:!0});var Es=o(O);Q=l(Es,"A",{id:!0,class:!0,href:!0});var pr=o(Q);St=l(pr,"SPAN",{});var dr=o(St);m(Ie.$$.fragment,dr),dr.forEach(a),pr.forEach(a),zl=c(Es),Lt=l(Es,"SPAN",{});var hr=o(Lt);Fl=r(hr,"1. Set up Development Environment"),hr.forEach(a),Es.forEach(a),Ta=c(e),De=l(e,"P",{});var wn=o(De);Ml=r(wn,`The easiest way to develop our custom handler is to set up a local development environment, to implement, test, and iterate there, and then deploy it as an Inference Endpoint. The first step is to install all required development dependencies.
`),zt=l(wn,"EM",{});var cr=o(zt);Rl=r(cr,"needed to create the custom handler, not needed for inference"),cr.forEach(a),wn.forEach(a),Ia=c(e),m(Ne.$$.fragment,e),Da=c(e),ot=l(e,"P",{});var ur=o(ot);Bl=r(ur,"After we have installed our libraries we will clone our repository to our development environment."),ur.forEach(a),Na=c(e),Z=l(e,"P",{});var gs=o(Z);Ul=r(gs,"We will use "),Oe=l(gs,"A",{href:!0,rel:!0});var fr=o(Oe);Wl=r(fr,"philschmid/distilbert-base-uncased-emotion"),fr.forEach(a),Yl=r(gs," during the tutorial."),gs.forEach(a),Oa=c(e),m(Se.$$.fragment,e),Sa=c(e),V=l(e,"P",{});var bs=o(V);Gl=r(bs,"To be able to push our CP later you need to login into our HF account. This can be done by using the "),Ft=l(bs,"CODE",{});var mr=o(Ft);Jl=r(mr,"huggingface-cli"),mr.forEach(a),Xl=r(bs,"."),bs.forEach(a),La=c(e),nt=l(e,"P",{});var yr=o(nt);Mt=l(yr,"EM",{});var _r=o(Mt);Kl=r(_r,"Note: Make sure to configure git config as well."),_r.forEach(a),yr.forEach(a),za=c(e),m(Le.$$.fragment,e),Fa=c(e),S=l(e,"H3",{class:!0});var $s=o(S);ee=l($s,"A",{id:!0,class:!0,href:!0});var vr=o(ee);Rt=l(vr,"SPAN",{});var wr=o(Rt);m(ze.$$.fragment,wr),wr.forEach(a),vr.forEach(a),Ql=c($s),Bt=l($s,"SPAN",{});var Er=o(Bt);Zl=r(Er,"2. Create EndpointHandler (CP)"),Er.forEach(a),$s.forEach(a),Ma=c(e),E=l(e,"P",{});var A=o(E);Vl=r(A,"After we have set up our environment, we can start creating your custom handler. The custom handler is a Python class ("),Ut=l(A,"CODE",{});var gr=o(Ut);eo=r(gr,"EndpointHandler"),gr.forEach(a),to=r(A,") inside a "),Wt=l(A,"CODE",{});var br=o(Wt);ao=r(br,"handler.py"),br.forEach(a),so=r(A," file in our repository. The "),Yt=l(A,"CODE",{});var $r=o(Yt);lo=r($r,"EndpointHandler"),$r.forEach(a),oo=r(A," needs to implement an "),Gt=l(A,"CODE",{});var jr=o(Gt);no=r(jr,"__init__"),jr.forEach(a),ro=r(A," and a "),Jt=l(A,"CODE",{});var kr=o(Jt);io=r(kr,"__call__"),kr.forEach(a),po=r(A," method."),A.forEach(a),Ra=c(e),te=l(e,"UL",{});var js=o(te);Fe=l(js,"LI",{});var ks=o(Fe);ho=r(ks,"The "),Xt=l(ks,"CODE",{});var Ar=o(Xt);co=r(Ar,"__init__"),Ar.forEach(a),uo=r(ks," method will be called when starting the Endpoint and will receive 1 argument, a string with the path to your model weights. This allows you to load your model correctly."),ks.forEach(a),fo=c(js),L=l(js,"LI",{});var mt=o(L);mo=r(mt,"The "),Kt=l(mt,"CODE",{});var Hr=o(Kt);yo=r(Hr,"__call__"),Hr.forEach(a),_o=r(mt," method will be called on every request and receive a dictionary with your request body as a python dictionary. It will always contain the "),Qt=l(mt,"CODE",{});var qr=o(Qt);vo=r(qr,"inputs"),qr.forEach(a),wo=r(mt," key."),mt.forEach(a),js.forEach(a),Ba=c(e),ae=l(e,"P",{});var As=o(ae);Eo=r(As,"The first step is to create our "),Zt=l(As,"CODE",{});var Cr=o(Zt);go=r(Cr,"handler.py"),Cr.forEach(a),bo=r(As," in the local clone of our repository."),As.forEach(a),Ua=c(e),m(Me.$$.fragment,e),Wa=c(e),j=l(e,"P",{});var de=o(j);$o=r(de,"In there, you define your "),Vt=l(de,"CODE",{});var Pr=o(Vt);jo=r(Pr,"EndpointHandler"),Pr.forEach(a),ko=r(de," class with the "),ea=l(de,"CODE",{});var xr=o(ea);Ao=r(xr,"__init__"),xr.forEach(a),Ho=r(de," and "),ta=l(de,"CODE",{});var Tr=o(ta);qo=r(Tr,"__call__ "),Tr.forEach(a),Co=r(de,"method."),de.forEach(a),Ya=c(e),m(Re.$$.fragment,e),Ga=c(e),z=l(e,"H3",{class:!0});var Hs=o(z);se=l(Hs,"A",{id:!0,class:!0,href:!0});var Ir=o(se);aa=l(Ir,"SPAN",{});var Dr=o(aa);m(Be.$$.fragment,Dr),Dr.forEach(a),Ir.forEach(a),Po=c(Hs),sa=l(Hs,"SPAN",{});var Nr=o(sa);xo=r(Nr,"3. Customize EndpointHandler"),Nr.forEach(a),Hs.forEach(a),Ja=c(e),le=l(e,"P",{});var qs=o(le);To=r(qs,"Now, you can add all of the custom logic you want to use during initialization or inference to your CP. You can already find multiple "),Ue=l(qs,"A",{href:!0,rel:!0});var Or=o(Ue);Io=r(Or,"Custom Handler on the Hub"),Or.forEach(a),Do=r(qs," if you need some inspiration. In our example, we will add a custom condition based on additional payload information."),qs.forEach(a),Xa=c(e),We=l(e,"P",{});var En=o(We);la=l(En,"EM",{});var Sr=o(la);No=r(Sr,"The model we are using in the tutorial is fine-tuned to detect emotions. We will add an additional payload field for the date, and will use an external package to check if it is a holiday, to add a condition so that when the input date is a holiday, the model returns \u201Chappy\u201D - since everyone is happy when there are holidays "),Sr.forEach(a),Oo=r(En,"\u{1F334}\u{1F389}\u{1F606}"),En.forEach(a),Ka=c(e),C=l(e,"P",{});var yt=o(C);So=r(yt,"First, we need to create a new "),oa=l(yt,"CODE",{});var Lr=o(oa);Lo=r(Lr,"requirements.txt"),Lr.forEach(a),zo=r(yt," and add our "),Ye=l(yt,"A",{href:!0,rel:!0});var zr=o(Ye);Fo=r(zr,"holiday detection package"),zr.forEach(a),Mo=r(yt," and make sure we have it installed in our development environment as well."),yt.forEach(a),Qa=c(e),m(Ge.$$.fragment,e),Za=c(e),P=l(e,"P",{});var _t=o(P);Ro=r(_t,"Next, we have to adjust our "),na=l(_t,"CODE",{});var Fr=o(na);Bo=r(Fr,"handler.py"),Fr.forEach(a),Uo=r(_t," and "),ra=l(_t,"CODE",{});var Mr=o(ra);Wo=r(Mr,"EndpointHandler"),Mr.forEach(a),Yo=r(_t," to match our condition."),_t.forEach(a),Va=c(e),m(Je.$$.fragment,e),es=c(e),F=l(e,"H3",{class:!0});var Cs=o(F);oe=l(Cs,"A",{id:!0,class:!0,href:!0});var Rr=o(oe);ia=l(Rr,"SPAN",{});var Br=o(ia);m(Xe.$$.fragment,Br),Br.forEach(a),Rr.forEach(a),Go=c(Cs),pa=l(Cs,"SPAN",{});var Ur=o(pa);Jo=r(Ur,"4. Test EndpointHandler"),Ur.forEach(a),Cs.forEach(a),ts=c(e),rt=l(e,"P",{});var Wr=o(rt);Xo=r(Wr,"To test our EndpointHandler, we can simplify import, initialize and test it. Therefore we only need to prepare a sample payload."),Wr.forEach(a),as=c(e),m(Ke.$$.fragment,e),ss=c(e),it=l(e,"P",{});var Yr=o(it);Ko=r(Yr,"It works!!!! \u{1F389}"),Yr.forEach(a),ls=c(e),pt=l(e,"P",{});var Gr=o(pt);da=l(Gr,"EM",{});var Jr=o(da);Qo=r(Jr,"Note: If you are using a notebook you might have to restart your kernel when you make changes to the handler.py since it is not automatically re-imported."),Jr.forEach(a),Gr.forEach(a),os=c(e),M=l(e,"H3",{class:!0});var Ps=o(M);ne=l(Ps,"A",{id:!0,class:!0,href:!0});var Xr=o(ne);ha=l(Xr,"SPAN",{});var Kr=o(ha);m(Qe.$$.fragment,Kr),Kr.forEach(a),Xr.forEach(a),Zo=c(Ps),ca=l(Ps,"SPAN",{});var Qr=o(ca);Vo=r(Qr,"5. Push the Custom Handler to your repository"),Qr.forEach(a),Ps.forEach(a),ns=c(e),dt=l(e,"P",{});var Zr=o(dt);en=r(Zr,"After you have successfully tested your handler locally, you can push it to your repository by simply using basic git commands."),Zr.forEach(a),rs=c(e),m(Ze.$$.fragment,e),is=c(e),k=l(e,"P",{});var he=o(k);tn=r(he,"Now, you should see your "),ua=l(he,"CODE",{});var Vr=o(ua);an=r(Vr,"handler.py"),Vr.forEach(a),sn=r(he," and "),fa=l(he,"CODE",{});var ei=o(fa);ln=r(ei,"requirements.txt"),ei.forEach(a),on=r(he," in your repository in the "),Ve=l(he,"A",{href:!0,rel:!0});var ti=o(Ve);nn=r(ti,"\u201CFiles and version\u201D"),ti.forEach(a),rn=r(he," tab."),he.forEach(a),ps=c(e),R=l(e,"H3",{class:!0});var xs=o(R);re=l(xs,"A",{id:!0,class:!0,href:!0});var ai=o(re);ma=l(ai,"SPAN",{});var si=o(ma);m(et.$$.fragment,si),si.forEach(a),ai.forEach(a),pn=c(xs),ya=l(xs,"SPAN",{});var li=o(ya);dn=r(li,"6. Deploy your Custom Handler as an Inference Endpoint"),li.forEach(a),xs.forEach(a),ds=c(e),ht=l(e,"P",{});var oi=o(ht);hn=r(oi,"The last step is to deploy your Custom Handler as an Inference Endpoint. You can deploy your custom Custom Handler the same way as a regular Inference Endpoint. Add your repository, select your cloud and region, your instance and security setting, and deploy."),oi.forEach(a),hs=c(e),ie=l(e,"P",{});var Ts=o(ie);cn=r(Ts,"The Inference Endpoint Service will check during the creation of your Endpoint if there is a "),_a=l(Ts,"CODE",{});var ni=o(_a);un=r(ni,"handler.py"),ni.forEach(a),fn=r(Ts," available and valid and will use it for serving requests no matter which \u201CTask\u201D you select."),Ts.forEach(a),cs=c(e),ct=l(e,"P",{});var ri=o(ct);tt=l(ri,"EM",{});var Is=o(tt);mn=r(Is,"Note: In your "),at=l(Is,"A",{href:!0,rel:!0});var ii=o(at);yn=r(ii,"Inference Endpoints dashboard"),ii.forEach(a),_n=r(Is,", the Task for this Endpoint should now be set to Custom"),Is.forEach(a),ri.forEach(a),this.h()},h(){d(T,"name","hf:doc:metadata"),d(T,"content",JSON.stringify(yi)),d(W,"id","create-custom-inference-handler"),d(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W,"href","#create-custom-inference-handler"),d(I,"class","relative group"),d(ue,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(ue,"rel","nofollow"),d(fe,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(fe,"rel","nofollow"),d(me,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77/main/handler.py"),d(me,"rel","nofollow"),d(ye,"href","https://raw.githubusercontent.com/huggingface/optimum"),d(ye,"rel","nofollow"),d(G,"id","custom-handler-examples"),d(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G,"href","#custom-handler-examples"),d(D,"class","relative group"),d(ve,"href","https://huggingface.co/models?other=endpoints-template"),d(ve,"rel","nofollow"),d(we,"href","https://huggingface.co/models?other=endpoints-template"),d(we,"rel","nofollow"),d(Ee,"href","https://huggingface.co/philschmid/distilbert-onnx-banking77"),d(Ee,"rel","nofollow"),d(ge,"href","https://huggingface.co/philschmid/stable-diffusion-v1-4-endpoints"),d(ge,"rel","nofollow"),d(be,"href","https://huggingface.co/florentgbelidji/blip_image_embeddings"),d(be,"rel","nofollow"),d($e,"href","https://huggingface.co/philschmid/trocr-base-printed"),d($e,"rel","nofollow"),d(je,"href","https://huggingface.co/philschmid/all-MiniLM-L6-v2-optimum-embeddings"),d(je,"rel","nofollow"),d(ke,"href","https://huggingface.co/philschmid/pyannote-speaker-diarization-endpoint"),d(ke,"rel","nofollow"),d(Ae,"href","https://huggingface.co/philschmid/layoutlm-funsd"),d(Ae,"rel","nofollow"),d(lt,"href","philschmid/flair-ner-english-ontonotes-large"),d(J,"id","tutorial"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#tutorial"),d(N,"class","relative group"),d(qe,"href","https://huggingface.co/settings/tokens"),d(qe,"rel","nofollow"),d(Ce,"href","https://huggingface.co/spaces/osanseviero/repo_duplicator"),d(Ce,"rel","nofollow"),d(Pe,"href","https://colab.research.google.com/drive/1hANJeRa1PK1gZaUorobnQGu4bFj4_4Rf?usp=sharing"),d(Pe,"rel","nofollow"),d(Te,"href","https://huggingface.co/models?other=endpoints-template"),d(Te,"rel","nofollow"),d(Q,"id","1-set-up-development-environment"),d(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q,"href","#1-set-up-development-environment"),d(O,"class","relative group"),d(Oe,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion"),d(Oe,"rel","nofollow"),d(ee,"id","2-create-endpointhandler-cp"),d(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ee,"href","#2-create-endpointhandler-cp"),d(S,"class","relative group"),d(se,"id","3-customize-endpointhandler"),d(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(se,"href","#3-customize-endpointhandler"),d(z,"class","relative group"),d(Ue,"href","https://huggingface.co/models?other=endpoints-template"),d(Ue,"rel","nofollow"),d(Ye,"href","https://pypi.org/project/holidays/"),d(Ye,"rel","nofollow"),d(oe,"id","4-test-endpointhandler"),d(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oe,"href","#4-test-endpointhandler"),d(F,"class","relative group"),d(ne,"id","5-push-the-custom-handler-to-your-repository"),d(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ne,"href","#5-push-the-custom-handler-to-your-repository"),d(M,"class","relative group"),d(Ve,"href","https://huggingface.co/philschmid/distilbert-base-uncased-emotion/tree/main"),d(Ve,"rel","nofollow"),d(re,"id","6-deploy-your-custom-handler-as-an-inference-endpoint"),d(re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(re,"href","#6-deploy-your-custom-handler-as-an-inference-endpoint"),d(R,"class","relative group"),d(at,"href","https://ui.endpoints.huggingface.co/"),d(at,"rel","nofollow")},m(e,i){t(document.head,T),p(e,va,i),p(e,I,i),t(I,W),t(W,vt),y(ce,vt,null),t(I,Ds),t(I,wt),t(wt,Ns),p(e,wa,i),p(e,Y,i),t(Y,Os),t(Y,ue),t(ue,Ss),t(Y,Ls),p(e,Ea,i),p(e,b,i),t(b,zs),t(b,fe),t(fe,Fs),t(b,Ms),t(b,me),t(me,Rs),t(b,Bs),t(b,Et),t(Et,Us),t(b,Ws),t(b,gt),t(gt,Ys),t(b,Gs),p(e,ga,i),p(e,H,i),t(H,Js),t(H,ye),t(ye,Xs),t(H,Ks),t(H,bt),t(bt,Qs),t(H,Zs),p(e,ba,i),p(e,D,i),t(D,G),t(G,$t),y(_e,$t,null),t(D,Vs),t(D,jt),t(jt,el),p(e,$a,i),p(e,$,i),t($,tl),t($,ve),t(ve,al),t($,sl),t($,kt),t(kt,ll),t($,ol),t($,we),t(we,nl),t($,rl),p(e,ja,i),p(e,st,i),t(st,il),p(e,ka,i),p(e,u,i),t(u,At),t(At,Ee),t(Ee,pl),t(u,dl),t(u,Ht),t(Ht,ge),t(ge,hl),t(u,cl),t(u,qt),t(qt,be),t(be,ul),t(u,fl),t(u,Ct),t(Ct,$e),t($e,ml),t(u,yl),t(u,Pt),t(Pt,je),t(je,_l),t(u,vl),t(u,xt),t(xt,ke),t(ke,wl),t(u,El),t(u,Tt),t(Tt,Ae),t(Ae,gl),t(u,bl),t(u,It),t(It,lt),t(lt,$l),p(e,Aa,i),p(e,N,i),t(N,J),t(J,Dt),y(He,Dt,null),t(N,jl),t(N,Nt),t(Nt,kl),p(e,Ha,i),p(e,q,i),t(q,Al),t(q,Ot),t(Ot,Hl),t(q,ql),t(q,qe),t(qe,Cl),t(q,Pl),p(e,qa,i),p(e,X,i),t(X,xl),t(X,Ce),t(Ce,Tl),t(X,Il),p(e,Ca,i),p(e,K,i),t(K,Dl),t(K,Pe),t(Pe,Nl),t(K,Ol),p(e,Pa,i),p(e,xe,i),t(xe,Sl),t(xe,Te),t(Te,Ll),p(e,xa,i),p(e,O,i),t(O,Q),t(Q,St),y(Ie,St,null),t(O,zl),t(O,Lt),t(Lt,Fl),p(e,Ta,i),p(e,De,i),t(De,Ml),t(De,zt),t(zt,Rl),p(e,Ia,i),y(Ne,e,i),p(e,Da,i),p(e,ot,i),t(ot,Bl),p(e,Na,i),p(e,Z,i),t(Z,Ul),t(Z,Oe),t(Oe,Wl),t(Z,Yl),p(e,Oa,i),y(Se,e,i),p(e,Sa,i),p(e,V,i),t(V,Gl),t(V,Ft),t(Ft,Jl),t(V,Xl),p(e,La,i),p(e,nt,i),t(nt,Mt),t(Mt,Kl),p(e,za,i),y(Le,e,i),p(e,Fa,i),p(e,S,i),t(S,ee),t(ee,Rt),y(ze,Rt,null),t(S,Ql),t(S,Bt),t(Bt,Zl),p(e,Ma,i),p(e,E,i),t(E,Vl),t(E,Ut),t(Ut,eo),t(E,to),t(E,Wt),t(Wt,ao),t(E,so),t(E,Yt),t(Yt,lo),t(E,oo),t(E,Gt),t(Gt,no),t(E,ro),t(E,Jt),t(Jt,io),t(E,po),p(e,Ra,i),p(e,te,i),t(te,Fe),t(Fe,ho),t(Fe,Xt),t(Xt,co),t(Fe,uo),t(te,fo),t(te,L),t(L,mo),t(L,Kt),t(Kt,yo),t(L,_o),t(L,Qt),t(Qt,vo),t(L,wo),p(e,Ba,i),p(e,ae,i),t(ae,Eo),t(ae,Zt),t(Zt,go),t(ae,bo),p(e,Ua,i),y(Me,e,i),p(e,Wa,i),p(e,j,i),t(j,$o),t(j,Vt),t(Vt,jo),t(j,ko),t(j,ea),t(ea,Ao),t(j,Ho),t(j,ta),t(ta,qo),t(j,Co),p(e,Ya,i),y(Re,e,i),p(e,Ga,i),p(e,z,i),t(z,se),t(se,aa),y(Be,aa,null),t(z,Po),t(z,sa),t(sa,xo),p(e,Ja,i),p(e,le,i),t(le,To),t(le,Ue),t(Ue,Io),t(le,Do),p(e,Xa,i),p(e,We,i),t(We,la),t(la,No),t(We,Oo),p(e,Ka,i),p(e,C,i),t(C,So),t(C,oa),t(oa,Lo),t(C,zo),t(C,Ye),t(Ye,Fo),t(C,Mo),p(e,Qa,i),y(Ge,e,i),p(e,Za,i),p(e,P,i),t(P,Ro),t(P,na),t(na,Bo),t(P,Uo),t(P,ra),t(ra,Wo),t(P,Yo),p(e,Va,i),y(Je,e,i),p(e,es,i),p(e,F,i),t(F,oe),t(oe,ia),y(Xe,ia,null),t(F,Go),t(F,pa),t(pa,Jo),p(e,ts,i),p(e,rt,i),t(rt,Xo),p(e,as,i),y(Ke,e,i),p(e,ss,i),p(e,it,i),t(it,Ko),p(e,ls,i),p(e,pt,i),t(pt,da),t(da,Qo),p(e,os,i),p(e,M,i),t(M,ne),t(ne,ha),y(Qe,ha,null),t(M,Zo),t(M,ca),t(ca,Vo),p(e,ns,i),p(e,dt,i),t(dt,en),p(e,rs,i),y(Ze,e,i),p(e,is,i),p(e,k,i),t(k,tn),t(k,ua),t(ua,an),t(k,sn),t(k,fa),t(fa,ln),t(k,on),t(k,Ve),t(Ve,nn),t(k,rn),p(e,ps,i),p(e,R,i),t(R,re),t(re,ma),y(et,ma,null),t(R,pn),t(R,ya),t(ya,dn),p(e,ds,i),p(e,ht,i),t(ht,hn),p(e,hs,i),p(e,ie,i),t(ie,cn),t(ie,_a),t(_a,un),t(ie,fn),p(e,cs,i),p(e,ct,i),t(ct,tt),t(tt,mn),t(tt,at),t(at,yn),t(tt,_n),us=!0},p:ui,i(e){us||(_(ce.$$.fragment,e),_(_e.$$.fragment,e),_(He.$$.fragment,e),_(Ie.$$.fragment,e),_(Ne.$$.fragment,e),_(Se.$$.fragment,e),_(Le.$$.fragment,e),_(ze.$$.fragment,e),_(Me.$$.fragment,e),_(Re.$$.fragment,e),_(Be.$$.fragment,e),_(Ge.$$.fragment,e),_(Je.$$.fragment,e),_(Xe.$$.fragment,e),_(Ke.$$.fragment,e),_(Qe.$$.fragment,e),_(Ze.$$.fragment,e),_(et.$$.fragment,e),us=!0)},o(e){v(ce.$$.fragment,e),v(_e.$$.fragment,e),v(He.$$.fragment,e),v(Ie.$$.fragment,e),v(Ne.$$.fragment,e),v(Se.$$.fragment,e),v(Le.$$.fragment,e),v(ze.$$.fragment,e),v(Me.$$.fragment,e),v(Re.$$.fragment,e),v(Be.$$.fragment,e),v(Ge.$$.fragment,e),v(Je.$$.fragment,e),v(Xe.$$.fragment,e),v(Ke.$$.fragment,e),v(Qe.$$.fragment,e),v(Ze.$$.fragment,e),v(et.$$.fragment,e),us=!1},d(e){a(T),e&&a(va),e&&a(I),w(ce),e&&a(wa),e&&a(Y),e&&a(Ea),e&&a(b),e&&a(ga),e&&a(H),e&&a(ba),e&&a(D),w(_e),e&&a($a),e&&a($),e&&a(ja),e&&a(st),e&&a(ka),e&&a(u),e&&a(Aa),e&&a(N),w(He),e&&a(Ha),e&&a(q),e&&a(qa),e&&a(X),e&&a(Ca),e&&a(K),e&&a(Pa),e&&a(xe),e&&a(xa),e&&a(O),w(Ie),e&&a(Ta),e&&a(De),e&&a(Ia),w(Ne,e),e&&a(Da),e&&a(ot),e&&a(Na),e&&a(Z),e&&a(Oa),w(Se,e),e&&a(Sa),e&&a(V),e&&a(La),e&&a(nt),e&&a(za),w(Le,e),e&&a(Fa),e&&a(S),w(ze),e&&a(Ma),e&&a(E),e&&a(Ra),e&&a(te),e&&a(Ba),e&&a(ae),e&&a(Ua),w(Me,e),e&&a(Wa),e&&a(j),e&&a(Ya),w(Re,e),e&&a(Ga),e&&a(z),w(Be),e&&a(Ja),e&&a(le),e&&a(Xa),e&&a(We),e&&a(Ka),e&&a(C),e&&a(Qa),w(Ge,e),e&&a(Za),e&&a(P),e&&a(Va),w(Je,e),e&&a(es),e&&a(F),w(Xe),e&&a(ts),e&&a(rt),e&&a(as),w(Ke,e),e&&a(ss),e&&a(it),e&&a(ls),e&&a(pt),e&&a(os),e&&a(M),w(Qe),e&&a(ns),e&&a(dt),e&&a(rs),w(Ze,e),e&&a(is),e&&a(k),e&&a(ps),e&&a(R),w(et),e&&a(ds),e&&a(ht),e&&a(hs),e&&a(ie),e&&a(cs),e&&a(ct)}}}const yi={local:"create-custom-inference-handler",sections:[{local:"custom-handler-examples",title:"Custom Handler Examples"},{local:"tutorial",sections:[{local:"1-set-up-development-environment",title:"1. Set up Development Environment"},{local:"2-create-endpointhandler-cp",title:"2. Create EndpointHandler (CP)"},{local:"3-customize-endpointhandler",title:"3. Customize EndpointHandler"},{local:"4-test-endpointhandler",title:"4. Test EndpointHandler"},{local:"5-push-the-custom-handler-to-your-repository",title:"5. Push the Custom Handler to your repository"},{local:"6-deploy-your-custom-handler-as-an-inference-endpoint",title:"6. Deploy your Custom Handler as an Inference Endpoint"}],title:"Tutorial"}],title:"Create custom Inference Handler"};function _i(gn){return fi(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class gi extends pi{constructor(T){super();di(this,T,_i,mi,hi,{})}}export{gi as default,yi as metadata};
