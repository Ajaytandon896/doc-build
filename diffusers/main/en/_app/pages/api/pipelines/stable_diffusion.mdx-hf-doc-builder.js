import{S as Ha,i as Ra,s as Ba,e as n,k as f,w as p,t as r,M as Ka,c as o,d as t,m as d,a as s,x as h,h as l,b as a,N as Ki,G as e,g as u,y as m,L as Ya,q as g,o as _,B as b,v as ja}from"../../../chunks/vendor-hf-doc-builder.js";import{D as y}from"../../../chunks/Docstring-hf-doc-builder.js";import{I as li}from"../../../chunks/IconCopyLink-hf-doc-builder.js";function Ja(bs){let N,fi,G,R,It,re,Yi,Pt,ji,di,P,Ji,yt,Qi,Xi,le,Zi,en,fe,tn,nn,de,on,sn,ce,an,rn,ci,C,ln,ue,fn,dn,Qe,cn,un,ui,M,pn,pe,hn,mn,he,gn,_n,pi,me,wt,bn,vn,hi,Xe,Ze,Dn,ge,et,vs,mi,_e,St,In,Pn,gi,B,xt,$,Et,yn,wn,$t,Sn,xn,tt,En,$n,it,kn,Tn,q,k,kt,be,Ln,Cn,Tt,Lt,Mn,On,nt,ve,ot,Ds,An,st,De,zn,Nn,T,Ct,Ie,Gn,qn,Mt,Ot,Un,Fn,at,Pe,rt,Is,Vn,lt,ye,Wn,Hn,L,At,we,Rn,Bn,Se,zt,Kn,Yn,Nt,jn,Jn,ft,xe,dt,Ps,Qn,ct,Xn,_i,U,K,Gt,Ee,Zn,qt,eo,bi,F,$e,to,Ut,io,vi,V,Y,Ft,ke,no,Vt,oo,Di,v,Te,so,Wt,ao,ro,Le,lo,ut,fo,co,uo,j,Ce,po,Ht,ho,mo,O,Me,go,Rt,_o,bo,Bt,vo,Do,J,Oe,Io,Ae,Po,Kt,yo,wo,Ii,W,Q,Yt,ze,So,jt,xo,Pi,D,Ne,Eo,Jt,$o,ko,Ge,To,pt,Lo,Co,Mo,X,qe,Oo,Qt,Ao,zo,A,Ue,No,Xt,Go,qo,Zt,Uo,Fo,Z,Fe,Vo,Ve,Wo,ei,Ho,Ro,yi,H,ee,ti,We,Bo,ii,Ko,wi,I,He,Yo,Re,jo,ni,Jo,Qo,Xo,Be,Zo,ht,es,ts,is,te,Ke,ns,oi,os,ss,z,Ye,as,si,rs,ls,ai,fs,ds,ie,je,cs,Je,us,ri,ps,hs,Si;return re=new li({}),Ee=new li({}),$e=new y({props:{name:"class diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput",anchor:"diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput",parameters:[{name:"images",val:": typing.Union[typing.List[PIL.Image.Image], numpy.ndarray]"},{name:"nsfw_content_detected",val:": typing.List[bool]"}],parametersDescription:[{anchor:"diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput.images",description:`<strong>images</strong> (<code>List[PIL.Image.Image]</code> or <code>np.ndarray</code>) &#x2014;
List of denoised PIL images of length <code>batch_size</code> or numpy array of shape <code>(batch_size, height, width, num_channels)</code>. PIL images or numpy array present the denoised images of the diffusion pipeline.`,name:"images"},{anchor:"diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput.nsfw_content_detected",description:`<strong>nsfw_content_detected</strong> (<code>List[bool]</code>) &#x2014;
List of flags denoting whether the corresponding generated image likely represents &#x201C;not-safe-for-work&#x201D;
(nsfw) content.`,name:"nsfw_content_detected"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/__init__.py#L13"}}),ke=new li({}),Te=new y({props:{name:"class diffusers.StableDiffusionPipeline",anchor:"diffusers.StableDiffusionPipeline",parameters:[{name:"vae",val:": AutoencoderKL"},{name:"text_encoder",val:": CLIPTextModel"},{name:"tokenizer",val:": CLIPTokenizer"},{name:"unet",val:": UNet2DConditionModel"},{name:"scheduler",val:": typing.Union[diffusers.schedulers.scheduling_ddim.DDIMScheduler, diffusers.schedulers.scheduling_pndm.PNDMScheduler, diffusers.schedulers.scheduling_lms_discrete.LMSDiscreteScheduler]"},{name:"safety_checker",val:": StableDiffusionSafetyChecker"},{name:"feature_extractor",val:": CLIPFeatureExtractor"}],parametersDescription:[{anchor:"diffusers.StableDiffusionPipeline.vae",description:`<strong>vae</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.AutoencoderKL">AutoencoderKL</a>) &#x2014;
Variational Auto-Encoder (VAE) Model to encode and decode images to and from latent representations.`,name:"vae"},{anchor:"diffusers.StableDiffusionPipeline.text_encoder",description:`<strong>text_encoder</strong> (<code>CLIPTextModel</code>) &#x2014;
Frozen text-encoder. Stable Diffusion uses the text portion of
<a href="https://huggingface.co/docs/transformers/model_doc/clip#transformers.CLIPTextModel" rel="nofollow">CLIP</a>, specifically
the <a href="https://huggingface.co/openai/clip-vit-large-patch14" rel="nofollow">clip-vit-large-patch14</a> variant.`,name:"text_encoder"},{anchor:"diffusers.StableDiffusionPipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>CLIPTokenizer</code>) &#x2014;
Tokenizer of class
<a href="https://huggingface.co/docs/transformers/v4.21.0/en/model_doc/clip#transformers.CLIPTokenizer" rel="nofollow">CLIPTokenizer</a>.`,name:"tokenizer"},{anchor:"diffusers.StableDiffusionPipeline.unet",description:'<strong>unet</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.UNet2DConditionModel">UNet2DConditionModel</a>) &#x2014; Conditional U-Net architecture to denoise the encoded image latents.',name:"unet"},{anchor:"diffusers.StableDiffusionPipeline.scheduler",description:`<strong>scheduler</strong> (<a href="/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin">SchedulerMixin</a>) &#x2014;
A scheduler to be used in combination with <code>unet</code> to denoise the encoded image latens. Can be one of
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">DDIMScheduler</a>, <a href="/docs/diffusers/main/en/api/schedulers#diffusers.LMSDiscreteScheduler">LMSDiscreteScheduler</a>, or <a href="/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler">PNDMScheduler</a>.`,name:"scheduler"},{anchor:"diffusers.StableDiffusionPipeline.safety_checker",description:`<strong>safety_checker</strong> (<code>StableDiffusionSafetyChecker</code>) &#x2014;
Classification module that estimates whether generated images could be considered offsensive or harmful.
Please, refer to the <a href="https://huggingface.co/CompVis/stable-diffusion-v1-4" rel="nofollow">model card</a> for details.`,name:"safety_checker"},{anchor:"diffusers.StableDiffusionPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<code>CLIPFeatureExtractor</code>) &#x2014;
Model that extracts features from generated images to be used as inputs for the <code>safety_checker</code>.`,name:"feature_extractor"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L17"}}),Ce=new y({props:{name:"__call__",anchor:"diffusers.StableDiffusionPipeline.__call__",parameters:[{name:"prompt",val:": typing.Union[str, typing.List[str]]"},{name:"height",val:": typing.Optional[int] = 512"},{name:"width",val:": typing.Optional[int] = 512"},{name:"num_inference_steps",val:": typing.Optional[int] = 50"},{name:"guidance_scale",val:": typing.Optional[float] = 7.5"},{name:"eta",val:": typing.Optional[float] = 0.0"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"latents",val:": typing.Optional[torch.FloatTensor] = None"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.StableDiffusionPipeline.__call__.prompt",description:`<strong>prompt</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The prompt or prompts to guide the image generation.`,name:"prompt"},{anchor:"diffusers.StableDiffusionPipeline.__call__.height",description:`<strong>height</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The height in pixels of the generated image.`,name:"height"},{anchor:"diffusers.StableDiffusionPipeline.__call__.width",description:`<strong>width</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The width in pixels of the generated image.`,name:"width"},{anchor:"diffusers.StableDiffusionPipeline.__call__.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 50) &#x2014;
The number of denoising steps. More denoising steps usually lead to a higher quality image at the
expense of slower inference.`,name:"num_inference_steps"},{anchor:"diffusers.StableDiffusionPipeline.__call__.guidance_scale",description:`<strong>guidance_scale</strong> (<code>float</code>, <em>optional</em>, defaults to 7.5) &#x2014;
Guidance scale as defined in <a href="https://arxiv.org/abs/2207.12598" rel="nofollow">Classifier-Free Diffusion Guidance</a>.
<code>guidance_scale</code> is defined as <code>w</code> of equation 2. of <a href="https://arxiv.org/pdf/2205.11487.pdf" rel="nofollow">Imagen
Paper</a>. Guidance scale is enabled by setting <code>guidance_scale &gt; 1</code>. Higher guidance scale encourages to generate images that are closely linked to the text <code>prompt</code>,
usually at the expense of lower image quality.`,name:"guidance_scale"},{anchor:"diffusers.StableDiffusionPipeline.__call__.eta",description:`<strong>eta</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Corresponds to parameter eta (&#x3B7;) in the DDIM paper: <a href="https://arxiv.org/abs/2010.02502" rel="nofollow">https://arxiv.org/abs/2010.02502</a>. Only applies to
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">schedulers.DDIMScheduler</a>, will be ignored for others.`,name:"eta"},{anchor:"diffusers.StableDiffusionPipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.StableDiffusionPipeline.__call__.latents",description:`<strong>latents</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) &#x2014;
Pre-generated noisy latents, sampled from a Gaussian distribution, to be used as inputs for image
generation. Can be used to tweak the same generation with different prompts. If not provided, a latents
tensor will ge generated by sampling using the supplied random <code>generator</code>.`,name:"latents"},{anchor:"diffusers.StableDiffusionPipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <code>PIL.Image.Image</code> or <code>np.array</code>.`,name:"output_type"},{anchor:"diffusers.StableDiffusionPipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <a href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput">StableDiffusionPipelineOutput</a> instead of a
plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L109",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple. When returning a tuple, the first element is a list with the generated images, and the second element is a list of </code>bool<code>s denoting whether the corresponding generated image likely represents "not-safe-for-work" (nsfw) content, according to the </code>safety_checker\`.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> or <code>tuple</code></p>
`}}),Me=new y({props:{name:"enable_attention_slicing",anchor:"diffusers.StableDiffusionPipeline.enable_attention_slicing",parameters:[{name:"slice_size",val:": typing.Union[str, int, NoneType] = 'auto'"}],parametersDescription:[{anchor:"diffusers.StableDiffusionPipeline.enable_attention_slicing.slice_size",description:`<strong>slice_size</strong> (<code>str</code> or <code>int</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
When <code>&quot;auto&quot;</code>, halves the input to the attention heads, so attention will be computed in two steps. If
a number is provided, uses as many slices as <code>attention_head_dim // slice_size</code>. In this case,
<code>attention_head_dim</code> must be a multiple of <code>slice_size</code>.`,name:"slice_size"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L82"}}),Oe=new y({props:{name:"disable_attention_slicing",anchor:"diffusers.StableDiffusionPipeline.disable_attention_slicing",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py#L101"}}),ze=new li({}),Ne=new y({props:{name:"class diffusers.StableDiffusionImg2ImgPipeline",anchor:"diffusers.StableDiffusionImg2ImgPipeline",parameters:[{name:"vae",val:": AutoencoderKL"},{name:"text_encoder",val:": CLIPTextModel"},{name:"tokenizer",val:": CLIPTokenizer"},{name:"unet",val:": UNet2DConditionModel"},{name:"scheduler",val:": typing.Union[diffusers.schedulers.scheduling_ddim.DDIMScheduler, diffusers.schedulers.scheduling_pndm.PNDMScheduler, diffusers.schedulers.scheduling_lms_discrete.LMSDiscreteScheduler]"},{name:"safety_checker",val:": StableDiffusionSafetyChecker"},{name:"feature_extractor",val:": CLIPFeatureExtractor"}],parametersDescription:[{anchor:"diffusers.StableDiffusionImg2ImgPipeline.vae",description:`<strong>vae</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.AutoencoderKL">AutoencoderKL</a>) &#x2014;
Variational Auto-Encoder (VAE) Model to encode and decode images to and from latent representations.`,name:"vae"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.text_encoder",description:`<strong>text_encoder</strong> (<code>CLIPTextModel</code>) &#x2014;
Frozen text-encoder. Stable Diffusion uses the text portion of
<a href="https://huggingface.co/docs/transformers/model_doc/clip#transformers.CLIPTextModel" rel="nofollow">CLIP</a>, specifically
the <a href="https://huggingface.co/openai/clip-vit-large-patch14" rel="nofollow">clip-vit-large-patch14</a> variant.`,name:"text_encoder"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>CLIPTokenizer</code>) &#x2014;
Tokenizer of class
<a href="https://huggingface.co/docs/transformers/v4.21.0/en/model_doc/clip#transformers.CLIPTokenizer" rel="nofollow">CLIPTokenizer</a>.`,name:"tokenizer"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.unet",description:'<strong>unet</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.UNet2DConditionModel">UNet2DConditionModel</a>) &#x2014; Conditional U-Net architecture to denoise the encoded image latents.',name:"unet"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.scheduler",description:`<strong>scheduler</strong> (<a href="/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin">SchedulerMixin</a>) &#x2014;
A scheduler to be used in combination with <code>unet</code> to denoise the encoded image latens. Can be one of
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">DDIMScheduler</a>, <a href="/docs/diffusers/main/en/api/schedulers#diffusers.LMSDiscreteScheduler">LMSDiscreteScheduler</a>, or <a href="/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler">PNDMScheduler</a>.`,name:"scheduler"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.safety_checker",description:`<strong>safety_checker</strong> (<code>StableDiffusionSafetyChecker</code>) &#x2014;
Classification module that estimates whether generated images could be considered offsensive or harmful.
Please, refer to the <a href="https://huggingface.co/CompVis/stable-diffusion-v1-4" rel="nofollow">model card</a> for details.`,name:"safety_checker"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<code>CLIPFeatureExtractor</code>) &#x2014;
Model that extracts features from generated images to be used as inputs for the <code>safety_checker</code>.`,name:"feature_extractor"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py#L29"}}),qe=new y({props:{name:"__call__",anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__",parameters:[{name:"prompt",val:": typing.Union[str, typing.List[str]]"},{name:"init_image",val:": typing.Union[torch.FloatTensor, PIL.Image.Image]"},{name:"strength",val:": float = 0.8"},{name:"num_inference_steps",val:": typing.Optional[int] = 50"},{name:"guidance_scale",val:": typing.Optional[float] = 7.5"},{name:"eta",val:": typing.Optional[float] = 0.0"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.prompt",description:`<strong>prompt</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The prompt or prompts to guide the image generation.`,name:"prompt"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.init_image",description:`<strong>init_image</strong> (<code>torch.FloatTensor</code> or <code>PIL.Image.Image</code>) &#x2014;
<code>Image</code>, or tensor representing an image batch, that will be used as the starting point for the
process.`,name:"init_image"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.strength",description:`<strong>strength</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
Conceptually, indicates how much to transform the reference <code>init_image</code>. Must be between 0 and 1.
<code>init_image</code> will be used as a starting point, adding more noise to it the larger the <code>strength</code>. The
number of denoising steps depends on the amount of noise initially added. When <code>strength</code> is 1, added
noise will be maximum and the denoising process will run for the full number of iterations specified in
<code>num_inference_steps</code>. A value of 1, therefore, essentially ignores <code>init_image</code>.`,name:"strength"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 50) &#x2014;
The number of denoising steps. More denoising steps usually lead to a higher quality image at the
expense of slower inference. This parameter will be modulated by <code>strength</code>.`,name:"num_inference_steps"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.guidance_scale",description:`<strong>guidance_scale</strong> (<code>float</code>, <em>optional</em>, defaults to 7.5) &#x2014;
Guidance scale as defined in <a href="https://arxiv.org/abs/2207.12598" rel="nofollow">Classifier-Free Diffusion Guidance</a>.
<code>guidance_scale</code> is defined as <code>w</code> of equation 2. of <a href="https://arxiv.org/pdf/2205.11487.pdf" rel="nofollow">Imagen
Paper</a>. Guidance scale is enabled by setting <code>guidance_scale &gt; 1</code>. Higher guidance scale encourages to generate images that are closely linked to the text <code>prompt</code>,
usually at the expense of lower image quality.`,name:"guidance_scale"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.eta",description:`<strong>eta</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Corresponds to parameter eta (&#x3B7;) in the DDIM paper: <a href="https://arxiv.org/abs/2010.02502" rel="nofollow">https://arxiv.org/abs/2010.02502</a>. Only applies to
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">schedulers.DDIMScheduler</a>, will be ignored for others.`,name:"eta"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <code>PIL.Image.Image</code> or <code>np.array</code>.`,name:"output_type"},{anchor:"diffusers.StableDiffusionImg2ImgPipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <a href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput">StableDiffusionPipelineOutput</a> instead of a
plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py#L121",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple. When returning a tuple, the first element is a list with the generated images, and the second element is a list of </code>bool<code>s denoting whether the corresponding generated image likely represents "not-safe-for-work" (nsfw) content, according to the </code>safety_checker\`.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> or <code>tuple</code></p>
`}}),Ue=new y({props:{name:"enable_attention_slicing",anchor:"diffusers.StableDiffusionImg2ImgPipeline.enable_attention_slicing",parameters:[{name:"slice_size",val:": typing.Union[str, int, NoneType] = 'auto'"}],parametersDescription:[{anchor:"diffusers.StableDiffusionImg2ImgPipeline.enable_attention_slicing.slice_size",description:`<strong>slice_size</strong> (<code>str</code> or <code>int</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
When <code>&quot;auto&quot;</code>, halves the input to the attention heads, so attention will be computed in two steps. If
a number is provided, uses as many slices as <code>attention_head_dim // slice_size</code>. In this case,
<code>attention_head_dim</code> must be a multiple of <code>slice_size</code>.`,name:"slice_size"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py#L94"}}),Fe=new y({props:{name:"disable_attention_slicing",anchor:"diffusers.StableDiffusionImg2ImgPipeline.disable_attention_slicing",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py#L113"}}),We=new li({}),He=new y({props:{name:"class diffusers.StableDiffusionInpaintPipeline",anchor:"diffusers.StableDiffusionInpaintPipeline",parameters:[{name:"vae",val:": AutoencoderKL"},{name:"text_encoder",val:": CLIPTextModel"},{name:"tokenizer",val:": CLIPTokenizer"},{name:"unet",val:": UNet2DConditionModel"},{name:"scheduler",val:": typing.Union[diffusers.schedulers.scheduling_ddim.DDIMScheduler, diffusers.schedulers.scheduling_pndm.PNDMScheduler, diffusers.schedulers.scheduling_lms_discrete.LMSDiscreteScheduler]"},{name:"safety_checker",val:": StableDiffusionSafetyChecker"},{name:"feature_extractor",val:": CLIPFeatureExtractor"}],parametersDescription:[{anchor:"diffusers.StableDiffusionInpaintPipeline.vae",description:`<strong>vae</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.AutoencoderKL">AutoencoderKL</a>) &#x2014;
Variational Auto-Encoder (VAE) Model to encode and decode images to and from latent representations.`,name:"vae"},{anchor:"diffusers.StableDiffusionInpaintPipeline.text_encoder",description:`<strong>text_encoder</strong> (<code>CLIPTextModel</code>) &#x2014;
Frozen text-encoder. Stable Diffusion uses the text portion of
<a href="https://huggingface.co/docs/transformers/model_doc/clip#transformers.CLIPTextModel" rel="nofollow">CLIP</a>, specifically
the <a href="https://huggingface.co/openai/clip-vit-large-patch14" rel="nofollow">clip-vit-large-patch14</a> variant.`,name:"text_encoder"},{anchor:"diffusers.StableDiffusionInpaintPipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>CLIPTokenizer</code>) &#x2014;
Tokenizer of class
<a href="https://huggingface.co/docs/transformers/v4.21.0/en/model_doc/clip#transformers.CLIPTokenizer" rel="nofollow">CLIPTokenizer</a>.`,name:"tokenizer"},{anchor:"diffusers.StableDiffusionInpaintPipeline.unet",description:'<strong>unet</strong> (<a href="/docs/diffusers/main/en/api/models#diffusers.UNet2DConditionModel">UNet2DConditionModel</a>) &#x2014; Conditional U-Net architecture to denoise the encoded image latents.',name:"unet"},{anchor:"diffusers.StableDiffusionInpaintPipeline.scheduler",description:`<strong>scheduler</strong> (<a href="/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin">SchedulerMixin</a>) &#x2014;
A scheduler to be used in combination with <code>unet</code> to denoise the encoded image latens. Can be one of
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">DDIMScheduler</a>, <a href="/docs/diffusers/main/en/api/schedulers#diffusers.LMSDiscreteScheduler">LMSDiscreteScheduler</a>, or <a href="/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler">PNDMScheduler</a>.`,name:"scheduler"},{anchor:"diffusers.StableDiffusionInpaintPipeline.safety_checker",description:`<strong>safety_checker</strong> (<code>StableDiffusionSafetyChecker</code>) &#x2014;
Classification module that estimates whether generated images could be considered offsensive or harmful.
Please, refer to the <a href="https://huggingface.co/CompVis/stable-diffusion-v1-4" rel="nofollow">model card</a> for details.`,name:"safety_checker"},{anchor:"diffusers.StableDiffusionInpaintPipeline.feature_extractor",description:`<strong>feature_extractor</strong> (<code>CLIPFeatureExtractor</code>) &#x2014;
Model that extracts features from generated images to be used as inputs for the <code>safety_checker</code>.`,name:"feature_extractor"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py#L47"}}),Ke=new y({props:{name:"__call__",anchor:"diffusers.StableDiffusionInpaintPipeline.__call__",parameters:[{name:"prompt",val:": typing.Union[str, typing.List[str]]"},{name:"init_image",val:": typing.Union[torch.FloatTensor, PIL.Image.Image]"},{name:"mask_image",val:": typing.Union[torch.FloatTensor, PIL.Image.Image]"},{name:"strength",val:": float = 0.8"},{name:"num_inference_steps",val:": typing.Optional[int] = 50"},{name:"guidance_scale",val:": typing.Optional[float] = 7.5"},{name:"eta",val:": typing.Optional[float] = 0.0"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.prompt",description:`<strong>prompt</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The prompt or prompts to guide the image generation.`,name:"prompt"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.init_image",description:`<strong>init_image</strong> (<code>torch.FloatTensor</code> or <code>PIL.Image.Image</code>) &#x2014;
<code>Image</code>, or tensor representing an image batch, that will be used as the starting point for the
process. This is the image whose masked region will be inpainted.`,name:"init_image"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.mask_image",description:`<strong>mask_image</strong> (<code>torch.FloatTensor</code> or <code>PIL.Image.Image</code>) &#x2014;
<code>Image</code>, or tensor representing an image batch, to mask <code>init_image</code>. White pixels in the mask will be
replaced by noise and therefore repainted, while black pixels will be preserved. If <code>mask_image</code> is a
PIL image, it will be converted to a single channel (luminance) before use. If it&#x2019;s a tensor, it should
contain one color channel (L) instead of 3, so the expected shape would be <code>(B, H, W, 1)</code>.`,name:"mask_image"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.strength",description:`<strong>strength</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
Conceptually, indicates how much to inpaint the masked area. Must be between 0 and 1. When <code>strength</code>
is 1, the denoising process will be run on the masked area for the full number of iterations specified
in <code>num_inference_steps</code>. <code>init_image</code> will be used as a reference for the masked area, adding more
noise to that region the larger the <code>strength</code>. If <code>strength</code> is 0, no inpainting will occur.`,name:"strength"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 50) &#x2014;
The reference number of denoising steps. More denoising steps usually lead to a higher quality image at
the expense of slower inference. This parameter will be modulated by <code>strength</code>, as explained above.`,name:"num_inference_steps"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.guidance_scale",description:`<strong>guidance_scale</strong> (<code>float</code>, <em>optional</em>, defaults to 7.5) &#x2014;
Guidance scale as defined in <a href="https://arxiv.org/abs/2207.12598" rel="nofollow">Classifier-Free Diffusion Guidance</a>.
<code>guidance_scale</code> is defined as <code>w</code> of equation 2. of <a href="https://arxiv.org/pdf/2205.11487.pdf" rel="nofollow">Imagen
Paper</a>. Guidance scale is enabled by setting <code>guidance_scale &gt; 1</code>. Higher guidance scale encourages to generate images that are closely linked to the text <code>prompt</code>,
usually at the expense of lower image quality.`,name:"guidance_scale"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.eta",description:`<strong>eta</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Corresponds to parameter eta (&#x3B7;) in the DDIM paper: <a href="https://arxiv.org/abs/2010.02502" rel="nofollow">https://arxiv.org/abs/2010.02502</a>. Only applies to
<a href="/docs/diffusers/main/en/api/schedulers#diffusers.DDIMScheduler">schedulers.DDIMScheduler</a>, will be ignored for others.`,name:"eta"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <code>PIL.Image.Image</code> or <code>np.array</code>.`,name:"output_type"},{anchor:"diffusers.StableDiffusionInpaintPipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <a href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput">StableDiffusionPipelineOutput</a> instead of a
plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py#L140",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple. When returning a tuple, the first element is a list with the generated images, and the second element is a list of </code>bool<code>s denoting whether the corresponding generated image likely represents "not-safe-for-work" (nsfw) content, according to the </code>safety_checker\`.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/pipelines/stable_diffusion#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"
>StableDiffusionPipelineOutput</a> or <code>tuple</code></p>
`}}),Ye=new y({props:{name:"enable_attention_slicing",anchor:"diffusers.StableDiffusionInpaintPipeline.enable_attention_slicing",parameters:[{name:"slice_size",val:": typing.Union[str, int, NoneType] = 'auto'"}],parametersDescription:[{anchor:"diffusers.StableDiffusionInpaintPipeline.enable_attention_slicing.slice_size",description:`<strong>slice_size</strong> (<code>str</code> or <code>int</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
When <code>&quot;auto&quot;</code>, halves the input to the attention heads, so attention will be computed in two steps. If
a number is provided, uses as many slices as <code>attention_head_dim // slice_size</code>. In this case,
<code>attention_head_dim</code> must be a multiple of <code>slice_size</code>.`,name:"slice_size"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py#L113"}}),je=new y({props:{name:"disable_attention_slicing",anchor:"diffusers.StableDiffusionInpaintPipeline.disable_attention_slicing",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py#L132"}}),{c(){N=n("meta"),fi=f(),G=n("h1"),R=n("a"),It=n("span"),p(re.$$.fragment),Yi=f(),Pt=n("span"),ji=r("Stable diffusion pipelines"),di=f(),P=n("p"),Ji=r("Stable Diffusion is a text-to-image "),yt=n("em"),Qi=r("latent diffusion"),Xi=r(" model created by the researchers and engineers from "),le=n("a"),Zi=r("CompVis"),en=r(", "),fe=n("a"),tn=r("Stability AI"),nn=r(" and "),de=n("a"),on=r("LAION"),sn=r(". It\u2019s trained on 512x512 images from a subset of the "),ce=n("a"),an=r("LAION-5B"),rn=r(" dataset. This model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and can run on consumer GPUs."),ci=f(),C=n("p"),ln=r("Latent diffusion is the research on top of which Stable Diffusion was built. It was proposed in "),ue=n("a"),fn=r("High-Resolution Image Synthesis with Latent Diffusion Models"),dn=r(" by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Bj\xF6rn Ommer. You can learn more details about it in the "),Qe=n("a"),cn=r("specific pipeline for latent diffusion"),un=r(" that is part of \u{1F917} Diffusers."),ui=f(),M=n("p"),pn=r("For more details about how Stable Diffusion works and how it differs from the base latent diffusion model, please refer to the official "),pe=n("a"),hn=r("launch announcement post"),mn=r(" and "),he=n("a"),gn=r("this section of our own blog post"),_n=r("."),pi=f(),me=n("p"),wt=n("em"),bn=r("Tips"),vn=r(":"),hi=f(),Xe=n("ul"),Ze=n("li"),Dn=r("To tweak your prompts on a specific result you liked, you can generate your own latents, as demonstrated in the following notebook: "),ge=n("a"),et=n("img"),mi=f(),_e=n("p"),St=n("em"),In=r("Overview"),Pn=r(":"),gi=f(),B=n("table"),xt=n("thead"),$=n("tr"),Et=n("th"),yn=r("Pipeline"),wn=f(),$t=n("th"),Sn=r("Tasks"),xn=f(),tt=n("th"),En=r("Colab"),$n=f(),it=n("th"),kn=r("Demo"),Tn=f(),q=n("tbody"),k=n("tr"),kt=n("td"),be=n("a"),Ln=r("pipeline_stable_diffusion.py"),Cn=f(),Tt=n("td"),Lt=n("em"),Mn=r("Text-to-Image Generation"),On=f(),nt=n("td"),ve=n("a"),ot=n("img"),An=f(),st=n("td"),De=n("a"),zn=r("\u{1F917} Stable Diffusion"),Nn=f(),T=n("tr"),Ct=n("td"),Ie=n("a"),Gn=r("pipeline_stable_diffusion_img2img.py"),qn=f(),Mt=n("td"),Ot=n("em"),Un=r("Image-to-Image Text-Guided Generation"),Fn=f(),at=n("td"),Pe=n("a"),rt=n("img"),Vn=f(),lt=n("td"),ye=n("a"),Wn=r("\u{1F917} Diffuse the Rest"),Hn=f(),L=n("tr"),At=n("td"),we=n("a"),Rn=r("pipeline_stable_diffusion_inpaint.py"),Bn=f(),Se=n("td"),zt=n("strong"),Kn=r("Experimental"),Yn=r(" \u2013 "),Nt=n("em"),jn=r("Text-Guided Image Inpainting"),Jn=f(),ft=n("td"),xe=n("a"),dt=n("img"),Qn=f(),ct=n("td"),Xn=r("Coming soon"),_i=f(),U=n("h2"),K=n("a"),Gt=n("span"),p(Ee.$$.fragment),Zn=f(),qt=n("span"),eo=r("StableDiffusionPipelineOutput"),bi=f(),F=n("div"),p($e.$$.fragment),to=f(),Ut=n("p"),io=r("Output class for Stable Diffusion pipelines."),vi=f(),V=n("h2"),Y=n("a"),Ft=n("span"),p(ke.$$.fragment),no=f(),Vt=n("span"),oo=r("StableDiffusionPipeline"),Di=f(),v=n("div"),p(Te.$$.fragment),so=f(),Wt=n("p"),ao=r("Pipeline for text-to-image generation using Stable Diffusion."),ro=f(),Le=n("p"),lo=r("This model inherits from "),ut=n("a"),fo=r("DiffusionPipeline"),co=r(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),uo=f(),j=n("div"),p(Ce.$$.fragment),po=f(),Ht=n("p"),ho=r("Function invoked when calling the pipeline for generation."),mo=f(),O=n("div"),p(Me.$$.fragment),go=f(),Rt=n("p"),_o=r("Enable sliced attention computation."),bo=f(),Bt=n("p"),vo=r(`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),Do=f(),J=n("div"),p(Oe.$$.fragment),Io=f(),Ae=n("p"),Po=r("Disable sliced attention computation. If "),Kt=n("code"),yo=r("enable_attention_slicing"),wo=r(` was previously invoked, this method will go
back to computing attention in one step.`),Ii=f(),W=n("h2"),Q=n("a"),Yt=n("span"),p(ze.$$.fragment),So=f(),jt=n("span"),xo=r("StableDiffusionImg2ImgPipeline"),Pi=f(),D=n("div"),p(Ne.$$.fragment),Eo=f(),Jt=n("p"),$o=r("Pipeline for text-guided image to image generation using Stable Diffusion."),ko=f(),Ge=n("p"),To=r("This model inherits from "),pt=n("a"),Lo=r("DiffusionPipeline"),Co=r(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Mo=f(),X=n("div"),p(qe.$$.fragment),Oo=f(),Qt=n("p"),Ao=r("Function invoked when calling the pipeline for generation."),zo=f(),A=n("div"),p(Ue.$$.fragment),No=f(),Xt=n("p"),Go=r("Enable sliced attention computation."),qo=f(),Zt=n("p"),Uo=r(`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),Fo=f(),Z=n("div"),p(Fe.$$.fragment),Vo=f(),Ve=n("p"),Wo=r("Disable sliced attention computation. If "),ei=n("code"),Ho=r("enable_attention_slicing"),Ro=r(` was previously invoked, this method will go
back to computing attention in one step.`),yi=f(),H=n("h2"),ee=n("a"),ti=n("span"),p(We.$$.fragment),Bo=f(),ii=n("span"),Ko=r("StableDiffusionInpaintPipeline"),wi=f(),I=n("div"),p(He.$$.fragment),Yo=f(),Re=n("p"),jo=r("Pipeline for text-guided image inpainting using Stable Diffusion. "),ni=n("em"),Jo=r("This is an experimental feature"),Qo=r("."),Xo=f(),Be=n("p"),Zo=r("This model inherits from "),ht=n("a"),es=r("DiffusionPipeline"),ts=r(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),is=f(),te=n("div"),p(Ke.$$.fragment),ns=f(),oi=n("p"),os=r("Function invoked when calling the pipeline for generation."),ss=f(),z=n("div"),p(Ye.$$.fragment),as=f(),si=n("p"),rs=r("Enable sliced attention computation."),ls=f(),ai=n("p"),fs=r(`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),ds=f(),ie=n("div"),p(je.$$.fragment),cs=f(),Je=n("p"),us=r("Disable sliced attention computation. If "),ri=n("code"),ps=r("enable_attention_slicing"),hs=r(` was previously invoked, this method will go
back to computing attention in one step.`),this.h()},l(i){const c=Ka('[data-svelte="svelte-1phssyn"]',document.head);N=o(c,"META",{name:!0,content:!0}),c.forEach(t),fi=d(i),G=o(i,"H1",{class:!0});var xi=s(G);R=o(xi,"A",{id:!0,class:!0,href:!0});var ys=s(R);It=o(ys,"SPAN",{});var ws=s(It);h(re.$$.fragment,ws),ws.forEach(t),ys.forEach(t),Yi=d(xi),Pt=o(xi,"SPAN",{});var Ss=s(Pt);ji=l(Ss,"Stable diffusion pipelines"),Ss.forEach(t),xi.forEach(t),di=d(i),P=o(i,"P",{});var w=s(P);Ji=l(w,"Stable Diffusion is a text-to-image "),yt=o(w,"EM",{});var xs=s(yt);Qi=l(xs,"latent diffusion"),xs.forEach(t),Xi=l(w," model created by the researchers and engineers from "),le=o(w,"A",{href:!0,rel:!0});var Es=s(le);Zi=l(Es,"CompVis"),Es.forEach(t),en=l(w,", "),fe=o(w,"A",{href:!0,rel:!0});var $s=s(fe);tn=l($s,"Stability AI"),$s.forEach(t),nn=l(w," and "),de=o(w,"A",{href:!0,rel:!0});var ks=s(de);on=l(ks,"LAION"),ks.forEach(t),sn=l(w,". It\u2019s trained on 512x512 images from a subset of the "),ce=o(w,"A",{href:!0,rel:!0});var Ts=s(ce);an=l(Ts,"LAION-5B"),Ts.forEach(t),rn=l(w," dataset. This model uses a frozen CLIP ViT-L/14 text encoder to condition the model on text prompts. With its 860M UNet and 123M text encoder, the model is relatively lightweight and can run on consumer GPUs."),w.forEach(t),ci=d(i),C=o(i,"P",{});var mt=s(C);ln=l(mt,"Latent diffusion is the research on top of which Stable Diffusion was built. It was proposed in "),ue=o(mt,"A",{href:!0,rel:!0});var Ls=s(ue);fn=l(Ls,"High-Resolution Image Synthesis with Latent Diffusion Models"),Ls.forEach(t),dn=l(mt," by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Bj\xF6rn Ommer. You can learn more details about it in the "),Qe=o(mt,"A",{href:!0});var Cs=s(Qe);cn=l(Cs,"specific pipeline for latent diffusion"),Cs.forEach(t),un=l(mt," that is part of \u{1F917} Diffusers."),mt.forEach(t),ui=d(i),M=o(i,"P",{});var gt=s(M);pn=l(gt,"For more details about how Stable Diffusion works and how it differs from the base latent diffusion model, please refer to the official "),pe=o(gt,"A",{href:!0,rel:!0});var Ms=s(pe);hn=l(Ms,"launch announcement post"),Ms.forEach(t),mn=l(gt," and "),he=o(gt,"A",{href:!0,rel:!0});var Os=s(he);gn=l(Os,"this section of our own blog post"),Os.forEach(t),_n=l(gt,"."),gt.forEach(t),pi=d(i),me=o(i,"P",{});var ms=s(me);wt=o(ms,"EM",{});var As=s(wt);bn=l(As,"Tips"),As.forEach(t),vn=l(ms,":"),ms.forEach(t),hi=d(i),Xe=o(i,"UL",{});var zs=s(Xe);Ze=o(zs,"LI",{});var gs=s(Ze);Dn=l(gs,"To tweak your prompts on a specific result you liked, you can generate your own latents, as demonstrated in the following notebook: "),ge=o(gs,"A",{href:!0,rel:!0});var Ns=s(ge);et=o(Ns,"IMG",{src:!0,alt:!0}),Ns.forEach(t),gs.forEach(t),zs.forEach(t),mi=d(i),_e=o(i,"P",{});var _s=s(_e);St=o(_s,"EM",{});var Gs=s(St);In=l(Gs,"Overview"),Gs.forEach(t),Pn=l(_s,":"),_s.forEach(t),gi=d(i),B=o(i,"TABLE",{});var Ei=s(B);xt=o(Ei,"THEAD",{});var qs=s(xt);$=o(qs,"TR",{});var ne=s($);Et=o(ne,"TH",{});var Us=s(Et);yn=l(Us,"Pipeline"),Us.forEach(t),wn=d(ne),$t=o(ne,"TH",{});var Fs=s($t);Sn=l(Fs,"Tasks"),Fs.forEach(t),xn=d(ne),tt=o(ne,"TH",{align:!0});var Vs=s(tt);En=l(Vs,"Colab"),Vs.forEach(t),$n=d(ne),it=o(ne,"TH",{align:!0});var Ws=s(it);kn=l(Ws,"Demo"),Ws.forEach(t),ne.forEach(t),qs.forEach(t),Tn=d(Ei),q=o(Ei,"TBODY",{});var _t=s(q);k=o(_t,"TR",{});var oe=s(k);kt=o(oe,"TD",{});var Hs=s(kt);be=o(Hs,"A",{href:!0,rel:!0});var Rs=s(be);Ln=l(Rs,"pipeline_stable_diffusion.py"),Rs.forEach(t),Hs.forEach(t),Cn=d(oe),Tt=o(oe,"TD",{});var Bs=s(Tt);Lt=o(Bs,"EM",{});var Ks=s(Lt);Mn=l(Ks,"Text-to-Image Generation"),Ks.forEach(t),Bs.forEach(t),On=d(oe),nt=o(oe,"TD",{align:!0});var Ys=s(nt);ve=o(Ys,"A",{href:!0,rel:!0});var js=s(ve);ot=o(js,"IMG",{src:!0,alt:!0}),js.forEach(t),Ys.forEach(t),An=d(oe),st=o(oe,"TD",{align:!0});var Js=s(st);De=o(Js,"A",{href:!0,rel:!0});var Qs=s(De);zn=l(Qs,"\u{1F917} Stable Diffusion"),Qs.forEach(t),Js.forEach(t),oe.forEach(t),Nn=d(_t),T=o(_t,"TR",{});var se=s(T);Ct=o(se,"TD",{});var Xs=s(Ct);Ie=o(Xs,"A",{href:!0,rel:!0});var Zs=s(Ie);Gn=l(Zs,"pipeline_stable_diffusion_img2img.py"),Zs.forEach(t),Xs.forEach(t),qn=d(se),Mt=o(se,"TD",{});var ea=s(Mt);Ot=o(ea,"EM",{});var ta=s(Ot);Un=l(ta,"Image-to-Image Text-Guided Generation"),ta.forEach(t),ea.forEach(t),Fn=d(se),at=o(se,"TD",{align:!0});var ia=s(at);Pe=o(ia,"A",{href:!0,rel:!0});var na=s(Pe);rt=o(na,"IMG",{src:!0,alt:!0}),na.forEach(t),ia.forEach(t),Vn=d(se),lt=o(se,"TD",{align:!0});var oa=s(lt);ye=o(oa,"A",{href:!0,rel:!0});var sa=s(ye);Wn=l(sa,"\u{1F917} Diffuse the Rest"),sa.forEach(t),oa.forEach(t),se.forEach(t),Hn=d(_t),L=o(_t,"TR",{});var ae=s(L);At=o(ae,"TD",{});var aa=s(At);we=o(aa,"A",{href:!0,rel:!0});var ra=s(we);Rn=l(ra,"pipeline_stable_diffusion_inpaint.py"),ra.forEach(t),aa.forEach(t),Bn=d(ae),Se=o(ae,"TD",{});var $i=s(Se);zt=o($i,"STRONG",{});var la=s(zt);Kn=l(la,"Experimental"),la.forEach(t),Yn=l($i," \u2013 "),Nt=o($i,"EM",{});var fa=s(Nt);jn=l(fa,"Text-Guided Image Inpainting"),fa.forEach(t),$i.forEach(t),Jn=d(ae),ft=o(ae,"TD",{align:!0});var da=s(ft);xe=o(da,"A",{href:!0,rel:!0});var ca=s(xe);dt=o(ca,"IMG",{src:!0,alt:!0}),ca.forEach(t),da.forEach(t),Qn=d(ae),ct=o(ae,"TD",{align:!0});var ua=s(ct);Xn=l(ua,"Coming soon"),ua.forEach(t),ae.forEach(t),_t.forEach(t),Ei.forEach(t),_i=d(i),U=o(i,"H2",{class:!0});var ki=s(U);K=o(ki,"A",{id:!0,class:!0,href:!0});var pa=s(K);Gt=o(pa,"SPAN",{});var ha=s(Gt);h(Ee.$$.fragment,ha),ha.forEach(t),pa.forEach(t),Zn=d(ki),qt=o(ki,"SPAN",{});var ma=s(qt);eo=l(ma,"StableDiffusionPipelineOutput"),ma.forEach(t),ki.forEach(t),bi=d(i),F=o(i,"DIV",{class:!0});var Ti=s(F);h($e.$$.fragment,Ti),to=d(Ti),Ut=o(Ti,"P",{});var ga=s(Ut);io=l(ga,"Output class for Stable Diffusion pipelines."),ga.forEach(t),Ti.forEach(t),vi=d(i),V=o(i,"H2",{class:!0});var Li=s(V);Y=o(Li,"A",{id:!0,class:!0,href:!0});var _a=s(Y);Ft=o(_a,"SPAN",{});var ba=s(Ft);h(ke.$$.fragment,ba),ba.forEach(t),_a.forEach(t),no=d(Li),Vt=o(Li,"SPAN",{});var va=s(Vt);oo=l(va,"StableDiffusionPipeline"),va.forEach(t),Li.forEach(t),Di=d(i),v=o(i,"DIV",{class:!0});var S=s(v);h(Te.$$.fragment,S),so=d(S),Wt=o(S,"P",{});var Da=s(Wt);ao=l(Da,"Pipeline for text-to-image generation using Stable Diffusion."),Da.forEach(t),ro=d(S),Le=o(S,"P",{});var Ci=s(Le);lo=l(Ci,"This model inherits from "),ut=o(Ci,"A",{href:!0});var Ia=s(ut);fo=l(Ia,"DiffusionPipeline"),Ia.forEach(t),co=l(Ci,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Ci.forEach(t),uo=d(S),j=o(S,"DIV",{class:!0});var Mi=s(j);h(Ce.$$.fragment,Mi),po=d(Mi),Ht=o(Mi,"P",{});var Pa=s(Ht);ho=l(Pa,"Function invoked when calling the pipeline for generation."),Pa.forEach(t),Mi.forEach(t),mo=d(S),O=o(S,"DIV",{class:!0});var bt=s(O);h(Me.$$.fragment,bt),go=d(bt),Rt=o(bt,"P",{});var ya=s(Rt);_o=l(ya,"Enable sliced attention computation."),ya.forEach(t),bo=d(bt),Bt=o(bt,"P",{});var wa=s(Bt);vo=l(wa,`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),wa.forEach(t),bt.forEach(t),Do=d(S),J=o(S,"DIV",{class:!0});var Oi=s(J);h(Oe.$$.fragment,Oi),Io=d(Oi),Ae=o(Oi,"P",{});var Ai=s(Ae);Po=l(Ai,"Disable sliced attention computation. If "),Kt=o(Ai,"CODE",{});var Sa=s(Kt);yo=l(Sa,"enable_attention_slicing"),Sa.forEach(t),wo=l(Ai,` was previously invoked, this method will go
back to computing attention in one step.`),Ai.forEach(t),Oi.forEach(t),S.forEach(t),Ii=d(i),W=o(i,"H2",{class:!0});var zi=s(W);Q=o(zi,"A",{id:!0,class:!0,href:!0});var xa=s(Q);Yt=o(xa,"SPAN",{});var Ea=s(Yt);h(ze.$$.fragment,Ea),Ea.forEach(t),xa.forEach(t),So=d(zi),jt=o(zi,"SPAN",{});var $a=s(jt);xo=l($a,"StableDiffusionImg2ImgPipeline"),$a.forEach(t),zi.forEach(t),Pi=d(i),D=o(i,"DIV",{class:!0});var x=s(D);h(Ne.$$.fragment,x),Eo=d(x),Jt=o(x,"P",{});var ka=s(Jt);$o=l(ka,"Pipeline for text-guided image to image generation using Stable Diffusion."),ka.forEach(t),ko=d(x),Ge=o(x,"P",{});var Ni=s(Ge);To=l(Ni,"This model inherits from "),pt=o(Ni,"A",{href:!0});var Ta=s(pt);Lo=l(Ta,"DiffusionPipeline"),Ta.forEach(t),Co=l(Ni,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Ni.forEach(t),Mo=d(x),X=o(x,"DIV",{class:!0});var Gi=s(X);h(qe.$$.fragment,Gi),Oo=d(Gi),Qt=o(Gi,"P",{});var La=s(Qt);Ao=l(La,"Function invoked when calling the pipeline for generation."),La.forEach(t),Gi.forEach(t),zo=d(x),A=o(x,"DIV",{class:!0});var vt=s(A);h(Ue.$$.fragment,vt),No=d(vt),Xt=o(vt,"P",{});var Ca=s(Xt);Go=l(Ca,"Enable sliced attention computation."),Ca.forEach(t),qo=d(vt),Zt=o(vt,"P",{});var Ma=s(Zt);Uo=l(Ma,`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),Ma.forEach(t),vt.forEach(t),Fo=d(x),Z=o(x,"DIV",{class:!0});var qi=s(Z);h(Fe.$$.fragment,qi),Vo=d(qi),Ve=o(qi,"P",{});var Ui=s(Ve);Wo=l(Ui,"Disable sliced attention computation. If "),ei=o(Ui,"CODE",{});var Oa=s(ei);Ho=l(Oa,"enable_attention_slicing"),Oa.forEach(t),Ro=l(Ui,` was previously invoked, this method will go
back to computing attention in one step.`),Ui.forEach(t),qi.forEach(t),x.forEach(t),yi=d(i),H=o(i,"H2",{class:!0});var Fi=s(H);ee=o(Fi,"A",{id:!0,class:!0,href:!0});var Aa=s(ee);ti=o(Aa,"SPAN",{});var za=s(ti);h(We.$$.fragment,za),za.forEach(t),Aa.forEach(t),Bo=d(Fi),ii=o(Fi,"SPAN",{});var Na=s(ii);Ko=l(Na,"StableDiffusionInpaintPipeline"),Na.forEach(t),Fi.forEach(t),wi=d(i),I=o(i,"DIV",{class:!0});var E=s(I);h(He.$$.fragment,E),Yo=d(E),Re=o(E,"P",{});var Vi=s(Re);jo=l(Vi,"Pipeline for text-guided image inpainting using Stable Diffusion. "),ni=o(Vi,"EM",{});var Ga=s(ni);Jo=l(Ga,"This is an experimental feature"),Ga.forEach(t),Qo=l(Vi,"."),Vi.forEach(t),Xo=d(E),Be=o(E,"P",{});var Wi=s(Be);Zo=l(Wi,"This model inherits from "),ht=o(Wi,"A",{href:!0});var qa=s(ht);es=l(qa,"DiffusionPipeline"),qa.forEach(t),ts=l(Wi,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Wi.forEach(t),is=d(E),te=o(E,"DIV",{class:!0});var Hi=s(te);h(Ke.$$.fragment,Hi),ns=d(Hi),oi=o(Hi,"P",{});var Ua=s(oi);os=l(Ua,"Function invoked when calling the pipeline for generation."),Ua.forEach(t),Hi.forEach(t),ss=d(E),z=o(E,"DIV",{class:!0});var Dt=s(z);h(Ye.$$.fragment,Dt),as=d(Dt),si=o(Dt,"P",{});var Fa=s(si);rs=l(Fa,"Enable sliced attention computation."),Fa.forEach(t),ls=d(Dt),ai=o(Dt,"P",{});var Va=s(ai);fs=l(Va,`When this option is enabled, the attention module will split the input tensor in slices, to compute attention
in several steps. This is useful to save some memory in exchange for a small speed decrease.`),Va.forEach(t),Dt.forEach(t),ds=d(E),ie=o(E,"DIV",{class:!0});var Ri=s(ie);h(je.$$.fragment,Ri),cs=d(Ri),Je=o(Ri,"P",{});var Bi=s(Je);us=l(Bi,"Disable sliced attention computation. If "),ri=o(Bi,"CODE",{});var Wa=s(ri);ps=l(Wa,"enable_attention_slicing"),Wa.forEach(t),hs=l(Bi,` was previously invoked, this method will go
back to computing attention in one step.`),Bi.forEach(t),Ri.forEach(t),E.forEach(t),this.h()},h(){a(N,"name","hf:doc:metadata"),a(N,"content",JSON.stringify(Qa)),a(R,"id","stable-diffusion-pipelines"),a(R,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(R,"href","#stable-diffusion-pipelines"),a(G,"class","relative group"),a(le,"href","https://github.com/CompVis"),a(le,"rel","nofollow"),a(fe,"href","https://stability.ai/"),a(fe,"rel","nofollow"),a(de,"href","https://laion.ai/"),a(de,"rel","nofollow"),a(ce,"href","https://laion.ai/blog/laion-5b/"),a(ce,"rel","nofollow"),a(ue,"href","https://arxiv.org/abs/2112.10752"),a(ue,"rel","nofollow"),a(Qe,"href","pipelines/latent_diffusion"),a(pe,"href","https://stability.ai/blog/stable-diffusion-announcement"),a(pe,"rel","nofollow"),a(he,"href","https://huggingface.co/blog/stable_diffusion#how-does-stable-diffusion-work"),a(he,"rel","nofollow"),Ki(et.src,vs="https://colab.research.google.com/assets/colab-badge.svg")||a(et,"src",vs),a(et,"alt","Open In Colab"),a(ge,"href","https://colab.research.google.com/github/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb"),a(ge,"rel","nofollow"),a(tt,"align","center"),a(it,"align","center"),a(be,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion.py"),a(be,"rel","nofollow"),Ki(ot.src,Ds="https://colab.research.google.com/assets/colab-badge.svg")||a(ot,"src",Ds),a(ot,"alt","Open In Colab"),a(ve,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/stable_diffusion.ipynb"),a(ve,"rel","nofollow"),a(nt,"align","center"),a(De,"href","https://huggingface.co/spaces/stabilityai/stable-diffusion"),a(De,"rel","nofollow"),a(st,"align","center"),a(Ie,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_img2img.py"),a(Ie,"rel","nofollow"),Ki(rt.src,Is="https://colab.research.google.com/assets/colab-badge.svg")||a(rt,"src",Is),a(rt,"alt","Open In Colab"),a(Pe,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/image_2_image_using_diffusers.ipynb"),a(Pe,"rel","nofollow"),a(at,"align","center"),a(ye,"href","https://huggingface.co/spaces/huggingface/diffuse-the-rest"),a(ye,"rel","nofollow"),a(lt,"align","center"),a(we,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_inpaint.py"),a(we,"rel","nofollow"),Ki(dt.src,Ps="https://colab.research.google.com/assets/colab-badge.svg")||a(dt,"src",Ps),a(dt,"alt","Open In Colab"),a(xe,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/in_painting_with_stable_diffusion_using_diffusers.ipynb"),a(xe,"rel","nofollow"),a(ft,"align","center"),a(ct,"align","center"),a(K,"id","diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"),a(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(K,"href","#diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput"),a(U,"class","relative group"),a(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Y,"id","diffusers.StableDiffusionPipeline"),a(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Y,"href","#diffusers.StableDiffusionPipeline"),a(V,"class","relative group"),a(ut,"href","/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline"),a(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(v,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Q,"id","diffusers.StableDiffusionImg2ImgPipeline"),a(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Q,"href","#diffusers.StableDiffusionImg2ImgPipeline"),a(W,"class","relative group"),a(pt,"href","/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline"),a(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(ee,"id","diffusers.StableDiffusionInpaintPipeline"),a(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(ee,"href","#diffusers.StableDiffusionInpaintPipeline"),a(H,"class","relative group"),a(ht,"href","/docs/diffusers/main/en/api/diffusion_pipeline#diffusers.DiffusionPipeline"),a(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(i,c){e(document.head,N),u(i,fi,c),u(i,G,c),e(G,R),e(R,It),m(re,It,null),e(G,Yi),e(G,Pt),e(Pt,ji),u(i,di,c),u(i,P,c),e(P,Ji),e(P,yt),e(yt,Qi),e(P,Xi),e(P,le),e(le,Zi),e(P,en),e(P,fe),e(fe,tn),e(P,nn),e(P,de),e(de,on),e(P,sn),e(P,ce),e(ce,an),e(P,rn),u(i,ci,c),u(i,C,c),e(C,ln),e(C,ue),e(ue,fn),e(C,dn),e(C,Qe),e(Qe,cn),e(C,un),u(i,ui,c),u(i,M,c),e(M,pn),e(M,pe),e(pe,hn),e(M,mn),e(M,he),e(he,gn),e(M,_n),u(i,pi,c),u(i,me,c),e(me,wt),e(wt,bn),e(me,vn),u(i,hi,c),u(i,Xe,c),e(Xe,Ze),e(Ze,Dn),e(Ze,ge),e(ge,et),u(i,mi,c),u(i,_e,c),e(_e,St),e(St,In),e(_e,Pn),u(i,gi,c),u(i,B,c),e(B,xt),e(xt,$),e($,Et),e(Et,yn),e($,wn),e($,$t),e($t,Sn),e($,xn),e($,tt),e(tt,En),e($,$n),e($,it),e(it,kn),e(B,Tn),e(B,q),e(q,k),e(k,kt),e(kt,be),e(be,Ln),e(k,Cn),e(k,Tt),e(Tt,Lt),e(Lt,Mn),e(k,On),e(k,nt),e(nt,ve),e(ve,ot),e(k,An),e(k,st),e(st,De),e(De,zn),e(q,Nn),e(q,T),e(T,Ct),e(Ct,Ie),e(Ie,Gn),e(T,qn),e(T,Mt),e(Mt,Ot),e(Ot,Un),e(T,Fn),e(T,at),e(at,Pe),e(Pe,rt),e(T,Vn),e(T,lt),e(lt,ye),e(ye,Wn),e(q,Hn),e(q,L),e(L,At),e(At,we),e(we,Rn),e(L,Bn),e(L,Se),e(Se,zt),e(zt,Kn),e(Se,Yn),e(Se,Nt),e(Nt,jn),e(L,Jn),e(L,ft),e(ft,xe),e(xe,dt),e(L,Qn),e(L,ct),e(ct,Xn),u(i,_i,c),u(i,U,c),e(U,K),e(K,Gt),m(Ee,Gt,null),e(U,Zn),e(U,qt),e(qt,eo),u(i,bi,c),u(i,F,c),m($e,F,null),e(F,to),e(F,Ut),e(Ut,io),u(i,vi,c),u(i,V,c),e(V,Y),e(Y,Ft),m(ke,Ft,null),e(V,no),e(V,Vt),e(Vt,oo),u(i,Di,c),u(i,v,c),m(Te,v,null),e(v,so),e(v,Wt),e(Wt,ao),e(v,ro),e(v,Le),e(Le,lo),e(Le,ut),e(ut,fo),e(Le,co),e(v,uo),e(v,j),m(Ce,j,null),e(j,po),e(j,Ht),e(Ht,ho),e(v,mo),e(v,O),m(Me,O,null),e(O,go),e(O,Rt),e(Rt,_o),e(O,bo),e(O,Bt),e(Bt,vo),e(v,Do),e(v,J),m(Oe,J,null),e(J,Io),e(J,Ae),e(Ae,Po),e(Ae,Kt),e(Kt,yo),e(Ae,wo),u(i,Ii,c),u(i,W,c),e(W,Q),e(Q,Yt),m(ze,Yt,null),e(W,So),e(W,jt),e(jt,xo),u(i,Pi,c),u(i,D,c),m(Ne,D,null),e(D,Eo),e(D,Jt),e(Jt,$o),e(D,ko),e(D,Ge),e(Ge,To),e(Ge,pt),e(pt,Lo),e(Ge,Co),e(D,Mo),e(D,X),m(qe,X,null),e(X,Oo),e(X,Qt),e(Qt,Ao),e(D,zo),e(D,A),m(Ue,A,null),e(A,No),e(A,Xt),e(Xt,Go),e(A,qo),e(A,Zt),e(Zt,Uo),e(D,Fo),e(D,Z),m(Fe,Z,null),e(Z,Vo),e(Z,Ve),e(Ve,Wo),e(Ve,ei),e(ei,Ho),e(Ve,Ro),u(i,yi,c),u(i,H,c),e(H,ee),e(ee,ti),m(We,ti,null),e(H,Bo),e(H,ii),e(ii,Ko),u(i,wi,c),u(i,I,c),m(He,I,null),e(I,Yo),e(I,Re),e(Re,jo),e(Re,ni),e(ni,Jo),e(Re,Qo),e(I,Xo),e(I,Be),e(Be,Zo),e(Be,ht),e(ht,es),e(Be,ts),e(I,is),e(I,te),m(Ke,te,null),e(te,ns),e(te,oi),e(oi,os),e(I,ss),e(I,z),m(Ye,z,null),e(z,as),e(z,si),e(si,rs),e(z,ls),e(z,ai),e(ai,fs),e(I,ds),e(I,ie),m(je,ie,null),e(ie,cs),e(ie,Je),e(Je,us),e(Je,ri),e(ri,ps),e(Je,hs),Si=!0},p:Ya,i(i){Si||(g(re.$$.fragment,i),g(Ee.$$.fragment,i),g($e.$$.fragment,i),g(ke.$$.fragment,i),g(Te.$$.fragment,i),g(Ce.$$.fragment,i),g(Me.$$.fragment,i),g(Oe.$$.fragment,i),g(ze.$$.fragment,i),g(Ne.$$.fragment,i),g(qe.$$.fragment,i),g(Ue.$$.fragment,i),g(Fe.$$.fragment,i),g(We.$$.fragment,i),g(He.$$.fragment,i),g(Ke.$$.fragment,i),g(Ye.$$.fragment,i),g(je.$$.fragment,i),Si=!0)},o(i){_(re.$$.fragment,i),_(Ee.$$.fragment,i),_($e.$$.fragment,i),_(ke.$$.fragment,i),_(Te.$$.fragment,i),_(Ce.$$.fragment,i),_(Me.$$.fragment,i),_(Oe.$$.fragment,i),_(ze.$$.fragment,i),_(Ne.$$.fragment,i),_(qe.$$.fragment,i),_(Ue.$$.fragment,i),_(Fe.$$.fragment,i),_(We.$$.fragment,i),_(He.$$.fragment,i),_(Ke.$$.fragment,i),_(Ye.$$.fragment,i),_(je.$$.fragment,i),Si=!1},d(i){t(N),i&&t(fi),i&&t(G),b(re),i&&t(di),i&&t(P),i&&t(ci),i&&t(C),i&&t(ui),i&&t(M),i&&t(pi),i&&t(me),i&&t(hi),i&&t(Xe),i&&t(mi),i&&t(_e),i&&t(gi),i&&t(B),i&&t(_i),i&&t(U),b(Ee),i&&t(bi),i&&t(F),b($e),i&&t(vi),i&&t(V),b(ke),i&&t(Di),i&&t(v),b(Te),b(Ce),b(Me),b(Oe),i&&t(Ii),i&&t(W),b(ze),i&&t(Pi),i&&t(D),b(Ne),b(qe),b(Ue),b(Fe),i&&t(yi),i&&t(H),b(We),i&&t(wi),i&&t(I),b(He),b(Ke),b(Ye),b(je)}}}const Qa={local:"stable-diffusion-pipelines",sections:[{local:"diffusers.pipelines.stable_diffusion.StableDiffusionPipelineOutput",title:"StableDiffusionPipelineOutput"},{local:"diffusers.StableDiffusionPipeline",title:"StableDiffusionPipeline"},{local:"diffusers.StableDiffusionImg2ImgPipeline",title:"StableDiffusionImg2ImgPipeline"},{local:"diffusers.StableDiffusionInpaintPipeline",title:"StableDiffusionInpaintPipeline"}],title:"Stable diffusion pipelines"};function Xa(bs){return ja(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ir extends Ha{constructor(N){super();Ra(this,N,Xa,Ja,Ba,{})}}export{ir as default,Qa as metadata};
