import{S as To,i as $o,s as Do,e as n,k as l,w as S,t as f,M as Eo,c as i,d as t,m as d,a,x as q,h as p,b as r,G as o,g as c,y as N,L as Po,q as O,o as B,B as C,v as Mo}from"../../../chunks/vendor-hf-doc-builder.js";import{D as xo}from"../../../chunks/Docstring-hf-doc-builder.js";import{I as re}from"../../../chunks/IconCopyLink-hf-doc-builder.js";function Lo(Ht){let m,Me,g,$,se,H,tt,le,ot,Le,v,D,de,z,nt,ce,it,ke,E,at,U,rt,st,Ie,Y,lt,Ae,X,fe,dt,Se,P,ct,G,ft,pt,qe,_,M,pe,R,ht,he,ut,Ne,u,Oe,mt,Be,gt,Ce,He,y,L,ue,V,vt,me,_t,ze,k,ge,w,ve,yt,wt,_e,bt,xt,Z,Tt,$t,ye,b,we,Q,Dt,Et,be,xe,Pt,Mt,ee,Lt,Ue,x,I,Te,j,kt,$e,It,Ge,T,A,De,F,At,Ee,St,Re,h,J,qt,K,Nt,Pe,Ot,Bt,Ct,te,W,Ve;return H=new re({}),z=new re({}),R=new re({}),V=new re({}),j=new re({}),F=new re({}),J=new xo({props:{name:"class diffusers.LDMTextToImagePipeline",anchor:"diffusers.LDMTextToImagePipeline",parameters:[{name:"vqvae",val:": typing.Union[diffusers.models.vae.VQModel, diffusers.models.vae.AutoencoderKL]"},{name:"bert",val:": PreTrainedModel"},{name:"tokenizer",val:": PreTrainedTokenizer"},{name:"unet",val:": typing.Union[diffusers.models.unet_2d.UNet2DModel, diffusers.models.unet_2d_condition.UNet2DConditionModel]"},{name:"scheduler",val:": typing.Union[diffusers.schedulers.scheduling_ddim.DDIMScheduler, diffusers.schedulers.scheduling_pndm.PNDMScheduler, diffusers.schedulers.scheduling_lms_discrete.LMSDiscreteScheduler]"}],parametersDescription:[{anchor:"diffusers.LDMTextToImagePipeline.vqvae",description:`<strong>vqvae</strong> (<code>VQModel</code>) &#x2014;
Vector-quantized (VQ) Model to encode and decode images to and from latent representations.`,name:"vqvae"},{anchor:"diffusers.LDMTextToImagePipeline.bert",description:`<strong>bert</strong> (<code>LDMBertModel</code>) &#x2014;
Text-encoder model based on <a href="ttps://huggingface.co/docs/transformers/model_doc/bert">BERT</a> architecture.`,name:"bert"},{anchor:"diffusers.LDMTextToImagePipeline.tokenizer",description:`<strong>tokenizer</strong> (<code>transformers.BertTokenizer</code>) &#x2014;
Tokenizer of class
<a href="https://huggingface.co/docs/transformers/model_doc/bert#transformers.BertTokenizer" rel="nofollow">BertTokenizer</a>.`,name:"tokenizer"},{anchor:"diffusers.LDMTextToImagePipeline.unet",description:"<strong>unet</strong> (<code>UNet2DConditionModel</code>) &#x2014; Conditional U-Net architecture to denoise the encoded image latents.",name:"unet"},{anchor:"diffusers.LDMTextToImagePipeline.scheduler",description:`<strong>scheduler</strong> (<code>SchedulerMixin</code>) &#x2014;
A scheduler to be used in combination with <code>unet</code> to denoise the encoded image latens. Can be one of
<code>DDIMScheduler</code>, <code>LMSDiscreteScheduler</code>, or <code>PNDMScheduler</code>.`,name:"scheduler"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/latent_diffusion/pipeline_latent_diffusion.py#L21"}}),W=new xo({props:{name:"__call__",anchor:"diffusers.LDMTextToImagePipeline.__call__",parameters:[{name:"prompt",val:": typing.Union[str, typing.List[str]]"},{name:"height",val:": typing.Optional[int] = 256"},{name:"width",val:": typing.Optional[int] = 256"},{name:"num_inference_steps",val:": typing.Optional[int] = 50"},{name:"guidance_scale",val:": typing.Optional[float] = 1.0"},{name:"eta",val:": typing.Optional[float] = 0.0"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.LDMTextToImagePipeline.__call__.prompt",description:`<strong>prompt</strong> (<code>str</code> or <code>List[str]</code>) &#x2014;
The prompt or prompts to guide the image generation.`,name:"prompt"},{anchor:"diffusers.LDMTextToImagePipeline.__call__.height",description:`<strong>height</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The height in pixels of the generated image.`,name:"height"},{anchor:"diffusers.LDMTextToImagePipeline.__call__.width",description:`<strong>width</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The width in pixels of the generated image.`,name:"width"},{anchor:"diffusers.LDMTextToImagePipeline.__call__.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 50) &#x2014;
The number of denoising steps. More denoising steps usually lead to a higher quality image at the
expense of slower inference.`,name:"num_inference_steps"},{anchor:"diffusers.LDMTextToImagePipeline.__call__.guidance_scale",description:`<strong>guidance_scale</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Guidance scale as defined in <a href="https://arxiv.org/abs/2207.12598" rel="nofollow">Classifier-Free Diffusion Guidance</a>.
<code>guidance_scale</code> is defined as <code>w</code> of equation 2. of <a href="https://arxiv.org/pdf/2205.11487.pdf" rel="nofollow">Imagen
Paper</a>. Guidance scale is enabled by setting <code>guidance_scale &gt; 1</code>. Higher guidance scale encourages to generate images that are closely linked to the text <code>prompt</code> at
the, usually at the expense of lower image quality.`,name:"guidance_scale"},{anchor:"diffusers.LDMTextToImagePipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.LDMTextToImagePipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <code>PIL.Image.Image</code> or <code>nd.array</code>.`,name:"output_type"},{anchor:"diffusers.LDMTextToImagePipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>ImagePipelineOutput</code> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/latent_diffusion/pipeline_latent_diffusion.py#L52"}}),{c(){m=n("meta"),Me=l(),g=n("h1"),$=n("a"),se=n("span"),S(H.$$.fragment),tt=l(),le=n("span"),ot=f("Latent Diffusion"),Le=l(),v=n("h2"),D=n("a"),de=n("span"),S(z.$$.fragment),nt=l(),ce=n("span"),it=f("Overview"),ke=l(),E=n("p"),at=f("Latent Diffusion was proposed in "),U=n("a"),rt=f("High-Resolution Image Synthesis with Latent Diffusion Models"),st=f(" by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Bj\xF6rn Ommer."),Ie=l(),Y=n("p"),lt=f("The abstract of the paper is the following:"),Ae=l(),X=n("p"),fe=n("em"),dt=f("By decomposing the image formation process into a sequential application of denoising autoencoders, diffusion models (DMs) achieve state-of-the-art synthesis results on image data and beyond. Additionally, their formulation allows for a guiding mechanism to control the image generation process without retraining. However, since these models typically operate directly in pixel space, optimization of powerful DMs often consumes hundreds of GPU days and inference is expensive due to sequential evaluations. To enable DM training on limited computational resources while retaining their quality and flexibility, we apply them in the latent space of powerful pretrained autoencoders. In contrast to previous work, training diffusion models on such a representation allows for the first time to reach a near-optimal point between complexity reduction and detail preservation, greatly boosting visual fidelity. By introducing cross-attention layers into the model architecture, we turn diffusion models into powerful and flexible generators for general conditioning inputs such as text or bounding boxes and high-resolution synthesis becomes possible in a convolutional manner. Our latent diffusion models (LDMs) achieve a new state of the art for image inpainting and highly competitive performance on various tasks, including unconditional image generation, semantic scene synthesis, and super-resolution, while significantly reducing computational requirements compared to pixel-based DMs."),Se=l(),P=n("p"),ct=f("The original codebase can be found "),G=n("a"),ft=f("here"),pt=f("."),qe=l(),_=n("h2"),M=n("a"),pe=n("span"),S(R.$$.fragment),ht=l(),he=n("span"),ut=f("Tips:"),Ne=l(),u=n("ul"),Oe=n("li"),mt=l(),Be=n("li"),gt=l(),Ce=n("li"),He=l(),y=n("h2"),L=n("a"),ue=n("span"),S(V.$$.fragment),vt=l(),me=n("span"),_t=f("Available Pipelines:"),ze=l(),k=n("table"),ge=n("thead"),w=n("tr"),ve=n("th"),yt=f("Pipeline"),wt=l(),_e=n("th"),bt=f("Tasks"),xt=l(),Z=n("th"),Tt=f("Colab"),$t=l(),ye=n("tbody"),b=n("tr"),we=n("td"),Q=n("a"),Dt=f("pipeline_latent_diffusion.py"),Et=l(),be=n("td"),xe=n("em"),Pt=f("Text-to-Image Generation"),Mt=l(),ee=n("td"),Lt=f("-"),Ue=l(),x=n("h2"),I=n("a"),Te=n("span"),S(j.$$.fragment),kt=l(),$e=n("span"),It=f("Examples:"),Ge=l(),T=n("h2"),A=n("a"),De=n("span"),S(F.$$.fragment),At=l(),Ee=n("span"),St=f("API"),Re=l(),h=n("div"),S(J.$$.fragment),qt=l(),K=n("p"),Nt=f("This model inherits from "),Pe=n("code"),Ot=f("DiffusionPipeline"),Bt=f(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Ct=l(),te=n("div"),S(W.$$.fragment),this.h()},l(e){const s=Eo('[data-svelte="svelte-1phssyn"]',document.head);m=i(s,"META",{name:!0,content:!0}),s.forEach(t),Me=d(e),g=i(e,"H1",{class:!0});var Qe=a(g);$=i(Qe,"A",{id:!0,class:!0,href:!0});var zt=a($);se=i(zt,"SPAN",{});var Ut=a(se);q(H.$$.fragment,Ut),Ut.forEach(t),zt.forEach(t),tt=d(Qe),le=i(Qe,"SPAN",{});var Gt=a(le);ot=p(Gt,"Latent Diffusion"),Gt.forEach(t),Qe.forEach(t),Le=d(e),v=i(e,"H2",{class:!0});var je=a(v);D=i(je,"A",{id:!0,class:!0,href:!0});var Rt=a(D);de=i(Rt,"SPAN",{});var Vt=a(de);q(z.$$.fragment,Vt),Vt.forEach(t),Rt.forEach(t),nt=d(je),ce=i(je,"SPAN",{});var Qt=a(ce);it=p(Qt,"Overview"),Qt.forEach(t),je.forEach(t),ke=d(e),E=i(e,"P",{});var Fe=a(E);at=p(Fe,"Latent Diffusion was proposed in "),U=i(Fe,"A",{href:!0,rel:!0});var jt=a(U);rt=p(jt,"High-Resolution Image Synthesis with Latent Diffusion Models"),jt.forEach(t),st=p(Fe," by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Bj\xF6rn Ommer."),Fe.forEach(t),Ie=d(e),Y=i(e,"P",{});var Ft=a(Y);lt=p(Ft,"The abstract of the paper is the following:"),Ft.forEach(t),Ae=d(e),X=i(e,"P",{});var Jt=a(X);fe=i(Jt,"EM",{});var Kt=a(fe);dt=p(Kt,"By decomposing the image formation process into a sequential application of denoising autoencoders, diffusion models (DMs) achieve state-of-the-art synthesis results on image data and beyond. Additionally, their formulation allows for a guiding mechanism to control the image generation process without retraining. However, since these models typically operate directly in pixel space, optimization of powerful DMs often consumes hundreds of GPU days and inference is expensive due to sequential evaluations. To enable DM training on limited computational resources while retaining their quality and flexibility, we apply them in the latent space of powerful pretrained autoencoders. In contrast to previous work, training diffusion models on such a representation allows for the first time to reach a near-optimal point between complexity reduction and detail preservation, greatly boosting visual fidelity. By introducing cross-attention layers into the model architecture, we turn diffusion models into powerful and flexible generators for general conditioning inputs such as text or bounding boxes and high-resolution synthesis becomes possible in a convolutional manner. Our latent diffusion models (LDMs) achieve a new state of the art for image inpainting and highly competitive performance on various tasks, including unconditional image generation, semantic scene synthesis, and super-resolution, while significantly reducing computational requirements compared to pixel-based DMs."),Kt.forEach(t),Jt.forEach(t),Se=d(e),P=i(e,"P",{});var Je=a(P);ct=p(Je,"The original codebase can be found "),G=i(Je,"A",{href:!0,rel:!0});var Wt=a(G);ft=p(Wt,"here"),Wt.forEach(t),pt=p(Je,"."),Je.forEach(t),qe=d(e),_=i(e,"H2",{class:!0});var Ke=a(_);M=i(Ke,"A",{id:!0,class:!0,href:!0});var Yt=a(M);pe=i(Yt,"SPAN",{});var Xt=a(pe);q(R.$$.fragment,Xt),Xt.forEach(t),Yt.forEach(t),ht=d(Ke),he=i(Ke,"SPAN",{});var Zt=a(he);ut=p(Zt,"Tips:"),Zt.forEach(t),Ke.forEach(t),Ne=d(e),u=i(e,"UL",{});var oe=a(u);Oe=i(oe,"LI",{}),a(Oe).forEach(t),mt=d(oe),Be=i(oe,"LI",{}),a(Be).forEach(t),gt=d(oe),Ce=i(oe,"LI",{}),a(Ce).forEach(t),oe.forEach(t),He=d(e),y=i(e,"H2",{class:!0});var We=a(y);L=i(We,"A",{id:!0,class:!0,href:!0});var eo=a(L);ue=i(eo,"SPAN",{});var to=a(ue);q(V.$$.fragment,to),to.forEach(t),eo.forEach(t),vt=d(We),me=i(We,"SPAN",{});var oo=a(me);_t=p(oo,"Available Pipelines:"),oo.forEach(t),We.forEach(t),ze=d(e),k=i(e,"TABLE",{});var Ye=a(k);ge=i(Ye,"THEAD",{});var no=a(ge);w=i(no,"TR",{});var ne=a(w);ve=i(ne,"TH",{});var io=a(ve);yt=p(io,"Pipeline"),io.forEach(t),wt=d(ne),_e=i(ne,"TH",{});var ao=a(_e);bt=p(ao,"Tasks"),ao.forEach(t),xt=d(ne),Z=i(ne,"TH",{align:!0});var ro=a(Z);Tt=p(ro,"Colab"),ro.forEach(t),ne.forEach(t),no.forEach(t),$t=d(Ye),ye=i(Ye,"TBODY",{});var so=a(ye);b=i(so,"TR",{});var ie=a(b);we=i(ie,"TD",{});var lo=a(we);Q=i(lo,"A",{href:!0,rel:!0});var co=a(Q);Dt=p(co,"pipeline_latent_diffusion.py"),co.forEach(t),lo.forEach(t),Et=d(ie),be=i(ie,"TD",{});var fo=a(be);xe=i(fo,"EM",{});var po=a(xe);Pt=p(po,"Text-to-Image Generation"),po.forEach(t),fo.forEach(t),Mt=d(ie),ee=i(ie,"TD",{align:!0});var ho=a(ee);Lt=p(ho,"-"),ho.forEach(t),ie.forEach(t),so.forEach(t),Ye.forEach(t),Ue=d(e),x=i(e,"H2",{class:!0});var Xe=a(x);I=i(Xe,"A",{id:!0,class:!0,href:!0});var uo=a(I);Te=i(uo,"SPAN",{});var mo=a(Te);q(j.$$.fragment,mo),mo.forEach(t),uo.forEach(t),kt=d(Xe),$e=i(Xe,"SPAN",{});var go=a($e);It=p(go,"Examples:"),go.forEach(t),Xe.forEach(t),Ge=d(e),T=i(e,"H2",{class:!0});var Ze=a(T);A=i(Ze,"A",{id:!0,class:!0,href:!0});var vo=a(A);De=i(vo,"SPAN",{});var _o=a(De);q(F.$$.fragment,_o),_o.forEach(t),vo.forEach(t),At=d(Ze),Ee=i(Ze,"SPAN",{});var yo=a(Ee);St=p(yo,"API"),yo.forEach(t),Ze.forEach(t),Re=d(e),h=i(e,"DIV",{class:!0});var ae=a(h);q(J.$$.fragment,ae),qt=d(ae),K=i(ae,"P",{});var et=a(K);Nt=p(et,"This model inherits from "),Pe=i(et,"CODE",{});var wo=a(Pe);Ot=p(wo,"DiffusionPipeline"),wo.forEach(t),Bt=p(et,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),et.forEach(t),Ct=d(ae),te=i(ae,"DIV",{class:!0});var bo=a(te);q(W.$$.fragment,bo),bo.forEach(t),ae.forEach(t),this.h()},h(){r(m,"name","hf:doc:metadata"),r(m,"content",JSON.stringify(ko)),r($,"id","latent-diffusion"),r($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r($,"href","#latent-diffusion"),r(g,"class","relative group"),r(D,"id","overview"),r(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(D,"href","#overview"),r(v,"class","relative group"),r(U,"href","https://arxiv.org/abs/2112.10752"),r(U,"rel","nofollow"),r(G,"href","https://github.com/CompVis/latent-diffusion"),r(G,"rel","nofollow"),r(M,"id","tips"),r(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(M,"href","#tips"),r(_,"class","relative group"),r(L,"id","available-pipelines"),r(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(L,"href","#available-pipelines"),r(y,"class","relative group"),r(Z,"align","center"),r(Q,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/latent_diffusion/pipeline_latent_diffusion.py"),r(Q,"rel","nofollow"),r(ee,"align","center"),r(I,"id","examples"),r(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(I,"href","#examples"),r(x,"class","relative group"),r(A,"id","diffusers.LDMTextToImagePipeline"),r(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(A,"href","#diffusers.LDMTextToImagePipeline"),r(T,"class","relative group"),r(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),r(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,s){o(document.head,m),c(e,Me,s),c(e,g,s),o(g,$),o($,se),N(H,se,null),o(g,tt),o(g,le),o(le,ot),c(e,Le,s),c(e,v,s),o(v,D),o(D,de),N(z,de,null),o(v,nt),o(v,ce),o(ce,it),c(e,ke,s),c(e,E,s),o(E,at),o(E,U),o(U,rt),o(E,st),c(e,Ie,s),c(e,Y,s),o(Y,lt),c(e,Ae,s),c(e,X,s),o(X,fe),o(fe,dt),c(e,Se,s),c(e,P,s),o(P,ct),o(P,G),o(G,ft),o(P,pt),c(e,qe,s),c(e,_,s),o(_,M),o(M,pe),N(R,pe,null),o(_,ht),o(_,he),o(he,ut),c(e,Ne,s),c(e,u,s),o(u,Oe),o(u,mt),o(u,Be),o(u,gt),o(u,Ce),c(e,He,s),c(e,y,s),o(y,L),o(L,ue),N(V,ue,null),o(y,vt),o(y,me),o(me,_t),c(e,ze,s),c(e,k,s),o(k,ge),o(ge,w),o(w,ve),o(ve,yt),o(w,wt),o(w,_e),o(_e,bt),o(w,xt),o(w,Z),o(Z,Tt),o(k,$t),o(k,ye),o(ye,b),o(b,we),o(we,Q),o(Q,Dt),o(b,Et),o(b,be),o(be,xe),o(xe,Pt),o(b,Mt),o(b,ee),o(ee,Lt),c(e,Ue,s),c(e,x,s),o(x,I),o(I,Te),N(j,Te,null),o(x,kt),o(x,$e),o($e,It),c(e,Ge,s),c(e,T,s),o(T,A),o(A,De),N(F,De,null),o(T,At),o(T,Ee),o(Ee,St),c(e,Re,s),c(e,h,s),N(J,h,null),o(h,qt),o(h,K),o(K,Nt),o(K,Pe),o(Pe,Ot),o(K,Bt),o(h,Ct),o(h,te),N(W,te,null),Ve=!0},p:Po,i(e){Ve||(O(H.$$.fragment,e),O(z.$$.fragment,e),O(R.$$.fragment,e),O(V.$$.fragment,e),O(j.$$.fragment,e),O(F.$$.fragment,e),O(J.$$.fragment,e),O(W.$$.fragment,e),Ve=!0)},o(e){B(H.$$.fragment,e),B(z.$$.fragment,e),B(R.$$.fragment,e),B(V.$$.fragment,e),B(j.$$.fragment,e),B(F.$$.fragment,e),B(J.$$.fragment,e),B(W.$$.fragment,e),Ve=!1},d(e){t(m),e&&t(Me),e&&t(g),C(H),e&&t(Le),e&&t(v),C(z),e&&t(ke),e&&t(E),e&&t(Ie),e&&t(Y),e&&t(Ae),e&&t(X),e&&t(Se),e&&t(P),e&&t(qe),e&&t(_),C(R),e&&t(Ne),e&&t(u),e&&t(He),e&&t(y),C(V),e&&t(ze),e&&t(k),e&&t(Ue),e&&t(x),C(j),e&&t(Ge),e&&t(T),C(F),e&&t(Re),e&&t(h),C(J),C(W)}}}const ko={local:"latent-diffusion",sections:[{local:"overview",title:"Overview"},{local:"tips",title:"Tips:"},{local:"available-pipelines",title:"Available Pipelines:"},{local:"examples",title:"Examples:"},{local:"diffusers.LDMTextToImagePipeline",title:"API"}],title:"Latent Diffusion"};function Io(Ht){return Mo(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class No extends To{constructor(m){super();$o(this,m,Io,Lo,Do,{})}}export{No as default,ko as metadata};
