import{S as En,i as Dn,s as Pn,e as o,k as l,w as S,t as d,M as xn,c as i,d as t,m as c,a,x as q,h as p,b as r,G as n,g as f,y as N,L as Mn,q as H,o as U,B as O,v as Ln}from"../../../chunks/vendor-hf-doc-builder.js";import{D as $n}from"../../../chunks/Docstring-hf-doc-builder.js";import{I as re}from"../../../chunks/IconCopyLink-hf-doc-builder.js";function An(Bt){let m,Le,v,D,se,B,tt,le,nt,Ae,g,P,ce,C,ot,fe,it,ke,x,at,z,rt,st,Te,K,lt,Ie,X,de,ct,Se,M,ft,R,dt,pt,qe,_,L,pe,G,ht,he,ut,Ne,u,He,mt,Ue,vt,Oe,Be,b,A,ue,V,gt,me,_t,Ce,k,ve,w,ge,bt,wt,_e,yt,$t,Z,Et,Dt,be,y,we,Q,Pt,xt,ye,$e,Mt,Lt,ee,At,ze,$,T,Ee,j,kt,De,Tt,Re,E,I,Pe,J,It,xe,St,Ge,h,W,qt,Y,Nt,Me,Ht,Ut,Ot,te,F,Ve;return B=new re({}),C=new re({}),G=new re({}),V=new re({}),j=new re({}),J=new re({}),W=new $n({props:{name:"class diffusers.LDMPipeline",anchor:"diffusers.LDMPipeline",parameters:[{name:"vqvae",val:": VQModel"},{name:"unet",val:": UNet2DModel"},{name:"scheduler",val:": DDIMScheduler"}],parametersDescription:[{anchor:"diffusers.LDMPipeline.vqvae",description:`<strong>vqvae</strong> (<code>VQModel</code>) &#x2014;
Vector-quantized (VQ) Model to encode and decode images to and from latent representations.`,name:"vqvae"},{anchor:"diffusers.LDMPipeline.unet",description:"<strong>unet</strong> (<code>UNet2DModel</code>) &#x2014; U-Net architecture to denoise the encoded image latents.",name:"unet"},{anchor:"diffusers.LDMPipeline.scheduler",description:`<strong>scheduler</strong> (<code>SchedulerMixin</code>) &#x2014;
<code>DDIMScheduler</code> is to be used in combination with <code>unet</code> to denoise the encoded image latens.`,name:"scheduler"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/latent_diffusion_uncond/pipeline_latent_diffusion_uncond.py#L12"}}),F=new $n({props:{name:"__call__",anchor:"diffusers.LDMPipeline.__call__",parameters:[{name:"batch_size",val:": int = 1"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"eta",val:": float = 0.0"},{name:"num_inference_steps",val:": int = 50"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.LDMPipeline.__call__.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of images to generate.`,name:"batch_size"},{anchor:"diffusers.LDMPipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.LDMPipeline.__call__.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 50) &#x2014;
The number of denoising steps. More denoising steps usually lead to a higher quality image at the
expense of slower inference.`,name:"num_inference_steps"},{anchor:"diffusers.LDMPipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <code>PIL.Image.Image</code> or <code>nd.array</code>.`,name:"output_type"},{anchor:"diffusers.LDMPipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <code>ImagePipelineOutput</code> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/latent_diffusion_uncond/pipeline_latent_diffusion_uncond.py#L30"}}),{c(){m=o("meta"),Le=l(),v=o("h1"),D=o("a"),se=o("span"),S(B.$$.fragment),tt=l(),le=o("span"),nt=d("Unconditional Latent Diffusion"),Ae=l(),g=o("h2"),P=o("a"),ce=o("span"),S(C.$$.fragment),ot=l(),fe=o("span"),it=d("Overview"),ke=l(),x=o("p"),at=d("Unconditional Latent Diffusion was proposed in "),z=o("a"),rt=d("High-Resolution Image Synthesis with Latent Diffusion Models"),st=d(" by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Bj\xF6rn Ommer."),Te=l(),K=o("p"),lt=d("The abstract of the paper is the following:"),Ie=l(),X=o("p"),de=o("em"),ct=d("By decomposing the image formation process into a sequential application of denoising autoencoders, diffusion models (DMs) achieve state-of-the-art synthesis results on image data and beyond. Additionally, their formulation allows for a guiding mechanism to control the image generation process without retraining. However, since these models typically operate directly in pixel space, optimization of powerful DMs often consumes hundreds of GPU days and inference is expensive due to sequential evaluations. To enable DM training on limited computational resources while retaining their quality and flexibility, we apply them in the latent space of powerful pretrained autoencoders. In contrast to previous work, training diffusion models on such a representation allows for the first time to reach a near-optimal point between complexity reduction and detail preservation, greatly boosting visual fidelity. By introducing cross-attention layers into the model architecture, we turn diffusion models into powerful and flexible generators for general conditioning inputs such as text or bounding boxes and high-resolution synthesis becomes possible in a convolutional manner. Our latent diffusion models (LDMs) achieve a new state of the art for image inpainting and highly competitive performance on various tasks, including unconditional image generation, semantic scene synthesis, and super-resolution, while significantly reducing computational requirements compared to pixel-based DMs."),Se=l(),M=o("p"),ft=d("The original codebase can be found "),R=o("a"),dt=d("here"),pt=d("."),qe=l(),_=o("h2"),L=o("a"),pe=o("span"),S(G.$$.fragment),ht=l(),he=o("span"),ut=d("Tips:"),Ne=l(),u=o("ul"),He=o("li"),mt=l(),Ue=o("li"),vt=l(),Oe=o("li"),Be=l(),b=o("h2"),A=o("a"),ue=o("span"),S(V.$$.fragment),gt=l(),me=o("span"),_t=d("Available Pipelines:"),Ce=l(),k=o("table"),ve=o("thead"),w=o("tr"),ge=o("th"),bt=d("Pipeline"),wt=l(),_e=o("th"),yt=d("Tasks"),$t=l(),Z=o("th"),Et=d("Colab"),Dt=l(),be=o("tbody"),y=o("tr"),we=o("td"),Q=o("a"),Pt=d("pipeline_latent_diffusion_uncond.py"),xt=l(),ye=o("td"),$e=o("em"),Mt=d("Unconditional Image Generation"),Lt=l(),ee=o("td"),At=d("-"),ze=l(),$=o("h2"),T=o("a"),Ee=o("span"),S(j.$$.fragment),kt=l(),De=o("span"),Tt=d("Examples:"),Re=l(),E=o("h2"),I=o("a"),Pe=o("span"),S(J.$$.fragment),It=l(),xe=o("span"),St=d("API"),Ge=l(),h=o("div"),S(W.$$.fragment),qt=l(),Y=o("p"),Nt=d("This model inherits from "),Me=o("code"),Ht=d("DiffusionPipeline"),Ut=d(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),Ot=l(),te=o("div"),S(F.$$.fragment),this.h()},l(e){const s=xn('[data-svelte="svelte-1phssyn"]',document.head);m=i(s,"META",{name:!0,content:!0}),s.forEach(t),Le=c(e),v=i(e,"H1",{class:!0});var Qe=a(v);D=i(Qe,"A",{id:!0,class:!0,href:!0});var Ct=a(D);se=i(Ct,"SPAN",{});var zt=a(se);q(B.$$.fragment,zt),zt.forEach(t),Ct.forEach(t),tt=c(Qe),le=i(Qe,"SPAN",{});var Rt=a(le);nt=p(Rt,"Unconditional Latent Diffusion"),Rt.forEach(t),Qe.forEach(t),Ae=c(e),g=i(e,"H2",{class:!0});var je=a(g);P=i(je,"A",{id:!0,class:!0,href:!0});var Gt=a(P);ce=i(Gt,"SPAN",{});var Vt=a(ce);q(C.$$.fragment,Vt),Vt.forEach(t),Gt.forEach(t),ot=c(je),fe=i(je,"SPAN",{});var Qt=a(fe);it=p(Qt,"Overview"),Qt.forEach(t),je.forEach(t),ke=c(e),x=i(e,"P",{});var Je=a(x);at=p(Je,"Unconditional Latent Diffusion was proposed in "),z=i(Je,"A",{href:!0,rel:!0});var jt=a(z);rt=p(jt,"High-Resolution Image Synthesis with Latent Diffusion Models"),jt.forEach(t),st=p(Je," by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Bj\xF6rn Ommer."),Je.forEach(t),Te=c(e),K=i(e,"P",{});var Jt=a(K);lt=p(Jt,"The abstract of the paper is the following:"),Jt.forEach(t),Ie=c(e),X=i(e,"P",{});var Wt=a(X);de=i(Wt,"EM",{});var Yt=a(de);ct=p(Yt,"By decomposing the image formation process into a sequential application of denoising autoencoders, diffusion models (DMs) achieve state-of-the-art synthesis results on image data and beyond. Additionally, their formulation allows for a guiding mechanism to control the image generation process without retraining. However, since these models typically operate directly in pixel space, optimization of powerful DMs often consumes hundreds of GPU days and inference is expensive due to sequential evaluations. To enable DM training on limited computational resources while retaining their quality and flexibility, we apply them in the latent space of powerful pretrained autoencoders. In contrast to previous work, training diffusion models on such a representation allows for the first time to reach a near-optimal point between complexity reduction and detail preservation, greatly boosting visual fidelity. By introducing cross-attention layers into the model architecture, we turn diffusion models into powerful and flexible generators for general conditioning inputs such as text or bounding boxes and high-resolution synthesis becomes possible in a convolutional manner. Our latent diffusion models (LDMs) achieve a new state of the art for image inpainting and highly competitive performance on various tasks, including unconditional image generation, semantic scene synthesis, and super-resolution, while significantly reducing computational requirements compared to pixel-based DMs."),Yt.forEach(t),Wt.forEach(t),Se=c(e),M=i(e,"P",{});var We=a(M);ft=p(We,"The original codebase can be found "),R=i(We,"A",{href:!0,rel:!0});var Ft=a(R);dt=p(Ft,"here"),Ft.forEach(t),pt=p(We,"."),We.forEach(t),qe=c(e),_=i(e,"H2",{class:!0});var Ye=a(_);L=i(Ye,"A",{id:!0,class:!0,href:!0});var Kt=a(L);pe=i(Kt,"SPAN",{});var Xt=a(pe);q(G.$$.fragment,Xt),Xt.forEach(t),Kt.forEach(t),ht=c(Ye),he=i(Ye,"SPAN",{});var Zt=a(he);ut=p(Zt,"Tips:"),Zt.forEach(t),Ye.forEach(t),Ne=c(e),u=i(e,"UL",{});var ne=a(u);He=i(ne,"LI",{}),a(He).forEach(t),mt=c(ne),Ue=i(ne,"LI",{}),a(Ue).forEach(t),vt=c(ne),Oe=i(ne,"LI",{}),a(Oe).forEach(t),ne.forEach(t),Be=c(e),b=i(e,"H2",{class:!0});var Fe=a(b);A=i(Fe,"A",{id:!0,class:!0,href:!0});var en=a(A);ue=i(en,"SPAN",{});var tn=a(ue);q(V.$$.fragment,tn),tn.forEach(t),en.forEach(t),gt=c(Fe),me=i(Fe,"SPAN",{});var nn=a(me);_t=p(nn,"Available Pipelines:"),nn.forEach(t),Fe.forEach(t),Ce=c(e),k=i(e,"TABLE",{});var Ke=a(k);ve=i(Ke,"THEAD",{});var on=a(ve);w=i(on,"TR",{});var oe=a(w);ge=i(oe,"TH",{});var an=a(ge);bt=p(an,"Pipeline"),an.forEach(t),wt=c(oe),_e=i(oe,"TH",{});var rn=a(_e);yt=p(rn,"Tasks"),rn.forEach(t),$t=c(oe),Z=i(oe,"TH",{align:!0});var sn=a(Z);Et=p(sn,"Colab"),sn.forEach(t),oe.forEach(t),on.forEach(t),Dt=c(Ke),be=i(Ke,"TBODY",{});var ln=a(be);y=i(ln,"TR",{});var ie=a(y);we=i(ie,"TD",{});var cn=a(we);Q=i(cn,"A",{href:!0,rel:!0});var fn=a(Q);Pt=p(fn,"pipeline_latent_diffusion_uncond.py"),fn.forEach(t),cn.forEach(t),xt=c(ie),ye=i(ie,"TD",{});var dn=a(ye);$e=i(dn,"EM",{});var pn=a($e);Mt=p(pn,"Unconditional Image Generation"),pn.forEach(t),dn.forEach(t),Lt=c(ie),ee=i(ie,"TD",{align:!0});var hn=a(ee);At=p(hn,"-"),hn.forEach(t),ie.forEach(t),ln.forEach(t),Ke.forEach(t),ze=c(e),$=i(e,"H2",{class:!0});var Xe=a($);T=i(Xe,"A",{id:!0,class:!0,href:!0});var un=a(T);Ee=i(un,"SPAN",{});var mn=a(Ee);q(j.$$.fragment,mn),mn.forEach(t),un.forEach(t),kt=c(Xe),De=i(Xe,"SPAN",{});var vn=a(De);Tt=p(vn,"Examples:"),vn.forEach(t),Xe.forEach(t),Re=c(e),E=i(e,"H2",{class:!0});var Ze=a(E);I=i(Ze,"A",{id:!0,class:!0,href:!0});var gn=a(I);Pe=i(gn,"SPAN",{});var _n=a(Pe);q(J.$$.fragment,_n),_n.forEach(t),gn.forEach(t),It=c(Ze),xe=i(Ze,"SPAN",{});var bn=a(xe);St=p(bn,"API"),bn.forEach(t),Ze.forEach(t),Ge=c(e),h=i(e,"DIV",{class:!0});var ae=a(h);q(W.$$.fragment,ae),qt=c(ae),Y=i(ae,"P",{});var et=a(Y);Nt=p(et,"This model inherits from "),Me=i(et,"CODE",{});var wn=a(Me);Ht=p(wn,"DiffusionPipeline"),wn.forEach(t),Ut=p(et,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),et.forEach(t),Ot=c(ae),te=i(ae,"DIV",{class:!0});var yn=a(te);q(F.$$.fragment,yn),yn.forEach(t),ae.forEach(t),this.h()},h(){r(m,"name","hf:doc:metadata"),r(m,"content",JSON.stringify(kn)),r(D,"id","unconditional-latent-diffusion"),r(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(D,"href","#unconditional-latent-diffusion"),r(v,"class","relative group"),r(P,"id","overview"),r(P,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(P,"href","#overview"),r(g,"class","relative group"),r(z,"href","https://arxiv.org/abs/2112.10752"),r(z,"rel","nofollow"),r(R,"href","https://github.com/CompVis/latent-diffusion"),r(R,"rel","nofollow"),r(L,"id","tips"),r(L,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(L,"href","#tips"),r(_,"class","relative group"),r(A,"id","available-pipelines"),r(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(A,"href","#available-pipelines"),r(b,"class","relative group"),r(Z,"align","center"),r(Q,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/latent_diffusion_uncond/pipeline_latent_diffusion_uncond.py"),r(Q,"rel","nofollow"),r(ee,"align","center"),r(T,"id","examples"),r(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(T,"href","#examples"),r($,"class","relative group"),r(I,"id","diffusers.LDMPipeline"),r(I,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),r(I,"href","#diffusers.LDMPipeline"),r(E,"class","relative group"),r(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),r(h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,s){n(document.head,m),f(e,Le,s),f(e,v,s),n(v,D),n(D,se),N(B,se,null),n(v,tt),n(v,le),n(le,nt),f(e,Ae,s),f(e,g,s),n(g,P),n(P,ce),N(C,ce,null),n(g,ot),n(g,fe),n(fe,it),f(e,ke,s),f(e,x,s),n(x,at),n(x,z),n(z,rt),n(x,st),f(e,Te,s),f(e,K,s),n(K,lt),f(e,Ie,s),f(e,X,s),n(X,de),n(de,ct),f(e,Se,s),f(e,M,s),n(M,ft),n(M,R),n(R,dt),n(M,pt),f(e,qe,s),f(e,_,s),n(_,L),n(L,pe),N(G,pe,null),n(_,ht),n(_,he),n(he,ut),f(e,Ne,s),f(e,u,s),n(u,He),n(u,mt),n(u,Ue),n(u,vt),n(u,Oe),f(e,Be,s),f(e,b,s),n(b,A),n(A,ue),N(V,ue,null),n(b,gt),n(b,me),n(me,_t),f(e,Ce,s),f(e,k,s),n(k,ve),n(ve,w),n(w,ge),n(ge,bt),n(w,wt),n(w,_e),n(_e,yt),n(w,$t),n(w,Z),n(Z,Et),n(k,Dt),n(k,be),n(be,y),n(y,we),n(we,Q),n(Q,Pt),n(y,xt),n(y,ye),n(ye,$e),n($e,Mt),n(y,Lt),n(y,ee),n(ee,At),f(e,ze,s),f(e,$,s),n($,T),n(T,Ee),N(j,Ee,null),n($,kt),n($,De),n(De,Tt),f(e,Re,s),f(e,E,s),n(E,I),n(I,Pe),N(J,Pe,null),n(E,It),n(E,xe),n(xe,St),f(e,Ge,s),f(e,h,s),N(W,h,null),n(h,qt),n(h,Y),n(Y,Nt),n(Y,Me),n(Me,Ht),n(Y,Ut),n(h,Ot),n(h,te),N(F,te,null),Ve=!0},p:Mn,i(e){Ve||(H(B.$$.fragment,e),H(C.$$.fragment,e),H(G.$$.fragment,e),H(V.$$.fragment,e),H(j.$$.fragment,e),H(J.$$.fragment,e),H(W.$$.fragment,e),H(F.$$.fragment,e),Ve=!0)},o(e){U(B.$$.fragment,e),U(C.$$.fragment,e),U(G.$$.fragment,e),U(V.$$.fragment,e),U(j.$$.fragment,e),U(J.$$.fragment,e),U(W.$$.fragment,e),U(F.$$.fragment,e),Ve=!1},d(e){t(m),e&&t(Le),e&&t(v),O(B),e&&t(Ae),e&&t(g),O(C),e&&t(ke),e&&t(x),e&&t(Te),e&&t(K),e&&t(Ie),e&&t(X),e&&t(Se),e&&t(M),e&&t(qe),e&&t(_),O(G),e&&t(Ne),e&&t(u),e&&t(Be),e&&t(b),O(V),e&&t(Ce),e&&t(k),e&&t(ze),e&&t($),O(j),e&&t(Re),e&&t(E),O(J),e&&t(Ge),e&&t(h),O(W),O(F)}}}const kn={local:"unconditional-latent-diffusion",sections:[{local:"overview",title:"Overview"},{local:"tips",title:"Tips:"},{local:"available-pipelines",title:"Available Pipelines:"},{local:"examples",title:"Examples:"},{local:"diffusers.LDMPipeline",title:"API"}],title:"Unconditional Latent Diffusion"};function Tn(Bt){return Ln(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Nn extends En{constructor(m){super();Dn(this,m,Tn,An,Pn,{})}}export{Nn as default,kn as metadata};
