import{S as Am,i as Sm,s as $m,e as o,k as f,w as S,t as s,M as Cm,c as a,d as t,m as d,a as n,x as $,h as r,b as i,N as Kt,G as e,g as h,y as C,L as Om,q as O,o as G,B as j,v as Gm}from"../../../chunks/vendor-hf-doc-builder.js";import{I as ue}from"../../../chunks/IconCopyLink-hf-doc-builder.js";import{C as jp}from"../../../chunks/CodeBlock-hf-doc-builder.js";function jm(Mp){let oe,ml,ae,me,ta,Fe,gs,oa,vs,gl,Xt,_s,vl,ge,bs,We,Es,ys,_l,b,aa,Zt,ws,Is,na,eo,Ds,ks,la,Qe,Ts,Ps,Je,xs,to,As,Ss,$s,Ke,Cs,Xe,Os,Gs,js,Ze,Ms,oo,Ls,qs,bl,ao,Ns,El,D,sa,ra,M,Rs,ia,Hs,Bs,et,Us,Vs,tt,Ys,zs,Fs,fa,no,ot,Ws,lo,Qs,Js,Ks,da,so,at,Xs,ro,Zs,er,tr,pa,io,nt,or,fo,ar,nr,yl,L,ha,lr,sr,ca,rr,ir,lt,fr,dr,wl,ne,ve,ua,st,pr,ma,hr,Il,po,cr,Dl,_e,ga,q,va,ur,mr,_a,gr,vr,ho,_r,br,co,Er,yr,u,N,ba,uo,wr,Ir,Ea,rt,ya,Dr,kr,mo,Tr,Pr,wa,xr,R,Ia,go,Ar,Sr,Da,it,ka,$r,Cr,vo,Or,Gr,_o,ft,bo,Lp,jr,H,Ta,Eo,Mr,Lr,Pa,dt,xa,qr,Nr,yo,Rr,Hr,Aa,Br,B,Sa,wo,Ur,Vr,$a,pt,Ca,Yr,zr,Io,Fr,Wr,Oa,Qr,U,Ga,Do,Jr,Kr,ja,ht,Ma,Xr,Zr,ko,ei,ti,La,oi,V,qa,To,ai,ni,Na,ct,Ra,li,si,Po,ri,ii,Ha,fi,Y,Ba,xo,di,pi,Ua,ut,Va,hi,ci,Ao,ui,mi,Ya,gi,z,za,So,vi,_i,Fa,mt,Wa,bi,Ei,$o,yi,wi,Co,gt,Oo,qp,Ii,F,Qa,Go,Di,ki,Ja,vt,Ka,Ti,Pi,jo,xi,Ai,Mo,_t,Lo,Np,Si,W,Xa,qo,$i,Ci,Za,bt,en,Oi,Gi,No,ji,Mi,Ro,Et,Ho,Rp,Li,Q,tn,Bo,qi,Ni,on,yt,an,Ri,Hi,Uo,Bi,Ui,nn,kl,wt,ln,Vi,Yi,Tl,be,zi,Vo,Fi,Wi,Pl,le,Ee,sn,It,Qi,rn,Ji,xl,Yo,Ki,Al,K,Xi,fn,Zi,ef,Dt,tf,of,Sl,k,c,kt,dn,af,nf,lf,pn,sf,rf,Tt,ff,df,hn,pf,hf,cn,cf,uf,un,mf,gf,Pt,vf,_f,mn,bf,Ef,gn,yf,wf,vn,If,Df,_n,kf,Tf,Pf,v,zo,bn,xf,Af,En,Sf,$f,yn,Cf,Of,wn,Gf,jf,In,Mf,Lf,Dn,qf,Nf,kn,Rf,Hf,Tn,Bf,Uf,Vf,y,Fo,Pn,Yf,zf,xn,Ff,Wf,An,Qf,Jf,Sn,Kf,Xf,se,Zf,$n,ed,td,od,ad,E,Cn,nd,ld,On,sd,rd,Gn,id,fd,jn,dd,pd,Wo,Mn,hd,cd,xt,ud,md,$l,T,Ln,gd,vd,qn,_d,bd,At,Nn,Ed,yd,St,wd,Cl,re,ye,Rn,$t,Id,Hn,Dd,Ol,w,kd,Bn,Td,Pd,Un,xd,Ad,Vn,Sd,$d,Yn,Cd,Od,Gl,P,we,zn,Gd,jd,Ct,Fn,Md,Ld,qd,Nd,X,Wn,Rd,Hd,Qn,Bd,Ud,Jn,Vd,Yd,zd,Z,Kn,Fd,Wd,Ot,Qd,Jd,Qo,Kd,Xd,Zd,x,Xn,ep,tp,Zn,op,ap,el,np,lp,tl,sp,rp,jl,ie,Ie,ol,Gt,ip,al,fp,Ml,fe,De,nl,jt,dp,ll,pp,Ll,Mt,ql,de,ke,sl,Lt,hp,rl,cp,Nl,Te,up,il,mp,gp,Rl,qt,Hl,Nt,vp,Rt,Jo,Hp,Bl,pe,Pe,fl,Ht,_p,dl,bp,Ul,ee,Ep,Bt,yp,wp,Ut,Ko,Bp,Ip,Vl,he,xe,pl,Vt,Dp,hl,kp,Yl,Ae,Tp,cl,Pp,xp,zl,Yt,Fl,zt,Ap,Ft,Xo,Up,Wl;return Fe=new ue({}),st=new ue({}),It=new ue({}),$t=new ue({}),Gt=new ue({}),jt=new ue({}),Mt=new jp({props:{code:`# make sure you're logged in with \`huggingface-cli login\`
from diffusers import StableDiffusionPipeline, LMSDiscreteScheduler

pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4")
pipe = pipe.to("cuda")

prompt = "a photo of an astronaut riding a horse on mars"
image = pipe(prompt).images[0]

image.save("astronaut_rides_horse.png")`,highlighted:`<span class="hljs-comment"># make sure you&#x27;re logged in with \`huggingface-cli login\`</span>
<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionPipeline, LMSDiscreteScheduler

pipe = StableDiffusionPipeline.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
pipe = pipe.to(<span class="hljs-string">&quot;cuda&quot;</span>)

prompt = <span class="hljs-string">&quot;a photo of an astronaut riding a horse on mars&quot;</span>
image = pipe(prompt).images[<span class="hljs-number">0</span>]

image.save(<span class="hljs-string">&quot;astronaut_rides_horse.png&quot;</span>)`}}),Lt=new ue({}),qt=new jp({props:{code:`import requests
from PIL import Image
from io import BytesIO

from diffusers import StableDiffusionImg2ImgPipeline

# load the pipeline
device = "cuda"
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
    "CompVis/stable-diffusion-v1-4", revision="fp16", torch_dtype=torch.float16
).to(device)

# let's download an initial image
url = "https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/sketch-mountains-input.jpg"

response = requests.get(url)
init_image = Image.open(BytesIO(response.content)).convert("RGB")
init_image = init_image.resize((768, 512))

prompt = "A fantasy landscape, trending on artstation"

images = pipe(prompt=prompt, init_image=init_image, strength=0.75, guidance_scale=7.5).images

images[0].save("fantasy_landscape.png")`,highlighted:`<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO

<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionImg2ImgPipeline

<span class="hljs-comment"># load the pipeline</span>
device = <span class="hljs-string">&quot;cuda&quot;</span>
pipe = StableDiffusionImg2ImgPipeline.from_pretrained(
    <span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>, revision=<span class="hljs-string">&quot;fp16&quot;</span>, torch_dtype=torch.float16
).to(device)

<span class="hljs-comment"># let&#x27;s download an initial image</span>
url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/stable-diffusion/main/assets/stable-samples/img2img/sketch-mountains-input.jpg&quot;</span>

response = requests.get(url)
init_image = Image.<span class="hljs-built_in">open</span>(BytesIO(response.content)).convert(<span class="hljs-string">&quot;RGB&quot;</span>)
init_image = init_image.resize((<span class="hljs-number">768</span>, <span class="hljs-number">512</span>))

prompt = <span class="hljs-string">&quot;A fantasy landscape, trending on artstation&quot;</span>

images = pipe(prompt=prompt, init_image=init_image, strength=<span class="hljs-number">0.75</span>, guidance_scale=<span class="hljs-number">7.5</span>).images

images[<span class="hljs-number">0</span>].save(<span class="hljs-string">&quot;fantasy_landscape.png&quot;</span>)`}}),Ht=new ue({}),Vt=new ue({}),Yt=new jp({props:{code:`import PIL
import requests
import torch
from io import BytesIO

from diffusers import StableDiffusionInpaintPipeline


def download_image(url):
    response = requests.get(url)
    return PIL.Image.open(BytesIO(response.content)).convert("RGB")


img_url = "https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png"
mask_url = "https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png"

init_image = download_image(img_url).resize((512, 512))
mask_image = download_image(mask_url).resize((512, 512))

pipe = StableDiffusionInpaintPipeline.from_pretrained(
    "runwayml/stable-diffusion-inpainting",
    revision="fp16",
    torch_dtype=torch.float16,
)
pipe = pipe.to("cuda")

prompt = "Face of a yellow cat, high resolution, sitting on a park bench"
image = pipe(prompt=prompt, image=init_image, mask_image=mask_image).images[0]`,highlighted:`<span class="hljs-keyword">import</span> PIL
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO

<span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> StableDiffusionInpaintPipeline


<span class="hljs-keyword">def</span> <span class="hljs-title function_">download_image</span>(<span class="hljs-params">url</span>):
    response = requests.get(url)
    <span class="hljs-keyword">return</span> PIL.Image.<span class="hljs-built_in">open</span>(BytesIO(response.content)).convert(<span class="hljs-string">&quot;RGB&quot;</span>)


img_url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png&quot;</span>
mask_url = <span class="hljs-string">&quot;https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png&quot;</span>

init_image = download_image(img_url).resize((<span class="hljs-number">512</span>, <span class="hljs-number">512</span>))
mask_image = download_image(mask_url).resize((<span class="hljs-number">512</span>, <span class="hljs-number">512</span>))

pipe = StableDiffusionInpaintPipeline.from_pretrained(
    <span class="hljs-string">&quot;runwayml/stable-diffusion-inpainting&quot;</span>,
    revision=<span class="hljs-string">&quot;fp16&quot;</span>,
    torch_dtype=torch.float16,
)
pipe = pipe.to(<span class="hljs-string">&quot;cuda&quot;</span>)

prompt = <span class="hljs-string">&quot;Face of a yellow cat, high resolution, sitting on a park bench&quot;</span>
image = pipe(prompt=prompt, image=init_image, mask_image=mask_image).images[<span class="hljs-number">0</span>]`}}),{c(){oe=o("meta"),ml=f(),ae=o("h1"),me=o("a"),ta=o("span"),S(Fe.$$.fragment),gs=f(),oa=o("span"),vs=s("Pipelines"),gl=f(),Xt=o("p"),_s=s(`Pipelines provide a simple way to run state-of-the-art diffusion models in inference.
Most diffusion systems consist of multiple independently-trained models and highly adaptable scheduler
components - all of which are needed to have a functioning end-to-end diffusion system.`),vl=f(),ge=o("p"),bs=s("As an example, "),We=o("a"),Es=s("Stable Diffusion"),ys=s(" has three independently trained models:"),_l=f(),b=o("ul"),aa=o("li"),Zt=o("a"),ws=s("Autoencoder"),Is=f(),na=o("li"),eo=o("a"),Ds=s("Conditional Unet"),ks=f(),la=o("li"),Qe=o("a"),Ts=s("CLIP text encoder"),Ps=f(),Je=o("li"),xs=s("a scheduler component, "),to=o("a"),As=s("scheduler"),Ss=s(","),$s=f(),Ke=o("li"),Cs=s("a "),Xe=o("a"),Os=s("CLIPFeatureExtractor"),Gs=s(","),js=f(),Ze=o("li"),Ms=s("as well as a "),oo=o("a"),Ls=s("safety checker"),qs=s(`.
All of these components are necessary to run stable diffusion in inference even though they were trained
or created independently from each other.`),bl=f(),ao=o("p"),Ns=s(`To that end, we strive to offer all open-sourced, state-of-the-art diffusion system under a unified API.
More specifically, we strive to provide pipelines that`),El=f(),D=o("ul"),sa=o("li"),ra=o("ol"),M=o("li"),Rs=s("can load the officially published weights and yield 1-to-1 the same outputs as the original implementation according to the corresponding paper ("),ia=o("em"),Hs=s("e.g."),Bs=f(),et=o("a"),Us=s("LatentDiffusionPipeline"),Vs=s(", uses the officially released weights of "),tt=o("a"),Ys=s("High-Resolution Image Synthesis with Latent Diffusion Models"),zs=s("),"),Fs=f(),fa=o("li"),no=o("ol"),ot=o("li"),Ws=s("have a simple user interface to run the model in inference (see the "),lo=o("a"),Qs=s("Pipelines API"),Js=s(" section),"),Ks=f(),da=o("li"),so=o("ol"),at=o("li"),Xs=s("are easy to understand with code that is self-explanatory and can be read along-side the official paper (see "),ro=o("a"),Zs=s("Pipelines summary"),er=s("),"),tr=f(),pa=o("li"),io=o("ol"),nt=o("li"),or=s("can easily be contributed by the community (see the "),fo=o("a"),ar=s("Contribution"),nr=s(" section)."),yl=f(),L=o("p"),ha=o("strong"),lr=s("Note"),sr=s(` that pipelines do not (and should not) offer any training functionality.
If you are looking for `),ca=o("em"),rr=s("official"),ir=s(" training examples, please have a look at "),lt=o("a"),fr=s("examples"),dr=s("."),wl=f(),ne=o("h2"),ve=o("a"),ua=o("span"),S(st.$$.fragment),pr=f(),ma=o("span"),hr=s("\u{1F9E8} Diffusers Summary"),Il=f(),po=o("p"),cr=s(`The following table summarizes all officially supported pipelines, their corresponding paper, and if
available a colab notebook to directly try them out.`),Dl=f(),_e=o("table"),ga=o("thead"),q=o("tr"),va=o("th"),ur=s("Pipeline"),mr=f(),_a=o("th"),gr=s("Paper"),vr=f(),ho=o("th"),_r=s("Tasks"),br=f(),co=o("th"),Er=s("Colab"),yr=f(),u=o("tbody"),N=o("tr"),ba=o("td"),uo=o("a"),wr=s("ddpm"),Ir=f(),Ea=o("td"),rt=o("a"),ya=o("strong"),Dr=s("Denoising Diffusion Probabilistic Models"),kr=f(),mo=o("td"),Tr=s("Unconditional Image Generation"),Pr=f(),wa=o("td"),xr=f(),R=o("tr"),Ia=o("td"),go=o("a"),Ar=s("ddim"),Sr=f(),Da=o("td"),it=o("a"),ka=o("strong"),$r=s("Denoising Diffusion Implicit Models"),Cr=f(),vo=o("td"),Or=s("Unconditional Image Generation"),Gr=f(),_o=o("td"),ft=o("a"),bo=o("img"),jr=f(),H=o("tr"),Ta=o("td"),Eo=o("a"),Mr=s("latent_diffusion"),Lr=f(),Pa=o("td"),dt=o("a"),xa=o("strong"),qr=s("High-Resolution Image Synthesis with Latent Diffusion Models"),Nr=f(),yo=o("td"),Rr=s("Text-to-Image Generation"),Hr=f(),Aa=o("td"),Br=f(),B=o("tr"),Sa=o("td"),wo=o("a"),Ur=s("latent_diffusion_uncond"),Vr=f(),$a=o("td"),pt=o("a"),Ca=o("strong"),Yr=s("High-Resolution Image Synthesis with Latent Diffusion Models"),zr=f(),Io=o("td"),Fr=s("Unconditional Image Generation"),Wr=f(),Oa=o("td"),Qr=f(),U=o("tr"),Ga=o("td"),Do=o("a"),Jr=s("pndm"),Kr=f(),ja=o("td"),ht=o("a"),Ma=o("strong"),Xr=s("Pseudo Numerical Methods for Diffusion Models on Manifolds"),Zr=f(),ko=o("td"),ei=s("Unconditional Image Generation"),ti=f(),La=o("td"),oi=f(),V=o("tr"),qa=o("td"),To=o("a"),ai=s("score_sde_ve"),ni=f(),Na=o("td"),ct=o("a"),Ra=o("strong"),li=s("Score-Based Generative Modeling through Stochastic Differential Equations"),si=f(),Po=o("td"),ri=s("Unconditional Image Generation"),ii=f(),Ha=o("td"),fi=f(),Y=o("tr"),Ba=o("td"),xo=o("a"),di=s("score_sde_vp"),pi=f(),Ua=o("td"),ut=o("a"),Va=o("strong"),hi=s("Score-Based Generative Modeling through Stochastic Differential Equations"),ci=f(),Ao=o("td"),ui=s("Unconditional Image Generation"),mi=f(),Ya=o("td"),gi=f(),z=o("tr"),za=o("td"),So=o("a"),vi=s("stable_diffusion"),_i=f(),Fa=o("td"),mt=o("a"),Wa=o("strong"),bi=s("Stable Diffusion"),Ei=f(),$o=o("td"),yi=s("Text-to-Image Generation"),wi=f(),Co=o("td"),gt=o("a"),Oo=o("img"),Ii=f(),F=o("tr"),Qa=o("td"),Go=o("a"),Di=s("stable_diffusion"),ki=f(),Ja=o("td"),vt=o("a"),Ka=o("strong"),Ti=s("Stable Diffusion"),Pi=f(),jo=o("td"),xi=s("Image-to-Image Text-Guided Generation"),Ai=f(),Mo=o("td"),_t=o("a"),Lo=o("img"),Si=f(),W=o("tr"),Xa=o("td"),qo=o("a"),$i=s("stable_diffusion"),Ci=f(),Za=o("td"),bt=o("a"),en=o("strong"),Oi=s("Stable Diffusion"),Gi=f(),No=o("td"),ji=s("Text-Guided Image Inpainting"),Mi=f(),Ro=o("td"),Et=o("a"),Ho=o("img"),Li=f(),Q=o("tr"),tn=o("td"),Bo=o("a"),qi=s("stochastic_karras_ve"),Ni=f(),on=o("td"),yt=o("a"),an=o("strong"),Ri=s("Elucidating the Design Space of Diffusion-Based Generative Models"),Hi=f(),Uo=o("td"),Bi=s("Unconditional Image Generation"),Ui=f(),nn=o("td"),kl=f(),wt=o("p"),ln=o("strong"),Vi=s("Note"),Yi=s(": Pipelines are simple examples of how to play around with the diffusion systems as described in the corresponding papers."),Tl=f(),be=o("p"),zi=s("However, most of them can be adapted to use different scheduler components or even different model components. Some pipeline examples are shown in the "),Vo=o("a"),Fi=s("Examples"),Wi=s(" below."),Pl=f(),le=o("h2"),Ee=o("a"),sn=o("span"),S(It.$$.fragment),Qi=f(),rn=o("span"),Ji=s("Pipelines API"),xl=f(),Yo=o("p"),Ki=s("Diffusion models often consist of multiple independently-trained models or other previously existing components."),Al=f(),K=o("p"),Xi=s(`Each model has been trained independently on a different task and the scheduler can easily be swapped out and replaced with a different one.
During inference, we however want to be able to easily load all components and use them in inference - even if one component, `),fn=o("em"),Zi=s("e.g."),ef=s(" CLIP\u2019s text encoder, originates from a different library, such as "),Dt=o("a"),tf=s("Transformers"),of=s(". To that end, all pipelines provide the following functionality:"),Sl=f(),k=o("ul"),c=o("li"),kt=o("a"),dn=o("code"),af=s("from_pretrained"),nf=s(" method"),lf=s(" that accepts a Hugging Face Hub repository id, "),pn=o("em"),sf=s("e.g."),rf=f(),Tt=o("a"),ff=s("CompVis/stable-diffusion-v1-4"),df=s(" or a path to a local directory, "),hn=o("em"),pf=s("e.g."),hf=s(`
\u201D./stable-diffusion\u201D. To correctly retrieve which models and components should be loaded, one has to provide a `),cn=o("code"),cf=s("model_index.json"),uf=s(" file, "),un=o("em"),mf=s("e.g."),gf=f(),Pt=o("a"),vf=s("CompVis/stable-diffusion-v1-4/model_index.json"),_f=s(`, which defines all components that should be
loaded into the pipelines. More specifically, for each model/component one needs to define the format `),mn=o("code"),bf=s('<name>: ["<library>", "<class name>"]'),Ef=s(". "),gn=o("code"),yf=s("<name>"),wf=s(" is the attribute name given to the loaded instance of "),vn=o("code"),If=s("<class name>"),Df=s(" which can be found in the library or pipeline folder called "),_n=o("code"),kf=s('"<library>"'),Tf=s("."),Pf=f(),v=o("li"),zo=o("a"),bn=o("code"),xf=s("save_pretrained"),Af=s(" that accepts a local path, "),En=o("em"),Sf=s("e.g."),$f=f(),yn=o("code"),Cf=s("./stable-diffusion"),Of=s(" under which all models/components of the pipeline will be saved. For each component/model a folder is created inside the local path that is named after the given attribute name, "),wn=o("em"),Gf=s("e.g."),jf=f(),In=o("code"),Mf=s("./stable_diffusion/unet"),Lf=s(`.
In addition, a `),Dn=o("code"),qf=s("model_index.json"),Nf=s(" file is created at the root of the local path, "),kn=o("em"),Rf=s("e.g."),Hf=f(),Tn=o("code"),Bf=s("./stable_diffusion/model_index.json"),Uf=s(` so that the complete pipeline can again be instantiated
from the local path.`),Vf=f(),y=o("li"),Fo=o("a"),Pn=o("code"),Yf=s("to"),zf=s(" which accepts a "),xn=o("code"),Ff=s("string"),Wf=s(" or "),An=o("code"),Qf=s("torch.device"),Jf=s(" to move all models that are of type "),Sn=o("code"),Kf=s("torch.nn.Module"),Xf=s(" to the passed device. The behavior is fully analogous to "),se=o("a"),Zf=s("PyTorch\u2019s "),$n=o("code"),ed=s("to"),td=s(" method"),od=s("."),ad=f(),E=o("li"),Cn=o("code"),nd=s("__call__"),ld=s(" method to use the pipeline in inference. "),On=o("code"),sd=s("__call__"),rd=s(" defines inference logic of the pipeline and should ideally encompass all aspects of it, from pre-processing to forwarding tensors to the different models and schedulers, as well as post-processing. The API of the "),Gn=o("code"),id=s("__call__"),fd=s(" method can strongly vary from pipeline to pipeline. "),jn=o("em"),dd=s("E.g."),pd=s(" a text-to-image pipeline, such as "),Wo=o("a"),Mn=o("code"),hd=s("StableDiffusionPipeline"),cd=s(" should accept among other things the text prompt to generate the image. A pure image generation pipeline, such as "),xt=o("a"),ud=s("DDPMPipeline"),md=s(` on the other hand can be run without providing any inputs. To better understand what inputs can be adapted for
each pipeline, one should look directly into the respective pipeline.`),$l=f(),T=o("p"),Ln=o("strong"),gd=s("Note"),vd=s(": All pipelines have PyTorch\u2019s autograd disabled by decorating the "),qn=o("code"),_d=s("__call__"),bd=s(" method with a "),At=o("a"),Nn=o("code"),Ed=s("torch.no_grad"),yd=s(` decorator because pipelines should
not be used for training. If you want to store the gradients during the forward pass, we recommend writing your own pipeline, see also our `),St=o("a"),wd=s("community-examples"),Cl=f(),re=o("h2"),ye=o("a"),Rn=o("span"),S($t.$$.fragment),Id=f(),Hn=o("span"),Dd=s("Contribution"),Ol=f(),w=o("p"),kd=s(`We are more than happy about any contribution to the officially supported pipelines \u{1F917}. We aspire
all of our pipelines to be  `),Bn=o("strong"),Td=s("self-contained"),Pd=s(", "),Un=o("strong"),xd=s("easy-to-tweak"),Ad=s(", "),Vn=o("strong"),Sd=s("beginner-friendly"),$d=s(" and for "),Yn=o("strong"),Cd=s("one-purpose-only"),Od=s("."),Gl=f(),P=o("ul"),we=o("li"),zn=o("strong"),Gd=s("Self-contained"),jd=s(": A pipeline shall be as self-contained as possible. More specifically, this means that all functionality should be either directly defined in the pipeline file itself, should be inherited from (and only from) the "),Ct=o("a"),Fn=o("code"),Md=s("DiffusionPipeline"),Ld=s(" class"),qd=s(" or be directly attached to the model and scheduler components of the pipeline."),Nd=f(),X=o("li"),Wn=o("strong"),Rd=s("Easy-to-use"),Hd=s(`: Pipelines should be extremely easy to use - one should be able to load the pipeline and
use it for its designated task, `),Qn=o("em"),Bd=s("e.g."),Ud=s(` text-to-image generation, in just a couple of lines of code. Most
logic including pre-processing, an unrolled diffusion loop, and post-processing should all happen inside the `),Jn=o("code"),Vd=s("__call__"),Yd=s(" method."),zd=f(),Z=o("li"),Kn=o("strong"),Fd=s("Easy-to-tweak"),Wd=s(": Certain pipelines will not be able to handle all use cases and tasks that you might like them to. If you want to use a certain pipeline for a specific use case that is not yet supported, you might have to copy the pipeline file and tweak the code to your needs. We try to make the pipeline code as readable as possible so that each part \u2013from pre-processing to diffusing to post-processing\u2013 can easily be adapted. If you would like the community to benefit from your customized pipeline, we would love to see a contribution to our "),Ot=o("a"),Qd=s("community-examples"),Jd=s(". If you feel that an important pipeline should be part of the official pipelines but isn\u2019t, a contribution to the "),Qo=o("a"),Kd=s("official pipelines"),Xd=s(" would be even better."),Zd=f(),x=o("li"),Xn=o("strong"),ep=s("One-purpose-only"),tp=s(": Pipelines should be used for one task and one task only. Even if two tasks are very similar from a modeling point of view, "),Zn=o("em"),op=s("e.g."),ap=s(" image2image translation and in-painting, pipelines shall be used for one task only to keep them "),el=o("em"),np=s("easy-to-tweak"),lp=s(" and "),tl=o("em"),sp=s("readable"),rp=s("."),jl=f(),ie=o("h2"),Ie=o("a"),ol=o("span"),S(Gt.$$.fragment),ip=f(),al=o("span"),fp=s("Examples"),Ml=f(),fe=o("h3"),De=o("a"),nl=o("span"),S(jt.$$.fragment),dp=f(),ll=o("span"),pp=s("Text-to-Image generation with Stable Diffusion"),Ll=f(),S(Mt.$$.fragment),ql=f(),de=o("h3"),ke=o("a"),sl=o("span"),S(Lt.$$.fragment),hp=f(),rl=o("span"),cp=s("Image-to-Image text-guided generation with Stable Diffusion"),Nl=f(),Te=o("p"),up=s("The "),il=o("code"),mp=s("StableDiffusionImg2ImgPipeline"),gp=s(" lets you pass a text prompt and an initial image to condition the generation of new images."),Rl=f(),S(qt.$$.fragment),Hl=f(),Nt=o("p"),vp=s("You can also run this example on colab "),Rt=o("a"),Jo=o("img"),Bl=f(),pe=o("h3"),Pe=o("a"),fl=o("span"),S(Ht.$$.fragment),_p=f(),dl=o("span"),bp=s("Tweak prompts reusing seeds and latents"),Ul=f(),ee=o("p"),Ep=s("You can generate your own latents to reproduce results, or tweak your prompt on a specific result you liked. "),Bt=o("a"),yp=s("This notebook"),wp=s(" shows how to do it step by step. You can also run it in Google Colab "),Ut=o("a"),Ko=o("img"),Ip=s("."),Vl=f(),he=o("h3"),xe=o("a"),pl=o("span"),S(Vt.$$.fragment),Dp=f(),hl=o("span"),kp=s("In-painting using Stable Diffusion"),Yl=f(),Ae=o("p"),Tp=s("The "),cl=o("code"),Pp=s("StableDiffusionInpaintPipeline"),xp=s(" lets you edit specific parts of an image by providing a mask and text prompt."),zl=f(),S(Yt.$$.fragment),Fl=f(),zt=o("p"),Ap=s("You can also run this example on colab "),Ft=o("a"),Xo=o("img"),this.h()},l(l){const p=Cm('[data-svelte="svelte-1phssyn"]',document.head);oe=a(p,"META",{name:!0,content:!0}),p.forEach(t),ml=d(l),ae=a(l,"H1",{class:!0});var Ql=n(ae);me=a(Ql,"A",{id:!0,class:!0,href:!0});var Vp=n(me);ta=a(Vp,"SPAN",{});var Yp=n(ta);$(Fe.$$.fragment,Yp),Yp.forEach(t),Vp.forEach(t),gs=d(Ql),oa=a(Ql,"SPAN",{});var zp=n(oa);vs=r(zp,"Pipelines"),zp.forEach(t),Ql.forEach(t),gl=d(l),Xt=a(l,"P",{});var Fp=n(Xt);_s=r(Fp,`Pipelines provide a simple way to run state-of-the-art diffusion models in inference.
Most diffusion systems consist of multiple independently-trained models and highly adaptable scheduler
components - all of which are needed to have a functioning end-to-end diffusion system.`),Fp.forEach(t),vl=d(l),ge=a(l,"P",{});var Jl=n(ge);bs=r(Jl,"As an example, "),We=a(Jl,"A",{href:!0,rel:!0});var Wp=n(We);Es=r(Wp,"Stable Diffusion"),Wp.forEach(t),ys=r(Jl," has three independently trained models:"),Jl.forEach(t),_l=d(l),b=a(l,"UL",{});var A=n(b);aa=a(A,"LI",{});var Qp=n(aa);Zt=a(Qp,"A",{href:!0});var Jp=n(Zt);ws=r(Jp,"Autoencoder"),Jp.forEach(t),Qp.forEach(t),Is=d(A),na=a(A,"LI",{});var Kp=n(na);eo=a(Kp,"A",{href:!0});var Xp=n(eo);Ds=r(Xp,"Conditional Unet"),Xp.forEach(t),Kp.forEach(t),ks=d(A),la=a(A,"LI",{});var Zp=n(la);Qe=a(Zp,"A",{href:!0,rel:!0});var eh=n(Qe);Ts=r(eh,"CLIP text encoder"),eh.forEach(t),Zp.forEach(t),Ps=d(A),Je=a(A,"LI",{});var Kl=n(Je);xs=r(Kl,"a scheduler component, "),to=a(Kl,"A",{href:!0});var th=n(to);As=r(th,"scheduler"),th.forEach(t),Ss=r(Kl,","),Kl.forEach(t),$s=d(A),Ke=a(A,"LI",{});var Xl=n(Ke);Cs=r(Xl,"a "),Xe=a(Xl,"A",{href:!0,rel:!0});var oh=n(Xe);Os=r(oh,"CLIPFeatureExtractor"),oh.forEach(t),Gs=r(Xl,","),Xl.forEach(t),js=d(A),Ze=a(A,"LI",{});var Zl=n(Ze);Ms=r(Zl,"as well as a "),oo=a(Zl,"A",{href:!0});var ah=n(oo);Ls=r(ah,"safety checker"),ah.forEach(t),qs=r(Zl,`.
All of these components are necessary to run stable diffusion in inference even though they were trained
or created independently from each other.`),Zl.forEach(t),A.forEach(t),bl=d(l),ao=a(l,"P",{});var nh=n(ao);Ns=r(nh,`To that end, we strive to offer all open-sourced, state-of-the-art diffusion system under a unified API.
More specifically, we strive to provide pipelines that`),nh.forEach(t),El=d(l),D=a(l,"UL",{});var Se=n(D);sa=a(Se,"LI",{});var lh=n(sa);ra=a(lh,"OL",{});var sh=n(ra);M=a(sh,"LI",{});var $e=n(M);Rs=r($e,"can load the officially published weights and yield 1-to-1 the same outputs as the original implementation according to the corresponding paper ("),ia=a($e,"EM",{});var rh=n(ia);Hs=r(rh,"e.g."),rh.forEach(t),Bs=d($e),et=a($e,"A",{href:!0,rel:!0});var ih=n(et);Us=r(ih,"LatentDiffusionPipeline"),ih.forEach(t),Vs=r($e,", uses the officially released weights of "),tt=a($e,"A",{href:!0,rel:!0});var fh=n(tt);Ys=r(fh,"High-Resolution Image Synthesis with Latent Diffusion Models"),fh.forEach(t),zs=r($e,"),"),$e.forEach(t),sh.forEach(t),lh.forEach(t),Fs=d(Se),fa=a(Se,"LI",{});var dh=n(fa);no=a(dh,"OL",{start:!0});var ph=n(no);ot=a(ph,"LI",{});var es=n(ot);Ws=r(es,"have a simple user interface to run the model in inference (see the "),lo=a(es,"A",{href:!0});var hh=n(lo);Qs=r(hh,"Pipelines API"),hh.forEach(t),Js=r(es," section),"),es.forEach(t),ph.forEach(t),dh.forEach(t),Ks=d(Se),da=a(Se,"LI",{});var ch=n(da);so=a(ch,"OL",{start:!0});var uh=n(so);at=a(uh,"LI",{});var ts=n(at);Xs=r(ts,"are easy to understand with code that is self-explanatory and can be read along-side the official paper (see "),ro=a(ts,"A",{href:!0});var mh=n(ro);Zs=r(mh,"Pipelines summary"),mh.forEach(t),er=r(ts,"),"),ts.forEach(t),uh.forEach(t),ch.forEach(t),tr=d(Se),pa=a(Se,"LI",{});var gh=n(pa);io=a(gh,"OL",{start:!0});var vh=n(io);nt=a(vh,"LI",{});var os=n(nt);or=r(os,"can easily be contributed by the community (see the "),fo=a(os,"A",{href:!0});var _h=n(fo);ar=r(_h,"Contribution"),_h.forEach(t),nr=r(os," section)."),os.forEach(t),vh.forEach(t),gh.forEach(t),Se.forEach(t),yl=d(l),L=a(l,"P",{});var Wt=n(L);ha=a(Wt,"STRONG",{});var bh=n(ha);lr=r(bh,"Note"),bh.forEach(t),sr=r(Wt,` that pipelines do not (and should not) offer any training functionality.
If you are looking for `),ca=a(Wt,"EM",{});var Eh=n(ca);rr=r(Eh,"official"),Eh.forEach(t),ir=r(Wt," training examples, please have a look at "),lt=a(Wt,"A",{href:!0,rel:!0});var yh=n(lt);fr=r(yh,"examples"),yh.forEach(t),dr=r(Wt,"."),Wt.forEach(t),wl=d(l),ne=a(l,"H2",{class:!0});var as=n(ne);ve=a(as,"A",{id:!0,class:!0,href:!0});var wh=n(ve);ua=a(wh,"SPAN",{});var Ih=n(ua);$(st.$$.fragment,Ih),Ih.forEach(t),wh.forEach(t),pr=d(as),ma=a(as,"SPAN",{});var Dh=n(ma);hr=r(Dh,"\u{1F9E8} Diffusers Summary"),Dh.forEach(t),as.forEach(t),Il=d(l),po=a(l,"P",{});var kh=n(po);cr=r(kh,`The following table summarizes all officially supported pipelines, their corresponding paper, and if
available a colab notebook to directly try them out.`),kh.forEach(t),Dl=d(l),_e=a(l,"TABLE",{});var ns=n(_e);ga=a(ns,"THEAD",{});var Th=n(ga);q=a(Th,"TR",{});var Ce=n(q);va=a(Ce,"TH",{});var Ph=n(va);ur=r(Ph,"Pipeline"),Ph.forEach(t),mr=d(Ce),_a=a(Ce,"TH",{});var xh=n(_a);gr=r(xh,"Paper"),xh.forEach(t),vr=d(Ce),ho=a(Ce,"TH",{align:!0});var Ah=n(ho);_r=r(Ah,"Tasks"),Ah.forEach(t),br=d(Ce),co=a(Ce,"TH",{align:!0});var Sh=n(co);Er=r(Sh,"Colab"),Sh.forEach(t),Ce.forEach(t),Th.forEach(t),yr=d(ns),u=a(ns,"TBODY",{});var g=n(u);N=a(g,"TR",{});var Oe=n(N);ba=a(Oe,"TD",{});var $h=n(ba);uo=a($h,"A",{href:!0});var Ch=n(uo);wr=r(Ch,"ddpm"),Ch.forEach(t),$h.forEach(t),Ir=d(Oe),Ea=a(Oe,"TD",{});var Oh=n(Ea);rt=a(Oh,"A",{href:!0,rel:!0});var Gh=n(rt);ya=a(Gh,"STRONG",{});var jh=n(ya);Dr=r(jh,"Denoising Diffusion Probabilistic Models"),jh.forEach(t),Gh.forEach(t),Oh.forEach(t),kr=d(Oe),mo=a(Oe,"TD",{align:!0});var Mh=n(mo);Tr=r(Mh,"Unconditional Image Generation"),Mh.forEach(t),Pr=d(Oe),wa=a(Oe,"TD",{align:!0}),n(wa).forEach(t),Oe.forEach(t),xr=d(g),R=a(g,"TR",{});var Ge=n(R);Ia=a(Ge,"TD",{});var Lh=n(Ia);go=a(Lh,"A",{href:!0});var qh=n(go);Ar=r(qh,"ddim"),qh.forEach(t),Lh.forEach(t),Sr=d(Ge),Da=a(Ge,"TD",{});var Nh=n(Da);it=a(Nh,"A",{href:!0,rel:!0});var Rh=n(it);ka=a(Rh,"STRONG",{});var Hh=n(ka);$r=r(Hh,"Denoising Diffusion Implicit Models"),Hh.forEach(t),Rh.forEach(t),Nh.forEach(t),Cr=d(Ge),vo=a(Ge,"TD",{align:!0});var Bh=n(vo);Or=r(Bh,"Unconditional Image Generation"),Bh.forEach(t),Gr=d(Ge),_o=a(Ge,"TD",{align:!0});var Uh=n(_o);ft=a(Uh,"A",{href:!0,rel:!0});var Vh=n(ft);bo=a(Vh,"IMG",{src:!0,alt:!0}),Vh.forEach(t),Uh.forEach(t),Ge.forEach(t),jr=d(g),H=a(g,"TR",{});var je=n(H);Ta=a(je,"TD",{});var Yh=n(Ta);Eo=a(Yh,"A",{href:!0});var zh=n(Eo);Mr=r(zh,"latent_diffusion"),zh.forEach(t),Yh.forEach(t),Lr=d(je),Pa=a(je,"TD",{});var Fh=n(Pa);dt=a(Fh,"A",{href:!0,rel:!0});var Wh=n(dt);xa=a(Wh,"STRONG",{});var Qh=n(xa);qr=r(Qh,"High-Resolution Image Synthesis with Latent Diffusion Models"),Qh.forEach(t),Wh.forEach(t),Fh.forEach(t),Nr=d(je),yo=a(je,"TD",{align:!0});var Jh=n(yo);Rr=r(Jh,"Text-to-Image Generation"),Jh.forEach(t),Hr=d(je),Aa=a(je,"TD",{align:!0}),n(Aa).forEach(t),je.forEach(t),Br=d(g),B=a(g,"TR",{});var Me=n(B);Sa=a(Me,"TD",{});var Kh=n(Sa);wo=a(Kh,"A",{href:!0});var Xh=n(wo);Ur=r(Xh,"latent_diffusion_uncond"),Xh.forEach(t),Kh.forEach(t),Vr=d(Me),$a=a(Me,"TD",{});var Zh=n($a);pt=a(Zh,"A",{href:!0,rel:!0});var ec=n(pt);Ca=a(ec,"STRONG",{});var tc=n(Ca);Yr=r(tc,"High-Resolution Image Synthesis with Latent Diffusion Models"),tc.forEach(t),ec.forEach(t),Zh.forEach(t),zr=d(Me),Io=a(Me,"TD",{align:!0});var oc=n(Io);Fr=r(oc,"Unconditional Image Generation"),oc.forEach(t),Wr=d(Me),Oa=a(Me,"TD",{align:!0}),n(Oa).forEach(t),Me.forEach(t),Qr=d(g),U=a(g,"TR",{});var Le=n(U);Ga=a(Le,"TD",{});var ac=n(Ga);Do=a(ac,"A",{href:!0});var nc=n(Do);Jr=r(nc,"pndm"),nc.forEach(t),ac.forEach(t),Kr=d(Le),ja=a(Le,"TD",{});var lc=n(ja);ht=a(lc,"A",{href:!0,rel:!0});var sc=n(ht);Ma=a(sc,"STRONG",{});var rc=n(Ma);Xr=r(rc,"Pseudo Numerical Methods for Diffusion Models on Manifolds"),rc.forEach(t),sc.forEach(t),lc.forEach(t),Zr=d(Le),ko=a(Le,"TD",{align:!0});var ic=n(ko);ei=r(ic,"Unconditional Image Generation"),ic.forEach(t),ti=d(Le),La=a(Le,"TD",{align:!0}),n(La).forEach(t),Le.forEach(t),oi=d(g),V=a(g,"TR",{});var qe=n(V);qa=a(qe,"TD",{});var fc=n(qa);To=a(fc,"A",{href:!0});var dc=n(To);ai=r(dc,"score_sde_ve"),dc.forEach(t),fc.forEach(t),ni=d(qe),Na=a(qe,"TD",{});var pc=n(Na);ct=a(pc,"A",{href:!0,rel:!0});var hc=n(ct);Ra=a(hc,"STRONG",{});var cc=n(Ra);li=r(cc,"Score-Based Generative Modeling through Stochastic Differential Equations"),cc.forEach(t),hc.forEach(t),pc.forEach(t),si=d(qe),Po=a(qe,"TD",{align:!0});var uc=n(Po);ri=r(uc,"Unconditional Image Generation"),uc.forEach(t),ii=d(qe),Ha=a(qe,"TD",{align:!0}),n(Ha).forEach(t),qe.forEach(t),fi=d(g),Y=a(g,"TR",{});var Ne=n(Y);Ba=a(Ne,"TD",{});var mc=n(Ba);xo=a(mc,"A",{href:!0});var gc=n(xo);di=r(gc,"score_sde_vp"),gc.forEach(t),mc.forEach(t),pi=d(Ne),Ua=a(Ne,"TD",{});var vc=n(Ua);ut=a(vc,"A",{href:!0,rel:!0});var _c=n(ut);Va=a(_c,"STRONG",{});var bc=n(Va);hi=r(bc,"Score-Based Generative Modeling through Stochastic Differential Equations"),bc.forEach(t),_c.forEach(t),vc.forEach(t),ci=d(Ne),Ao=a(Ne,"TD",{align:!0});var Ec=n(Ao);ui=r(Ec,"Unconditional Image Generation"),Ec.forEach(t),mi=d(Ne),Ya=a(Ne,"TD",{align:!0}),n(Ya).forEach(t),Ne.forEach(t),gi=d(g),z=a(g,"TR",{});var Re=n(z);za=a(Re,"TD",{});var yc=n(za);So=a(yc,"A",{href:!0});var wc=n(So);vi=r(wc,"stable_diffusion"),wc.forEach(t),yc.forEach(t),_i=d(Re),Fa=a(Re,"TD",{});var Ic=n(Fa);mt=a(Ic,"A",{href:!0,rel:!0});var Dc=n(mt);Wa=a(Dc,"STRONG",{});var kc=n(Wa);bi=r(kc,"Stable Diffusion"),kc.forEach(t),Dc.forEach(t),Ic.forEach(t),Ei=d(Re),$o=a(Re,"TD",{align:!0});var Tc=n($o);yi=r(Tc,"Text-to-Image Generation"),Tc.forEach(t),wi=d(Re),Co=a(Re,"TD",{align:!0});var Pc=n(Co);gt=a(Pc,"A",{href:!0,rel:!0});var xc=n(gt);Oo=a(xc,"IMG",{src:!0,alt:!0}),xc.forEach(t),Pc.forEach(t),Re.forEach(t),Ii=d(g),F=a(g,"TR",{});var He=n(F);Qa=a(He,"TD",{});var Ac=n(Qa);Go=a(Ac,"A",{href:!0});var Sc=n(Go);Di=r(Sc,"stable_diffusion"),Sc.forEach(t),Ac.forEach(t),ki=d(He),Ja=a(He,"TD",{});var $c=n(Ja);vt=a($c,"A",{href:!0,rel:!0});var Cc=n(vt);Ka=a(Cc,"STRONG",{});var Oc=n(Ka);Ti=r(Oc,"Stable Diffusion"),Oc.forEach(t),Cc.forEach(t),$c.forEach(t),Pi=d(He),jo=a(He,"TD",{align:!0});var Gc=n(jo);xi=r(Gc,"Image-to-Image Text-Guided Generation"),Gc.forEach(t),Ai=d(He),Mo=a(He,"TD",{align:!0});var jc=n(Mo);_t=a(jc,"A",{href:!0,rel:!0});var Mc=n(_t);Lo=a(Mc,"IMG",{src:!0,alt:!0}),Mc.forEach(t),jc.forEach(t),He.forEach(t),Si=d(g),W=a(g,"TR",{});var Be=n(W);Xa=a(Be,"TD",{});var Lc=n(Xa);qo=a(Lc,"A",{href:!0});var qc=n(qo);$i=r(qc,"stable_diffusion"),qc.forEach(t),Lc.forEach(t),Ci=d(Be),Za=a(Be,"TD",{});var Nc=n(Za);bt=a(Nc,"A",{href:!0,rel:!0});var Rc=n(bt);en=a(Rc,"STRONG",{});var Hc=n(en);Oi=r(Hc,"Stable Diffusion"),Hc.forEach(t),Rc.forEach(t),Nc.forEach(t),Gi=d(Be),No=a(Be,"TD",{align:!0});var Bc=n(No);ji=r(Bc,"Text-Guided Image Inpainting"),Bc.forEach(t),Mi=d(Be),Ro=a(Be,"TD",{align:!0});var Uc=n(Ro);Et=a(Uc,"A",{href:!0,rel:!0});var Vc=n(Et);Ho=a(Vc,"IMG",{src:!0,alt:!0}),Vc.forEach(t),Uc.forEach(t),Be.forEach(t),Li=d(g),Q=a(g,"TR",{});var Ue=n(Q);tn=a(Ue,"TD",{});var Yc=n(tn);Bo=a(Yc,"A",{href:!0});var zc=n(Bo);qi=r(zc,"stochastic_karras_ve"),zc.forEach(t),Yc.forEach(t),Ni=d(Ue),on=a(Ue,"TD",{});var Fc=n(on);yt=a(Fc,"A",{href:!0,rel:!0});var Wc=n(yt);an=a(Wc,"STRONG",{});var Qc=n(an);Ri=r(Qc,"Elucidating the Design Space of Diffusion-Based Generative Models"),Qc.forEach(t),Wc.forEach(t),Fc.forEach(t),Hi=d(Ue),Uo=a(Ue,"TD",{align:!0});var Jc=n(Uo);Bi=r(Jc,"Unconditional Image Generation"),Jc.forEach(t),Ui=d(Ue),nn=a(Ue,"TD",{align:!0}),n(nn).forEach(t),Ue.forEach(t),g.forEach(t),ns.forEach(t),kl=d(l),wt=a(l,"P",{});var Sp=n(wt);ln=a(Sp,"STRONG",{});var Kc=n(ln);Vi=r(Kc,"Note"),Kc.forEach(t),Yi=r(Sp,": Pipelines are simple examples of how to play around with the diffusion systems as described in the corresponding papers."),Sp.forEach(t),Tl=d(l),be=a(l,"P",{});var ls=n(be);zi=r(ls,"However, most of them can be adapted to use different scheduler components or even different model components. Some pipeline examples are shown in the "),Vo=a(ls,"A",{href:!0});var Xc=n(Vo);Fi=r(Xc,"Examples"),Xc.forEach(t),Wi=r(ls," below."),ls.forEach(t),Pl=d(l),le=a(l,"H2",{class:!0});var ss=n(le);Ee=a(ss,"A",{id:!0,class:!0,href:!0});var Zc=n(Ee);sn=a(Zc,"SPAN",{});var eu=n(sn);$(It.$$.fragment,eu),eu.forEach(t),Zc.forEach(t),Qi=d(ss),rn=a(ss,"SPAN",{});var tu=n(rn);Ji=r(tu,"Pipelines API"),tu.forEach(t),ss.forEach(t),xl=d(l),Yo=a(l,"P",{});var ou=n(Yo);Ki=r(ou,"Diffusion models often consist of multiple independently-trained models or other previously existing components."),ou.forEach(t),Al=d(l),K=a(l,"P",{});var Zo=n(K);Xi=r(Zo,`Each model has been trained independently on a different task and the scheduler can easily be swapped out and replaced with a different one.
During inference, we however want to be able to easily load all components and use them in inference - even if one component, `),fn=a(Zo,"EM",{});var au=n(fn);Zi=r(au,"e.g."),au.forEach(t),ef=r(Zo," CLIP\u2019s text encoder, originates from a different library, such as "),Dt=a(Zo,"A",{href:!0,rel:!0});var nu=n(Dt);tf=r(nu,"Transformers"),nu.forEach(t),of=r(Zo,". To that end, all pipelines provide the following functionality:"),Zo.forEach(t),Sl=d(l),k=a(l,"UL",{});var Ve=n(k);c=a(Ve,"LI",{});var m=n(c);kt=a(m,"A",{href:!0});var $p=n(kt);dn=a($p,"CODE",{});var lu=n(dn);af=r(lu,"from_pretrained"),lu.forEach(t),nf=r($p," method"),$p.forEach(t),lf=r(m," that accepts a Hugging Face Hub repository id, "),pn=a(m,"EM",{});var su=n(pn);sf=r(su,"e.g."),su.forEach(t),rf=d(m),Tt=a(m,"A",{href:!0,rel:!0});var ru=n(Tt);ff=r(ru,"CompVis/stable-diffusion-v1-4"),ru.forEach(t),df=r(m," or a path to a local directory, "),hn=a(m,"EM",{});var iu=n(hn);pf=r(iu,"e.g."),iu.forEach(t),hf=r(m,`
\u201D./stable-diffusion\u201D. To correctly retrieve which models and components should be loaded, one has to provide a `),cn=a(m,"CODE",{});var fu=n(cn);cf=r(fu,"model_index.json"),fu.forEach(t),uf=r(m," file, "),un=a(m,"EM",{});var du=n(un);mf=r(du,"e.g."),du.forEach(t),gf=d(m),Pt=a(m,"A",{href:!0,rel:!0});var pu=n(Pt);vf=r(pu,"CompVis/stable-diffusion-v1-4/model_index.json"),pu.forEach(t),_f=r(m,`, which defines all components that should be
loaded into the pipelines. More specifically, for each model/component one needs to define the format `),mn=a(m,"CODE",{});var hu=n(mn);bf=r(hu,'<name>: ["<library>", "<class name>"]'),hu.forEach(t),Ef=r(m,". "),gn=a(m,"CODE",{});var cu=n(gn);yf=r(cu,"<name>"),cu.forEach(t),wf=r(m," is the attribute name given to the loaded instance of "),vn=a(m,"CODE",{});var uu=n(vn);If=r(uu,"<class name>"),uu.forEach(t),Df=r(m," which can be found in the library or pipeline folder called "),_n=a(m,"CODE",{});var mu=n(_n);kf=r(mu,'"<library>"'),mu.forEach(t),Tf=r(m,"."),m.forEach(t),Pf=d(Ve),v=a(Ve,"LI",{});var _=n(v);zo=a(_,"A",{href:!0});var gu=n(zo);bn=a(gu,"CODE",{});var vu=n(bn);xf=r(vu,"save_pretrained"),vu.forEach(t),gu.forEach(t),Af=r(_," that accepts a local path, "),En=a(_,"EM",{});var _u=n(En);Sf=r(_u,"e.g."),_u.forEach(t),$f=d(_),yn=a(_,"CODE",{});var bu=n(yn);Cf=r(bu,"./stable-diffusion"),bu.forEach(t),Of=r(_," under which all models/components of the pipeline will be saved. For each component/model a folder is created inside the local path that is named after the given attribute name, "),wn=a(_,"EM",{});var Eu=n(wn);Gf=r(Eu,"e.g."),Eu.forEach(t),jf=d(_),In=a(_,"CODE",{});var yu=n(In);Mf=r(yu,"./stable_diffusion/unet"),yu.forEach(t),Lf=r(_,`.
In addition, a `),Dn=a(_,"CODE",{});var wu=n(Dn);qf=r(wu,"model_index.json"),wu.forEach(t),Nf=r(_," file is created at the root of the local path, "),kn=a(_,"EM",{});var Iu=n(kn);Rf=r(Iu,"e.g."),Iu.forEach(t),Hf=d(_),Tn=a(_,"CODE",{});var Du=n(Tn);Bf=r(Du,"./stable_diffusion/model_index.json"),Du.forEach(t),Uf=r(_,` so that the complete pipeline can again be instantiated
from the local path.`),_.forEach(t),Vf=d(Ve),y=a(Ve,"LI",{});var J=n(y);Fo=a(J,"A",{href:!0});var ku=n(Fo);Pn=a(ku,"CODE",{});var Tu=n(Pn);Yf=r(Tu,"to"),Tu.forEach(t),ku.forEach(t),zf=r(J," which accepts a "),xn=a(J,"CODE",{});var Pu=n(xn);Ff=r(Pu,"string"),Pu.forEach(t),Wf=r(J," or "),An=a(J,"CODE",{});var xu=n(An);Qf=r(xu,"torch.device"),xu.forEach(t),Jf=r(J," to move all models that are of type "),Sn=a(J,"CODE",{});var Au=n(Sn);Kf=r(Au,"torch.nn.Module"),Au.forEach(t),Xf=r(J," to the passed device. The behavior is fully analogous to "),se=a(J,"A",{href:!0,rel:!0});var rs=n(se);Zf=r(rs,"PyTorch\u2019s "),$n=a(rs,"CODE",{});var Su=n($n);ed=r(Su,"to"),Su.forEach(t),td=r(rs," method"),rs.forEach(t),od=r(J,"."),J.forEach(t),ad=d(Ve),E=a(Ve,"LI",{});var I=n(E);Cn=a(I,"CODE",{});var $u=n(Cn);nd=r($u,"__call__"),$u.forEach(t),ld=r(I," method to use the pipeline in inference. "),On=a(I,"CODE",{});var Cu=n(On);sd=r(Cu,"__call__"),Cu.forEach(t),rd=r(I," defines inference logic of the pipeline and should ideally encompass all aspects of it, from pre-processing to forwarding tensors to the different models and schedulers, as well as post-processing. The API of the "),Gn=a(I,"CODE",{});var Ou=n(Gn);id=r(Ou,"__call__"),Ou.forEach(t),fd=r(I," method can strongly vary from pipeline to pipeline. "),jn=a(I,"EM",{});var Gu=n(jn);dd=r(Gu,"E.g."),Gu.forEach(t),pd=r(I," a text-to-image pipeline, such as "),Wo=a(I,"A",{href:!0});var ju=n(Wo);Mn=a(ju,"CODE",{});var Mu=n(Mn);hd=r(Mu,"StableDiffusionPipeline"),Mu.forEach(t),ju.forEach(t),cd=r(I," should accept among other things the text prompt to generate the image. A pure image generation pipeline, such as "),xt=a(I,"A",{href:!0,rel:!0});var Lu=n(xt);ud=r(Lu,"DDPMPipeline"),Lu.forEach(t),md=r(I,` on the other hand can be run without providing any inputs. To better understand what inputs can be adapted for
each pipeline, one should look directly into the respective pipeline.`),I.forEach(t),Ve.forEach(t),$l=d(l),T=a(l,"P",{});var Ye=n(T);Ln=a(Ye,"STRONG",{});var qu=n(Ln);gd=r(qu,"Note"),qu.forEach(t),vd=r(Ye,": All pipelines have PyTorch\u2019s autograd disabled by decorating the "),qn=a(Ye,"CODE",{});var Nu=n(qn);_d=r(Nu,"__call__"),Nu.forEach(t),bd=r(Ye," method with a "),At=a(Ye,"A",{href:!0,rel:!0});var Ru=n(At);Nn=a(Ru,"CODE",{});var Hu=n(Nn);Ed=r(Hu,"torch.no_grad"),Hu.forEach(t),Ru.forEach(t),yd=r(Ye,` decorator because pipelines should
not be used for training. If you want to store the gradients during the forward pass, we recommend writing your own pipeline, see also our `),St=a(Ye,"A",{href:!0,rel:!0});var Bu=n(St);wd=r(Bu,"community-examples"),Bu.forEach(t),Ye.forEach(t),Cl=d(l),re=a(l,"H2",{class:!0});var is=n(re);ye=a(is,"A",{id:!0,class:!0,href:!0});var Uu=n(ye);Rn=a(Uu,"SPAN",{});var Vu=n(Rn);$($t.$$.fragment,Vu),Vu.forEach(t),Uu.forEach(t),Id=d(is),Hn=a(is,"SPAN",{});var Yu=n(Hn);Dd=r(Yu,"Contribution"),Yu.forEach(t),is.forEach(t),Ol=d(l),w=a(l,"P",{});var te=n(w);kd=r(te,`We are more than happy about any contribution to the officially supported pipelines \u{1F917}. We aspire
all of our pipelines to be  `),Bn=a(te,"STRONG",{});var zu=n(Bn);Td=r(zu,"self-contained"),zu.forEach(t),Pd=r(te,", "),Un=a(te,"STRONG",{});var Fu=n(Un);xd=r(Fu,"easy-to-tweak"),Fu.forEach(t),Ad=r(te,", "),Vn=a(te,"STRONG",{});var Wu=n(Vn);Sd=r(Wu,"beginner-friendly"),Wu.forEach(t),$d=r(te," and for "),Yn=a(te,"STRONG",{});var Qu=n(Yn);Cd=r(Qu,"one-purpose-only"),Qu.forEach(t),Od=r(te,"."),te.forEach(t),Gl=d(l),P=a(l,"UL",{});var ze=n(P);we=a(ze,"LI",{});var ul=n(we);zn=a(ul,"STRONG",{});var Ju=n(zn);Gd=r(Ju,"Self-contained"),Ju.forEach(t),jd=r(ul,": A pipeline shall be as self-contained as possible. More specifically, this means that all functionality should be either directly defined in the pipeline file itself, should be inherited from (and only from) the "),Ct=a(ul,"A",{href:!0});var Cp=n(Ct);Fn=a(Cp,"CODE",{});var Ku=n(Fn);Md=r(Ku,"DiffusionPipeline"),Ku.forEach(t),Ld=r(Cp," class"),Cp.forEach(t),qd=r(ul," or be directly attached to the model and scheduler components of the pipeline."),ul.forEach(t),Nd=d(ze),X=a(ze,"LI",{});var Qt=n(X);Wn=a(Qt,"STRONG",{});var Xu=n(Wn);Rd=r(Xu,"Easy-to-use"),Xu.forEach(t),Hd=r(Qt,`: Pipelines should be extremely easy to use - one should be able to load the pipeline and
use it for its designated task, `),Qn=a(Qt,"EM",{});var Zu=n(Qn);Bd=r(Zu,"e.g."),Zu.forEach(t),Ud=r(Qt,` text-to-image generation, in just a couple of lines of code. Most
logic including pre-processing, an unrolled diffusion loop, and post-processing should all happen inside the `),Jn=a(Qt,"CODE",{});var em=n(Jn);Vd=r(em,"__call__"),em.forEach(t),Yd=r(Qt," method."),Qt.forEach(t),zd=d(ze),Z=a(ze,"LI",{});var Jt=n(Z);Kn=a(Jt,"STRONG",{});var tm=n(Kn);Fd=r(tm,"Easy-to-tweak"),tm.forEach(t),Wd=r(Jt,": Certain pipelines will not be able to handle all use cases and tasks that you might like them to. If you want to use a certain pipeline for a specific use case that is not yet supported, you might have to copy the pipeline file and tweak the code to your needs. We try to make the pipeline code as readable as possible so that each part \u2013from pre-processing to diffusing to post-processing\u2013 can easily be adapted. If you would like the community to benefit from your customized pipeline, we would love to see a contribution to our "),Ot=a(Jt,"A",{href:!0,rel:!0});var om=n(Ot);Qd=r(om,"community-examples"),om.forEach(t),Jd=r(Jt,". If you feel that an important pipeline should be part of the official pipelines but isn\u2019t, a contribution to the "),Qo=a(Jt,"A",{href:!0});var am=n(Qo);Kd=r(am,"official pipelines"),am.forEach(t),Xd=r(Jt," would be even better."),Jt.forEach(t),Zd=d(ze),x=a(ze,"LI",{});var ce=n(x);Xn=a(ce,"STRONG",{});var nm=n(Xn);ep=r(nm,"One-purpose-only"),nm.forEach(t),tp=r(ce,": Pipelines should be used for one task and one task only. Even if two tasks are very similar from a modeling point of view, "),Zn=a(ce,"EM",{});var lm=n(Zn);op=r(lm,"e.g."),lm.forEach(t),ap=r(ce," image2image translation and in-painting, pipelines shall be used for one task only to keep them "),el=a(ce,"EM",{});var sm=n(el);np=r(sm,"easy-to-tweak"),sm.forEach(t),lp=r(ce," and "),tl=a(ce,"EM",{});var rm=n(tl);sp=r(rm,"readable"),rm.forEach(t),rp=r(ce,"."),ce.forEach(t),ze.forEach(t),jl=d(l),ie=a(l,"H2",{class:!0});var fs=n(ie);Ie=a(fs,"A",{id:!0,class:!0,href:!0});var im=n(Ie);ol=a(im,"SPAN",{});var fm=n(ol);$(Gt.$$.fragment,fm),fm.forEach(t),im.forEach(t),ip=d(fs),al=a(fs,"SPAN",{});var dm=n(al);fp=r(dm,"Examples"),dm.forEach(t),fs.forEach(t),Ml=d(l),fe=a(l,"H3",{class:!0});var ds=n(fe);De=a(ds,"A",{id:!0,class:!0,href:!0});var pm=n(De);nl=a(pm,"SPAN",{});var hm=n(nl);$(jt.$$.fragment,hm),hm.forEach(t),pm.forEach(t),dp=d(ds),ll=a(ds,"SPAN",{});var cm=n(ll);pp=r(cm,"Text-to-Image generation with Stable Diffusion"),cm.forEach(t),ds.forEach(t),Ll=d(l),$(Mt.$$.fragment,l),ql=d(l),de=a(l,"H3",{class:!0});var ps=n(de);ke=a(ps,"A",{id:!0,class:!0,href:!0});var um=n(ke);sl=a(um,"SPAN",{});var mm=n(sl);$(Lt.$$.fragment,mm),mm.forEach(t),um.forEach(t),hp=d(ps),rl=a(ps,"SPAN",{});var gm=n(rl);cp=r(gm,"Image-to-Image text-guided generation with Stable Diffusion"),gm.forEach(t),ps.forEach(t),Nl=d(l),Te=a(l,"P",{});var hs=n(Te);up=r(hs,"The "),il=a(hs,"CODE",{});var vm=n(il);mp=r(vm,"StableDiffusionImg2ImgPipeline"),vm.forEach(t),gp=r(hs," lets you pass a text prompt and an initial image to condition the generation of new images."),hs.forEach(t),Rl=d(l),$(qt.$$.fragment,l),Hl=d(l),Nt=a(l,"P",{});var Op=n(Nt);vp=r(Op,"You can also run this example on colab "),Rt=a(Op,"A",{href:!0,rel:!0});var _m=n(Rt);Jo=a(_m,"IMG",{src:!0,alt:!0}),_m.forEach(t),Op.forEach(t),Bl=d(l),pe=a(l,"H3",{class:!0});var cs=n(pe);Pe=a(cs,"A",{id:!0,class:!0,href:!0});var bm=n(Pe);fl=a(bm,"SPAN",{});var Em=n(fl);$(Ht.$$.fragment,Em),Em.forEach(t),bm.forEach(t),_p=d(cs),dl=a(cs,"SPAN",{});var ym=n(dl);bp=r(ym,"Tweak prompts reusing seeds and latents"),ym.forEach(t),cs.forEach(t),Ul=d(l),ee=a(l,"P",{});var ea=n(ee);Ep=r(ea,"You can generate your own latents to reproduce results, or tweak your prompt on a specific result you liked. "),Bt=a(ea,"A",{href:!0,rel:!0});var wm=n(Bt);yp=r(wm,"This notebook"),wm.forEach(t),wp=r(ea," shows how to do it step by step. You can also run it in Google Colab "),Ut=a(ea,"A",{href:!0,rel:!0});var Im=n(Ut);Ko=a(Im,"IMG",{src:!0,alt:!0}),Im.forEach(t),Ip=r(ea,"."),ea.forEach(t),Vl=d(l),he=a(l,"H3",{class:!0});var us=n(he);xe=a(us,"A",{id:!0,class:!0,href:!0});var Dm=n(xe);pl=a(Dm,"SPAN",{});var km=n(pl);$(Vt.$$.fragment,km),km.forEach(t),Dm.forEach(t),Dp=d(us),hl=a(us,"SPAN",{});var Tm=n(hl);kp=r(Tm,"In-painting using Stable Diffusion"),Tm.forEach(t),us.forEach(t),Yl=d(l),Ae=a(l,"P",{});var ms=n(Ae);Tp=r(ms,"The "),cl=a(ms,"CODE",{});var Pm=n(cl);Pp=r(Pm,"StableDiffusionInpaintPipeline"),Pm.forEach(t),xp=r(ms," lets you edit specific parts of an image by providing a mask and text prompt."),ms.forEach(t),zl=d(l),$(Yt.$$.fragment,l),Fl=d(l),zt=a(l,"P",{});var Gp=n(zt);Ap=r(Gp,"You can also run this example on colab "),Ft=a(Gp,"A",{href:!0,rel:!0});var xm=n(Ft);Xo=a(xm,"IMG",{src:!0,alt:!0}),xm.forEach(t),Gp.forEach(t),this.h()},h(){i(oe,"name","hf:doc:metadata"),i(oe,"content",JSON.stringify(Mm)),i(me,"id","pipelines"),i(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(me,"href","#pipelines"),i(ae,"class","relative group"),i(We,"href","https://huggingface.co/blog/stable_diffusion"),i(We,"rel","nofollow"),i(Zt,"href","./api/models#vae"),i(eo,"href","./api/models#UNet2DConditionModel"),i(Qe,"href","https://huggingface.co/docs/transformers/v4.21.2/en/model_doc/clip#transformers.CLIPTextModel"),i(Qe,"rel","nofollow"),i(to,"href","./api/scheduler#pndm"),i(Xe,"href","https://huggingface.co/docs/transformers/v4.21.2/en/model_doc/clip#transformers.CLIPFeatureExtractor"),i(Xe,"rel","nofollow"),i(oo,"href","./stable_diffusion#safety_checker"),i(et,"href","https://github.com/huggingface/diffusers/tree/main/src/diffusers/pipelines/latent_diffusion"),i(et,"rel","nofollow"),i(tt,"href","https://arxiv.org/abs/2112.10752"),i(tt,"rel","nofollow"),i(lo,"href","#pipelines-api"),i(no,"start","2"),i(ro,"href","#pipelines-summary"),i(so,"start","3"),i(fo,"href","#contribution"),i(io,"start","4"),i(lt,"href","https://github.com/huggingface/diffusers/tree/main/examples"),i(lt,"rel","nofollow"),i(ve,"id","diffusers-summary"),i(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ve,"href","#diffusers-summary"),i(ne,"class","relative group"),i(ho,"align","center"),i(co,"align","center"),i(uo,"href","./ddpm"),i(rt,"href","https://arxiv.org/abs/2006.11239"),i(rt,"rel","nofollow"),i(mo,"align","center"),i(wa,"align","center"),i(go,"href","./ddim"),i(it,"href","https://arxiv.org/abs/2010.02502"),i(it,"rel","nofollow"),i(vo,"align","center"),Kt(bo.src,Lp="https://colab.research.google.com/assets/colab-badge.svg")||i(bo,"src",Lp),i(bo,"alt","Open In Colab"),i(ft,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb"),i(ft,"rel","nofollow"),i(_o,"align","center"),i(Eo,"href","./latent_diffusion"),i(dt,"href","https://arxiv.org/abs/2112.10752"),i(dt,"rel","nofollow"),i(yo,"align","center"),i(Aa,"align","center"),i(wo,"href","./latent_diffusion_uncond"),i(pt,"href","https://arxiv.org/abs/2112.10752"),i(pt,"rel","nofollow"),i(Io,"align","center"),i(Oa,"align","center"),i(Do,"href","./pndm"),i(ht,"href","https://arxiv.org/abs/2202.09778"),i(ht,"rel","nofollow"),i(ko,"align","center"),i(La,"align","center"),i(To,"href","./score_sde_ve"),i(ct,"href","https://openreview.net/forum?id=PxTIG12RRHS"),i(ct,"rel","nofollow"),i(Po,"align","center"),i(Ha,"align","center"),i(xo,"href","./score_sde_vp"),i(ut,"href","https://openreview.net/forum?id=PxTIG12RRHS"),i(ut,"rel","nofollow"),i(Ao,"align","center"),i(Ya,"align","center"),i(So,"href","./stable_diffusion"),i(mt,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(mt,"rel","nofollow"),i($o,"align","center"),Kt(Oo.src,qp="https://colab.research.google.com/assets/colab-badge.svg")||i(Oo,"src",qp),i(Oo,"alt","Open In Colab"),i(gt,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb"),i(gt,"rel","nofollow"),i(Co,"align","center"),i(Go,"href","./stable_diffusion"),i(vt,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(vt,"rel","nofollow"),i(jo,"align","center"),Kt(Lo.src,Np="https://colab.research.google.com/assets/colab-badge.svg")||i(Lo,"src",Np),i(Lo,"alt","Open In Colab"),i(_t,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/image_2_image_using_diffusers.ipynb"),i(_t,"rel","nofollow"),i(Mo,"align","center"),i(qo,"href","./stable_diffusion"),i(bt,"href","https://stability.ai/blog/stable-diffusion-public-release"),i(bt,"rel","nofollow"),i(No,"align","center"),Kt(Ho.src,Rp="https://colab.research.google.com/assets/colab-badge.svg")||i(Ho,"src",Rp),i(Ho,"alt","Open In Colab"),i(Et,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/in_painting_with_stable_diffusion_using_diffusers.ipynb"),i(Et,"rel","nofollow"),i(Ro,"align","center"),i(Bo,"href","./stochastic_karras_ve"),i(yt,"href","https://arxiv.org/abs/2206.00364"),i(yt,"rel","nofollow"),i(Uo,"align","center"),i(nn,"align","center"),i(Vo,"href","#examples"),i(Ee,"id","pipelines-api"),i(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ee,"href","#pipelines-api"),i(le,"class","relative group"),i(Dt,"href","https://github.com/huggingface/transformers"),i(Dt,"rel","nofollow"),i(kt,"href","../diffusion_pipeline"),i(Tt,"href","https://huggingface.co/CompVis/stable-diffusion-v1-4"),i(Tt,"rel","nofollow"),i(Pt,"href","https://huggingface.co/CompVis/stable-diffusion-v1-4/blob/main/model_index.json"),i(Pt,"rel","nofollow"),i(zo,"href","../diffusion_pipeline"),i(Fo,"href","../diffusion_pipeline"),i(se,"href","https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module.to"),i(se,"rel","nofollow"),i(Wo,"href","./stable_diffusion"),i(xt,"href","https://github.com/huggingface/diffusers/tree/main/src/diffusers/pipelines/ddpm"),i(xt,"rel","nofollow"),i(At,"href","https://pytorch.org/docs/stable/generated/torch.no_grad.html"),i(At,"rel","nofollow"),i(St,"href","https://github.com/huggingface/diffusers/tree/main/examples/community"),i(St,"rel","nofollow"),i(ye,"id","contribution"),i(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ye,"href","#contribution"),i(re,"class","relative group"),i(Ct,"href",".../diffusion_pipeline"),i(Ot,"href","https://github.com/huggingface/diffusers/tree/main/examples/community"),i(Ot,"rel","nofollow"),i(Qo,"href","./overview"),i(Ie,"id","examples"),i(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Ie,"href","#examples"),i(ie,"class","relative group"),i(De,"id","texttoimage-generation-with-stable-diffusion"),i(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(De,"href","#texttoimage-generation-with-stable-diffusion"),i(fe,"class","relative group"),i(ke,"id","imagetoimage-textguided-generation-with-stable-diffusion"),i(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(ke,"href","#imagetoimage-textguided-generation-with-stable-diffusion"),i(de,"class","relative group"),Kt(Jo.src,Hp="https://colab.research.google.com/assets/colab-badge.svg")||i(Jo,"src",Hp),i(Jo,"alt","Open In Colab"),i(Rt,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/image_2_image_using_diffusers.ipynb"),i(Rt,"rel","nofollow"),i(Pe,"id","tweak-prompts-reusing-seeds-and-latents"),i(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(Pe,"href","#tweak-prompts-reusing-seeds-and-latents"),i(pe,"class","relative group"),i(Bt,"href","https://github.com/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb"),i(Bt,"rel","nofollow"),Kt(Ko.src,Bp="https://colab.research.google.com/assets/colab-badge.svg")||i(Ko,"src",Bp),i(Ko,"alt","Open In Colab"),i(Ut,"href","https://colab.research.google.com/github/pcuenca/diffusers-examples/blob/main/notebooks/stable-diffusion-seeds.ipynb"),i(Ut,"rel","nofollow"),i(xe,"id","inpainting-using-stable-diffusion"),i(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),i(xe,"href","#inpainting-using-stable-diffusion"),i(he,"class","relative group"),Kt(Xo.src,Up="https://colab.research.google.com/assets/colab-badge.svg")||i(Xo,"src",Up),i(Xo,"alt","Open In Colab"),i(Ft,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/in_painting_with_stable_diffusion_using_diffusers.ipynb"),i(Ft,"rel","nofollow")},m(l,p){e(document.head,oe),h(l,ml,p),h(l,ae,p),e(ae,me),e(me,ta),C(Fe,ta,null),e(ae,gs),e(ae,oa),e(oa,vs),h(l,gl,p),h(l,Xt,p),e(Xt,_s),h(l,vl,p),h(l,ge,p),e(ge,bs),e(ge,We),e(We,Es),e(ge,ys),h(l,_l,p),h(l,b,p),e(b,aa),e(aa,Zt),e(Zt,ws),e(b,Is),e(b,na),e(na,eo),e(eo,Ds),e(b,ks),e(b,la),e(la,Qe),e(Qe,Ts),e(b,Ps),e(b,Je),e(Je,xs),e(Je,to),e(to,As),e(Je,Ss),e(b,$s),e(b,Ke),e(Ke,Cs),e(Ke,Xe),e(Xe,Os),e(Ke,Gs),e(b,js),e(b,Ze),e(Ze,Ms),e(Ze,oo),e(oo,Ls),e(Ze,qs),h(l,bl,p),h(l,ao,p),e(ao,Ns),h(l,El,p),h(l,D,p),e(D,sa),e(sa,ra),e(ra,M),e(M,Rs),e(M,ia),e(ia,Hs),e(M,Bs),e(M,et),e(et,Us),e(M,Vs),e(M,tt),e(tt,Ys),e(M,zs),e(D,Fs),e(D,fa),e(fa,no),e(no,ot),e(ot,Ws),e(ot,lo),e(lo,Qs),e(ot,Js),e(D,Ks),e(D,da),e(da,so),e(so,at),e(at,Xs),e(at,ro),e(ro,Zs),e(at,er),e(D,tr),e(D,pa),e(pa,io),e(io,nt),e(nt,or),e(nt,fo),e(fo,ar),e(nt,nr),h(l,yl,p),h(l,L,p),e(L,ha),e(ha,lr),e(L,sr),e(L,ca),e(ca,rr),e(L,ir),e(L,lt),e(lt,fr),e(L,dr),h(l,wl,p),h(l,ne,p),e(ne,ve),e(ve,ua),C(st,ua,null),e(ne,pr),e(ne,ma),e(ma,hr),h(l,Il,p),h(l,po,p),e(po,cr),h(l,Dl,p),h(l,_e,p),e(_e,ga),e(ga,q),e(q,va),e(va,ur),e(q,mr),e(q,_a),e(_a,gr),e(q,vr),e(q,ho),e(ho,_r),e(q,br),e(q,co),e(co,Er),e(_e,yr),e(_e,u),e(u,N),e(N,ba),e(ba,uo),e(uo,wr),e(N,Ir),e(N,Ea),e(Ea,rt),e(rt,ya),e(ya,Dr),e(N,kr),e(N,mo),e(mo,Tr),e(N,Pr),e(N,wa),e(u,xr),e(u,R),e(R,Ia),e(Ia,go),e(go,Ar),e(R,Sr),e(R,Da),e(Da,it),e(it,ka),e(ka,$r),e(R,Cr),e(R,vo),e(vo,Or),e(R,Gr),e(R,_o),e(_o,ft),e(ft,bo),e(u,jr),e(u,H),e(H,Ta),e(Ta,Eo),e(Eo,Mr),e(H,Lr),e(H,Pa),e(Pa,dt),e(dt,xa),e(xa,qr),e(H,Nr),e(H,yo),e(yo,Rr),e(H,Hr),e(H,Aa),e(u,Br),e(u,B),e(B,Sa),e(Sa,wo),e(wo,Ur),e(B,Vr),e(B,$a),e($a,pt),e(pt,Ca),e(Ca,Yr),e(B,zr),e(B,Io),e(Io,Fr),e(B,Wr),e(B,Oa),e(u,Qr),e(u,U),e(U,Ga),e(Ga,Do),e(Do,Jr),e(U,Kr),e(U,ja),e(ja,ht),e(ht,Ma),e(Ma,Xr),e(U,Zr),e(U,ko),e(ko,ei),e(U,ti),e(U,La),e(u,oi),e(u,V),e(V,qa),e(qa,To),e(To,ai),e(V,ni),e(V,Na),e(Na,ct),e(ct,Ra),e(Ra,li),e(V,si),e(V,Po),e(Po,ri),e(V,ii),e(V,Ha),e(u,fi),e(u,Y),e(Y,Ba),e(Ba,xo),e(xo,di),e(Y,pi),e(Y,Ua),e(Ua,ut),e(ut,Va),e(Va,hi),e(Y,ci),e(Y,Ao),e(Ao,ui),e(Y,mi),e(Y,Ya),e(u,gi),e(u,z),e(z,za),e(za,So),e(So,vi),e(z,_i),e(z,Fa),e(Fa,mt),e(mt,Wa),e(Wa,bi),e(z,Ei),e(z,$o),e($o,yi),e(z,wi),e(z,Co),e(Co,gt),e(gt,Oo),e(u,Ii),e(u,F),e(F,Qa),e(Qa,Go),e(Go,Di),e(F,ki),e(F,Ja),e(Ja,vt),e(vt,Ka),e(Ka,Ti),e(F,Pi),e(F,jo),e(jo,xi),e(F,Ai),e(F,Mo),e(Mo,_t),e(_t,Lo),e(u,Si),e(u,W),e(W,Xa),e(Xa,qo),e(qo,$i),e(W,Ci),e(W,Za),e(Za,bt),e(bt,en),e(en,Oi),e(W,Gi),e(W,No),e(No,ji),e(W,Mi),e(W,Ro),e(Ro,Et),e(Et,Ho),e(u,Li),e(u,Q),e(Q,tn),e(tn,Bo),e(Bo,qi),e(Q,Ni),e(Q,on),e(on,yt),e(yt,an),e(an,Ri),e(Q,Hi),e(Q,Uo),e(Uo,Bi),e(Q,Ui),e(Q,nn),h(l,kl,p),h(l,wt,p),e(wt,ln),e(ln,Vi),e(wt,Yi),h(l,Tl,p),h(l,be,p),e(be,zi),e(be,Vo),e(Vo,Fi),e(be,Wi),h(l,Pl,p),h(l,le,p),e(le,Ee),e(Ee,sn),C(It,sn,null),e(le,Qi),e(le,rn),e(rn,Ji),h(l,xl,p),h(l,Yo,p),e(Yo,Ki),h(l,Al,p),h(l,K,p),e(K,Xi),e(K,fn),e(fn,Zi),e(K,ef),e(K,Dt),e(Dt,tf),e(K,of),h(l,Sl,p),h(l,k,p),e(k,c),e(c,kt),e(kt,dn),e(dn,af),e(kt,nf),e(c,lf),e(c,pn),e(pn,sf),e(c,rf),e(c,Tt),e(Tt,ff),e(c,df),e(c,hn),e(hn,pf),e(c,hf),e(c,cn),e(cn,cf),e(c,uf),e(c,un),e(un,mf),e(c,gf),e(c,Pt),e(Pt,vf),e(c,_f),e(c,mn),e(mn,bf),e(c,Ef),e(c,gn),e(gn,yf),e(c,wf),e(c,vn),e(vn,If),e(c,Df),e(c,_n),e(_n,kf),e(c,Tf),e(k,Pf),e(k,v),e(v,zo),e(zo,bn),e(bn,xf),e(v,Af),e(v,En),e(En,Sf),e(v,$f),e(v,yn),e(yn,Cf),e(v,Of),e(v,wn),e(wn,Gf),e(v,jf),e(v,In),e(In,Mf),e(v,Lf),e(v,Dn),e(Dn,qf),e(v,Nf),e(v,kn),e(kn,Rf),e(v,Hf),e(v,Tn),e(Tn,Bf),e(v,Uf),e(k,Vf),e(k,y),e(y,Fo),e(Fo,Pn),e(Pn,Yf),e(y,zf),e(y,xn),e(xn,Ff),e(y,Wf),e(y,An),e(An,Qf),e(y,Jf),e(y,Sn),e(Sn,Kf),e(y,Xf),e(y,se),e(se,Zf),e(se,$n),e($n,ed),e(se,td),e(y,od),e(k,ad),e(k,E),e(E,Cn),e(Cn,nd),e(E,ld),e(E,On),e(On,sd),e(E,rd),e(E,Gn),e(Gn,id),e(E,fd),e(E,jn),e(jn,dd),e(E,pd),e(E,Wo),e(Wo,Mn),e(Mn,hd),e(E,cd),e(E,xt),e(xt,ud),e(E,md),h(l,$l,p),h(l,T,p),e(T,Ln),e(Ln,gd),e(T,vd),e(T,qn),e(qn,_d),e(T,bd),e(T,At),e(At,Nn),e(Nn,Ed),e(T,yd),e(T,St),e(St,wd),h(l,Cl,p),h(l,re,p),e(re,ye),e(ye,Rn),C($t,Rn,null),e(re,Id),e(re,Hn),e(Hn,Dd),h(l,Ol,p),h(l,w,p),e(w,kd),e(w,Bn),e(Bn,Td),e(w,Pd),e(w,Un),e(Un,xd),e(w,Ad),e(w,Vn),e(Vn,Sd),e(w,$d),e(w,Yn),e(Yn,Cd),e(w,Od),h(l,Gl,p),h(l,P,p),e(P,we),e(we,zn),e(zn,Gd),e(we,jd),e(we,Ct),e(Ct,Fn),e(Fn,Md),e(Ct,Ld),e(we,qd),e(P,Nd),e(P,X),e(X,Wn),e(Wn,Rd),e(X,Hd),e(X,Qn),e(Qn,Bd),e(X,Ud),e(X,Jn),e(Jn,Vd),e(X,Yd),e(P,zd),e(P,Z),e(Z,Kn),e(Kn,Fd),e(Z,Wd),e(Z,Ot),e(Ot,Qd),e(Z,Jd),e(Z,Qo),e(Qo,Kd),e(Z,Xd),e(P,Zd),e(P,x),e(x,Xn),e(Xn,ep),e(x,tp),e(x,Zn),e(Zn,op),e(x,ap),e(x,el),e(el,np),e(x,lp),e(x,tl),e(tl,sp),e(x,rp),h(l,jl,p),h(l,ie,p),e(ie,Ie),e(Ie,ol),C(Gt,ol,null),e(ie,ip),e(ie,al),e(al,fp),h(l,Ml,p),h(l,fe,p),e(fe,De),e(De,nl),C(jt,nl,null),e(fe,dp),e(fe,ll),e(ll,pp),h(l,Ll,p),C(Mt,l,p),h(l,ql,p),h(l,de,p),e(de,ke),e(ke,sl),C(Lt,sl,null),e(de,hp),e(de,rl),e(rl,cp),h(l,Nl,p),h(l,Te,p),e(Te,up),e(Te,il),e(il,mp),e(Te,gp),h(l,Rl,p),C(qt,l,p),h(l,Hl,p),h(l,Nt,p),e(Nt,vp),e(Nt,Rt),e(Rt,Jo),h(l,Bl,p),h(l,pe,p),e(pe,Pe),e(Pe,fl),C(Ht,fl,null),e(pe,_p),e(pe,dl),e(dl,bp),h(l,Ul,p),h(l,ee,p),e(ee,Ep),e(ee,Bt),e(Bt,yp),e(ee,wp),e(ee,Ut),e(Ut,Ko),e(ee,Ip),h(l,Vl,p),h(l,he,p),e(he,xe),e(xe,pl),C(Vt,pl,null),e(he,Dp),e(he,hl),e(hl,kp),h(l,Yl,p),h(l,Ae,p),e(Ae,Tp),e(Ae,cl),e(cl,Pp),e(Ae,xp),h(l,zl,p),C(Yt,l,p),h(l,Fl,p),h(l,zt,p),e(zt,Ap),e(zt,Ft),e(Ft,Xo),Wl=!0},p:Om,i(l){Wl||(O(Fe.$$.fragment,l),O(st.$$.fragment,l),O(It.$$.fragment,l),O($t.$$.fragment,l),O(Gt.$$.fragment,l),O(jt.$$.fragment,l),O(Mt.$$.fragment,l),O(Lt.$$.fragment,l),O(qt.$$.fragment,l),O(Ht.$$.fragment,l),O(Vt.$$.fragment,l),O(Yt.$$.fragment,l),Wl=!0)},o(l){G(Fe.$$.fragment,l),G(st.$$.fragment,l),G(It.$$.fragment,l),G($t.$$.fragment,l),G(Gt.$$.fragment,l),G(jt.$$.fragment,l),G(Mt.$$.fragment,l),G(Lt.$$.fragment,l),G(qt.$$.fragment,l),G(Ht.$$.fragment,l),G(Vt.$$.fragment,l),G(Yt.$$.fragment,l),Wl=!1},d(l){t(oe),l&&t(ml),l&&t(ae),j(Fe),l&&t(gl),l&&t(Xt),l&&t(vl),l&&t(ge),l&&t(_l),l&&t(b),l&&t(bl),l&&t(ao),l&&t(El),l&&t(D),l&&t(yl),l&&t(L),l&&t(wl),l&&t(ne),j(st),l&&t(Il),l&&t(po),l&&t(Dl),l&&t(_e),l&&t(kl),l&&t(wt),l&&t(Tl),l&&t(be),l&&t(Pl),l&&t(le),j(It),l&&t(xl),l&&t(Yo),l&&t(Al),l&&t(K),l&&t(Sl),l&&t(k),l&&t($l),l&&t(T),l&&t(Cl),l&&t(re),j($t),l&&t(Ol),l&&t(w),l&&t(Gl),l&&t(P),l&&t(jl),l&&t(ie),j(Gt),l&&t(Ml),l&&t(fe),j(jt),l&&t(Ll),j(Mt,l),l&&t(ql),l&&t(de),j(Lt),l&&t(Nl),l&&t(Te),l&&t(Rl),j(qt,l),l&&t(Hl),l&&t(Nt),l&&t(Bl),l&&t(pe),j(Ht),l&&t(Ul),l&&t(ee),l&&t(Vl),l&&t(he),j(Vt),l&&t(Yl),l&&t(Ae),l&&t(zl),j(Yt,l),l&&t(Fl),l&&t(zt)}}}const Mm={local:"pipelines",sections:[{local:"diffusers-summary",title:"\u{1F9E8} Diffusers Summary"},{local:"pipelines-api",title:"Pipelines API"},{local:"contribution",title:"Contribution"},{local:"examples",sections:[{local:"texttoimage-generation-with-stable-diffusion",title:"Text-to-Image generation with Stable Diffusion"},{local:"imagetoimage-textguided-generation-with-stable-diffusion",title:"Image-to-Image text-guided generation with Stable Diffusion"},{local:"tweak-prompts-reusing-seeds-and-latents",title:"Tweak prompts reusing seeds and latents"},{local:"inpainting-using-stable-diffusion",title:"In-painting using Stable Diffusion"}],title:"Examples"}],title:"Pipelines"};function Lm(Mp){return Gm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Hm extends Am{constructor(oe){super();Sm(this,oe,Lm,jm,$m,{})}}export{Hm as default,Mm as metadata};
