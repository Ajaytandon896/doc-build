import{S as zt,i as Jt,s as Rt,e as r,k as l,w as B,t as p,M as Ft,c as o,d as t,m as d,a as i,x as W,h,b as n,G as a,g as c,y as V,L as jt,q as Y,o as K,B as Q,v as Bt}from"../../../chunks/vendor-hf-doc-builder.js";import{D as Ut}from"../../../chunks/Docstring-hf-doc-builder.js";import{I as Se}from"../../../chunks/IconCopyLink-hf-doc-builder.js";function Wt(ht){let u,ue,m,D,X,M,Ne,Z,Oe,me,v,y,ee,x,Ce,te,Le,ve,T,I,qe,He,ge,H,Ge,be,G,Ue,_e,w,ze,k,Je,Re,Pe,g,$,ae,S,Fe,re,je,De,E,oe,b,ie,Be,We,ne,Ve,Ye,U,Ke,Qe,se,_,le,N,Xe,Ze,de,pe,et,tt,z,at,ye,P,A,he,O,rt,ce,ot,we,f,C,it,L,nt,fe,st,lt,dt,J,q,$e;return M=new Se({}),x=new Se({}),S=new Se({}),O=new Se({}),C=new Ut({props:{name:"class diffusers.DDPMPipeline",anchor:"diffusers.DDPMPipeline",parameters:[{name:"unet",val:""},{name:"scheduler",val:""}],parametersDescription:[{anchor:"diffusers.DDPMPipeline.unet",description:"<strong>unet</strong> (<code>UNet2DModel</code>) &#x2014; U-Net architecture to denoise the encoded image.",name:"unet"},{anchor:"diffusers.DDPMPipeline.scheduler",description:`<strong>scheduler</strong> (<code>SchedulerMixin</code>) &#x2014;
A scheduler to be used in combination with <code>unet</code> to denoise the encoded image. Can be one of
<code>DDPMScheduler</code>, or <code>DDIMScheduler</code>.`,name:"scheduler"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/ddpm/pipeline_ddpm.py#L25"}}),q=new Ut({props:{name:"__call__",anchor:"diffusers.DDPMPipeline.__call__",parameters:[{name:"batch_size",val:": int = 1"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"output_type",val:": typing.Optional[str] = 'pil'"},{name:"return_dict",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.DDPMPipeline.__call__.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of images to generate.`,name:"batch_size"},{anchor:"diffusers.DDPMPipeline.__call__.generator",description:`<strong>generator</strong> (<code>torch.Generator</code>, <em>optional</em>) &#x2014;
A <a href="https://pytorch.org/docs/stable/generated/torch.Generator.html" rel="nofollow">torch generator</a> to make generation
deterministic.`,name:"generator"},{anchor:"diffusers.DDPMPipeline.__call__.output_type",description:`<strong>output_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;pil&quot;</code>) &#x2014;
The output format of the generate image. Choose between
<a href="https://pillow.readthedocs.io/en/stable/" rel="nofollow">PIL</a>: <em>PIL.Image.Image</em> or <em>nd.array</em>.`,name:"output_type"},{anchor:"diffusers.DDPMPipeline.__call__.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a [<em>~pipeline_utils.ImagePipelineOutput</em>] instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/ddpm/pipeline_ddpm.py#L42"}}),{c(){u=r("meta"),ue=l(),m=r("h1"),D=r("a"),X=r("span"),B(M.$$.fragment),Ne=l(),Z=r("span"),Oe=p("DDPM"),me=l(),v=r("h2"),y=r("a"),ee=r("span"),B(x.$$.fragment),Ce=l(),te=r("span"),Le=p("Overview"),ve=l(),T=r("p"),I=r("a"),qe=p("Denoising Diffusion Probabilistic Models"),He=p(`
(DDPM) by Jonathan Ho, Ajay Jain and Pieter Abbeel proposes the diffusion based model of the same name, but in the context of the \u{1F917} Diffusers library, DDPM refers to the discrete denoising scheduler from the paper as well as the pipeline.`),ge=l(),H=r("p"),Ge=p("The abstract of the paper is the following:"),be=l(),G=r("p"),Ue=p("We present high quality image synthesis results using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. Our best results are obtained by training on a weighted variational bound designed according to a novel connection between diffusion probabilistic models and denoising score matching with Langevin dynamics, and our models naturally admit a progressive lossy decompression scheme that can be interpreted as a generalization of autoregressive decoding. On the unconditional CIFAR10 dataset, we obtain an Inception score of 9.46 and a state-of-the-art FID score of 3.17. On 256x256 LSUN, we obtain sample quality similar to ProgressiveGAN."),_e=l(),w=r("p"),ze=p("The original codebase of this paper can be found "),k=r("a"),Je=p("here"),Re=p("."),Pe=l(),g=r("h2"),$=r("a"),ae=r("span"),B(S.$$.fragment),Fe=l(),re=r("span"),je=p("Available Pipelines:"),De=l(),E=r("table"),oe=r("thead"),b=r("tr"),ie=r("th"),Be=p("Pipeline"),We=l(),ne=r("th"),Ve=p("Tasks"),Ye=l(),U=r("th"),Ke=p("Colab"),Qe=l(),se=r("tbody"),_=r("tr"),le=r("td"),N=r("a"),Xe=p("pipeline_ddpm.py"),Ze=l(),de=r("td"),pe=r("em"),et=p("Unconditional Image Generation"),tt=l(),z=r("td"),at=p("-"),ye=l(),P=r("h2"),A=r("a"),he=r("span"),B(O.$$.fragment),rt=l(),ce=r("span"),ot=p("API"),we=l(),f=r("div"),B(C.$$.fragment),it=l(),L=r("p"),nt=p("This model inherits from "),fe=r("code"),st=p("DiffusionPipeline"),lt=p(`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),dt=l(),J=r("div"),B(q.$$.fragment),this.h()},l(e){const s=Ft('[data-svelte="svelte-1phssyn"]',document.head);u=o(s,"META",{name:!0,content:!0}),s.forEach(t),ue=d(e),m=o(e,"H1",{class:!0});var Ee=i(m);D=o(Ee,"A",{id:!0,class:!0,href:!0});var ct=i(D);X=o(ct,"SPAN",{});var ft=i(X);W(M.$$.fragment,ft),ft.forEach(t),ct.forEach(t),Ne=d(Ee),Z=o(Ee,"SPAN",{});var ut=i(Z);Oe=h(ut,"DDPM"),ut.forEach(t),Ee.forEach(t),me=d(e),v=o(e,"H2",{class:!0});var Ae=i(v);y=o(Ae,"A",{id:!0,class:!0,href:!0});var mt=i(y);ee=o(mt,"SPAN",{});var vt=i(ee);W(x.$$.fragment,vt),vt.forEach(t),mt.forEach(t),Ce=d(Ae),te=o(Ae,"SPAN",{});var gt=i(te);Le=h(gt,"Overview"),gt.forEach(t),Ae.forEach(t),ve=d(e),T=o(e,"P",{});var pt=i(T);I=o(pt,"A",{href:!0,rel:!0});var bt=i(I);qe=h(bt,"Denoising Diffusion Probabilistic Models"),bt.forEach(t),He=h(pt,`
(DDPM) by Jonathan Ho, Ajay Jain and Pieter Abbeel proposes the diffusion based model of the same name, but in the context of the \u{1F917} Diffusers library, DDPM refers to the discrete denoising scheduler from the paper as well as the pipeline.`),pt.forEach(t),ge=d(e),H=o(e,"P",{});var _t=i(H);Ge=h(_t,"The abstract of the paper is the following:"),_t.forEach(t),be=d(e),G=o(e,"P",{});var Pt=i(G);Ue=h(Pt,"We present high quality image synthesis results using diffusion probabilistic models, a class of latent variable models inspired by considerations from nonequilibrium thermodynamics. Our best results are obtained by training on a weighted variational bound designed according to a novel connection between diffusion probabilistic models and denoising score matching with Langevin dynamics, and our models naturally admit a progressive lossy decompression scheme that can be interpreted as a generalization of autoregressive decoding. On the unconditional CIFAR10 dataset, we obtain an Inception score of 9.46 and a state-of-the-art FID score of 3.17. On 256x256 LSUN, we obtain sample quality similar to ProgressiveGAN."),Pt.forEach(t),_e=d(e),w=o(e,"P",{});var Me=i(w);ze=h(Me,"The original codebase of this paper can be found "),k=o(Me,"A",{href:!0,rel:!0});var Dt=i(k);Je=h(Dt,"here"),Dt.forEach(t),Re=h(Me,"."),Me.forEach(t),Pe=d(e),g=o(e,"H2",{class:!0});var xe=i(g);$=o(xe,"A",{id:!0,class:!0,href:!0});var yt=i($);ae=o(yt,"SPAN",{});var wt=i(ae);W(S.$$.fragment,wt),wt.forEach(t),yt.forEach(t),Fe=d(xe),re=o(xe,"SPAN",{});var $t=i(re);je=h($t,"Available Pipelines:"),$t.forEach(t),xe.forEach(t),De=d(e),E=o(e,"TABLE",{});var Te=i(E);oe=o(Te,"THEAD",{});var Et=i(oe);b=o(Et,"TR",{});var R=i(b);ie=o(R,"TH",{});var At=i(ie);Be=h(At,"Pipeline"),At.forEach(t),We=d(R),ne=o(R,"TH",{});var Mt=i(ne);Ve=h(Mt,"Tasks"),Mt.forEach(t),Ye=d(R),U=o(R,"TH",{align:!0});var xt=i(U);Ke=h(xt,"Colab"),xt.forEach(t),R.forEach(t),Et.forEach(t),Qe=d(Te),se=o(Te,"TBODY",{});var Tt=i(se);_=o(Tt,"TR",{});var F=i(_);le=o(F,"TD",{});var It=i(le);N=o(It,"A",{href:!0,rel:!0});var kt=i(N);Xe=h(kt,"pipeline_ddpm.py"),kt.forEach(t),It.forEach(t),Ze=d(F),de=o(F,"TD",{});var St=i(de);pe=o(St,"EM",{});var Nt=i(pe);et=h(Nt,"Unconditional Image Generation"),Nt.forEach(t),St.forEach(t),tt=d(F),z=o(F,"TD",{align:!0});var Ot=i(z);at=h(Ot,"-"),Ot.forEach(t),F.forEach(t),Tt.forEach(t),Te.forEach(t),ye=d(e),P=o(e,"H2",{class:!0});var Ie=i(P);A=o(Ie,"A",{id:!0,class:!0,href:!0});var Ct=i(A);he=o(Ct,"SPAN",{});var Lt=i(he);W(O.$$.fragment,Lt),Lt.forEach(t),Ct.forEach(t),rt=d(Ie),ce=o(Ie,"SPAN",{});var qt=i(ce);ot=h(qt,"API"),qt.forEach(t),Ie.forEach(t),we=d(e),f=o(e,"DIV",{class:!0});var j=i(f);W(C.$$.fragment,j),it=d(j),L=o(j,"P",{});var ke=i(L);nt=h(ke,"This model inherits from "),fe=o(ke,"CODE",{});var Ht=i(fe);st=h(Ht,"DiffusionPipeline"),Ht.forEach(t),lt=h(ke,`. Check the superclass documentation for the generic methods the
library implements for all the pipelines (such as downloading or saving, running on a particular device, etc.)`),ke.forEach(t),dt=d(j),J=o(j,"DIV",{class:!0});var Gt=i(J);W(q.$$.fragment,Gt),Gt.forEach(t),j.forEach(t),this.h()},h(){n(u,"name","hf:doc:metadata"),n(u,"content",JSON.stringify(Vt)),n(D,"id","ddpm"),n(D,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(D,"href","#ddpm"),n(m,"class","relative group"),n(y,"id","overview"),n(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(y,"href","#overview"),n(v,"class","relative group"),n(I,"href","https://arxiv.org/abs/2006.11239"),n(I,"rel","nofollow"),n(k,"href","https://github.com/hojonathanho/diffusion"),n(k,"rel","nofollow"),n($,"id","available-pipelines"),n($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n($,"href","#available-pipelines"),n(g,"class","relative group"),n(U,"align","center"),n(N,"href","https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/ddpm/pipeline_ddpm.py"),n(N,"rel","nofollow"),n(z,"align","center"),n(A,"id","diffusers.DDPMPipeline"),n(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),n(A,"href","#diffusers.DDPMPipeline"),n(P,"class","relative group"),n(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),n(f,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,s){a(document.head,u),c(e,ue,s),c(e,m,s),a(m,D),a(D,X),V(M,X,null),a(m,Ne),a(m,Z),a(Z,Oe),c(e,me,s),c(e,v,s),a(v,y),a(y,ee),V(x,ee,null),a(v,Ce),a(v,te),a(te,Le),c(e,ve,s),c(e,T,s),a(T,I),a(I,qe),a(T,He),c(e,ge,s),c(e,H,s),a(H,Ge),c(e,be,s),c(e,G,s),a(G,Ue),c(e,_e,s),c(e,w,s),a(w,ze),a(w,k),a(k,Je),a(w,Re),c(e,Pe,s),c(e,g,s),a(g,$),a($,ae),V(S,ae,null),a(g,Fe),a(g,re),a(re,je),c(e,De,s),c(e,E,s),a(E,oe),a(oe,b),a(b,ie),a(ie,Be),a(b,We),a(b,ne),a(ne,Ve),a(b,Ye),a(b,U),a(U,Ke),a(E,Qe),a(E,se),a(se,_),a(_,le),a(le,N),a(N,Xe),a(_,Ze),a(_,de),a(de,pe),a(pe,et),a(_,tt),a(_,z),a(z,at),c(e,ye,s),c(e,P,s),a(P,A),a(A,he),V(O,he,null),a(P,rt),a(P,ce),a(ce,ot),c(e,we,s),c(e,f,s),V(C,f,null),a(f,it),a(f,L),a(L,nt),a(L,fe),a(fe,st),a(L,lt),a(f,dt),a(f,J),V(q,J,null),$e=!0},p:jt,i(e){$e||(Y(M.$$.fragment,e),Y(x.$$.fragment,e),Y(S.$$.fragment,e),Y(O.$$.fragment,e),Y(C.$$.fragment,e),Y(q.$$.fragment,e),$e=!0)},o(e){K(M.$$.fragment,e),K(x.$$.fragment,e),K(S.$$.fragment,e),K(O.$$.fragment,e),K(C.$$.fragment,e),K(q.$$.fragment,e),$e=!1},d(e){t(u),e&&t(ue),e&&t(m),Q(M),e&&t(me),e&&t(v),Q(x),e&&t(ve),e&&t(T),e&&t(ge),e&&t(H),e&&t(be),e&&t(G),e&&t(_e),e&&t(w),e&&t(Pe),e&&t(g),Q(S),e&&t(De),e&&t(E),e&&t(ye),e&&t(P),Q(O),e&&t(we),e&&t(f),Q(C),Q(q)}}}const Vt={local:"ddpm",sections:[{local:"overview",title:"Overview"},{local:"available-pipelines",title:"Available Pipelines:"},{local:"diffusers.DDPMPipeline",title:"API"}],title:"DDPM"};function Yt(ht){return Bt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Zt extends zt{constructor(u){super();Jt(this,u,Yt,Wt,Rt,{})}}export{Zt as default,Vt as metadata};
