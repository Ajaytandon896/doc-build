import{S as Ac,i as Lc,s as Ic,e as s,k as l,w as f,t as i,M as Fc,c as n,d as r,m as c,a as o,x as h,h as d,b as a,G as e,g as u,y as m,q as g,o as _,B as v,v as Cc}from"../../chunks/vendor-hf-doc-builder.js";import{T as Kc}from"../../chunks/Tip-hf-doc-builder.js";import{D as b}from"../../chunks/Docstring-hf-doc-builder.js";import{I as w}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Uc(Cs){let D,ae;return{c(){D=s("p"),ae=i("Score SDE-VP is under construction.")},l(E){D=n(E,"P",{});var V=o(D);ae=d(V,"Score SDE-VP is under construction."),V.forEach(r)},m(E,V){u(E,D,V),e(D,ae)},d(E){E&&r(D)}}}function qc(Cs){let D,ae,E,V,Sr,je,co,$r,po,Ks,or,uo,Us,H,ie,yr,Qe,fo,Dr,ho,qs,de,ar,mo,Xe,xr,go,_o,wr,vo,bo,R,So,Er,$o,yo,Pr,Do,xo,Hs,B,le,Tr,Ze,wo,Mr,Eo,Rs,G,ce,Or,et,Po,kr,To,Bs,W,pe,Vr,tt,Mo,Nr,Oo,Gs,z,ue,Ar,rt,ko,Lr,Vo,Ws,Y,fe,Ir,st,No,Fr,Ao,zs,A,nt,Lo,Cr,Io,Fo,he,ot,Co,Kr,Ko,Ys,J,me,Ur,at,Uo,qr,qo,Js,j,it,Ho,Hr,Ro,js,Q,ge,Rr,dt,Bo,Br,Go,Qs,X,_e,Gr,lt,Wo,Wr,zo,Xs,ir,Yo,Zs,P,ct,Jo,zr,jo,Qo,dr,Xo,pt,Zo,ea,ve,ut,ta,Yr,ra,sa,be,ft,na,Jr,oa,en,Z,Se,jr,ht,aa,Qr,ia,tn,$e,da,mt,la,ca,rn,T,gt,pa,Xr,ua,fa,lr,ha,_t,ma,ga,ye,vt,_a,Zr,va,ba,De,bt,Sa,es,$a,sn,ee,xe,ts,St,ya,rs,Da,nn,we,xa,$t,wa,Ea,on,S,yt,Pa,ss,Ta,Ma,Ee,Oa,Dt,ka,Va,xt,Na,Aa,wt,La,Et,Ia,Fa,Ca,I,Pt,Ka,ns,Ua,qa,os,Ha,Ra,Pe,Tt,Ba,as,Ga,Wa,Te,Mt,za,is,Ya,Ja,Me,Ot,ja,ds,Qa,an,te,Oe,ls,kt,Xa,cs,Za,dn,ke,ei,Vt,ti,ri,ln,M,Nt,si,cr,ni,At,oi,ai,Ve,Lt,ii,ps,di,li,Ne,It,ci,us,pi,ui,Ae,Ft,fi,fs,hi,cn,re,Le,hs,Ct,mi,ms,gi,pn,Ie,_i,Kt,vi,bi,un,$,Ut,Si,gs,$i,yi,pr,Di,qt,xi,wi,Fe,Ht,Ei,_s,Pi,Ti,F,Rt,Mi,vs,Oi,ki,L,Vi,bs,Ni,Ai,Ss,Li,Ii,$s,Fi,Ci,Ki,Ce,Bt,Ui,ys,qi,Hi,Ke,Gt,Ri,Ds,Bi,fn,se,Ue,xs,Wt,Gi,ws,Wi,hn,qe,zi,zt,Yi,Ji,mn,y,Yt,ji,Es,Qi,Xi,ur,Zi,Jt,ed,td,C,jt,rd,Ps,sd,nd,ne,od,Ts,ad,id,Ms,dd,ld,cd,He,Qt,pd,Os,ud,fd,Re,Xt,hd,ks,md,gd,Be,Zt,_d,Vs,vd,gn,oe,Ge,Ns,er,bd,As,Sd,_n,We,$d,tr,yd,Dd,vn,ze,bn,N,rr,xd,Ls,wd,Ed,fr,Pd,sr,Td,Md,Is,Od,Sn;return je=new w({}),Qe=new w({}),Ze=new w({}),et=new w({}),tt=new w({}),rt=new w({}),st=new w({}),nt=new b({props:{name:"class diffusers.SchedulerMixin",anchor:"diffusers.SchedulerMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L40"}}),ot=new b({props:{name:"match_shape",anchor:"diffusers.SchedulerMixin.match_shape",parameters:[{name:"values",val:": typing.Union[numpy.ndarray, torch.Tensor]"},{name:"broadcast_array",val:": typing.Union[numpy.ndarray, torch.Tensor]"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L77",returnDescription:`
<p>a tensor of shape [batch_size, 1, \u2026] where the shape has K dims.</p>
`}}),at=new w({}),it=new b({props:{name:"class diffusers.schedulers.scheduling_utils.SchedulerOutput",anchor:"diffusers.schedulers.scheduling_utils.SchedulerOutput",parameters:[{name:"prev_sample",val:": FloatTensor"}],parametersDescription:[{anchor:"diffusers.schedulers.scheduling_utils.SchedulerOutput.prev_sample",description:`<strong>prev_sample</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code> for images) &#x2014;
Computed sample (x_{t-1}) of previous timestep. <code>prev_sample</code> should be used as next model input in the
denoising loop.`,name:"prev_sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L27"}}),dt=new w({}),lt=new w({}),ct=new b({props:{name:"class diffusers.DDIMScheduler",anchor:"diffusers.DDIMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"timestep_values",val:": typing.Optional[numpy.ndarray] = None"},{name:"clip_sample",val:": bool = True"},{name:"set_alpha_to_one",val:": bool = True"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.DDIMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.DDIMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.DDIMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.DDIMScheduler.trained_betas",description:"<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO",name:"trained_betas"},{anchor:"diffusers.DDIMScheduler.timestep_values",description:"<strong>timestep_values</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO",name:"timestep_values"},{anchor:"diffusers.DDIMScheduler.clip_sample",description:`<strong>clip_sample</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
option to clip predicted sample between -1 and 1 for numerical stability.`,name:"clip_sample"},{anchor:"diffusers.DDIMScheduler.set_alpha_to_one",description:`<strong>set_alpha_to_one</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
if alpha for final step is 1 or the final alpha of the &#x201C;non-previous&#x201D; one.`,name:"set_alpha_to_one"},{anchor:"diffusers.DDIMScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L57"}}),ut=new b({props:{name:"set_timesteps",anchor:"diffusers.DDIMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"offset",val:": int = 0"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.DDIMScheduler.set_timesteps.offset",description:"<strong>offset</strong> (<code>int</code>) &#x2014; TODO",name:"offset"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L133"}}),ft=new b({props:{name:"step",anchor:"diffusers.DDIMScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"eta",val:": float = 0.0"},{name:"use_clipped_model_output",val:": bool = False"},{name:"generator",val:" = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.DDIMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.DDIMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.DDIMScheduler.step.eta",description:"<strong>eta</strong> (<code>float</code>) &#x2014; weight of noise for added noise in diffusion step.",name:"eta"},{anchor:"diffusers.DDIMScheduler.step.use_clipped_model_output",description:`<strong>use_clipped_model_output</strong> (<code>bool</code>) &#x2014; TODO
generator &#x2014; random number generator.`,name:"use_clipped_model_output"},{anchor:"diffusers.DDIMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L149",returnDescription:`
<p>updated sample in the diffusion chain.</p>
`,returnType:`
<p><code>SchedulerOutput</code></p>
`}}),ht=new w({}),gt=new b({props:{name:"class diffusers.DDPMScheduler",anchor:"diffusers.DDPMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"variance_type",val:": str = 'fixed_small'"},{name:"clip_sample",val:": bool = True"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.DDPMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.DDPMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.DDPMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.DDPMScheduler.trained_betas",description:"<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO",name:"trained_betas"},{anchor:"diffusers.DDPMScheduler.variance_type",description:`<strong>variance_type</strong> (<code>str</code>) &#x2014;
options to clip the variance used when adding noise to the denoised sample. Choose from <code>fixed_small</code>,
<code>fixed_small_log</code>, <code>fixed_large</code>, <code>fixed_large_log</code>, <code>learned</code> or <code>learned_range</code>.`,name:"variance_type"},{anchor:"diffusers.DDPMScheduler.clip_sample",description:`<strong>clip_sample</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
option to clip predicted sample between -1 and 1 for numerical stability.`,name:"clip_sample"},{anchor:"diffusers.DDPMScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L56"}}),vt=new b({props:{name:"set_timesteps",anchor:"diffusers.DDPMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L119"}}),bt=new b({props:{name:"step",anchor:"diffusers.DDPMScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"predict_epsilon",val:" = True"},{name:"generator",val:" = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.DDPMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.DDPMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.DDPMScheduler.step.eta",description:"<strong>eta</strong> (<code>float</code>) &#x2014; weight of noise for added noise in diffusion step.",name:"eta"},{anchor:"diffusers.DDPMScheduler.step.predict_epsilon",description:`<strong>predict_epsilon</strong> (<code>bool</code>) &#x2014;
optional flag to use when model predicts the samples directly instead of the noise, epsilon.
generator &#x2014; random number generator.`,name:"predict_epsilon"},{anchor:"diffusers.DDPMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L167",returnDescription:`
<p>updated sample in the diffusion chain.</p>
`,returnType:`
<p><code>SchedulerOutput</code></p>
`}}),St=new w({}),yt=new b({props:{name:"class diffusers.KarrasVeScheduler",anchor:"diffusers.KarrasVeScheduler",parameters:[{name:"sigma_min",val:": float = 0.02"},{name:"sigma_max",val:": float = 100"},{name:"s_noise",val:": float = 1.007"},{name:"s_churn",val:": float = 80"},{name:"s_min",val:": float = 0.05"},{name:"s_max",val:": float = 50"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.sigma_min",description:"<strong>sigma_min</strong> (<code>float</code>) &#x2014; minimum noise magnitude",name:"sigma_min"},{anchor:"diffusers.KarrasVeScheduler.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>) &#x2014; maximum noise magnitude",name:"sigma_max"},{anchor:"diffusers.KarrasVeScheduler.s_noise",description:`<strong>s_noise</strong> (<code>float</code>) &#x2014; the amount of additional noise to counteract loss of detail during sampling.
A reasonable range is [1.000, 1.011].`,name:"s_noise"},{anchor:"diffusers.KarrasVeScheduler.s_churn",description:`<strong>s_churn</strong> (<code>float</code>) &#x2014; the parameter controlling the overall amount of stochasticity.
A reasonable range is [0, 100].`,name:"s_churn"},{anchor:"diffusers.KarrasVeScheduler.s_min",description:`<strong>s_min</strong> (<code>float</code>) &#x2014; the start value of the sigma range where we add noise (enable stochasticity).
A reasonable range is [0, 10].`,name:"s_min"},{anchor:"diffusers.KarrasVeScheduler.s_max",description:`<strong>s_max</strong> (<code>float</code>) &#x2014; the end value of the sigma range where we add noise.
A reasonable range is [0.2, 80].`,name:"s_max"},{anchor:"diffusers.KarrasVeScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L44"}}),Pt=new b({props:{name:"add_noise_to_input",anchor:"diffusers.KarrasVeScheduler.add_noise_to_input",parameters:[{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sigma",val:": float"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L110"}}),Tt=new b({props:{name:"set_timesteps",anchor:"diffusers.KarrasVeScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L91"}}),Mt=new b({props:{name:"step",anchor:"diffusers.KarrasVeScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sigma_hat",val:": float"},{name:"sigma_prev",val:": float"},{name:"sample_hat",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.KarrasVeScheduler.step.sigma_hat",description:"<strong>sigma_hat</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_hat"},{anchor:"diffusers.KarrasVeScheduler.step.sigma_prev",description:"<strong>sigma_prev</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_prev"},{anchor:"diffusers.KarrasVeScheduler.step.sample_hat",description:"<strong>sample_hat</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; TODO",name:"sample_hat"},{anchor:"diffusers.KarrasVeScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L131",returnDescription:`
<p>updated sample in the diffusion chain and derivative (TODO double check).</p>
`,returnType:`
<p>KarrasVeOutput</p>
`}}),Ot=new b({props:{name:"step_correct",anchor:"diffusers.KarrasVeScheduler.step_correct",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sigma_hat",val:": float"},{name:"sigma_prev",val:": float"},{name:"sample_hat",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sample_prev",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"derivative",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.step_correct.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sigma_hat",description:"<strong>sigma_hat</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_hat"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sigma_prev",description:"<strong>sigma_prev</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_prev"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sample_hat",description:"<strong>sample_hat</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; TODO",name:"sample_hat"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sample_prev",description:"<strong>sample_prev</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; TODO",name:"sample_prev"},{anchor:"diffusers.KarrasVeScheduler.step_correct.derivative",description:"<strong>derivative</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; TODO",name:"derivative"},{anchor:"diffusers.KarrasVeScheduler.step_correct.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L164",returnDescription:`
<p>updated sample in the diffusion chain. derivative (TODO): TODO</p>
`,returnType:`
<p>prev_sample (TODO)</p>
`}}),kt=new w({}),Nt=new b({props:{name:"class diffusers.LMSDiscreteScheduler",anchor:"diffusers.LMSDiscreteScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"timestep_values",val:": typing.Optional[numpy.ndarray] = None"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.LMSDiscreteScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.LMSDiscreteScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.LMSDiscreteScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code> or <code>scaled_linear</code>.`,name:"beta_schedule"},{anchor:"diffusers.LMSDiscreteScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO
options to clip the variance used when adding noise to the denoised sample. Choose from <code>fixed_small</code>,
<code>fixed_small_log</code>, <code>fixed_large</code>, <code>fixed_large_log</code>, <code>learned</code> or <code>learned_range</code>.`,name:"trained_betas"},{anchor:"diffusers.LMSDiscreteScheduler.timestep_values",description:"<strong>timestep_values</strong> (<code>np.ndarry</code>, optional) &#x2014; TODO",name:"timestep_values"},{anchor:"diffusers.LMSDiscreteScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L26"}}),Lt=new b({props:{name:"get_lms_coefficient",anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient",parameters:[{name:"order",val:""},{name:"t",val:""},{name:"current_order",val:""}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.order",description:"<strong>order</strong> (TODO) &#x2014;",name:"order"},{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.t",description:"<strong>t</strong> (TODO) &#x2014;",name:"t"},{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.current_order",description:"<strong>current_order</strong> (TODO) &#x2014;",name:"current_order"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L81"}}),It=new b({props:{name:"set_timesteps",anchor:"diffusers.LMSDiscreteScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L103"}}),Ft=new b({props:{name:"step",anchor:"diffusers.LMSDiscreteScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"order",val:": int = 4"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.LMSDiscreteScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.LMSDiscreteScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.
order &#x2014; coefficient for multi-step inference.`,name:"sample"},{anchor:"diffusers.LMSDiscreteScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L125",returnDescription:`
<p>updated sample in the diffusion chain.</p>
`,returnType:`
<p>prev_sample (<code>SchedulerOutput</code> or <code>Tuple</code>)</p>
`}}),Ct=new w({}),Ut=new b({props:{name:"class diffusers.PNDMScheduler",anchor:"diffusers.PNDMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"tensor_format",val:": str = 'pt'"},{name:"skip_prk_steps",val:": bool = False"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.PNDMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.PNDMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.PNDMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.PNDMScheduler.trained_betas",description:"<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO",name:"trained_betas"},{anchor:"diffusers.PNDMScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays",name:"tensor_format"},{anchor:"diffusers.PNDMScheduler.skip_prk_steps",description:`<strong>skip_prk_steps</strong> (<code>bool</code>) &#x2014;
allows the scheduler to skip the Runge-Kutta steps that are defined in the original paper as being required
before plms steps; defaults to <code>False</code>.`,name:"skip_prk_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L56"}}),Ht=new b({props:{name:"set_timesteps",anchor:"diffusers.PNDMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"offset",val:": int = 0"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.PNDMScheduler.set_timesteps.offset",description:"<strong>offset</strong> (<code>int</code>) &#x2014; TODO",name:"offset"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L129"}}),Rt=new b({props:{name:"step",anchor:"diffusers.PNDMScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L168",returnDescription:`
<p>updated sample in the diffusion chain.</p>
`,returnType:`
<p><code>SchedulerOutput</code></p>
`}}),Bt=new b({props:{name:"step_plms",anchor:"diffusers.PNDMScheduler.step_plms",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step_plms.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step_plms.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step_plms.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step_plms.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L251",returnDescription:`
<p>updated sample in the diffusion chain.</p>
`,returnType:`
<p>prev_sample (<code>SchedulerOutput</code> or <code>Tuple</code>)</p>
`}}),Gt=new b({props:{name:"step_prk",anchor:"diffusers.PNDMScheduler.step_prk",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step_prk.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step_prk.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step_prk.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step_prk.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L197",returnDescription:`
<p>updated sample in the diffusion chain.</p>
`,returnType:`
<p>prev_sample (<code>SchedulerOutput</code> or <code>Tuple</code>)</p>
`}}),Wt=new w({}),Yt=new b({props:{name:"class diffusers.ScoreSdeVeScheduler",anchor:"diffusers.ScoreSdeVeScheduler",parameters:[{name:"num_train_timesteps",val:": int = 2000"},{name:"snr",val:": float = 0.15"},{name:"sigma_min",val:": float = 0.01"},{name:"sigma_max",val:": float = 1348.0"},{name:"sampling_eps",val:": float = 1e-05"},{name:"correct_steps",val:": int = 1"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.snr",description:`<strong>snr</strong> (<code>float</code>) &#x2014;
coefficient weighting the step from the model_output sample (from the network) to the random noise.`,name:"snr"},{anchor:"diffusers.ScoreSdeVeScheduler.sigma_min",description:`<strong>sigma_min</strong> (<code>float</code>) &#x2014;
initial noise scale for sigma sequence in sampling procedure. The minimum sigma should mirror the
distribution of the data.`,name:"sigma_min"},{anchor:"diffusers.ScoreSdeVeScheduler.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>) &#x2014; maximum value used for the range of continuous timesteps passed into the model.",name:"sigma_max"},{anchor:"diffusers.ScoreSdeVeScheduler.sampling_eps",description:`<strong>sampling_eps</strong> (<code>float</code>) &#x2014; the end value of sampling, where timesteps decrease progessively from 1 to
epsilon. &#x2014;`,name:"sampling_eps"},{anchor:"diffusers.ScoreSdeVeScheduler.correct_steps",description:"<strong>correct_steps</strong> (<code>int</code>) &#x2014; number of correction steps performed on a produced sample.",name:"correct_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; &#x201C;np&#x201D; or &#x201C;pt&#x201D; for the expected format of samples passed to the Scheduler.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L46"}}),jt=new b({props:{name:"set_sigmas",anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas",parameters:[{name:"num_inference_steps",val:": int"},{name:"sigma_min",val:": float = None"},{name:"sigma_max",val:": float = None"},{name:"sampling_eps",val:": float = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sigma_min",description:`<strong>sigma_min</strong> (<code>float</code>, optional) &#x2014;
initial noise scale value (overrides value given at Scheduler instantiation).`,name:"sigma_min"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>, optional) &#x2014; final noise scale value (overrides value given at Scheduler instantiation).",name:"sigma_max"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sampling_eps",description:"<strong>sampling_eps</strong> (<code>float</code>, optional) &#x2014; final timestep value (overrides value given at Scheduler instantiation).",name:"sampling_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L103"}}),Qt=new b({props:{name:"set_timesteps",anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"sampling_eps",val:": float = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps.sampling_eps",description:"<strong>sampling_eps</strong> (<code>float</code>, optional) &#x2014; final timestep value (overrides value given at Scheduler instantiation).",name:"sampling_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L84"}}),Xt=new b({props:{name:"step_correct",anchor:"diffusers.ScoreSdeVeScheduler.step_correct",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.
generator &#x2014; random number generator.`,name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L219",returnDescription:`
<p>updated sample in the diffusion chain.</p>
`,returnType:`
<p>prev_sample (<code>SchedulerOutput</code> or <code>Tuple</code>)</p>
`}}),Zt=new b({props:{name:"step_pred",anchor:"diffusers.ScoreSdeVeScheduler.step_pred",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.
generator &#x2014; random number generator.`,name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L161",returnDescription:`
<p>updated sample in the diffusion chain.</p>
`,returnType:`
<p>prev_sample (<code>SchedulerOutput</code> or <code>Tuple</code>)</p>
`}}),er=new w({}),ze=new Kc({props:{warning:!0,$$slots:{default:[Uc]},$$scope:{ctx:Cs}}}),rr=new b({props:{name:"class diffusers.schedulers.ScoreSdeVpScheduler",anchor:"diffusers.schedulers.ScoreSdeVpScheduler",parameters:[{name:"num_train_timesteps",val:" = 2000"},{name:"beta_min",val:" = 0.1"},{name:"beta_max",val:" = 20"},{name:"sampling_eps",val:" = 0.001"},{name:"tensor_format",val:" = 'np'"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_vp.py#L26"}}),{c(){D=s("meta"),ae=l(),E=s("h1"),V=s("a"),Sr=s("span"),f(je.$$.fragment),co=l(),$r=s("span"),po=i("Schedulers"),Ks=l(),or=s("p"),uo=i("Diffusers contains multiple pre-built schedule functions for the diffusion process."),Us=l(),H=s("h2"),ie=s("a"),yr=s("span"),f(Qe.$$.fragment),fo=l(),Dr=s("span"),ho=i("What is a schduler?"),qs=i(`

The schedule functions, denoted *Schedulers* in the library take in the output of a trained model, a sample which the diffusion process is iterating on, and a timestep to return a denoised sample.
`),de=s("ul"),ar=s("li"),mo=i("Schedulers define the methodology for iteratively adding noise to an image or for updating a sample based on model outputs."),Xe=s("ul"),xr=s("li"),go=i("adding noise in different manners represent the algorithmic processes to train a diffusion model by adding noise to images."),_o=l(),wr=s("li"),vo=i("for inference, the scheduler defines how to update a sample based on an output from a pretrained model."),bo=l(),R=s("li"),So=i("Schedulers are often defined by a "),Er=s("em"),$o=i("noise schedule"),yo=i(" and an "),Pr=s("em"),Do=i("update rule"),xo=i(" to solve the differential equation solution."),Hs=l(),B=s("h3"),le=s("a"),Tr=s("span"),f(Ze.$$.fragment),wo=l(),Mr=s("span"),Eo=i("Discrete versus continuous schedulers"),Rs=i("\n\nAll schedulers take in a timestep to predict the updated version of the sample being diffused.\nThe timesteps dictate where in the diffusion process the step is, where data is generated by iterating forward in time and inference is executed by propagating backwards through timesteps.\nDifferent algorithms use timesteps that both discrete (accepting `int` inputs), such as the [DDPMScheduler](/docs/diffusers/main/en/api/schedulers#diffusers.DDPMScheduler) or [PNDMScheduler](/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler), and continuous (accepting 'float` inputs), such as the score-based schedulers [ScoreSdeVeScheduler](/docs/diffusers/main/en/api/schedulers#diffusers.ScoreSdeVeScheduler) or `ScoreSdeVpScheduler`.\n"),G=s("h2"),ce=s("a"),Or=s("span"),f(et.$$.fragment),Po=l(),kr=s("span"),To=i("Designing Re-usable schedulers"),Bs=i(`

The core design principle between the schedule functions is to be model, system, and framework independent.
This allows for rapid experimentation and cleaner abstractions in the code, where the model prediction is separated from the sample update.
To this end, the design of schedulers is such that:
- Schedulers can be used interchangeably between diffusion models in inference to find the preferred trade-off between speed and generation quality.
- Schedulers are currently by default in PyTorch, but are designed to be framework independent (partial Numpy support currently exists).
`),W=s("h2"),pe=s("a"),Vr=s("span"),f(tt.$$.fragment),Mo=l(),Nr=s("span"),Oo=i("API"),Gs=i(`

The core API for any new scheduler must follow a limited structure.
- Schedulers should provide one or more \`def step(...)\` functions that should be called to update the generated sample iteratively.
- Schedulers should provide a \`set_timesteps(...)\` method that configures the parameters of a schedule function for a specific inference task.
- Schedulers should be framework-agonstic, but provide a simple functionality to convert the scheduler into a specific framework, such as PyTorch
with a \`set_format(...)\` method.
`),z=s("h3"),ue=s("a"),Ar=s("span"),f(rt.$$.fragment),ko=l(),Lr=s("span"),Vo=i("Core"),Ws=i(`

The base class [SchedulerMixin](/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin) implements low level utilities used by multiple schedulers.
`),Y=s("h4"),fe=s("a"),Ir=s("span"),f(st.$$.fragment),No=l(),Fr=s("span"),Ao=i("SchedulerMixin"),zs=l(),A=s("div"),f(nt.$$.fragment),Lo=l(),Cr=s("p"),Io=i("Mixin containing common functions for the schedulers."),Fo=l(),he=s("div"),f(ot.$$.fragment),Co=l(),Kr=s("p"),Ko=i("Turns a 1-D array into an array or tensor with len(broadcast_array.shape) dims."),Ys=l(),J=s("h4"),me=s("a"),Ur=s("span"),f(at.$$.fragment),Uo=l(),qr=s("span"),qo=i("SchedulerOutput"),Js=i("\n\nThe class `SchedulerOutput` contains the ouputs from any schedulers `step(...)` call.\n"),j=s("div"),f(it.$$.fragment),Ho=l(),Hr=s("p"),Ro=i("Base class for the scheduler\u2019s step function output."),js=l(),Q=s("h3"),ge=s("a"),Rr=s("span"),f(dt.$$.fragment),Bo=l(),Br=s("span"),Go=i("Existing Schedulers"),Qs=l(),X=s("h4"),_e=s("a"),Gr=s("span"),f(lt.$$.fragment),Wo=l(),Wr=s("span"),zo=i("Denoising diffusion implicit models (DDIM)"),Xs=l(),ir=s("p"),Yo=i("Original paper can be found here."),Zs=l(),P=s("div"),f(ct.$$.fragment),Jo=l(),zr=s("p"),jo=i(`Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising
diffusion probabilistic models (DDPMs) with non-Markovian guidance.`),Qo=l(),dr=s("p"),Xo=i("For more details, see the original paper: "),pt=s("a"),Zo=i("https://arxiv.org/abs/2010.02502"),ea=l(),ve=s("div"),f(ut.$$.fragment),ta=l(),Yr=s("p"),ra=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),sa=l(),be=s("div"),f(ft.$$.fragment),na=l(),Jr=s("p"),oa=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),en=l(),Z=s("h4"),Se=s("a"),jr=s("span"),f(ht.$$.fragment),aa=l(),Qr=s("span"),ia=i("Denoising diffusion probabilistic models (DDPM)"),tn=l(),$e=s("p"),da=i("Original paper can be found "),mt=s("a"),la=i("here"),ca=i("."),rn=l(),T=s("div"),f(gt.$$.fragment),pa=l(),Xr=s("p"),ua=i(`Denoising diffusion probabilistic models (DDPMs) explores the connections between denoising score matching and
Langevin dynamics sampling.`),fa=l(),lr=s("p"),ha=i("For more details, see the original paper: "),_t=s("a"),ma=i("https://arxiv.org/abs/2006.11239"),ga=l(),ye=s("div"),f(vt.$$.fragment),_a=l(),Zr=s("p"),va=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),ba=l(),De=s("div"),f(bt.$$.fragment),Sa=l(),es=s("p"),$a=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),sn=l(),ee=s("h4"),xe=s("a"),ts=s("span"),f(St.$$.fragment),ya=l(),rs=s("span"),Da=i("Varience exploding, stochastic sampling from Karras et. al"),nn=l(),we=s("p"),xa=i("Original paper can be found "),$t=s("a"),wa=i("here"),Ea=i("."),on=l(),S=s("div"),f(yt.$$.fragment),Pa=l(),ss=s("p"),Ta=i(`Stochastic sampling from Karras et al. [1] tailored to the Variance-Expanding (VE) models [2]. Use Algorithm 2 and
the VE column of Table 1 from [1] for reference.`),Ma=l(),Ee=s("p"),Oa=i(`[1] Karras, Tero, et al. \u201CElucidating the Design Space of Diffusion-Based Generative Models.\u201D
`),Dt=s("a"),ka=i("https://arxiv.org/abs/2206.00364"),Va=i(` [2] Song, Yang, et al. \u201CScore-based generative modeling through stochastic
differential equations.\u201D `),xt=s("a"),Na=i("https://arxiv.org/abs/2011.13456"),Aa=l(),wt=s("p"),La=i(`For more details on the parameters, see the original paper\u2019s Appendix E.: \u201CElucidating the Design Space of
Diffusion-Based Generative Models.\u201D `),Et=s("a"),Ia=i("https://arxiv.org/abs/2206.00364"),Fa=i(`. The grid search values used to find the
optimal {s_noise, s_churn, s_min, s_max} for a specific model are described in Table 5 of the paper.`),Ca=l(),I=s("div"),f(Pt.$$.fragment),Ka=l(),ns=s("p"),Ua=i(`Explicit Langevin-like \u201Cchurn\u201D step of adding noise to the sample according to a factor gamma_i \u2265 0 to reach a
higher noise level sigma_hat = sigma_i + gamma_i*sigma_i.`),qa=l(),os=s("p"),Ha=i("TODO Args:"),Ra=l(),Pe=s("div"),f(Tt.$$.fragment),Ba=l(),as=s("p"),Ga=i("Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),Wa=l(),Te=s("div"),f(Mt.$$.fragment),za=l(),is=s("p"),Ya=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Ja=l(),Me=s("div"),f(Ot.$$.fragment),ja=l(),ds=s("p"),Qa=i("Correct the predicted sample based on the output model_output of the network. TODO complete description"),an=l(),te=s("h4"),Oe=s("a"),ls=s("span"),f(kt.$$.fragment),Xa=l(),cs=s("span"),Za=i("Linear multistep scheduler for discrete beta schedules"),dn=l(),ke=s("p"),ei=i("Original implementation can be found "),Vt=s("a"),ti=i("here"),ri=i("."),ln=l(),M=s("div"),f(Nt.$$.fragment),si=l(),cr=s("p"),ni=i(`Linear Multistep Scheduler for discrete beta schedules. Based on the original k-diffusion implementation by
Katherine Crowson:
`),At=s("a"),oi=i("https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),ai=l(),Ve=s("div"),f(Lt.$$.fragment),ii=l(),ps=s("p"),di=i("Compute a linear multistep coefficient."),li=l(),Ne=s("div"),f(It.$$.fragment),ci=l(),us=s("p"),pi=i("Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),ui=l(),Ae=s("div"),f(Ft.$$.fragment),fi=l(),fs=s("p"),hi=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),cn=l(),re=s("h4"),Le=s("a"),hs=s("span"),f(Ct.$$.fragment),mi=l(),ms=s("span"),gi=i("Pseudo numerical methods for diffusion models (PNDM)"),pn=l(),Ie=s("p"),_i=i("Original implementation can be found "),Kt=s("a"),vi=i("here"),bi=i("."),un=l(),$=s("div"),f(Ut.$$.fragment),Si=l(),gs=s("p"),$i=i(`Pseudo numerical methods for diffusion models (PNDM) proposes using more advanced ODE integration techniques,
namely Runge-Kutta method and a linear multi-step method.`),yi=l(),pr=s("p"),Di=i("For more details, see the original paper: "),qt=s("a"),xi=i("https://arxiv.org/abs/2202.09778"),wi=l(),Fe=s("div"),f(Ht.$$.fragment),Ei=l(),_s=s("p"),Pi=i("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),Ti=l(),F=s("div"),f(Rt.$$.fragment),Mi=l(),vs=s("p"),Oi=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),ki=l(),L=s("p"),Vi=i("This function calls "),bs=s("code"),Ni=i("step_prk()"),Ai=i(" or "),Ss=s("code"),Li=i("step_plms()"),Ii=i(" depending on the internal variable "),$s=s("code"),Fi=i("counter"),Ci=i("."),Ki=l(),Ce=s("div"),f(Bt.$$.fragment),Ui=l(),ys=s("p"),qi=i(`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),Hi=l(),Ke=s("div"),f(Gt.$$.fragment),Ri=l(),Ds=s("p"),Bi=i(`Step function propagating the sample with the Runge-Kutta method. RK takes 4 forward passes to approximate the
solution to the differential equation.`),fn=l(),se=s("h4"),Ue=s("a"),xs=s("span"),f(Wt.$$.fragment),Gi=l(),ws=s("span"),Wi=i("variance exploding stochastic differential equation (SDE) scheduler"),hn=l(),qe=s("p"),zi=i("Original paper can be found "),zt=s("a"),Yi=i("here"),Ji=i("."),mn=l(),y=s("div"),f(Yt.$$.fragment),ji=l(),Es=s("p"),Qi=i("The variance exploding stochastic differential equation (SDE) scheduler."),Xi=l(),ur=s("p"),Zi=i("For more information, see the original paper: "),Jt=s("a"),ed=i("https://arxiv.org/abs/2011.13456"),td=l(),C=s("div"),f(jt.$$.fragment),rd=l(),Ps=s("p"),sd=i("Sets the noise scales used for the diffusion chain. Supporting function to be run before inference."),nd=l(),ne=s("p"),od=i("The sigmas control the weight of the "),Ts=s("code"),ad=i("drift"),id=i(" and "),Ms=s("code"),dd=i("diffusion"),ld=i(" components of sample update."),cd=l(),He=s("div"),f(Qt.$$.fragment),pd=l(),Os=s("p"),ud=i("Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),fd=l(),Re=s("div"),f(Xt.$$.fragment),hd=l(),ks=s("p"),md=i(`Correct the predicted sample based on the output model_output of the network. This is often run repeatedly
after making the prediction for the previous timestep.`),gd=l(),Be=s("div"),f(Zt.$$.fragment),_d=l(),Vs=s("p"),vd=i(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),gn=l(),oe=s("h4"),Ge=s("a"),Ns=s("span"),f(er.$$.fragment),bd=l(),As=s("span"),Sd=i("variance preserving stochastic differential equation (SDE) scheduler"),_n=l(),We=s("p"),$d=i("Original paper can be found "),tr=s("a"),yd=i("here"),Dd=i("."),vn=l(),f(ze.$$.fragment),bn=l(),N=s("div"),f(rr.$$.fragment),xd=l(),Ls=s("p"),wd=i("The variance preserving stochastic differential equation (SDE) scheduler."),Ed=l(),fr=s("p"),Pd=i("For more information, see the original paper: "),sr=s("a"),Td=i("https://arxiv.org/abs/2011.13456"),Md=l(),Is=s("p"),Od=i("UNDER CONSTRUCTION"),this.h()},l(t){const p=Fc('[data-svelte="svelte-1phssyn"]',document.head);D=n(p,"META",{name:!0,content:!0}),p.forEach(r),ae=c(t),E=n(t,"H1",{class:!0});var nr=o(E);V=n(nr,"A",{id:!0,class:!0,href:!0});var Cd=o(V);Sr=n(Cd,"SPAN",{});var Kd=o(Sr);h(je.$$.fragment,Kd),Kd.forEach(r),Cd.forEach(r),co=c(nr),$r=n(nr,"SPAN",{});var Ud=o($r);po=d(Ud,"Schedulers"),Ud.forEach(r),nr.forEach(r),Ks=c(t),or=n(t,"P",{});var qd=o(or);uo=d(qd,"Diffusers contains multiple pre-built schedule functions for the diffusion process."),qd.forEach(r),Us=c(t),H=n(t,"H2",{class:!0});var $n=o(H);ie=n($n,"A",{id:!0,class:!0,href:!0});var Hd=o(ie);yr=n(Hd,"SPAN",{});var Rd=o(yr);h(Qe.$$.fragment,Rd),Rd.forEach(r),Hd.forEach(r),fo=c($n),Dr=n($n,"SPAN",{});var Bd=o(Dr);ho=d(Bd,"What is a schduler?"),Bd.forEach(r),$n.forEach(r),qs=d(t,`

The schedule functions, denoted *Schedulers* in the library take in the output of a trained model, a sample which the diffusion process is iterating on, and a timestep to return a denoised sample.
`),de=n(t,"UL",{});var yn=o(de);ar=n(yn,"LI",{});var kd=o(ar);mo=d(kd,"Schedulers define the methodology for iteratively adding noise to an image or for updating a sample based on model outputs."),Xe=n(kd,"UL",{});var Dn=o(Xe);xr=n(Dn,"LI",{});var Gd=o(xr);go=d(Gd,"adding noise in different manners represent the algorithmic processes to train a diffusion model by adding noise to images."),Gd.forEach(r),_o=c(Dn),wr=n(Dn,"LI",{});var Wd=o(wr);vo=d(Wd,"for inference, the scheduler defines how to update a sample based on an output from a pretrained model."),Wd.forEach(r),Dn.forEach(r),kd.forEach(r),bo=c(yn),R=n(yn,"LI",{});var hr=o(R);So=d(hr,"Schedulers are often defined by a "),Er=n(hr,"EM",{});var zd=o(Er);$o=d(zd,"noise schedule"),zd.forEach(r),yo=d(hr," and an "),Pr=n(hr,"EM",{});var Yd=o(Pr);Do=d(Yd,"update rule"),Yd.forEach(r),xo=d(hr," to solve the differential equation solution."),hr.forEach(r),yn.forEach(r),Hs=c(t),B=n(t,"H3",{class:!0});var xn=o(B);le=n(xn,"A",{id:!0,class:!0,href:!0});var Jd=o(le);Tr=n(Jd,"SPAN",{});var jd=o(Tr);h(Ze.$$.fragment,jd),jd.forEach(r),Jd.forEach(r),wo=c(xn),Mr=n(xn,"SPAN",{});var Qd=o(Mr);Eo=d(Qd,"Discrete versus continuous schedulers"),Qd.forEach(r),xn.forEach(r),Rs=d(t,"\n\nAll schedulers take in a timestep to predict the updated version of the sample being diffused.\nThe timesteps dictate where in the diffusion process the step is, where data is generated by iterating forward in time and inference is executed by propagating backwards through timesteps.\nDifferent algorithms use timesteps that both discrete (accepting `int` inputs), such as the [DDPMScheduler](/docs/diffusers/main/en/api/schedulers#diffusers.DDPMScheduler) or [PNDMScheduler](/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler), and continuous (accepting 'float` inputs), such as the score-based schedulers [ScoreSdeVeScheduler](/docs/diffusers/main/en/api/schedulers#diffusers.ScoreSdeVeScheduler) or `ScoreSdeVpScheduler`.\n"),G=n(t,"H2",{class:!0});var wn=o(G);ce=n(wn,"A",{id:!0,class:!0,href:!0});var Xd=o(ce);Or=n(Xd,"SPAN",{});var Zd=o(Or);h(et.$$.fragment,Zd),Zd.forEach(r),Xd.forEach(r),Po=c(wn),kr=n(wn,"SPAN",{});var el=o(kr);To=d(el,"Designing Re-usable schedulers"),el.forEach(r),wn.forEach(r),Bs=d(t,`

The core design principle between the schedule functions is to be model, system, and framework independent.
This allows for rapid experimentation and cleaner abstractions in the code, where the model prediction is separated from the sample update.
To this end, the design of schedulers is such that:
- Schedulers can be used interchangeably between diffusion models in inference to find the preferred trade-off between speed and generation quality.
- Schedulers are currently by default in PyTorch, but are designed to be framework independent (partial Numpy support currently exists).
`),W=n(t,"H2",{class:!0});var En=o(W);pe=n(En,"A",{id:!0,class:!0,href:!0});var tl=o(pe);Vr=n(tl,"SPAN",{});var rl=o(Vr);h(tt.$$.fragment,rl),rl.forEach(r),tl.forEach(r),Mo=c(En),Nr=n(En,"SPAN",{});var sl=o(Nr);Oo=d(sl,"API"),sl.forEach(r),En.forEach(r),Gs=d(t,`

The core API for any new scheduler must follow a limited structure.
- Schedulers should provide one or more \`def step(...)\` functions that should be called to update the generated sample iteratively.
- Schedulers should provide a \`set_timesteps(...)\` method that configures the parameters of a schedule function for a specific inference task.
- Schedulers should be framework-agonstic, but provide a simple functionality to convert the scheduler into a specific framework, such as PyTorch
with a \`set_format(...)\` method.
`),z=n(t,"H3",{class:!0});var Pn=o(z);ue=n(Pn,"A",{id:!0,class:!0,href:!0});var nl=o(ue);Ar=n(nl,"SPAN",{});var ol=o(Ar);h(rt.$$.fragment,ol),ol.forEach(r),nl.forEach(r),ko=c(Pn),Lr=n(Pn,"SPAN",{});var al=o(Lr);Vo=d(al,"Core"),al.forEach(r),Pn.forEach(r),Ws=d(t,`

The base class [SchedulerMixin](/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin) implements low level utilities used by multiple schedulers.
`),Y=n(t,"H4",{class:!0});var Tn=o(Y);fe=n(Tn,"A",{id:!0,class:!0,href:!0});var il=o(fe);Ir=n(il,"SPAN",{});var dl=o(Ir);h(st.$$.fragment,dl),dl.forEach(r),il.forEach(r),No=c(Tn),Fr=n(Tn,"SPAN",{});var ll=o(Fr);Ao=d(ll,"SchedulerMixin"),ll.forEach(r),Tn.forEach(r),zs=c(t),A=n(t,"DIV",{class:!0});var mr=o(A);h(nt.$$.fragment,mr),Lo=c(mr),Cr=n(mr,"P",{});var cl=o(Cr);Io=d(cl,"Mixin containing common functions for the schedulers."),cl.forEach(r),Fo=c(mr),he=n(mr,"DIV",{class:!0});var Mn=o(he);h(ot.$$.fragment,Mn),Co=c(Mn),Kr=n(Mn,"P",{});var pl=o(Kr);Ko=d(pl,"Turns a 1-D array into an array or tensor with len(broadcast_array.shape) dims."),pl.forEach(r),Mn.forEach(r),mr.forEach(r),Ys=c(t),J=n(t,"H4",{class:!0});var On=o(J);me=n(On,"A",{id:!0,class:!0,href:!0});var ul=o(me);Ur=n(ul,"SPAN",{});var fl=o(Ur);h(at.$$.fragment,fl),fl.forEach(r),ul.forEach(r),Uo=c(On),qr=n(On,"SPAN",{});var hl=o(qr);qo=d(hl,"SchedulerOutput"),hl.forEach(r),On.forEach(r),Js=d(t,"\n\nThe class `SchedulerOutput` contains the ouputs from any schedulers `step(...)` call.\n"),j=n(t,"DIV",{class:!0});var kn=o(j);h(it.$$.fragment,kn),Ho=c(kn),Hr=n(kn,"P",{});var ml=o(Hr);Ro=d(ml,"Base class for the scheduler\u2019s step function output."),ml.forEach(r),kn.forEach(r),js=c(t),Q=n(t,"H3",{class:!0});var Vn=o(Q);ge=n(Vn,"A",{id:!0,class:!0,href:!0});var gl=o(ge);Rr=n(gl,"SPAN",{});var _l=o(Rr);h(dt.$$.fragment,_l),_l.forEach(r),gl.forEach(r),Bo=c(Vn),Br=n(Vn,"SPAN",{});var vl=o(Br);Go=d(vl,"Existing Schedulers"),vl.forEach(r),Vn.forEach(r),Qs=c(t),X=n(t,"H4",{class:!0});var Nn=o(X);_e=n(Nn,"A",{id:!0,class:!0,href:!0});var bl=o(_e);Gr=n(bl,"SPAN",{});var Sl=o(Gr);h(lt.$$.fragment,Sl),Sl.forEach(r),bl.forEach(r),Wo=c(Nn),Wr=n(Nn,"SPAN",{});var $l=o(Wr);zo=d($l,"Denoising diffusion implicit models (DDIM)"),$l.forEach(r),Nn.forEach(r),Xs=c(t),ir=n(t,"P",{});var yl=o(ir);Yo=d(yl,"Original paper can be found here."),yl.forEach(r),Zs=c(t),P=n(t,"DIV",{class:!0});var K=o(P);h(ct.$$.fragment,K),Jo=c(K),zr=n(K,"P",{});var Dl=o(zr);jo=d(Dl,`Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising
diffusion probabilistic models (DDPMs) with non-Markovian guidance.`),Dl.forEach(r),Qo=c(K),dr=n(K,"P",{});var Vd=o(dr);Xo=d(Vd,"For more details, see the original paper: "),pt=n(Vd,"A",{href:!0,rel:!0});var xl=o(pt);Zo=d(xl,"https://arxiv.org/abs/2010.02502"),xl.forEach(r),Vd.forEach(r),ea=c(K),ve=n(K,"DIV",{class:!0});var An=o(ve);h(ut.$$.fragment,An),ta=c(An),Yr=n(An,"P",{});var wl=o(Yr);ra=d(wl,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),wl.forEach(r),An.forEach(r),sa=c(K),be=n(K,"DIV",{class:!0});var Ln=o(be);h(ft.$$.fragment,Ln),na=c(Ln),Jr=n(Ln,"P",{});var El=o(Jr);oa=d(El,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),El.forEach(r),Ln.forEach(r),K.forEach(r),en=c(t),Z=n(t,"H4",{class:!0});var In=o(Z);Se=n(In,"A",{id:!0,class:!0,href:!0});var Pl=o(Se);jr=n(Pl,"SPAN",{});var Tl=o(jr);h(ht.$$.fragment,Tl),Tl.forEach(r),Pl.forEach(r),aa=c(In),Qr=n(In,"SPAN",{});var Ml=o(Qr);ia=d(Ml,"Denoising diffusion probabilistic models (DDPM)"),Ml.forEach(r),In.forEach(r),tn=c(t),$e=n(t,"P",{});var Fn=o($e);da=d(Fn,"Original paper can be found "),mt=n(Fn,"A",{href:!0,rel:!0});var Ol=o(mt);la=d(Ol,"here"),Ol.forEach(r),ca=d(Fn,"."),Fn.forEach(r),rn=c(t),T=n(t,"DIV",{class:!0});var U=o(T);h(gt.$$.fragment,U),pa=c(U),Xr=n(U,"P",{});var kl=o(Xr);ua=d(kl,`Denoising diffusion probabilistic models (DDPMs) explores the connections between denoising score matching and
Langevin dynamics sampling.`),kl.forEach(r),fa=c(U),lr=n(U,"P",{});var Nd=o(lr);ha=d(Nd,"For more details, see the original paper: "),_t=n(Nd,"A",{href:!0,rel:!0});var Vl=o(_t);ma=d(Vl,"https://arxiv.org/abs/2006.11239"),Vl.forEach(r),Nd.forEach(r),ga=c(U),ye=n(U,"DIV",{class:!0});var Cn=o(ye);h(vt.$$.fragment,Cn),_a=c(Cn),Zr=n(Cn,"P",{});var Nl=o(Zr);va=d(Nl,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),Nl.forEach(r),Cn.forEach(r),ba=c(U),De=n(U,"DIV",{class:!0});var Kn=o(De);h(bt.$$.fragment,Kn),Sa=c(Kn),es=n(Kn,"P",{});var Al=o(es);$a=d(Al,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Al.forEach(r),Kn.forEach(r),U.forEach(r),sn=c(t),ee=n(t,"H4",{class:!0});var Un=o(ee);xe=n(Un,"A",{id:!0,class:!0,href:!0});var Ll=o(xe);ts=n(Ll,"SPAN",{});var Il=o(ts);h(St.$$.fragment,Il),Il.forEach(r),Ll.forEach(r),ya=c(Un),rs=n(Un,"SPAN",{});var Fl=o(rs);Da=d(Fl,"Varience exploding, stochastic sampling from Karras et. al"),Fl.forEach(r),Un.forEach(r),nn=c(t),we=n(t,"P",{});var qn=o(we);xa=d(qn,"Original paper can be found "),$t=n(qn,"A",{href:!0,rel:!0});var Cl=o($t);wa=d(Cl,"here"),Cl.forEach(r),Ea=d(qn,"."),qn.forEach(r),on=c(t),S=n(t,"DIV",{class:!0});var x=o(S);h(yt.$$.fragment,x),Pa=c(x),ss=n(x,"P",{});var Kl=o(ss);Ta=d(Kl,`Stochastic sampling from Karras et al. [1] tailored to the Variance-Expanding (VE) models [2]. Use Algorithm 2 and
the VE column of Table 1 from [1] for reference.`),Kl.forEach(r),Ma=c(x),Ee=n(x,"P",{});var Fs=o(Ee);Oa=d(Fs,`[1] Karras, Tero, et al. \u201CElucidating the Design Space of Diffusion-Based Generative Models.\u201D
`),Dt=n(Fs,"A",{href:!0,rel:!0});var Ul=o(Dt);ka=d(Ul,"https://arxiv.org/abs/2206.00364"),Ul.forEach(r),Va=d(Fs,` [2] Song, Yang, et al. \u201CScore-based generative modeling through stochastic
differential equations.\u201D `),xt=n(Fs,"A",{href:!0,rel:!0});var ql=o(xt);Na=d(ql,"https://arxiv.org/abs/2011.13456"),ql.forEach(r),Fs.forEach(r),Aa=c(x),wt=n(x,"P",{});var Hn=o(wt);La=d(Hn,`For more details on the parameters, see the original paper\u2019s Appendix E.: \u201CElucidating the Design Space of
Diffusion-Based Generative Models.\u201D `),Et=n(Hn,"A",{href:!0,rel:!0});var Hl=o(Et);Ia=d(Hl,"https://arxiv.org/abs/2206.00364"),Hl.forEach(r),Fa=d(Hn,`. The grid search values used to find the
optimal {s_noise, s_churn, s_min, s_max} for a specific model are described in Table 5 of the paper.`),Hn.forEach(r),Ca=c(x),I=n(x,"DIV",{class:!0});var gr=o(I);h(Pt.$$.fragment,gr),Ka=c(gr),ns=n(gr,"P",{});var Rl=o(ns);Ua=d(Rl,`Explicit Langevin-like \u201Cchurn\u201D step of adding noise to the sample according to a factor gamma_i \u2265 0 to reach a
higher noise level sigma_hat = sigma_i + gamma_i*sigma_i.`),Rl.forEach(r),qa=c(gr),os=n(gr,"P",{});var Bl=o(os);Ha=d(Bl,"TODO Args:"),Bl.forEach(r),gr.forEach(r),Ra=c(x),Pe=n(x,"DIV",{class:!0});var Rn=o(Pe);h(Tt.$$.fragment,Rn),Ba=c(Rn),as=n(Rn,"P",{});var Gl=o(as);Ga=d(Gl,"Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),Gl.forEach(r),Rn.forEach(r),Wa=c(x),Te=n(x,"DIV",{class:!0});var Bn=o(Te);h(Mt.$$.fragment,Bn),za=c(Bn),is=n(Bn,"P",{});var Wl=o(is);Ya=d(Wl,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Wl.forEach(r),Bn.forEach(r),Ja=c(x),Me=n(x,"DIV",{class:!0});var Gn=o(Me);h(Ot.$$.fragment,Gn),ja=c(Gn),ds=n(Gn,"P",{});var zl=o(ds);Qa=d(zl,"Correct the predicted sample based on the output model_output of the network. TODO complete description"),zl.forEach(r),Gn.forEach(r),x.forEach(r),an=c(t),te=n(t,"H4",{class:!0});var Wn=o(te);Oe=n(Wn,"A",{id:!0,class:!0,href:!0});var Yl=o(Oe);ls=n(Yl,"SPAN",{});var Jl=o(ls);h(kt.$$.fragment,Jl),Jl.forEach(r),Yl.forEach(r),Xa=c(Wn),cs=n(Wn,"SPAN",{});var jl=o(cs);Za=d(jl,"Linear multistep scheduler for discrete beta schedules"),jl.forEach(r),Wn.forEach(r),dn=c(t),ke=n(t,"P",{});var zn=o(ke);ei=d(zn,"Original implementation can be found "),Vt=n(zn,"A",{href:!0,rel:!0});var Ql=o(Vt);ti=d(Ql,"here"),Ql.forEach(r),ri=d(zn,"."),zn.forEach(r),ln=c(t),M=n(t,"DIV",{class:!0});var q=o(M);h(Nt.$$.fragment,q),si=c(q),cr=n(q,"P",{});var Ad=o(cr);ni=d(Ad,`Linear Multistep Scheduler for discrete beta schedules. Based on the original k-diffusion implementation by
Katherine Crowson:
`),At=n(Ad,"A",{href:!0,rel:!0});var Xl=o(At);oi=d(Xl,"https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),Xl.forEach(r),Ad.forEach(r),ai=c(q),Ve=n(q,"DIV",{class:!0});var Yn=o(Ve);h(Lt.$$.fragment,Yn),ii=c(Yn),ps=n(Yn,"P",{});var Zl=o(ps);di=d(Zl,"Compute a linear multistep coefficient."),Zl.forEach(r),Yn.forEach(r),li=c(q),Ne=n(q,"DIV",{class:!0});var Jn=o(Ne);h(It.$$.fragment,Jn),ci=c(Jn),us=n(Jn,"P",{});var ec=o(us);pi=d(ec,"Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),ec.forEach(r),Jn.forEach(r),ui=c(q),Ae=n(q,"DIV",{class:!0});var jn=o(Ae);h(Ft.$$.fragment,jn),fi=c(jn),fs=n(jn,"P",{});var tc=o(fs);hi=d(tc,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),tc.forEach(r),jn.forEach(r),q.forEach(r),cn=c(t),re=n(t,"H4",{class:!0});var Qn=o(re);Le=n(Qn,"A",{id:!0,class:!0,href:!0});var rc=o(Le);hs=n(rc,"SPAN",{});var sc=o(hs);h(Ct.$$.fragment,sc),sc.forEach(r),rc.forEach(r),mi=c(Qn),ms=n(Qn,"SPAN",{});var nc=o(ms);gi=d(nc,"Pseudo numerical methods for diffusion models (PNDM)"),nc.forEach(r),Qn.forEach(r),pn=c(t),Ie=n(t,"P",{});var Xn=o(Ie);_i=d(Xn,"Original implementation can be found "),Kt=n(Xn,"A",{href:!0,rel:!0});var oc=o(Kt);vi=d(oc,"here"),oc.forEach(r),bi=d(Xn,"."),Xn.forEach(r),un=c(t),$=n(t,"DIV",{class:!0});var O=o($);h(Ut.$$.fragment,O),Si=c(O),gs=n(O,"P",{});var ac=o(gs);$i=d(ac,`Pseudo numerical methods for diffusion models (PNDM) proposes using more advanced ODE integration techniques,
namely Runge-Kutta method and a linear multi-step method.`),ac.forEach(r),yi=c(O),pr=n(O,"P",{});var Ld=o(pr);Di=d(Ld,"For more details, see the original paper: "),qt=n(Ld,"A",{href:!0,rel:!0});var ic=o(qt);xi=d(ic,"https://arxiv.org/abs/2202.09778"),ic.forEach(r),Ld.forEach(r),wi=c(O),Fe=n(O,"DIV",{class:!0});var Zn=o(Fe);h(Ht.$$.fragment,Zn),Ei=c(Zn),_s=n(Zn,"P",{});var dc=o(_s);Pi=d(dc,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),dc.forEach(r),Zn.forEach(r),Ti=c(O),F=n(O,"DIV",{class:!0});var _r=o(F);h(Rt.$$.fragment,_r),Mi=c(_r),vs=n(_r,"P",{});var lc=o(vs);Oi=d(lc,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),lc.forEach(r),ki=c(_r),L=n(_r,"P",{});var Ye=o(L);Vi=d(Ye,"This function calls "),bs=n(Ye,"CODE",{});var cc=o(bs);Ni=d(cc,"step_prk()"),cc.forEach(r),Ai=d(Ye," or "),Ss=n(Ye,"CODE",{});var pc=o(Ss);Li=d(pc,"step_plms()"),pc.forEach(r),Ii=d(Ye," depending on the internal variable "),$s=n(Ye,"CODE",{});var uc=o($s);Fi=d(uc,"counter"),uc.forEach(r),Ci=d(Ye,"."),Ye.forEach(r),_r.forEach(r),Ki=c(O),Ce=n(O,"DIV",{class:!0});var eo=o(Ce);h(Bt.$$.fragment,eo),Ui=c(eo),ys=n(eo,"P",{});var fc=o(ys);qi=d(fc,`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),fc.forEach(r),eo.forEach(r),Hi=c(O),Ke=n(O,"DIV",{class:!0});var to=o(Ke);h(Gt.$$.fragment,to),Ri=c(to),Ds=n(to,"P",{});var hc=o(Ds);Bi=d(hc,`Step function propagating the sample with the Runge-Kutta method. RK takes 4 forward passes to approximate the
solution to the differential equation.`),hc.forEach(r),to.forEach(r),O.forEach(r),fn=c(t),se=n(t,"H4",{class:!0});var ro=o(se);Ue=n(ro,"A",{id:!0,class:!0,href:!0});var mc=o(Ue);xs=n(mc,"SPAN",{});var gc=o(xs);h(Wt.$$.fragment,gc),gc.forEach(r),mc.forEach(r),Gi=c(ro),ws=n(ro,"SPAN",{});var _c=o(ws);Wi=d(_c,"variance exploding stochastic differential equation (SDE) scheduler"),_c.forEach(r),ro.forEach(r),hn=c(t),qe=n(t,"P",{});var so=o(qe);zi=d(so,"Original paper can be found "),zt=n(so,"A",{href:!0,rel:!0});var vc=o(zt);Yi=d(vc,"here"),vc.forEach(r),Ji=d(so,"."),so.forEach(r),mn=c(t),y=n(t,"DIV",{class:!0});var k=o(y);h(Yt.$$.fragment,k),ji=c(k),Es=n(k,"P",{});var bc=o(Es);Qi=d(bc,"The variance exploding stochastic differential equation (SDE) scheduler."),bc.forEach(r),Xi=c(k),ur=n(k,"P",{});var Id=o(ur);Zi=d(Id,"For more information, see the original paper: "),Jt=n(Id,"A",{href:!0,rel:!0});var Sc=o(Jt);ed=d(Sc,"https://arxiv.org/abs/2011.13456"),Sc.forEach(r),Id.forEach(r),td=c(k),C=n(k,"DIV",{class:!0});var vr=o(C);h(jt.$$.fragment,vr),rd=c(vr),Ps=n(vr,"P",{});var $c=o(Ps);sd=d($c,"Sets the noise scales used for the diffusion chain. Supporting function to be run before inference."),$c.forEach(r),nd=c(vr),ne=n(vr,"P",{});var br=o(ne);od=d(br,"The sigmas control the weight of the "),Ts=n(br,"CODE",{});var yc=o(Ts);ad=d(yc,"drift"),yc.forEach(r),id=d(br," and "),Ms=n(br,"CODE",{});var Dc=o(Ms);dd=d(Dc,"diffusion"),Dc.forEach(r),ld=d(br," components of sample update."),br.forEach(r),vr.forEach(r),cd=c(k),He=n(k,"DIV",{class:!0});var no=o(He);h(Qt.$$.fragment,no),pd=c(no),Os=n(no,"P",{});var xc=o(Os);ud=d(xc,"Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),xc.forEach(r),no.forEach(r),fd=c(k),Re=n(k,"DIV",{class:!0});var oo=o(Re);h(Xt.$$.fragment,oo),hd=c(oo),ks=n(oo,"P",{});var wc=o(ks);md=d(wc,`Correct the predicted sample based on the output model_output of the network. This is often run repeatedly
after making the prediction for the previous timestep.`),wc.forEach(r),oo.forEach(r),gd=c(k),Be=n(k,"DIV",{class:!0});var ao=o(Be);h(Zt.$$.fragment,ao),_d=c(ao),Vs=n(ao,"P",{});var Ec=o(Vs);vd=d(Ec,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Ec.forEach(r),ao.forEach(r),k.forEach(r),gn=c(t),oe=n(t,"H4",{class:!0});var io=o(oe);Ge=n(io,"A",{id:!0,class:!0,href:!0});var Pc=o(Ge);Ns=n(Pc,"SPAN",{});var Tc=o(Ns);h(er.$$.fragment,Tc),Tc.forEach(r),Pc.forEach(r),bd=c(io),As=n(io,"SPAN",{});var Mc=o(As);Sd=d(Mc,"variance preserving stochastic differential equation (SDE) scheduler"),Mc.forEach(r),io.forEach(r),_n=c(t),We=n(t,"P",{});var lo=o(We);$d=d(lo,"Original paper can be found "),tr=n(lo,"A",{href:!0,rel:!0});var Oc=o(tr);yd=d(Oc,"here"),Oc.forEach(r),Dd=d(lo,"."),lo.forEach(r),vn=c(t),h(ze.$$.fragment,t),bn=c(t),N=n(t,"DIV",{class:!0});var Je=o(N);h(rr.$$.fragment,Je),xd=c(Je),Ls=n(Je,"P",{});var kc=o(Ls);wd=d(kc,"The variance preserving stochastic differential equation (SDE) scheduler."),kc.forEach(r),Ed=c(Je),fr=n(Je,"P",{});var Fd=o(fr);Pd=d(Fd,"For more information, see the original paper: "),sr=n(Fd,"A",{href:!0,rel:!0});var Vc=o(sr);Td=d(Vc,"https://arxiv.org/abs/2011.13456"),Vc.forEach(r),Fd.forEach(r),Md=c(Je),Is=n(Je,"P",{});var Nc=o(Is);Od=d(Nc,"UNDER CONSTRUCTION"),Nc.forEach(r),Je.forEach(r),this.h()},h(){a(D,"name","hf:doc:metadata"),a(D,"content",JSON.stringify(Hc)),a(V,"id","schedulers"),a(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(V,"href","#schedulers"),a(E,"class","relative group"),a(ie,"id","what-is-a-schduler"),a(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(ie,"href","#what-is-a-schduler"),a(H,"class","relative group"),a(le,"id","discrete-versus-continuous-schedulers"),a(le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(le,"href","#discrete-versus-continuous-schedulers"),a(B,"class","relative group"),a(ce,"id","designing-reusable-schedulers"),a(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(ce,"href","#designing-reusable-schedulers"),a(G,"class","relative group"),a(pe,"id","api"),a(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(pe,"href","#api"),a(W,"class","relative group"),a(ue,"id","core"),a(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(ue,"href","#core"),a(z,"class","relative group"),a(fe,"id","diffusers.SchedulerMixin"),a(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(fe,"href","#diffusers.SchedulerMixin"),a(Y,"class","relative group"),a(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(me,"id","diffusers.schedulers.scheduling_utils.SchedulerOutput"),a(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(me,"href","#diffusers.schedulers.scheduling_utils.SchedulerOutput"),a(J,"class","relative group"),a(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(ge,"id","existing-schedulers"),a(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(ge,"href","#existing-schedulers"),a(Q,"class","relative group"),a(_e,"id","diffusers.DDIMScheduler"),a(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(_e,"href","#diffusers.DDIMScheduler"),a(X,"class","relative group"),a(pt,"href","https://arxiv.org/abs/2010.02502"),a(pt,"rel","nofollow"),a(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Se,"id","diffusers.DDPMScheduler"),a(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Se,"href","#diffusers.DDPMScheduler"),a(Z,"class","relative group"),a(mt,"href","https://arxiv.org/abs/2010.02502"),a(mt,"rel","nofollow"),a(_t,"href","https://arxiv.org/abs/2006.11239"),a(_t,"rel","nofollow"),a(ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(xe,"id","diffusers.KarrasVeScheduler"),a(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(xe,"href","#diffusers.KarrasVeScheduler"),a(ee,"class","relative group"),a($t,"href","https://arxiv.org/abs/2006.11239"),a($t,"rel","nofollow"),a(Dt,"href","https://arxiv.org/abs/2206.00364"),a(Dt,"rel","nofollow"),a(xt,"href","https://arxiv.org/abs/2011.13456"),a(xt,"rel","nofollow"),a(Et,"href","https://arxiv.org/abs/2206.00364"),a(Et,"rel","nofollow"),a(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Me,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Oe,"id","diffusers.LMSDiscreteScheduler"),a(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Oe,"href","#diffusers.LMSDiscreteScheduler"),a(te,"class","relative group"),a(Vt,"href","https://arxiv.org/abs/2206.00364"),a(Vt,"rel","nofollow"),a(At,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),a(At,"rel","nofollow"),a(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Ae,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Le,"id","diffusers.PNDMScheduler"),a(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Le,"href","#diffusers.PNDMScheduler"),a(re,"class","relative group"),a(Kt,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),a(Kt,"rel","nofollow"),a(qt,"href","https://arxiv.org/abs/2202.09778"),a(qt,"rel","nofollow"),a(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(F,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Ue,"id","diffusers.ScoreSdeVeScheduler"),a(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Ue,"href","#diffusers.ScoreSdeVeScheduler"),a(se,"class","relative group"),a(zt,"href","https://arxiv.org/abs/2011.13456"),a(zt,"rel","nofollow"),a(Jt,"href","https://arxiv.org/abs/2011.13456"),a(Jt,"rel","nofollow"),a(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),a(Ge,"id","diffusers.schedulers.ScoreSdeVpScheduler"),a(Ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),a(Ge,"href","#diffusers.schedulers.ScoreSdeVpScheduler"),a(oe,"class","relative group"),a(tr,"href","https://arxiv.org/abs/2011.13456"),a(tr,"rel","nofollow"),a(sr,"href","https://arxiv.org/abs/2011.13456"),a(sr,"rel","nofollow"),a(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,D),u(t,ae,p),u(t,E,p),e(E,V),e(V,Sr),m(je,Sr,null),e(E,co),e(E,$r),e($r,po),u(t,Ks,p),u(t,or,p),e(or,uo),u(t,Us,p),u(t,H,p),e(H,ie),e(ie,yr),m(Qe,yr,null),e(H,fo),e(H,Dr),e(Dr,ho),u(t,qs,p),u(t,de,p),e(de,ar),e(ar,mo),e(ar,Xe),e(Xe,xr),e(xr,go),e(Xe,_o),e(Xe,wr),e(wr,vo),e(de,bo),e(de,R),e(R,So),e(R,Er),e(Er,$o),e(R,yo),e(R,Pr),e(Pr,Do),e(R,xo),u(t,Hs,p),u(t,B,p),e(B,le),e(le,Tr),m(Ze,Tr,null),e(B,wo),e(B,Mr),e(Mr,Eo),u(t,Rs,p),u(t,G,p),e(G,ce),e(ce,Or),m(et,Or,null),e(G,Po),e(G,kr),e(kr,To),u(t,Bs,p),u(t,W,p),e(W,pe),e(pe,Vr),m(tt,Vr,null),e(W,Mo),e(W,Nr),e(Nr,Oo),u(t,Gs,p),u(t,z,p),e(z,ue),e(ue,Ar),m(rt,Ar,null),e(z,ko),e(z,Lr),e(Lr,Vo),u(t,Ws,p),u(t,Y,p),e(Y,fe),e(fe,Ir),m(st,Ir,null),e(Y,No),e(Y,Fr),e(Fr,Ao),u(t,zs,p),u(t,A,p),m(nt,A,null),e(A,Lo),e(A,Cr),e(Cr,Io),e(A,Fo),e(A,he),m(ot,he,null),e(he,Co),e(he,Kr),e(Kr,Ko),u(t,Ys,p),u(t,J,p),e(J,me),e(me,Ur),m(at,Ur,null),e(J,Uo),e(J,qr),e(qr,qo),u(t,Js,p),u(t,j,p),m(it,j,null),e(j,Ho),e(j,Hr),e(Hr,Ro),u(t,js,p),u(t,Q,p),e(Q,ge),e(ge,Rr),m(dt,Rr,null),e(Q,Bo),e(Q,Br),e(Br,Go),u(t,Qs,p),u(t,X,p),e(X,_e),e(_e,Gr),m(lt,Gr,null),e(X,Wo),e(X,Wr),e(Wr,zo),u(t,Xs,p),u(t,ir,p),e(ir,Yo),u(t,Zs,p),u(t,P,p),m(ct,P,null),e(P,Jo),e(P,zr),e(zr,jo),e(P,Qo),e(P,dr),e(dr,Xo),e(dr,pt),e(pt,Zo),e(P,ea),e(P,ve),m(ut,ve,null),e(ve,ta),e(ve,Yr),e(Yr,ra),e(P,sa),e(P,be),m(ft,be,null),e(be,na),e(be,Jr),e(Jr,oa),u(t,en,p),u(t,Z,p),e(Z,Se),e(Se,jr),m(ht,jr,null),e(Z,aa),e(Z,Qr),e(Qr,ia),u(t,tn,p),u(t,$e,p),e($e,da),e($e,mt),e(mt,la),e($e,ca),u(t,rn,p),u(t,T,p),m(gt,T,null),e(T,pa),e(T,Xr),e(Xr,ua),e(T,fa),e(T,lr),e(lr,ha),e(lr,_t),e(_t,ma),e(T,ga),e(T,ye),m(vt,ye,null),e(ye,_a),e(ye,Zr),e(Zr,va),e(T,ba),e(T,De),m(bt,De,null),e(De,Sa),e(De,es),e(es,$a),u(t,sn,p),u(t,ee,p),e(ee,xe),e(xe,ts),m(St,ts,null),e(ee,ya),e(ee,rs),e(rs,Da),u(t,nn,p),u(t,we,p),e(we,xa),e(we,$t),e($t,wa),e(we,Ea),u(t,on,p),u(t,S,p),m(yt,S,null),e(S,Pa),e(S,ss),e(ss,Ta),e(S,Ma),e(S,Ee),e(Ee,Oa),e(Ee,Dt),e(Dt,ka),e(Ee,Va),e(Ee,xt),e(xt,Na),e(S,Aa),e(S,wt),e(wt,La),e(wt,Et),e(Et,Ia),e(wt,Fa),e(S,Ca),e(S,I),m(Pt,I,null),e(I,Ka),e(I,ns),e(ns,Ua),e(I,qa),e(I,os),e(os,Ha),e(S,Ra),e(S,Pe),m(Tt,Pe,null),e(Pe,Ba),e(Pe,as),e(as,Ga),e(S,Wa),e(S,Te),m(Mt,Te,null),e(Te,za),e(Te,is),e(is,Ya),e(S,Ja),e(S,Me),m(Ot,Me,null),e(Me,ja),e(Me,ds),e(ds,Qa),u(t,an,p),u(t,te,p),e(te,Oe),e(Oe,ls),m(kt,ls,null),e(te,Xa),e(te,cs),e(cs,Za),u(t,dn,p),u(t,ke,p),e(ke,ei),e(ke,Vt),e(Vt,ti),e(ke,ri),u(t,ln,p),u(t,M,p),m(Nt,M,null),e(M,si),e(M,cr),e(cr,ni),e(cr,At),e(At,oi),e(M,ai),e(M,Ve),m(Lt,Ve,null),e(Ve,ii),e(Ve,ps),e(ps,di),e(M,li),e(M,Ne),m(It,Ne,null),e(Ne,ci),e(Ne,us),e(us,pi),e(M,ui),e(M,Ae),m(Ft,Ae,null),e(Ae,fi),e(Ae,fs),e(fs,hi),u(t,cn,p),u(t,re,p),e(re,Le),e(Le,hs),m(Ct,hs,null),e(re,mi),e(re,ms),e(ms,gi),u(t,pn,p),u(t,Ie,p),e(Ie,_i),e(Ie,Kt),e(Kt,vi),e(Ie,bi),u(t,un,p),u(t,$,p),m(Ut,$,null),e($,Si),e($,gs),e(gs,$i),e($,yi),e($,pr),e(pr,Di),e(pr,qt),e(qt,xi),e($,wi),e($,Fe),m(Ht,Fe,null),e(Fe,Ei),e(Fe,_s),e(_s,Pi),e($,Ti),e($,F),m(Rt,F,null),e(F,Mi),e(F,vs),e(vs,Oi),e(F,ki),e(F,L),e(L,Vi),e(L,bs),e(bs,Ni),e(L,Ai),e(L,Ss),e(Ss,Li),e(L,Ii),e(L,$s),e($s,Fi),e(L,Ci),e($,Ki),e($,Ce),m(Bt,Ce,null),e(Ce,Ui),e(Ce,ys),e(ys,qi),e($,Hi),e($,Ke),m(Gt,Ke,null),e(Ke,Ri),e(Ke,Ds),e(Ds,Bi),u(t,fn,p),u(t,se,p),e(se,Ue),e(Ue,xs),m(Wt,xs,null),e(se,Gi),e(se,ws),e(ws,Wi),u(t,hn,p),u(t,qe,p),e(qe,zi),e(qe,zt),e(zt,Yi),e(qe,Ji),u(t,mn,p),u(t,y,p),m(Yt,y,null),e(y,ji),e(y,Es),e(Es,Qi),e(y,Xi),e(y,ur),e(ur,Zi),e(ur,Jt),e(Jt,ed),e(y,td),e(y,C),m(jt,C,null),e(C,rd),e(C,Ps),e(Ps,sd),e(C,nd),e(C,ne),e(ne,od),e(ne,Ts),e(Ts,ad),e(ne,id),e(ne,Ms),e(Ms,dd),e(ne,ld),e(y,cd),e(y,He),m(Qt,He,null),e(He,pd),e(He,Os),e(Os,ud),e(y,fd),e(y,Re),m(Xt,Re,null),e(Re,hd),e(Re,ks),e(ks,md),e(y,gd),e(y,Be),m(Zt,Be,null),e(Be,_d),e(Be,Vs),e(Vs,vd),u(t,gn,p),u(t,oe,p),e(oe,Ge),e(Ge,Ns),m(er,Ns,null),e(oe,bd),e(oe,As),e(As,Sd),u(t,_n,p),u(t,We,p),e(We,$d),e(We,tr),e(tr,yd),e(We,Dd),u(t,vn,p),m(ze,t,p),u(t,bn,p),u(t,N,p),m(rr,N,null),e(N,xd),e(N,Ls),e(Ls,wd),e(N,Ed),e(N,fr),e(fr,Pd),e(fr,sr),e(sr,Td),e(N,Md),e(N,Is),e(Is,Od),Sn=!0},p(t,[p]){const nr={};p&2&&(nr.$$scope={dirty:p,ctx:t}),ze.$set(nr)},i(t){Sn||(g(je.$$.fragment,t),g(Qe.$$.fragment,t),g(Ze.$$.fragment,t),g(et.$$.fragment,t),g(tt.$$.fragment,t),g(rt.$$.fragment,t),g(st.$$.fragment,t),g(nt.$$.fragment,t),g(ot.$$.fragment,t),g(at.$$.fragment,t),g(it.$$.fragment,t),g(dt.$$.fragment,t),g(lt.$$.fragment,t),g(ct.$$.fragment,t),g(ut.$$.fragment,t),g(ft.$$.fragment,t),g(ht.$$.fragment,t),g(gt.$$.fragment,t),g(vt.$$.fragment,t),g(bt.$$.fragment,t),g(St.$$.fragment,t),g(yt.$$.fragment,t),g(Pt.$$.fragment,t),g(Tt.$$.fragment,t),g(Mt.$$.fragment,t),g(Ot.$$.fragment,t),g(kt.$$.fragment,t),g(Nt.$$.fragment,t),g(Lt.$$.fragment,t),g(It.$$.fragment,t),g(Ft.$$.fragment,t),g(Ct.$$.fragment,t),g(Ut.$$.fragment,t),g(Ht.$$.fragment,t),g(Rt.$$.fragment,t),g(Bt.$$.fragment,t),g(Gt.$$.fragment,t),g(Wt.$$.fragment,t),g(Yt.$$.fragment,t),g(jt.$$.fragment,t),g(Qt.$$.fragment,t),g(Xt.$$.fragment,t),g(Zt.$$.fragment,t),g(er.$$.fragment,t),g(ze.$$.fragment,t),g(rr.$$.fragment,t),Sn=!0)},o(t){_(je.$$.fragment,t),_(Qe.$$.fragment,t),_(Ze.$$.fragment,t),_(et.$$.fragment,t),_(tt.$$.fragment,t),_(rt.$$.fragment,t),_(st.$$.fragment,t),_(nt.$$.fragment,t),_(ot.$$.fragment,t),_(at.$$.fragment,t),_(it.$$.fragment,t),_(dt.$$.fragment,t),_(lt.$$.fragment,t),_(ct.$$.fragment,t),_(ut.$$.fragment,t),_(ft.$$.fragment,t),_(ht.$$.fragment,t),_(gt.$$.fragment,t),_(vt.$$.fragment,t),_(bt.$$.fragment,t),_(St.$$.fragment,t),_(yt.$$.fragment,t),_(Pt.$$.fragment,t),_(Tt.$$.fragment,t),_(Mt.$$.fragment,t),_(Ot.$$.fragment,t),_(kt.$$.fragment,t),_(Nt.$$.fragment,t),_(Lt.$$.fragment,t),_(It.$$.fragment,t),_(Ft.$$.fragment,t),_(Ct.$$.fragment,t),_(Ut.$$.fragment,t),_(Ht.$$.fragment,t),_(Rt.$$.fragment,t),_(Bt.$$.fragment,t),_(Gt.$$.fragment,t),_(Wt.$$.fragment,t),_(Yt.$$.fragment,t),_(jt.$$.fragment,t),_(Qt.$$.fragment,t),_(Xt.$$.fragment,t),_(Zt.$$.fragment,t),_(er.$$.fragment,t),_(ze.$$.fragment,t),_(rr.$$.fragment,t),Sn=!1},d(t){r(D),t&&r(ae),t&&r(E),v(je),t&&r(Ks),t&&r(or),t&&r(Us),t&&r(H),v(Qe),t&&r(qs),t&&r(de),t&&r(Hs),t&&r(B),v(Ze),t&&r(Rs),t&&r(G),v(et),t&&r(Bs),t&&r(W),v(tt),t&&r(Gs),t&&r(z),v(rt),t&&r(Ws),t&&r(Y),v(st),t&&r(zs),t&&r(A),v(nt),v(ot),t&&r(Ys),t&&r(J),v(at),t&&r(Js),t&&r(j),v(it),t&&r(js),t&&r(Q),v(dt),t&&r(Qs),t&&r(X),v(lt),t&&r(Xs),t&&r(ir),t&&r(Zs),t&&r(P),v(ct),v(ut),v(ft),t&&r(en),t&&r(Z),v(ht),t&&r(tn),t&&r($e),t&&r(rn),t&&r(T),v(gt),v(vt),v(bt),t&&r(sn),t&&r(ee),v(St),t&&r(nn),t&&r(we),t&&r(on),t&&r(S),v(yt),v(Pt),v(Tt),v(Mt),v(Ot),t&&r(an),t&&r(te),v(kt),t&&r(dn),t&&r(ke),t&&r(ln),t&&r(M),v(Nt),v(Lt),v(It),v(Ft),t&&r(cn),t&&r(re),v(Ct),t&&r(pn),t&&r(Ie),t&&r(un),t&&r($),v(Ut),v(Ht),v(Rt),v(Bt),v(Gt),t&&r(fn),t&&r(se),v(Wt),t&&r(hn),t&&r(qe),t&&r(mn),t&&r(y),v(Yt),v(jt),v(Qt),v(Xt),v(Zt),t&&r(gn),t&&r(oe),v(er),t&&r(_n),t&&r(We),t&&r(vn),v(ze,t),t&&r(bn),t&&r(N),v(rr)}}}const Hc={local:"schedulers",sections:[{local:"what-is-a-schduler",sections:[{local:"discrete-versus-continuous-schedulers",title:"Discrete versus continuous schedulers"}],title:"What is a schduler?"},{local:"designing-reusable-schedulers",title:"Designing Re-usable schedulers"},{local:"api",sections:[{local:"core",sections:[{local:"diffusers.SchedulerMixin",title:"SchedulerMixin"},{local:"diffusers.schedulers.scheduling_utils.SchedulerOutput",title:"SchedulerOutput"}],title:"Core"},{local:"existing-schedulers",sections:[{local:"diffusers.DDIMScheduler",title:"Denoising diffusion implicit models (DDIM)"},{local:"diffusers.DDPMScheduler",title:"Denoising diffusion probabilistic models (DDPM)"},{local:"diffusers.KarrasVeScheduler",title:"Varience exploding, stochastic sampling from Karras et. al"},{local:"diffusers.LMSDiscreteScheduler",title:"Linear multistep scheduler for discrete beta schedules"},{local:"diffusers.PNDMScheduler",title:"Pseudo numerical methods for diffusion models (PNDM)"},{local:"diffusers.ScoreSdeVeScheduler",title:"variance exploding stochastic differential equation (SDE) scheduler"},{local:"diffusers.schedulers.ScoreSdeVpScheduler",title:"variance preserving stochastic differential equation (SDE) scheduler"}],title:"Existing Schedulers"}],title:"API"}],title:"Schedulers"};function Rc(Cs){return Cc(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Yc extends Ac{constructor(D){super();Lc(this,D,Rc,qc,Ic,{})}}export{Yc as default,Hc as metadata};
