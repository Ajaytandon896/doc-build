import{S as ng,i as og,s as ag,e as s,k as l,w as p,t as a,M as ig,c as n,d as r,m as c,a as o,x as h,h as i,b as d,G as e,g as f,y as m,q as g,o as _,B as v,v as dg}from"../../chunks/vendor-hf-doc-builder.js";import{T as lg}from"../../chunks/Tip-hf-doc-builder.js";import{D as b}from"../../chunks/Docstring-hf-doc-builder.js";import{I as z}from"../../chunks/IconCopyLink-hf-doc-builder.js";function cg(mo){let N,De;return{c(){N=s("p"),De=a("Score SDE-VP is under construction.")},l(F){N=n(F,"P",{});var J=o(N);De=i(J,"Score SDE-VP is under construction."),J.forEach(r)},m(F,J){f(F,N,J),e(N,De)},d(F){F&&r(N)}}}function ug(mo){let N,De,F,J,ys,ht,ja,$s,Qa,go,Er,Xa,_o,ae,xe,Ds,mt,Za,xs,ei,vo,Ee,ti,Es,ri,si,bo,we,wr,ni,gt,ws,oi,ai,Ms,ii,di,ie,li,Ps,ci,ui,Ts,fi,pi,So,de,Me,Os,_t,hi,ks,mi,yo,D,gi,Cs,_i,vi,Mr,bi,Si,Pr,yi,$i,Vs,Di,xi,Tr,Ei,wi,As,Mi,Pi,$o,le,Pe,Ns,vt,Ti,Ls,Oi,Do,Or,ki,xo,Te,Is,Ci,Vi,Fs,Ai,Eo,ce,Oe,Ks,bt,Ni,Us,Li,wo,kr,Ii,Mo,te,St,Fi,qs,Ki,Ui,qi,yt,Hi,Hs,Ri,Wi,Bi,$t,Gi,Rs,zi,Yi,Po,ke,Ji,Cr,ji,Qi,To,ue,Ce,Ws,Dt,Xi,Bs,Zi,Oo,Z,xt,ed,Gs,td,rd,Ve,Et,sd,zs,nd,ko,fe,Ae,Ys,wt,od,Js,ad,Co,pe,Mt,id,js,dd,Vo,he,Ne,Qs,Pt,ld,Xs,cd,Ao,me,Le,Zs,Tt,ud,en,fd,No,Vr,pd,Lo,C,Ot,hd,tn,md,gd,x,Ar,_d,vd,rn,bd,Sd,sn,yd,$d,nn,Dd,xd,Nr,Ed,wd,Lr,Md,Pd,Ir,Td,Od,kd,Fr,Cd,kt,Vd,Ad,Ie,Ct,Nd,on,Ld,Id,Fe,Vt,Fd,an,Kd,Io,ge,Ke,dn,At,Ud,ln,qd,Fo,Ue,Hd,Nt,Rd,Wd,Ko,V,Lt,Bd,cn,Gd,zd,E,Kr,Yd,Jd,un,jd,Qd,fn,Xd,Zd,pn,el,tl,Ur,rl,sl,qr,nl,ol,Hr,al,il,dl,Rr,ll,It,cl,ul,qe,Ft,fl,hn,pl,hl,He,Kt,ml,mn,gl,Uo,_e,Re,gn,Ut,_l,_n,vl,qo,We,bl,qt,Sl,yl,Ho,S,Ht,$l,vn,Dl,xl,Be,El,Rt,wl,Ml,Wt,Pl,Tl,w,Wr,Ol,kl,bn,Cl,Vl,Sn,Al,Nl,yn,Ll,Il,Br,Fl,Kl,Gr,Ul,ql,zr,Hl,Rl,Wl,Bt,Bl,Gt,Gl,zl,Yl,re,zt,Jl,$n,jl,Ql,Dn,Xl,Zl,Ge,Yt,ec,xn,tc,rc,ze,Jt,sc,En,nc,oc,Ye,jt,ac,wn,ic,Ro,ve,Je,Mn,Qt,dc,Pn,lc,Wo,je,cc,Xt,uc,fc,Bo,A,Zt,pc,Yr,hc,er,mc,gc,M,Jr,_c,vc,Tn,bc,Sc,On,yc,$c,kn,Dc,xc,jr,Ec,wc,Qr,Mc,Pc,Xr,Tc,Oc,kc,Qe,tr,Cc,Cn,Vc,Ac,Xe,rr,Nc,Vn,Lc,Ic,Ze,sr,Fc,An,Kc,Go,be,et,Nn,nr,Uc,Ln,qc,zo,tt,Hc,or,Rc,Wc,Yo,y,ar,Bc,In,Gc,zc,P,Zr,Yc,Jc,Fn,jc,Qc,Kn,Xc,Zc,Un,eu,tu,es,ru,su,ts,nu,ou,rs,au,iu,du,ss,lu,ir,cu,uu,rt,dr,fu,qn,pu,hu,se,lr,mu,Hn,gu,_u,ee,vu,Rn,bu,Su,Wn,yu,$u,Bn,Du,xu,Eu,st,cr,wu,Gn,Mu,Pu,nt,ur,Tu,zn,Ou,Jo,Se,ot,Yn,fr,ku,Jn,Cu,jo,at,Vu,pr,Au,Nu,Qo,$,hr,Lu,jn,Iu,Fu,ns,Ku,mr,Uu,qu,T,os,Hu,Ru,Qn,Wu,Bu,Xn,Gu,zu,Zn,Yu,Ju,as,ju,Qu,is,Xu,Zu,ds,ef,tf,rf,ne,gr,sf,eo,nf,of,ye,af,to,df,lf,ro,cf,uf,ff,it,_r,pf,so,hf,mf,dt,vr,gf,no,_f,vf,lt,br,bf,oo,Sf,Xo,$e,ct,ao,Sr,yf,io,$f,Zo,ut,Df,yr,xf,Ef,ea,ft,ta,K,$r,wf,lo,Mf,Pf,O,ls,Tf,Of,co,kf,Cf,uo,Vf,Af,fo,Nf,Lf,cs,If,Ff,us,Kf,Uf,fs,qf,Hf,Rf,ps,Wf,Dr,Bf,Gf,po,zf,ra;return ht=new z({}),mt=new z({}),_t=new z({}),vt=new z({}),bt=new z({}),Dt=new z({}),xt=new b({props:{name:"class diffusers.SchedulerMixin",anchor:"diffusers.SchedulerMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L40"}}),Et=new b({props:{name:"match_shape",anchor:"diffusers.SchedulerMixin.match_shape",parameters:[{name:"values",val:": typing.Union[numpy.ndarray, torch.Tensor]"},{name:"broadcast_array",val:": typing.Union[numpy.ndarray, torch.Tensor]"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L77",returnDescription:`
<p>a tensor of shape [batch_size, 1, \u2026] where the shape has K dims.</p>
`}}),wt=new z({}),Mt=new b({props:{name:"class diffusers.schedulers.scheduling_utils.SchedulerOutput",anchor:"diffusers.schedulers.scheduling_utils.SchedulerOutput",parameters:[{name:"prev_sample",val:": FloatTensor"}],parametersDescription:[{anchor:"diffusers.schedulers.scheduling_utils.SchedulerOutput.prev_sample",description:`<strong>prev_sample</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code> for images) &#x2014;
Computed sample (x_{t-1}) of previous timestep. <code>prev_sample</code> should be used as next model input in the
denoising loop.`,name:"prev_sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_utils.py#L27"}}),Pt=new z({}),Tt=new z({}),Ot=new b({props:{name:"class diffusers.DDIMScheduler",anchor:"diffusers.DDIMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"timestep_values",val:": typing.Optional[numpy.ndarray] = None"},{name:"clip_sample",val:": bool = True"},{name:"set_alpha_to_one",val:": bool = True"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.DDIMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.DDIMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.DDIMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.DDIMScheduler.trained_betas",description:"<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO",name:"trained_betas"},{anchor:"diffusers.DDIMScheduler.timestep_values",description:"<strong>timestep_values</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO",name:"timestep_values"},{anchor:"diffusers.DDIMScheduler.clip_sample",description:`<strong>clip_sample</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
option to clip predicted sample between -1 and 1 for numerical stability.`,name:"clip_sample"},{anchor:"diffusers.DDIMScheduler.set_alpha_to_one",description:`<strong>set_alpha_to_one</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
if alpha for final step is 1 or the final alpha of the &#x201C;non-previous&#x201D; one.`,name:"set_alpha_to_one"},{anchor:"diffusers.DDIMScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L57"}}),Ct=new b({props:{name:"set_timesteps",anchor:"diffusers.DDIMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"offset",val:": int = 0"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.DDIMScheduler.set_timesteps.offset",description:"<strong>offset</strong> (<code>int</code>) &#x2014; TODO",name:"offset"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L138"}}),Vt=new b({props:{name:"step",anchor:"diffusers.DDIMScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"eta",val:": float = 0.0"},{name:"use_clipped_model_output",val:": bool = False"},{name:"generator",val:" = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDIMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.DDIMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.DDIMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.DDIMScheduler.step.eta",description:"<strong>eta</strong> (<code>float</code>) &#x2014; weight of noise for added noise in diffusion step.",name:"eta"},{anchor:"diffusers.DDIMScheduler.step.use_clipped_model_output",description:`<strong>use_clipped_model_output</strong> (<code>bool</code>) &#x2014; TODO
generator &#x2014; random number generator.`,name:"use_clipped_model_output"},{anchor:"diffusers.DDIMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddim.py#L154",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> or <code>tuple</code></p>
`}}),At=new z({}),Lt=new b({props:{name:"class diffusers.DDPMScheduler",anchor:"diffusers.DDPMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"variance_type",val:": str = 'fixed_small'"},{name:"clip_sample",val:": bool = True"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.DDPMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.DDPMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.DDPMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.DDPMScheduler.trained_betas",description:"<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO",name:"trained_betas"},{anchor:"diffusers.DDPMScheduler.variance_type",description:`<strong>variance_type</strong> (<code>str</code>) &#x2014;
options to clip the variance used when adding noise to the denoised sample. Choose from <code>fixed_small</code>,
<code>fixed_small_log</code>, <code>fixed_large</code>, <code>fixed_large_log</code>, <code>learned</code> or <code>learned_range</code>.`,name:"variance_type"},{anchor:"diffusers.DDPMScheduler.clip_sample",description:`<strong>clip_sample</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
option to clip predicted sample between -1 and 1 for numerical stability.`,name:"clip_sample"},{anchor:"diffusers.DDPMScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L56"}}),Ft=new b({props:{name:"set_timesteps",anchor:"diffusers.DDPMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L124"}}),Kt=new b({props:{name:"step",anchor:"diffusers.DDPMScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"predict_epsilon",val:" = True"},{name:"generator",val:" = None"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.DDPMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.DDPMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.DDPMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.DDPMScheduler.step.eta",description:"<strong>eta</strong> (<code>float</code>) &#x2014; weight of noise for added noise in diffusion step.",name:"eta"},{anchor:"diffusers.DDPMScheduler.step.predict_epsilon",description:`<strong>predict_epsilon</strong> (<code>bool</code>) &#x2014;
optional flag to use when model predicts the samples directly instead of the noise, epsilon.
generator &#x2014; random number generator.`,name:"predict_epsilon"},{anchor:"diffusers.DDPMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_ddpm.py#L172",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> or <code>tuple</code></p>
`}}),Ut=new z({}),Ht=new b({props:{name:"class diffusers.KarrasVeScheduler",anchor:"diffusers.KarrasVeScheduler",parameters:[{name:"sigma_min",val:": float = 0.02"},{name:"sigma_max",val:": float = 100"},{name:"s_noise",val:": float = 1.007"},{name:"s_churn",val:": float = 80"},{name:"s_min",val:": float = 0.05"},{name:"s_max",val:": float = 50"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.sigma_min",description:"<strong>sigma_min</strong> (<code>float</code>) &#x2014; minimum noise magnitude",name:"sigma_min"},{anchor:"diffusers.KarrasVeScheduler.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>) &#x2014; maximum noise magnitude",name:"sigma_max"},{anchor:"diffusers.KarrasVeScheduler.s_noise",description:`<strong>s_noise</strong> (<code>float</code>) &#x2014; the amount of additional noise to counteract loss of detail during sampling.
A reasonable range is [1.000, 1.011].`,name:"s_noise"},{anchor:"diffusers.KarrasVeScheduler.s_churn",description:`<strong>s_churn</strong> (<code>float</code>) &#x2014; the parameter controlling the overall amount of stochasticity.
A reasonable range is [0, 100].`,name:"s_churn"},{anchor:"diffusers.KarrasVeScheduler.s_min",description:`<strong>s_min</strong> (<code>float</code>) &#x2014; the start value of the sigma range where we add noise (enable stochasticity).
A reasonable range is [0, 10].`,name:"s_min"},{anchor:"diffusers.KarrasVeScheduler.s_max",description:`<strong>s_max</strong> (<code>float</code>) &#x2014; the end value of the sigma range where we add noise.
A reasonable range is [0.2, 80].`,name:"s_max"},{anchor:"diffusers.KarrasVeScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L44"}}),zt=new b({props:{name:"add_noise_to_input",anchor:"diffusers.KarrasVeScheduler.add_noise_to_input",parameters:[{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sigma",val:": float"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L115"}}),Yt=new b({props:{name:"set_timesteps",anchor:"diffusers.KarrasVeScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L96"}}),Jt=new b({props:{name:"step",anchor:"diffusers.KarrasVeScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sigma_hat",val:": float"},{name:"sigma_prev",val:": float"},{name:"sample_hat",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.KarrasVeScheduler.step.sigma_hat",description:"<strong>sigma_hat</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_hat"},{anchor:"diffusers.KarrasVeScheduler.step.sigma_prev",description:"<strong>sigma_prev</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_prev"},{anchor:"diffusers.KarrasVeScheduler.step.sample_hat",description:"<strong>sample_hat</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; TODO",name:"sample_hat"},{anchor:"diffusers.KarrasVeScheduler.step.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class</p>
<p>KarrasVeOutput &#x2014; updated sample in the diffusion chain and derivative (TODO double check).`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L136",returnDescription:`
<p><code>KarrasVeOutput</code> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>KarrasVeOutput</code> or <code>tuple</code></p>
`}}),jt=new b({props:{name:"step_correct",anchor:"diffusers.KarrasVeScheduler.step_correct",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sigma_hat",val:": float"},{name:"sigma_prev",val:": float"},{name:"sample_hat",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sample_prev",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"derivative",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.KarrasVeScheduler.step_correct.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sigma_hat",description:"<strong>sigma_hat</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_hat"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sigma_prev",description:"<strong>sigma_prev</strong> (<code>float</code>) &#x2014; TODO",name:"sigma_prev"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sample_hat",description:"<strong>sample_hat</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; TODO",name:"sample_hat"},{anchor:"diffusers.KarrasVeScheduler.step_correct.sample_prev",description:"<strong>sample_prev</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; TODO",name:"sample_prev"},{anchor:"diffusers.KarrasVeScheduler.step_correct.derivative",description:"<strong>derivative</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; TODO",name:"derivative"},{anchor:"diffusers.KarrasVeScheduler.step_correct.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_karras_ve.py#L172",returnDescription:`
<p>updated sample in the diffusion chain. derivative (TODO): TODO</p>
`,returnType:`
<p>prev_sample (TODO)</p>
`}}),Qt=new z({}),Zt=new b({props:{name:"class diffusers.LMSDiscreteScheduler",anchor:"diffusers.LMSDiscreteScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"timestep_values",val:": typing.Optional[numpy.ndarray] = None"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.LMSDiscreteScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.LMSDiscreteScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.LMSDiscreteScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code> or <code>scaled_linear</code>.`,name:"beta_schedule"},{anchor:"diffusers.LMSDiscreteScheduler.trained_betas",description:`<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO
options to clip the variance used when adding noise to the denoised sample. Choose from <code>fixed_small</code>,
<code>fixed_small_log</code>, <code>fixed_large</code>, <code>fixed_large_log</code>, <code>learned</code> or <code>learned_range</code>.`,name:"trained_betas"},{anchor:"diffusers.LMSDiscreteScheduler.timestep_values",description:"<strong>timestep_values</strong> (<code>np.ndarry</code>, optional) &#x2014; TODO",name:"timestep_values"},{anchor:"diffusers.LMSDiscreteScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L26"}}),tr=new b({props:{name:"get_lms_coefficient",anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient",parameters:[{name:"order",val:""},{name:"t",val:""},{name:"current_order",val:""}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.order",description:"<strong>order</strong> (TODO) &#x2014;",name:"order"},{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.t",description:"<strong>t</strong> (TODO) &#x2014;",name:"t"},{anchor:"diffusers.LMSDiscreteScheduler.get_lms_coefficient.current_order",description:"<strong>current_order</strong> (TODO) &#x2014;",name:"current_order"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L86"}}),rr=new b({props:{name:"set_timesteps",anchor:"diffusers.LMSDiscreteScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L108"}}),sr=new b({props:{name:"step",anchor:"diffusers.LMSDiscreteScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"order",val:": int = 4"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.LMSDiscreteScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.LMSDiscreteScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.LMSDiscreteScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.
order &#x2014; coefficient for multi-step inference.`,name:"sample"},{anchor:"diffusers.LMSDiscreteScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_lms_discrete.py#L130",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> or <code>tuple</code></p>
`}}),nr=new z({}),ar=new b({props:{name:"class diffusers.PNDMScheduler",anchor:"diffusers.PNDMScheduler",parameters:[{name:"num_train_timesteps",val:": int = 1000"},{name:"beta_start",val:": float = 0.0001"},{name:"beta_end",val:": float = 0.02"},{name:"beta_schedule",val:": str = 'linear'"},{name:"trained_betas",val:": typing.Optional[numpy.ndarray] = None"},{name:"tensor_format",val:": str = 'pt'"},{name:"skip_prk_steps",val:": bool = False"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.num_train_timesteps",description:"<strong>num_train_timesteps</strong> (<code>int</code>) &#x2014; number of diffusion steps used to train the model.",name:"num_train_timesteps"},{anchor:"diffusers.PNDMScheduler.beta_start",description:"<strong>beta_start</strong> (<code>float</code>) &#x2014; the starting <code>beta</code> value of inference.",name:"beta_start"},{anchor:"diffusers.PNDMScheduler.beta_end",description:"<strong>beta_end</strong> (<code>float</code>) &#x2014; the final <code>beta</code> value.",name:"beta_end"},{anchor:"diffusers.PNDMScheduler.beta_schedule",description:`<strong>beta_schedule</strong> (<code>str</code>) &#x2014;
the beta schedule, a mapping from a beta range to a sequence of betas for stepping the model. Choose from
<code>linear</code>, <code>scaled_linear</code>, or <code>squaredcos_cap_v2</code>.`,name:"beta_schedule"},{anchor:"diffusers.PNDMScheduler.trained_betas",description:"<strong>trained_betas</strong> (<code>np.ndarray</code>, optional) &#x2014; TODO",name:"trained_betas"},{anchor:"diffusers.PNDMScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; whether the scheduler expects pytorch or numpy arrays",name:"tensor_format"},{anchor:"diffusers.PNDMScheduler.skip_prk_steps",description:`<strong>skip_prk_steps</strong> (<code>bool</code>) &#x2014;
allows the scheduler to skip the Runge-Kutta steps that are defined in the original paper as being required
before plms steps; defaults to <code>False</code>.`,name:"skip_prk_steps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L56"}}),dr=new b({props:{name:"set_timesteps",anchor:"diffusers.PNDMScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"offset",val:": int = 0"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.PNDMScheduler.set_timesteps.offset",description:"<strong>offset</strong> (<code>int</code>) &#x2014; TODO",name:"offset"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L134"}}),lr=new b({props:{name:"step",anchor:"diffusers.PNDMScheduler.step",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L173",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/schedulers#diffusers.schedulers.scheduling_utils.SchedulerOutput"
>SchedulerOutput</a> or <code>tuple</code></p>
`}}),cr=new b({props:{name:"step_plms",anchor:"diffusers.PNDMScheduler.step_plms",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step_plms.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step_plms.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step_plms.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step_plms.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L259",returnDescription:`
<p><code>SchedulerOutput</code> if <code>return_dict</code> is
True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>SchedulerOutput</code> or <code>tuple</code></p>
`}}),ur=new b({props:{name:"step_prk",anchor:"diffusers.PNDMScheduler.step_prk",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.PNDMScheduler.step_prk.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.PNDMScheduler.step_prk.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.PNDMScheduler.step_prk.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.`,name:"sample"},{anchor:"diffusers.PNDMScheduler.step_prk.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_pndm.py#L204",returnDescription:`
<p><code>SchedulerOutput</code> if <code>return_dict</code> is
True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>SchedulerOutput</code> or <code>tuple</code></p>
`}}),fr=new z({}),hr=new b({props:{name:"class diffusers.ScoreSdeVeScheduler",anchor:"diffusers.ScoreSdeVeScheduler",parameters:[{name:"num_train_timesteps",val:": int = 2000"},{name:"snr",val:": float = 0.15"},{name:"sigma_min",val:": float = 0.01"},{name:"sigma_max",val:": float = 1348.0"},{name:"sampling_eps",val:": float = 1e-05"},{name:"correct_steps",val:": int = 1"},{name:"tensor_format",val:": str = 'pt'"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.snr",description:`<strong>snr</strong> (<code>float</code>) &#x2014;
coefficient weighting the step from the model_output sample (from the network) to the random noise.`,name:"snr"},{anchor:"diffusers.ScoreSdeVeScheduler.sigma_min",description:`<strong>sigma_min</strong> (<code>float</code>) &#x2014;
initial noise scale for sigma sequence in sampling procedure. The minimum sigma should mirror the
distribution of the data.`,name:"sigma_min"},{anchor:"diffusers.ScoreSdeVeScheduler.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>) &#x2014; maximum value used for the range of continuous timesteps passed into the model.",name:"sigma_max"},{anchor:"diffusers.ScoreSdeVeScheduler.sampling_eps",description:`<strong>sampling_eps</strong> (<code>float</code>) &#x2014; the end value of sampling, where timesteps decrease progessively from 1 to
epsilon. &#x2014;`,name:"sampling_eps"},{anchor:"diffusers.ScoreSdeVeScheduler.correct_steps",description:"<strong>correct_steps</strong> (<code>int</code>) &#x2014; number of correction steps performed on a produced sample.",name:"correct_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.tensor_format",description:"<strong>tensor_format</strong> (<code>str</code>) &#x2014; &#x201C;np&#x201D; or &#x201C;pt&#x201D; for the expected format of samples passed to the Scheduler.",name:"tensor_format"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L46"}}),gr=new b({props:{name:"set_sigmas",anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas",parameters:[{name:"num_inference_steps",val:": int"},{name:"sigma_min",val:": float = None"},{name:"sigma_max",val:": float = None"},{name:"sampling_eps",val:": float = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sigma_min",description:`<strong>sigma_min</strong> (<code>float</code>, optional) &#x2014;
initial noise scale value (overrides value given at Scheduler instantiation).`,name:"sigma_min"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sigma_max",description:"<strong>sigma_max</strong> (<code>float</code>, optional) &#x2014; final noise scale value (overrides value given at Scheduler instantiation).",name:"sigma_max"},{anchor:"diffusers.ScoreSdeVeScheduler.set_sigmas.sampling_eps",description:"<strong>sampling_eps</strong> (<code>float</code>, optional) &#x2014; final timestep value (overrides value given at Scheduler instantiation).",name:"sampling_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L108"}}),_r=new b({props:{name:"set_timesteps",anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps",parameters:[{name:"num_inference_steps",val:": int"},{name:"sampling_eps",val:": float = None"}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps.num_inference_steps",description:`<strong>num_inference_steps</strong> (<code>int</code>) &#x2014;
the number of diffusion steps used when generating samples with a pre-trained model.`,name:"num_inference_steps"},{anchor:"diffusers.ScoreSdeVeScheduler.set_timesteps.sampling_eps",description:"<strong>sampling_eps</strong> (<code>float</code>, optional) &#x2014; final timestep value (overrides value given at Scheduler instantiation).",name:"sampling_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L89"}}),vr=new b({props:{name:"step_correct",anchor:"diffusers.ScoreSdeVeScheduler.step_correct",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.
generator &#x2014; random number generator.`,name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.step_correct.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L230",returnDescription:`
<p><code>SdeVeOutput</code> if
<code>return_dict</code> is True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>SdeVeOutput</code> or <code>tuple</code></p>
`}}),br=new b({props:{name:"step_pred",anchor:"diffusers.ScoreSdeVeScheduler.step_pred",parameters:[{name:"model_output",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"timestep",val:": int"},{name:"sample",val:": typing.Union[torch.FloatTensor, numpy.ndarray]"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"},{name:"return_dict",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.model_output",description:"<strong>model_output</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014; direct output from learned diffusion model.",name:"model_output"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.timestep",description:"<strong>timestep</strong> (<code>int</code>) &#x2014; current discrete timestep in the diffusion chain.",name:"timestep"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> or <code>np.ndarray</code>) &#x2014;
current instance of sample being created by diffusion process.
generator &#x2014; random number generator.`,name:"sample"},{anchor:"diffusers.ScoreSdeVeScheduler.step_pred.return_dict",description:"<strong>return_dict</strong> (<code>bool</code>) &#x2014; option for returning tuple rather than SchedulerOutput class",name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_ve.py#L168",returnDescription:`
<p><code>SdeVeOutput</code> if
<code>return_dict</code> is True, otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><code>SdeVeOutput</code> or <code>tuple</code></p>
`}}),Sr=new z({}),ft=new lg({props:{warning:!0,$$slots:{default:[cg]},$$scope:{ctx:mo}}}),$r=new b({props:{name:"class diffusers.schedulers.ScoreSdeVpScheduler",anchor:"diffusers.schedulers.ScoreSdeVpScheduler",parameters:[{name:"num_train_timesteps",val:" = 2000"},{name:"beta_min",val:" = 0.1"},{name:"beta_max",val:" = 20"},{name:"sampling_eps",val:" = 0.001"},{name:"tensor_format",val:" = 'np'"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/schedulers/scheduling_sde_vp.py#L26"}}),{c(){N=s("meta"),De=l(),F=s("h1"),J=s("a"),ys=s("span"),p(ht.$$.fragment),ja=l(),$s=s("span"),Qa=a("Schedulers"),go=l(),Er=s("p"),Xa=a("Diffusers contains multiple pre-built schedule functions for the diffusion process."),_o=l(),ae=s("h2"),xe=s("a"),Ds=s("span"),p(mt.$$.fragment),Za=l(),xs=s("span"),ei=a("What is a scheduler?"),vo=l(),Ee=s("p"),ti=a("The schedule functions, denoted "),Es=s("em"),ri=a("Schedulers"),si=a(" in the library take in the output of a trained model, a sample which the diffusion process is iterating on, and a timestep to return a denoised sample."),bo=l(),we=s("ul"),wr=s("li"),ni=a("Schedulers define the methodology for iteratively adding noise to an image or for updating a sample based on model outputs."),gt=s("ul"),ws=s("li"),oi=a("adding noise in different manners represent the algorithmic processes to train a diffusion model by adding noise to images."),ai=l(),Ms=s("li"),ii=a("for inference, the scheduler defines how to update a sample based on an output from a pretrained model."),di=l(),ie=s("li"),li=a("Schedulers are often defined by a "),Ps=s("em"),ci=a("noise schedule"),ui=a(" and an "),Ts=s("em"),fi=a("update rule"),pi=a(" to solve the differential equation solution."),So=l(),de=s("h3"),Me=s("a"),Os=s("span"),p(_t.$$.fragment),hi=l(),ks=s("span"),mi=a("Discrete versus continuous schedulers"),yo=l(),D=s("p"),gi=a(`All schedulers take in a timestep to predict the updated version of the sample being diffused.
The timesteps dictate where in the diffusion process the step is, where data is generated by iterating forward in time and inference is executed by propagating backwards through timesteps.
Different algorithms use timesteps that both discrete (accepting `),Cs=s("code"),_i=a("int"),vi=a(" inputs), such as the "),Mr=s("a"),bi=a("DDPMScheduler"),Si=a(" or "),Pr=s("a"),yi=a("PNDMScheduler"),$i=a(", and continuous (accepting "),Vs=s("code"),Di=a("float"),xi=a(" inputs), such as the score-based schedulers "),Tr=s("a"),Ei=a("ScoreSdeVeScheduler"),wi=a(" or "),As=s("code"),Mi=a("ScoreSdeVpScheduler"),Pi=a("."),$o=l(),le=s("h2"),Pe=s("a"),Ns=s("span"),p(vt.$$.fragment),Ti=l(),Ls=s("span"),Oi=a("Designing Re-usable schedulers"),Do=l(),Or=s("p"),ki=a(`The core design principle between the schedule functions is to be model, system, and framework independent.
This allows for rapid experimentation and cleaner abstractions in the code, where the model prediction is separated from the sample update.
To this end, the design of schedulers is such that:`),xo=l(),Te=s("ul"),Is=s("li"),Ci=a("Schedulers can be used interchangeably between diffusion models in inference to find the preferred trade-off between speed and generation quality."),Vi=l(),Fs=s("li"),Ai=a("Schedulers are currently by default in PyTorch, but are designed to be framework independent (partial Numpy support currently exists)."),Eo=l(),ce=s("h2"),Oe=s("a"),Ks=s("span"),p(bt.$$.fragment),Ni=l(),Us=s("span"),Li=a("API"),wo=l(),kr=s("p"),Ii=a("The core API for any new scheduler must follow a limited structure."),Mo=l(),te=s("ul"),St=s("li"),Fi=a("Schedulers should provide one or more "),qs=s("code"),Ki=a("def step(...)"),Ui=a(" functions that should be called to update the generated sample iteratively."),qi=l(),yt=s("li"),Hi=a("Schedulers should provide a "),Hs=s("code"),Ri=a("set_timesteps(...)"),Wi=a(" method that configures the parameters of a schedule function for a specific inference task."),Bi=l(),$t=s("li"),Gi=a(`Schedulers should be framework-agonstic, but provide a simple functionality to convert the scheduler into a specific framework, such as PyTorch
with a `),Rs=s("code"),zi=a("set_format(...)"),Yi=a(" method."),Po=l(),ke=s("p"),Ji=a("The base class "),Cr=s("a"),ji=a("SchedulerMixin"),Qi=a(" implements low level utilities used by multiple schedulers."),To=l(),ue=s("h3"),Ce=s("a"),Ws=s("span"),p(Dt.$$.fragment),Xi=l(),Bs=s("span"),Zi=a("SchedulerMixin"),Oo=l(),Z=s("div"),p(xt.$$.fragment),ed=l(),Gs=s("p"),td=a("Mixin containing common functions for the schedulers."),rd=l(),Ve=s("div"),p(Et.$$.fragment),sd=l(),zs=s("p"),nd=a("Turns a 1-D array into an array or tensor with len(broadcast_array.shape) dims."),ko=l(),fe=s("h3"),Ae=s("a"),Ys=s("span"),p(wt.$$.fragment),od=l(),Js=s("span"),ad=a("SchedulerOutput"),Co=a("\n\nThe class `SchedulerOutput` contains the ouputs from any schedulers `step(...)` call.\n"),pe=s("div"),p(Mt.$$.fragment),id=l(),js=s("p"),dd=a("Base class for the scheduler\u2019s step function output."),Vo=l(),he=s("h3"),Ne=s("a"),Qs=s("span"),p(Pt.$$.fragment),ld=l(),Xs=s("span"),cd=a("Implemented Schedulers"),Ao=l(),me=s("h4"),Le=s("a"),Zs=s("span"),p(Tt.$$.fragment),ud=l(),en=s("span"),fd=a("Denoising diffusion implicit models (DDIM)"),No=l(),Vr=s("p"),pd=a("Original paper can be found here."),Lo=l(),C=s("div"),p(Ot.$$.fragment),hd=l(),tn=s("p"),md=a(`Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising
diffusion probabilistic models (DDPMs) with non-Markovian guidance.`),gd=l(),x=s("p"),Ar=s("a"),_d=a("~ConfigMixin"),vd=a(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),rn=s("code"),bd=a("__init__"),Sd=a(`
function, such as `),sn=s("code"),yd=a("num_train_timesteps"),$d=a(". They can be accessed via "),nn=s("code"),Dd=a("scheduler.config.num_train_timesteps"),xd=a(`.
`),Nr=s("a"),Ed=a("~ConfigMixin"),wd=a(" also provides general loading and saving functionality via the "),Lr=s("a"),Md=a("save_config()"),Pd=a(` and
`),Ir=s("a"),Td=a("from_config()"),Od=a(" functios."),kd=l(),Fr=s("p"),Cd=a("For more details, see the original paper: "),kt=s("a"),Vd=a("https://arxiv.org/abs/2010.02502"),Ad=l(),Ie=s("div"),p(Ct.$$.fragment),Nd=l(),on=s("p"),Ld=a("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),Id=l(),Fe=s("div"),p(Vt.$$.fragment),Fd=l(),an=s("p"),Kd=a(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Io=l(),ge=s("h4"),Ke=s("a"),dn=s("span"),p(At.$$.fragment),Ud=l(),ln=s("span"),qd=a("Denoising diffusion probabilistic models (DDPM)"),Fo=l(),Ue=s("p"),Hd=a("Original paper can be found "),Nt=s("a"),Rd=a("here"),Wd=a("."),Ko=l(),V=s("div"),p(Lt.$$.fragment),Bd=l(),cn=s("p"),Gd=a(`Denoising diffusion probabilistic models (DDPMs) explores the connections between denoising score matching and
Langevin dynamics sampling.`),zd=l(),E=s("p"),Kr=s("a"),Yd=a("~ConfigMixin"),Jd=a(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),un=s("code"),jd=a("__init__"),Qd=a(`
function, such as `),fn=s("code"),Xd=a("num_train_timesteps"),Zd=a(". They can be accessed via "),pn=s("code"),el=a("scheduler.config.num_train_timesteps"),tl=a(`.
`),Ur=s("a"),rl=a("~ConfigMixin"),sl=a(" also provides general loading and saving functionality via the "),qr=s("a"),nl=a("save_config()"),ol=a(` and
`),Hr=s("a"),al=a("from_config()"),il=a(" functios."),dl=l(),Rr=s("p"),ll=a("For more details, see the original paper: "),It=s("a"),cl=a("https://arxiv.org/abs/2006.11239"),ul=l(),qe=s("div"),p(Ft.$$.fragment),fl=l(),hn=s("p"),pl=a("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),hl=l(),He=s("div"),p(Kt.$$.fragment),ml=l(),mn=s("p"),gl=a(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Uo=l(),_e=s("h4"),Re=s("a"),gn=s("span"),p(Ut.$$.fragment),_l=l(),_n=s("span"),vl=a("Varience exploding, stochastic sampling from Karras et. al"),qo=l(),We=s("p"),bl=a("Original paper can be found "),qt=s("a"),Sl=a("here"),yl=a("."),Ho=l(),S=s("div"),p(Ht.$$.fragment),$l=l(),vn=s("p"),Dl=a(`Stochastic sampling from Karras et al. [1] tailored to the Variance-Expanding (VE) models [2]. Use Algorithm 2 and
the VE column of Table 1 from [1] for reference.`),xl=l(),Be=s("p"),El=a(`[1] Karras, Tero, et al. \u201CElucidating the Design Space of Diffusion-Based Generative Models.\u201D
`),Rt=s("a"),wl=a("https://arxiv.org/abs/2206.00364"),Ml=a(` [2] Song, Yang, et al. \u201CScore-based generative modeling through stochastic
differential equations.\u201D `),Wt=s("a"),Pl=a("https://arxiv.org/abs/2011.13456"),Tl=l(),w=s("p"),Wr=s("a"),Ol=a("~ConfigMixin"),kl=a(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),bn=s("code"),Cl=a("__init__"),Vl=a(`
function, such as `),Sn=s("code"),Al=a("num_train_timesteps"),Nl=a(". They can be accessed via "),yn=s("code"),Ll=a("scheduler.config.num_train_timesteps"),Il=a(`.
`),Br=s("a"),Fl=a("~ConfigMixin"),Kl=a(" also provides general loading and saving functionality via the "),Gr=s("a"),Ul=a("save_config()"),ql=a(` and
`),zr=s("a"),Hl=a("from_config()"),Rl=a(" functios."),Wl=l(),Bt=s("p"),Bl=a(`For more details on the parameters, see the original paper\u2019s Appendix E.: \u201CElucidating the Design Space of
Diffusion-Based Generative Models.\u201D `),Gt=s("a"),Gl=a("https://arxiv.org/abs/2206.00364"),zl=a(`. The grid search values used to find the
optimal {s_noise, s_churn, s_min, s_max} for a specific model are described in Table 5 of the paper.`),Yl=l(),re=s("div"),p(zt.$$.fragment),Jl=l(),$n=s("p"),jl=a(`Explicit Langevin-like \u201Cchurn\u201D step of adding noise to the sample according to a factor gamma_i \u2265 0 to reach a
higher noise level sigma_hat = sigma_i + gamma_i*sigma_i.`),Ql=l(),Dn=s("p"),Xl=a("TODO Args:"),Zl=l(),Ge=s("div"),p(Yt.$$.fragment),ec=l(),xn=s("p"),tc=a("Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),rc=l(),ze=s("div"),p(Jt.$$.fragment),sc=l(),En=s("p"),nc=a(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),oc=l(),Ye=s("div"),p(jt.$$.fragment),ac=l(),wn=s("p"),ic=a("Correct the predicted sample based on the output model_output of the network. TODO complete description"),Ro=l(),ve=s("h4"),Je=s("a"),Mn=s("span"),p(Qt.$$.fragment),dc=l(),Pn=s("span"),lc=a("Linear multistep scheduler for discrete beta schedules"),Wo=l(),je=s("p"),cc=a("Original implementation can be found "),Xt=s("a"),uc=a("here"),fc=a("."),Bo=l(),A=s("div"),p(Zt.$$.fragment),pc=l(),Yr=s("p"),hc=a(`Linear Multistep Scheduler for discrete beta schedules. Based on the original k-diffusion implementation by
Katherine Crowson:
`),er=s("a"),mc=a("https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),gc=l(),M=s("p"),Jr=s("a"),_c=a("~ConfigMixin"),vc=a(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),Tn=s("code"),bc=a("__init__"),Sc=a(`
function, such as `),On=s("code"),yc=a("num_train_timesteps"),$c=a(". They can be accessed via "),kn=s("code"),Dc=a("scheduler.config.num_train_timesteps"),xc=a(`.
`),jr=s("a"),Ec=a("~ConfigMixin"),wc=a(" also provides general loading and saving functionality via the "),Qr=s("a"),Mc=a("save_config()"),Pc=a(` and
`),Xr=s("a"),Tc=a("from_config()"),Oc=a(" functios."),kc=l(),Qe=s("div"),p(tr.$$.fragment),Cc=l(),Cn=s("p"),Vc=a("Compute a linear multistep coefficient."),Ac=l(),Xe=s("div"),p(rr.$$.fragment),Nc=l(),Vn=s("p"),Lc=a("Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),Ic=l(),Ze=s("div"),p(sr.$$.fragment),Fc=l(),An=s("p"),Kc=a(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Go=l(),be=s("h4"),et=s("a"),Nn=s("span"),p(nr.$$.fragment),Uc=l(),Ln=s("span"),qc=a("Pseudo numerical methods for diffusion models (PNDM)"),zo=l(),tt=s("p"),Hc=a("Original implementation can be found "),or=s("a"),Rc=a("here"),Wc=a("."),Yo=l(),y=s("div"),p(ar.$$.fragment),Bc=l(),In=s("p"),Gc=a(`Pseudo numerical methods for diffusion models (PNDM) proposes using more advanced ODE integration techniques,
namely Runge-Kutta method and a linear multi-step method.`),zc=l(),P=s("p"),Zr=s("a"),Yc=a("~ConfigMixin"),Jc=a(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),Fn=s("code"),jc=a("__init__"),Qc=a(`
function, such as `),Kn=s("code"),Xc=a("num_train_timesteps"),Zc=a(". They can be accessed via "),Un=s("code"),eu=a("scheduler.config.num_train_timesteps"),tu=a(`.
`),es=s("a"),ru=a("~ConfigMixin"),su=a(" also provides general loading and saving functionality via the "),ts=s("a"),nu=a("save_config()"),ou=a(` and
`),rs=s("a"),au=a("from_config()"),iu=a(" functios."),du=l(),ss=s("p"),lu=a("For more details, see the original paper: "),ir=s("a"),cu=a("https://arxiv.org/abs/2202.09778"),uu=l(),rt=s("div"),p(dr.$$.fragment),fu=l(),qn=s("p"),pu=a("Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),hu=l(),se=s("div"),p(lr.$$.fragment),mu=l(),Hn=s("p"),gu=a(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),_u=l(),ee=s("p"),vu=a("This function calls "),Rn=s("code"),bu=a("step_prk()"),Su=a(" or "),Wn=s("code"),yu=a("step_plms()"),$u=a(" depending on the internal variable "),Bn=s("code"),Du=a("counter"),xu=a("."),Eu=l(),st=s("div"),p(cr.$$.fragment),wu=l(),Gn=s("p"),Mu=a(`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),Pu=l(),nt=s("div"),p(ur.$$.fragment),Tu=l(),zn=s("p"),Ou=a(`Step function propagating the sample with the Runge-Kutta method. RK takes 4 forward passes to approximate the
solution to the differential equation.`),Jo=l(),Se=s("h4"),ot=s("a"),Yn=s("span"),p(fr.$$.fragment),ku=l(),Jn=s("span"),Cu=a("variance exploding stochastic differential equation (SDE) scheduler"),jo=l(),at=s("p"),Vu=a("Original paper can be found "),pr=s("a"),Au=a("here"),Nu=a("."),Qo=l(),$=s("div"),p(hr.$$.fragment),Lu=l(),jn=s("p"),Iu=a("The variance exploding stochastic differential equation (SDE) scheduler."),Fu=l(),ns=s("p"),Ku=a("For more information, see the original paper: "),mr=s("a"),Uu=a("https://arxiv.org/abs/2011.13456"),qu=l(),T=s("p"),os=s("a"),Hu=a("~ConfigMixin"),Ru=a(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),Qn=s("code"),Wu=a("__init__"),Bu=a(`
function, such as `),Xn=s("code"),Gu=a("num_train_timesteps"),zu=a(". They can be accessed via "),Zn=s("code"),Yu=a("scheduler.config.num_train_timesteps"),Ju=a(`.
`),as=s("a"),ju=a("~ConfigMixin"),Qu=a(" also provides general loading and saving functionality via the "),is=s("a"),Xu=a("save_config()"),Zu=a(` and
`),ds=s("a"),ef=a("from_config()"),tf=a(" functios."),rf=l(),ne=s("div"),p(gr.$$.fragment),sf=l(),eo=s("p"),nf=a("Sets the noise scales used for the diffusion chain. Supporting function to be run before inference."),of=l(),ye=s("p"),af=a("The sigmas control the weight of the "),to=s("code"),df=a("drift"),lf=a(" and "),ro=s("code"),cf=a("diffusion"),uf=a(" components of sample update."),ff=l(),it=s("div"),p(_r.$$.fragment),pf=l(),so=s("p"),hf=a("Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),mf=l(),dt=s("div"),p(vr.$$.fragment),gf=l(),no=s("p"),_f=a(`Correct the predicted sample based on the output model_output of the network. This is often run repeatedly
after making the prediction for the previous timestep.`),vf=l(),lt=s("div"),p(br.$$.fragment),bf=l(),oo=s("p"),Sf=a(`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Xo=l(),$e=s("h4"),ct=s("a"),ao=s("span"),p(Sr.$$.fragment),yf=l(),io=s("span"),$f=a("variance preserving stochastic differential equation (SDE) scheduler"),Zo=l(),ut=s("p"),Df=a("Original paper can be found "),yr=s("a"),xf=a("here"),Ef=a("."),ea=l(),p(ft.$$.fragment),ta=l(),K=s("div"),p($r.$$.fragment),wf=l(),lo=s("p"),Mf=a("The variance preserving stochastic differential equation (SDE) scheduler."),Pf=l(),O=s("p"),ls=s("a"),Tf=a("~ConfigMixin"),Of=a(" takes care of storing all config attributes that are passed in the scheduler\u2019s "),co=s("code"),kf=a("__init__"),Cf=a(`
function, such as `),uo=s("code"),Vf=a("num_train_timesteps"),Af=a(". They can be accessed via "),fo=s("code"),Nf=a("scheduler.config.num_train_timesteps"),Lf=a(`.
`),cs=s("a"),If=a("~ConfigMixin"),Ff=a(" also provides general loading and saving functionality via the "),us=s("a"),Kf=a("save_config()"),Uf=a(` and
`),fs=s("a"),qf=a("from_config()"),Hf=a(" functios."),Rf=l(),ps=s("p"),Wf=a("For more information, see the original paper: "),Dr=s("a"),Bf=a("https://arxiv.org/abs/2011.13456"),Gf=l(),po=s("p"),zf=a("UNDER CONSTRUCTION"),this.h()},l(t){const u=ig('[data-svelte="svelte-1phssyn"]',document.head);N=n(u,"META",{name:!0,content:!0}),u.forEach(r),De=c(t),F=n(t,"H1",{class:!0});var xr=o(F);J=n(xr,"A",{id:!0,class:!0,href:!0});var tp=o(J);ys=n(tp,"SPAN",{});var rp=o(ys);h(ht.$$.fragment,rp),rp.forEach(r),tp.forEach(r),ja=c(xr),$s=n(xr,"SPAN",{});var sp=o($s);Qa=i(sp,"Schedulers"),sp.forEach(r),xr.forEach(r),go=c(t),Er=n(t,"P",{});var np=o(Er);Xa=i(np,"Diffusers contains multiple pre-built schedule functions for the diffusion process."),np.forEach(r),_o=c(t),ae=n(t,"H2",{class:!0});var sa=o(ae);xe=n(sa,"A",{id:!0,class:!0,href:!0});var op=o(xe);Ds=n(op,"SPAN",{});var ap=o(Ds);h(mt.$$.fragment,ap),ap.forEach(r),op.forEach(r),Za=c(sa),xs=n(sa,"SPAN",{});var ip=o(xs);ei=i(ip,"What is a scheduler?"),ip.forEach(r),sa.forEach(r),vo=c(t),Ee=n(t,"P",{});var na=o(Ee);ti=i(na,"The schedule functions, denoted "),Es=n(na,"EM",{});var dp=o(Es);ri=i(dp,"Schedulers"),dp.forEach(r),si=i(na," in the library take in the output of a trained model, a sample which the diffusion process is iterating on, and a timestep to return a denoised sample."),na.forEach(r),bo=c(t),we=n(t,"UL",{});var oa=o(we);wr=n(oa,"LI",{});var Yf=o(wr);ni=i(Yf,"Schedulers define the methodology for iteratively adding noise to an image or for updating a sample based on model outputs."),gt=n(Yf,"UL",{});var aa=o(gt);ws=n(aa,"LI",{});var lp=o(ws);oi=i(lp,"adding noise in different manners represent the algorithmic processes to train a diffusion model by adding noise to images."),lp.forEach(r),ai=c(aa),Ms=n(aa,"LI",{});var cp=o(Ms);ii=i(cp,"for inference, the scheduler defines how to update a sample based on an output from a pretrained model."),cp.forEach(r),aa.forEach(r),Yf.forEach(r),di=c(oa),ie=n(oa,"LI",{});var hs=o(ie);li=i(hs,"Schedulers are often defined by a "),Ps=n(hs,"EM",{});var up=o(Ps);ci=i(up,"noise schedule"),up.forEach(r),ui=i(hs," and an "),Ts=n(hs,"EM",{});var fp=o(Ts);fi=i(fp,"update rule"),fp.forEach(r),pi=i(hs," to solve the differential equation solution."),hs.forEach(r),oa.forEach(r),So=c(t),de=n(t,"H3",{class:!0});var ia=o(de);Me=n(ia,"A",{id:!0,class:!0,href:!0});var pp=o(Me);Os=n(pp,"SPAN",{});var hp=o(Os);h(_t.$$.fragment,hp),hp.forEach(r),pp.forEach(r),hi=c(ia),ks=n(ia,"SPAN",{});var mp=o(ks);mi=i(mp,"Discrete versus continuous schedulers"),mp.forEach(r),ia.forEach(r),yo=c(t),D=n(t,"P",{});var Y=o(D);gi=i(Y,`All schedulers take in a timestep to predict the updated version of the sample being diffused.
The timesteps dictate where in the diffusion process the step is, where data is generated by iterating forward in time and inference is executed by propagating backwards through timesteps.
Different algorithms use timesteps that both discrete (accepting `),Cs=n(Y,"CODE",{});var gp=o(Cs);_i=i(gp,"int"),gp.forEach(r),vi=i(Y," inputs), such as the "),Mr=n(Y,"A",{href:!0});var _p=o(Mr);bi=i(_p,"DDPMScheduler"),_p.forEach(r),Si=i(Y," or "),Pr=n(Y,"A",{href:!0});var vp=o(Pr);yi=i(vp,"PNDMScheduler"),vp.forEach(r),$i=i(Y,", and continuous (accepting "),Vs=n(Y,"CODE",{});var bp=o(Vs);Di=i(bp,"float"),bp.forEach(r),xi=i(Y," inputs), such as the score-based schedulers "),Tr=n(Y,"A",{href:!0});var Sp=o(Tr);Ei=i(Sp,"ScoreSdeVeScheduler"),Sp.forEach(r),wi=i(Y," or "),As=n(Y,"CODE",{});var yp=o(As);Mi=i(yp,"ScoreSdeVpScheduler"),yp.forEach(r),Pi=i(Y,"."),Y.forEach(r),$o=c(t),le=n(t,"H2",{class:!0});var da=o(le);Pe=n(da,"A",{id:!0,class:!0,href:!0});var $p=o(Pe);Ns=n($p,"SPAN",{});var Dp=o(Ns);h(vt.$$.fragment,Dp),Dp.forEach(r),$p.forEach(r),Ti=c(da),Ls=n(da,"SPAN",{});var xp=o(Ls);Oi=i(xp,"Designing Re-usable schedulers"),xp.forEach(r),da.forEach(r),Do=c(t),Or=n(t,"P",{});var Ep=o(Or);ki=i(Ep,`The core design principle between the schedule functions is to be model, system, and framework independent.
This allows for rapid experimentation and cleaner abstractions in the code, where the model prediction is separated from the sample update.
To this end, the design of schedulers is such that:`),Ep.forEach(r),xo=c(t),Te=n(t,"UL",{});var la=o(Te);Is=n(la,"LI",{});var wp=o(Is);Ci=i(wp,"Schedulers can be used interchangeably between diffusion models in inference to find the preferred trade-off between speed and generation quality."),wp.forEach(r),Vi=c(la),Fs=n(la,"LI",{});var Mp=o(Fs);Ai=i(Mp,"Schedulers are currently by default in PyTorch, but are designed to be framework independent (partial Numpy support currently exists)."),Mp.forEach(r),la.forEach(r),Eo=c(t),ce=n(t,"H2",{class:!0});var ca=o(ce);Oe=n(ca,"A",{id:!0,class:!0,href:!0});var Pp=o(Oe);Ks=n(Pp,"SPAN",{});var Tp=o(Ks);h(bt.$$.fragment,Tp),Tp.forEach(r),Pp.forEach(r),Ni=c(ca),Us=n(ca,"SPAN",{});var Op=o(Us);Li=i(Op,"API"),Op.forEach(r),ca.forEach(r),wo=c(t),kr=n(t,"P",{});var kp=o(kr);Ii=i(kp,"The core API for any new scheduler must follow a limited structure."),kp.forEach(r),Mo=c(t),te=n(t,"UL",{});var ms=o(te);St=n(ms,"LI",{});var ua=o(St);Fi=i(ua,"Schedulers should provide one or more "),qs=n(ua,"CODE",{});var Cp=o(qs);Ki=i(Cp,"def step(...)"),Cp.forEach(r),Ui=i(ua," functions that should be called to update the generated sample iteratively."),ua.forEach(r),qi=c(ms),yt=n(ms,"LI",{});var fa=o(yt);Hi=i(fa,"Schedulers should provide a "),Hs=n(fa,"CODE",{});var Vp=o(Hs);Ri=i(Vp,"set_timesteps(...)"),Vp.forEach(r),Wi=i(fa," method that configures the parameters of a schedule function for a specific inference task."),fa.forEach(r),Bi=c(ms),$t=n(ms,"LI",{});var pa=o($t);Gi=i(pa,`Schedulers should be framework-agonstic, but provide a simple functionality to convert the scheduler into a specific framework, such as PyTorch
with a `),Rs=n(pa,"CODE",{});var Ap=o(Rs);zi=i(Ap,"set_format(...)"),Ap.forEach(r),Yi=i(pa," method."),pa.forEach(r),ms.forEach(r),Po=c(t),ke=n(t,"P",{});var ha=o(ke);Ji=i(ha,"The base class "),Cr=n(ha,"A",{href:!0});var Np=o(Cr);ji=i(Np,"SchedulerMixin"),Np.forEach(r),Qi=i(ha," implements low level utilities used by multiple schedulers."),ha.forEach(r),To=c(t),ue=n(t,"H3",{class:!0});var ma=o(ue);Ce=n(ma,"A",{id:!0,class:!0,href:!0});var Lp=o(Ce);Ws=n(Lp,"SPAN",{});var Ip=o(Ws);h(Dt.$$.fragment,Ip),Ip.forEach(r),Lp.forEach(r),Xi=c(ma),Bs=n(ma,"SPAN",{});var Fp=o(Bs);Zi=i(Fp,"SchedulerMixin"),Fp.forEach(r),ma.forEach(r),Oo=c(t),Z=n(t,"DIV",{class:!0});var gs=o(Z);h(xt.$$.fragment,gs),ed=c(gs),Gs=n(gs,"P",{});var Kp=o(Gs);td=i(Kp,"Mixin containing common functions for the schedulers."),Kp.forEach(r),rd=c(gs),Ve=n(gs,"DIV",{class:!0});var ga=o(Ve);h(Et.$$.fragment,ga),sd=c(ga),zs=n(ga,"P",{});var Up=o(zs);nd=i(Up,"Turns a 1-D array into an array or tensor with len(broadcast_array.shape) dims."),Up.forEach(r),ga.forEach(r),gs.forEach(r),ko=c(t),fe=n(t,"H3",{class:!0});var _a=o(fe);Ae=n(_a,"A",{id:!0,class:!0,href:!0});var qp=o(Ae);Ys=n(qp,"SPAN",{});var Hp=o(Ys);h(wt.$$.fragment,Hp),Hp.forEach(r),qp.forEach(r),od=c(_a),Js=n(_a,"SPAN",{});var Rp=o(Js);ad=i(Rp,"SchedulerOutput"),Rp.forEach(r),_a.forEach(r),Co=i(t,"\n\nThe class `SchedulerOutput` contains the ouputs from any schedulers `step(...)` call.\n"),pe=n(t,"DIV",{class:!0});var va=o(pe);h(Mt.$$.fragment,va),id=c(va),js=n(va,"P",{});var Wp=o(js);dd=i(Wp,"Base class for the scheduler\u2019s step function output."),Wp.forEach(r),va.forEach(r),Vo=c(t),he=n(t,"H3",{class:!0});var ba=o(he);Ne=n(ba,"A",{id:!0,class:!0,href:!0});var Bp=o(Ne);Qs=n(Bp,"SPAN",{});var Gp=o(Qs);h(Pt.$$.fragment,Gp),Gp.forEach(r),Bp.forEach(r),ld=c(ba),Xs=n(ba,"SPAN",{});var zp=o(Xs);cd=i(zp,"Implemented Schedulers"),zp.forEach(r),ba.forEach(r),Ao=c(t),me=n(t,"H4",{class:!0});var Sa=o(me);Le=n(Sa,"A",{id:!0,class:!0,href:!0});var Yp=o(Le);Zs=n(Yp,"SPAN",{});var Jp=o(Zs);h(Tt.$$.fragment,Jp),Jp.forEach(r),Yp.forEach(r),ud=c(Sa),en=n(Sa,"SPAN",{});var jp=o(en);fd=i(jp,"Denoising diffusion implicit models (DDIM)"),jp.forEach(r),Sa.forEach(r),No=c(t),Vr=n(t,"P",{});var Qp=o(Vr);pd=i(Qp,"Original paper can be found here."),Qp.forEach(r),Lo=c(t),C=n(t,"DIV",{class:!0});var j=o(C);h(Ot.$$.fragment,j),hd=c(j),tn=n(j,"P",{});var Xp=o(tn);md=i(Xp,`Denoising diffusion implicit models is a scheduler that extends the denoising procedure introduced in denoising
diffusion probabilistic models (DDPMs) with non-Markovian guidance.`),Xp.forEach(r),gd=c(j),x=n(j,"P",{});var U=o(x);Ar=n(U,"A",{href:!0});var Zp=o(Ar);_d=i(Zp,"~ConfigMixin"),Zp.forEach(r),vd=i(U," takes care of storing all config attributes that are passed in the scheduler\u2019s "),rn=n(U,"CODE",{});var eh=o(rn);bd=i(eh,"__init__"),eh.forEach(r),Sd=i(U,`
function, such as `),sn=n(U,"CODE",{});var th=o(sn);yd=i(th,"num_train_timesteps"),th.forEach(r),$d=i(U,". They can be accessed via "),nn=n(U,"CODE",{});var rh=o(nn);Dd=i(rh,"scheduler.config.num_train_timesteps"),rh.forEach(r),xd=i(U,`.
`),Nr=n(U,"A",{href:!0});var sh=o(Nr);Ed=i(sh,"~ConfigMixin"),sh.forEach(r),wd=i(U," also provides general loading and saving functionality via the "),Lr=n(U,"A",{href:!0});var nh=o(Lr);Md=i(nh,"save_config()"),nh.forEach(r),Pd=i(U,` and
`),Ir=n(U,"A",{href:!0});var oh=o(Ir);Td=i(oh,"from_config()"),oh.forEach(r),Od=i(U," functios."),U.forEach(r),kd=c(j),Fr=n(j,"P",{});var Jf=o(Fr);Cd=i(Jf,"For more details, see the original paper: "),kt=n(Jf,"A",{href:!0,rel:!0});var ah=o(kt);Vd=i(ah,"https://arxiv.org/abs/2010.02502"),ah.forEach(r),Jf.forEach(r),Ad=c(j),Ie=n(j,"DIV",{class:!0});var ya=o(Ie);h(Ct.$$.fragment,ya),Nd=c(ya),on=n(ya,"P",{});var ih=o(on);Ld=i(ih,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),ih.forEach(r),ya.forEach(r),Id=c(j),Fe=n(j,"DIV",{class:!0});var $a=o(Fe);h(Vt.$$.fragment,$a),Fd=c($a),an=n($a,"P",{});var dh=o(an);Kd=i(dh,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),dh.forEach(r),$a.forEach(r),j.forEach(r),Io=c(t),ge=n(t,"H4",{class:!0});var Da=o(ge);Ke=n(Da,"A",{id:!0,class:!0,href:!0});var lh=o(Ke);dn=n(lh,"SPAN",{});var ch=o(dn);h(At.$$.fragment,ch),ch.forEach(r),lh.forEach(r),Ud=c(Da),ln=n(Da,"SPAN",{});var uh=o(ln);qd=i(uh,"Denoising diffusion probabilistic models (DDPM)"),uh.forEach(r),Da.forEach(r),Fo=c(t),Ue=n(t,"P",{});var xa=o(Ue);Hd=i(xa,"Original paper can be found "),Nt=n(xa,"A",{href:!0,rel:!0});var fh=o(Nt);Rd=i(fh,"here"),fh.forEach(r),Wd=i(xa,"."),xa.forEach(r),Ko=c(t),V=n(t,"DIV",{class:!0});var Q=o(V);h(Lt.$$.fragment,Q),Bd=c(Q),cn=n(Q,"P",{});var ph=o(cn);Gd=i(ph,`Denoising diffusion probabilistic models (DDPMs) explores the connections between denoising score matching and
Langevin dynamics sampling.`),ph.forEach(r),zd=c(Q),E=n(Q,"P",{});var q=o(E);Kr=n(q,"A",{href:!0});var hh=o(Kr);Yd=i(hh,"~ConfigMixin"),hh.forEach(r),Jd=i(q," takes care of storing all config attributes that are passed in the scheduler\u2019s "),un=n(q,"CODE",{});var mh=o(un);jd=i(mh,"__init__"),mh.forEach(r),Qd=i(q,`
function, such as `),fn=n(q,"CODE",{});var gh=o(fn);Xd=i(gh,"num_train_timesteps"),gh.forEach(r),Zd=i(q,". They can be accessed via "),pn=n(q,"CODE",{});var _h=o(pn);el=i(_h,"scheduler.config.num_train_timesteps"),_h.forEach(r),tl=i(q,`.
`),Ur=n(q,"A",{href:!0});var vh=o(Ur);rl=i(vh,"~ConfigMixin"),vh.forEach(r),sl=i(q," also provides general loading and saving functionality via the "),qr=n(q,"A",{href:!0});var bh=o(qr);nl=i(bh,"save_config()"),bh.forEach(r),ol=i(q,` and
`),Hr=n(q,"A",{href:!0});var Sh=o(Hr);al=i(Sh,"from_config()"),Sh.forEach(r),il=i(q," functios."),q.forEach(r),dl=c(Q),Rr=n(Q,"P",{});var jf=o(Rr);ll=i(jf,"For more details, see the original paper: "),It=n(jf,"A",{href:!0,rel:!0});var yh=o(It);cl=i(yh,"https://arxiv.org/abs/2006.11239"),yh.forEach(r),jf.forEach(r),ul=c(Q),qe=n(Q,"DIV",{class:!0});var Ea=o(qe);h(Ft.$$.fragment,Ea),fl=c(Ea),hn=n(Ea,"P",{});var $h=o(hn);pl=i($h,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),$h.forEach(r),Ea.forEach(r),hl=c(Q),He=n(Q,"DIV",{class:!0});var wa=o(He);h(Kt.$$.fragment,wa),ml=c(wa),mn=n(wa,"P",{});var Dh=o(mn);gl=i(Dh,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Dh.forEach(r),wa.forEach(r),Q.forEach(r),Uo=c(t),_e=n(t,"H4",{class:!0});var Ma=o(_e);Re=n(Ma,"A",{id:!0,class:!0,href:!0});var xh=o(Re);gn=n(xh,"SPAN",{});var Eh=o(gn);h(Ut.$$.fragment,Eh),Eh.forEach(r),xh.forEach(r),_l=c(Ma),_n=n(Ma,"SPAN",{});var wh=o(_n);vl=i(wh,"Varience exploding, stochastic sampling from Karras et. al"),wh.forEach(r),Ma.forEach(r),qo=c(t),We=n(t,"P",{});var Pa=o(We);bl=i(Pa,"Original paper can be found "),qt=n(Pa,"A",{href:!0,rel:!0});var Mh=o(qt);Sl=i(Mh,"here"),Mh.forEach(r),yl=i(Pa,"."),Pa.forEach(r),Ho=c(t),S=n(t,"DIV",{class:!0});var k=o(S);h(Ht.$$.fragment,k),$l=c(k),vn=n(k,"P",{});var Ph=o(vn);Dl=i(Ph,`Stochastic sampling from Karras et al. [1] tailored to the Variance-Expanding (VE) models [2]. Use Algorithm 2 and
the VE column of Table 1 from [1] for reference.`),Ph.forEach(r),xl=c(k),Be=n(k,"P",{});var ho=o(Be);El=i(ho,`[1] Karras, Tero, et al. \u201CElucidating the Design Space of Diffusion-Based Generative Models.\u201D
`),Rt=n(ho,"A",{href:!0,rel:!0});var Th=o(Rt);wl=i(Th,"https://arxiv.org/abs/2206.00364"),Th.forEach(r),Ml=i(ho,` [2] Song, Yang, et al. \u201CScore-based generative modeling through stochastic
differential equations.\u201D `),Wt=n(ho,"A",{href:!0,rel:!0});var Oh=o(Wt);Pl=i(Oh,"https://arxiv.org/abs/2011.13456"),Oh.forEach(r),ho.forEach(r),Tl=c(k),w=n(k,"P",{});var H=o(w);Wr=n(H,"A",{href:!0});var kh=o(Wr);Ol=i(kh,"~ConfigMixin"),kh.forEach(r),kl=i(H," takes care of storing all config attributes that are passed in the scheduler\u2019s "),bn=n(H,"CODE",{});var Ch=o(bn);Cl=i(Ch,"__init__"),Ch.forEach(r),Vl=i(H,`
function, such as `),Sn=n(H,"CODE",{});var Vh=o(Sn);Al=i(Vh,"num_train_timesteps"),Vh.forEach(r),Nl=i(H,". They can be accessed via "),yn=n(H,"CODE",{});var Ah=o(yn);Ll=i(Ah,"scheduler.config.num_train_timesteps"),Ah.forEach(r),Il=i(H,`.
`),Br=n(H,"A",{href:!0});var Nh=o(Br);Fl=i(Nh,"~ConfigMixin"),Nh.forEach(r),Kl=i(H," also provides general loading and saving functionality via the "),Gr=n(H,"A",{href:!0});var Lh=o(Gr);Ul=i(Lh,"save_config()"),Lh.forEach(r),ql=i(H,` and
`),zr=n(H,"A",{href:!0});var Ih=o(zr);Hl=i(Ih,"from_config()"),Ih.forEach(r),Rl=i(H," functios."),H.forEach(r),Wl=c(k),Bt=n(k,"P",{});var Ta=o(Bt);Bl=i(Ta,`For more details on the parameters, see the original paper\u2019s Appendix E.: \u201CElucidating the Design Space of
Diffusion-Based Generative Models.\u201D `),Gt=n(Ta,"A",{href:!0,rel:!0});var Fh=o(Gt);Gl=i(Fh,"https://arxiv.org/abs/2206.00364"),Fh.forEach(r),zl=i(Ta,`. The grid search values used to find the
optimal {s_noise, s_churn, s_min, s_max} for a specific model are described in Table 5 of the paper.`),Ta.forEach(r),Yl=c(k),re=n(k,"DIV",{class:!0});var _s=o(re);h(zt.$$.fragment,_s),Jl=c(_s),$n=n(_s,"P",{});var Kh=o($n);jl=i(Kh,`Explicit Langevin-like \u201Cchurn\u201D step of adding noise to the sample according to a factor gamma_i \u2265 0 to reach a
higher noise level sigma_hat = sigma_i + gamma_i*sigma_i.`),Kh.forEach(r),Ql=c(_s),Dn=n(_s,"P",{});var Uh=o(Dn);Xl=i(Uh,"TODO Args:"),Uh.forEach(r),_s.forEach(r),Zl=c(k),Ge=n(k,"DIV",{class:!0});var Oa=o(Ge);h(Yt.$$.fragment,Oa),ec=c(Oa),xn=n(Oa,"P",{});var qh=o(xn);tc=i(qh,"Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),qh.forEach(r),Oa.forEach(r),rc=c(k),ze=n(k,"DIV",{class:!0});var ka=o(ze);h(Jt.$$.fragment,ka),sc=c(ka),En=n(ka,"P",{});var Hh=o(En);nc=i(Hh,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Hh.forEach(r),ka.forEach(r),oc=c(k),Ye=n(k,"DIV",{class:!0});var Ca=o(Ye);h(jt.$$.fragment,Ca),ac=c(Ca),wn=n(Ca,"P",{});var Rh=o(wn);ic=i(Rh,"Correct the predicted sample based on the output model_output of the network. TODO complete description"),Rh.forEach(r),Ca.forEach(r),k.forEach(r),Ro=c(t),ve=n(t,"H4",{class:!0});var Va=o(ve);Je=n(Va,"A",{id:!0,class:!0,href:!0});var Wh=o(Je);Mn=n(Wh,"SPAN",{});var Bh=o(Mn);h(Qt.$$.fragment,Bh),Bh.forEach(r),Wh.forEach(r),dc=c(Va),Pn=n(Va,"SPAN",{});var Gh=o(Pn);lc=i(Gh,"Linear multistep scheduler for discrete beta schedules"),Gh.forEach(r),Va.forEach(r),Wo=c(t),je=n(t,"P",{});var Aa=o(je);cc=i(Aa,"Original implementation can be found "),Xt=n(Aa,"A",{href:!0,rel:!0});var zh=o(Xt);uc=i(zh,"here"),zh.forEach(r),fc=i(Aa,"."),Aa.forEach(r),Bo=c(t),A=n(t,"DIV",{class:!0});var X=o(A);h(Zt.$$.fragment,X),pc=c(X),Yr=n(X,"P",{});var Qf=o(Yr);hc=i(Qf,`Linear Multistep Scheduler for discrete beta schedules. Based on the original k-diffusion implementation by
Katherine Crowson:
`),er=n(Qf,"A",{href:!0,rel:!0});var Yh=o(er);mc=i(Yh,"https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),Yh.forEach(r),Qf.forEach(r),gc=c(X),M=n(X,"P",{});var R=o(M);Jr=n(R,"A",{href:!0});var Jh=o(Jr);_c=i(Jh,"~ConfigMixin"),Jh.forEach(r),vc=i(R," takes care of storing all config attributes that are passed in the scheduler\u2019s "),Tn=n(R,"CODE",{});var jh=o(Tn);bc=i(jh,"__init__"),jh.forEach(r),Sc=i(R,`
function, such as `),On=n(R,"CODE",{});var Qh=o(On);yc=i(Qh,"num_train_timesteps"),Qh.forEach(r),$c=i(R,". They can be accessed via "),kn=n(R,"CODE",{});var Xh=o(kn);Dc=i(Xh,"scheduler.config.num_train_timesteps"),Xh.forEach(r),xc=i(R,`.
`),jr=n(R,"A",{href:!0});var Zh=o(jr);Ec=i(Zh,"~ConfigMixin"),Zh.forEach(r),wc=i(R," also provides general loading and saving functionality via the "),Qr=n(R,"A",{href:!0});var em=o(Qr);Mc=i(em,"save_config()"),em.forEach(r),Pc=i(R,` and
`),Xr=n(R,"A",{href:!0});var tm=o(Xr);Tc=i(tm,"from_config()"),tm.forEach(r),Oc=i(R," functios."),R.forEach(r),kc=c(X),Qe=n(X,"DIV",{class:!0});var Na=o(Qe);h(tr.$$.fragment,Na),Cc=c(Na),Cn=n(Na,"P",{});var rm=o(Cn);Vc=i(rm,"Compute a linear multistep coefficient."),rm.forEach(r),Na.forEach(r),Ac=c(X),Xe=n(X,"DIV",{class:!0});var La=o(Xe);h(rr.$$.fragment,La),Nc=c(La),Vn=n(La,"P",{});var sm=o(Vn);Lc=i(sm,"Sets the timesteps used for the diffusion chain. Supporting function to be run before inference."),sm.forEach(r),La.forEach(r),Ic=c(X),Ze=n(X,"DIV",{class:!0});var Ia=o(Ze);h(sr.$$.fragment,Ia),Fc=c(Ia),An=n(Ia,"P",{});var nm=o(An);Kc=i(nm,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),nm.forEach(r),Ia.forEach(r),X.forEach(r),Go=c(t),be=n(t,"H4",{class:!0});var Fa=o(be);et=n(Fa,"A",{id:!0,class:!0,href:!0});var om=o(et);Nn=n(om,"SPAN",{});var am=o(Nn);h(nr.$$.fragment,am),am.forEach(r),om.forEach(r),Uc=c(Fa),Ln=n(Fa,"SPAN",{});var im=o(Ln);qc=i(im,"Pseudo numerical methods for diffusion models (PNDM)"),im.forEach(r),Fa.forEach(r),zo=c(t),tt=n(t,"P",{});var Ka=o(tt);Hc=i(Ka,"Original implementation can be found "),or=n(Ka,"A",{href:!0,rel:!0});var dm=o(or);Rc=i(dm,"here"),dm.forEach(r),Wc=i(Ka,"."),Ka.forEach(r),Yo=c(t),y=n(t,"DIV",{class:!0});var L=o(y);h(ar.$$.fragment,L),Bc=c(L),In=n(L,"P",{});var lm=o(In);Gc=i(lm,`Pseudo numerical methods for diffusion models (PNDM) proposes using more advanced ODE integration techniques,
namely Runge-Kutta method and a linear multi-step method.`),lm.forEach(r),zc=c(L),P=n(L,"P",{});var W=o(P);Zr=n(W,"A",{href:!0});var cm=o(Zr);Yc=i(cm,"~ConfigMixin"),cm.forEach(r),Jc=i(W," takes care of storing all config attributes that are passed in the scheduler\u2019s "),Fn=n(W,"CODE",{});var um=o(Fn);jc=i(um,"__init__"),um.forEach(r),Qc=i(W,`
function, such as `),Kn=n(W,"CODE",{});var fm=o(Kn);Xc=i(fm,"num_train_timesteps"),fm.forEach(r),Zc=i(W,". They can be accessed via "),Un=n(W,"CODE",{});var pm=o(Un);eu=i(pm,"scheduler.config.num_train_timesteps"),pm.forEach(r),tu=i(W,`.
`),es=n(W,"A",{href:!0});var hm=o(es);ru=i(hm,"~ConfigMixin"),hm.forEach(r),su=i(W," also provides general loading and saving functionality via the "),ts=n(W,"A",{href:!0});var mm=o(ts);nu=i(mm,"save_config()"),mm.forEach(r),ou=i(W,` and
`),rs=n(W,"A",{href:!0});var gm=o(rs);au=i(gm,"from_config()"),gm.forEach(r),iu=i(W," functios."),W.forEach(r),du=c(L),ss=n(L,"P",{});var Xf=o(ss);lu=i(Xf,"For more details, see the original paper: "),ir=n(Xf,"A",{href:!0,rel:!0});var _m=o(ir);cu=i(_m,"https://arxiv.org/abs/2202.09778"),_m.forEach(r),Xf.forEach(r),uu=c(L),rt=n(L,"DIV",{class:!0});var Ua=o(rt);h(dr.$$.fragment,Ua),fu=c(Ua),qn=n(Ua,"P",{});var vm=o(qn);pu=i(vm,"Sets the discrete timesteps used for the diffusion chain. Supporting function to be run before inference."),vm.forEach(r),Ua.forEach(r),hu=c(L),se=n(L,"DIV",{class:!0});var vs=o(se);h(lr.$$.fragment,vs),mu=c(vs),Hn=n(vs,"P",{});var bm=o(Hn);gu=i(bm,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),bm.forEach(r),_u=c(vs),ee=n(vs,"P",{});var pt=o(ee);vu=i(pt,"This function calls "),Rn=n(pt,"CODE",{});var Sm=o(Rn);bu=i(Sm,"step_prk()"),Sm.forEach(r),Su=i(pt," or "),Wn=n(pt,"CODE",{});var ym=o(Wn);yu=i(ym,"step_plms()"),ym.forEach(r),$u=i(pt," depending on the internal variable "),Bn=n(pt,"CODE",{});var $m=o(Bn);Du=i($m,"counter"),$m.forEach(r),xu=i(pt,"."),pt.forEach(r),vs.forEach(r),Eu=c(L),st=n(L,"DIV",{class:!0});var qa=o(st);h(cr.$$.fragment,qa),wu=c(qa),Gn=n(qa,"P",{});var Dm=o(Gn);Mu=i(Dm,`Step function propagating the sample with the linear multi-step method. This has one forward pass with multiple
times to approximate the solution.`),Dm.forEach(r),qa.forEach(r),Pu=c(L),nt=n(L,"DIV",{class:!0});var Ha=o(nt);h(ur.$$.fragment,Ha),Tu=c(Ha),zn=n(Ha,"P",{});var xm=o(zn);Ou=i(xm,`Step function propagating the sample with the Runge-Kutta method. RK takes 4 forward passes to approximate the
solution to the differential equation.`),xm.forEach(r),Ha.forEach(r),L.forEach(r),Jo=c(t),Se=n(t,"H4",{class:!0});var Ra=o(Se);ot=n(Ra,"A",{id:!0,class:!0,href:!0});var Em=o(ot);Yn=n(Em,"SPAN",{});var wm=o(Yn);h(fr.$$.fragment,wm),wm.forEach(r),Em.forEach(r),ku=c(Ra),Jn=n(Ra,"SPAN",{});var Mm=o(Jn);Cu=i(Mm,"variance exploding stochastic differential equation (SDE) scheduler"),Mm.forEach(r),Ra.forEach(r),jo=c(t),at=n(t,"P",{});var Wa=o(at);Vu=i(Wa,"Original paper can be found "),pr=n(Wa,"A",{href:!0,rel:!0});var Pm=o(pr);Au=i(Pm,"here"),Pm.forEach(r),Nu=i(Wa,"."),Wa.forEach(r),Qo=c(t),$=n(t,"DIV",{class:!0});var I=o($);h(hr.$$.fragment,I),Lu=c(I),jn=n(I,"P",{});var Tm=o(jn);Iu=i(Tm,"The variance exploding stochastic differential equation (SDE) scheduler."),Tm.forEach(r),Fu=c(I),ns=n(I,"P",{});var Zf=o(ns);Ku=i(Zf,"For more information, see the original paper: "),mr=n(Zf,"A",{href:!0,rel:!0});var Om=o(mr);Uu=i(Om,"https://arxiv.org/abs/2011.13456"),Om.forEach(r),Zf.forEach(r),qu=c(I),T=n(I,"P",{});var B=o(T);os=n(B,"A",{href:!0});var km=o(os);Hu=i(km,"~ConfigMixin"),km.forEach(r),Ru=i(B," takes care of storing all config attributes that are passed in the scheduler\u2019s "),Qn=n(B,"CODE",{});var Cm=o(Qn);Wu=i(Cm,"__init__"),Cm.forEach(r),Bu=i(B,`
function, such as `),Xn=n(B,"CODE",{});var Vm=o(Xn);Gu=i(Vm,"num_train_timesteps"),Vm.forEach(r),zu=i(B,". They can be accessed via "),Zn=n(B,"CODE",{});var Am=o(Zn);Yu=i(Am,"scheduler.config.num_train_timesteps"),Am.forEach(r),Ju=i(B,`.
`),as=n(B,"A",{href:!0});var Nm=o(as);ju=i(Nm,"~ConfigMixin"),Nm.forEach(r),Qu=i(B," also provides general loading and saving functionality via the "),is=n(B,"A",{href:!0});var Lm=o(is);Xu=i(Lm,"save_config()"),Lm.forEach(r),Zu=i(B,` and
`),ds=n(B,"A",{href:!0});var Im=o(ds);ef=i(Im,"from_config()"),Im.forEach(r),tf=i(B," functios."),B.forEach(r),rf=c(I),ne=n(I,"DIV",{class:!0});var bs=o(ne);h(gr.$$.fragment,bs),sf=c(bs),eo=n(bs,"P",{});var Fm=o(eo);nf=i(Fm,"Sets the noise scales used for the diffusion chain. Supporting function to be run before inference."),Fm.forEach(r),of=c(bs),ye=n(bs,"P",{});var Ss=o(ye);af=i(Ss,"The sigmas control the weight of the "),to=n(Ss,"CODE",{});var Km=o(to);df=i(Km,"drift"),Km.forEach(r),lf=i(Ss," and "),ro=n(Ss,"CODE",{});var Um=o(ro);cf=i(Um,"diffusion"),Um.forEach(r),uf=i(Ss," components of sample update."),Ss.forEach(r),bs.forEach(r),ff=c(I),it=n(I,"DIV",{class:!0});var Ba=o(it);h(_r.$$.fragment,Ba),pf=c(Ba),so=n(Ba,"P",{});var qm=o(so);hf=i(qm,"Sets the continuous timesteps used for the diffusion chain. Supporting function to be run before inference."),qm.forEach(r),Ba.forEach(r),mf=c(I),dt=n(I,"DIV",{class:!0});var Ga=o(dt);h(vr.$$.fragment,Ga),gf=c(Ga),no=n(Ga,"P",{});var Hm=o(no);_f=i(Hm,`Correct the predicted sample based on the output model_output of the network. This is often run repeatedly
after making the prediction for the previous timestep.`),Hm.forEach(r),Ga.forEach(r),vf=c(I),lt=n(I,"DIV",{class:!0});var za=o(lt);h(br.$$.fragment,za),bf=c(za),oo=n(za,"P",{});var Rm=o(oo);Sf=i(Rm,`Predict the sample at the previous timestep by reversing the SDE. Core function to propagate the diffusion
process from the learned model outputs (most often the predicted noise).`),Rm.forEach(r),za.forEach(r),I.forEach(r),Xo=c(t),$e=n(t,"H4",{class:!0});var Ya=o($e);ct=n(Ya,"A",{id:!0,class:!0,href:!0});var Wm=o(ct);ao=n(Wm,"SPAN",{});var Bm=o(ao);h(Sr.$$.fragment,Bm),Bm.forEach(r),Wm.forEach(r),yf=c(Ya),io=n(Ya,"SPAN",{});var Gm=o(io);$f=i(Gm,"variance preserving stochastic differential equation (SDE) scheduler"),Gm.forEach(r),Ya.forEach(r),Zo=c(t),ut=n(t,"P",{});var Ja=o(ut);Df=i(Ja,"Original paper can be found "),yr=n(Ja,"A",{href:!0,rel:!0});var zm=o(yr);xf=i(zm,"here"),zm.forEach(r),Ef=i(Ja,"."),Ja.forEach(r),ea=c(t),h(ft.$$.fragment,t),ta=c(t),K=n(t,"DIV",{class:!0});var oe=o(K);h($r.$$.fragment,oe),wf=c(oe),lo=n(oe,"P",{});var Ym=o(lo);Mf=i(Ym,"The variance preserving stochastic differential equation (SDE) scheduler."),Ym.forEach(r),Pf=c(oe),O=n(oe,"P",{});var G=o(O);ls=n(G,"A",{href:!0});var Jm=o(ls);Tf=i(Jm,"~ConfigMixin"),Jm.forEach(r),Of=i(G," takes care of storing all config attributes that are passed in the scheduler\u2019s "),co=n(G,"CODE",{});var jm=o(co);kf=i(jm,"__init__"),jm.forEach(r),Cf=i(G,`
function, such as `),uo=n(G,"CODE",{});var Qm=o(uo);Vf=i(Qm,"num_train_timesteps"),Qm.forEach(r),Af=i(G,". They can be accessed via "),fo=n(G,"CODE",{});var Xm=o(fo);Nf=i(Xm,"scheduler.config.num_train_timesteps"),Xm.forEach(r),Lf=i(G,`.
`),cs=n(G,"A",{href:!0});var Zm=o(cs);If=i(Zm,"~ConfigMixin"),Zm.forEach(r),Ff=i(G," also provides general loading and saving functionality via the "),us=n(G,"A",{href:!0});var eg=o(us);Kf=i(eg,"save_config()"),eg.forEach(r),Uf=i(G,` and
`),fs=n(G,"A",{href:!0});var tg=o(fs);qf=i(tg,"from_config()"),tg.forEach(r),Hf=i(G," functios."),G.forEach(r),Rf=c(oe),ps=n(oe,"P",{});var ep=o(ps);Wf=i(ep,"For more information, see the original paper: "),Dr=n(ep,"A",{href:!0,rel:!0});var rg=o(Dr);Bf=i(rg,"https://arxiv.org/abs/2011.13456"),rg.forEach(r),ep.forEach(r),Gf=c(oe),po=n(oe,"P",{});var sg=o(po);zf=i(sg,"UNDER CONSTRUCTION"),sg.forEach(r),oe.forEach(r),this.h()},h(){d(N,"name","hf:doc:metadata"),d(N,"content",JSON.stringify(fg)),d(J,"id","schedulers"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#schedulers"),d(F,"class","relative group"),d(xe,"id","what-is-a-scheduler"),d(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xe,"href","#what-is-a-scheduler"),d(ae,"class","relative group"),d(Me,"id","discrete-versus-continuous-schedulers"),d(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Me,"href","#discrete-versus-continuous-schedulers"),d(de,"class","relative group"),d(Mr,"href","/docs/diffusers/main/en/api/schedulers#diffusers.DDPMScheduler"),d(Pr,"href","/docs/diffusers/main/en/api/schedulers#diffusers.PNDMScheduler"),d(Tr,"href","/docs/diffusers/main/en/api/schedulers#diffusers.ScoreSdeVeScheduler"),d(Pe,"id","designing-reusable-schedulers"),d(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pe,"href","#designing-reusable-schedulers"),d(le,"class","relative group"),d(Oe,"id","api"),d(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oe,"href","#api"),d(ce,"class","relative group"),d(Cr,"href","/docs/diffusers/main/en/api/schedulers#diffusers.SchedulerMixin"),d(Ce,"id","diffusers.SchedulerMixin"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#diffusers.SchedulerMixin"),d(ue,"class","relative group"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ae,"id","diffusers.schedulers.scheduling_utils.SchedulerOutput"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#diffusers.schedulers.scheduling_utils.SchedulerOutput"),d(fe,"class","relative group"),d(pe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ne,"id","implemented-schedulers"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#implemented-schedulers"),d(he,"class","relative group"),d(Le,"id","diffusers.DDIMScheduler"),d(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Le,"href","#diffusers.DDIMScheduler"),d(me,"class","relative group"),d(Ar,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(Nr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(Lr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.save_config"),d(Ir,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.from_config"),d(kt,"href","https://arxiv.org/abs/2010.02502"),d(kt,"rel","nofollow"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ke,"id","diffusers.DDPMScheduler"),d(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ke,"href","#diffusers.DDPMScheduler"),d(ge,"class","relative group"),d(Nt,"href","https://arxiv.org/abs/2010.02502"),d(Nt,"rel","nofollow"),d(Kr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(Ur,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(qr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.save_config"),d(Hr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.from_config"),d(It,"href","https://arxiv.org/abs/2006.11239"),d(It,"rel","nofollow"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Re,"id","diffusers.KarrasVeScheduler"),d(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Re,"href","#diffusers.KarrasVeScheduler"),d(_e,"class","relative group"),d(qt,"href","https://arxiv.org/abs/2006.11239"),d(qt,"rel","nofollow"),d(Rt,"href","https://arxiv.org/abs/2206.00364"),d(Rt,"rel","nofollow"),d(Wt,"href","https://arxiv.org/abs/2011.13456"),d(Wt,"rel","nofollow"),d(Wr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(Br,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(Gr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.save_config"),d(zr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.from_config"),d(Gt,"href","https://arxiv.org/abs/2206.00364"),d(Gt,"rel","nofollow"),d(re,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Je,"id","diffusers.LMSDiscreteScheduler"),d(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Je,"href","#diffusers.LMSDiscreteScheduler"),d(ve,"class","relative group"),d(Xt,"href","https://arxiv.org/abs/2206.00364"),d(Xt,"rel","nofollow"),d(er,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),d(er,"rel","nofollow"),d(Jr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(jr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(Qr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.save_config"),d(Xr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.from_config"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(et,"id","diffusers.PNDMScheduler"),d(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(et,"href","#diffusers.PNDMScheduler"),d(be,"class","relative group"),d(or,"href","https://github.com/crowsonkb/k-diffusion/blob/481677d114f6ea445aa009cf5bd7a9cdee909e47/k_diffusion/sampling.py#L181"),d(or,"rel","nofollow"),d(Zr,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(es,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(ts,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.save_config"),d(rs,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.from_config"),d(ir,"href","https://arxiv.org/abs/2202.09778"),d(ir,"rel","nofollow"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(se,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ot,"id","diffusers.ScoreSdeVeScheduler"),d(ot,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ot,"href","#diffusers.ScoreSdeVeScheduler"),d(Se,"class","relative group"),d(pr,"href","https://arxiv.org/abs/2011.13456"),d(pr,"rel","nofollow"),d(mr,"href","https://arxiv.org/abs/2011.13456"),d(mr,"rel","nofollow"),d(os,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(as,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(is,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.save_config"),d(ds,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.from_config"),d(ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ct,"id","diffusers.schedulers.ScoreSdeVpScheduler"),d(ct,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ct,"href","#diffusers.schedulers.ScoreSdeVpScheduler"),d($e,"class","relative group"),d(yr,"href","https://arxiv.org/abs/2011.13456"),d(yr,"rel","nofollow"),d(ls,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(cs,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin"),d(us,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.save_config"),d(fs,"href","/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.from_config"),d(Dr,"href","https://arxiv.org/abs/2011.13456"),d(Dr,"rel","nofollow"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,u){e(document.head,N),f(t,De,u),f(t,F,u),e(F,J),e(J,ys),m(ht,ys,null),e(F,ja),e(F,$s),e($s,Qa),f(t,go,u),f(t,Er,u),e(Er,Xa),f(t,_o,u),f(t,ae,u),e(ae,xe),e(xe,Ds),m(mt,Ds,null),e(ae,Za),e(ae,xs),e(xs,ei),f(t,vo,u),f(t,Ee,u),e(Ee,ti),e(Ee,Es),e(Es,ri),e(Ee,si),f(t,bo,u),f(t,we,u),e(we,wr),e(wr,ni),e(wr,gt),e(gt,ws),e(ws,oi),e(gt,ai),e(gt,Ms),e(Ms,ii),e(we,di),e(we,ie),e(ie,li),e(ie,Ps),e(Ps,ci),e(ie,ui),e(ie,Ts),e(Ts,fi),e(ie,pi),f(t,So,u),f(t,de,u),e(de,Me),e(Me,Os),m(_t,Os,null),e(de,hi),e(de,ks),e(ks,mi),f(t,yo,u),f(t,D,u),e(D,gi),e(D,Cs),e(Cs,_i),e(D,vi),e(D,Mr),e(Mr,bi),e(D,Si),e(D,Pr),e(Pr,yi),e(D,$i),e(D,Vs),e(Vs,Di),e(D,xi),e(D,Tr),e(Tr,Ei),e(D,wi),e(D,As),e(As,Mi),e(D,Pi),f(t,$o,u),f(t,le,u),e(le,Pe),e(Pe,Ns),m(vt,Ns,null),e(le,Ti),e(le,Ls),e(Ls,Oi),f(t,Do,u),f(t,Or,u),e(Or,ki),f(t,xo,u),f(t,Te,u),e(Te,Is),e(Is,Ci),e(Te,Vi),e(Te,Fs),e(Fs,Ai),f(t,Eo,u),f(t,ce,u),e(ce,Oe),e(Oe,Ks),m(bt,Ks,null),e(ce,Ni),e(ce,Us),e(Us,Li),f(t,wo,u),f(t,kr,u),e(kr,Ii),f(t,Mo,u),f(t,te,u),e(te,St),e(St,Fi),e(St,qs),e(qs,Ki),e(St,Ui),e(te,qi),e(te,yt),e(yt,Hi),e(yt,Hs),e(Hs,Ri),e(yt,Wi),e(te,Bi),e(te,$t),e($t,Gi),e($t,Rs),e(Rs,zi),e($t,Yi),f(t,Po,u),f(t,ke,u),e(ke,Ji),e(ke,Cr),e(Cr,ji),e(ke,Qi),f(t,To,u),f(t,ue,u),e(ue,Ce),e(Ce,Ws),m(Dt,Ws,null),e(ue,Xi),e(ue,Bs),e(Bs,Zi),f(t,Oo,u),f(t,Z,u),m(xt,Z,null),e(Z,ed),e(Z,Gs),e(Gs,td),e(Z,rd),e(Z,Ve),m(Et,Ve,null),e(Ve,sd),e(Ve,zs),e(zs,nd),f(t,ko,u),f(t,fe,u),e(fe,Ae),e(Ae,Ys),m(wt,Ys,null),e(fe,od),e(fe,Js),e(Js,ad),f(t,Co,u),f(t,pe,u),m(Mt,pe,null),e(pe,id),e(pe,js),e(js,dd),f(t,Vo,u),f(t,he,u),e(he,Ne),e(Ne,Qs),m(Pt,Qs,null),e(he,ld),e(he,Xs),e(Xs,cd),f(t,Ao,u),f(t,me,u),e(me,Le),e(Le,Zs),m(Tt,Zs,null),e(me,ud),e(me,en),e(en,fd),f(t,No,u),f(t,Vr,u),e(Vr,pd),f(t,Lo,u),f(t,C,u),m(Ot,C,null),e(C,hd),e(C,tn),e(tn,md),e(C,gd),e(C,x),e(x,Ar),e(Ar,_d),e(x,vd),e(x,rn),e(rn,bd),e(x,Sd),e(x,sn),e(sn,yd),e(x,$d),e(x,nn),e(nn,Dd),e(x,xd),e(x,Nr),e(Nr,Ed),e(x,wd),e(x,Lr),e(Lr,Md),e(x,Pd),e(x,Ir),e(Ir,Td),e(x,Od),e(C,kd),e(C,Fr),e(Fr,Cd),e(Fr,kt),e(kt,Vd),e(C,Ad),e(C,Ie),m(Ct,Ie,null),e(Ie,Nd),e(Ie,on),e(on,Ld),e(C,Id),e(C,Fe),m(Vt,Fe,null),e(Fe,Fd),e(Fe,an),e(an,Kd),f(t,Io,u),f(t,ge,u),e(ge,Ke),e(Ke,dn),m(At,dn,null),e(ge,Ud),e(ge,ln),e(ln,qd),f(t,Fo,u),f(t,Ue,u),e(Ue,Hd),e(Ue,Nt),e(Nt,Rd),e(Ue,Wd),f(t,Ko,u),f(t,V,u),m(Lt,V,null),e(V,Bd),e(V,cn),e(cn,Gd),e(V,zd),e(V,E),e(E,Kr),e(Kr,Yd),e(E,Jd),e(E,un),e(un,jd),e(E,Qd),e(E,fn),e(fn,Xd),e(E,Zd),e(E,pn),e(pn,el),e(E,tl),e(E,Ur),e(Ur,rl),e(E,sl),e(E,qr),e(qr,nl),e(E,ol),e(E,Hr),e(Hr,al),e(E,il),e(V,dl),e(V,Rr),e(Rr,ll),e(Rr,It),e(It,cl),e(V,ul),e(V,qe),m(Ft,qe,null),e(qe,fl),e(qe,hn),e(hn,pl),e(V,hl),e(V,He),m(Kt,He,null),e(He,ml),e(He,mn),e(mn,gl),f(t,Uo,u),f(t,_e,u),e(_e,Re),e(Re,gn),m(Ut,gn,null),e(_e,_l),e(_e,_n),e(_n,vl),f(t,qo,u),f(t,We,u),e(We,bl),e(We,qt),e(qt,Sl),e(We,yl),f(t,Ho,u),f(t,S,u),m(Ht,S,null),e(S,$l),e(S,vn),e(vn,Dl),e(S,xl),e(S,Be),e(Be,El),e(Be,Rt),e(Rt,wl),e(Be,Ml),e(Be,Wt),e(Wt,Pl),e(S,Tl),e(S,w),e(w,Wr),e(Wr,Ol),e(w,kl),e(w,bn),e(bn,Cl),e(w,Vl),e(w,Sn),e(Sn,Al),e(w,Nl),e(w,yn),e(yn,Ll),e(w,Il),e(w,Br),e(Br,Fl),e(w,Kl),e(w,Gr),e(Gr,Ul),e(w,ql),e(w,zr),e(zr,Hl),e(w,Rl),e(S,Wl),e(S,Bt),e(Bt,Bl),e(Bt,Gt),e(Gt,Gl),e(Bt,zl),e(S,Yl),e(S,re),m(zt,re,null),e(re,Jl),e(re,$n),e($n,jl),e(re,Ql),e(re,Dn),e(Dn,Xl),e(S,Zl),e(S,Ge),m(Yt,Ge,null),e(Ge,ec),e(Ge,xn),e(xn,tc),e(S,rc),e(S,ze),m(Jt,ze,null),e(ze,sc),e(ze,En),e(En,nc),e(S,oc),e(S,Ye),m(jt,Ye,null),e(Ye,ac),e(Ye,wn),e(wn,ic),f(t,Ro,u),f(t,ve,u),e(ve,Je),e(Je,Mn),m(Qt,Mn,null),e(ve,dc),e(ve,Pn),e(Pn,lc),f(t,Wo,u),f(t,je,u),e(je,cc),e(je,Xt),e(Xt,uc),e(je,fc),f(t,Bo,u),f(t,A,u),m(Zt,A,null),e(A,pc),e(A,Yr),e(Yr,hc),e(Yr,er),e(er,mc),e(A,gc),e(A,M),e(M,Jr),e(Jr,_c),e(M,vc),e(M,Tn),e(Tn,bc),e(M,Sc),e(M,On),e(On,yc),e(M,$c),e(M,kn),e(kn,Dc),e(M,xc),e(M,jr),e(jr,Ec),e(M,wc),e(M,Qr),e(Qr,Mc),e(M,Pc),e(M,Xr),e(Xr,Tc),e(M,Oc),e(A,kc),e(A,Qe),m(tr,Qe,null),e(Qe,Cc),e(Qe,Cn),e(Cn,Vc),e(A,Ac),e(A,Xe),m(rr,Xe,null),e(Xe,Nc),e(Xe,Vn),e(Vn,Lc),e(A,Ic),e(A,Ze),m(sr,Ze,null),e(Ze,Fc),e(Ze,An),e(An,Kc),f(t,Go,u),f(t,be,u),e(be,et),e(et,Nn),m(nr,Nn,null),e(be,Uc),e(be,Ln),e(Ln,qc),f(t,zo,u),f(t,tt,u),e(tt,Hc),e(tt,or),e(or,Rc),e(tt,Wc),f(t,Yo,u),f(t,y,u),m(ar,y,null),e(y,Bc),e(y,In),e(In,Gc),e(y,zc),e(y,P),e(P,Zr),e(Zr,Yc),e(P,Jc),e(P,Fn),e(Fn,jc),e(P,Qc),e(P,Kn),e(Kn,Xc),e(P,Zc),e(P,Un),e(Un,eu),e(P,tu),e(P,es),e(es,ru),e(P,su),e(P,ts),e(ts,nu),e(P,ou),e(P,rs),e(rs,au),e(P,iu),e(y,du),e(y,ss),e(ss,lu),e(ss,ir),e(ir,cu),e(y,uu),e(y,rt),m(dr,rt,null),e(rt,fu),e(rt,qn),e(qn,pu),e(y,hu),e(y,se),m(lr,se,null),e(se,mu),e(se,Hn),e(Hn,gu),e(se,_u),e(se,ee),e(ee,vu),e(ee,Rn),e(Rn,bu),e(ee,Su),e(ee,Wn),e(Wn,yu),e(ee,$u),e(ee,Bn),e(Bn,Du),e(ee,xu),e(y,Eu),e(y,st),m(cr,st,null),e(st,wu),e(st,Gn),e(Gn,Mu),e(y,Pu),e(y,nt),m(ur,nt,null),e(nt,Tu),e(nt,zn),e(zn,Ou),f(t,Jo,u),f(t,Se,u),e(Se,ot),e(ot,Yn),m(fr,Yn,null),e(Se,ku),e(Se,Jn),e(Jn,Cu),f(t,jo,u),f(t,at,u),e(at,Vu),e(at,pr),e(pr,Au),e(at,Nu),f(t,Qo,u),f(t,$,u),m(hr,$,null),e($,Lu),e($,jn),e(jn,Iu),e($,Fu),e($,ns),e(ns,Ku),e(ns,mr),e(mr,Uu),e($,qu),e($,T),e(T,os),e(os,Hu),e(T,Ru),e(T,Qn),e(Qn,Wu),e(T,Bu),e(T,Xn),e(Xn,Gu),e(T,zu),e(T,Zn),e(Zn,Yu),e(T,Ju),e(T,as),e(as,ju),e(T,Qu),e(T,is),e(is,Xu),e(T,Zu),e(T,ds),e(ds,ef),e(T,tf),e($,rf),e($,ne),m(gr,ne,null),e(ne,sf),e(ne,eo),e(eo,nf),e(ne,of),e(ne,ye),e(ye,af),e(ye,to),e(to,df),e(ye,lf),e(ye,ro),e(ro,cf),e(ye,uf),e($,ff),e($,it),m(_r,it,null),e(it,pf),e(it,so),e(so,hf),e($,mf),e($,dt),m(vr,dt,null),e(dt,gf),e(dt,no),e(no,_f),e($,vf),e($,lt),m(br,lt,null),e(lt,bf),e(lt,oo),e(oo,Sf),f(t,Xo,u),f(t,$e,u),e($e,ct),e(ct,ao),m(Sr,ao,null),e($e,yf),e($e,io),e(io,$f),f(t,Zo,u),f(t,ut,u),e(ut,Df),e(ut,yr),e(yr,xf),e(ut,Ef),f(t,ea,u),m(ft,t,u),f(t,ta,u),f(t,K,u),m($r,K,null),e(K,wf),e(K,lo),e(lo,Mf),e(K,Pf),e(K,O),e(O,ls),e(ls,Tf),e(O,Of),e(O,co),e(co,kf),e(O,Cf),e(O,uo),e(uo,Vf),e(O,Af),e(O,fo),e(fo,Nf),e(O,Lf),e(O,cs),e(cs,If),e(O,Ff),e(O,us),e(us,Kf),e(O,Uf),e(O,fs),e(fs,qf),e(O,Hf),e(K,Rf),e(K,ps),e(ps,Wf),e(ps,Dr),e(Dr,Bf),e(K,Gf),e(K,po),e(po,zf),ra=!0},p(t,[u]){const xr={};u&2&&(xr.$$scope={dirty:u,ctx:t}),ft.$set(xr)},i(t){ra||(g(ht.$$.fragment,t),g(mt.$$.fragment,t),g(_t.$$.fragment,t),g(vt.$$.fragment,t),g(bt.$$.fragment,t),g(Dt.$$.fragment,t),g(xt.$$.fragment,t),g(Et.$$.fragment,t),g(wt.$$.fragment,t),g(Mt.$$.fragment,t),g(Pt.$$.fragment,t),g(Tt.$$.fragment,t),g(Ot.$$.fragment,t),g(Ct.$$.fragment,t),g(Vt.$$.fragment,t),g(At.$$.fragment,t),g(Lt.$$.fragment,t),g(Ft.$$.fragment,t),g(Kt.$$.fragment,t),g(Ut.$$.fragment,t),g(Ht.$$.fragment,t),g(zt.$$.fragment,t),g(Yt.$$.fragment,t),g(Jt.$$.fragment,t),g(jt.$$.fragment,t),g(Qt.$$.fragment,t),g(Zt.$$.fragment,t),g(tr.$$.fragment,t),g(rr.$$.fragment,t),g(sr.$$.fragment,t),g(nr.$$.fragment,t),g(ar.$$.fragment,t),g(dr.$$.fragment,t),g(lr.$$.fragment,t),g(cr.$$.fragment,t),g(ur.$$.fragment,t),g(fr.$$.fragment,t),g(hr.$$.fragment,t),g(gr.$$.fragment,t),g(_r.$$.fragment,t),g(vr.$$.fragment,t),g(br.$$.fragment,t),g(Sr.$$.fragment,t),g(ft.$$.fragment,t),g($r.$$.fragment,t),ra=!0)},o(t){_(ht.$$.fragment,t),_(mt.$$.fragment,t),_(_t.$$.fragment,t),_(vt.$$.fragment,t),_(bt.$$.fragment,t),_(Dt.$$.fragment,t),_(xt.$$.fragment,t),_(Et.$$.fragment,t),_(wt.$$.fragment,t),_(Mt.$$.fragment,t),_(Pt.$$.fragment,t),_(Tt.$$.fragment,t),_(Ot.$$.fragment,t),_(Ct.$$.fragment,t),_(Vt.$$.fragment,t),_(At.$$.fragment,t),_(Lt.$$.fragment,t),_(Ft.$$.fragment,t),_(Kt.$$.fragment,t),_(Ut.$$.fragment,t),_(Ht.$$.fragment,t),_(zt.$$.fragment,t),_(Yt.$$.fragment,t),_(Jt.$$.fragment,t),_(jt.$$.fragment,t),_(Qt.$$.fragment,t),_(Zt.$$.fragment,t),_(tr.$$.fragment,t),_(rr.$$.fragment,t),_(sr.$$.fragment,t),_(nr.$$.fragment,t),_(ar.$$.fragment,t),_(dr.$$.fragment,t),_(lr.$$.fragment,t),_(cr.$$.fragment,t),_(ur.$$.fragment,t),_(fr.$$.fragment,t),_(hr.$$.fragment,t),_(gr.$$.fragment,t),_(_r.$$.fragment,t),_(vr.$$.fragment,t),_(br.$$.fragment,t),_(Sr.$$.fragment,t),_(ft.$$.fragment,t),_($r.$$.fragment,t),ra=!1},d(t){r(N),t&&r(De),t&&r(F),v(ht),t&&r(go),t&&r(Er),t&&r(_o),t&&r(ae),v(mt),t&&r(vo),t&&r(Ee),t&&r(bo),t&&r(we),t&&r(So),t&&r(de),v(_t),t&&r(yo),t&&r(D),t&&r($o),t&&r(le),v(vt),t&&r(Do),t&&r(Or),t&&r(xo),t&&r(Te),t&&r(Eo),t&&r(ce),v(bt),t&&r(wo),t&&r(kr),t&&r(Mo),t&&r(te),t&&r(Po),t&&r(ke),t&&r(To),t&&r(ue),v(Dt),t&&r(Oo),t&&r(Z),v(xt),v(Et),t&&r(ko),t&&r(fe),v(wt),t&&r(Co),t&&r(pe),v(Mt),t&&r(Vo),t&&r(he),v(Pt),t&&r(Ao),t&&r(me),v(Tt),t&&r(No),t&&r(Vr),t&&r(Lo),t&&r(C),v(Ot),v(Ct),v(Vt),t&&r(Io),t&&r(ge),v(At),t&&r(Fo),t&&r(Ue),t&&r(Ko),t&&r(V),v(Lt),v(Ft),v(Kt),t&&r(Uo),t&&r(_e),v(Ut),t&&r(qo),t&&r(We),t&&r(Ho),t&&r(S),v(Ht),v(zt),v(Yt),v(Jt),v(jt),t&&r(Ro),t&&r(ve),v(Qt),t&&r(Wo),t&&r(je),t&&r(Bo),t&&r(A),v(Zt),v(tr),v(rr),v(sr),t&&r(Go),t&&r(be),v(nr),t&&r(zo),t&&r(tt),t&&r(Yo),t&&r(y),v(ar),v(dr),v(lr),v(cr),v(ur),t&&r(Jo),t&&r(Se),v(fr),t&&r(jo),t&&r(at),t&&r(Qo),t&&r($),v(hr),v(gr),v(_r),v(vr),v(br),t&&r(Xo),t&&r($e),v(Sr),t&&r(Zo),t&&r(ut),t&&r(ea),v(ft,t),t&&r(ta),t&&r(K),v($r)}}}const fg={local:"schedulers",sections:[{local:"what-is-a-scheduler",sections:[{local:"discrete-versus-continuous-schedulers",title:"Discrete versus continuous schedulers"}],title:"What is a scheduler?"},{local:"designing-reusable-schedulers",title:"Designing Re-usable schedulers"},{local:"api",sections:[{local:"diffusers.SchedulerMixin",title:"SchedulerMixin"},{local:"diffusers.schedulers.scheduling_utils.SchedulerOutput",title:"SchedulerOutput"},{local:"implemented-schedulers",sections:[{local:"diffusers.DDIMScheduler",title:"Denoising diffusion implicit models (DDIM)"},{local:"diffusers.DDPMScheduler",title:"Denoising diffusion probabilistic models (DDPM)"},{local:"diffusers.KarrasVeScheduler",title:"Varience exploding, stochastic sampling from Karras et. al"},{local:"diffusers.LMSDiscreteScheduler",title:"Linear multistep scheduler for discrete beta schedules"},{local:"diffusers.PNDMScheduler",title:"Pseudo numerical methods for diffusion models (PNDM)"},{local:"diffusers.ScoreSdeVeScheduler",title:"variance exploding stochastic differential equation (SDE) scheduler"},{local:"diffusers.schedulers.ScoreSdeVpScheduler",title:"variance preserving stochastic differential equation (SDE) scheduler"}],title:"Implemented Schedulers"}],title:"API"}],title:"Schedulers"};function pg(mo){return dg(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vg extends ng{constructor(N){super();og(this,N,pg,ug,ag,{})}}export{vg as default,fg as metadata};
