import{S as rm,i as im,s as lm,e as n,k as l,w as u,t as r,M as dm,c as a,d as o,m as d,a as s,x as h,h as i,b as c,G as e,g as f,y as g,q as _,o as v,B as b,v as cm,L as mr}from"../../chunks/vendor-hf-doc-builder.js";import{T as sm}from"../../chunks/Tip-hf-doc-builder.js";import{D}from"../../chunks/Docstring-hf-doc-builder.js";import{C as ur}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as F}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as fr}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function pm(L){let x,M;return{c(){x=n("p"),M=r("Passing `use_auth_token=True\u201C is required when you want to use a private model.")},l($){x=a($,"P",{});var y=s(x);M=i(y,"Passing `use_auth_token=True\u201C is required when you want to use a private model."),y.forEach(o)},m($,y){f($,x,y),e(x,M)},d($){$&&o(x)}}}function fm(L){let x,M,$,y,k;return{c(){x=n("p"),M=r("Activate the special "),$=n("a"),y=r("\u201Coffline-mode\u201D"),k=r(` to use
this method in a firewalled environment.`),this.h()},l(m){x=a(m,"P",{});var w=s(x);M=i(w,"Activate the special "),$=a(w,"A",{href:!0,rel:!0});var Ne=s($);y=i(Ne,"\u201Coffline-mode\u201D"),Ne.forEach(o),k=i(w,` to use
this method in a firewalled environment.`),w.forEach(o),this.h()},h(){c($,"href","https://huggingface.co/diffusers/installation.html#offline-mode"),c($,"rel","nofollow")},m(m,w){f(m,x,w),e(x,M),e(x,$),e($,y),e(x,k)},d(m){m&&o(x)}}}function mm(L){let x,M,$,y,k;return y=new ur({props:{code:`from diffusers import FlaxUNet2DConditionModel

# Download model and configuration from huggingface.co and cache.
model, params = FlaxUNet2DConditionModel.from_pretrained("CompVis/stable-diffusion-v1-4")
# Model was saved using *save_pretrained('./test/saved_model/')* (for example purposes, not runnable).
model, params = FlaxUNet2DConditionModel.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> FlaxUNet2DConditionModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Model was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)* (for example purposes, not runnable).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){x=n("p"),M=r("Examples:"),$=l(),u(y.$$.fragment)},l(m){x=a(m,"P",{});var w=s(x);M=i(w,"Examples:"),w.forEach(o),$=d(m),h(y.$$.fragment,m)},m(m,w){f(m,x,w),e(x,M),f(m,$,w),g(y,m,w),k=!0},p:mr,i(m){k||(_(y.$$.fragment,m),k=!0)},o(m){v(y.$$.fragment,m),k=!1},d(m){m&&o(x),m&&o($),b(y,m)}}}function um(L){let x,M,$,y,k;return y=new ur({props:{code:`from diffusers import FlaxUNet2DConditionModel

# load model
model, params = FlaxUNet2DConditionModel.from_pretrained("CompVis/stable-diffusion-v1-4")
# By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision
params = model.to_bf16(params)
# If you don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model, params = FlaxUNet2DConditionModel.from_pretrained("CompVis/stable-diffusion-v1-4")
flat_params = traverse_util.flatten_dict(params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
params = model.to_bf16(params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> FlaxUNet2DConditionModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model parameters will be in fp32 precision, to cast these to bfloat16 precision</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>params = model.to_bf16(params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>params = model.to_bf16(params, mask)`}}),{c(){x=n("p"),M=r("Examples:"),$=l(),u(y.$$.fragment)},l(m){x=a(m,"P",{});var w=s(x);M=i(w,"Examples:"),w.forEach(o),$=d(m),h(y.$$.fragment,m)},m(m,w){f(m,x,w),e(x,M),f(m,$,w),g(y,m,w),k=!0},p:mr,i(m){k||(_(y.$$.fragment,m),k=!0)},o(m){v(y.$$.fragment,m),k=!1},d(m){m&&o(x),m&&o($),b(y,m)}}}function hm(L){let x,M,$,y,k;return y=new ur({props:{code:`from diffusers import FlaxUNet2DConditionModel

# load model
model, params = FlaxUNet2DConditionModel.from_pretrained("CompVis/stable-diffusion-v1-4")
# By default, the model params will be in fp32, to cast these to float16
params = model.to_fp16(params)
# If you want don't want to cast certain parameters (for example layer norm bias and scale)
# then pass the mask as follows
from flax import traverse_util

model, params = FlaxUNet2DConditionModel.from_pretrained("CompVis/stable-diffusion-v1-4")
flat_params = traverse_util.flatten_dict(params)
mask = {
    path: (path[-2] != ("LayerNorm", "bias") and path[-2:] != ("LayerNorm", "scale"))
    for path in flat_params
}
mask = traverse_util.unflatten_dict(mask)
params = model.to_fp16(params, mask)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> FlaxUNet2DConditionModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># load model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to cast these to float16</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>params = model.to_fp16(params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If you want don&#x27;t want to cast certain parameters (for example layer norm bias and scale)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># then pass the mask as follows</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> flax <span class="hljs-keyword">import</span> traverse_util

<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>flat_params = traverse_util.flatten_dict(params)
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = {
<span class="hljs-meta">... </span>    path: (path[-<span class="hljs-number">2</span>] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;bias&quot;</span>) <span class="hljs-keyword">and</span> path[-<span class="hljs-number">2</span>:] != (<span class="hljs-string">&quot;LayerNorm&quot;</span>, <span class="hljs-string">&quot;scale&quot;</span>))
<span class="hljs-meta">... </span>    <span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> flat_params
<span class="hljs-meta">... </span>}
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = traverse_util.unflatten_dict(mask)
<span class="hljs-meta">&gt;&gt;&gt; </span>params = model.to_fp16(params, mask)`}}),{c(){x=n("p"),M=r("Examples:"),$=l(),u(y.$$.fragment)},l(m){x=a(m,"P",{});var w=s(x);M=i(w,"Examples:"),w.forEach(o),$=d(m),h(y.$$.fragment,m)},m(m,w){f(m,x,w),e(x,M),f(m,$,w),g(y,m,w),k=!0},p:mr,i(m){k||(_(y.$$.fragment,m),k=!0)},o(m){v(y.$$.fragment,m),k=!1},d(m){m&&o(x),m&&o($),b(y,m)}}}function gm(L){let x,M,$,y,k;return y=new ur({props:{code:`from diffusers import FlaxUNet2DConditionModel

# Download model and configuration from huggingface.co
model, params = FlaxUNet2DConditionModel.from_pretrained("CompVis/stable-diffusion-v1-4")
# By default, the model params will be in fp32, to illustrate the use of this method,
# we'll first cast to fp16 and back to fp32
params = model.to_f16(params)
# now cast back to fp32
params = model.to_fp32(params)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> diffusers <span class="hljs-keyword">import</span> FlaxUNet2DConditionModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model, params = FlaxUNet2DConditionModel.from_pretrained(<span class="hljs-string">&quot;CompVis/stable-diffusion-v1-4&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># By default, the model params will be in fp32, to illustrate the use of this method,</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># we&#x27;ll first cast to fp16 and back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>params = model.to_f16(params)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># now cast back to fp32</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>params = model.to_fp32(params)`}}),{c(){x=n("p"),M=r("Examples:"),$=l(),u(y.$$.fragment)},l(m){x=a(m,"P",{});var w=s(x);M=i(w,"Examples:"),w.forEach(o),$=d(m),h(y.$$.fragment,m)},m(m,w){f(m,x,w),e(x,M),f(m,$,w),g(y,m,w),k=!0},p:mr,i(m){k||(_(y.$$.fragment,m),k=!0)},o(m){v(y.$$.fragment,m),k=!1},d(m){m&&o(x),m&&o($),b(y,m)}}}function _m(L){let x,M,$,y,k,m,w,Ne,hr,Wa,R,gr,on,_r,vr,nn,br,xr,Qa,le,Te,an,ut,yr,sn,$r,Ya,E,ht,wr,rn,Dr,kr,Po,qo,Mr,Er,Ur,ln,Z,dn,Ar,Nr,cn,Tr,Fr,Vo,Cr,jr,Lr,ee,gt,Or,pn,Pr,qr,fn,Vr,Br,te,_t,Ir,mn,zr,Kr,un,Xr,Sr,A,vt,Wr,hn,Qr,Yr,de,Hr,gn,Gr,Jr,_n,Rr,Zr,ei,bt,ti,vn,oi,ni,ai,xt,si,bn,ri,ii,li,Fe,di,Ce,ci,je,yt,pi,xn,fi,mi,Le,$t,ui,wt,hi,yn,gi,_i,Ha,ce,Oe,$n,Dt,vi,wn,bi,Ga,kt,Mt,Ja,pe,Pe,Dn,Et,xi,kn,yi,Ra,q,Ut,$i,Mn,wi,Di,At,ki,Bo,Mi,Ei,Ui,Io,Nt,Za,fe,qe,En,Tt,Ai,Un,Ni,es,Ft,Ct,ts,me,Ve,An,jt,Ti,Nn,Fi,os,V,Lt,Ci,Tn,ji,Li,Ot,Oi,zo,Pi,qi,Vi,Be,Pt,Bi,Fn,Ii,ns,ue,Ie,Cn,qt,zi,jn,Ki,as,he,Vt,Xi,Ln,Si,ss,ge,ze,On,Bt,Wi,Pn,Qi,rs,_e,It,Yi,qn,Hi,is,ve,Ke,Vn,zt,Gi,Bn,Ji,ls,B,Kt,Ri,In,Zi,el,Xt,tl,Ko,ol,nl,al,Xo,St,ds,be,Xe,zn,Wt,sl,Kn,rl,cs,xe,Qt,il,Xn,ll,ps,ye,Se,Sn,Yt,dl,Wn,cl,fs,I,Ht,pl,Qn,fl,ml,Gt,ul,So,hl,gl,_l,Wo,Jt,ms,$e,We,Yn,Rt,vl,Hn,bl,us,U,Zt,xl,Gn,yl,$l,Qo,Yo,wl,Dl,kl,O,eo,Ml,Jn,El,Ul,to,Al,Rn,Nl,Tl,Fl,oo,Cl,Zn,jl,Ll,Ol,Qe,Pl,Ye,no,ql,ao,Vl,ea,Bl,Il,zl,S,so,Kl,z,Xl,ta,Sl,Wl,oa,Ql,Yl,na,Hl,Gl,aa,Jl,Rl,Zl,sa,ed,td,He,od,W,ro,nd,K,ad,ra,sd,rd,ia,id,ld,la,dd,cd,da,pd,fd,md,ca,ud,hd,Ge,gd,oe,io,_d,X,vd,pa,bd,xd,fa,yd,$d,ma,wd,Dd,ua,kd,Md,Ed,Je,hs,we,Re,ha,lo,Ud,ga,Ad,gs,De,co,Nd,Ze,po,Td,_a,Fd,_s,ke,et,va,fo,Cd,ba,jd,vs,T,mo,Ld,xa,Od,Pd,uo,qd,Ho,Vd,Bd,Id,ho,zd,go,Kd,Xd,Sd,ya,Wd,Qd,Y,$a,_o,Yd,Hd,wa,vo,Gd,Jd,Da,bo,Rd,Zd,ka,xo,ec,bs,Me,tt,Ma,yo,tc,Ea,oc,xs,H,$o,nc,Ua,ac,sc,ot,wo,rc,Aa,ic,ys,Ee,nt,Na,Do,lc,Ta,dc,$s,G,ko,cc,Fa,pc,fc,at,Mo,mc,Ca,uc,ws,Ue,st,ja,Eo,hc,La,gc,Ds,j,Uo,_c,Oa,vc,bc,Ao,xc,No,yc,$c,wc,Pa,Dc,kc,J,qa,To,Mc,Ec,Va,Fo,Uc,Ac,Ba,Co,Nc,Tc,Ia,jo,Fc,ks;return m=new F({}),ut=new F({}),ht=new D({props:{name:"class diffusers.ModelMixin",anchor:"diffusers.ModelMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L114"}}),gt=new D({props:{name:"disable_gradient_checkpointing",anchor:"diffusers.ModelMixin.disable_gradient_checkpointing",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L152"}}),_t=new D({props:{name:"enable_gradient_checkpointing",anchor:"diffusers.ModelMixin.enable_gradient_checkpointing",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L141"}}),vt=new D({props:{name:"from_pretrained",anchor:"diffusers.ModelMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike, NoneType]"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.ModelMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids should have an organization name, like <code>google/ddpm-celebahq-256</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using <code>save_config</code>, e.g.,
<code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.ModelMixin.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"diffusers.ModelMixin.from_pretrained.torch_dtype",description:`<strong>torch_dtype</strong> (<code>str</code> or <code>torch.dtype</code>, <em>optional</em>) &#x2014;
Override the default <code>torch.dtype</code> and load the model under this dtype. If <code>&quot;auto&quot;</code> is passed the dtype
will be automatically derived from the model&#x2019;s weights.`,name:"torch_dtype"},{anchor:"diffusers.ModelMixin.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.ModelMixin.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.ModelMixin.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.ModelMixin.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"diffusers.ModelMixin.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.ModelMixin.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>diffusers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"diffusers.ModelMixin.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.ModelMixin.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo (either remote in
huggingface.co or downloaded locally), you can specify the folder name here.`,name:"subfolder"},{anchor:"diffusers.ModelMixin.from_pretrained.mirror",description:`<strong>mirror</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Mirror source to accelerate downloads in China. If you are from China and have an accessibility
problem, you can set this option to resolve it. Note that we do not guarantee the timeliness or safety.
Please refer to the mirror site for more information.`,name:"mirror"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L212"}}),Fe=new sm({props:{$$slots:{default:[pm]},$$scope:{ctx:L}}}),Ce=new sm({props:{$$slots:{default:[fm]},$$scope:{ctx:L}}}),yt=new D({props:{name:"num_parameters",anchor:"diffusers.ModelMixin.num_parameters",parameters:[{name:"only_trainable",val:": bool = False"},{name:"exclude_embeddings",val:": bool = False"}],parametersDescription:[{anchor:"diffusers.ModelMixin.num_parameters.only_trainable",description:`<strong>only_trainable</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of trainable parameters`,name:"only_trainable"},{anchor:"diffusers.ModelMixin.num_parameters.exclude_embeddings",description:`<strong>exclude_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to return only the number of non-embeddings parameters`,name:"exclude_embeddings"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L573",returnDescription:`
<p>The number of parameters.</p>
`,returnType:`
<p><code>int</code></p>
`}}),$t=new D({props:{name:"save_pretrained",anchor:"diffusers.ModelMixin.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"is_main_process",val:": bool = True"},{name:"save_function",val:": typing.Callable = <function save at 0x7fdcdb0c34c0>"}],parametersDescription:[{anchor:"diffusers.ModelMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"diffusers.ModelMixin.save_pretrained.is_main_process",description:`<strong>is_main_process</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the process calling this is the main process or not. Useful when in distributed training like
TPUs and need to call this function on all processes. In this case, set <code>is_main_process=True</code> only on
the main process to avoid race conditions.`,name:"is_main_process"},{anchor:"diffusers.ModelMixin.save_pretrained.save_function",description:`<strong>save_function</strong> (<code>Callable</code>) &#x2014;
The function to use to save the state dictionary. Useful on distributed training like TPUs when one
need to replace <code>torch.save</code> by another method.`,name:"save_function"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_utils.py#L162"}}),Dt=new F({}),Mt=new D({props:{name:"class diffusers.models.unet_2d.UNet2DOutput",anchor:"diffusers.models.unet_2d.UNet2DOutput",parameters:[{name:"sample",val:": FloatTensor"}],parametersDescription:[{anchor:"diffusers.models.unet_2d.UNet2DOutput.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Hidden states output. Output of last layer of model.`,name:"sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/unet_2d.py#L15"}}),Et=new F({}),Ut=new D({props:{name:"class diffusers.UNet2DModel",anchor:"diffusers.UNet2DModel",parameters:[{name:"sample_size",val:": typing.Optional[int] = None"},{name:"in_channels",val:": int = 3"},{name:"out_channels",val:": int = 3"},{name:"center_input_sample",val:": bool = False"},{name:"time_embedding_type",val:": str = 'positional'"},{name:"freq_shift",val:": int = 0"},{name:"flip_sin_to_cos",val:": bool = True"},{name:"down_block_types",val:": typing.Tuple[str] = ('DownBlock2D', 'AttnDownBlock2D', 'AttnDownBlock2D', 'AttnDownBlock2D')"},{name:"up_block_types",val:": typing.Tuple[str] = ('AttnUpBlock2D', 'AttnUpBlock2D', 'AttnUpBlock2D', 'UpBlock2D')"},{name:"block_out_channels",val:": typing.Tuple[int] = (224, 448, 672, 896)"},{name:"layers_per_block",val:": int = 2"},{name:"mid_block_scale_factor",val:": float = 1"},{name:"downsample_padding",val:": int = 1"},{name:"act_fn",val:": str = 'silu'"},{name:"attention_head_dim",val:": int = 8"},{name:"norm_num_groups",val:": int = 32"},{name:"norm_eps",val:": float = 1e-05"}],parametersDescription:[{anchor:"diffusers.UNet2DModel.sample_size",description:`<strong>sample_size</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>, <em>optional</em>) &#x2014;
Input sample size.`,name:"sample_size"},{anchor:"diffusers.UNet2DModel.in_channels",description:"<strong>in_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014; Number of channels in the input image.",name:"in_channels"},{anchor:"diffusers.UNet2DModel.out_channels",description:"<strong>out_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014; Number of channels in the output.",name:"out_channels"},{anchor:"diffusers.UNet2DModel.center_input_sample",description:"<strong>center_input_sample</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014; Whether to center the input sample.",name:"center_input_sample"},{anchor:"diffusers.UNet2DModel.time_embedding_type",description:"<strong>time_embedding_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;positional&quot;</code>) &#x2014; Type of time embedding to use.",name:"time_embedding_type"},{anchor:"diffusers.UNet2DModel.freq_shift",description:"<strong>freq_shift</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014; Frequency shift for fourier time embedding.",name:"freq_shift"},{anchor:"diffusers.UNet2DModel.flip_sin_to_cos",description:`<strong>flip_sin_to_cos</strong> (<code>bool</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>False</code>): Whether to flip sin to cos for fourier time embedding.`,name:"flip_sin_to_cos"},{anchor:"diffusers.UNet2DModel.down_block_types",description:`<strong>down_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(&quot;DownBlock2D&quot;, &quot;AttnDownBlock2D&quot;, &quot;AttnDownBlock2D&quot;, &quot;AttnDownBlock2D&quot;)</code>): Tuple of downsample block
types.`,name:"down_block_types"},{anchor:"diffusers.UNet2DModel.up_block_types",description:`<strong>up_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(&quot;AttnUpBlock2D&quot;, &quot;AttnUpBlock2D&quot;, &quot;AttnUpBlock2D&quot;, &quot;UpBlock2D&quot;)</code>): Tuple of upsample block types.`,name:"up_block_types"},{anchor:"diffusers.UNet2DModel.block_out_channels",description:`<strong>block_out_channels</strong> (<code>Tuple[int]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(224, 448, 672, 896)</code>): Tuple of block output channels.`,name:"block_out_channels"},{anchor:"diffusers.UNet2DModel.layers_per_block",description:"<strong>layers_per_block</strong> (<code>int</code>, <em>optional</em>, defaults to <code>2</code>) &#x2014; The number of layers per block.",name:"layers_per_block"},{anchor:"diffusers.UNet2DModel.mid_block_scale_factor",description:"<strong>mid_block_scale_factor</strong> (<code>float</code>, <em>optional</em>, defaults to <code>1</code>) &#x2014; The scale factor for the mid block.",name:"mid_block_scale_factor"},{anchor:"diffusers.UNet2DModel.downsample_padding",description:"<strong>downsample_padding</strong> (<code>int</code>, <em>optional</em>, defaults to <code>1</code>) &#x2014; The padding for the downsample convolution.",name:"downsample_padding"},{anchor:"diffusers.UNet2DModel.act_fn",description:"<strong>act_fn</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014; The activation function to use.",name:"act_fn"},{anchor:"diffusers.UNet2DModel.attention_head_dim",description:"<strong>attention_head_dim</strong> (<code>int</code>, <em>optional</em>, defaults to <code>8</code>) &#x2014; The attention head dimension.",name:"attention_head_dim"},{anchor:"diffusers.UNet2DModel.norm_num_groups",description:"<strong>norm_num_groups</strong> (<code>int</code>, <em>optional</em>, defaults to <code>32</code>) &#x2014; The number of groups for the normalization.",name:"norm_num_groups"},{anchor:"diffusers.UNet2DModel.norm_eps",description:"<strong>norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to <code>1e-5</code>) &#x2014; The epsilon for the normalization.",name:"norm_eps"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/unet_2d.py#L25"}}),Nt=new D({props:{name:"forward",anchor:"diffusers.UNet2DModel.forward",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Union[torch.Tensor, float, int]"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.UNet2DModel.forward.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; (batch, channel, height, width) noisy inputs tensor",name:"sample"},{anchor:"diffusers.UNet2DModel.forward.timestep",description:"<strong>timestep</strong> (<code>torch.FloatTensor</code> or <code>float</code> or `int) &#x2014; (batch) timesteps",name:"timestep"},{anchor:"diffusers.UNet2DModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <a href="/docs/diffusers/main/en/api/models#diffusers.models.unet_2d.UNet2DOutput">UNet2DOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/unet_2d.py#L167",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/models#diffusers.models.unet_2d.UNet2DOutput"
>UNet2DOutput</a> if <code>return_dict</code> is True,
otherwise a <code>tuple</code>. When returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/models#diffusers.models.unet_2d.UNet2DOutput"
>UNet2DOutput</a> or <code>tuple</code></p>
`}}),Tt=new F({}),Ct=new D({props:{name:"class diffusers.models.unet_2d_condition.UNet2DConditionOutput",anchor:"diffusers.models.unet_2d_condition.UNet2DConditionOutput",parameters:[{name:"sample",val:": FloatTensor"}],parametersDescription:[{anchor:"diffusers.models.unet_2d_condition.UNet2DConditionOutput.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Hidden states conditioned on <code>encoder_hidden_states</code> input. Output of last layer of model.`,name:"sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/unet_2d_condition.py#L27"}}),jt=new F({}),Lt=new D({props:{name:"class diffusers.UNet2DConditionModel",anchor:"diffusers.UNet2DConditionModel",parameters:[{name:"sample_size",val:": typing.Optional[int] = None"},{name:"in_channels",val:": int = 4"},{name:"out_channels",val:": int = 4"},{name:"center_input_sample",val:": bool = False"},{name:"flip_sin_to_cos",val:": bool = True"},{name:"freq_shift",val:": int = 0"},{name:"down_block_types",val:": typing.Tuple[str] = ('CrossAttnDownBlock2D', 'CrossAttnDownBlock2D', 'CrossAttnDownBlock2D', 'DownBlock2D')"},{name:"up_block_types",val:": typing.Tuple[str] = ('UpBlock2D', 'CrossAttnUpBlock2D', 'CrossAttnUpBlock2D', 'CrossAttnUpBlock2D')"},{name:"block_out_channels",val:": typing.Tuple[int] = (320, 640, 1280, 1280)"},{name:"layers_per_block",val:": int = 2"},{name:"downsample_padding",val:": int = 1"},{name:"mid_block_scale_factor",val:": float = 1"},{name:"act_fn",val:": str = 'silu'"},{name:"norm_num_groups",val:": int = 32"},{name:"norm_eps",val:": float = 1e-05"},{name:"cross_attention_dim",val:": int = 1280"},{name:"attention_head_dim",val:": int = 8"}],parametersDescription:[{anchor:"diffusers.UNet2DConditionModel.sample_size",description:"<strong>sample_size</strong> (<code>int</code>, <em>optional</em>) &#x2014; The size of the input sample.",name:"sample_size"},{anchor:"diffusers.UNet2DConditionModel.in_channels",description:"<strong>in_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014; The number of channels in the input sample.",name:"in_channels"},{anchor:"diffusers.UNet2DConditionModel.out_channels",description:"<strong>out_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014; The number of channels in the output.",name:"out_channels"},{anchor:"diffusers.UNet2DConditionModel.center_input_sample",description:"<strong>center_input_sample</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014; Whether to center the input sample.",name:"center_input_sample"},{anchor:"diffusers.UNet2DConditionModel.flip_sin_to_cos",description:`<strong>flip_sin_to_cos</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to flip the sin to cos in the time embedding.`,name:"flip_sin_to_cos"},{anchor:"diffusers.UNet2DConditionModel.freq_shift",description:"<strong>freq_shift</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014; The frequency shift to apply to the time embedding.",name:"freq_shift"},{anchor:"diffusers.UNet2DConditionModel.down_block_types",description:`<strong>down_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to <code>(&quot;CrossAttnDownBlock2D&quot;, &quot;CrossAttnDownBlock2D&quot;, &quot;CrossAttnDownBlock2D&quot;, &quot;DownBlock2D&quot;)</code>) &#x2014;
The tuple of downsample blocks to use.`,name:"down_block_types"},{anchor:"diffusers.UNet2DConditionModel.up_block_types",description:`<strong>up_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to <code>(&quot;UpBlock2D&quot;, &quot;CrossAttnUpBlock2D&quot;, &quot;CrossAttnUpBlock2D&quot;, &quot;CrossAttnUpBlock2D&quot;,)</code>) &#x2014;
The tuple of upsample blocks to use.`,name:"up_block_types"},{anchor:"diffusers.UNet2DConditionModel.block_out_channels",description:`<strong>block_out_channels</strong> (<code>Tuple[int]</code>, <em>optional</em>, defaults to <code>(320, 640, 1280, 1280)</code>) &#x2014;
The tuple of output channels for each block.`,name:"block_out_channels"},{anchor:"diffusers.UNet2DConditionModel.layers_per_block",description:"<strong>layers_per_block</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014; The number of layers per block.",name:"layers_per_block"},{anchor:"diffusers.UNet2DConditionModel.downsample_padding",description:"<strong>downsample_padding</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014; The padding to use for the downsampling convolution.",name:"downsample_padding"},{anchor:"diffusers.UNet2DConditionModel.mid_block_scale_factor",description:"<strong>mid_block_scale_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014; The scale factor to use for the mid block.",name:"mid_block_scale_factor"},{anchor:"diffusers.UNet2DConditionModel.act_fn",description:"<strong>act_fn</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014; The activation function to use.",name:"act_fn"},{anchor:"diffusers.UNet2DConditionModel.norm_num_groups",description:"<strong>norm_num_groups</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014; The number of groups to use for the normalization.",name:"norm_num_groups"},{anchor:"diffusers.UNet2DConditionModel.norm_eps",description:"<strong>norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014; The epsilon to use for the normalization.",name:"norm_eps"},{anchor:"diffusers.UNet2DConditionModel.cross_attention_dim",description:"<strong>cross_attention_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 1280) &#x2014; The dimension of the cross attention features.",name:"cross_attention_dim"},{anchor:"diffusers.UNet2DConditionModel.attention_head_dim",description:"<strong>attention_head_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014; The dimension of the attention heads.",name:"attention_head_dim"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/unet_2d_condition.py#L37"}}),Pt=new D({props:{name:"forward",anchor:"diffusers.UNet2DConditionModel.forward",parameters:[{name:"sample",val:": FloatTensor"},{name:"timestep",val:": typing.Union[torch.Tensor, float, int]"},{name:"encoder_hidden_states",val:": Tensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.UNet2DConditionModel.forward.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; (batch, channel, height, width) noisy inputs tensor",name:"sample"},{anchor:"diffusers.UNet2DConditionModel.forward.timestep",description:"<strong>timestep</strong> (<code>torch.FloatTensor</code> or <code>float</code> or <code>int</code>) &#x2014; (batch) timesteps",name:"timestep"},{anchor:"diffusers.UNet2DConditionModel.forward.encoder_hidden_states",description:"<strong>encoder_hidden_states</strong> (<code>torch.FloatTensor</code>) &#x2014; (batch, channel, height, width) encoder hidden states",name:"encoder_hidden_states"},{anchor:"diffusers.UNet2DConditionModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <a href="/docs/diffusers/main/en/api/models#diffusers.models.unet_2d_condition.UNet2DConditionOutput">models.unet_2d_condition.UNet2DConditionOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/unet_2d_condition.py#L219",returnDescription:`
<p><a
  href="/docs/diffusers/main/en/api/models#diffusers.models.unet_2d_condition.UNet2DConditionOutput"
>UNet2DConditionOutput</a> if <code>return_dict</code> is True, otherwise a <code>tuple</code>. When
returning a tuple, the first element is the sample tensor.</p>
`,returnType:`
<p><a
  href="/docs/diffusers/main/en/api/models#diffusers.models.unet_2d_condition.UNet2DConditionOutput"
>UNet2DConditionOutput</a> or <code>tuple</code></p>
`}}),qt=new F({}),Vt=new D({props:{name:"class diffusers.models.vae.DecoderOutput",anchor:"diffusers.models.vae.DecoderOutput",parameters:[{name:"sample",val:": FloatTensor"}],parametersDescription:[{anchor:"diffusers.models.vae.DecoderOutput.sample",description:`<strong>sample</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Decoded output sample of the model. Output of the last layer of the model.`,name:"sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae.py#L15"}}),Bt=new F({}),It=new D({props:{name:"class diffusers.models.vae.VQEncoderOutput",anchor:"diffusers.models.vae.VQEncoderOutput",parameters:[{name:"latents",val:": FloatTensor"}],parametersDescription:[{anchor:"diffusers.models.vae.VQEncoderOutput.latents",description:`<strong>latents</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Encoded output sample of the model. Output of the last layer of the model.`,name:"latents"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae.py#L28"}}),zt=new F({}),Kt=new D({props:{name:"class diffusers.VQModel",anchor:"diffusers.VQModel",parameters:[{name:"in_channels",val:": int = 3"},{name:"out_channels",val:": int = 3"},{name:"down_block_types",val:": typing.Tuple[str] = ('DownEncoderBlock2D',)"},{name:"up_block_types",val:": typing.Tuple[str] = ('UpDecoderBlock2D',)"},{name:"block_out_channels",val:": typing.Tuple[int] = (64,)"},{name:"layers_per_block",val:": int = 1"},{name:"act_fn",val:": str = 'silu'"},{name:"latent_channels",val:": int = 3"},{name:"sample_size",val:": int = 32"},{name:"num_vq_embeddings",val:": int = 256"},{name:"norm_num_groups",val:": int = 32"}],parametersDescription:[{anchor:"diffusers.VQModel.in_channels",description:"<strong>in_channels</strong> (int, <em>optional</em>, defaults to 3) &#x2014; Number of channels in the input image.",name:"in_channels"},{anchor:"diffusers.VQModel.out_channels",description:"<strong>out_channels</strong> (int,  <em>optional</em>, defaults to 3) &#x2014; Number of channels in the output.",name:"out_channels"},{anchor:"diffusers.VQModel.down_block_types",description:`<strong>down_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(&quot;DownEncoderBlock2D&quot;,)</code>): Tuple of downsample block types.`,name:"down_block_types"},{anchor:"diffusers.VQModel.up_block_types",description:`<strong>up_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(&quot;UpDecoderBlock2D&quot;,)</code>): Tuple of upsample block types.`,name:"up_block_types"},{anchor:"diffusers.VQModel.block_out_channels",description:`<strong>block_out_channels</strong> (<code>Tuple[int]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(64,)</code>): Tuple of block output channels.`,name:"block_out_channels"},{anchor:"diffusers.VQModel.act_fn",description:"<strong>act_fn</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014; The activation function to use.",name:"act_fn"},{anchor:"diffusers.VQModel.latent_channels",description:"<strong>latent_channels</strong> (<code>int</code>, <em>optional</em>, defaults to <code>3</code>) &#x2014; Number of channels in the latent space.",name:"latent_channels"},{anchor:"diffusers.VQModel.sample_size",description:"<strong>sample_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>32</code>) &#x2014; TODO",name:"sample_size"},{anchor:"diffusers.VQModel.num_vq_embeddings",description:"<strong>num_vq_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to <code>256</code>) &#x2014; Number of codebook vectors in the VQ-VAE.",name:"num_vq_embeddings"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae.py#L375"}}),St=new D({props:{name:"forward",anchor:"diffusers.VQModel.forward",parameters:[{name:"sample",val:": FloatTensor"},{name:"return_dict",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.VQModel.forward.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; Input sample.",name:"sample"},{anchor:"diffusers.VQModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <code>DecoderOutput</code> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae.py#L468"}}),Wt=new F({}),Qt=new D({props:{name:"class diffusers.models.vae.AutoencoderKLOutput",anchor:"diffusers.models.vae.AutoencoderKLOutput",parameters:[{name:"latent_dist",val:": DiagonalGaussianDistribution"}],parametersDescription:[{anchor:"diffusers.models.vae.AutoencoderKLOutput.latent_dist",description:`<strong>latent_dist</strong> (<code>DiagonalGaussianDistribution</code>) &#x2014;
Encoded outputs of <code>Encoder</code> represented as the mean and logvar of <code>DiagonalGaussianDistribution</code>.
<code>DiagonalGaussianDistribution</code> allows for sampling latents from the distribution.`,name:"latent_dist"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae.py#L41"}}),Yt=new F({}),Ht=new D({props:{name:"class diffusers.AutoencoderKL",anchor:"diffusers.AutoencoderKL",parameters:[{name:"in_channels",val:": int = 3"},{name:"out_channels",val:": int = 3"},{name:"down_block_types",val:": typing.Tuple[str] = ('DownEncoderBlock2D',)"},{name:"up_block_types",val:": typing.Tuple[str] = ('UpDecoderBlock2D',)"},{name:"block_out_channels",val:": typing.Tuple[int] = (64,)"},{name:"layers_per_block",val:": int = 1"},{name:"act_fn",val:": str = 'silu'"},{name:"latent_channels",val:": int = 4"},{name:"norm_num_groups",val:": int = 32"},{name:"sample_size",val:": int = 32"}],parametersDescription:[{anchor:"diffusers.AutoencoderKL.in_channels",description:"<strong>in_channels</strong> (int, <em>optional</em>, defaults to 3) &#x2014; Number of channels in the input image.",name:"in_channels"},{anchor:"diffusers.AutoencoderKL.out_channels",description:"<strong>out_channels</strong> (int,  <em>optional</em>, defaults to 3) &#x2014; Number of channels in the output.",name:"out_channels"},{anchor:"diffusers.AutoencoderKL.down_block_types",description:`<strong>down_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(&quot;DownEncoderBlock2D&quot;,)</code>): Tuple of downsample block types.`,name:"down_block_types"},{anchor:"diffusers.AutoencoderKL.up_block_types",description:`<strong>up_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(&quot;UpDecoderBlock2D&quot;,)</code>): Tuple of upsample block types.`,name:"up_block_types"},{anchor:"diffusers.AutoencoderKL.block_out_channels",description:`<strong>block_out_channels</strong> (<code>Tuple[int]</code>, <em>optional</em>, defaults to  &#x2014;
obj:<code>(64,)</code>): Tuple of block output channels.`,name:"block_out_channels"},{anchor:"diffusers.AutoencoderKL.act_fn",description:"<strong>act_fn</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;silu&quot;</code>) &#x2014; The activation function to use.",name:"act_fn"},{anchor:"diffusers.AutoencoderKL.latent_channels",description:"<strong>latent_channels</strong> (<code>int</code>, <em>optional</em>, defaults to <code>4</code>) &#x2014; Number of channels in the latent space.",name:"latent_channels"},{anchor:"diffusers.AutoencoderKL.sample_size",description:"<strong>sample_size</strong> (<code>int</code>, <em>optional</em>, defaults to <code>32</code>) &#x2014; TODO",name:"sample_size"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae.py#L485"}}),Jt=new D({props:{name:"forward",anchor:"diffusers.AutoencoderKL.forward",parameters:[{name:"sample",val:": FloatTensor"},{name:"sample_posterior",val:": bool = False"},{name:"return_dict",val:": bool = True"},{name:"generator",val:": typing.Optional[torch._C.Generator] = None"}],parametersDescription:[{anchor:"diffusers.AutoencoderKL.forward.sample",description:"<strong>sample</strong> (<code>torch.FloatTensor</code>) &#x2014; Input sample.",name:"sample"},{anchor:"diffusers.AutoencoderKL.forward.sample_posterior",description:`<strong>sample_posterior</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to sample from the posterior.`,name:"sample_posterior"},{anchor:"diffusers.AutoencoderKL.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to return a <code>DecoderOutput</code> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae.py#L567"}}),Rt=new F({}),Zt=new D({props:{name:"class diffusers.FlaxModelMixin",anchor:"diffusers.FlaxModelMixin",parameters:[],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L45"}}),eo=new D({props:{name:"from_pretrained",anchor:"diffusers.FlaxModelMixin.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:": typing.Union[str, os.PathLike]"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"diffusers.FlaxModelMixin.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids are namespaced under a user or organization name, like
<code>CompVis/stable-diffusion-v1-4</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using <a href="/docs/diffusers/main/en/api/models#diffusers.ModelMixin.save_pretrained">save_pretrained()</a>,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.dtype",description:`<strong>dtype</strong> (<code>jax.numpy.dtype</code>, <em>optional</em>, defaults to <code>jax.numpy.float32</code>) &#x2014;
The data type of the computation. Can be one of <code>jax.numpy.float32</code>, <code>jax.numpy.float16</code> (on GPUs) and
<code>jax.numpy.bfloat16</code> (on TPUs).</p>
<p>This can be used to enable mixed-precision training or half-precision inference on GPUs or TPUs. If
specified all the computation will be performed with the given <code>dtype</code>.</p>
<p><strong>Note that this only specifies the dtype of the computation and does not influence the dtype of model
parameters.</strong></p>
<p>If you wish to change the dtype of the model parameters, see <code>to_fp16</code> and
<code>to_bf16</code>.`,name:"dtype"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.model_args",description:`<strong>model_args</strong> (sequence of positional arguments, <em>optional</em>) &#x2014;
All remaining positional arguments will be passed to the underlying model&#x2019;s <code>__init__</code> method.`,name:"model_args"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>Union[str, os.PathLike]</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (i.e., do not try to download the model).`,name:"local_files_only(bool,"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file.`,name:"from_pt"},{anchor:"diffusers.FlaxModelMixin.from_pretrained.kwargs",description:`<strong>kwargs</strong> (remaining dictionary of keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/diffusers/main/en/api/configuration#diffusers.ConfigMixin.from_config">from_config()</a>). Each key of <code>kwargs</code> that corresponds to
a configuration attribute will be used to override said attribute with the supplied <code>kwargs</code>
value. Remaining keys that do not correspond to any configuration attribute will be passed to the
underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L195"}}),Qe=new fr({props:{anchor:"diffusers.FlaxModelMixin.from_pretrained.example",$$slots:{default:[mm]},$$scope:{ctx:L}}}),no=new D({props:{name:"save_pretrained",anchor:"diffusers.FlaxModelMixin.save_pretrained",parameters:[{name:"save_directory",val:": typing.Union[str, os.PathLike]"},{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"is_main_process",val:": bool = True"}],parametersDescription:[{anchor:"diffusers.FlaxModelMixin.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory to which to save. Will be created if it doesn&#x2019;t exist.`,name:"save_directory"},{anchor:"diffusers.FlaxModelMixin.save_pretrained.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"diffusers.FlaxModelMixin.save_pretrained.is_main_process",description:`<strong>is_main_process</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the process calling this is the main process or not. Useful when in distributed training like
TPUs and need to call this function on all processes. In this case, set <code>is_main_process=True</code> only on
the main process to avoid race conditions.`,name:"is_main_process"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L507"}}),so=new D({props:{name:"to_bf16",anchor:"diffusers.FlaxModelMixin.to_bf16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"diffusers.FlaxModelMixin.to_bf16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"diffusers.FlaxModelMixin.to_bf16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip.`,name:"mask"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L87"}}),He=new fr({props:{anchor:"diffusers.FlaxModelMixin.to_bf16.example",$$slots:{default:[um]},$$scope:{ctx:L}}}),ro=new D({props:{name:"to_fp16",anchor:"diffusers.FlaxModelMixin.to_fp16",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"diffusers.FlaxModelMixin.to_fp16.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"diffusers.FlaxModelMixin.to_fp16.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L153"}}),Ge=new fr({props:{anchor:"diffusers.FlaxModelMixin.to_fp16.example",$$slots:{default:[hm]},$$scope:{ctx:L}}}),io=new D({props:{name:"to_fp32",anchor:"diffusers.FlaxModelMixin.to_fp32",parameters:[{name:"params",val:": typing.Union[typing.Dict, flax.core.frozen_dict.FrozenDict]"},{name:"mask",val:": typing.Any = None"}],parametersDescription:[{anchor:"diffusers.FlaxModelMixin.to_fp32.params",description:`<strong>params</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> of model parameters.`,name:"params"},{anchor:"diffusers.FlaxModelMixin.to_fp32.mask",description:`<strong>mask</strong> (<code>Union[Dict, FrozenDict]</code>) &#x2014;
A <code>PyTree</code> with same structure as the <code>params</code> tree. The leaves should be booleans, <code>True</code> for params
you want to cast, and should be <code>False</code> for those you want to skip`,name:"mask"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/modeling_flax_utils.py#L126"}}),Je=new fr({props:{anchor:"diffusers.FlaxModelMixin.to_fp32.example",$$slots:{default:[gm]},$$scope:{ctx:L}}}),lo=new F({}),co=new D({props:{name:"class diffusers.models.unet_2d_condition_flax.FlaxUNet2DConditionOutput",anchor:"diffusers.models.unet_2d_condition_flax.FlaxUNet2DConditionOutput",parameters:[{name:"sample",val:": ndarray"}],parametersDescription:[{anchor:"diffusers.models.unet_2d_condition_flax.FlaxUNet2DConditionOutput.sample",description:`<strong>sample</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Hidden states conditioned on <code>encoder_hidden_states</code> input. Output of last layer of model.`,name:"sample"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/unet_2d_condition_flax.py#L23"}}),po=new D({props:{name:"replace",anchor:"diffusers.models.unet_2d_condition_flax.FlaxUNet2DConditionOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/diffusers/blob/main/src/flax/struct.py#L108"}}),fo=new F({}),mo=new D({props:{name:"class diffusers.FlaxUNet2DConditionModel",anchor:"diffusers.FlaxUNet2DConditionModel",parameters:[{name:"sample_size",val:": int = 32"},{name:"in_channels",val:": int = 4"},{name:"out_channels",val:": int = 4"},{name:"down_block_types",val:": typing.Tuple[str] = ('CrossAttnDownBlock2D', 'CrossAttnDownBlock2D', 'CrossAttnDownBlock2D', 'DownBlock2D')"},{name:"up_block_types",val:": typing.Tuple[str] = ('UpBlock2D', 'CrossAttnUpBlock2D', 'CrossAttnUpBlock2D', 'CrossAttnUpBlock2D')"},{name:"block_out_channels",val:": typing.Tuple[int] = (320, 640, 1280, 1280)"},{name:"layers_per_block",val:": int = 2"},{name:"attention_head_dim",val:": int = 8"},{name:"cross_attention_dim",val:": int = 1280"},{name:"dropout",val:": float = 0.0"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"freq_shift",val:": int = 0"},{name:"parent",val:": typing.Union[typing.Type[flax.linen.module.Module], typing.Type[flax.core.scope.Scope], typing.Type[flax.linen.module._Sentinel], NoneType] = <flax.linen.module._Sentinel object at 0x7fdcc7110bb0>"},{name:"name",val:": str = None"}],parametersDescription:[{anchor:"diffusers.FlaxUNet2DConditionModel.sample_size",description:`<strong>sample_size</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The size of the input sample.`,name:"sample_size"},{anchor:"diffusers.FlaxUNet2DConditionModel.in_channels",description:`<strong>in_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of channels in the input sample.`,name:"in_channels"},{anchor:"diffusers.FlaxUNet2DConditionModel.out_channels",description:`<strong>out_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
The number of channels in the output.`,name:"out_channels"},{anchor:"diffusers.FlaxUNet2DConditionModel.down_block_types",description:`<strong>down_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to <code>(&quot;CrossAttnDownBlock2D&quot;, &quot;CrossAttnDownBlock2D&quot;, &quot;CrossAttnDownBlock2D&quot;, &quot;DownBlock2D&quot;)</code>) &#x2014;
The tuple of downsample blocks to use. The corresponding class names will be: &#x201C;FlaxCrossAttnDownBlock2D&#x201D;,
&#x201C;FlaxCrossAttnDownBlock2D&#x201D;, &#x201C;FlaxCrossAttnDownBlock2D&#x201D;, &#x201C;FlaxDownBlock2D&#x201D;`,name:"down_block_types"},{anchor:"diffusers.FlaxUNet2DConditionModel.up_block_types",description:`<strong>up_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to <code>(&quot;UpBlock2D&quot;, &quot;CrossAttnUpBlock2D&quot;, &quot;CrossAttnUpBlock2D&quot;, &quot;CrossAttnUpBlock2D&quot;,)</code>) &#x2014;
The tuple of upsample blocks to use. The corresponding class names will be: &#x201C;FlaxUpBlock2D&#x201D;,
&#x201C;FlaxCrossAttnUpBlock2D&#x201D;, &#x201C;FlaxCrossAttnUpBlock2D&#x201D;, &#x201C;FlaxCrossAttnUpBlock2D&#x201D;`,name:"up_block_types"},{anchor:"diffusers.FlaxUNet2DConditionModel.block_out_channels",description:`<strong>block_out_channels</strong> (<code>Tuple[int]</code>, <em>optional</em>, defaults to <code>(320, 640, 1280, 1280)</code>) &#x2014;
The tuple of output channels for each block.`,name:"block_out_channels"},{anchor:"diffusers.FlaxUNet2DConditionModel.layers_per_block",description:`<strong>layers_per_block</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The number of layers per block.`,name:"layers_per_block"},{anchor:"diffusers.FlaxUNet2DConditionModel.attention_head_dim",description:`<strong>attention_head_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The dimension of the attention heads.`,name:"attention_head_dim"},{anchor:"diffusers.FlaxUNet2DConditionModel.cross_attention_dim",description:`<strong>cross_attention_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
The dimension of the cross attention features.`,name:"cross_attention_dim"},{anchor:"diffusers.FlaxUNet2DConditionModel.dropout",description:`<strong>dropout</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
Dropout probability for down, up and bottleneck blocks.`,name:"dropout"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/unet_2d_condition_flax.py#L34"}}),yo=new F({}),$o=new D({props:{name:"class diffusers.models.vae_flax.FlaxDecoderOutput",anchor:"diffusers.models.vae_flax.FlaxDecoderOutput",parameters:[{name:"sample",val:": ndarray"}],parametersDescription:[{anchor:"diffusers.models.vae_flax.FlaxDecoderOutput.sample",description:`<strong>sample</strong> (<em>jnp.ndarray</em> of shape <em>(batch_size, num_channels, height, width)</em>) &#x2014;
Decoded output sample of the model. Output of the last layer of the model.`,name:"sample"},{anchor:"diffusers.models.vae_flax.FlaxDecoderOutput.dtype",description:`<strong>dtype</strong> (<code>jnp.dtype</code>, <em>optional</em>, defaults to jnp.float32) &#x2014;
Parameters <em>dtype</em>`,name:"dtype"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae_flax.py#L19"}}),wo=new D({props:{name:"replace",anchor:"diffusers.models.vae_flax.FlaxDecoderOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/diffusers/blob/main/src/flax/struct.py#L108"}}),Do=new F({}),ko=new D({props:{name:"class diffusers.models.vae_flax.FlaxAutoencoderKLOutput",anchor:"diffusers.models.vae_flax.FlaxAutoencoderKLOutput",parameters:[{name:"latent_dist",val:": FlaxDiagonalGaussianDistribution"}],parametersDescription:[{anchor:"diffusers.models.vae_flax.FlaxAutoencoderKLOutput.latent_dist",description:`<strong>latent_dist</strong> (<code>FlaxDiagonalGaussianDistribution</code>) &#x2014;
Encoded outputs of <code>Encoder</code> represented as the mean and logvar of <code>FlaxDiagonalGaussianDistribution</code>.
<code>FlaxDiagonalGaussianDistribution</code> allows for sampling latents from the distribution.`,name:"latent_dist"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae_flax.py#L34"}}),Mo=new D({props:{name:"replace",anchor:"diffusers.models.vae_flax.FlaxAutoencoderKLOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/diffusers/blob/main/src/flax/struct.py#L108"}}),Eo=new F({}),Uo=new D({props:{name:"class diffusers.FlaxAutoencoderKL",anchor:"diffusers.FlaxAutoencoderKL",parameters:[{name:"in_channels",val:": int = 3"},{name:"out_channels",val:": int = 3"},{name:"down_block_types",val:": typing.Tuple[str] = ('DownEncoderBlock2D',)"},{name:"up_block_types",val:": typing.Tuple[str] = ('UpDecoderBlock2D',)"},{name:"block_out_channels",val:": typing.Tuple[int] = (64,)"},{name:"layers_per_block",val:": int = 1"},{name:"act_fn",val:": str = 'silu'"},{name:"latent_channels",val:": int = 4"},{name:"norm_num_groups",val:": int = 32"},{name:"sample_size",val:": int = 32"},{name:"dtype",val:": dtype = <class 'jax.numpy.float32'>"},{name:"parent",val:": typing.Union[typing.Type[flax.linen.module.Module], typing.Type[flax.core.scope.Scope], typing.Type[flax.linen.module._Sentinel], NoneType] = <flax.linen.module._Sentinel object at 0x7fdcc7110bb0>"},{name:"name",val:": str = None"}],parametersDescription:[{anchor:"diffusers.FlaxAutoencoderKL.in_channels",description:`<strong>in_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
Input channels`,name:"in_channels"},{anchor:"diffusers.FlaxAutoencoderKL.out_channels",description:`<strong>out_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
Output channels`,name:"out_channels"},{anchor:"diffusers.FlaxAutoencoderKL.down_block_types",description:`<strong>down_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to <em>(DownEncoderBlock2D)</em>) &#x2014;
DownEncoder block type`,name:"down_block_types"},{anchor:"diffusers.FlaxAutoencoderKL.up_block_types",description:`<strong>up_block_types</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to <em>(UpDecoderBlock2D)</em>) &#x2014;
UpDecoder block type`,name:"up_block_types"},{anchor:"diffusers.FlaxAutoencoderKL.block_out_channels",description:`<strong>block_out_channels</strong> (<code>Tuple[str]</code>, <em>optional</em>, defaults to <em>(64,)</em>) &#x2014;
Tuple containing the number of output channels for each block`,name:"block_out_channels"},{anchor:"diffusers.FlaxAutoencoderKL.layers_per_block",description:`<strong>layers_per_block</strong> (<code>int</code>, <em>optional</em>, defaults to <em>2</em>) &#x2014;
Number of Resnet layer for each block`,name:"layers_per_block"},{anchor:"diffusers.FlaxAutoencoderKL.act_fn",description:`<strong>act_fn</strong> (<code>str</code>, <em>optional</em>, defaults to <em>silu</em>) &#x2014;
Activation function`,name:"act_fn"},{anchor:"diffusers.FlaxAutoencoderKL.latent_channels",description:`<strong>latent_channels</strong> (<code>int</code>, <em>optional</em>, defaults to <em>4</em>) &#x2014;
Latent space channels`,name:"latent_channels"},{anchor:"diffusers.FlaxAutoencoderKL.norm_num_groups",description:`<strong>norm_num_groups</strong> (<code>int</code>, <em>optional</em>, defaults to <em>32</em>) &#x2014;
Norm num group`,name:"norm_num_groups"},{anchor:"diffusers.FlaxAutoencoderKL.sample_size",description:`<strong>sample_size</strong> (<code>int</code>, <em>optional</em>, defaults to <em>32</em>) &#x2014;
Sample input size`,name:"sample_size"},{anchor:"diffusers.FlaxAutoencoderKL.dtype",description:`<strong>dtype</strong> (<code>jnp.dtype</code>, <em>optional</em>, defaults to jnp.float32) &#x2014;
parameters <em>dtype</em>`,name:"dtype"}],source:"https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/vae_flax.py#L675"}}),{c(){x=n("meta"),M=l(),$=n("h1"),y=n("a"),k=n("span"),u(m.$$.fragment),w=l(),Ne=n("span"),hr=r("Models"),Wa=l(),R=n("p"),gr=r(`Diffusers contains pretrained models for popular algorithms and modules for creating the next set of diffusion models.
The primary function of these models is to denoise an input sample, by modeling the distribution $p`),on=n("em"),_r=r("\\theta(\\mathbf{x}"),vr=r(`{t-1}|\\mathbf{x}_t)$.
The models are built on the base class [\u2018ModelMixin\u2019] that is a `),nn=n("code"),br=r("torch.nn.module"),xr=r(" with basic functionality for saving and loading models both locally and from the HuggingFace hub."),Qa=l(),le=n("h2"),Te=n("a"),an=n("span"),u(ut.$$.fragment),yr=l(),sn=n("span"),$r=r("ModelMixin"),Ya=l(),E=n("div"),u(ht.$$.fragment),wr=l(),rn=n("p"),Dr=r("Base class for all models."),kr=l(),Po=n("p"),qo=n("a"),Mr=r("ModelMixin"),Er=r(` takes care of storing the configuration of the models and handles methods for loading, downloading
and saving models.`),Ur=l(),ln=n("ul"),Z=n("li"),dn=n("strong"),Ar=r("config_name"),Nr=r(" ("),cn=n("code"),Tr=r("str"),Fr=r(`) \u2014 A filename under which the model should be stored when calling
`),Vo=n("a"),Cr=r("save_pretrained()"),jr=r("."),Lr=l(),ee=n("div"),u(gt.$$.fragment),Or=l(),pn=n("p"),Pr=r("Deactivates gradient checkpointing for the current model."),qr=l(),fn=n("p"),Vr=r(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),Br=l(),te=n("div"),u(_t.$$.fragment),Ir=l(),mn=n("p"),zr=r("Activates gradient checkpointing for the current model."),Kr=l(),un=n("p"),Xr=r(`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),Sr=l(),A=n("div"),u(vt.$$.fragment),Wr=l(),hn=n("p"),Qr=r("Instantiate a pretrained pytorch model from a pre-trained model configuration."),Yr=l(),de=n("p"),Hr=r("The model is set in evaluation mode by default using "),gn=n("code"),Gr=r("model.eval()"),Jr=r(` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),_n=n("code"),Rr=r("model.train()"),Zr=r("."),ei=l(),bt=n("p"),ti=r("The warning "),vn=n("em"),oi=r("Weights from XXX not initialized from pretrained model"),ni=r(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),ai=l(),xt=n("p"),si=r("The warning "),bn=n("em"),ri=r("Weights from XXX not used in YYY"),ii=r(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),li=l(),u(Fe.$$.fragment),di=l(),u(Ce.$$.fragment),ci=l(),je=n("div"),u(yt.$$.fragment),pi=l(),xn=n("p"),fi=r("Get number of (optionally, trainable or non-embeddings) parameters in the module."),mi=l(),Le=n("div"),u($t.$$.fragment),ui=l(),wt=n("p"),hi=r(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),yn=n("code"),gi=r("[from_pretrained()](/docs/diffusers/main/en/api/models#diffusers.ModelMixin.from_pretrained)"),_i=r(" class method."),Ha=l(),ce=n("h2"),Oe=n("a"),$n=n("span"),u(Dt.$$.fragment),vi=l(),wn=n("span"),bi=r("UNet2DOutput"),Ga=l(),kt=n("div"),u(Mt.$$.fragment),Ja=l(),pe=n("h2"),Pe=n("a"),Dn=n("span"),u(Et.$$.fragment),xi=l(),kn=n("span"),yi=r("UNet2DModel"),Ra=l(),q=n("div"),u(Ut.$$.fragment),$i=l(),Mn=n("p"),wi=r("UNet2DModel is a 2D UNet model that takes in a noisy sample and a timestep and returns sample shaped output."),Di=l(),At=n("p"),ki=r("This model inherits from "),Bo=n("a"),Mi=r("ModelMixin"),Ei=r(`. Check the superclass documentation for the generic methods the library
implements for all the model (such as downloading or saving, etc.)`),Ui=l(),Io=n("div"),u(Nt.$$.fragment),Za=l(),fe=n("h2"),qe=n("a"),En=n("span"),u(Tt.$$.fragment),Ai=l(),Un=n("span"),Ni=r("UNet2DConditionOutput"),es=l(),Ft=n("div"),u(Ct.$$.fragment),ts=l(),me=n("h2"),Ve=n("a"),An=n("span"),u(jt.$$.fragment),Ti=l(),Nn=n("span"),Fi=r("UNet2DConditionModel"),os=l(),V=n("div"),u(Lt.$$.fragment),Ci=l(),Tn=n("p"),ji=r(`UNet2DConditionModel is a conditional 2D UNet model that takes in a noisy sample, conditional state, and a timestep
and returns sample shaped output.`),Li=l(),Ot=n("p"),Oi=r("This model inherits from "),zo=n("a"),Pi=r("ModelMixin"),qi=r(`. Check the superclass documentation for the generic methods the library
implements for all the models (such as downloading or saving, etc.)`),Vi=l(),Be=n("div"),u(Pt.$$.fragment),Bi=l(),Fn=n("p"),Ii=r("r"),ns=l(),ue=n("h2"),Ie=n("a"),Cn=n("span"),u(qt.$$.fragment),zi=l(),jn=n("span"),Ki=r("DecoderOutput"),as=l(),he=n("div"),u(Vt.$$.fragment),Xi=l(),Ln=n("p"),Si=r("Output of decoding method."),ss=l(),ge=n("h2"),ze=n("a"),On=n("span"),u(Bt.$$.fragment),Wi=l(),Pn=n("span"),Qi=r("VQEncoderOutput"),rs=l(),_e=n("div"),u(It.$$.fragment),Yi=l(),qn=n("p"),Hi=r("Output of VQModel encoding method."),is=l(),ve=n("h2"),Ke=n("a"),Vn=n("span"),u(zt.$$.fragment),Gi=l(),Bn=n("span"),Ji=r("VQModel"),ls=l(),B=n("div"),u(Kt.$$.fragment),Ri=l(),In=n("p"),Zi=r(`VQ-VAE model from the paper Neural Discrete Representation Learning by Aaron van den Oord, Oriol Vinyals and Koray
Kavukcuoglu.`),el=l(),Xt=n("p"),tl=r("This model inherits from "),Ko=n("a"),ol=r("ModelMixin"),nl=r(`. Check the superclass documentation for the generic methods the library
implements for all the model (such as downloading or saving, etc.)`),al=l(),Xo=n("div"),u(St.$$.fragment),ds=l(),be=n("h2"),Xe=n("a"),zn=n("span"),u(Wt.$$.fragment),sl=l(),Kn=n("span"),rl=r("AutoencoderKLOutput"),cs=l(),xe=n("div"),u(Qt.$$.fragment),il=l(),Xn=n("p"),ll=r("Output of AutoencoderKL encoding method."),ps=l(),ye=n("h2"),Se=n("a"),Sn=n("span"),u(Yt.$$.fragment),dl=l(),Wn=n("span"),cl=r("AutoencoderKL"),fs=l(),I=n("div"),u(Ht.$$.fragment),pl=l(),Qn=n("p"),fl=r(`Variational Autoencoder (VAE) model with KL loss from the paper Auto-Encoding Variational Bayes by Diederik P. Kingma
and Max Welling.`),ml=l(),Gt=n("p"),ul=r("This model inherits from "),So=n("a"),hl=r("ModelMixin"),gl=r(`. Check the superclass documentation for the generic methods the library
implements for all the model (such as downloading or saving, etc.)`),_l=l(),Wo=n("div"),u(Jt.$$.fragment),ms=l(),$e=n("h2"),We=n("a"),Yn=n("span"),u(Rt.$$.fragment),vl=l(),Hn=n("span"),bl=r("FlaxModelMixin"),us=l(),U=n("div"),u(Zt.$$.fragment),xl=l(),Gn=n("p"),yl=r("Base class for all flax models."),$l=l(),Qo=n("p"),Yo=n("a"),wl=r("FlaxModelMixin"),Dl=r(` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),kl=l(),O=n("div"),u(eo.$$.fragment),Ml=l(),Jn=n("p"),El=r("Instantiate a pretrained flax model from a pre-trained model configuration."),Ul=l(),to=n("p"),Al=r("The warning "),Rn=n("em"),Nl=r("Weights from XXX not initialized from pretrained model"),Tl=r(` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Fl=l(),oo=n("p"),Cl=r("The warning "),Zn=n("em"),jl=r("Weights from XXX not used in YYY"),Ll=r(` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Ol=l(),u(Qe.$$.fragment),Pl=l(),Ye=n("div"),u(no.$$.fragment),ql=l(),ao=n("p"),Vl=r(`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),ea=n("code"),Bl=r("[from_pretrained()](/docs/diffusers/main/en/api/models#diffusers.FlaxModelMixin.from_pretrained)"),Il=r(" class method"),zl=l(),S=n("div"),u(so.$$.fragment),Kl=l(),z=n("p"),Xl=r("Cast the floating-point "),ta=n("code"),Sl=r("params"),Wl=r(" to "),oa=n("code"),Ql=r("jax.numpy.bfloat16"),Yl=r(". This returns a new "),na=n("code"),Hl=r("params"),Gl=r(` tree and does not cast
the `),aa=n("code"),Jl=r("params"),Rl=r(" in place."),Zl=l(),sa=n("p"),ed=r(`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),td=l(),u(He.$$.fragment),od=l(),W=n("div"),u(ro.$$.fragment),nd=l(),K=n("p"),ad=r("Cast the floating-point "),ra=n("code"),sd=r("params"),rd=r(" to "),ia=n("code"),id=r("jax.numpy.float16"),ld=r(". This returns a new "),la=n("code"),dd=r("params"),cd=r(` tree and does not cast the
`),da=n("code"),pd=r("params"),fd=r(" in place."),md=l(),ca=n("p"),ud=r(`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),hd=l(),u(Ge.$$.fragment),gd=l(),oe=n("div"),u(io.$$.fragment),_d=l(),X=n("p"),vd=r("Cast the floating-point "),pa=n("code"),bd=r("params"),xd=r(" to "),fa=n("code"),yd=r("jax.numpy.float32"),$d=r(`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),ma=n("code"),wd=r("params"),Dd=r(" tree and does not cast the "),ua=n("code"),kd=r("params"),Md=r(" in place."),Ed=l(),u(Je.$$.fragment),hs=l(),we=n("h2"),Re=n("a"),ha=n("span"),u(lo.$$.fragment),Ud=l(),ga=n("span"),Ad=r("FlaxUNet2DConditionOutput"),gs=l(),De=n("div"),u(co.$$.fragment),Nd=l(),Ze=n("div"),u(po.$$.fragment),Td=l(),_a=n("p"),Fd=r("\u201CReturns a new object replacing the specified fields with new values."),_s=l(),ke=n("h2"),et=n("a"),va=n("span"),u(fo.$$.fragment),Cd=l(),ba=n("span"),jd=r("FlaxUNet2DConditionModel"),vs=l(),T=n("div"),u(mo.$$.fragment),Ld=l(),xa=n("p"),Od=r(`FlaxUNet2DConditionModel is a conditional 2D UNet model that takes in a noisy sample, conditional state, and a
timestep and returns sample shaped output.`),Pd=l(),uo=n("p"),qd=r("This model inherits from "),Ho=n("a"),Vd=r("FlaxModelMixin"),Bd=r(`. Check the superclass documentation for the generic methods the library
implements for all the models (such as downloading or saving, etc.)`),Id=l(),ho=n("p"),zd=r("Also, this model is a Flax Linen "),go=n("a"),Kd=r("flax.linen.Module"),Xd=r(`
subclass. Use it as a regular Flax linen Module and refer to the Flax documentation for all matter related to
general usage and behavior.`),Sd=l(),ya=n("p"),Wd=r("Finally, this model supports inherent JAX features such as:"),Qd=l(),Y=n("ul"),$a=n("li"),_o=n("a"),Yd=r("Just-In-Time (JIT) compilation"),Hd=l(),wa=n("li"),vo=n("a"),Gd=r("Automatic Differentiation"),Jd=l(),Da=n("li"),bo=n("a"),Rd=r("Vectorization"),Zd=l(),ka=n("li"),xo=n("a"),ec=r("Parallelization"),bs=l(),Me=n("h2"),tt=n("a"),Ma=n("span"),u(yo.$$.fragment),tc=l(),Ea=n("span"),oc=r("FlaxDecoderOutput"),xs=l(),H=n("div"),u($o.$$.fragment),nc=l(),Ua=n("p"),ac=r("Output of decoding method."),sc=l(),ot=n("div"),u(wo.$$.fragment),rc=l(),Aa=n("p"),ic=r("\u201CReturns a new object replacing the specified fields with new values."),ys=l(),Ee=n("h2"),nt=n("a"),Na=n("span"),u(Do.$$.fragment),lc=l(),Ta=n("span"),dc=r("FlaxAutoencoderKLOutput"),$s=l(),G=n("div"),u(ko.$$.fragment),cc=l(),Fa=n("p"),pc=r("Output of AutoencoderKL encoding method."),fc=l(),at=n("div"),u(Mo.$$.fragment),mc=l(),Ca=n("p"),uc=r("\u201CReturns a new object replacing the specified fields with new values."),ws=l(),Ue=n("h2"),st=n("a"),ja=n("span"),u(Eo.$$.fragment),hc=l(),La=n("span"),gc=r("FlaxAutoencoderKL"),Ds=l(),j=n("div"),u(Uo.$$.fragment),_c=l(),Oa=n("p"),vc=r(`Flax Implementation of Variational Autoencoder (VAE) model with KL loss from the paper Auto-Encoding Variational
Bayes by Diederik P. Kingma and Max Welling.`),bc=l(),Ao=n("p"),xc=r("This model is a Flax Linen "),No=n("a"),yc=r("flax.linen.Module"),$c=r(`
subclass. Use it as a regular Flax linen Module and refer to the Flax documentation for all matter related to
general usage and behavior.`),wc=l(),Pa=n("p"),Dc=r("Finally, this model supports inherent JAX features such as:"),kc=l(),J=n("ul"),qa=n("li"),To=n("a"),Mc=r("Just-In-Time (JIT) compilation"),Ec=l(),Va=n("li"),Fo=n("a"),Uc=r("Automatic Differentiation"),Ac=l(),Ba=n("li"),Co=n("a"),Nc=r("Vectorization"),Tc=l(),Ia=n("li"),jo=n("a"),Fc=r("Parallelization"),this.h()},l(t){const p=dm('[data-svelte="svelte-1phssyn"]',document.head);x=a(p,"META",{name:!0,content:!0}),p.forEach(o),M=d(t),$=a(t,"H1",{class:!0});var Lo=s($);y=a(Lo,"A",{id:!0,class:!0,href:!0});var za=s(y);k=a(za,"SPAN",{});var Ka=s(k);h(m.$$.fragment,Ka),Ka.forEach(o),za.forEach(o),w=d(Lo),Ne=a(Lo,"SPAN",{});var Xa=s(Ne);hr=i(Xa,"Models"),Xa.forEach(o),Lo.forEach(o),Wa=d(t),R=a(t,"P",{});var Ae=s(R);gr=i(Ae,`Diffusers contains pretrained models for popular algorithms and modules for creating the next set of diffusion models.
The primary function of these models is to denoise an input sample, by modeling the distribution $p`),on=a(Ae,"EM",{});var Sa=s(on);_r=i(Sa,"\\theta(\\mathbf{x}"),Sa.forEach(o),vr=i(Ae,`{t-1}|\\mathbf{x}_t)$.
The models are built on the base class [\u2018ModelMixin\u2019] that is a `),nn=a(Ae,"CODE",{});var Lc=s(nn);br=i(Lc,"torch.nn.module"),Lc.forEach(o),xr=i(Ae," with basic functionality for saving and loading models both locally and from the HuggingFace hub."),Ae.forEach(o),Qa=d(t),le=a(t,"H2",{class:!0});var Ms=s(le);Te=a(Ms,"A",{id:!0,class:!0,href:!0});var Oc=s(Te);an=a(Oc,"SPAN",{});var Pc=s(an);h(ut.$$.fragment,Pc),Pc.forEach(o),Oc.forEach(o),yr=d(Ms),sn=a(Ms,"SPAN",{});var qc=s(sn);$r=i(qc,"ModelMixin"),qc.forEach(o),Ms.forEach(o),Ya=d(t),E=a(t,"DIV",{class:!0});var N=s(E);h(ht.$$.fragment,N),wr=d(N),rn=a(N,"P",{});var Vc=s(rn);Dr=i(Vc,"Base class for all models."),Vc.forEach(o),kr=d(N),Po=a(N,"P",{});var Cc=s(Po);qo=a(Cc,"A",{href:!0});var Bc=s(qo);Mr=i(Bc,"ModelMixin"),Bc.forEach(o),Er=i(Cc,` takes care of storing the configuration of the models and handles methods for loading, downloading
and saving models.`),Cc.forEach(o),Ur=d(N),ln=a(N,"UL",{});var Ic=s(ln);Z=a(Ic,"LI",{});var Oo=s(Z);dn=a(Oo,"STRONG",{});var zc=s(dn);Ar=i(zc,"config_name"),zc.forEach(o),Nr=i(Oo," ("),cn=a(Oo,"CODE",{});var Kc=s(cn);Tr=i(Kc,"str"),Kc.forEach(o),Fr=i(Oo,`) \u2014 A filename under which the model should be stored when calling
`),Vo=a(Oo,"A",{href:!0});var Xc=s(Vo);Cr=i(Xc,"save_pretrained()"),Xc.forEach(o),jr=i(Oo,"."),Oo.forEach(o),Ic.forEach(o),Lr=d(N),ee=a(N,"DIV",{class:!0});var Go=s(ee);h(gt.$$.fragment,Go),Or=d(Go),pn=a(Go,"P",{});var Sc=s(pn);Pr=i(Sc,"Deactivates gradient checkpointing for the current model."),Sc.forEach(o),qr=d(Go),fn=a(Go,"P",{});var Wc=s(fn);Vr=i(Wc,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),Wc.forEach(o),Go.forEach(o),Br=d(N),te=a(N,"DIV",{class:!0});var Jo=s(te);h(_t.$$.fragment,Jo),Ir=d(Jo),mn=a(Jo,"P",{});var Qc=s(mn);zr=i(Qc,"Activates gradient checkpointing for the current model."),Qc.forEach(o),Kr=d(Jo),un=a(Jo,"P",{});var Yc=s(un);Xr=i(Yc,`Note that in other frameworks this feature can be referred to as \u201Cactivation checkpointing\u201D or \u201Ccheckpoint
activations\u201D.`),Yc.forEach(o),Jo.forEach(o),Sr=d(N),A=a(N,"DIV",{class:!0});var P=s(A);h(vt.$$.fragment,P),Wr=d(P),hn=a(P,"P",{});var Hc=s(hn);Qr=i(Hc,"Instantiate a pretrained pytorch model from a pre-trained model configuration."),Hc.forEach(o),Yr=d(P),de=a(P,"P",{});var Ro=s(de);Hr=i(Ro,"The model is set in evaluation mode by default using "),gn=a(Ro,"CODE",{});var Gc=s(gn);Gr=i(Gc,"model.eval()"),Gc.forEach(o),Jr=i(Ro,` (Dropout modules are deactivated). To train
the model, you should first set it back in training mode with `),_n=a(Ro,"CODE",{});var Jc=s(_n);Rr=i(Jc,"model.train()"),Jc.forEach(o),Zr=i(Ro,"."),Ro.forEach(o),ei=d(P),bt=a(P,"P",{});var Es=s(bt);ti=i(Es,"The warning "),vn=a(Es,"EM",{});var Rc=s(vn);oi=i(Rc,"Weights from XXX not initialized from pretrained model"),Rc.forEach(o),ni=i(Es,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Es.forEach(o),ai=d(P),xt=a(P,"P",{});var Us=s(xt);si=i(Us,"The warning "),bn=a(Us,"EM",{});var Zc=s(bn);ri=i(Zc,"Weights from XXX not used in YYY"),Zc.forEach(o),ii=i(Us,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Us.forEach(o),li=d(P),h(Fe.$$.fragment,P),di=d(P),h(Ce.$$.fragment,P),P.forEach(o),ci=d(N),je=a(N,"DIV",{class:!0});var As=s(je);h(yt.$$.fragment,As),pi=d(As),xn=a(As,"P",{});var ep=s(xn);fi=i(ep,"Get number of (optionally, trainable or non-embeddings) parameters in the module."),ep.forEach(o),As.forEach(o),mi=d(N),Le=a(N,"DIV",{class:!0});var Ns=s(Le);h($t.$$.fragment,Ns),ui=d(Ns),wt=a(Ns,"P",{});var Ts=s(wt);hi=i(Ts,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),yn=a(Ts,"CODE",{});var tp=s(yn);gi=i(tp,"[from_pretrained()](/docs/diffusers/main/en/api/models#diffusers.ModelMixin.from_pretrained)"),tp.forEach(o),_i=i(Ts," class method."),Ts.forEach(o),Ns.forEach(o),N.forEach(o),Ha=d(t),ce=a(t,"H2",{class:!0});var Fs=s(ce);Oe=a(Fs,"A",{id:!0,class:!0,href:!0});var op=s(Oe);$n=a(op,"SPAN",{});var np=s($n);h(Dt.$$.fragment,np),np.forEach(o),op.forEach(o),vi=d(Fs),wn=a(Fs,"SPAN",{});var ap=s(wn);bi=i(ap,"UNet2DOutput"),ap.forEach(o),Fs.forEach(o),Ga=d(t),kt=a(t,"DIV",{class:!0});var sp=s(kt);h(Mt.$$.fragment,sp),sp.forEach(o),Ja=d(t),pe=a(t,"H2",{class:!0});var Cs=s(pe);Pe=a(Cs,"A",{id:!0,class:!0,href:!0});var rp=s(Pe);Dn=a(rp,"SPAN",{});var ip=s(Dn);h(Et.$$.fragment,ip),ip.forEach(o),rp.forEach(o),xi=d(Cs),kn=a(Cs,"SPAN",{});var lp=s(kn);yi=i(lp,"UNet2DModel"),lp.forEach(o),Cs.forEach(o),Ra=d(t),q=a(t,"DIV",{class:!0});var rt=s(q);h(Ut.$$.fragment,rt),$i=d(rt),Mn=a(rt,"P",{});var dp=s(Mn);wi=i(dp,"UNet2DModel is a 2D UNet model that takes in a noisy sample and a timestep and returns sample shaped output."),dp.forEach(o),Di=d(rt),At=a(rt,"P",{});var js=s(At);ki=i(js,"This model inherits from "),Bo=a(js,"A",{href:!0});var cp=s(Bo);Mi=i(cp,"ModelMixin"),cp.forEach(o),Ei=i(js,`. Check the superclass documentation for the generic methods the library
implements for all the model (such as downloading or saving, etc.)`),js.forEach(o),Ui=d(rt),Io=a(rt,"DIV",{class:!0});var pp=s(Io);h(Nt.$$.fragment,pp),pp.forEach(o),rt.forEach(o),Za=d(t),fe=a(t,"H2",{class:!0});var Ls=s(fe);qe=a(Ls,"A",{id:!0,class:!0,href:!0});var fp=s(qe);En=a(fp,"SPAN",{});var mp=s(En);h(Tt.$$.fragment,mp),mp.forEach(o),fp.forEach(o),Ai=d(Ls),Un=a(Ls,"SPAN",{});var up=s(Un);Ni=i(up,"UNet2DConditionOutput"),up.forEach(o),Ls.forEach(o),es=d(t),Ft=a(t,"DIV",{class:!0});var hp=s(Ft);h(Ct.$$.fragment,hp),hp.forEach(o),ts=d(t),me=a(t,"H2",{class:!0});var Os=s(me);Ve=a(Os,"A",{id:!0,class:!0,href:!0});var gp=s(Ve);An=a(gp,"SPAN",{});var _p=s(An);h(jt.$$.fragment,_p),_p.forEach(o),gp.forEach(o),Ti=d(Os),Nn=a(Os,"SPAN",{});var vp=s(Nn);Fi=i(vp,"UNet2DConditionModel"),vp.forEach(o),Os.forEach(o),os=d(t),V=a(t,"DIV",{class:!0});var it=s(V);h(Lt.$$.fragment,it),Ci=d(it),Tn=a(it,"P",{});var bp=s(Tn);ji=i(bp,`UNet2DConditionModel is a conditional 2D UNet model that takes in a noisy sample, conditional state, and a timestep
and returns sample shaped output.`),bp.forEach(o),Li=d(it),Ot=a(it,"P",{});var Ps=s(Ot);Oi=i(Ps,"This model inherits from "),zo=a(Ps,"A",{href:!0});var xp=s(zo);Pi=i(xp,"ModelMixin"),xp.forEach(o),qi=i(Ps,`. Check the superclass documentation for the generic methods the library
implements for all the models (such as downloading or saving, etc.)`),Ps.forEach(o),Vi=d(it),Be=a(it,"DIV",{class:!0});var qs=s(Be);h(Pt.$$.fragment,qs),Bi=d(qs),Fn=a(qs,"P",{});var yp=s(Fn);Ii=i(yp,"r"),yp.forEach(o),qs.forEach(o),it.forEach(o),ns=d(t),ue=a(t,"H2",{class:!0});var Vs=s(ue);Ie=a(Vs,"A",{id:!0,class:!0,href:!0});var $p=s(Ie);Cn=a($p,"SPAN",{});var wp=s(Cn);h(qt.$$.fragment,wp),wp.forEach(o),$p.forEach(o),zi=d(Vs),jn=a(Vs,"SPAN",{});var Dp=s(jn);Ki=i(Dp,"DecoderOutput"),Dp.forEach(o),Vs.forEach(o),as=d(t),he=a(t,"DIV",{class:!0});var Bs=s(he);h(Vt.$$.fragment,Bs),Xi=d(Bs),Ln=a(Bs,"P",{});var kp=s(Ln);Si=i(kp,"Output of decoding method."),kp.forEach(o),Bs.forEach(o),ss=d(t),ge=a(t,"H2",{class:!0});var Is=s(ge);ze=a(Is,"A",{id:!0,class:!0,href:!0});var Mp=s(ze);On=a(Mp,"SPAN",{});var Ep=s(On);h(Bt.$$.fragment,Ep),Ep.forEach(o),Mp.forEach(o),Wi=d(Is),Pn=a(Is,"SPAN",{});var Up=s(Pn);Qi=i(Up,"VQEncoderOutput"),Up.forEach(o),Is.forEach(o),rs=d(t),_e=a(t,"DIV",{class:!0});var zs=s(_e);h(It.$$.fragment,zs),Yi=d(zs),qn=a(zs,"P",{});var Ap=s(qn);Hi=i(Ap,"Output of VQModel encoding method."),Ap.forEach(o),zs.forEach(o),is=d(t),ve=a(t,"H2",{class:!0});var Ks=s(ve);Ke=a(Ks,"A",{id:!0,class:!0,href:!0});var Np=s(Ke);Vn=a(Np,"SPAN",{});var Tp=s(Vn);h(zt.$$.fragment,Tp),Tp.forEach(o),Np.forEach(o),Gi=d(Ks),Bn=a(Ks,"SPAN",{});var Fp=s(Bn);Ji=i(Fp,"VQModel"),Fp.forEach(o),Ks.forEach(o),ls=d(t),B=a(t,"DIV",{class:!0});var lt=s(B);h(Kt.$$.fragment,lt),Ri=d(lt),In=a(lt,"P",{});var Cp=s(In);Zi=i(Cp,`VQ-VAE model from the paper Neural Discrete Representation Learning by Aaron van den Oord, Oriol Vinyals and Koray
Kavukcuoglu.`),Cp.forEach(o),el=d(lt),Xt=a(lt,"P",{});var Xs=s(Xt);tl=i(Xs,"This model inherits from "),Ko=a(Xs,"A",{href:!0});var jp=s(Ko);ol=i(jp,"ModelMixin"),jp.forEach(o),nl=i(Xs,`. Check the superclass documentation for the generic methods the library
implements for all the model (such as downloading or saving, etc.)`),Xs.forEach(o),al=d(lt),Xo=a(lt,"DIV",{class:!0});var Lp=s(Xo);h(St.$$.fragment,Lp),Lp.forEach(o),lt.forEach(o),ds=d(t),be=a(t,"H2",{class:!0});var Ss=s(be);Xe=a(Ss,"A",{id:!0,class:!0,href:!0});var Op=s(Xe);zn=a(Op,"SPAN",{});var Pp=s(zn);h(Wt.$$.fragment,Pp),Pp.forEach(o),Op.forEach(o),sl=d(Ss),Kn=a(Ss,"SPAN",{});var qp=s(Kn);rl=i(qp,"AutoencoderKLOutput"),qp.forEach(o),Ss.forEach(o),cs=d(t),xe=a(t,"DIV",{class:!0});var Ws=s(xe);h(Qt.$$.fragment,Ws),il=d(Ws),Xn=a(Ws,"P",{});var Vp=s(Xn);ll=i(Vp,"Output of AutoencoderKL encoding method."),Vp.forEach(o),Ws.forEach(o),ps=d(t),ye=a(t,"H2",{class:!0});var Qs=s(ye);Se=a(Qs,"A",{id:!0,class:!0,href:!0});var Bp=s(Se);Sn=a(Bp,"SPAN",{});var Ip=s(Sn);h(Yt.$$.fragment,Ip),Ip.forEach(o),Bp.forEach(o),dl=d(Qs),Wn=a(Qs,"SPAN",{});var zp=s(Wn);cl=i(zp,"AutoencoderKL"),zp.forEach(o),Qs.forEach(o),fs=d(t),I=a(t,"DIV",{class:!0});var dt=s(I);h(Ht.$$.fragment,dt),pl=d(dt),Qn=a(dt,"P",{});var Kp=s(Qn);fl=i(Kp,`Variational Autoencoder (VAE) model with KL loss from the paper Auto-Encoding Variational Bayes by Diederik P. Kingma
and Max Welling.`),Kp.forEach(o),ml=d(dt),Gt=a(dt,"P",{});var Ys=s(Gt);ul=i(Ys,"This model inherits from "),So=a(Ys,"A",{href:!0});var Xp=s(So);hl=i(Xp,"ModelMixin"),Xp.forEach(o),gl=i(Ys,`. Check the superclass documentation for the generic methods the library
implements for all the model (such as downloading or saving, etc.)`),Ys.forEach(o),_l=d(dt),Wo=a(dt,"DIV",{class:!0});var Sp=s(Wo);h(Jt.$$.fragment,Sp),Sp.forEach(o),dt.forEach(o),ms=d(t),$e=a(t,"H2",{class:!0});var Hs=s($e);We=a(Hs,"A",{id:!0,class:!0,href:!0});var Wp=s(We);Yn=a(Wp,"SPAN",{});var Qp=s(Yn);h(Rt.$$.fragment,Qp),Qp.forEach(o),Wp.forEach(o),vl=d(Hs),Hn=a(Hs,"SPAN",{});var Yp=s(Hn);bl=i(Yp,"FlaxModelMixin"),Yp.forEach(o),Hs.forEach(o),us=d(t),U=a(t,"DIV",{class:!0});var C=s(U);h(Zt.$$.fragment,C),xl=d(C),Gn=a(C,"P",{});var Hp=s(Gn);yl=i(Hp,"Base class for all flax models."),Hp.forEach(o),$l=d(C),Qo=a(C,"P",{});var jc=s(Qo);Yo=a(jc,"A",{href:!0});var Gp=s(Yo);wl=i(Gp,"FlaxModelMixin"),Gp.forEach(o),Dl=i(jc,` takes care of storing the configuration of the models and handles methods for loading,
downloading and saving models.`),jc.forEach(o),kl=d(C),O=a(C,"DIV",{class:!0});var ne=s(O);h(eo.$$.fragment,ne),Ml=d(ne),Jn=a(ne,"P",{});var Jp=s(Jn);El=i(Jp,"Instantiate a pretrained flax model from a pre-trained model configuration."),Jp.forEach(o),Ul=d(ne),to=a(ne,"P",{});var Gs=s(to);Al=i(Gs,"The warning "),Rn=a(Gs,"EM",{});var Rp=s(Rn);Nl=i(Rp,"Weights from XXX not initialized from pretrained model"),Rp.forEach(o),Tl=i(Gs,` means that the weights of XXX do not come
pretrained with the rest of the model. It is up to you to train those weights with a downstream fine-tuning
task.`),Gs.forEach(o),Fl=d(ne),oo=a(ne,"P",{});var Js=s(oo);Cl=i(Js,"The warning "),Zn=a(Js,"EM",{});var Zp=s(Zn);jl=i(Zp,"Weights from XXX not used in YYY"),Zp.forEach(o),Ll=i(Js,` means that the layer XXX is not used by YYY, therefore those
weights are discarded.`),Js.forEach(o),Ol=d(ne),h(Qe.$$.fragment,ne),ne.forEach(o),Pl=d(C),Ye=a(C,"DIV",{class:!0});var Rs=s(Ye);h(no.$$.fragment,Rs),ql=d(Rs),ao=a(Rs,"P",{});var Zs=s(ao);Vl=i(Zs,`Save a model and its configuration file to a directory, so that it can be re-loaded using the
`),ea=a(Zs,"CODE",{});var ef=s(ea);Bl=i(ef,"[from_pretrained()](/docs/diffusers/main/en/api/models#diffusers.FlaxModelMixin.from_pretrained)"),ef.forEach(o),Il=i(Zs," class method"),Zs.forEach(o),Rs.forEach(o),zl=d(C),S=a(C,"DIV",{class:!0});var ct=s(S);h(so.$$.fragment,ct),Kl=d(ct),z=a(ct,"P",{});var ae=s(z);Xl=i(ae,"Cast the floating-point "),ta=a(ae,"CODE",{});var tf=s(ta);Sl=i(tf,"params"),tf.forEach(o),Wl=i(ae," to "),oa=a(ae,"CODE",{});var of=s(oa);Ql=i(of,"jax.numpy.bfloat16"),of.forEach(o),Yl=i(ae,". This returns a new "),na=a(ae,"CODE",{});var nf=s(na);Hl=i(nf,"params"),nf.forEach(o),Gl=i(ae,` tree and does not cast
the `),aa=a(ae,"CODE",{});var af=s(aa);Jl=i(af,"params"),af.forEach(o),Rl=i(ae," in place."),ae.forEach(o),Zl=d(ct),sa=a(ct,"P",{});var sf=s(sa);ed=i(sf,`This method can be used on TPU to explicitly convert the model parameters to bfloat16 precision to do full
half-precision training or to save weights in bfloat16 for inference in order to save memory and improve speed.`),sf.forEach(o),td=d(ct),h(He.$$.fragment,ct),ct.forEach(o),od=d(C),W=a(C,"DIV",{class:!0});var pt=s(W);h(ro.$$.fragment,pt),nd=d(pt),K=a(pt,"P",{});var se=s(K);ad=i(se,"Cast the floating-point "),ra=a(se,"CODE",{});var rf=s(ra);sd=i(rf,"params"),rf.forEach(o),rd=i(se," to "),ia=a(se,"CODE",{});var lf=s(ia);id=i(lf,"jax.numpy.float16"),lf.forEach(o),ld=i(se,". This returns a new "),la=a(se,"CODE",{});var df=s(la);dd=i(df,"params"),df.forEach(o),cd=i(se,` tree and does not cast the
`),da=a(se,"CODE",{});var cf=s(da);pd=i(cf,"params"),cf.forEach(o),fd=i(se," in place."),se.forEach(o),md=d(pt),ca=a(pt,"P",{});var pf=s(ca);ud=i(pf,`This method can be used on GPU to explicitly convert the model parameters to float16 precision to do full
half-precision training or to save weights in float16 for inference in order to save memory and improve speed.`),pf.forEach(o),hd=d(pt),h(Ge.$$.fragment,pt),pt.forEach(o),gd=d(C),oe=a(C,"DIV",{class:!0});var Zo=s(oe);h(io.$$.fragment,Zo),_d=d(Zo),X=a(Zo,"P",{});var re=s(X);vd=i(re,"Cast the floating-point "),pa=a(re,"CODE",{});var ff=s(pa);bd=i(ff,"params"),ff.forEach(o),xd=i(re," to "),fa=a(re,"CODE",{});var mf=s(fa);yd=i(mf,"jax.numpy.float32"),mf.forEach(o),$d=i(re,`. This method can be used to explicitly convert the
model parameters to fp32 precision. This returns a new `),ma=a(re,"CODE",{});var uf=s(ma);wd=i(uf,"params"),uf.forEach(o),Dd=i(re," tree and does not cast the "),ua=a(re,"CODE",{});var hf=s(ua);kd=i(hf,"params"),hf.forEach(o),Md=i(re," in place."),re.forEach(o),Ed=d(Zo),h(Je.$$.fragment,Zo),Zo.forEach(o),C.forEach(o),hs=d(t),we=a(t,"H2",{class:!0});var er=s(we);Re=a(er,"A",{id:!0,class:!0,href:!0});var gf=s(Re);ha=a(gf,"SPAN",{});var _f=s(ha);h(lo.$$.fragment,_f),_f.forEach(o),gf.forEach(o),Ud=d(er),ga=a(er,"SPAN",{});var vf=s(ga);Ad=i(vf,"FlaxUNet2DConditionOutput"),vf.forEach(o),er.forEach(o),gs=d(t),De=a(t,"DIV",{class:!0});var tr=s(De);h(co.$$.fragment,tr),Nd=d(tr),Ze=a(tr,"DIV",{class:!0});var or=s(Ze);h(po.$$.fragment,or),Td=d(or),_a=a(or,"P",{});var bf=s(_a);Fd=i(bf,"\u201CReturns a new object replacing the specified fields with new values."),bf.forEach(o),or.forEach(o),tr.forEach(o),_s=d(t),ke=a(t,"H2",{class:!0});var nr=s(ke);et=a(nr,"A",{id:!0,class:!0,href:!0});var xf=s(et);va=a(xf,"SPAN",{});var yf=s(va);h(fo.$$.fragment,yf),yf.forEach(o),xf.forEach(o),Cd=d(nr),ba=a(nr,"SPAN",{});var $f=s(ba);jd=i($f,"FlaxUNet2DConditionModel"),$f.forEach(o),nr.forEach(o),vs=d(t),T=a(t,"DIV",{class:!0});var Q=s(T);h(mo.$$.fragment,Q),Ld=d(Q),xa=a(Q,"P",{});var wf=s(xa);Od=i(wf,`FlaxUNet2DConditionModel is a conditional 2D UNet model that takes in a noisy sample, conditional state, and a
timestep and returns sample shaped output.`),wf.forEach(o),Pd=d(Q),uo=a(Q,"P",{});var ar=s(uo);qd=i(ar,"This model inherits from "),Ho=a(ar,"A",{href:!0});var Df=s(Ho);Vd=i(Df,"FlaxModelMixin"),Df.forEach(o),Bd=i(ar,`. Check the superclass documentation for the generic methods the library
implements for all the models (such as downloading or saving, etc.)`),ar.forEach(o),Id=d(Q),ho=a(Q,"P",{});var sr=s(ho);zd=i(sr,"Also, this model is a Flax Linen "),go=a(sr,"A",{href:!0,rel:!0});var kf=s(go);Kd=i(kf,"flax.linen.Module"),kf.forEach(o),Xd=i(sr,`
subclass. Use it as a regular Flax linen Module and refer to the Flax documentation for all matter related to
general usage and behavior.`),sr.forEach(o),Sd=d(Q),ya=a(Q,"P",{});var Mf=s(ya);Wd=i(Mf,"Finally, this model supports inherent JAX features such as:"),Mf.forEach(o),Qd=d(Q),Y=a(Q,"UL",{});var ft=s(Y);$a=a(ft,"LI",{});var Ef=s($a);_o=a(Ef,"A",{href:!0,rel:!0});var Uf=s(_o);Yd=i(Uf,"Just-In-Time (JIT) compilation"),Uf.forEach(o),Ef.forEach(o),Hd=d(ft),wa=a(ft,"LI",{});var Af=s(wa);vo=a(Af,"A",{href:!0,rel:!0});var Nf=s(vo);Gd=i(Nf,"Automatic Differentiation"),Nf.forEach(o),Af.forEach(o),Jd=d(ft),Da=a(ft,"LI",{});var Tf=s(Da);bo=a(Tf,"A",{href:!0,rel:!0});var Ff=s(bo);Rd=i(Ff,"Vectorization"),Ff.forEach(o),Tf.forEach(o),Zd=d(ft),ka=a(ft,"LI",{});var Cf=s(ka);xo=a(Cf,"A",{href:!0,rel:!0});var jf=s(xo);ec=i(jf,"Parallelization"),jf.forEach(o),Cf.forEach(o),ft.forEach(o),Q.forEach(o),bs=d(t),Me=a(t,"H2",{class:!0});var rr=s(Me);tt=a(rr,"A",{id:!0,class:!0,href:!0});var Lf=s(tt);Ma=a(Lf,"SPAN",{});var Of=s(Ma);h(yo.$$.fragment,Of),Of.forEach(o),Lf.forEach(o),tc=d(rr),Ea=a(rr,"SPAN",{});var Pf=s(Ea);oc=i(Pf,"FlaxDecoderOutput"),Pf.forEach(o),rr.forEach(o),xs=d(t),H=a(t,"DIV",{class:!0});var en=s(H);h($o.$$.fragment,en),nc=d(en),Ua=a(en,"P",{});var qf=s(Ua);ac=i(qf,"Output of decoding method."),qf.forEach(o),sc=d(en),ot=a(en,"DIV",{class:!0});var ir=s(ot);h(wo.$$.fragment,ir),rc=d(ir),Aa=a(ir,"P",{});var Vf=s(Aa);ic=i(Vf,"\u201CReturns a new object replacing the specified fields with new values."),Vf.forEach(o),ir.forEach(o),en.forEach(o),ys=d(t),Ee=a(t,"H2",{class:!0});var lr=s(Ee);nt=a(lr,"A",{id:!0,class:!0,href:!0});var Bf=s(nt);Na=a(Bf,"SPAN",{});var If=s(Na);h(Do.$$.fragment,If),If.forEach(o),Bf.forEach(o),lc=d(lr),Ta=a(lr,"SPAN",{});var zf=s(Ta);dc=i(zf,"FlaxAutoencoderKLOutput"),zf.forEach(o),lr.forEach(o),$s=d(t),G=a(t,"DIV",{class:!0});var tn=s(G);h(ko.$$.fragment,tn),cc=d(tn),Fa=a(tn,"P",{});var Kf=s(Fa);pc=i(Kf,"Output of AutoencoderKL encoding method."),Kf.forEach(o),fc=d(tn),at=a(tn,"DIV",{class:!0});var dr=s(at);h(Mo.$$.fragment,dr),mc=d(dr),Ca=a(dr,"P",{});var Xf=s(Ca);uc=i(Xf,"\u201CReturns a new object replacing the specified fields with new values."),Xf.forEach(o),dr.forEach(o),tn.forEach(o),ws=d(t),Ue=a(t,"H2",{class:!0});var cr=s(Ue);st=a(cr,"A",{id:!0,class:!0,href:!0});var Sf=s(st);ja=a(Sf,"SPAN",{});var Wf=s(ja);h(Eo.$$.fragment,Wf),Wf.forEach(o),Sf.forEach(o),hc=d(cr),La=a(cr,"SPAN",{});var Qf=s(La);gc=i(Qf,"FlaxAutoencoderKL"),Qf.forEach(o),cr.forEach(o),Ds=d(t),j=a(t,"DIV",{class:!0});var ie=s(j);h(Uo.$$.fragment,ie),_c=d(ie),Oa=a(ie,"P",{});var Yf=s(Oa);vc=i(Yf,`Flax Implementation of Variational Autoencoder (VAE) model with KL loss from the paper Auto-Encoding Variational
Bayes by Diederik P. Kingma and Max Welling.`),Yf.forEach(o),bc=d(ie),Ao=a(ie,"P",{});var pr=s(Ao);xc=i(pr,"This model is a Flax Linen "),No=a(pr,"A",{href:!0,rel:!0});var Hf=s(No);yc=i(Hf,"flax.linen.Module"),Hf.forEach(o),$c=i(pr,`
subclass. Use it as a regular Flax linen Module and refer to the Flax documentation for all matter related to
general usage and behavior.`),pr.forEach(o),wc=d(ie),Pa=a(ie,"P",{});var Gf=s(Pa);Dc=i(Gf,"Finally, this model supports inherent JAX features such as:"),Gf.forEach(o),kc=d(ie),J=a(ie,"UL",{});var mt=s(J);qa=a(mt,"LI",{});var Jf=s(qa);To=a(Jf,"A",{href:!0,rel:!0});var Rf=s(To);Mc=i(Rf,"Just-In-Time (JIT) compilation"),Rf.forEach(o),Jf.forEach(o),Ec=d(mt),Va=a(mt,"LI",{});var Zf=s(Va);Fo=a(Zf,"A",{href:!0,rel:!0});var em=s(Fo);Uc=i(em,"Automatic Differentiation"),em.forEach(o),Zf.forEach(o),Ac=d(mt),Ba=a(mt,"LI",{});var tm=s(Ba);Co=a(tm,"A",{href:!0,rel:!0});var om=s(Co);Nc=i(om,"Vectorization"),om.forEach(o),tm.forEach(o),Tc=d(mt),Ia=a(mt,"LI",{});var nm=s(Ia);jo=a(nm,"A",{href:!0,rel:!0});var am=s(jo);Fc=i(am,"Parallelization"),am.forEach(o),nm.forEach(o),mt.forEach(o),ie.forEach(o),this.h()},h(){c(x,"name","hf:doc:metadata"),c(x,"content",JSON.stringify(vm)),c(y,"id","models"),c(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y,"href","#models"),c($,"class","relative group"),c(Te,"id","diffusers.ModelMixin"),c(Te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Te,"href","#diffusers.ModelMixin"),c(le,"class","relative group"),c(qo,"href","/docs/diffusers/main/en/api/models#diffusers.ModelMixin"),c(Vo,"href","/docs/diffusers/main/en/api/models#diffusers.ModelMixin.save_pretrained"),c(ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(te,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oe,"id","diffusers.models.unet_2d.UNet2DOutput"),c(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Oe,"href","#diffusers.models.unet_2d.UNet2DOutput"),c(ce,"class","relative group"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pe,"id","diffusers.UNet2DModel"),c(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pe,"href","#diffusers.UNet2DModel"),c(pe,"class","relative group"),c(Bo,"href","/docs/diffusers/main/en/api/models#diffusers.ModelMixin"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qe,"id","diffusers.models.unet_2d_condition.UNet2DConditionOutput"),c(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qe,"href","#diffusers.models.unet_2d_condition.UNet2DConditionOutput"),c(fe,"class","relative group"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ve,"id","diffusers.UNet2DConditionModel"),c(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ve,"href","#diffusers.UNet2DConditionModel"),c(me,"class","relative group"),c(zo,"href","/docs/diffusers/main/en/api/models#diffusers.ModelMixin"),c(Be,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ie,"id","diffusers.models.vae.DecoderOutput"),c(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ie,"href","#diffusers.models.vae.DecoderOutput"),c(ue,"class","relative group"),c(he,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ze,"id","diffusers.models.vae.VQEncoderOutput"),c(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ze,"href","#diffusers.models.vae.VQEncoderOutput"),c(ge,"class","relative group"),c(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ke,"id","diffusers.VQModel"),c(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ke,"href","#diffusers.VQModel"),c(ve,"class","relative group"),c(Ko,"href","/docs/diffusers/main/en/api/models#diffusers.ModelMixin"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xe,"id","diffusers.models.vae.AutoencoderKLOutput"),c(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xe,"href","#diffusers.models.vae.AutoencoderKLOutput"),c(be,"class","relative group"),c(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Se,"id","diffusers.AutoencoderKL"),c(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Se,"href","#diffusers.AutoencoderKL"),c(ye,"class","relative group"),c(So,"href","/docs/diffusers/main/en/api/models#diffusers.ModelMixin"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(We,"id","diffusers.FlaxModelMixin"),c(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(We,"href","#diffusers.FlaxModelMixin"),c($e,"class","relative group"),c(Yo,"href","/docs/diffusers/main/en/api/models#diffusers.FlaxModelMixin"),c(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Re,"id","diffusers.models.unet_2d_condition_flax.FlaxUNet2DConditionOutput"),c(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Re,"href","#diffusers.models.unet_2d_condition_flax.FlaxUNet2DConditionOutput"),c(we,"class","relative group"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(et,"id","diffusers.FlaxUNet2DConditionModel"),c(et,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(et,"href","#diffusers.FlaxUNet2DConditionModel"),c(ke,"class","relative group"),c(Ho,"href","/docs/diffusers/main/en/api/models#diffusers.FlaxModelMixin"),c(go,"href","https://flax.readthedocs.io/en/latest/flax.linen.html#module"),c(go,"rel","nofollow"),c(_o,"href","https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit"),c(_o,"rel","nofollow"),c(vo,"href","https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation"),c(vo,"rel","nofollow"),c(bo,"href","https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap"),c(bo,"rel","nofollow"),c(xo,"href","https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap"),c(xo,"rel","nofollow"),c(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tt,"id","diffusers.models.vae_flax.FlaxDecoderOutput"),c(tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tt,"href","#diffusers.models.vae_flax.FlaxDecoderOutput"),c(Me,"class","relative group"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nt,"id","diffusers.models.vae_flax.FlaxAutoencoderKLOutput"),c(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nt,"href","#diffusers.models.vae_flax.FlaxAutoencoderKLOutput"),c(Ee,"class","relative group"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(st,"id","diffusers.FlaxAutoencoderKL"),c(st,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(st,"href","#diffusers.FlaxAutoencoderKL"),c(Ue,"class","relative group"),c(No,"href","https://flax.readthedocs.io/en/latest/flax.linen.html#module"),c(No,"rel","nofollow"),c(To,"href","https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit"),c(To,"rel","nofollow"),c(Fo,"href","https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation"),c(Fo,"rel","nofollow"),c(Co,"href","https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap"),c(Co,"rel","nofollow"),c(jo,"href","https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap"),c(jo,"rel","nofollow"),c(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,p){e(document.head,x),f(t,M,p),f(t,$,p),e($,y),e(y,k),g(m,k,null),e($,w),e($,Ne),e(Ne,hr),f(t,Wa,p),f(t,R,p),e(R,gr),e(R,on),e(on,_r),e(R,vr),e(R,nn),e(nn,br),e(R,xr),f(t,Qa,p),f(t,le,p),e(le,Te),e(Te,an),g(ut,an,null),e(le,yr),e(le,sn),e(sn,$r),f(t,Ya,p),f(t,E,p),g(ht,E,null),e(E,wr),e(E,rn),e(rn,Dr),e(E,kr),e(E,Po),e(Po,qo),e(qo,Mr),e(Po,Er),e(E,Ur),e(E,ln),e(ln,Z),e(Z,dn),e(dn,Ar),e(Z,Nr),e(Z,cn),e(cn,Tr),e(Z,Fr),e(Z,Vo),e(Vo,Cr),e(Z,jr),e(E,Lr),e(E,ee),g(gt,ee,null),e(ee,Or),e(ee,pn),e(pn,Pr),e(ee,qr),e(ee,fn),e(fn,Vr),e(E,Br),e(E,te),g(_t,te,null),e(te,Ir),e(te,mn),e(mn,zr),e(te,Kr),e(te,un),e(un,Xr),e(E,Sr),e(E,A),g(vt,A,null),e(A,Wr),e(A,hn),e(hn,Qr),e(A,Yr),e(A,de),e(de,Hr),e(de,gn),e(gn,Gr),e(de,Jr),e(de,_n),e(_n,Rr),e(de,Zr),e(A,ei),e(A,bt),e(bt,ti),e(bt,vn),e(vn,oi),e(bt,ni),e(A,ai),e(A,xt),e(xt,si),e(xt,bn),e(bn,ri),e(xt,ii),e(A,li),g(Fe,A,null),e(A,di),g(Ce,A,null),e(E,ci),e(E,je),g(yt,je,null),e(je,pi),e(je,xn),e(xn,fi),e(E,mi),e(E,Le),g($t,Le,null),e(Le,ui),e(Le,wt),e(wt,hi),e(wt,yn),e(yn,gi),e(wt,_i),f(t,Ha,p),f(t,ce,p),e(ce,Oe),e(Oe,$n),g(Dt,$n,null),e(ce,vi),e(ce,wn),e(wn,bi),f(t,Ga,p),f(t,kt,p),g(Mt,kt,null),f(t,Ja,p),f(t,pe,p),e(pe,Pe),e(Pe,Dn),g(Et,Dn,null),e(pe,xi),e(pe,kn),e(kn,yi),f(t,Ra,p),f(t,q,p),g(Ut,q,null),e(q,$i),e(q,Mn),e(Mn,wi),e(q,Di),e(q,At),e(At,ki),e(At,Bo),e(Bo,Mi),e(At,Ei),e(q,Ui),e(q,Io),g(Nt,Io,null),f(t,Za,p),f(t,fe,p),e(fe,qe),e(qe,En),g(Tt,En,null),e(fe,Ai),e(fe,Un),e(Un,Ni),f(t,es,p),f(t,Ft,p),g(Ct,Ft,null),f(t,ts,p),f(t,me,p),e(me,Ve),e(Ve,An),g(jt,An,null),e(me,Ti),e(me,Nn),e(Nn,Fi),f(t,os,p),f(t,V,p),g(Lt,V,null),e(V,Ci),e(V,Tn),e(Tn,ji),e(V,Li),e(V,Ot),e(Ot,Oi),e(Ot,zo),e(zo,Pi),e(Ot,qi),e(V,Vi),e(V,Be),g(Pt,Be,null),e(Be,Bi),e(Be,Fn),e(Fn,Ii),f(t,ns,p),f(t,ue,p),e(ue,Ie),e(Ie,Cn),g(qt,Cn,null),e(ue,zi),e(ue,jn),e(jn,Ki),f(t,as,p),f(t,he,p),g(Vt,he,null),e(he,Xi),e(he,Ln),e(Ln,Si),f(t,ss,p),f(t,ge,p),e(ge,ze),e(ze,On),g(Bt,On,null),e(ge,Wi),e(ge,Pn),e(Pn,Qi),f(t,rs,p),f(t,_e,p),g(It,_e,null),e(_e,Yi),e(_e,qn),e(qn,Hi),f(t,is,p),f(t,ve,p),e(ve,Ke),e(Ke,Vn),g(zt,Vn,null),e(ve,Gi),e(ve,Bn),e(Bn,Ji),f(t,ls,p),f(t,B,p),g(Kt,B,null),e(B,Ri),e(B,In),e(In,Zi),e(B,el),e(B,Xt),e(Xt,tl),e(Xt,Ko),e(Ko,ol),e(Xt,nl),e(B,al),e(B,Xo),g(St,Xo,null),f(t,ds,p),f(t,be,p),e(be,Xe),e(Xe,zn),g(Wt,zn,null),e(be,sl),e(be,Kn),e(Kn,rl),f(t,cs,p),f(t,xe,p),g(Qt,xe,null),e(xe,il),e(xe,Xn),e(Xn,ll),f(t,ps,p),f(t,ye,p),e(ye,Se),e(Se,Sn),g(Yt,Sn,null),e(ye,dl),e(ye,Wn),e(Wn,cl),f(t,fs,p),f(t,I,p),g(Ht,I,null),e(I,pl),e(I,Qn),e(Qn,fl),e(I,ml),e(I,Gt),e(Gt,ul),e(Gt,So),e(So,hl),e(Gt,gl),e(I,_l),e(I,Wo),g(Jt,Wo,null),f(t,ms,p),f(t,$e,p),e($e,We),e(We,Yn),g(Rt,Yn,null),e($e,vl),e($e,Hn),e(Hn,bl),f(t,us,p),f(t,U,p),g(Zt,U,null),e(U,xl),e(U,Gn),e(Gn,yl),e(U,$l),e(U,Qo),e(Qo,Yo),e(Yo,wl),e(Qo,Dl),e(U,kl),e(U,O),g(eo,O,null),e(O,Ml),e(O,Jn),e(Jn,El),e(O,Ul),e(O,to),e(to,Al),e(to,Rn),e(Rn,Nl),e(to,Tl),e(O,Fl),e(O,oo),e(oo,Cl),e(oo,Zn),e(Zn,jl),e(oo,Ll),e(O,Ol),g(Qe,O,null),e(U,Pl),e(U,Ye),g(no,Ye,null),e(Ye,ql),e(Ye,ao),e(ao,Vl),e(ao,ea),e(ea,Bl),e(ao,Il),e(U,zl),e(U,S),g(so,S,null),e(S,Kl),e(S,z),e(z,Xl),e(z,ta),e(ta,Sl),e(z,Wl),e(z,oa),e(oa,Ql),e(z,Yl),e(z,na),e(na,Hl),e(z,Gl),e(z,aa),e(aa,Jl),e(z,Rl),e(S,Zl),e(S,sa),e(sa,ed),e(S,td),g(He,S,null),e(U,od),e(U,W),g(ro,W,null),e(W,nd),e(W,K),e(K,ad),e(K,ra),e(ra,sd),e(K,rd),e(K,ia),e(ia,id),e(K,ld),e(K,la),e(la,dd),e(K,cd),e(K,da),e(da,pd),e(K,fd),e(W,md),e(W,ca),e(ca,ud),e(W,hd),g(Ge,W,null),e(U,gd),e(U,oe),g(io,oe,null),e(oe,_d),e(oe,X),e(X,vd),e(X,pa),e(pa,bd),e(X,xd),e(X,fa),e(fa,yd),e(X,$d),e(X,ma),e(ma,wd),e(X,Dd),e(X,ua),e(ua,kd),e(X,Md),e(oe,Ed),g(Je,oe,null),f(t,hs,p),f(t,we,p),e(we,Re),e(Re,ha),g(lo,ha,null),e(we,Ud),e(we,ga),e(ga,Ad),f(t,gs,p),f(t,De,p),g(co,De,null),e(De,Nd),e(De,Ze),g(po,Ze,null),e(Ze,Td),e(Ze,_a),e(_a,Fd),f(t,_s,p),f(t,ke,p),e(ke,et),e(et,va),g(fo,va,null),e(ke,Cd),e(ke,ba),e(ba,jd),f(t,vs,p),f(t,T,p),g(mo,T,null),e(T,Ld),e(T,xa),e(xa,Od),e(T,Pd),e(T,uo),e(uo,qd),e(uo,Ho),e(Ho,Vd),e(uo,Bd),e(T,Id),e(T,ho),e(ho,zd),e(ho,go),e(go,Kd),e(ho,Xd),e(T,Sd),e(T,ya),e(ya,Wd),e(T,Qd),e(T,Y),e(Y,$a),e($a,_o),e(_o,Yd),e(Y,Hd),e(Y,wa),e(wa,vo),e(vo,Gd),e(Y,Jd),e(Y,Da),e(Da,bo),e(bo,Rd),e(Y,Zd),e(Y,ka),e(ka,xo),e(xo,ec),f(t,bs,p),f(t,Me,p),e(Me,tt),e(tt,Ma),g(yo,Ma,null),e(Me,tc),e(Me,Ea),e(Ea,oc),f(t,xs,p),f(t,H,p),g($o,H,null),e(H,nc),e(H,Ua),e(Ua,ac),e(H,sc),e(H,ot),g(wo,ot,null),e(ot,rc),e(ot,Aa),e(Aa,ic),f(t,ys,p),f(t,Ee,p),e(Ee,nt),e(nt,Na),g(Do,Na,null),e(Ee,lc),e(Ee,Ta),e(Ta,dc),f(t,$s,p),f(t,G,p),g(ko,G,null),e(G,cc),e(G,Fa),e(Fa,pc),e(G,fc),e(G,at),g(Mo,at,null),e(at,mc),e(at,Ca),e(Ca,uc),f(t,ws,p),f(t,Ue,p),e(Ue,st),e(st,ja),g(Eo,ja,null),e(Ue,hc),e(Ue,La),e(La,gc),f(t,Ds,p),f(t,j,p),g(Uo,j,null),e(j,_c),e(j,Oa),e(Oa,vc),e(j,bc),e(j,Ao),e(Ao,xc),e(Ao,No),e(No,yc),e(Ao,$c),e(j,wc),e(j,Pa),e(Pa,Dc),e(j,kc),e(j,J),e(J,qa),e(qa,To),e(To,Mc),e(J,Ec),e(J,Va),e(Va,Fo),e(Fo,Uc),e(J,Ac),e(J,Ba),e(Ba,Co),e(Co,Nc),e(J,Tc),e(J,Ia),e(Ia,jo),e(jo,Fc),ks=!0},p(t,[p]){const Lo={};p&2&&(Lo.$$scope={dirty:p,ctx:t}),Fe.$set(Lo);const za={};p&2&&(za.$$scope={dirty:p,ctx:t}),Ce.$set(za);const Ka={};p&2&&(Ka.$$scope={dirty:p,ctx:t}),Qe.$set(Ka);const Xa={};p&2&&(Xa.$$scope={dirty:p,ctx:t}),He.$set(Xa);const Ae={};p&2&&(Ae.$$scope={dirty:p,ctx:t}),Ge.$set(Ae);const Sa={};p&2&&(Sa.$$scope={dirty:p,ctx:t}),Je.$set(Sa)},i(t){ks||(_(m.$$.fragment,t),_(ut.$$.fragment,t),_(ht.$$.fragment,t),_(gt.$$.fragment,t),_(_t.$$.fragment,t),_(vt.$$.fragment,t),_(Fe.$$.fragment,t),_(Ce.$$.fragment,t),_(yt.$$.fragment,t),_($t.$$.fragment,t),_(Dt.$$.fragment,t),_(Mt.$$.fragment,t),_(Et.$$.fragment,t),_(Ut.$$.fragment,t),_(Nt.$$.fragment,t),_(Tt.$$.fragment,t),_(Ct.$$.fragment,t),_(jt.$$.fragment,t),_(Lt.$$.fragment,t),_(Pt.$$.fragment,t),_(qt.$$.fragment,t),_(Vt.$$.fragment,t),_(Bt.$$.fragment,t),_(It.$$.fragment,t),_(zt.$$.fragment,t),_(Kt.$$.fragment,t),_(St.$$.fragment,t),_(Wt.$$.fragment,t),_(Qt.$$.fragment,t),_(Yt.$$.fragment,t),_(Ht.$$.fragment,t),_(Jt.$$.fragment,t),_(Rt.$$.fragment,t),_(Zt.$$.fragment,t),_(eo.$$.fragment,t),_(Qe.$$.fragment,t),_(no.$$.fragment,t),_(so.$$.fragment,t),_(He.$$.fragment,t),_(ro.$$.fragment,t),_(Ge.$$.fragment,t),_(io.$$.fragment,t),_(Je.$$.fragment,t),_(lo.$$.fragment,t),_(co.$$.fragment,t),_(po.$$.fragment,t),_(fo.$$.fragment,t),_(mo.$$.fragment,t),_(yo.$$.fragment,t),_($o.$$.fragment,t),_(wo.$$.fragment,t),_(Do.$$.fragment,t),_(ko.$$.fragment,t),_(Mo.$$.fragment,t),_(Eo.$$.fragment,t),_(Uo.$$.fragment,t),ks=!0)},o(t){v(m.$$.fragment,t),v(ut.$$.fragment,t),v(ht.$$.fragment,t),v(gt.$$.fragment,t),v(_t.$$.fragment,t),v(vt.$$.fragment,t),v(Fe.$$.fragment,t),v(Ce.$$.fragment,t),v(yt.$$.fragment,t),v($t.$$.fragment,t),v(Dt.$$.fragment,t),v(Mt.$$.fragment,t),v(Et.$$.fragment,t),v(Ut.$$.fragment,t),v(Nt.$$.fragment,t),v(Tt.$$.fragment,t),v(Ct.$$.fragment,t),v(jt.$$.fragment,t),v(Lt.$$.fragment,t),v(Pt.$$.fragment,t),v(qt.$$.fragment,t),v(Vt.$$.fragment,t),v(Bt.$$.fragment,t),v(It.$$.fragment,t),v(zt.$$.fragment,t),v(Kt.$$.fragment,t),v(St.$$.fragment,t),v(Wt.$$.fragment,t),v(Qt.$$.fragment,t),v(Yt.$$.fragment,t),v(Ht.$$.fragment,t),v(Jt.$$.fragment,t),v(Rt.$$.fragment,t),v(Zt.$$.fragment,t),v(eo.$$.fragment,t),v(Qe.$$.fragment,t),v(no.$$.fragment,t),v(so.$$.fragment,t),v(He.$$.fragment,t),v(ro.$$.fragment,t),v(Ge.$$.fragment,t),v(io.$$.fragment,t),v(Je.$$.fragment,t),v(lo.$$.fragment,t),v(co.$$.fragment,t),v(po.$$.fragment,t),v(fo.$$.fragment,t),v(mo.$$.fragment,t),v(yo.$$.fragment,t),v($o.$$.fragment,t),v(wo.$$.fragment,t),v(Do.$$.fragment,t),v(ko.$$.fragment,t),v(Mo.$$.fragment,t),v(Eo.$$.fragment,t),v(Uo.$$.fragment,t),ks=!1},d(t){o(x),t&&o(M),t&&o($),b(m),t&&o(Wa),t&&o(R),t&&o(Qa),t&&o(le),b(ut),t&&o(Ya),t&&o(E),b(ht),b(gt),b(_t),b(vt),b(Fe),b(Ce),b(yt),b($t),t&&o(Ha),t&&o(ce),b(Dt),t&&o(Ga),t&&o(kt),b(Mt),t&&o(Ja),t&&o(pe),b(Et),t&&o(Ra),t&&o(q),b(Ut),b(Nt),t&&o(Za),t&&o(fe),b(Tt),t&&o(es),t&&o(Ft),b(Ct),t&&o(ts),t&&o(me),b(jt),t&&o(os),t&&o(V),b(Lt),b(Pt),t&&o(ns),t&&o(ue),b(qt),t&&o(as),t&&o(he),b(Vt),t&&o(ss),t&&o(ge),b(Bt),t&&o(rs),t&&o(_e),b(It),t&&o(is),t&&o(ve),b(zt),t&&o(ls),t&&o(B),b(Kt),b(St),t&&o(ds),t&&o(be),b(Wt),t&&o(cs),t&&o(xe),b(Qt),t&&o(ps),t&&o(ye),b(Yt),t&&o(fs),t&&o(I),b(Ht),b(Jt),t&&o(ms),t&&o($e),b(Rt),t&&o(us),t&&o(U),b(Zt),b(eo),b(Qe),b(no),b(so),b(He),b(ro),b(Ge),b(io),b(Je),t&&o(hs),t&&o(we),b(lo),t&&o(gs),t&&o(De),b(co),b(po),t&&o(_s),t&&o(ke),b(fo),t&&o(vs),t&&o(T),b(mo),t&&o(bs),t&&o(Me),b(yo),t&&o(xs),t&&o(H),b($o),b(wo),t&&o(ys),t&&o(Ee),b(Do),t&&o($s),t&&o(G),b(ko),b(Mo),t&&o(ws),t&&o(Ue),b(Eo),t&&o(Ds),t&&o(j),b(Uo)}}}const vm={local:"models",sections:[{local:"diffusers.ModelMixin",title:"ModelMixin"},{local:"diffusers.models.unet_2d.UNet2DOutput",title:"UNet2DOutput"},{local:"diffusers.UNet2DModel",title:"UNet2DModel"},{local:"diffusers.models.unet_2d_condition.UNet2DConditionOutput",title:"UNet2DConditionOutput"},{local:"diffusers.UNet2DConditionModel",title:"UNet2DConditionModel"},{local:"diffusers.models.vae.DecoderOutput",title:"DecoderOutput"},{local:"diffusers.models.vae.VQEncoderOutput",title:"VQEncoderOutput"},{local:"diffusers.VQModel",title:"VQModel"},{local:"diffusers.models.vae.AutoencoderKLOutput",title:"AutoencoderKLOutput"},{local:"diffusers.AutoencoderKL",title:"AutoencoderKL"},{local:"diffusers.FlaxModelMixin",title:"FlaxModelMixin"},{local:"diffusers.models.unet_2d_condition_flax.FlaxUNet2DConditionOutput",title:"FlaxUNet2DConditionOutput"},{local:"diffusers.FlaxUNet2DConditionModel",title:"FlaxUNet2DConditionModel"},{local:"diffusers.models.vae_flax.FlaxDecoderOutput",title:"FlaxDecoderOutput"},{local:"diffusers.models.vae_flax.FlaxAutoencoderKLOutput",title:"FlaxAutoencoderKLOutput"},{local:"diffusers.FlaxAutoencoderKL",title:"FlaxAutoencoderKL"}],title:"Models"};function bm(L){return cm(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Mm extends rm{constructor(x){super();im(this,x,bm,_m,lm,{})}}export{Mm as default,vm as metadata};
