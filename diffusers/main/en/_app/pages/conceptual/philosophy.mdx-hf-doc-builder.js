import{S as Le,i as Ae,s as $e,e as n,k as $,w as Pe,t as o,M as Se,c as r,d as t,m as P,a as i,x as ke,h as a,b as l,G as e,g as T,y as De,L as Ie,q as Ge,o as Me,B as Ne,v as Re}from"../../chunks/vendor-hf-doc-builder.js";import{I as qe}from"../../chunks/IconCopyLink-hf-doc-builder.js";function Ce(ce){let f,R,u,m,S,_,z,k,U,q,d,h,B,D,H,J,b,V,j,E,F,K,Q,I,W,X,c,Y,G,Z,ee,M,te,oe,N,ae,se,ne,p,re,w,ie,le,x,de,he,C;return _=new qe({}),{c(){f=n("meta"),R=$(),u=n("h1"),m=n("a"),S=n("span"),Pe(_.$$.fragment),z=$(),k=n("span"),U=o("Philosophy"),q=$(),d=n("ul"),h=n("li"),B=o("Readability and clarity is prefered over highly optimized code. A strong importance is put on providing readable, intuitive and elementary code design. "),D=n("em"),H=o("E.g."),J=o(", the provided "),b=n("a"),V=o("schedulers"),j=o(" are separated from the provided "),E=n("a"),F=o("models"),K=o(" and provide well-commented code that can be read alongside the original paper."),Q=$(),I=n("li"),W=o("Lol"),X=$(),c=n("li"),Y=o("Diffusers is "),G=n("strong"),Z=o("modality independent"),ee=o(" and focusses on providing pretrained models and tools to build systems that generate "),M=n("strong"),te=o("continous outputs"),oe=o(", "),N=n("em"),ae=o("e.g."),se=o(" vision and audio."),ne=$(),p=n("li"),re=o("Diffusion models and schedulers are provided as consise, elementary building blocks whereas diffusion pipelines are a collection of end-to-end diffusion systems that can be used out-of-the-box, should stay as close as possible to their original implementation and can include components of other library, such as text-encoders. Examples for diffusion pipelines are "),w=n("a"),ie=o("Glide"),le=o(" and "),x=n("a"),de=o("Latent Diffusion"),he=o("."),this.h()},l(s){const L=Se('[data-svelte="svelte-1phssyn"]',document.head);f=r(L,"META",{name:!0,content:!0}),L.forEach(t),R=P(s),u=r(s,"H1",{class:!0});var O=i(u);m=r(O,"A",{id:!0,class:!0,href:!0});var fe=i(m);S=r(fe,"SPAN",{});var ue=i(S);ke(_.$$.fragment,ue),ue.forEach(t),fe.forEach(t),z=P(O),k=r(O,"SPAN",{});var pe=i(k);U=a(pe,"Philosophy"),pe.forEach(t),O.forEach(t),q=P(s),d=r(s,"UL",{});var g=i(d);h=r(g,"LI",{});var v=i(h);B=a(v,"Readability and clarity is prefered over highly optimized code. A strong importance is put on providing readable, intuitive and elementary code design. "),D=r(v,"EM",{});var me=i(D);H=a(me,"E.g."),me.forEach(t),J=a(v,", the provided "),b=r(v,"A",{href:!0,rel:!0});var ge=i(b);V=a(ge,"schedulers"),ge.forEach(t),j=a(v," are separated from the provided "),E=r(v,"A",{href:!0,rel:!0});var ve=i(E);F=a(ve,"models"),ve.forEach(t),K=a(v," and provide well-commented code that can be read alongside the original paper."),v.forEach(t),Q=P(g),I=r(g,"LI",{});var ye=i(I);W=a(ye,"Lol"),ye.forEach(t),X=P(g),c=r(g,"LI",{});var y=i(c);Y=a(y,"Diffusers is "),G=r(y,"STRONG",{});var _e=i(G);Z=a(_e,"modality independent"),_e.forEach(t),ee=a(y," and focusses on providing pretrained models and tools to build systems that generate "),M=r(y,"STRONG",{});var be=i(M);te=a(be,"continous outputs"),be.forEach(t),oe=a(y,", "),N=r(y,"EM",{});var Ee=i(N);ae=a(Ee,"e.g."),Ee.forEach(t),se=a(y," vision and audio."),y.forEach(t),ne=P(g),p=r(g,"LI",{});var A=i(p);re=a(A,"Diffusion models and schedulers are provided as consise, elementary building blocks whereas diffusion pipelines are a collection of end-to-end diffusion systems that can be used out-of-the-box, should stay as close as possible to their original implementation and can include components of other library, such as text-encoders. Examples for diffusion pipelines are "),w=r(A,"A",{href:!0,rel:!0});var we=i(w);ie=a(we,"Glide"),we.forEach(t),le=a(A," and "),x=r(A,"A",{href:!0,rel:!0});var xe=i(x);de=a(xe,"Latent Diffusion"),xe.forEach(t),he=a(A,"."),A.forEach(t),g.forEach(t),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(Oe)),l(m,"id","philosophy"),l(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(m,"href","#philosophy"),l(u,"class","relative group"),l(b,"href","https://github.com/huggingface/diffusers/tree/main/src/diffusers/schedulers"),l(b,"rel","nofollow"),l(E,"href","https://github.com/huggingface/diffusers/tree/main/src/diffusers/models"),l(E,"rel","nofollow"),l(w,"href","https://github.com/openai/glide-text2im"),l(w,"rel","nofollow"),l(x,"href","https://github.com/CompVis/latent-diffusion"),l(x,"rel","nofollow")},m(s,L){e(document.head,f),T(s,R,L),T(s,u,L),e(u,m),e(m,S),De(_,S,null),e(u,z),e(u,k),e(k,U),T(s,q,L),T(s,d,L),e(d,h),e(h,B),e(h,D),e(D,H),e(h,J),e(h,b),e(b,V),e(h,j),e(h,E),e(E,F),e(h,K),e(d,Q),e(d,I),e(I,W),e(d,X),e(d,c),e(c,Y),e(c,G),e(G,Z),e(c,ee),e(c,M),e(M,te),e(c,oe),e(c,N),e(N,ae),e(c,se),e(d,ne),e(d,p),e(p,re),e(p,w),e(w,ie),e(p,le),e(p,x),e(x,de),e(p,he),C=!0},p:Ie,i(s){C||(Ge(_.$$.fragment,s),C=!0)},o(s){Me(_.$$.fragment,s),C=!1},d(s){t(f),s&&t(R),s&&t(u),Ne(_),s&&t(q),s&&t(d)}}}const Oe={local:"philosophy",title:"Philosophy"};function Te(ce){return Re(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Be extends Le{constructor(f){super();Ae(this,f,Te,Ce,$e,{})}}export{Be as default,Oe as metadata};
